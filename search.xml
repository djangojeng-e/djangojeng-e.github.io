<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Writing your first Django app, part1 - 1편</title>
    <url>/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/</url>
    <content><![CDATA[<br>

<p>지난시간에 간단한 초기 설정을 마쳤습니다. </p>
<p>공식문서 튜토리얼 진행을 하면서 추가 설정을 같이 진행 합니다. </p>
<br>

<h2 id="초기설정-파이썬-인터프리터-설정"><a href="#초기설정-파이썬-인터프리터-설정" class="headerlink" title="초기설정: 파이썬 인터프리터 설정"></a>초기설정: 파이썬 인터프리터 설정</h2><br>

<p>파이참을 열고, 파이썬 인터프리터를 우리가 생성한 가상환경으로 설정을 해주어야 합니다. </p>
<br>

<blockquote>
<p>파이참에서 <code>FILE</code> 안에 <code>SETTINGS</code> 메뉴를 열어줍니다. </p>
<p><code>python interpreter</code> 설정을 해주어야 합니다. </p>
</blockquote>
<br>

<a id="more"></a><br>

<ol>
<li>맨 오른쪽에 조그마한 설정 아이콘을 클릭 </li>
<li>프로젝트 인터프리터 목록창이 나오는데, 우측에 조그맣게 있는 <code>+</code> 버튼을 눌러서 <code>Add Python Interpreter</code>창 실행 </li>
<li><code>Existing Envrionment</code>를 클릭하고, 이전 포스팅에서 생성한 가상환경 <code>django-tutorial</code>로 설정</li>
<li><code>OK</code> 버튼을 눌러서, 인터프리터 설정 완료 </li>
<li>파이참 재시작 </li>
</ol>
<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image1.png" class="">

<br>

<blockquote>
<p>가상 환경에 깔려 있는 패키지들이 표시됩니다 </p>
</blockquote>
<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image2.png" class=""> 

<br>

<br>

<h2 id="Creating-a-Project-프로젝트-생성하기"><a href="#Creating-a-Project-프로젝트-생성하기" class="headerlink" title="Creating a Project(프로젝트 생성하기)"></a>Creating a Project(프로젝트 생성하기)</h2><br>

<br>

<p>django를 처음 사용하는것이라면, 초기 설정을 잘해야 합니다. </p>
<p><br>예를들면, django 프로젝트에는, django 의 인스턴스를 생성하는 모든 설정들 (아래 참조) 를 자동 생성하는 코드들이 필요합니다.  </p>
<br>

<ul>
<li>Django 데이터베이스 설정 </li>
<li>Django 특화 옵션들 </li>
<li>어플리케이션 특화 옵션들 </li>
</ul>
<br>

<p>폴더 설정을 잘 마쳤으면, 다음 커맨드를 입력하여, 프로젝트를 자동 생성 합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>저는 지난시간에 파이참을 열어놓았기 때문에, 파이참에서 아래와 같이 커맨드를 입력해주었습니다. </p>
<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image3.png" class="">

<br>

<blockquote>
<p>아래와 같이 mysite 라는 폴더와 파일들이 자동 생성 되었습니다. </p>
</blockquote>
<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image4.png" class="">

<br>

<br>

<blockquote>
<p>참고로, </p>
<p>django 프로젝트 이름은 파이썬이나 Django 자체에서 쓰이는 </p>
<p>빌트인 이름들은 피해서 짓습니다. </p>
<p>예) 프로젝트명으로 django 를 사용하지 않습니다 (웹프레임워크 django와 이름 충돌) </p>
<p>예) 프로젝트명으로 test 라고 짓지 않습니다 (파이썬 빌트인 패키지과 충돌)</p>
</blockquote>
<br>

<br>

<h2 id="생성된-프로젝트-둘러보기"><a href="#생성된-프로젝트-둘러보기" class="headerlink" title="생성된 프로젝트 둘러보기"></a>생성된 프로젝트 둘러보기</h2><br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure>

<br>

<p>생성된 프로젝트를 둘러보니, mysite 라는 프로젝트가 생성되고.<br></p>
<p>위의 구조로, 폴더와 파일들이 생성된것을 확인 할수 있습니다. </p>
<br>

<h2 id="프로젝트-파일들"><a href="#프로젝트-파일들" class="headerlink" title="프로젝트 파일들"></a>프로젝트 파일들</h2><br>



<br>

<ul>
<li><p>바깥의 <code>mysite/</code>는 루트 디렉토리로 프로젝트의 컨테이너 입니다. 해당 폴더 이름은 django 로 지을수도 있고. 언제든 이름을 바꿔줄수 있습니다. <br></p>
</li>
<li><p><code>manage.py</code> 는 커맨드 라인 유틸리티로 django project 와 여러가지 방식으로 상호 작용 합니다. <br></p>
</li>
<li><p>안쪽의 <code>mysite/</code> 폴더는 프로젝트를 위한 실제 파이썬 패키지 입니다. 이 이름은 일반 파이썬 패키지명과 같은 방식으로, 폴더내의 어떤것이든 가져오기 위해 필요한 이름입니다. </p>
<br>

<p>예) mysite.urls,  mysite.asgi, mysite.settings<br> </p>
</li>
<li><p><code>mysite/__init__.py</code> 은 비어있는 파일로, 파이썬에게 해당 폴더가 파이썬 패키지라는것을 알려줍니다. 파이썬 초심자라면, 파이썬 문서패키지에 대해 더 읽어보기 섹션을 참조하길 바랍니다. <br></p>
</li>
<li><p><code>mysite/urls.py</code>는 django 프로젝트를 위한 url 선언들이 들어 있습니다. django 로 개발된 사이트의 목차 같은 역할을 합니다. <br></p>
</li>
<li><p><code>mystie/asgi.py</code> 는 <code>ASGI</code>가 호환되는 웹서버의 진입지점으로 django project  를 수행합니다.<br> </p>
</li>
<li><p><code>mysite/wsgi.py</code>는 <code>WSGI</code>가 호환되는 웹서버의 진입지점으로 django project 를 수행합니다.</p>
</li>
</ul>
<br>

<br>

<h2 id="초기설정-마무리"><a href="#초기설정-마무리" class="headerlink" title="초기설정 마무리"></a>초기설정 마무리</h2><br>

<br>

<p>프로젝트 생성이 완료 되었으니, 초반에 설치했던 <code>django-extension</code>를 프로젝트에 등록 해줍니다. </p>
<br>

<p><code>mysite/settings.py</code> 안에 <code>INSTALLED_APPS = []</code> 안쪽에<br><br></p>
<blockquote>
<p><code>django_extensions</code>를 추가해 줍니다.  </p>
</blockquote>
<br>

<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image5.png" class="">



<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>Django 프로젝트 생성을 완료하였습니다. 초기 설정은 아직 좀 더 남아 있기는 하지만, </p>
<p>이정도로 마치고 넘어가면서. 추가로 필요한 설정이 있으면, 그때마다 하겠습니다. </p>
<br>]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part1 - 초기설정</title>
    <url>/2020/04/11/Writing-your-first-Django-app-part1-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h2 id="장고-공식문서-튜토리얼-초기세팅"><a href="#장고-공식문서-튜토리얼-초기세팅" class="headerlink" title="장고 공식문서 튜토리얼 초기세팅"></a>장고 공식문서 튜토리얼 초기세팅</h2><br>

<br>

<p>공식문서에 나와있는 첫번째 앱 만들기 튜토리얼을 진행해봅니다. </p>
<br>

<p>이 튜토리얼을 통해서, 아주 기본적인 투표앱을 만드는 과정을 해보겠습니다. </p>
<br>

<br>

<p>투표앱은 두부분으로 이루어져있습니다. </p>
<br>

<p>1) 사람들이 투표소 (투표의 내역) 를 보고, 투표를 할수 있는 하나의 공용 사이트 </p>
<p>2) 투표소 (투표의 내역) 를 추가, 변경, 삭제할수 있는 관리자 사이트</p>
<br>

<a id="more"></a>

<br>

<p>Django가 이미 설치 되어있다고 가정하고 진행되는 튜토리얼 입니다. </p>
<p><br>아래 커맨드를 사용하여 어떤 버전의 django 가 설치되어 있는지 확인 할수 있습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m django --version</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="튜토리얼-진행전-초기세팅-OS는-Ubuntu18-04"><a href="#튜토리얼-진행전-초기세팅-OS는-Ubuntu18-04" class="headerlink" title="튜토리얼 진행전 초기세팅 (OS는 Ubuntu18.04)"></a>튜토리얼 진행전 초기세팅 (OS는 Ubuntu18.04)</h2><br>

<br>

<h3 id="가상환경-설정"><a href="#가상환경-설정" class="headerlink" title="가상환경 설정"></a>가상환경 설정</h3><br>

<br>

<p>가상환경 설정을 진행 합니다. (가상환경 설정준비가 되어 있지 않다면, 아래 링크 참조)<br></p>
<p><a href="https://djangojeng-e.github.io/2020/04/10/가상환경-pyenv-virtualenv-4편/#more">https://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-4%ED%8E%B8/#more</a></p>
<p><br>저는 아래와 같은 커맨드들을 입력하여. 초기 설정을 진행합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 홈 디렉토리에서 django_tutorial 폴더 생성 </span></span><br><span class="line">mkdir django_tutorial </span><br><span class="line"></span><br><span class="line"><span class="comment"># 홈 디렉토리에서 django_tutorial 폴더로 이동 </span></span><br><span class="line"><span class="built_in">cd</span> django_tutorial </span><br><span class="line"></span><br><span class="line"><span class="comment"># 튜토리얼을 위한 가상환경 생성 (python 3.7.4로 생성) </span></span><br><span class="line">pyenv virtualenv 3.7.4 django_tutorial</span><br><span class="line">Looking <span class="keyword">in</span> links: /tmp/tmp9y92lrdq</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> /home/dhkang/.pyenv/versions/3.7.4/envs/django-tutorial/lib/python3.7/site-packages (40.8.0)</span><br><span class="line">Requirement already satisfied: pip <span class="keyword">in</span> /home/dhkang/.pyenv/versions/3.7.4/envs/django-tutorial/lib/python3.7/site-packages (19.0.3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 해당 폴더에 생성된 가상환경 적용 </span></span><br><span class="line">pyenv <span class="built_in">local</span> django_tutorial</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>폴더에 가상환경 적용 완료 (아래 스크린 캡쳐 참조) </p>
</blockquote>
<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/image1.png" class="">



<br>

<h3 id="Django-설치"><a href="#Django-설치" class="headerlink" title="Django 설치"></a>Django 설치</h3><br>

<p><code>pip list</code>를 실행해서, 현재 설치된 패키지들을 검사합니다. django가 설치되어 있지 않습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip list </span><br><span class="line"></span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        19.0.3 </span><br><span class="line">setuptools 40.8.0 </span><br><span class="line">You are using pip version 19.0.3, however version 20.0.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>pip install django</code> 명령어를 실행해서, django 를 설치합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install django </span><br><span class="line">Installing collected packages: pytz, asgiref, sqlparse, django</span><br><span class="line">Successfully installed asgiref-3.2.7 django-3.0.5 pytz-2019.3 sqlparse-0.3.1</span><br><span class="line">You are using pip version 19.0.3, however version 20.0.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>다시한번 <code>pip list</code>를 실행하면, django 가 설치되어 있는것을 확인 할수 있습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip list </span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">asgiref    3.2.7  </span><br><span class="line">Django     3.0.5  </span><br><span class="line">pip        19.0.3 </span><br><span class="line">pytz       2019.3 </span><br><span class="line">setuptools 40.8.0 </span><br><span class="line">sqlparse   0.3.1</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="Django-Extensions-설치"><a href="#Django-Extensions-설치" class="headerlink" title="Django Extensions 설치"></a>Django Extensions 설치</h3><br>

<p>튜토리얼 진행하면서, shell 을 사용할때가 나올텐데. Shell 대신, shell plus 를 사용하기 위해서 </p>
<p><br><code>django-extensions</code>를 설치해줍니다 <br></p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-extensions</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>django-extensions 를 사용하기 위해선, </p>
<p>추후에 django 프로젝트를 생성하고, </p>
<p><code>settings.py</code> 에 <code>INSTALLED_APPS</code> 에  등록 해주어야 합니다</p>
</blockquote>
<br>

<p><code>pip list</code>를 실행하면, <code>django-extensions</code>가 설치된것을 확인할수 있습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-tutorial) ~/django_tutorial (master)  pip list</span><br><span class="line">Package           Version</span><br><span class="line">----------------- -------</span><br><span class="line">asgiref           3.2.7  </span><br><span class="line">Django            3.0.5  </span><br><span class="line">django-extensions 2.2.9  </span><br><span class="line">pip               19.0.3 </span><br><span class="line">pytz              2019.3 </span><br><span class="line">setuptools        40.8.0 </span><br><span class="line">six               1.14.0 </span><br><span class="line">sqlparse          0.3.1</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h3 id="Pycharm-실행"><a href="#Pycharm-실행" class="headerlink" title="Pycharm 실행"></a>Pycharm 실행</h3><p><br><br></p>
<p>파이참을 실행하는 커맨드는 각자 다를수 있는데.<br></p>
<p>저는 터미널에서 <code>pycharm-community .</code> 을 실행하면 실행이 됩니다. 해당 폴더에서 실행 합니다<br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-tutorial)  ~/django_tutorial (master) pycharm-community .</span><br></pre></td></tr></table></figure>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>간단한 초기설정을 마쳤습니다. </p>
<p>아직 초기 세팅이 다 끝난것은 아닙니다. 파이참 인터프리터 설정도 해주어야 하고, django-extensions 도 세팅을 해주어야 합니다. <br></p>
<p>다음 포스팅 시작할때, 추가 초기설정도 하고, <br>향후 진행하면서 필요한 설정은, 그때그때 진행 하겠습니다. </p>
<br>

<p>튜토리얼을 위한 깃헙 주소 : <a href="https://github.com/djangojeng-e/django_tutorial.git" target="_blank" rel="noopener">https://github.com/djangojeng-e/django_tutorial.git</a></p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
      </tags>
  </entry>
  <entry>
    <title>가상환경 pyenv, virtualenv - 4편</title>
    <url>/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-4%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-4편"><a href="#가상환경-설정-pyenv-virtualenv-4편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv - 4편"></a>가상환경 설정 - pyenv, virtualenv - 4편</h2><h2 id="pyenv-virtualenv를-사용해서-가상환경-사용"><a href="#pyenv-virtualenv를-사용해서-가상환경-사용" class="headerlink" title="pyenv-virtualenv를 사용해서 가상환경 사용"></a><code>pyenv-virtualenv</code>를 사용해서 가상환경 사용</h2><br>

<br>

<p>지난 포스팅에서 파이썬 3.8.0 을 설치하였습니다. </p>
<p>가상환경 생성 준비는 다 된것 같으니. 직접 가상환경을 생성하고 사용해 봅니다. </p>
<br>

<h2 id="파이썬-버전-확인"><a href="#파이썬-버전-확인" class="headerlink" title="파이썬 버전 확인"></a>파이썬 버전 확인</h2><br>

<p><code>pyenv versions</code>를 실행하여, 버전을 확인합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /home/ubuntu/.pyenv/version)</span><br><span class="line">  3.8.0</span><br></pre></td></tr></table></figure>

<br>

<p>현재 시스템에서 사용하고 있는 파이썬 버전이 표시됩니다. <code>3.8.0</code>을 설치하였는데. 아직 사용중이지 않습니다. </p>
<br>

<blockquote>
<p><code>*</code> 가 붙어 있는게 현재 사용하고 있는 버전의 파이썬입니다 </p>
</blockquote>
<br>

<a id="more"></a> 

<br>

<h2 id="시스템-전역에서-사용할-파이썬"><a href="#시스템-전역에서-사용할-파이썬" class="headerlink" title="시스템 전역에서 사용할 파이썬"></a>시스템 전역에서 사용할 파이썬</h2><br>

<br>

<p>3.8.0 을 사용하기 위해, 아래 명령어를 입력합니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv global 3.8.0</span><br></pre></td></tr></table></figure>

<br>

<p>실행하고, 버전을 확인해 보면,<br> <code>*</code>가 3.8.0 앞에 붙었습니다. 이제 전역에서 3.8.0 을 사용합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">* 3.8.0 (<span class="built_in">set</span> by /home/ubuntu/.pyenv/version)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="가상환경-생성"><a href="#가상환경-생성" class="headerlink" title="가상환경 생성"></a>가상환경 생성</h2><br>

<p>파이썬 3.8.0 으로 가상환경 하나를 생성해 보겠습니다. <br></p>
<p>가상 환경 이름은 <code>django-env</code>로 짓겠습니다. </p>
<br>

<p>해당 명령어 포맷은 <code>pyenv virtualenv 3.8.0 &lt;가상환경 이름&gt;</code> 입니다. 아래 커멘드를 참조. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv virtualenv 3.8.0 django-env</span><br></pre></td></tr></table></figure>

<br>

<p>커맨드 실행후에는 아래와 같은 메시지가 나옵니다. <br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Looking <span class="keyword">in</span> links: /tmp/tmpt74f1znk</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> /home/ubuntu/.pyenv/versions/3.8.0/envs/django-env/lib/python3.8/site-packages (41.2.0)</span><br><span class="line">Requirement already satisfied: pip <span class="keyword">in</span> /home/ubuntu/.pyenv/versions/3.8.0/envs/django-env/lib/python3.8/site-packages (19.2.3)</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>가상환경 <code>django-env</code>가 생성 완료 되었습니다. </p>
</blockquote>
<br>

<br>

<h2 id="특정-폴더에-가상환경-적용"><a href="#특정-폴더에-가상환경-적용" class="headerlink" title="특정 폴더에 가상환경 적용"></a>특정 폴더에 가상환경 적용</h2><br>

<br>

<p><code>django_tutorial</code> 이라는 폴더를 하나 생성해줍니다. </p>
<br>

<p>해당 폴더로 가서, 그 폴더에 가상환경을 적용해 봅니다. <br></p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ mkdir django_tutorial</span><br><span class="line"></span><br><span class="line">ubuntu@ip-172-31-47-234:~$ ls</span><br><span class="line">django_tutorial  main_projects</span><br><span class="line"></span><br><span class="line">ubuntu@ip-172-31-47-234:~$ <span class="built_in">cd</span> django_tutorial/</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>해당 폴더 안에서, 아래 명령어를 실행해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~/django_tutorial$ pyenv <span class="built_in">local</span> django-env</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>django-env</code> 환경이 폴더에 잘 적용되었는지 아닌지 확인 하려면, <br></p>
<p>아래와 같이 커맨드라인 맨 왼쪽에 <code>(django-env)</code> 가 표시되는지 확인 해 봅니다. <code>()</code>안에 가상환경 이름이 표시되어 있지 않으면, 제대로 적용이 되지 않은것 입니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-env) ubuntu@ip-172-31-47-234:~/django_tutorial</span><br></pre></td></tr></table></figure>

<br>

<p><code>pyenv versions</code> 명령어를 실행해서, 현재 폴더에서 사용하고 있는 환경을 확인 해 봅니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-env) ubuntu@ip-172-31-47-234:~/django_tutorial$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">  3.8.0</span><br><span class="line">  3.8.0/envs/django-env</span><br><span class="line">* django-env (<span class="built_in">set</span> by /home/ubuntu/django_tutorial/.python-version)</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><code>*</code>가 django-env 앞에 붙어 있습니다. <br></p>
<p>해당폴더에 제대로 적용 된것을 확인 할수 있습니다. <br></p>
</blockquote>
<p><br><br></p>
<h2 id="가상환경에-설치된-패키지-목록-확인"><a href="#가상환경에-설치된-패키지-목록-확인" class="headerlink" title="가상환경에 설치된 패키지 목록 확인"></a>가상환경에 설치된 패키지 목록 확인</h2><p><br><br></p>
<p><code>pip list</code>를 실행해서 설치된 패키지들을 확인해 봅니다.</p>
<p><br>2개 밖에 설치가 안되어 있는데. 이제 해당 폴더에서 진행할 프로젝트의 필요에 따라 패키지를 설치해도. <br></p>
<br>

<blockquote>
<p>원래 시스템에 존재하던 파이썬에는 패키지가 설치되지 않습니다. <br><br></p>
<p>해당 폴더안에 있는 파이썬 환경에만 패키지가 설치 됩니다. </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-env) ubuntu@ip-172-31-47-234:~/django_tutorial$ pip list</span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        19.2.3 </span><br><span class="line">setuptools 41.2.0 </span><br><span class="line">WARNING: You are using pip version 19.2.3, however version 20.0.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>



<br>

<p>만약, 다른 프로젝트를 생성하고 싶으면, 그 프로젝트를 진행할 폴더를 생성 한다음, 가상환경을 적용후에 그 폴더안에서 프로젝트를 진행하면 됩니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>환경설정</category>
        <category>가상환경</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyenv</tag>
        <tag>virtualenv</tag>
        <tag>가상환경</tag>
      </tags>
  </entry>
  <entry>
    <title>가상환경 pyenv, virtualenv - 3편</title>
    <url>/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-3%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-3편"><a href="#가상환경-설정-pyenv-virtualenv-3편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv 3편"></a>가상환경 설정 - pyenv, virtualenv 3편</h2><br>

<blockquote>
<p>우분투가 새로 설치되었으면, </p>
<p>이 3편부터 진행 하면 됩니다. </p>
</blockquote>
<br>

<p>본격적으로 가상환경에 필요한 <code>pyenv</code>설치를 진행 합니다 </p>
<br>

<a id="more"></a>

<br>

<br>

<h2 id="설치-전-필요-패키지"><a href="#설치-전-필요-패키지" class="headerlink" title="설치 전 필요 패키지"></a>설치 전 필요 패키지</h2><br>

<p>설치에 앞서, 필요 패키지들을 설치 해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git </span><br><span class="line">sudo apt install curl</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="pyenv-설치-진행"><a href="#pyenv-설치-진행" class="headerlink" title="pyenv 설치 진행"></a><code>pyenv</code> 설치 진행</h2><br>

<p><br>아래 깃허브 페이지 참조해서 진행 합니다. </p>
<p><a href="https://github.com/pyenv/pyenv-installer" target="_blank" rel="noopener">https://github.com/pyenv/pyenv-installer</a></p>
<br>

<br>

<blockquote>
<p>아래 커맨드를 사용해서 인스톨을 진행 합니다</p>
</blockquote>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure>

<br>

<p>설치 완료후, 아래와 같은 스크린을 보이면 됩니다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">remote: Total 10 (delta 1), reused 6 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (10/10), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">WARNING: seems you still have not added <span class="string">'pyenv'</span> to the load path.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load pyenv automatically by adding</span></span><br><span class="line"><span class="comment"># the following to ~/.bashrc:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/ubuntu/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>*<em>위 스크린의 마지막 부분 (아래 내용)을  *</em></p>
<p><strong>클립보드에 복사해 줍니다</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load pyenv automatically by adding</span></span><br><span class="line"><span class="comment"># the following to ~/.bashrc:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/ubuntu/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure>



<p><strong>정말 중요한 포인트 입니다.</strong></p>
</blockquote>
<br>

<br>

<h2 id="export-PATH를-bashrc에-등록"><a href="#export-PATH를-bashrc에-등록" class="headerlink" title="export PATH를 ~/.bashrc에 등록"></a><code>export PATH</code>를 <code>~/.bashrc</code>에 등록</h2><br>

<br>

<p>위에 복사해둔 내용을 <code>~/.bashrc</code> 파일의 마지막줄에 추가해 줘야 합니다. </p>
<br>

<blockquote>
<p>만약 위에 코드에서, </p>
<p><code># the follwoing to ~/.bashrc:</code> 부분에 <code>~/.bashrc</code> 부분이 다르게 나타나면 </p>
<p>그 경로가 바로 수정해줘야 하는 파일이 됩니다.  예) <code>~./zshrc</code> 등등 </p>
</blockquote>
<br>

<p>어쨋든 저는 <code>~/.bashrc</code>가 나와있기 때문에, <code>~/.bashrc</code>를 아래 명령어로 열어 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<br>

<p>위에 복사해놓은 내용을, 파일 맨 아래에 붙여 넣습니다. </p>
<br>

<img src="/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-3%ED%8E%B8/image1.png" class=""><br>

<br>

<br>

<p>추가후에 파일을 세이브 한뒤에. 터미널을 다시 실행 시켜줍니다. </p>
<br>

<br>

<h2 id="pyenv-설치-확인하기"><a href="#pyenv-설치-확인하기" class="headerlink" title="pyenv 설치 확인하기"></a><code>pyenv</code> 설치 확인하기</h2><p><br><br></p>
<p><code>pyenv</code> 명령어를 실행해서, 아래와 같은 화면이 보이면, 일단 설치는 완료 된거 맞습니다.<br>명령어 목록들이 화면에 쭈욱 나옵니다. <br><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ pyenv</span><br><span class="line"></span><br><span class="line">pyenv 1.2.18</span><br><span class="line">Usage: pyenv &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Some useful pyenv commands are:</span><br><span class="line">   --version   Display the version of pyenv</span><br><span class="line">   virtualenv-prefix   Display real_prefix <span class="keyword">for</span> a Python virtualenv version</span><br><span class="line">   virtualenvs   List all Python virtualenvs found <span class="keyword">in</span> `<span class="variable">$PYENV_ROOT</span>/versions/*<span class="string">'.</span></span><br><span class="line"><span class="string">   whence      List all Python versions that contain the given executable</span></span><br><span class="line"><span class="string">   which       Display the full path to an executable</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">See `pyenv help &lt;command&gt;'</span> <span class="keyword">for</span> information on a specific <span class="built_in">command</span>.</span><br><span class="line">For full documentation, see: https://github.com/pyenv/pyenv<span class="comment">#readme</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="pyenv로-파이썬-설치하기"><a href="#pyenv로-파이썬-설치하기" class="headerlink" title="pyenv로 파이썬 설치하기"></a><code>pyenv</code>로 파이썬 설치하기</h2><br>

<br>

<h3 id="pyenv를-사용해서-파이썬-설치준비"><a href="#pyenv를-사용해서-파이썬-설치준비" class="headerlink" title="pyenv를 사용해서 파이썬 설치준비"></a><code>pyenv</code>를 사용해서 파이썬 설치준비</h3><br>

<br>

<p><code>pyenv</code> 를 사용해서 파이썬을 설치할수 있습니다. 우분투18.04 기준으로, <br></p>
<p>아래 명령어를 실행해서 설치전 필요 패키지들을 설치 합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \</span><br><span class="line">libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \</span><br><span class="line">xz-utils tk-dev libffi-dev liblzma-dev python-openssl git</span><br></pre></td></tr></table></figure>

<br>

<p>아래와 같은 화면이 보이면, 필요 패키지 설치가 된겁니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">or (x-terminal-emulator) <span class="keyword">in</span> auto mode</span><br><span class="line">Setting up tk (8.6.0+9) ...</span><br><span class="line">Setting up libgl1:amd64 (1.0.0-2ubuntu2.3) ...</span><br><span class="line">Setting up tk-dev:amd64 (8.6.0+9) ...</span><br><span class="line">Setting up x11-utils (7.7+3build1) ...</span><br><span class="line">Setting up libgl1-mesa-glx:amd64 (19.2.8-0ubuntu0~18.04.3) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.8.3-2ubuntu0.1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> mime-support (3.60ubuntu1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> ureadahead (0.100.0-21) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> install-info (6.5.0.dfsg.1-2) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> libc-bin (2.27-3ubuntu1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> systemd (237-3ubuntu10.39) ...</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="pyenv로-설치-가능한-파이썬-목록-확인"><a href="#pyenv로-설치-가능한-파이썬-목록-확인" class="headerlink" title="pyenv로 설치 가능한 파이썬 목록 확인"></a><code>pyenv</code>로 설치 가능한 파이썬 목록 확인</h3><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure>

<br>

<p>아래와 같이 설치 가능한 버전 목록 출력 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3.6.9</span><br><span class="line">3.6.10</span><br><span class="line">3.7.0</span><br><span class="line">3.7-dev</span><br><span class="line">3.7.1</span><br><span class="line">3.7.2</span><br><span class="line">3.7.3</span><br><span class="line">3.7.4</span><br><span class="line">3.7.5</span><br><span class="line">3.7.6</span><br><span class="line">3.7.7</span><br><span class="line">3.8.0</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>설치 가능한 파이썬 버전이 굉장히 많은데 </p>
<p>여기서 저는 3.8.0 을 설치해 보려 합니다. </p>
</blockquote>
<br>

<p>아래 명령어를 사용해서, 파이썬 3.8.0 을 설치해 줍니다 </p>
<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.8.0</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Downloading Python-3.8.0.tar.xz...</span><br><span class="line">-&gt; https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tar.xz</span><br><span class="line">Installing Python-3.8.0...</span><br><span class="line">Installed Python-3.8.0 to /home/ubuntu/.pyenv/versions/3.8.0</span><br></pre></td></tr></table></figure>

<br>

<p>파이썬 3.8.0 의 설치가 완료 되었습니다.  </p>
<p><br><br></p>
<h3 id="pyenv로-시스템에-파이썬-목록-확인"><a href="#pyenv로-시스템에-파이썬-목록-확인" class="headerlink" title="pyenv로 시스템에 파이썬 목록 확인"></a><code>pyenv</code>로 시스템에 파이썬 목록 확인</h3><p><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure>

<br>

<p>아래와 같이 <code>*</code>가 붙은게 현재 사용중인 파이썬 입니다. 아직 <code>3.8.0</code>으로 설정이 안되어 있는데. <br></p>
<p>설정 진행을 할겁니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* system (<span class="built_in">set</span> by /home/ubuntu/.pyenv/version)</span><br><span class="line">  3.8.0</span><br></pre></td></tr></table></figure>



<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p><code>pyenv</code>를 설치하고, 파이썬 3.8.0을 설치 하였습니다. </p>
<p>다음 포스팅에는 파이썬 3.8.0 을 전역 파이썬 환경으로 설정하고, 가상환경 관리를 다루겠습니다 </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>환경설정</category>
        <category>가상환경</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyenv</tag>
        <tag>virtualenv</tag>
        <tag>가상환경</tag>
        <tag>Ubuntu</tag>
        <tag>파이썬설치</tag>
        <tag>우분투</tag>
      </tags>
  </entry>
  <entry>
    <title>가상환경 pyenv, virtualenv - 2편</title>
    <url>/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-2편"><a href="#가상환경-설정-pyenv-virtualenv-2편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv 2편"></a>가상환경 설정 - pyenv, virtualenv 2편</h2><br>

<p>제 개인 컴퓨터에는 우분투가 설치되어 있고. 이미 파이썬과 가상환경 세팅이 완료가 되어 있기 때문에. </p>
<p><br>아주 처음부터 진행하기 위해서 AWS EC2를 새로 생성해서, 갓 설치된 우분투로 가상환경 설치를 진행 해보려 합니다.  </p>
<br>

<blockquote>
<p><strong>컴퓨터에 우분투를 새로 설치하였으면</strong> </p>
<p><strong>AWS로 접속 하지 않고 본인의 피씨 터미널에서 진행해야 합니다</strong> </p>
</blockquote>
<br>

<p>순전히, 새로운 우분투가 필요해서 AWS 에 접속해서 진행한것이지. 새로 우분투를 설치한 피씨가 있었으면, <br></p>
<p>제 피씨에서 진행 했을겁니다. </p>
<p><strong>컴퓨터에 새로 우분투를 설치하신분은 이 과정은 넘어갑니다</strong></p>
<a id="more"></a>

<br>

<br>

<h2 id="AWS-EC2-접속하기"><a href="#AWS-EC2-접속하기" class="headerlink" title="AWS EC2 접속하기"></a>AWS EC2 접속하기</h2><br>

<br>

<blockquote>
<p>AWS EC2 생성과, 키 설정에 대한 설명은 스킵하겠습니다. </p>
</blockquote>
<p><br>자신의 PC 터미널에 아래 명령어를 사용해서 본인의 인스턴스에 접속합니다.  </p>
<br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -i ~&#x2F;.ssh&#x2F;12th.pem ubuntu@13.109.21.6</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-2%ED%8E%B8/image1.png" class="">

<br>

<br>

<blockquote>
<p>접속이 잘 된것을 확인할수 있습니다. </p>
</blockquote>
<br>

<p><br><img src="/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-2%ED%8E%B8/image2.png" class=""></p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>AWS 에 생성한 우분투 인스턴스에 접속을 해보았습니다. </p>
<p><br>순전히 갓 설치된 우분투 시스템이 필요해서 생성후 만든 인스턴스이고.. <br></p>
<p>이 과정은 사실 가상환경 설정과는 무관합니다.</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>환경설정</category>
        <category>가상환경</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyenv</tag>
        <tag>virtualenv</tag>
        <tag>가상환경</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>가상환경 pyenv, virtualenv - 1편</title>
    <url>/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-1편"><a href="#가상환경-설정-pyenv-virtualenv-1편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv 1편"></a>가상환경 설정 - pyenv, virtualenv 1편</h2><br>

<br>

<blockquote>
<p>virtualenv, pyenv-virtualenv </p>
<p>pyenv 는 다중의 파이썬 버전을 쉽게 바꿔가며 사용할수 있게 해주는 도구 입니다. </p>
</blockquote>
<br>

<br>

<h2 id="Virtualenv"><a href="#Virtualenv" class="headerlink" title="Virtualenv"></a>Virtualenv</h2><br>

<br>

<blockquote>
<p>virtualenv 는 분리된 파이썬 환경을 </p>
<p>만들어 주는 도구 입니다.</p>
</blockquote>
<br>

<p><br><a id="more"></a></p>
<p>가상환경은 각 프로젝트마다 설치된 패키지들의 충돌을 막아주기 위해서 필요합니다. </p>
<p>파이썬에서 기본적으로 사용되는 패키지는 virtualenv 이고, pyenv 와 같이 사용해서 <br></p>
<br>

<p>여러개의 파이썬 버전 환경을 적용한 가상환경을 생성하여 사용할수 있습니다. </p>
<br>

<br>

<h2 id="가상환경은-왜-필요한가"><a href="#가상환경은-왜-필요한가" class="headerlink" title="가상환경은 왜 필요한가"></a>가상환경은 왜 필요한가</h2><br>

<br>

<p>우리의 시스템에 설치된 파이썬 환경은 1개 입니다. </p>
<p>그런데, 우리는 여러개의 프로젝트를 진행 해야 하는 상황이 옵니다. </p>
<br>

<blockquote>
<p>아래 상황을 생각해 봅니다 </p>
</blockquote>
<br>

<ul>
<li>프로젝트 A 는 페키지 1, 2, 3 이 필요합니다 </li>
<li>프로젝트 B 는 패키지 1, 2, 4, 5 가 필요합니다 </li>
<li>프로젝트 C는 패키지 1만 필요합니다. </li>
</ul>
<br>

<p>시스템에 존재하나 1개의 파이썬 환경으로 프로젝트 A, B, C 모두 다 진행할수 있지만, <br>각 프로젝트에 딸려있는 패키지들끼리 충돌할수도 있습니다. </p>
<br>

<p>그리고, 필요하지도 않은 패키지를 모두 시스템에 설치해야하는데.. 필요하지 않은 패키지를 설치할 이유가 있을까요? </p>
<br>

<br>

<p><strong>프로젝트 A 를 진행할 파이썬 환경 1개</strong></p>
<p><strong>프로젝트 B 를 진행할 파이썬 환경 1개</strong></p>
<p><strong>프로젝트 C 를 진행할 파이썬 환경 1개</strong></p>
<br>

<p>이렇게 3개의 환경을 가지고 있으면 좋겠는데.. 그렇다면 PC 가 3대 있어야 하는건가요? </p>
<br>

<br>

<h2 id="pyenv-virtualenv-사용해서-가상환경-설정"><a href="#pyenv-virtualenv-사용해서-가상환경-설정" class="headerlink" title="pyenv, virtualenv 사용해서 가상환경 설정"></a>pyenv, virtualenv 사용해서 가상환경 설정</h2><br>

<p><code>pyenv</code>와 <code>virtualenv</code> 같은 라이브러리를 사용하여, 가상환경을 생성후, 별도의 시스템 환경으로 각각의 프로젝트들을 진행할수 있습니다. </p>
<p><br><br></p>
<blockquote>
<p>시스템에 이미 설치되어 있는 파이썬과 </p>
<p>분리된 가상환경을 만들어서 </p>
<p>각각의 프로젝트를 진행 할수 있습니다. </p>
</blockquote>
<p><br><br></p>
<ul>
<li>가상환경 A - 프로젝트A에 필요한 패키지들만 설치후, 프로젝트 A 진행 </li>
<li>가상환경 B - 프로젝트B에 필요한 패키지들만 설치후, 프로젝트 B 진행 </li>
<li>가상환경 C - 프로젝트C에 필요한 패키지들만 설치후, 프로젝트 C 진행 </li>
</ul>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>가상환경이 필요한 이유에 대해서 아주 짧게 알아보았습니다. </p>
<p><br>다음 포스팅은 라이브러리 설치 및 가상환경 설정 에 대해서 진행 합니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>환경설정</category>
        <category>가상환경</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyenv</tag>
        <tag>virtualenv</tag>
        <tag>가상환경</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Variable Annotations</title>
    <url>/2020/04/10/PEP8-Variable-Annotations/</url>
    <content><![CDATA[<h2 id="변수-Annotations"><a href="#변수-Annotations" class="headerlink" title="변수 Annotations"></a>변수 Annotations</h2><br>

<br>

<p>PEP526 에서는, 변수 주석에 대해서 소개하고 있습니다.</p>
<p><br>변수 주석에 대한 스타일 권장사항은 함수 주석 스타일과 비슷합니다. </p>
<br>

<br>

<ul>
<li>모듈레벨에서 변수들, 클래스 그리고 인스턴스 변수들과 지역 변수들은 <code>:</code> 뒤에 1칸 띄워줍니다</li>
<li>콜론뒤에는 빈공간이 없어야 합니다 </li>
<li><code>=</code> 양쪽에 정확히 한칸씩 띄워줍니다</li>
</ul>
<p><br><a id="more"></a></p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">code : int </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    coords: Tuple[int, int]</span><br><span class="line">    label: str = <span class="string">'&lt;unknown&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line">code:int	<span class="comment"># 콜론 뒤에 띄어스기를 안해줬습니다 </span></span><br><span class="line">code : int	<span class="comment"># 콜론 앞에 띄어쓰기가 있습니다 </span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    result: int=<span class="number">0</span>	<span class="comment"># = 주변에 빈공간이 없습니다</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>PEP526이 python3.6 에서 적용되었다 하더라도, 변수 주석 syntax 는 모든 버전 파이썬에 <code>stub files</code> 에 적용 되기를 권장합니다.<br></p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>이것으로 PEP8에 소개된 스타일 가이드를 전부 훑어 보았습니다. </p>
<p><br>아직 남아있는 <code>function annotation</code> 과 <code>variable annotation</code>은 각각 PEP484 와 PEP526 을 참조하면 됩니다. </p>
<br>

<p>484와 526의 양이 좀 방대하기 때문에, 나중에 따로 포스팅을 할 예정입니다. </p>
<br>

<p>PEP8 관련 포스팅을 하면서, 이해가 안가는 부분이 아직 많습니다. </p>
<br>

<p>아직까지는, PEP8 에 나와있는 모든것을 고민하면서 코드를 쓸 단계가 아니라서 그런것 같습니다… 코딩 공부를 좀더 진행을 해보면서, PEP8 을 끊임없이 리뷰할것이고, 수정이 필요한 포스팅은 다시 수정 될것입니다.</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Annotations</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Function Annotations</title>
    <url>/2020/04/10/PEP8-Function-Annotations/</url>
    <content><![CDATA[<h2 id="함수-Annotations"><a href="#함수-Annotations" class="headerlink" title="함수 Annotations"></a>함수 Annotations</h2><br>

<br>

<blockquote>
<p><strong>Annotation</strong></p>
<p>어노테이션은 원래 주석이나 노트 라는 뜻인데, </p>
<p>파이썬에서 우리가 흔히 사용하는 일반 주석과는 역할이 좀 다릅니다. </p>
<br>

<p>어노테이션은 함수나 변수에 코드를 달아서, 일반 주석과는 다른 의미나 기능을 부여합니다. <br></p>
<br>

<p>함수나 변수에 일반 주석으로는 설명이 너무 길어지거나, 정확한 설명이 불가능할때, </p>
<p>그리고 특별한 의미를 부여하고 싶을때 Annotation 을 사용합니다. </p>
</blockquote>
<br>

<br>

<h2 id="Function-Annotations"><a href="#Function-Annotations" class="headerlink" title="Function Annotations"></a>Function Annotations</h2><br>

<p>이 번 포스팅은 function annotations 에 대한 포스팅 입니다. </p>
<br>

<p>Annotation 은 함수에 추가로 들어가는 주석입니다. </p>
<p>PEP484의 허용과 함께, 함수에 들어가는 주석 스타일이 바뀌고 있는 추세입니다 </p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>파이썬3 코드에서는, </p>
<p>향후 버전 호환성을 위해서 PEP484 의 syntax 를 사용하는걸 권장 합니다. </p>
</blockquote>
<br>

<br>

<h2 id="PEP484"><a href="#PEP484" class="headerlink" title="PEP484"></a>PEP484</h2><br>

<p>함수내에 주석 스타일 가이드는 PEP484에 나와있는 스타일 가이드가 권장 됩니다.</p>
<p><br>예를들면, 덩치가 큰 제3자 라이브러리를 마킹 하거나, PEP484 스타일의 <code>type</code>주석 등이 있습니다. PEP484에는 주석달기가 얼마나 쉬운지에 대한 리뷰 그리고 해당 스타일이 얼마나 코드의 이해성을 높이는지에 대한 관찰 사항들이 나와 있습니다. </p>
<br>

<p>파이썬 스탠다드 라이브러리는 주석을 받아들이는데에 보수적이어야 하지만, 주석의 사용은 새로운 코드와 큰 리펙토링에는 허용됩니다. </p>
<br>

<br>

<h2 id="Function-Annotation-과-다른-사용"><a href="#Function-Annotation-과-다른-사용" class="headerlink" title="Function Annotation 과 다른 사용"></a>Function Annotation 과 다른 사용</h2><br>

<br>

<blockquote>
<p>함수 주석과 다른 사용을 원하는 코드는, </p>
<p>일반 커멘트 형식을 갖습니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># type: ignore</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>린터와 타입 확인자는 선택 사항이고. 별도의 도구 입니다. 파이썬 인터프러터는 기본적으로 타입 확인에 의한 메시지를 발생 시키지 않고. 함수 주석이기 때문에 코드의 동작을 바꾸지 않습니다. </p>
<br>

<p>타입 확인을 원하지 않는 사용자는, 그것을 무시해도 괜찮습니다. 하지만, 3자 라이브러리 패키지는 타입 확인자를 실행하려 할수도 있습니다. 이점을 위해 <code>PEP484</code> 는 <code>stub</code> 파일들을 사용하는것을 권장 합니다.</p>
<br>

<br>

<p>이전 버전 호환성이 필요한 코드들은, 타입 주석을 일반 주석 형태로 추가 할수 있습니다. (PEP484 참조) </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>이번 토픽은 PEP484의 소개밖에 없습니다. </p>
<p>PEP484 를 좀 자세히 보려 했는데. 내용이 너무 방대해서, 나중에 따로 나누어서 포스팅 해야 할것 같습니다. </p>
<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Annotations</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 - 네이버 웹마스터 도구 등록</title>
    <url>/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/</url>
    <content><![CDATA[<h2 id="네이버-웹마스터-회원가입-서치어드바이저"><a href="#네이버-웹마스터-회원가입-서치어드바이저" class="headerlink" title="네이버 웹마스터 회원가입 (서치어드바이저)"></a>네이버 웹마스터 회원가입 (서치어드바이저)</h2><br>

<p>네이버 웹마스터툴 사이트에 접속해서. </p>
<p>회원가입 후 로그인을 진행 합니다. (기존 네이버 아이디가 있으면, 회원가입 할 필요는 없습니다~) </p>
<br>

<br>

<h2 id="사이트-등록"><a href="#사이트-등록" class="headerlink" title="사이트 등록"></a>사이트 등록</h2><br>

<br>

<p>웹마스터 도구에 <code>Search Advisor</code> 로 들어갑니다. </p>
<br>

<p>들어가면, 사이트를 등록하라고 나오는데. 아래 캡쳐 화면을 참조해주세요. </p>
<br>

<a id="more"></a>

<img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image1.png" class="">

<br>

<br>

<h2 id="사이트-소유확인-진행"><a href="#사이트-소유확인-진행" class="headerlink" title="사이트 소유확인 진행"></a>사이트 소유확인 진행</h2><br>

<br>

<p>사이트의 소유 확인을 진행합니다. </p>
<p><br>구글 서치 콘솔때 진행 했던 방식이랑 비슷비슷하네요 ㅎㅎ </p>
<br>

<br>

<img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image2.png" class="">



<p><br><br></p>
<blockquote>
<p>저는 HTML 태그를 블로그의 <code>&lt;head&gt;</code> 부분에 붙여서. 소유 확인을 진행 할것입니다. <br></p>
</blockquote>
<br>

<br>

<h2 id="HTML-태그를-lt-head-gt-섹션에-붙이기"><a href="#HTML-태그를-lt-head-gt-섹션에-붙이기" class="headerlink" title="HTML 태그를 &lt;head&gt;섹션에 붙이기"></a>HTML 태그를 <code>&lt;head&gt;</code>섹션에 붙이기</h2><br>

<br>

<p>처음에는 이게 정말 어려웠는데. 이제는 쉽습니다. </p>
<br>

<p>우선, 필자 기준으로 <code>blog/themes/hexo-theme-next/layout</code>블로그 폴더로 이동 합니다. </p>
<br>

<p>이 폴더에 있는 <code>_layout.swig</code>파일을 열어서, 네이버 사이트 소유확인 html 테그를 붙여 넣습니다. </p>
<br>

<p><code>blog/themes/hexo-theme-next/layout/_layout.swig</code> 파일 캡쳐 </p>
<br>

<blockquote>
<p><code>&lt;/head&gt;</code>태그가 있는곳 바로 위에 붙여 줍니다. </p>
</blockquote>
<br>

<img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image4.png" class="">

<br>

<br>

<p>파일 수정이 끝났으면, 잊지않고 <code>hexo generate</code> 그리고 <code>hexo deploy</code> 를 실행해서. <br></p>
<p>깃헙 페이지에 배포합니다. </p>
<blockquote>
<p>소유 확인 버튼을 눌러서 진행 해줍니다 </p>
</blockquote>
<br>

<br>

<img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image3.png" class="">

<br>

<br>

<p>금방 소유확인이 되는군요 ㅎㅎ </p>
<br>

<img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image5.png" class="">

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>다른거 보다가 문득 생각나서 한번 등록 해보았습니다. </p>
<p><br>네이버 웹마스터도 뭔가 더 기능이 있을거 같긴 한데.. 우선 등록만 이렇게 마쳐놓고.</p>
<p><br>나중에 더 알아보도록 하겠습니다. </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Hexo Blog</tag>
        <tag>Naver</tag>
        <tag>네이버 웹마스터</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Programming Recommendations - 4편</title>
    <url>/2020/04/09/PEP8-Programming-Recommendations-4%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="프로그래밍-권장사항들"><a href="#프로그래밍-권장사항들" class="headerlink" title="프로그래밍 권장사항들"></a>프로그래밍 권장사항들</h2><br>

<br>

<h2 id="불리언값의-비교는-연산자를-사용하지-않습니다"><a href="#불리언값의-비교는-연산자를-사용하지-않습니다" class="headerlink" title="불리언값의 비교는 == 연산자를 사용하지 않습니다"></a>불리언값의 비교는 <code>==</code> 연산자를 사용하지 않습니다</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">if</span> greetings:</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">if</span> greetings == <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 틀린예 </span></span><br><span class="line"><span class="keyword">if</span> greeting <span class="keyword">is</span> <span class="literal">True</span>:</span><br></pre></td></tr></table></figure>

<br>

<p><br><a id="more"></a></p>
<h2 id="try-finally-안에-흐름제어-구문"><a href="#try-finally-안에-흐름제어-구문" class="headerlink" title="try..finally 안에 흐름제어 구문"></a><code>try..finally</code> 안에 흐름제어 구문</h2><br>

<br>

<p><code>try..finally</code> 에서 <code>finally</code>부분안에는 <code>return/break/continue</code> 같은 흐름제어 구문의 사용은 권장되지 않습니다. </p>
<br>

<p><code>finally</code> 안에 <code>return/break/continue</code> 같은 구문을 사용하면, 암시적으로 활성화 된 예외를 취소시키기 때문에. finally 안에 흐름제어 구문의 사용은 권장 되지 않습니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 틀린예</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">42</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>PEP8에서 얘기하는 프로그래밍 권장 사항들에 대해서 알아보았습니다. </p>
<br>

<p>프로그래밍 전반에 걸친 다양한 권장사항이고. 깊은 컨셉입니다. </p>
<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>프로그램 권장사항들</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Programming Recommendations - 3편</title>
    <url>/2020/04/08/PEP8-Programming-Recommendations-3%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="프로그래밍-권장사항들-3편"><a href="#프로그래밍-권장사항들-3편" class="headerlink" title="프로그래밍 권장사항들 - 3편"></a>프로그래밍 권장사항들 - 3편</h2><br>

<blockquote>
<p>운영체체 에러를 잡아낼때에는, </p>
<p>파이썬 3.3 이후에서 소개된 명시적인 예외 상화관계를 사용합니다 <br></p>
</blockquote>
<br>

<br>

<h2 id="모든-try-except구문"><a href="#모든-try-except구문" class="headerlink" title="모든 try/except구문"></a>모든 <code>try/except</code>구문</h2><br>

<p>모든 <code>try/except</code>절에 대해 <code>try</code> 절을 필요한 최소의 코드 양으로 사용 제한을 합니다. 버그가 가려지는걸 피할수 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    value = collection[key]</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="keyword">return</span> key_not_found(key)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> handle_value(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 너무 광범위함 </span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">handle_value(collection[key])</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="comment"># Will also catch KeyError raised by handle_value()</span></span><br><span class="line">    <span class="keyword">return</span> key_not_found(key)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="특정-코드-섹션에-로컬-자원"><a href="#특정-코드-섹션에-로컬-자원" class="headerlink" title="특정 코드 섹션에 로컬 자원"></a>특정 코드 섹션에 로컬 자원</h2><br>

<p>자원이 특정 코드 섹션에 대해 로컬로 있을때에는 <code>with</code>문을 사용하여, 사용후 빠르고 안정적으로 정리되도록 합니다. <code>try/finally</code> 구문도 허용됩니다. </p>
<br>



<h2 id="Context-Manager"><a href="#Context-Manager" class="headerlink" title="Context Manager"></a>Context Manager</h2><br>

<p>자원을 확보하거나 해제 하는것이 아닌 경우의 컨텍스트 메니져는 분리된 함수 혹은 메써드를 통해서 호출 되어야 합니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">with</span> conn.begin_transaction():</span><br><span class="line">    do_stuff_in_transaction(conn)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">with</span> conn:</span><br><span class="line">    do_stuff_in_trnasaction(conn)</span><br></pre></td></tr></table></figure>

<br>

<p>후의 예시는, <code>__enter__</code> 및 <code>__exit__</code> 메서드가 트랜셕션 후 연결을 닫는 것 이외의 작업을 수행하고 있음을 나타내는 정보를 제공하지 않습니다. </p>
<p><br><br></p>
<p>이 경우에는 명시적인게 중요합니다. <br></p>
<br>



<h2 id="리턴-구문안에서는-일관성이-있어야-합니다"><a href="#리턴-구문안에서는-일관성이-있어야-합니다" class="headerlink" title="리턴 구문안에서는 일관성이 있어야 합니다"></a>리턴 구문안에서는 일관성이 있어야 합니다</h2><br>

<br>

<p>함수안에 모든 리턴 구문은 수식을 반환해야 합니다. 만약 어떤 리턴 구문이 수식을 반환할때. 어떠한 값이 없는 리턴 구문은 명시적으로, <code>return None</code> 이라고 해주어야 합니다. </p>
<br>

<p>그리고, 명시적인 리턴 구문은 함수의 마지막에 존재해야 합니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="문자열-모듈보다는-문자열-메써드-사용"><a href="#문자열-모듈보다는-문자열-메써드-사용" class="headerlink" title="문자열 모듈보다는 문자열 메써드 사용"></a>문자열 모듈보다는 문자열 메써드 사용</h2><br>

<p>문자열 메써드는 언제나 빠르고, 유니코드 문자와 함께 같은 API 를 공유합니다.</p>
<br>

<br>

<h2 id="startswith-와-endwith"><a href="#startswith-와-endwith" class="headerlink" title="startswith() 와  endwith()"></a><code>startswith()</code> 와  <code>endwith()</code></h2><br>

<br>

<p>접두사와 접미사를 확인하기 위해서는, 문자열 슬라이싱 보다 <code>startswith()</code>와 <code>endwith()</code> 를 사용합니다. </p>
<p><br><code>startswith()</code>와 <code>endswith()</code>가 더 깔끔하고 에러가 적습니다. </p>
<br>

<br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 좋은예 </span><br><span class="line">if foo.startswith(&#39;bar&#39;):</span><br><span class="line"></span><br><span class="line"># 나쁜예 </span><br><span class="line">if foo[:3] &#x3D;&#x3D; &#39;bar&#39;</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="객체-타입-비교는-isinstance-사용"><a href="#객체-타입-비교는-isinstance-사용" class="headerlink" title="객체 타입 비교는 isinstance() 사용"></a>객체 타입 비교는 <code>isinstance()</code> 사용</h2><br>

<br>

<p>객체 타입 비교를 할때는, 직접 타입 비교를 하기 보다는 <code>isinstance()</code>를 사용합니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">if</span> isinstance(obj, int);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">if</span> type(obj) <span class="keyword">is</span> type(<span class="number">1</span>):</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>객체가 문자열인지 아닌지 확인할때에는, 그것이 유니코드 문자열일수도 있다는것을 염두해 두세요. <br></p>
<p>파이썬2 에서는, <code>str</code>과 <code>unicode</code>는 같은 베이스 클래스, <code>basestring</code>을 가지고 있습니다. <br><br></p>
<p>따라서, 아래와 같이 쓸수 있습니다. <br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python2 </span></span><br><span class="line"><span class="keyword">if</span> isinstance(obj, basestring)</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>파이썬3 에서는, <code>unicode</code>와 <code>basestring</code>은 존재하지 않습니다. <code>str</code>만 존재하고</p>
<p><code>bytes</code>객체는 더이상 문자열 종류가 아닙니다.  <br></p>
<br>

<h2 id="시퀀스들-문자열-리스트-튜플-빈-시퀀스는-False-를-반환합니다"><a href="#시퀀스들-문자열-리스트-튜플-빈-시퀀스는-False-를-반환합니다" class="headerlink" title="시퀀스들(문자열, 리스트, 튜플) 빈 시퀀스는 False 를 반환합니다"></a>시퀀스들(문자열, 리스트, 튜플) 빈 시퀀스는 False 를 반환합니다</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> seq:</span><br><span class="line"><span class="keyword">if</span> seq:</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">if</span> len(seq):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> len(seq):</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>프로그래밍 권장 사항들이 꽤 많네요. </p>
<p><br>나머지 권장 사항들은 다음 포스팅에 이어서 쓰겠습니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>프로그래밍 권장사항들</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Programming Recommendations - 2편</title>
    <url>/2020/04/08/PEP8-Programming-Recommendations-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="PEP8-프로그래밍-권장사항들-2편"><a href="#PEP8-프로그래밍-권장사항들-2편" class="headerlink" title="PEP8 프로그래밍 권장사항들 - 2편"></a>PEP8 프로그래밍 권장사항들 - 2편</h2><p><br><br></p>
<h2 id="BaseException이-아닌-Exception"><a href="#BaseException이-아닌-Exception" class="headerlink" title="BaseException이 아닌 Exception"></a>BaseException이 아닌 Exception</h2><br>

<blockquote>
<p>BaseException 이 아닌 </p>
<p>Exception 에서 예외를 파생 시킵니다. </p>
</blockquote>
<br>

<p>BaseException에서 직접 상속은 예외를 잡는것이 틀린일인 예외를 위해 있습니다. </p>
<br>

<p>예외를 잡아내는 코드가 필요한 곳과, 예외가 발생하는곳을 잘 구분해서. 예외의 상하관계를 디자인 합니다. </p>
<br>

<p>“문제가 발생했습니다” 라는 단순한 얘기보다. 프로그래밍적으로 “무엇이 잘못됬지?” 라는 질문을 답하도록 목표합니다. </p>
<br>

<br>

<p>예외가 오류인 경우 예외 클래스에 접미사 <code>Error</code>를 추가해야 합니다만, 클래스 이름 지정 규칙이 여기에 적용됩니다.  </p>
<br>

<br>

<a id="more"></a>

<br>

<h2 id="예외연계"><a href="#예외연계" class="headerlink" title="예외연계"></a>예외연계</h2><br>

<p>파이썬3 에서는 “raise X form Y” 라는 형태의 예외 연계를 적절하게 써줘야 합니다. 이렇게 하면, 본래의 <code>traceback</code>을 잃지 않고, 명시적으로 교체를 해줄수 있습니다. </p>
<br>

<p>내부 예외를 교체할때는 (파이썬2 에서는 <code>raise X</code>, 파이썬 3.3부터는 <code>raise X from None</code>), 연관이 있는 세부사항들이 새로운 예외로 전송되어야 합니다. 연관이 있는 세부사항들에 대한 예를 들자면, 속성명이나, 원조 예외의 메시지 등을 예로 들수 있습니다. </p>
<br>

<br>

<h2 id="raiseValueError-39-message-39"><a href="#raiseValueError-39-message-39" class="headerlink" title="raiseValueError(&#39;message&#39;)"></a><code>raiseValueError(&#39;message&#39;)</code></h2><br>

<p><code>raiseValueError(&#39;message&#39;)</code> 형태는 옛날 스타일로, 파이썬3에서는 허용되지 않습니다. </p>
<br>

<br>

<h2 id="예외를-잡아낼때는-bare-except-절의-사용을-피합니다"><a href="#예외를-잡아낼때는-bare-except-절의-사용을-피합니다" class="headerlink" title="예외를 잡아낼때는, bare except:절의 사용을 피합니다"></a>예외를 잡아낼때는, <code>bare except:</code>절의 사용을 피합니다</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> platform_speicific_module </span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    platform_specific_module = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>bare except:</code>    절은 <code>SystemExit</code> 하고 <code>KeyboardInterrupt</code> 예외를 잡아낼것이고, <code>Ctrl + C</code> 로 방해하기 어렵고, 다른 문제들을 야기시킬수 있습니다. </p>
<br>

<p>만약 프로그램 에러 신호를 보내는 모든 예외들을 잡고 싶다면, <code>except Exception:</code>을 사용합니다. </p>
<br>

<p>가장 좋은 방법은 <code>bare except:</code>절의 사용을 두가지 경우로 제한하는겁니다. </p>
<br>

<ol>
<li>예외 처리기가 traceback을 인쇄하거나 기록하는 경우, 사용자는 최소한 오류가 발생했음을 알게 됩니다 </li>
<li>코드가 정리 작업을 수행해야 할때, 예외가 발생하면 예외가 위쪽으로도 영향을 미칠수 있습니다. <code>try, finally</code> 를 쓰는것이 이런것을 다룰때 좋습니다. </li>
</ol>
<br>

<br>

<h2 id="잡은-예외를-이름에-묶어두고-싶을때"><a href="#잡은-예외를-이름에-묶어두고-싶을때" class="headerlink" title="잡은 예외를 이름에 묶어두고 싶을때"></a>잡은 예외를 이름에 묶어두고 싶을때</h2><br>

<br>

<p>파이썬2.6 에 추가된 명시적인 이름 묶기 syntax 를 사용합니다 </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    process_data()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">    <span class="keyword">raise</span> DataProcessingFailedError(str(exc))</span><br></pre></td></tr></table></figure>



<br>

<p>이것은 파이썬 3에서만 지원됩니다. 오래된 스타일의 콤마가 들어가는 syntax 를 사용해서 혼란스러운 문제들은 피해야 합니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>프로그래밍 권장사항 내용이 길어지네요. </p>
<p>대부분의 경우에는 아직까지 이해가 잘 안가고. 원문을 읽어봐도 이해가 잘 안갑니다 ㅠㅠ </p>
<br>

<p>근데 이게, 아직 제가 프로그래밍 레벨이 낮아서 이해가 안가는거 같습니다. <br></p>
<p>나중엔 좀 더 이해가 빠르겟죠? ㅎ</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>프로그래밍 권장사항들</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Programming Recommendations - 1편</title>
    <url>/2020/04/08/PEP8-Programming-Recommendations-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="PEP8-Programming-Recommendations-1편"><a href="#PEP8-Programming-Recommendations-1편" class="headerlink" title="PEP8 Programming Recommendations - 1편"></a>PEP8 Programming Recommendations - 1편</h2><br>

<br>

<p><strong>프로그래밍 권장 사항들 - 1편입니다</strong></p>
<br>

<br>

<h2 id="다른-파이썬-라이브러리의-구현"><a href="#다른-파이썬-라이브러리의-구현" class="headerlink" title="다른 파이썬 라이브러리의 구현"></a>다른 파이썬 라이브러리의 구현<br></h2><p><br><br></p>
<p>코드는 다른 파이썬 구현에 불리하지 않은 방식으로 작성되어야 합니다. </p>
<p>다른 파이썬의 구현체들 (PyPy, Jython, IronPython, Cython, Pysco 등등) </p>
<br>

<p>예를들면, CPython에서 <code>a += b</code> 혹은 <code>a = a + b</code> 형태의 문자열 연결은 효율적인 구현체 이지만. <br></p>
<p>이 형태조차, CPython 에서도 특정 타입에만 통하고, 모든 구현에 나오지 않습니다. </p>
<br>

<p>따라서, CPython의 효율적인 내부 문자열 연결 구현에 너무 의존하는것은 좋지 않습니다<br></p>
<p><br><br></p>
<blockquote>
<p>퍼포먼스가 중요한 라이브러리에서는, <code>&#39;&#39;.join()</code> 형태가 대신 사용되어야 합니다 </p>
</blockquote>
<p><br><br></p>
<a id="more"></a>

<br>

<h2 id="Singletons-에-대한-비교"><a href="#Singletons-에-대한-비교" class="headerlink" title="Singletons 에 대한 비교 "></a>Singletons 에 대한 비교 <br></h2><br>

<p>None 같은 singletons에 대한 비교는 항상 <code>is</code> 혹은 <code>is not</code> 을 사용합니다. 절대 <code>=</code>를 사용하지 않습니다. </p>
<br>

<blockquote>
<p>파이썬에서 singletons 는 </p>
<p>창의적인 디자인 패턴으로, 같은 종류의 객체만 존재하고 </p>
<p>다른 코드에게 단일 엑세스 지점을 제공합니다. </p>
<br>

<p>singletons 는 전역 변수들과 같은 장점과 단점을 가지고 있습니다. </p>
<p>굉장히 유용하지만, 코드의 모듈화를 떨어트립니다. </p>
</blockquote>
<br>

<p>if 를 사용할때 if x 가 진짜 if x is not None 일것임을 알고 써야합니다<br><br> (예를들어, 하나의 변수 혹은 인자가 기본값이 None 으로 다른 값에 설정이 되어 있을때. 컨테이너 같은 값들은 이미 타입을 가지고 있을수 있습니다. 이럴경우, 정확한 불리언 값을 얻을수가 없게 됩니다. 따라서, 불리언으로 테스트 하면 False 가 나옵니다.  )</p>
<p><br><br></p>
<h2 id="is-not-연산자를-not-…-is-대신-사용합니다"><a href="#is-not-연산자를-not-…-is-대신-사용합니다" class="headerlink" title="is not 연산자를 not … is 대신 사용합니다."></a>is not 연산자를 not … is 대신 사용합니다.</h2><p><br><br></p>
<p>두가지 표현 모두 기능적으로 똑같지만, 전자가 더 가독서이 좋아서 선호됩니다.<br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">if</span> foo <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> foo <span class="keyword">is</span> <span class="literal">None</span>:</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="6가지-비교연산"><a href="#6가지-비교연산" class="headerlink" title="6가지 비교연산"></a>6가지 비교연산</h2><br>

<br>

<p>특정 비교연산을 하기 위해서 다른 코드를 의존하기 보다는, </p>
<p>6가지의 모든 연산을 구현하는게 좋습니다 </p>
<br>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__eq__</span><br><span class="line">__ne__</span><br><span class="line">__lt__</span><br><span class="line">__le__</span><br><span class="line">__gt__</span><br><span class="line">__ge__</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>funtools.total_ordering()</code>데코레이터는 현재 놓치고 있는 비교 방법을 생성하는 툴을 제공합니다<br></p>
<br>

<blockquote>
<p>PEP207을 참조하면, 파이썬 인터프리터에는 반사 규칙이 존재합니다<br></p>
</blockquote>
<p>반사규칙에 의해서, 인터프리터는 아래의 형태로 값을 바꿀수 있습니다. </p>
<br>

<p><code>y &gt; x</code>를 <code>x &lt; y</code> 로 </p>
<p><code>y &gt;= x</code> 를 <code>x &lt;= y</code> 로 </p>
<p><code>x == y</code> 그리고 <code>x != y</code>같은 인자들을 바꿀수 있습니다. </p>
<br>

<p><code>sort()</code>함수와 <code>min()</code> 연산들은 <code>&lt;</code>  을 사용하고, <code>max()</code>함수는 <code>&gt;</code>를 사용합니다. </p>
<p><br>그렇지만, 모든 6개의 연산을 사용하여, 최대한 혼란을 일으키지 않게 하는것이 제일 좋습니다. </p>
<br>

<br>

<h2 id="lambda-를-사용한-수식보다는-def구문을-사용합니다"><a href="#lambda-를-사용한-수식보다는-def구문을-사용합니다" class="headerlink" title="lambda 를 사용한 수식보다는 def구문을 사용합니다"></a><code>lambda</code> 를 사용한 수식보다는 <code>def</code>구문을 사용합니다</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> <span class="number">2</span>*x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line">f = <span class="keyword">lambda</span> x: <span class="number">2</span>*x</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..<br></h2><br>

<p>프로그래밍에 대한 권장 사항들인데. </p>
<p><br>컨셉이 상당히 깊게 느껴집니다. <br>위 내용을 모두 알아들을 만큼의 레벨까지 프로그래밍 공부가 완료되지 않았기 때문에. </p>
<br>

<p>어떤것은 이해가 전혀 가지 않기도 하고, 표현도 어색합니다<br></p>
<br>

<p>몇번이나 다짐하지만, 좀더 깊게 공부를 한 다음에 다시 봐야 할것 같습니다. </p>
<br>

<br>







<p><br><br><br><br><br><br><br><br><br><br><br></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>프로그래밍 권장사항들</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Naming Conventions - 4편</title>
    <url>/2020/04/07/PEP8-Naming-Conventions-4%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="파이썬-Naming-Convention-4편"><a href="#파이썬-Naming-Convention-4편" class="headerlink" title="파이썬 Naming Convention - 4편"></a>파이썬 Naming Convention - 4편</h2><br>

<br>

<h2 id="Public-and-Internal-Interface"><a href="#Public-and-Internal-Interface" class="headerlink" title="Public and Internal Interface"></a>Public and Internal Interface</h2><br>

<br>

<blockquote>
<p>이전 버전과 호환성을 보장하는것은 </p>
<p>오직 퍼블릭 인터페이스에만 적용됩니다. </p>
</blockquote>
<br>

<br>

<p>따라서, 사용자들은 퍼블릭 인터페이스와 내부 인터페이스를 잘 구분하는것이 중요합니다. </p>
<br>

<br>

<p><strong>public interface (공용 인터페이스)</strong>는 독립적인 소프트웨어 엔티티가 상호 작용하는 논리적 지점입니다. 엔티니는 단일 컴퓨터, 네트워크 또는 다양한 토폴로지에서 서로 상호 작용할수 있습니다. 상호 작용을 계속 하려면, 퍼블릭 이너페이스가 안정적이여야 하고, 향후 변경 및 개선 및 사용중단을 지원하도록 잘 설계되어야 합니다. </p>
<br>

<br>

<a id="more"></a>

<h2 id="문서화가-되어-있는-인터페이스"><a href="#문서화가-되어-있는-인터페이스" class="headerlink" title="문서화가 되어 있는 인터페이스"></a>문서화가 되어 있는 인터페이스</h2><br>

<br>

<p>보통 문서화가 되어 있는 인터페이스는 퍼블릭 인터페이스라고 봅니다. </p>
<br>

<p>만약, 문서에 명시적으로 인터페이스가 이전 버전과 호환성을 고려하지 않아도 되는 잠정적 혹은 내부 인터페이스라고 선언이 되어 있는 경우에는 퍼블릭 인터페이스라고 보지 않습니다. </p>
<br>

<br>

<p>모든 문서화 되지 않은 인터페이스들은 내부 인터페이스인것으로 추정합니다. </p>
<br>

<br>

<h2 id="all-속성"><a href="#all-속성" class="headerlink" title="__all__ 속성"></a><code>__all__</code> 속성</h2><br>

<br>

<p>모듈은 <code>__all__</code>을 사용하여, 명시적으로 퍼블릭 API 안에 이름을 선언합니다. </p>
<p><br><code>__all__</code>을 비어있는 리스트에 설정함으로써, 모듈이 퍼블릭 API 를 가지고 있지 않다고 표시합니다. </p>
<p><br>만약 어떤 네임공간의 사용이 내부적으로 사용으로 보일때는, 인터페이스도 internal interface로 간주합니다. </p>
<br>

<br>

<h2 id="Imported-Names"><a href="#Imported-Names" class="headerlink" title="Imported Names"></a>Imported Names</h2><br>

<br>

<p>가져온 이름들은 구현할때 세부 사항으로 간주되어야 합니다<br></p>
<p>다른 모듈들은 포함된 모듈의 API 에서 명시적으로 문서화 되어 있는 부분이 아닌 이상, </p>
<p>가져온 이름에 대한 간접 엑세스에 의존해서는 안됩니다. </p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>아직 public interface 와 internal interface  를 고려할만큼, 공부 수준이 높지 않아서. </p>
<p>Interface 관련 내용은 봐도 잘 모르겠군요. </p>
<br>

<p>나중에 수준이 좀 더 올르면, 그때 다시 볼 예정입니다.<br></p>
<br>

<br>

<br>

<p><br><br></p>
<br>

<br>

<br>

<br>

]]></content>
  </entry>
  <entry>
    <title>PEP8 Naming Conventions -3편</title>
    <url>/2020/04/07/PEP8-Naming-Conventions-3%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="파이썬-Naming-Convention-3-편"><a href="#파이썬-Naming-Convention-3-편" class="headerlink" title="파이썬 Naming Convention - 3 편"></a>파이썬 Naming Convention - 3 편</h2><br>

<br>

<h2 id="Presriptive-Naming-Convention-Cont"><a href="#Presriptive-Naming-Convention-Cont" class="headerlink" title="Presriptive: Naming Convention (Cont.)"></a>Presriptive: Naming Convention (Cont.)</h2><br>

<br>

<p>지난 포스팅에 이어, Prescriptive Naming Convention 을 이어갑니다 </p>
<br>

<br>

<h2 id="Desigining-for-Interface"><a href="#Desigining-for-Interface" class="headerlink" title="Desigining for Interface"></a>Desigining for Interface</h2><br>

<br>

<p>인터페이스를 위한 설계에 대한 내용입니다. </p>
<br>

<blockquote>
<p>언제나</p>
<p>클래스의 메써드와 인스턴스 변수들이</p>
<p>퍼블릭값일지 아닐지에 대한 결정을 해야합니다. </p>
</blockquote>
<br>

<p>결정하기가 쉽지 않다면, <code>non-public</code> 값을 선택 합니다. <br></p>
<p>나중에 <code>non-public</code>을 <code>public</code>으로 바꾸는게, <code>public</code>을 <code>non-public</code>으로 지정하는것보다 쉽습니다. </p>
<br>

<br>

<h2 id="Public-vs-Non-Public-Attributes"><a href="#Public-vs-Non-Public-Attributes" class="headerlink" title="Public vs Non-Public Attributes"></a>Public vs Non-Public Attributes</h2><br>

<br>

<p><strong><code>Public attributs</code> (퍼블릭 속성)</strong>은 대외적으로 여러분들과 관계없는 클라이언트들이 클래스를 사용할것이 예상될때 사용합니다.</p>
<br>

<p><strong><code>Non-ublic attributs</code> (논 퍼블릭 속성)</strong>은 제 3자에 의해서 사용되지 않을때 사용하는 속성들입니다. <code>non-public</code>속성들은 나중에 수정되거나 삭제될수 있고. 수정이나 삭제에가 되지 않는다는 보장은 없습니다. </p>
<br>

<br>

<a id="more"></a>



<blockquote>
<p>Public 의 반대말인 Private 이라는 단어는 쓰지 않습니다.</p>
<p>왜냐하면, 파이썬에서는 사실 어떤 속성도 private 속성을 가질수가 없습니다. </p>
</blockquote>
<br>

<br>

<p>public 과 non-public 외에 또다른 속성 카테고리는 서브클래스 API (주로 <code>protected</code> 보호된속성) 입니다.</p>
<br>

<br>

<p><strong>어떤 클래스들은 상속 혹은 확장 혹은 클래스의 동작이 수정되게끔 설계되어 있습니다</strong><br></p>
<p><strong>이런 클래스들을 설계할때는, 아래 사항들을 명시적으로 결정해야 합니다.</strong></p>
<br>

<ul>
<li>어떤 속성들을 public 으로 지정할지 </li>
<li>어떤 부분들이 서브클래스 API 가 될것인지 </li>
<li>어떤게 실질적으로 베이스 클래스로 사용될지 </li>
</ul>
<br>

<br>

<h2 id="파이써닉한-스타일-가이드라인"><a href="#파이써닉한-스타일-가이드라인" class="headerlink" title="파이써닉한 스타일 가이드라인"></a>파이써닉한 스타일 가이드라인</h2><p><br><br></p>
<p><strong>이런점을 염두에 두고, 파이써닉한 가이드라인은 아래와 같습니다</strong></p>
<br>

<br>

<ul>
<li>public attributes (퍼블릭 속성)들은 맨앞에 언더스코어를 가지면 안됩니다.</li>
<li>만일 public attribute 이름이 예약된 키워드와 충돌할때는, 속성이름 뒤에 하나의 언더스코어를 붙입니다. </li>
<li>단순한 퍼블릭 데이터 속성들은, 속성 이름을 노출하는게 제일 좋습니다</li>
<li>만일, 당신의 클래스가 서브클래스가 될 의도가 있고, 사용하지 않게 하고 싶은 속성들이 있다면, 이름을 지을때 언더스코어 2개를 앞에 붙이고, 뒤에는 붙여주지 않습니다 (name mangling 참조) </li>
</ul>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>아직까지는 subclass, public 혹은 private 속성들을 생각하게 될만큼 복잡한 코드를 다루지 않아서. <br></p>
<p>위의 가이드라인이 이해가 잘 가지 않습니다. </p>
<br>

<p>나중에 복잡한 클래스를 설계하게 되면, 그때 다시와서 봐야 할것 같네요.</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Naming Conventions</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Naming Conventions - 2편</title>
    <url>/2020/04/07/PEP8-Naming-Conventions-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="파이썬-Naming-Convention-2편"><a href="#파이썬-Naming-Convention-2편" class="headerlink" title="파이썬 Naming Convention - 2편"></a>파이썬 Naming Convention - 2편</h2><br>

<br>

<p><strong>Prescriptive: Naming Conventions</strong><br><br><br></p>
<p>타이틀이 prescriptive: Naming Conventions 인데. Prescriptive 의 뜻은 규범 혹은 처방등의 의미로 쓰입니다.<br><br></p>
<p>이름짓기에 관한 처방 혹은 규범이라는 뜻이 되겠네요.<br><br></p>
<h2 id="Names-to-Avoid-피해야할-이름들"><a href="#Names-to-Avoid-피해야할-이름들" class="headerlink" title="Names to Avoid (피해야할 이름들)"></a>Names to Avoid (피해야할 이름들)</h2><br>

<p>절대로 피해야 할 변수명은, 아래와 같습니다.  </p>
<br>

<ul>
<li>소문자 엘<code>l</code></li>
<li>대문자 오 <code>O</code></li>
<li>대문자 아이 <code>I</code></li>
</ul>
<br>

<blockquote>
<p>l (엘), O(오), I(아이)<br></p>
<p>이 문자들은, 숫자 1과 0 하고 구분이 잘 안가기 때문에 사용하는것을 피해야 합니다.<br></p>
</blockquote>
<br>

<h2 id="ASCII-호환"><a href="#ASCII-호환" class="headerlink" title="ASCII 호환"></a>ASCII 호환</h2><br>

<p>파이썬 스탠다드 라이브러리에서 사용되는 식별자들은 ASCII 호환이 되어야 합니다. <br></p>
<p>이 부분은, PEP3131에 나와있습니다.<br><br></p>
<a id="more"></a><br><br>

<h2 id="Package-and-Module-Names-패키지와-모듈-이름"><a href="#Package-and-Module-Names-패키지와-모듈-이름" class="headerlink" title="Package and Module Names(패키지와 모듈 이름)"></a>Package and Module Names(패키지와 모듈 이름)</h2><br>

<p>모듈명은 짧아야 하고, 모든 문자가 소문자여야 합니다. </p>
<br>

<p>가독성이 향상될수 있을 경우, 모듈 이름에 언더스코어를 붙여도 됩니다.</p>
<br>

<p>파이썬 패키지 이름도 짧아야 하는건 마찬가지이고, 모든 문자가 소문자여야 하지만<br></p>
<p>패키지에는 언더스코어의 사용은 권장되지 않습니다. </p>
<p><br><br></p>
<p>C나 C++ 로 쓰여져 있는 확장 모듈이 파이썬 모듈과 같이 동작하여 고급의 인터페이스를 제공할때에는, <br></p>
<p>C / C++ 모듈 맨앞에 언더스코어를 붙입니다 (예, _socket)<br><br></p>
<br>

<h2 id="Class-Names-클래스명"><a href="#Class-Names-클래스명" class="headerlink" title="Class Names(클래스명)"></a>Class Names(클래스명)</h2><p><br><br></p>
<blockquote>
<p>클래스의 이름을 지을때는 보통 <code>CapWords</code> 원칙을 따릅니다</p>
</blockquote>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CapWords 의 예시 </span></span><br><span class="line"><span class="comment"># class 이름에서 각 용어의 첫문자만 대문자로 표시 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentPackage</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeBenefits</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">salary_remuneration</span><span class="params">()</span>:</span> </span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>인터페이스가 문서화되어 있고 클래스가 호출용도로만 사용될 경우에는, 함수명을 짓는 방법과 동일하게 사용되어도 괜찮습니다. <br><br><br></p>
<p>빌트인 (예, 내장함수, 내장클래스, 내장모듈) 이름들을 짓는데에는 별도의 규칙이 존재합니다.<br></p>
<p>대부분의 빌트인 이름들은, 하나의 단어로 되어 있습니다. <br>한가지 이상의 단어가 사용되는 예외가 생길때에는, 기본적으로 <code>CapWords</code> 규칙을 따릅니다. <br><br><br></p>
<h2 id="Type-Variable-Names-타입-변수-이름"><a href="#Type-Variable-Names-타입-변수-이름" class="headerlink" title="Type Variable Names (타입 변수 이름)"></a>Type Variable Names (타입 변수 이름)</h2><p><br><br></p>
<p>type variables (타입변수)의 이름은 PEP484에 소개되어 있습니다. </p>
<br>

<p>보통 CapWords 규칙을 사용하고, 짧은이름으로 짓는게 권장됩니다<br><br><br></p>
<p>covariant(공변) 과 contravariant(반변) 동작을 선언할때에는, 변수에 접미사를 붙이는게 권장됩니다. <br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar </span><br><span class="line"></span><br><span class="line">VT_co = TypeVar(<span class="string">'VT_co'</span>, covariant=<span class="literal">True</span>)</span><br><span class="line">KT_contra = TypeVar(<span class="string">'KT_contra'</span>, contravariant=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="Exception-Names-예외-이름"><a href="#Exception-Names-예외-이름" class="headerlink" title="Exception Names (예외 이름)"></a>Exception Names (예외 이름)</h2><p><br><br></p>
<p>예외처리 상황에서, 예외사항은 하나의 클래스 형태가 됩니다. </p>
<p><br>따라서, 클래스명을 짓는 원칙이 여기에 적용됩니다. <code>예외명</code>뒤에 <code>Error</code> 라는 접미사를 예외명에 붙여야 합니다<br><br></p>
<h2 id="Global-Variable-Names-전역변수명"><a href="#Global-Variable-Names-전역변수명" class="headerlink" title="Global Variable Names (전역변수명)"></a>Global Variable Names (전역변수명)</h2><p><br><br></p>
<p>전역변수가 하나의 모듈 안에서만 사용된다고 가정할때, 전역 변수명을 짓는 방법은 함수명을 짓는것과 동일합니다<br></p>
<p><code>import</code> 함수를 사용하여 가져가야 하는 모듈들은 <code>__all__</code> 을 사용해서, 전역변수를 가져가는것을 막을수 있습니다. 혹은, 언더스코어를 접두사에 붙여서 전역변수가 공유값이 아니라는것을 표시할수 있습니다. <br><br><br></p>
<h2 id="Function-and-Variable-Names"><a href="#Function-and-Variable-Names" class="headerlink" title="Function and Variable Names"></a>Function and Variable Names</h2><p><br><br></p>
<p>함수명은 소문자로 되어 있어야 하고, 함수명에 쓰이는 단어들은 가독성의 향상을 위해 언더스코어로 분리되어 있어야 합니다. <br></p>
<br>

<p>변수명을 지을때도 함수명을 짓는것과 동일한 방식으로 짓습니다 <br><br></p>
<blockquote>
<p>함수이름은, </p>
<p>소문자로만 이루어져 있고, 가독성을 위해 각 단어들을 언더스코어로 분리합니다<br></p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">love_python</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 변수명 </span></span><br><span class="line"><span class="comment"># 소문자로만 이루어져 있고, 각 단어들을 _로 구분해 줍니다 </span></span><br><span class="line"></span><br><span class="line">top_student_number = <span class="number">1548</span></span><br></pre></td></tr></table></figure>

<br>

<p>함수명이나 변수명을 지을때 위 방식과 다르게 <code>mixedCase</code> 가 사용될수도 있습니다만, </p>
<br>

<p><code>mixedCase</code>사용은 해당 스타일이 이미 적용된 코드에서만 사용합니다 (예, threading.py) </p>
<br>

<br>

<h2 id="Method-Names-and-Instance-Variables"><a href="#Method-Names-and-Instance-Variables" class="headerlink" title="Method Names and Instance Variables"></a>Method Names and Instance Variables</h2><br>

<br>

<p>메써드 이름과 인스턴스 변수들도 함수명을 짓는 방식과 동일합니다. </p>
<p>소문자로 짓고, 각 단어들은 <code>_</code>로 분리해 줍니다. </p>
<br>

<p>퍼블릭 값이 아닌 메써드와 인스턴스 변수들은 맨앞에 언더스코어 하나를 붙여줍니다 </p>
<br>

<p>서브클래스들과 이름들이 충돌하는것을 피하기 위해서는, </p>
<br>

<p>파이썬의 <code>name mangling</code> 룰에 따라서, 맨앞에 두개의 언더스코어를 붙여줍니다. </p>
<br>

<br>

<h2 id="Constants-상수"><a href="#Constants-상수" class="headerlink" title="Constants (상수)"></a>Constants (상수)</h2><br>

<br>

<blockquote>
<p>constants (상수) 이름은, </p>
<p>모든 문자가 대문자로 되어 있고, 각 단어들은 언더스코어를 사용해 분리합니다.</p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Constants </span></span><br><span class="line"></span><br><span class="line">MAX_OVERFLOW = <span class="number">10</span> </span><br><span class="line">TOTAL = <span class="number">500</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>Naming Convention 의 내용이 좀 깁니다. <br></p>
 <br>

<blockquote>
<p>변수명, 함수명, 클래스명 들의 이름을 잘 짓는건 굉장히 중요합니다. </p>
<p>내가 정의한 이름들이 다른 사람들이 봤을때 </p>
<p>읽기 편하고 의도를 파악하기 쉽게 지어야 합니다. </p>
</blockquote>
<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Naming Convention</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Naming Conventions - 1편</title>
    <url>/2020/04/06/PEP8-Naming-Conventions-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="파이썬-Naming-Convention"><a href="#파이썬-Naming-Convention" class="headerlink" title="파이썬 Naming Convention"></a>파이썬 Naming Convention</h2><br>

<br>

<p>파이썬에서의 이름짓기 규칙은 조금 지저분합니다. 따라서, 우리는 이름짓기를 완벽하게 일반화하여 일관성있게 할수가 없습니다. </p>
<br>

<br>

<p><strong>그렇지만, PEP8 에서는 현재 권장되는 이름짓기 규칙과 naming standard 를 제시합니다</strong></p>
<br>

<br>

<blockquote>
<p>새로운 모듈과 패키지들은</p>
<p>PEP8에 나와있는 naming convention 대로 이름이 지어져야 합니다. </p>
<p>하지만</p>
<p>존재하고 있는 라이브러리들은 이미 다른 스타일들을 가지고 있기 때문에, </p>
<p>내부적으로 일관성을 정하여 이름을 사용합니다. </p>
</blockquote>
<br>

<a id="more"></a>

<br>

<h2 id="Overriding-Principle"><a href="#Overriding-Principle" class="headerlink" title="Overriding Principle"></a>Overriding Principle<br></h2><br>

<p>퍼블릭 API 에서 사용자에게 보이는 이름들은 실행과 이행에 따라 지어진 이름보다. 사용처에 따라서 이름을 지어줍니다. </p>
<br>

<h2 id="Descriptive-Naming-Styles"><a href="#Descriptive-Naming-Styles" class="headerlink" title="Descriptive: Naming Styles"></a>Descriptive: Naming Styles</h2><br>

<br>

<p>우리가 코드로 이름을 써줄때, 굉장히 많은 스타일들이 존재합니다. </p>
<p>함수, 변수, 클래스, 매써드들의 이름을 적을때 쓰이는 스타일들은 여러가지가 존재합니다 </p>
<br>

<p><strong>아래 테이블로 정리 해봤습니다</strong></p>
<br>

<br>

<table>
<thead>
<tr>
<th><strong>Naming Style</strong></th>
<th>비고</th>
</tr>
</thead>
<tbody><tr>
<td>b (single lowercase letter)</td>
<td>소문자 1글자</td>
</tr>
<tr>
<td>B (single Uppercase letter)</td>
<td>대문자 1글자</td>
</tr>
<tr>
<td>lowercase</td>
<td>소문자로만 이루어진 이름</td>
</tr>
<tr>
<td>lower_case_with_underscore</td>
<td>소문자와 언더스코어가 조합된 이름</td>
</tr>
<tr>
<td>UPPERCASE</td>
<td>대문자로만 이루어진 이름</td>
</tr>
<tr>
<td>UPPER_CASE_WITH_UNDERSCORES</td>
<td>대문자와 언더스코어로 조합된 이름</td>
</tr>
<tr>
<td>CapitalizedWords</td>
<td>단어의 첫글자들을 대문자로 표시하는 이름 (Carmel Case)</td>
</tr>
<tr>
<td>mixedCase</td>
<td>첫번째단어는 소문자로, 뒤에 오는 단어들은 대문자로 표시</td>
</tr>
<tr>
<td>Captialized_Words_With_Underscores</td>
<td>단어의 첫글자들만 대문자로 표시하고 언더스코어로 이어지는 이름 (못생김!)</td>
</tr>
</tbody></table>
<br>

<br>

<p>추가로, 파이썬에는 많이 존재 하진 않지만 짧고 고유한 prefix 를 소속 그룹과 관련하여 이름에 붙이는 방식도 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.start()</span><br><span class="line"><span class="comment"># os.start() 함수는 튜플을 반환하는데 </span></span><br><span class="line"><span class="comment"># 튜플에 들어있는 이름들이 prefix (접두사) 를 포함하고 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 예) st_mode, st_size, st_mtime</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>X11 라이브러리는 모든 퍼블릭 함수 앞에 <code>X</code>를 붙입니다. 파이썬에서는 보통 이런 스타일을 불필요하게 생각합니다. <br>왜냐하면, 모든 속성과 메써드들의 이름들은 객체와 함께 접두사가 붙고,<br>함수 이름은 모듈 이름으로 접두사가 붙기 때문입니다. </p>
<br>

<br>

<h2 id="언더스코어를-사용하는-특수한-형태"><a href="#언더스코어를-사용하는-특수한-형태" class="headerlink" title="언더스코어를 사용하는 특수한 형태"></a>언더스코어를 사용하는 특수한 형태</h2><br>

<br>

<table>
<thead>
<tr>
<th>Speical form</th>
<th>사용목적</th>
<th>예시</th>
</tr>
</thead>
<tbody><tr>
<td><code>_single_leading_underscore</code></td>
<td>내부적으로 사용</td>
<td><code>import *</code>을 실행시, <code>_</code>로 시작하는 객체는 가져오지 않습니다.</td>
</tr>
<tr>
<td><code>single_trailing_underscore_</code></td>
<td>파이썬 키워드와 겹치지 않기 위해 사용</td>
<td><code>Tkinter.Toplevel(master,class_&lt;br /&gt;=&#39;ClassName&#39;)</code></td>
</tr>
<tr>
<td><code>__double_leading_underscore</code></td>
<td>클래스 속성과 네임 멩글링</td>
<td>아래 <code>class Car</code> 예시 참조</td>
</tr>
<tr>
<td><code>__double_leading_and_trailing__</code></td>
<td>매직 메서드 혹은 속성</td>
<td><code>__init__</code>, <code>__import__</code> , <code>__file__</code></td>
</tr>
</tbody></table>
<br>

<blockquote>
<p>자세한 설명은 아래 코드를 참조</p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _ 하나가 맨앞에 붙는 경우 </span></span><br><span class="line"><span class="comment"># 내부적으로 사용할때 사용</span></span><br><span class="line">_single_leading </span><br><span class="line"></span><br><span class="line"><span class="comment"># import * 를 하면, _로 시작하는 객체는 가져오지 않음. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># _ 하나가 맨뒤에 붙는 경우 </span></span><br><span class="line"><span class="comment"># 파이썬 키워드와 겹치는것을 피하기 위해 사용 </span></span><br><span class="line">single_trailing_underscore_ </span><br><span class="line"></span><br><span class="line">Tkinter.Toplevel(master, class_=<span class="string">'ClassName'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __ 두개가 맨앞에 붙는 경우 </span></span><br><span class="line"><span class="comment"># 클래스 속성과 name mangling </span></span><br><span class="line"></span><br><span class="line">__double_leading_underscore</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__canDrive = <span class="literal">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">car = Car() </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __ 두개가 앞뒤로 붙는경우 </span></span><br><span class="line"><span class="comment"># 메직메써드로 사용자가 제어하는 이름공간안에 사용</span></span><br><span class="line">__double_leading_and_trailing_underscore__ </span><br><span class="line"></span><br><span class="line">__init__</span><br><span class="line">__import__</span><br><span class="line">__file__</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>아직까지는 이름 지을일이 많이 없고, 특수 케이스가 별로 없어서. </p>
<p><br>우선 이런게 있다는것을 잘 알고 넘어가면 되겠습니다. </p>
<br>]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Naming Conventions</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Comments</title>
    <url>/2020/04/05/PEP8-Comments/</url>
    <content><![CDATA[<h2 id="Comments-주석"><a href="#Comments-주석" class="headerlink" title="Comments (주석)"></a>Comments (주석)</h2><br>

<br>

<p>파이썬에서 주석에 관한 스타일 가이드 입니다. </p>
<br>

<blockquote>
<p>코드와 모순된 주석은 </p>
<p>주석이 없는것보다 나쁩니다 </p>
</blockquote>
<br>

<br>

<p>코드와 모순된 주석을 달바에는 아예 달지 않는게 낫다는 얘기지요 ㅎㅎ </p>
<br>

<br>

<p><strong>주석이 코드와 모순되지 않게 하기 위해서, <Br>코드가 바뀔때 주석도 같이 수정사항에 맞게 업데이트 해줘야 합니다.</strong> </p>
<br>

<p>주석에 쓰이는 문장은 완성된 문장이여야 하고, 소문자로 시작하는 식별자들을 제외하곤 첫번째 단어는 대문자로 써줍니다. </p>
<a id="more"></a>

<br>



<br>

<h2 id="Strunk-and-White-Rule"><a href="#Strunk-and-White-Rule" class="headerlink" title="Strunk and White Rule"></a>Strunk and White Rule</h2><br>

<br>

<blockquote>
<p>영문으로 코드를 작성할때는 Strunk and White 룰을 따릅니다.</p>
</blockquote>
<br>

<br>

<p><code>Strunk and White</code>는 영문으로 문장을 작성하시는분들이 많이 보시는건데. 아래 사이트 참고 부탁 드립니다. </p>
<br>

<p><a href="https://whatis.techtarget.com/definition/Strunks-rules" target="_blank" rel="noopener">https://whatis.techtarget.com/definition/Strunks-rules</a></p>
<br>

<br>

<blockquote>
<p>비영어권 국가에서 오신 파이썬 코더들도 </p>
<p>부디 주석을 영문으로 달아주세요. </p>
</blockquote>
<br>

<p>본인이 본인의 언어로 작성한 코드와 주석은, 대부분의 경우, <br></p>
<p>본인의 언어를 사용하지 않는 사람이 읽게 될 확률이 높습니다.  </p>
<p><br>예) 한국어로 작성된 코드와 주석은 보통, 영어를 사용하는 사람이 읽게 될 확률이 높습니다. </p>
<br>

<br>

<br>

<h2 id="Block-Comment"><a href="#Block-Comment" class="headerlink" title="Block Comment"></a>Block Comment</h2><br>

<br>

<p>보통 하나 혹은 하나 이상의 문단으로 완성된 문장들로 이루어져 있습니다. 각 문장들은 마침표로 끝납니다. </p>
<br>

<br>

<p>블록 커멘트는 특정 혹은 전체 코드에 적용될수 있습니다. </p>
<p>코드와 같은 레벨에 들여쓰기 되어 있습니다. </p>
<br>

<p>각 주석은 <code>#</code>으로 시작하고, 한칸 띄고 주석 내용이 시작합니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 이것은 주석입니다</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>블록 커멘트 안에 있는 문단들은 하나의 <code>#</code>을 포함하고 있는 빈줄로 분리가 됩니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># To Learn any language you must follow the below rules. </span></span><br><span class="line"><span class="comment"># 1. Know the basic syntax, data types, control structures and conditional statements.</span></span><br><span class="line"><span class="comment"># 2. Learn error handling and file I/O. </span></span><br><span class="line"><span class="comment"># 3. Read about advanced data structures. </span></span><br><span class="line"><span class="comment"># 4. Write functions and follow OOPs concepts. </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To Learn Python, LEVEL 0: The Beginnings. </span></span><br><span class="line"><span class="comment"># 1. Variables. </span></span><br><span class="line"><span class="comment"># 2. Data Types. </span></span><br><span class="line"><span class="comment"># 3. Operations. </span></span><br><span class="line"><span class="comment"># 4. Conditionals.</span></span><br><span class="line"><span class="comment"># 5. Functions. </span></span><br><span class="line"><span class="comment"># 6. Step1: Learn the concepts of OOP. </span></span><br><span class="line"><span class="comment"># 7. Step2: Learn about Python's Classes and Objects. </span></span><br><span class="line"><span class="comment"># 8. Step3: Solve Python problems using OOP.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="Inline-Comment"><a href="#Inline-Comment" class="headerlink" title="Inline Comment"></a>Inline Comment</h2><p><br><br></p>
<p>인라인 주석은 드물게 사용합니다. <br><br></p>
<blockquote>
<p>인라인 커멘트는 코드와 같은 줄에 달아주는 주석입니다. </p>
<p>주석을 달을 코드와 최소 2 빈공간 이상 분리되어 있어야 합니다. </p>
</blockquote>
<p><br><br></p>
<p><code>#</code> 을 써주고, 한칸 띄고 시작합니다. </p>
<br>

<br>

<p>너무 명확한 코드에는 인라인 주석을 다는것이 불필요 합니다.<br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 너무 명확한 것을 주석으로 다는 예 </span></span><br><span class="line">x = x + <span class="number">1</span>		<span class="comment"># Increment X </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 인라인 커멘트가 유용하게 쓰이는 예 </span></span><br><span class="line"><span class="comment"># 위의 increment 코드가 어떤 목적으로 사용하는지에 대한 주석 </span></span><br><span class="line"></span><br><span class="line">x = x + <span class="number">1</span> 	<span class="comment"># Compensate for border</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="Document-string-Docstring"><a href="#Document-string-Docstring" class="headerlink" title="Document string (Docstring)"></a>Document string (Docstring)</h2><p><br><br></p>
<p>좋은 <code>docstring</code>을 작성하는 방법은 PEP257 을 참조하시면 됩니다<br><br><br></p>
<p>함수에 주석을 달고 싶을때 쓰는 Document String 혹은 줄여서 docstring 에 대한 내용은 아래와 같습니다<br><br></p>
<ul>
<li>모든 퍼블릭 모듈, 함수, 클래스 그리고 메써드들에는 <code>docstring</code>을 달아줍니다.</li>
<li>퍼블릭 메서드에는 docstring을 달아줄 필요가 없을지 모르지만, 메서드가 무엇을 하는지에 대한 주석은 달아야 합니다. (해당 주석은 def 줄 다음줄에 달아줍니다)</li>
</ul>
<br>

<br>

<p>PEP257은 좋은 docstring 의 관용적인 사용법을 다루고 있습니다.<br></p>
<br>

<blockquote>
<p>다수의 문장이 들어간 docstring 이 끝나는 줄에는 <code>&quot;&quot;&quot;</code>만 넣어줍니다.<br></p>
<p>하나의 문장만 들어간 docstring 은 docstring 의 끝에 <code>&quot;&quot;&quot;</code>를 같은줄에 넣어줍니다.<br></p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 다수의 문장으로 이루어진 docstring </span></span><br><span class="line"><span class="string">"""Return a foobang</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Optional plots says to fronbicate the bizbaz first.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 하나의 문장으로 이루어진 docstring </span></span><br><span class="line"><span class="string">"""This calculates the sum """</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>주석에 관한것을 알아보았습니다.<br></p>
<p>저는 사실 인라인으로 주석을 다는것을 좋아했는데.. 이점은 좀 피해야 겠네요;;; </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Comments</tag>
        <tag>주석</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 When to Use Trailing Commas</title>
    <url>/2020/04/05/PEP8-When-to-Use-Trailing-Commas/</url>
    <content><![CDATA[<h2 id="언제-콤마를-뒤에-붙여야-하는가"><a href="#언제-콤마를-뒤에-붙여야-하는가" class="headerlink" title="언제 콤마를 뒤에 붙여야 하는가"></a>언제 콤마를 뒤에 붙여야 하는가</h2><br>

<br>

<p>이번 포스팅은 언제 코드끝에 콤마를 붙여야 하는가에 대한 내용입니다. </p>
<br>

<br>

<blockquote>
<p>튜플처럼 의무화 되어 있는 콤마를 제외하고는 </p>
<p>보통은 끝에 콤마를 붙이는것은 선택 사항입니다. </p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line">FILES = (<span class="string">'setup.cfg'</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="comment"># 괄호가 없는데 뒤에 콤마를 붙이는 경우 </span></span><br><span class="line">FILES = <span class="string">'setup.cfg'</span>,</span><br></pre></td></tr></table></figure>

<br>

<p>콤마는 버전관리 시스템이 사용될때도 도움이 됩니다. </p>
<p><br>그리고, 값들이 리스트 안에 들어가 있는데, 그 안에 인자나 가져올 아이템이 나중에 확장될지 모를때 도움이 됩니다. </p>
<br>

<p><strong>코드를 보면서 이해하자면</strong></p>
<br>

<a id="more"></a>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="comment"># 각각의 값이나 파일들 뒤에 콤마를 붙이고 다음줄로 넘어갑니다 </span></span><br><span class="line"><span class="comment"># 더이상 값이 없을때는, 바로 괄호를 닫지 않고. 다음줄에서 닫습니다. </span></span><br><span class="line"></span><br><span class="line">FILES = [</span><br><span class="line">    <span class="string">'setup.cfg'</span>,</span><br><span class="line">    <span class="string">'tox.ini'</span>,</span><br><span class="line">	]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나중에 값이나 파일이 추가될때는</span></span><br><span class="line"><span class="comment"># 다음줄에 값을 넣고 뒤에 콤마를 붙여줍니다. </span></span><br><span class="line"><span class="comment"># 그리고 다음줄에 괄호를 닫아줍니다. </span></span><br><span class="line"></span><br><span class="line">initialize(FILES,</span><br><span class="line">          error=<span class="literal">True</span>,</span><br><span class="line">          )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="comment"># 줄바꿈을 한뒤에 콤마를 넣지 않고. 끝에 나오는 콤마까지 합쳐서 한줄에 넣은 경우 </span></span><br><span class="line"></span><br><span class="line">FILES = [<span class="string">'setup.cfg'</span>, <span class="string">'tox.ini'</span>,]</span><br><span class="line">initalize(FILES, error=<span class="literal">True</span>,)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>콤마를 잘 붙이면, </p>
<p><br>인자나, 가져오는 파일들을 구분할때 시각적으로 많은 도움이 될것 같습니다. </p>
<br>

<br>

<p>들어가는 값이 너무 많아질때는 각각의 줄로 나누고 콤마를 붙여줍니다. </p>
<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Commas</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Whitespace in Expressions and Statements - 2편</title>
    <url>/2020/04/05/PEP8-Whitespace-in-Expressions-and-Statements-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="수식과-구문안에서-빈공간-기타-권장-사항들"><a href="#수식과-구문안에서-빈공간-기타-권장-사항들" class="headerlink" title="수식과 구문안에서 빈공간 - 기타 권장 사항들"></a>수식과 구문안에서 빈공간 - 기타 권장 사항들</h2><br>

<br>

<p>수식과 구문 안에 공백들에 대한 기타 권장 사항들입니다. <br></p>
<br>

<br>

<h2 id="뒤에오는-빈공간은-언제나-피해야-합니다"><a href="#뒤에오는-빈공간은-언제나-피해야-합니다" class="headerlink" title="뒤에오는 빈공간은 언제나 피해야 합니다"></a>뒤에오는 빈공간은 언제나 피해야 합니다</h2><br>

<br>

<p>공백들은 보이지 않기 때문에 혼란 스러울수 있습니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 빈공간 후에 \ 를 사용 </span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"I'm the best"</span>  \)</span><br><span class="line">print(<span class="string">"I'm the best</span></span><br><span class="line"><span class="string">      \")</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string"># 빈공간이 계속되는 줄로 세어지지 않을때, </span></span><br><span class="line"><span class="string"># 아래 print 문에서 두번째줄은 계속되는 줄로 세어지지 않습니다. </span></span><br><span class="line"><span class="string"># 이어지는 줄이 아닌데도 괜히 사용하면, 시각적으로나 논리적으로 혼란만 초래합니다. </span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">print("</span>I<span class="string">'m the best"</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="Binary-Operator-양쪽-사이드"><a href="#Binary-Operator-양쪽-사이드" class="headerlink" title="Binary Operator 양쪽 사이드"></a>Binary Operator 양쪽 사이드</h2><br>

<br>

<p>이항 연산자 양쪽 사이드에는 항상 하나의 공백을 넣어줍니다. </p>
<p><br><a id="more"></a></p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 연산자 앞뒤로 빈공간이 있는걸 확인 할수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a = b: </span><br><span class="line"><span class="keyword">if</span> a == b: </span><br><span class="line"><span class="keyword">if</span> a &gt; b: </span><br><span class="line"><span class="keyword">if</span> a &lt; b: </span><br><span class="line"><span class="keyword">if</span> a != b: </span><br><span class="line"><span class="keyword">if</span> a &lt;= b: </span><br><span class="line"><span class="keyword">if</span> a &gt;= b:</span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">in</span> b: </span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">not</span> b: </span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> b:</span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">not</span> b: </span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">and</span> b: </span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">or</span> b:</span><br><span class="line">a += b </span><br><span class="line">a -= b</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="우선순위가-다른-연산이-사용되는-경우"><a href="#우선순위가-다른-연산이-사용되는-경우" class="headerlink" title="우선순위가 다른 연산이 사용되는 경우"></a>우선순위가 다른 연산이 사용되는 경우</h2><br>

<br>

<p>우선순위가 낮은 연산에 공백을 추가해 줍니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line">i = i + <span class="number">1</span> </span><br><span class="line">submitted += <span class="number">1</span> </span><br><span class="line">x = x*<span class="number">2</span> - <span class="number">1</span>  	</span><br><span class="line"></span><br><span class="line"><span class="comment"># x*2 가 우선순위가 더 높은 연산이므로 공백을 추가해주지 않습니다. </span></span><br><span class="line"><span class="comment"># 하지만 - 연산에는 앞뒤로 공백을 추가해 줍니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hypot2 = x*x + y*y </span><br><span class="line">c = (a+b) * (a-b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 곱하기와 더하기가 같이 존재할때 곱셈이 덧셈보다 우선순위가 높습니다. 따라서, *에는 공백을 안줍니다. </span></span><br><span class="line"><span class="comment"># () 안에 있는 연산이 우선순위가 더 높습니다. 따라서 괄호안에 있는 + - 에는 공백을 안줍니다.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 연산자 뒤에 공백이 하나도 없습니다. </span></span><br><span class="line">i=i+<span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 연산자 주변에 공백이 양쪽에 적용되지 않았습니다. </span></span><br><span class="line">submitted +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 우선순위가 높은 연산에 공백을 잘못 적용했습니다. </span></span><br><span class="line"></span><br><span class="line">x = x * <span class="number">2</span> - <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">hypot2 = x * x + y * y </span><br><span class="line">c = ( a + b ) * ( a - b )</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="함수의-annotation"><a href="#함수의-annotation" class="headerlink" title="함수의 annotation"></a>함수의 annotation</h2><br>

<br>

<p>함수의 annotation 에서는 콜론에 대한 보통 방식을 따르고</p>
<p><code>-&gt;</code> 주위에 빈공간을 넣어줍니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(input: AnyStr)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">()</span> -&gt; PosInt:</span> </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(input:AnyStr)</span>:</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">()</span>-&gt;PosInt:</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="키워드-인자-주위의-공백"><a href="#키워드-인자-주위의-공백" class="headerlink" title="키워드 인자 주위의 공백"></a>키워드 인자 주위의 공백</h2><br>

<br>

<p>키워드 인자를 표시할때 사용되는 <code>=</code> 주위에 공백을 넣지 않습니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag=<span class="number">0.0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> magic(r=real, i=imag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag = <span class="number">0.0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> magic(r = real, i = imag)</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>그렇지만, 기본값을 가지는 인자 annotation 을 합칠때에는 </p>
<p><code>=</code>주위에 공백을 넣어줍니다.</p>
</blockquote>
<br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 좋은예 </span><br><span class="line">def munge(sep: AnyStr &#x3D; None): ...  </span><br><span class="line">def munge(input: AnyStr, sep: AnyStr &#x3D; None, limit&#x3D;1000): ... </span><br><span class="line"></span><br><span class="line"># 나쁜예 </span><br><span class="line">def munge(input: AnyStr&#x3D;None): ... </span><br><span class="line">def munge(input: AnyStr, limit &#x3D; 1000): ...</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="같은줄에-여러개의-statement"><a href="#같은줄에-여러개의-statement" class="headerlink" title="같은줄에 여러개의 statement"></a>같은줄에 여러개의 statement</h2><br>

<br>

<p>같은줄에 여러개의 statement 를 가지는것은 권장 되지 않습니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>:</span><br><span class="line">    do_blah_thing()</span><br><span class="line">do_one()</span><br><span class="line">do_two()</span><br><span class="line">do_three()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>:do_blah_thing()</span><br><span class="line">do_one(); do_two(); do_three()</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="조건이-많은-구문에서-if-for-while"><a href="#조건이-많은-구문에서-if-for-while" class="headerlink" title="조건이 많은 구문에서 if/for/while"></a>조건이 많은 구문에서 if/for/while</h2><br>

<br>

<p>이따금씩,  if/for/while 을 같은줄에 넣는것은 괜찮습니다. 하지만, 절대로 조항이 많은 구문에서는 그렇게 쓰면 안됩니다. </p>
<br>

<p>또한, 긴줄을 지나치게 접는것도 피해야합니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="number">1</span>st: total += x </span><br><span class="line"><span class="keyword">while</span> t&lt; <span class="number">10</span>: t = delay() </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 위 나쁜예를 고치면, 아래와 같이 고쳐집니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>:</span><br><span class="line">    do_blah_thing()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="number">1</span>st:</span><br><span class="line">    total += x </span><br><span class="line"><span class="keyword">while</span> t &lt; <span class="number">10</span>:</span><br><span class="line">    t = delay()</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="PEP에서-권장하지-않는-코드"><a href="#PEP에서-권장하지-않는-코드" class="headerlink" title="PEP에서 권장하지 않는 코드"></a>PEP에서 권장하지 않는 코드</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 틀린예 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing() </span><br><span class="line"><span class="keyword">else</span>: do_non_blah_thing() </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: something() </span><br><span class="line"><span class="keyword">finally</span>: cleanup() </span><br><span class="line"></span><br><span class="line">do_one(); do_two(); do_three(long, argument, list, like, this) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: one(); two(); three()</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>공백에 대한 기타 권장사항들을 알아보았습니다. </p>
<p>공백을 권장사항에 따라 적절하게 적용해서, 더 깔끔하게 코드를 써봅시다~ </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>공백</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Whitespace in Expressions and Statements - PET PEEVES</title>
    <url>/2020/04/05/PEP8-Whitespace-in-Expressions-and-Statements-PET-PEEVES/</url>
    <content><![CDATA[<p><br><br></p>
<h2 id="수식과-구문안에서-빈공간"><a href="#수식과-구문안에서-빈공간" class="headerlink" title="수식과 구문안에서 빈공간"></a>수식과 구문안에서 빈공간</h2><br>

<br>

<p>이번토픽은 PEP8에서 다루는 공백에 대한 포스트입니다. </p>
<br>

<br>

<p>포스팅을 시작하기 전에, 프로그래밍언어 안에서 쓰이는 <code>expressions</code> 이라는 단어와 <code>Statements</code>에 대한 뜻을 먼저 알고 시작하겠습니다. </p>
<br>

<h2 id="Expressions-와-Statements"><a href="#Expressions-와-Statements" class="headerlink" title="Expressions 와 Statements"></a>Expressions 와 Statements</h2><br>

<p>영어에서는 <code>expressions</code>은 표현, <code>statements</code>는 진술서 라는 의미로 쓰이는게 많은데. </p>
<p><br><br></p>
<p><strong>프로그래밍 세계에서 의미하는 바는 조금 다른것 같아. 아래와 같이 요약합니다.</strong></p>
<br>

<br>

<blockquote>
<p><strong>Expressions</strong></p>
<p>수식, 연산식 </p>
<p>예) 1 + 1 = 0 혹은 a = 3 </p>
</blockquote>
<br>

<br>

<blockquote>
<p><strong>Statements</strong></p>
<p>실행 가능한 (executable) 코드 조각. </p>
<p>보통 여러개의 expressions 로 이루어져 있습니다. <br></p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 함수안에 실행 가능한 구문이 Statements 입니다. </span></span><br><span class="line"><span class="comment"># 여러개의 Expressions 로 이루어져 있는걸 확인 할수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addition</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span> </span><br><span class="line">    b = <span class="number">2</span> </span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure>

<a id="more"></a> <br>

<br>

<br>

<h2 id="PET-PEEVES"><a href="#PET-PEEVES" class="headerlink" title="PET PEEVES"></a>PET PEEVES</h2><br>

<br>

<p>PET PEEVES의 뜻도 짚어보고 넘어갑니다. </p>
<p>PET PEEVES 는 특별히 짜증나게 느끼는것들을 얘기하는데. 예를 들면 아래와 같습니다. </p>
<br>

<br>

<blockquote>
<p>우리 어머니의 PET PEEVE 는 내가 방청소를 안하는겁니다..<br></p>
<p>여자친구의 PET PEEVE 는 내가 연락을 잘 안하는겁니다.. <br></p>
<p>제 PET PEEVE 는 약속시간에 늦는겁니다. </p>
</blockquote>
<br>

<p>어머니를 짜증나게 하는것은 내가 방청소를 안하는것이고, 여자친구가 짜증나 하는거는 내가 연락을 잘 안하는것이고. 저를 짜증나게 하는것은 약속시간을 지키지 않는것입니다. </p>
<br>

<br>

<p>PEP8 에서는 짜증나는것들은 피하면서 코드를 쓰라고, 이번 타이틀을 이렇게 적은것 같습니다 ㅎㅎ </p>
<br>

<br>

<h2 id="과도하거나-적절하지-못한-공백은-피해야-합니다"><a href="#과도하거나-적절하지-못한-공백은-피해야-합니다" class="headerlink" title="과도하거나 적절하지 못한 공백은 피해야 합니다"></a>과도하거나 적절하지 못한 공백은 피해야 합니다</h2><br>

<br>

<p>PEP8 에서는 아래 상황들에 대해서 다룹니다. 예를들면서 넘어가겠습니다. </p>
<br>

<br>

<h3 id="소괄호-중괄호-대괄호-바로-안쪽"><a href="#소괄호-중괄호-대괄호-바로-안쪽" class="headerlink" title="소괄호, 중괄호, 대괄호 바로 안쪽"></a>소괄호, 중괄호, 대괄호 바로 안쪽</h3><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="comment"># 괄호가 시작하고 바로 띄어쓰기가 나오고, </span></span><br><span class="line"><span class="comment"># 괄호가 닫히기 전에 띄어쓰기가 한번 더 되었습니다</span></span><br><span class="line"><span class="comment"># 너무 과도한 공백 사용의 예 </span></span><br><span class="line"></span><br><span class="line">spam( ham [ <span class="number">1</span> ], &#123; eggs: <span class="number">2</span> &#125; )</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="뒤에-붙는-콤마와-괄호가-닫히는-사이-공간"><a href="#뒤에-붙는-콤마와-괄호가-닫히는-사이-공간" class="headerlink" title="뒤에 붙는 콤마와 괄호가 닫히는 사이 공간"></a>뒤에 붙는 콤마와 괄호가 닫히는 사이 공간</h3><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">foo = (<span class="number">0</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="comment"># 0 과 닫히는 괄호 사이에 의미없는 띄어쓰기가 있습니다. </span></span><br><span class="line"></span><br><span class="line">bar = (<span class="number">0</span>, )</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="콤마-세미콜론-콜론-바로-전-공간"><a href="#콤마-세미콜론-콜론-바로-전-공간" class="headerlink" title="콤마, 세미콜론, 콜론 바로 전 공간"></a>콤마, 세미콜론, 콜론 바로 전 공간</h3><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span>: <span class="keyword">print</span> x, y; x, y = y, x </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예</span></span><br><span class="line"><span class="comment"># 콜론, 세미콜론, 콤마 전후에 너무 많은 공백이 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span> : <span class="keyword">print</span> x , y ; x , y = y , x</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="슬라이싱에-사용되는-콜론은-이항-연산자-역할을-합니다"><a href="#슬라이싱에-사용되는-콜론은-이항-연산자-역할을-합니다" class="headerlink" title="슬라이싱에 사용되는 콜론은 이항 연산자 역할을 합니다"></a>슬라이싱에 사용되는 콜론은 이항 연산자 역할을 합니다</h3><br>

<br>

<p>논리적 연산자 역할을 하는 콜론이 사용될때 (슬라이싱)에 대한 공백 가이드 라인 입니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">ham[<span class="number">1</span>:<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span>:<span class="number">3</span>], ham[:<span class="number">9</span>:<span class="number">3</span>], ham[<span class="number">1</span>::<span class="number">3</span>], ham[<span class="number">1</span>:<span class="number">9</span>:]</span><br><span class="line">ham[lower:upper], ham[lower:uper:], ham[lower::step]</span><br><span class="line">ham[lower+offset : upper+offset]</span><br><span class="line">ham[: upper_fn(x) : step_fn(x), ham[:: step_fn(x)]]</span><br><span class="line">ham[lower + offset : upper + offset]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 콜론을 사이에 두고 양쪽에 같은 공백이 적용 되어 있지 않습니다. </span></span><br><span class="line"></span><br><span class="line">ham[lower + offset:upper + offset]    <span class="comment"># 수정 예시 ham[lower+offset : upper+offset]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 슬리이싱이라 콜론 사이에 공백을 넣을 필요가 없는 경우 </span></span><br><span class="line"></span><br><span class="line">ham[<span class="number">1</span>: <span class="number">9</span>], ham[<span class="number">1</span> :<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span> :<span class="number">3</span>]	 </span><br><span class="line"><span class="comment"># 수정 예시 ham[1:9], ham[1:9:3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># extended slicing, :: 가 나오는 경우 공백 없이 써줘야 합니다.</span></span><br><span class="line"></span><br><span class="line">ham[lower : : upper]				  </span><br><span class="line"><span class="comment"># 수정 예시 ham[lower::upper]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 콜론이 이항 연산자와 같은 역할을 하므로, 공백이 없어야 합니다. </span></span><br><span class="line"></span><br><span class="line">ham[ : upper] 						</span><br><span class="line"><span class="comment"># 수정 예시 ham[:upper]</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="함수를-호출할때-인자가-들어가는-바로-앞자리"><a href="#함수를-호출할때-인자가-들어가는-바로-앞자리" class="headerlink" title="함수를 호출할때 인자가 들어가는 바로 앞자리"></a>함수를 호출할때 인자가 들어가는 바로 앞자리</h3><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">spam(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line">spam (<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="인덱스와-슬라이싱을-하는-괄호-바로-앞자리"><a href="#인덱스와-슬라이싱을-하는-괄호-바로-앞자리" class="headerlink" title="인덱스와 슬라이싱을 하는 괄호 바로 앞자리"></a>인덱스와 슬라이싱을 하는 괄호 바로 앞자리</h3><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line">dct[<span class="string">'key'</span>] = <span class="number">1</span>st[index]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line">dct [<span class="string">'key'</span>] = <span class="number">1</span>st [index]</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="변수-할당시-다른줄과-줄을-맞추기-위한-공백"><a href="#변수-할당시-다른줄과-줄을-맞추기-위한-공백" class="headerlink" title="변수 할당시 다른줄과 줄을 맞추기 위한 공백"></a>변수 할당시 다른줄과 줄을 맞추기 위한 공백</h3><br>

<p>변수를 할당하거나 선언할때, 연산자 주변에 다른 줄에 있는 연산기호와 줄을 맞추기 위해서 </p>
<p>공백을 너무 많이 주면 안됩니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span> </span><br><span class="line">y = <span class="number">2</span> </span><br><span class="line">long_variable = <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line">x 			  = <span class="number">1</span> </span><br><span class="line">y			  = <span class="number">2</span> </span><br><span class="line">long_variable = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>너무 과도하거나 불필요하거나 적절하지 못한 공백의 사용은, 코드의 가독성을 떨어트리는것 같습니다. </p>
<br>

<p>적절한 곳에 공백을 두어서 코드의 가독성을 높이고. </p>
<br>

<p>논리적으로나 시각적으로나 더 간결한 코드를 작성하면 좋겠습니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>PET PEEVES</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - String Quotes</title>
    <url>/2020/04/05/PEP8-Code-Layout-String-Quotes/</url>
    <content><![CDATA[<h1 id="String-Quotes-문자열-따옴표"><a href="#String-Quotes-문자열-따옴표" class="headerlink" title="String Quotes (문자열 따옴표)"></a>String Quotes (문자열 따옴표)</h1><br>

<br>

<blockquote>
<p>파이썬에서는, </p>
<p>문자열을 사용할때 작은따옴표와 큰따옴표는 똑같습니다. </p>
</blockquote>
<br>

<p>PEP8 에서는, 따옴표의 사용에 대한 어떠한 권장 사항이 없습니다. </p>
<p><br>단지 하나의 룰을 정하고, 그것을 일관되게 사용하길 바랍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">"This is string"</span> 	<span class="comment"># 큰 따옴표를 사용한 경우 </span></span><br><span class="line">string = <span class="string">'This is string'</span>	<span class="comment"># 작은 따옴표를 사용한 경우 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 두가지 방식은 같음</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..<br></h2><br>

<p>저는 보통 작은 따옴표 <code>&#39;</code>를 사용합니다.. <code>shift</code>키를 안눌러도 되서 그런가 봅니다. </p>
<br>

<p>여러분들은 어떠신가요? <br></p>
<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>문자열</tag>
        <tag>따옴표</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Module Level Dunder Names</title>
    <url>/2020/04/05/PEP8-Code-Layout-Module-Level-Dunder-Names/</url>
    <content><![CDATA[<h1 id="Module-내에-Dunder-Names"><a href="#Module-내에-Dunder-Names" class="headerlink" title="Module 내에 Dunder Names"></a>Module 내에 Dunder Names</h1><br>

<br>

<p><strong>모듈 레벨에서 Dunder Names</strong><br></p>
<br>

<br>

<p>모듈 레벨에서 <code>__all__</code>, <code>__author__</code>, <code>__version__</code> 같은 “dunders” 는 모듈 docstring 뒤에 그리고 <code>__future__</code>를 제외한 모든 import 구문 앞에 붙입니다. <br></p>
<br>

<br>

<blockquote>
<p>dunders </p>
<p><br>언더스코어 _ 두개가 붙는 메소드로 </p>
<p><strong>Double UNDERscore</strong> Method 를 줄여서 </p>
<p>Dunder 메소드라고 부릅니다. </p>
</blockquote>
<br>

<p><br><a id="more"></a></p>
<p>파이썬에서는, 아래 사항들을 의무화 합니다<br></p>
<br>

<blockquote>
<p><code>__future__</code> imports 는 docstring 을 제외한 어떤 코드보다 앞에 나와야 합니다.<br></p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""This is the example module. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This module does stuff </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> barry_as_FLUFL<span class="comment"># __future__ imports 가 docstring 다음에 위치합니다.</span></span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">__version__ = <span class="string">'0.1'</span></span><br><span class="line">__author__ = <span class="string">'Cardinal Biggles'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __future__를 제외한 Dunders 는 다른 일반 imports 구문 앞에 나옵니다.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>__ 가 붙는 imports 구문에 대한 순서를 알아보았습니다.<br></p>
<br>

<p>Docstring 이 우선으로 오고, </p>
<p><code>__future__</code>가 두번째로 오고<br></p>
<p><code>__future__</code>를 제외한 기타 다른 Dunders (e.g.<code>__all__, __version__, __author__ 등등</code>) 는 세번째로 옵니다. </p>
<p>그리고, 나머지 보통 라이브러리 imports (e.g. import os, import sys) 가 그 뒤에 온다고 정리하면 될것 같습니다. </p>
<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Dunder</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Imports</title>
    <url>/2020/04/05/PEP8-Code-Layout-Imports/</url>
    <content><![CDATA[<h1 id="PEP8-Code-Layout-Imports-가져오기"><a href="#PEP8-Code-Layout-Imports-가져오기" class="headerlink" title="PEP8 Code Layout - Imports (가져오기)"></a>PEP8 Code Layout - Imports (가져오기)</h1><br>

<br>

<p>PEP8 코드 레이아웃, <code>imports</code>편 입니다. </p>
<br>

<p><code>imports</code> 는 해당 파일에 다른 함수나 모듈을 불러올때 사용하는 명령어 입니다. </p>
<p><br>표준 라이브러리 기능이나, 다른 모듈에 있는 함수, 클래스 혹은 메써드들을 가져올때 사용합니다. </p>
<br>

<blockquote>
<p>PEP8에 따르면, Imports 는 보통 별도의 줄로 되어 있어야 합니다. <br></p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br></pre></td></tr></table></figure>



<br>

<p>하지만, 아래의 경우도 괜찮습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예</span></span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br></pre></td></tr></table></figure>

<br>

<a id="more"></a>

<blockquote>
<br>

<p>가져오기는 언제나 파일의 맨 위에 위치해야 하고, <br></p>
<p>모듈 주석이나 docstring 바로 뒤에 와야 합니다. <br></p>
<p>그리고 모듈 글로벌값들과 상수들 전에 와야 합니다. <br></p>
<br>
</blockquote>
<br>

<p><strong>가져오기는 아래 순서의 그룹으로 나뉩니다</strong><br></p>
<br>

<ol>
<li>스탠다드 라이브러리 imports</li>
<li>연관된 3자 모듈 / 라이브러리 imports</li>
<li>로컬 어플리케이션 / 라이브러리 imports<br></li>
</ol>
<p><br><br></p>
<p>이 그룹들 사이에는 빈줄을 넣어줘서 가져옵니다<br></p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 파이썬 스탠다드 라이브러리 </span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"></span><br><span class="line"><span class="comment"># 파이썬 3자 모듈/라이브러리 </span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api </span><br><span class="line"></span><br><span class="line"><span class="comment"># 로컬 어플리케이션 </span></span><br><span class="line"><span class="keyword">from</span> local_module <span class="keyword">import</span> local_class </span><br><span class="line"><span class="keyword">from</span> local_package <span class="keyword">import</span> local_function</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>추천되는 import 방식은, 절대값의 imports  입니다.<br></p>
<br>

<p>절대 경로로 가져오면, </p>
<p>a) 코드에서 가독성이 높아집니다, b) 만약 import system 이 잘못 설정이 되어 있더라도 적어도 에러 메시지가 더 좋게 표시됩니다. </p>
<br>

<br>

<p><strong>명시적인 상대경로로 import 를 하는것도 허용됩니다.</strong><br></p>
<p>특히, 절대 경로로 import 하는것이 불필요한 복잡한 패키지 레이아웃에서는 </p>
<p>명시적인 상대경로로 import 를 해도 됩니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 절대값 import </span></span><br><span class="line"><span class="keyword">import</span> mypkg.sibling </span><br><span class="line"><span class="keyword">from</span> mypkg <span class="keyword">import</span> sibling </span><br><span class="line"><span class="keyword">from</span> mypkg.sibling <span class="keyword">import</span> example </span><br><span class="line"></span><br><span class="line"><span class="comment"># 명시적인 상대 import </span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> sibling </span><br><span class="line"><span class="keyword">from</span> .sibling <span class="keyword">import</span> example</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>스탠다드 라이브러리 코드는 복잡한 패키지 레이아웃을 피해야 합니다. </p>
<p><br>언제나 절대 경로의 import 를 하는것이 좋고, 명시적이지 않는 상대 import 는 절대 사용되면 안됩니다. </p>
<br>

<p><br><strong>클래스를 포함하고 있는 모듈에서 클래스를 가져올땐, 보통 클래스명을 써줍니다</strong><br></p>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> myclass <span class="keyword">import</span> MyClass </span><br><span class="line"><span class="keyword">from</span> foo.bar.yourclass <span class="keyword">import</span> YourClass </span><br><span class="line"></span><br><span class="line"><span class="comment"># 만약 클래스명이 로컬 이름과 충돌한다면, 명시적으로 스펠링을 해줍니다. </span></span><br><span class="line"><span class="keyword">import</span> myclass </span><br><span class="line"><span class="keyword">import</span> foo.bar.yourclass </span><br><span class="line"></span><br><span class="line"><span class="comment"># 그리고, 아래를 사용합니다 </span></span><br><span class="line">myclass.MyClass </span><br><span class="line">foo.bar.yourclass.Yourclass</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>Whildcard 와일드카드 가져오기를 사용하는것은 피해야 합니다. </p>
<p><code>from &lt;module&gt; import *</code><br></p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Wildcard Imports 예시, * 은 모듈에 포함된 모든것을 의미 </span></span><br><span class="line"><span class="keyword">from</span> Flask <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>



<br>

<br>

<p><code>*</code>를 사용하므로써, 모듈에 포함된 모든 클래스와 함수 그리고 메써드들을 불러옵니다. </p>
<p>이럴경우, 어떤 이름들이 네임공간에 있는지 헷갈리게 되고, 자동화툴이나 에디터가 헷갈릴수 있습니다. <br></p>
<br>



<p>와일드카드 가져오기는 보통 내부 인터페이스를 퍼블릭 API  로 재발행 할때 사용합니다. <br></p>
<br>

<p>이 때를 제외하고는, 기본적으로 사용을 피해야 합니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>클래스를 포함하고 있는 클래스 모듈을 가져올때 쓰는 스펠링이 이해가 잘 가지 않습니다. <br></p>
<p>이 부분은 조금 더 시간을 들여서 더 많은 코드를 접해본다음 이해가 갈것 같습니다. <br></p>
<br>

<p>이해를 마친뒤에 업데이트 할 예정입니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python,PEP8,Imports</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Source File Encoding</title>
    <url>/2020/04/05/PEP8-Code-Layout-Source-File-Encoding/</url>
    <content><![CDATA[<h1 id="Source-File-Encoding-소스파일-인코딩"><a href="#Source-File-Encoding-소스파일-인코딩" class="headerlink" title="Source File Encoding (소스파일 인코딩)"></a>Source File Encoding (소스파일 인코딩)</h1><br>

<br>

<p>이번 토픽은 소스파일 인코딩 입니다. </p>
<br>

<br>

<p>파이썬 배포에 사용되는 코드는 항상 UTF-8 을 사용해야 합니다. </p>
<p>파이썬2 에서는 ASCII </p>
<br>

<p><a href="https://namu.wiki/w/UTF-8" target="_blank" rel="noopener">https://namu.wiki/w/UTF-8</a></p>
<br>

<blockquote>
<p>UTF-8 은 가장 많이 사용되는 가변길이 유니코드 인코딩이다.</p>
<p>GO 언어를 만든 켄 톰슨과 롭 파이크가 만들었다 </p>
</blockquote>
<br>

<br>

<p>[<a href="https://namu.wiki/w/%EC%95%84%EC%8A%A4%ED%82%A4%20%EC%BD%94%EB%93%9C?from=ASCII]" target="_blank" rel="noopener">https://namu.wiki/w/%EC%95%84%EC%8A%A4%ED%82%A4%20%EC%BD%94%EB%93%9C?from=ASCII]</a>(<a href="https://namu.wiki/w/아스키" target="_blank" rel="noopener">https://namu.wiki/w/아스키</a> 코드?from=ASCII)</p>
<br>

<blockquote>
<p>ASCII 코드는 미국 ANSI 에서 표준화한 정보 교환용 7비트 부호체계 </p>
<p>2 바이트 이상의 코드를 표현할수 없기 때문에. </p>
<p>국제 표준에서는 유니코드로 넘어감.</p>
</blockquote>
<br>

<br>

<p>PEP8에 따르면, 파이썬2에서 ASCII 를 사용하는 파일들이나 혹은 파이썬3에서 UTF-8을 사용하는 파일들 모두 </p>
<p>인코딩 선언이 되어 있지 않아야 합니다. </p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>*<em>참고로 *</em></p>
<p>encoding 선언이 되어 있지 않으면, </p>
<p>기본 인코딩은 UTF-8 입니다. </p>
<p>from Python3 공식문서 </p>
</blockquote>
<br>

<br>

<p>파이썬 표준 라이브러리에서는, 기본 인코딩이 아닌 문자는 아래의 경우만 사용합니다<br></p>
<br>

<p>a) 테스트 목적<br></p>
<p>b) comment 나 docstring 에서 게시자의 이름이 non-ASCII  문자를 포함하고 있을때 </p>
<br>

<br>

<p><strong>PEP에서는 특별히 Non-ASCII 문자가 포함되어 있는 경우가 아니면</strong><br></p>
<p>아래의 escapes 를 사용하여 문자열에 있는 non-ASCII 데이터를 표현하는 방식을 선호합니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\x 	<span class="comment"># Character with hex value e.g. \xhh</span></span><br><span class="line">\u 	<span class="comment"># Unicode Character with 16-bit hex value xxx e.g. u'\u004D'</span></span><br><span class="line">\U	<span class="comment"># Unicode Character with 32-bit hex value xxxxxxxx e.g. u'\U0000004D'</span></span><br><span class="line">\N	<span class="comment"># Character named name in the Unicode database e.g. \N&#123;name&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>PEP3131 에 파이썬 3.0 과 그 이후 버전에 대한 원칙이 나와 있습니다.<br></p>
<br>

<br>

<p>PEP8 에서 정리하는 바는 다음과 같습니다 <br></p>
<br>

<p>1) 파이썬의 표준 라이브러리 안에 있는 모든 식별자는 ASCII-Only 식별자여야 하고. 가능하면 영문으로 씁니다.<br></p>
<p>2) 추가로 문자열과 주석들도 ASCII  형식으로 되어 있어야만 합니다. 이부분에 대한 예외는 아래와 같습니다. <br></p>
<p>  a) ASCII 방식이 아닌것을 테스트 하고자 할때. <br></p>
<p>  b) 게시자의 이름이 라틴 알파벳으로 되어 있지 않은 경우, Non-ASCII로 표현 되어도 됩니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>저는 아직도 ASCII 와 UTF-8 인코딩 방식에 대해서 깊게 알지 못합니다. </p>
<p>두가지의 인코딩 방식에 대해서 정확하게 이해해야지만, PEP8 에서 이야기 하는 부분을 정확하게 이해할것 같습니다. </p>
<br>



]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Source File Encoding</tag>
        <tag>UTF-8</tag>
        <tag>ASCII</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Blank Lines</title>
    <url>/2020/04/05/PEP8-Code-Layout-Blank-Lines/</url>
    <content><![CDATA[<h1 id="PEP8-Code-Layout-Blank-Lines-빈줄"><a href="#PEP8-Code-Layout-Blank-Lines-빈줄" class="headerlink" title="PEP8 Code Layout - Blank Lines (빈줄)"></a>PEP8 Code Layout - Blank Lines (빈줄)</h1><br>

<br>

<p>이번 토픽은, PEP8 에서 권장하는 코드내에 빈줄 공간들에 대해서 다룹니다. </p>
<br>

<br>

<blockquote>
<p> <strong>가장 상위의 함수와 클래스 정의는 2줄의 빈줄로 공간을 둡니다</strong> <br></p>
</blockquote>
<p><br><br></p>
<p>이것이 의미하는 바는 아래의 예제를 보면 알수 있습니다. </p>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 가장 상위의 함수와 클래스들 사이의 2줄 공간 </span></span><br><span class="line"><span class="comment"># 가장 상위의 클래스 두개끼리는 2줄의 빈공간이 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJenge</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJenge2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 가장 상위의 함수 두개끼리는 2줄의 빈공간을 둡니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Djangojeng</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Djangojeng</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>클래스 내의 메써드 정의는 1줄로 공간을 둡니다.<br></p>
</blockquote>
<a id="more"></a>

<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 클래스 내의 메써드 정의는 1줄 공간을 둡니다. </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJenge1</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_python</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_python2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJeng2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_django</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_django2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>위 예시를 보면, 가장 상위에 위치하는 클래스들 끼리는 2줄 빈공간이 존재하고. <br></p>
<p>클래스 안에 있는 메서드 들 끼리는 1줄 빈공간들이 존재합니다.</p>
<p><br><br></p>
<blockquote>
<p>함수내에 빈줄은 드물게 사용해야 합니다.</p>
<p>함수내에 빈줄은 논리적 부분을 표시하기 위해서 사용 가능합니다. </p>
</blockquote>
<p><br><br></p>
<p>예를들면, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 함수내에 논리적인 부분을 표시하기 위해서 빈줄을 함수내에서 사용합니다. </span></span><br><span class="line"><span class="comment"># 아주 드물게 사용해야 합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(j)</span>:</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, j):</span><br><span class="line">        c = c + <span class="number">1</span> </span><br><span class="line">    </span><br><span class="line">    print(c)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># for 문과 print 문 사이에 하나의 빈줄이 존재합니다.</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>



<p>PEP8 안에 빈줄 (Blank Lines)에 관한 내용은 유용한 내용인데도 불구하고 <br></p>
<p>예시가 빈약해서 이해하기 힘들었습니다. <br></p>
<p><br><br></p>
<p>최대한 맞는 예시를 들으려 했지만 부족할수 있습니다. </p>
<br>

<p>하지만, 걱정 안하셔도 됩니다. </p>
<br>

<blockquote>
<p>Pycharm을 사용하면 자동으로 PEP8에 맞는 스타일을 가이드 해줍니다 </p>
<p>코드를 작성할때 이따금씩 노란색 밑줄이 쳐질때가 있는데, PEP8에 어긋날때 표시가 됩니다. </p>
<p>잘 유의해서 확인하고, PEP8 가이드라인에 맞게 코드를 작성하면 됩니다! </p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Blank Lines</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Should a Line Break Before or After a Binary Operator?</title>
    <url>/2020/04/04/PEP8-Code-Layout-Should-a-Line-Break-Before-or-After-a-Binary-Operator/</url>
    <content><![CDATA[<h1 id="이항연산자-전후-줄바꿈"><a href="#이항연산자-전후-줄바꿈" class="headerlink" title="이항연산자 전후 줄바꿈"></a>이항연산자 전후 줄바꿈</h1><br>

<br>

<p>이항 연산자 전에 줄바꿈을 해야할까요 아니면 후에 줄바꿈을 해줘야 할까요? </p>
<br>

<blockquote>
<p>줄바꿈은 연산기호 전에 되어야 하는가? </p>
<p>아니면</p>
<p>줄바꿈은 연산기호 후에 되어야 하는가? </p>
</blockquote>
<br>

<br>

<p><strong>몇십년동안, 줄바꿈은 연산기호 후에 해주는것이 권장 되어 왔습니다.</strong></p>
<br>

<p>하지만, 줄바꿈을 연산기호 후에 해주면, 두가지 이유로 가독성을 떨어트립니다. </p>
<p><br><br> </p>
<p>1) 연산기호들이 스크린에 세로줄로 흐트러지고, 이전줄에 있는 피연산자들(opernand) 과 떨어지게 됩니다. </p>
<p>2) 시각적으로 어떤것들이 더해지고, 빼줘야 하는것인지 파악하는데에 시간을 들여야 합니다. </p>
<br>

<br>

<p><strong>연산기호들이 피연산자들과 멀리 떨어져 있는 경우의 예를 들어봅니다</strong></p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 연산기호들이 이전줄의 피연산자들과 떨어져 있는 경우의 코드 </span></span><br><span class="line"></span><br><span class="line">income = (gross_wages +</span><br><span class="line">         taxable_interest +</span><br><span class="line">         (dividends - qualified_dividends) -</span><br><span class="line">         ira_deduction - </span><br><span class="line">         student_loan_interest)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 줄바꿈이 연산기호인 + 혹은 - 이후에 이루어진것을 확인 할수 있습니다. </span></span><br><span class="line"><span class="comment"># 코드를 읽어가면서 어떤것을 더해주고 빼주어야 하는지 눈으로 더 확인 해봐야 하는 상황이 옵니다.</span></span><br></pre></td></tr></table></figure>



<br>

<p>위 상황에서 가독성이 떨어지기 때문에, 수학자들과 퍼블리셔들은 반대의 관례를 따르기 시작합니다.</p>
<br>



<br>

<blockquote>
<p>문단안에 있는 공식들은 </p>
<p>언제나 연산기호 뒤에 줄바꿈을 하지만 </p>
<p>잘 진열된 공식들은 언제나 연산기호 전에 줄바꿈을 합니다 </p>
<p>Donald Knuth in “Computers and Typesetting series”</p>
</blockquote>
<br>

<br>

<p>수학적 전통을 따르면, 결과적으로 더 읽기 편한 코드가 나옵니다. 아래 예시 코드를 참조합니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 코드에서 줄바꿈을 연산기호 전에 하면</span></span><br><span class="line"><span class="comment"># 연산기호들과 피연산자들을 매칭 시키기 쉬운 코드가 됩니다. </span></span><br><span class="line"><span class="comment"># PEP8 에서 나온 좋은 예시는 아래와 같습니다. </span></span><br><span class="line"></span><br><span class="line">income = (gross_wages</span><br><span class="line">         + taxable_interest</span><br><span class="line">         + (dividends - qualified_dividens)</span><br><span class="line">         - ira_deduction</span><br><span class="line">         - student_loan_interest)</span><br></pre></td></tr></table></figure>



<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>파이썬 코드에서는, 줄바꿈을 연산기호 전이나 연산기호 후에 하는 두가지 방법이 모두 허용됩니다. <br></p>
<p>어떤 방법이던, 해당 지역의 관례와 맞는다면, 두가지 방식은 다 괜찮습니다.<br></p>
<br>

<p><strong>저는 개인적으로, 연산기호 전에 줄바꿈을 해주는것이 가독성에 좋다고 생각합니다.</strong></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Binary Operator</tag>
        <tag>이항연산자</tag>
        <tag>줄바꿈</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Maximum Line Length</title>
    <url>/2020/04/04/PEP8-Code-Layout-Maximum-Line-Length/</url>
    <content><![CDATA[<h1 id="Maximum-Line-Length"><a href="#Maximum-Line-Length" class="headerlink" title="Maximum Line Length"></a>Maximum Line Length</h1><br>

<blockquote>
<p><code>Maximum Line Length</code> 는 한줄의 최대 길이를 의미 합니다. </p>
</blockquote>
<br>

<br>

<h2 id="모든-줄은-79자로-제한-합니다"><a href="#모든-줄은-79자로-제한-합니다" class="headerlink" title="모든 줄은 79자로 제한 합니다"></a>모든 줄은 79자로 제한 합니다</h2><br>

<p>네. PEP8 에서는, 파이썬 코드를 작성할때. 한줄의 최대 길이를 79자로 제한합니다. </p>
<br>

<br>

<p><strong>다만! <code>docstring</code>혹은 <code>comments</code> 즉 주석들은, 72자로 제한합니다.</strong> </p>
<br>

<br>

<blockquote>
<p>모든 팀원들이 동의한다는 전제하에, </p>
<p>특별히 코드의 긴 줄이 유지 되어야 하는 상황이거나 하면 </p>
<p>최대 길이는 99자까지 늘릴수 있습니다. </p>
</blockquote>
<br>

<h2 id="한줄이-너무-긴-코드-줄-바꾸기"><a href="#한줄이-너무-긴-코드-줄-바꾸기" class="headerlink" title="한줄이 너무 긴 코드 줄 바꾸기"></a>한줄이 너무 긴 코드 줄 바꾸기</h2><br>

<blockquote>
<p>PEP8 에서 선호하는 긴줄 처리는, </p>
<p>계속되는 줄의 경계를 소괄호, 중괄호, 대괄호 안에 넣고 사용하는것입니다. </p>
<p>이 방법이 \ 를 사용하는 방법보다 선호됩니다. </p>
</blockquote>
<br>

<p>제가 생각하는 예시들은 아래와 같습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 한줄이 너무 긴 코드 </span></span><br><span class="line"><span class="keyword">if</span>(this_is_one_thing <span class="keyword">or</span> that_is_another_thing <span class="keyword">or</span> everything_is_good_thing <span class="keyword">or</span> you_are_the best):</span><br><span class="line">    </span><br><span class="line"><span class="comment"># \ 백슬레쉬를 사용하지 않고, 괄호안에서 줄을 바꿔서, 한줄을 다음줄로 나눕니다. </span></span><br><span class="line"><span class="comment"># 물론 들여쓰기는 잘해주어야 하겠죠? </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(this_is_one_thing <span class="keyword">or</span></span><br><span class="line">   that-is_another_thing <span class="keyword">or</span></span><br><span class="line">   everything_is_good_thing <span class="keyword">or</span></span><br><span class="line">   you_are_the_best):</span><br></pre></td></tr></table></figure>

<br>

<p>위 방법이 선호되는것 같으나, 여전히 <code>\</code>백슬레쉬의 사용하는 방법도 괜찮습니다! </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># \ 를 사용하여 줄을 나눈 경우, \를 사용하지 않았으면, 한줄이 너무 길어 졌을것 같습니다. </span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/some/file/you/want/to/read'</span>) <span class="keyword">as</span> file_1, \</span><br><span class="line">     open(<span class="string">'/path/to/some/file/being/written'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file_2:)</span><br><span class="line">     file_2.write(file_1.read())</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>1) PEP8 에서는 한줄의 최대길이를 79자로 제한합니다. </p>
<p>2) docstring 이나 comments 같은 주석들은 72자로 제한합니다.</p>
<p>3) 한줄이 너무 길어질것 같으면, <code>\</code>나 괄호안의 문장을 다음줄로 이어갑니다 (들여쓰기는 적절히 해야하는게 필수) </p>
<br>

<p>한줄 한줄이 너무 길어서 스크린이 꽉꽉 차있으면, 일하러 가서 매일 아래와 같은 스크린을 보게 될것입니다. <br></p>
<img src="/2020/04/04/PEP8-Code-Layout-Maximum-Line-Length/image1.jpeg" class="">



<p><br><br></p>
<p>그리고, 누가 그러시던데, 한줄의 길이가 79자가 된 이유중에 하나가. <br></p>
<p>옛날 컴퓨터의 모니터 크기 때문이라고 합니다. 지금 나오는 모니터 크기와는 다르게.<br></p>
<p><br> 옛날 모니터들은 가로폭이 굉장히 좁아서. 화면에 꽉차는 양이 79자 정도 였다 합니다.  <br></p>
<p>아래 사진을 보면,,, 충분히 그럴수도 있었겟네요? ㅎㅎ <br></p>
<br>



<img src="/2020/04/04/PEP8-Code-Layout-Maximum-Line-Length/image2.jpg" class="">



]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python,PEP8,Maximum Line Length,최대줄길이</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Tabs or Spaces?</title>
    <url>/2020/04/04/PEP8-Code-Layout-Tabs-or-Spaces/</url>
    <content><![CDATA[<h1 id="PEP8-Code-Layout-Tab-혹은-Spaces"><a href="#PEP8-Code-Layout-Tab-혹은-Spaces" class="headerlink" title="PEP8 Code Layout - Tab 혹은 Spaces?"></a>PEP8 Code Layout - Tab 혹은 Spaces?</h1><br>

<blockquote>
<p>파이썬에서는 Tab 대신 Spaces(빈공간)을 사용하는것을 선호합니다. </p>
</blockquote>
<br>



<p>탭을 사용하는 경우는, 이미 코드가 <code>tab</code>으로 들여쓰기가 되어 있는 경우, </p>
<p><br>코드와 일관되게 <code>tab</code>을 사용합니다. </p>
<br>

<blockquote>
<p>Python3 에는 <code>tab</code>과 <code>spaces</code> 혼용 사용을 허락하지 않습니다. </p>
</blockquote>
<br>

<p><code>tab</code>과  <code>spaces</code>의 혼용으로 들여쓰기가 되어진 Python2 버전의 코드는 특별히 spaces를 사용해서 전환되어야 합니다. </p>
<br>

<p><br>Python2 커맨드 라인 인터프리터로 <code>-t</code>옵션을 사용하면, </p>
<p><code>tabs</code>와 <code>spaces</code>의 혼용된 코드에 대해서 경고를 줍니다. </p>
<br>

<p><code>--t</code>옵션을 사용하면, 이 경고들이 에러가 됩니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>파이썬</tag>
        <tag>PEP8</tag>
        <tag>Hanging indent</tag>
        <tag>들여쓰기</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Indentation</title>
    <url>/2020/04/04/PEP8-Code-Layout-Indentation/</url>
    <content><![CDATA[<h1 id="PEP8-Code-Layout-Indentation-들여쓰기"><a href="#PEP8-Code-Layout-Indentation-들여쓰기" class="headerlink" title="PEP8 Code Layout - Indentation (들여쓰기)"></a>PEP8 Code Layout - Indentation (들여쓰기)</h1><br>

<h2 id="Indentation"><a href="#Indentation" class="headerlink" title="Indentation"></a>Indentation</h2><br>

<p>파이썬에서, 들여쓰기는 문법으로 의무화 되어 있습니다. <br></p>
<p>PEP8에서는 들여쓰기에 대한 코딩 스타일을 다루고 있습니다. </p>
<br>

<br>

<blockquote>
<p>들여쓰기는 4칸을 사용합니다.</p>
</blockquote>
<br>

<p>Continuation lines, 즉 이어지는 줄들은 세로로 정렬이 되어야 하는데. <br></p>
<p>1) 파이썬에서 암시적으로 이어지는 줄들을 소괄호, 중괄호, 대괄호 안에 묶거나, </p>
<p>2) hanging indent 를 사용하여 정렬합니다. </p>
<br>

<blockquote>
<p>hanging indent 를 직역하면, 매달려 있는 들여쓰기로. </p>
<p>문단의 첫번째 줄을 제외한 모든 라인이 들여쓰기가 되어 있는 스타일 입니다. </p>
</blockquote>
<br>

<p><strong>hanging indent 의 예를 들어봅니다</strong></p>
<br>

<a id="more"></a>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">djangojenge = djangojenge(django, python,</span><br><span class="line">	pep8, programming)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 첫번째줄은 들여쓰기가 되어 있지 않은데 </span></span><br><span class="line"><span class="comment"># 두번째줄은 들여쓰기가 되어 있습니다. 이것을 매달려있는 들여쓰기. 즉 hanging indent 라고 합니다.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>hanging indent</code>를 사용할때는, 아래 두가지 사항을 골려하면서 사용합니다. </p>
<br>

<ol>
<li>첫번째 줄에는 arguments (전달인자) 가 없어야 합니다. </li>
<li>이어지는 줄이라는것을 표시하기 위해 추가적인 들여쓰기가 사용되어야합니다</li>
</ol>
<br>

<br>

<h2 id="좋은예"><a href="#좋은예" class="headerlink" title="좋은예"></a>좋은예</h2><p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예: </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 열리는 구분자와 정렬</span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(var_one, var_two, </span><br><span class="line">                         var_three, var_four)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4칸을 추가로 주어 전달인자들을 다른 로직과 구분 </span></span><br><span class="line"><span class="comment"># 추가 들여쓰기로 arguments 부분과, print 부분이 구분됩니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		var_one, var_two, var_three,</span></span></span><br><span class="line"><span class="function"><span class="params">		var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># Hanging indents 한칸을 더 추가 합니다 </span></span><br><span class="line"><span class="comment"># 첫번째 예랑 같은데, hanging indent 로 한칸씩 추가 되어. 좀더 깔끔해 보입니다. </span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(</span><br><span class="line">	var_one, var_two,</span><br><span class="line">	var_three, var_four)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="나쁜예"><a href="#나쁜예" class="headerlink" title="나쁜예"></a>나쁜예</h2><br>

<br>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 나쁜예: </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 첫번째 전달인자들이 세로로 정렬이 되지 않은 경우</span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">      var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 추가적인 들여쓰기가 필요한 경우</span></span><br><span class="line"><span class="comment"># 추가적인 들여쓰기가 없을경우, 전달인자들과 print() 와 구분이 안갑니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	var_one, var_two, var_three,</span></span></span><br><span class="line"><span class="function"><span class="params">	var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br></pre></td></tr></table></figure>



<br>

<br>

<h2 id="선택-사항"><a href="#선택-사항" class="headerlink" title="선택 사항"></a>선택 사항</h2><br>

<br>

<p>이어지는 줄에서의 4-칸 스페이스 룰은 선택 사항입니다. 4칸 보다 더 쓸수도, 덜 쓸수도 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hanging indents 는 4칸 외에 공간으로 들여쓰기가 가능합니다 </span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(</span><br><span class="line">  var_one, var_two, </span><br><span class="line">  var_three, var_four)</span><br></pre></td></tr></table></figure>

<br>

<h2 id="조건문이-너무-길어질때"><a href="#조건문이-너무-길어질때" class="headerlink" title="조건문이 너무 길어질때"></a>조건문이 너무 길어질때</h2><br>

<p><strong><code>if</code>구문의 조건 부분이 너무 길어져서 다수의 줄이 된다면,</strong> </p>
<br>

<blockquote>
<p><code>if</code> 다음에 한칸을 띄고 괄호를 열어줍니다.</p>
<p>if ():</p>
<p>이렇게 쓰면, 자연스럽게 다음줄부터 4칸 들여쓰기가 됩니다</p>
</blockquote>
<p><br><br></p>
<p>조건부분이 너무 길고, 밑에 실행 가능한 함수등과 구분짓고 싶을때 아래와 같이 써줍니다. </p>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 추가 들여쓰기가 없음</span></span><br><span class="line"><span class="comment"># do_something() 부분이 자연스럽게 들여쓰기가 됩니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span> </span><br><span class="line">   that_is_another_thing):</span><br><span class="line">   do_something()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 주석을 달아줘서 조건 부분과 함수 부분을 구분합니다 </span></span><br><span class="line"><span class="comment"># 주석과 코드의 색깔을 표시해주는 에디터가 많기 때문에 구분이 가능합니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span> </span><br><span class="line">   that_is_another_thing):</span><br><span class="line">   <span class="comment"># Since both conditions are true, we can frobncate.</span></span><br><span class="line">   do_something()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 조건문이 이어지는 줄에 추가로 들여쓰기를 넣어줍니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing</span><br><span class="line">   		<span class="keyword">and</span> that_is_another_thing): </span><br><span class="line">    do_something()</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="여러-줄에서-닫히는-소괄호-중괄호-대괄호"><a href="#여러-줄에서-닫히는-소괄호-중괄호-대괄호" class="headerlink" title="여러 줄에서 닫히는 소괄호/중괄호/대괄호"></a>여러 줄에서 닫히는 소괄호/중괄호/대괄호</h2><br>

<p>맨마지막 줄 다음줄에 닫는 괄호를 넣어줍니다. 괄호를 따로 들여쓰기를 해주어야 되겠죠? ㅎㅎ<br></p>
<br>

<p><strong>코드를 보면서 이해합니다.</strong> </p>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 마지막 줄의 ] 는 추가로 들여쓰기가 되었습니다.</span></span><br><span class="line"></span><br><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">	]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 마지막 줄의 ) 는 추가로 들여쓰기가 되었습니다. </span></span><br><span class="line"></span><br><span class="line">result = some_function_that_takes_arguments(</span><br><span class="line">	<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line">	<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">	)</span><br></pre></td></tr></table></figure>

<br>

<p><strong>혹은, 닫히는 소괄호/중괄호/대괄호 들은 첫번째 줄의 시작점에 두어도 괜찮습니다. (밑에 코드 참조)</strong></p>
<br>

<br>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 마지막 줄의 ] 는 추가로 들여쓰기가 되었습니다.</span></span><br><span class="line"></span><br><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 마지막 줄의 ) 는 추가로 들여쓰기가 되었습니다. </span></span><br><span class="line"></span><br><span class="line">result = some_function_that_takes_arguments(</span><br><span class="line">	<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line">	<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>PEP에서 들여쓰기 부분이 가장 초입인데. 뭔가 가장 헷갈렸습니다. <br></p>
<p>표현들이 좀 이상해서 더 애먹은것 같습니다.  세번째 쯤 보니까 이제 좀 이해가 가는듯 합니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>code layout</tag>
        <tag>indentation</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 - A Foolish Consistency is the Hobgoblin of Little Minds</title>
    <url>/2020/04/04/PEP8-A-Foolish-Consistency-is-the-Hobgoblin-of-Little-Minds/</url>
    <content><![CDATA[<h1 id="PEP8-A-foolish-consistency-is-the-Hobgoblin-of-Little-Minds"><a href="#PEP8-A-foolish-consistency-is-the-Hobgoblin-of-Little-Minds" class="headerlink" title="PEP8 - A foolish consistency is the Hobgoblin of Little Minds"></a>PEP8 - A foolish consistency is the Hobgoblin of Little Minds</h1><br>

<p>PEP8 스타일 가이드라인의 두번째 토픽입니다. </p>
<p><br> 타이틀을 직역해보면, <br></p>
<blockquote>
<p>어리석은 일관성은 </p>
<p>소심한 홉고블린이다? </p>
</blockquote>
<br>

<p>서양에서는, 홉고블린이 사악하고, 아둔한 그런데 또 피지컬은 또 없는 그런 요괴로 취급됩니다. </p>
<br>

<p><strong>다시 말해서, 잘못된 코딩 스타일 일관성은 고블린 취급받기 쉽단 얘기겠죠?</strong> </p>
<p><br><br></p>
<blockquote>
<p>코드는 쓰이는것보다 읽히는 일이 많다.</p>
<p>by 파이썬 창시자 귀도 반 로썸</p>
</blockquote>
<br>

<p>코드는 쓰이는것보다 읽힐때가 훨씬 많습니다. <br></p>
<p>PEP8에 제시되는 가이드라인은 코드의 가독성 향상과,  파이썬 코드 전반에 걸쳐서 일관성을 만들어 가는것입니다.</p>
<a id="more"></a>

<br>

<br>

<h2 id="Consistency-일관성"><a href="#Consistency-일관성" class="headerlink" title="Consistency (일관성)"></a>Consistency (일관성)</h2><br>

<p>PEP8 스타일 가이드는 일관성에 대한 것입니다. <br></p>
<p>PEP8에 나와있는 스타일 가이드와 일관되게 따르는것은 중요합니다. </p>
<br>

<blockquote>
<p>하지만! </p>
<p>프로젝트내에 스타일 가이드와 일관되게 코드를 짜는것이 더욱 중요합니다.  </p>
</blockquote>
<br>

<p>각각의 프로젝트 마다, 코딩 스타일이 다르고. PEP8 은 프로젝트 마다의 코딩 스타일을 존중합니다. <br></p>
<p>PEP8은 가이드라인을 제시할뿐이지. 그 가이드라인을 의무화 하지는 않습니다. </p>
<br>

<p>따라서, 프로젝트내에 일관된 코드가 있다면, 더 좋은 코딩 스타일이 존재한다면,<br></p>
<p><br>그 프로젝트 내의 코딩 스타일과 일관되게 코드를 작성하는것이 좋습니다. </p>
<br>



<h2 id="일관되지-않을때를-알아야-합니다"><a href="#일관되지-않을때를-알아야-합니다" class="headerlink" title="일관되지 않을때를 알아야 합니다"></a>일관되지 않을때를 알아야 합니다</h2><br>

<p>위에서 언급하였듯이, PEP8 의 스타일 가이드가 프로젝트에 잘 적용 될수 없을때는.<br> 본인의 판단하에, 다른 예시들을 보고 어떤게 제일 좋게 보이는 스타일을 선택하면 됩니다.</p>
<br>

<blockquote>
<p>PEP를 따르기 위해서, 뒤로 퇴보하지는 않아야 합니다. </p>
</blockquote>
<br>

<br>

<p><strong>가이드라인을 무시할수 있는 사유들</strong></p>
<br>

<br>

<p>1) PEP를 적용했을때에 가독성이 더 떨어지는 경우 </p>
<p>2) 이미 PEP가 적용되지 않은 코드가 주변에 너무 많이 존재할때 (예, 너무 과거에 쓰여진 코드들)</p>
<p>3) 해당 코드가 이미 PEP8이 소개되기 이전인데, 해당 코드를 바꿀 이유가 별로 없을때 </p>
<p>4) 해당 코드가 파이썬의 이전버전과 호환하기 위해 필요한데, 가이드라인에 제시되어 있는 기능을 지원하지 않을때 </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>정리하자면, PEP8 은 가이드라인일 뿐이고. <br> 본인이나 팀의 판단에 따라서. 프로젝트에 적용할지 안할지를 정하면 될것 같습니다. </p>
<br>

<p>개인적으로 저는 따르는게 좋다고 생각합니다. <br></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>파이썬</tag>
        <tag>PEP8</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 - Introduction</title>
    <url>/2020/04/04/PEP8-Introduction/</url>
    <content><![CDATA[<h1 id="PEP8-Introduction"><a href="#PEP8-Introduction" class="headerlink" title="PEP8 - Introduction"></a>PEP8 - Introduction</h1><br>

<br>



<h2 id="PEP8-소개"><a href="#PEP8-소개" class="headerlink" title="PEP8 소개"></a>PEP8 소개</h2><br>

<br>

<p><strong>파이썬 코딩 스타일 가이드라인 PEP 에 대해서 포스팅 하고자 합니다. <br></strong></p>
<br>

<blockquote>
<p>PEP는</p>
<p>Python Enhancement Proposal 의 약자로 </p>
<p>파이썬 코딩 스타일 가이드라인을 담고 있습니다. </p>
</blockquote>
<p><br><br></p>
<p><a href="https://www.python.org/dev/peps/pep-0008/#introduction" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0008/#introduction</a></p>
<a id="more"></a> 



<p>위 웹사이트에 자세한 가이드라인이 나와 있으며, 파이썬 코딩에서 관례를 다루고 있습니다. <br></p>
<br>

<p>해당 문서는, 파이썬의 창시자인 귀도 반 로섬의 오리지널 파이썬 스타일 가이드 에세이를 <br>기본적으로 받아들이고 있고<br> 베리의 스타일 가이드의 내용을 추가해서 제작되었습니다.</p>
<br>

<p>파이썬 코딩 스타일 가이드는 시간이 지나면서 점차 진화합니다. </p>
<p><br><strong>언어가 변화함에 따라서 추가적인 관례와<br> 너무 노후한 스타일들이 확인 되고. 그에 맞춰서 가이드라인도 진화 하겟죠?</strong> </p>
<p><br><br></p>
<p>각각의 프로젝트들은 그들만의 고유한 코딩 스타일 가이드라인이 존재합니다. </p>
<p><br><br></p>
<blockquote>
<p>PEP8의 가이드라인과, 프로젝트의 코딩 스타일 가이드라인이 충돌할 경우, </p>
<p>프로젝트에 특화된 코딩 스타일을 우선 따르는것을 원칙으로 합니다. </p>
</blockquote>
<p>​    <br></p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>PEP8 이 굉장히 중요하다 합니다. 모두가 기본이 되는 파이썬 코딩 스타일을 가지고 있으면, <br></p>
<p>남이 쓴 코드도 이해하기 더 쉬워질겁니다. <br></p>
<p>PEP8 관련 포스팅을 이제부터 시작합니다~ </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>파이썬</tag>
        <tag>PEP8</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 - About 페이지 만들기</title>
    <url>/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="About-페이지-만들기"><a href="#About-페이지-만들기" class="headerlink" title="About 페이지 만들기"></a>About 페이지 만들기</h2><br>

<p>개인 블로그라면, <br> 적어도 간단하게 본인이나 블로그를 소개하는 About 페이지 하나는 있어야 할것 같아서. <br></p>
<br>

<p><code>About</code> 페이지를 하나 만들어서 적용해 보려 합니다. </p>
<br>

<p>페이지에 생성후, 디테일을 한번 수정해 보겠습니다. </p>
<br>

<h2 id="About-페이지-생성하기"><a href="#About-페이지-생성하기" class="headerlink" title="About 페이지 생성하기"></a>About 페이지 생성하기</h2><br>

<p><code>blog</code> 폴더에서, 아래 명령어를 실행하여, <code>about</code>페이지를 생성합니다. </p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>



<br>

<a id="more"></a>

<br>

<p>생성후에는, <code>blog/source/about/</code>폴더에 <code>index.md</code>가 생성 되어 있습니다. </p>
<p><br><br></p>
<h2 id="blog-source-about-index-md파일-수정"><a href="#blog-source-about-index-md파일-수정" class="headerlink" title="blog/source/about/index.md파일 수정"></a><code>blog/source/about/index.md</code>파일 수정</h2><br>

<p><code>categories</code>나 <code>tags</code> 페이지를 만들었을때와 비슷하게 진행 해봅니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2020-03-30 20:33:44</span><br><span class="line"><span class="built_in">type</span>: about</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<br>

<br>



<h2 id="Themes-config-yml-파일에서-메뉴-활성화-하기"><a href="#Themes-config-yml-파일에서-메뉴-활성화-하기" class="headerlink" title="Themes _config.yml 파일에서 메뉴 활성화 하기"></a>Themes _config.yml 파일에서 메뉴 활성화 하기</h2><br>

<br>

<p><code>blog/themes/hexo-theme-next/_config.yml</code>파일을 열어서, <br></p>
<p><code>menu</code>부분에, <code>about</code>부분을 활성화 시켜줍니다. <br></p>
<p>uncomment 처리만 해주면 되겟죠? ㅎㅎ  </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>그런데.. 여기까지 하고 <code>hexo runserver</code> 로 로컬에 들어가서, about 페이지를 확인해 보니, </p>
<br>

<p><strong>사이드 메뉴에는 about 메뉴가 뜨는데, 클릭하면, 빈 페이지가 표시됩니다.</strong></p>
<br>



<img src="/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/image1.png" class="">

<br>

<blockquote>
<p>어디에 내용을 채워줘야 빈페이지가 표시 되지 않을까요? </p>
</blockquote>
<p><br><br></p>
<h2 id="index-md-파일에-내용-추가하기"><a href="#index-md-파일에-내용-추가하기" class="headerlink" title="index.md 파일에 내용 추가하기"></a>index.md 파일에 내용 추가하기</h2><br>

<p><code>blog/source/about/index.md</code> 파일에, about 페이지에 들어갈 내용을 추가합니다.</p>
<br>



<img src="/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/image2.png" class="">

<br>

<br>



<blockquote>
<p> <code>index.md</code> 파일에 내용을 추가하면, </p>
<p>about 페이지에 내용이 추가 되어 표시됩니다! </p>
</blockquote>
<p><br><br></p>
<img src="/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/image3.png" class="">

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p><code>about</code>페이지를 생성 하였고, 내용도 추가 하였습니다. <br></p>
<p>추가된 내용은 잘 표시가 되는것 같으니, 내용을 더 채워 줘야 겠습니다~ </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>about,custom_page</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 - 블로그내에 검색 기능 추가</title>
    <url>/2020/03/26/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%82%B4%EC%97%90-%EA%B2%80%EC%83%89-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80/</url>
    <content><![CDATA[<h1 id="블로그내-검색기능-추가"><a href="#블로그내-검색기능-추가" class="headerlink" title="블로그내 검색기능 추가"></a>블로그내 검색기능 추가</h1><br>

<p>블로그내에 검색기능을 추가하려 합니다. <br></p>
<p>카테고리나, 태그로 검색해도 괜찮지만, 포스트들을 검색할수 있는 기능이 있으면 좋을것 같습니다 </p>
<br>

<br>

<h2 id="hexo-generator-searchdb-설치하기"><a href="#hexo-generator-searchdb-설치하기" class="headerlink" title="hexo-generator-searchdb 설치하기"></a>hexo-generator-searchdb 설치하기</h2><br>

<p><code>search data generator</code>플러그인을 설치 해줍니다. </p>
<p><br>해당 플러그인은 여러분의 포스트의 필요한 데이터를 포함하고 있는 <code>검색 인덱스 파일</code>을 생성하는데 사용하고. <br></p>
<p>이 파일들을을 이용해서, 블로그내에 로컬 서치 엔진 으로 사용합니다. </p>
<br>

<p><br><a id="more"></a></p>
<p>우선, 아래 명령어를 실앻해서 플러그인을 설치해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<br>



<h2 id="config-yml-수정하기"><a href="#config-yml-수정하기" class="headerlink" title="_config.yml 수정하기"></a>_config.yml 수정하기</h2><br>

<p>위 과정에서 플러그인을 정상적으로 설치했으면, <code>blog/_config.yml</code>파일을 열어줍니다. </p>
<br>

<p>파일을 연뒤에, 밑에 코드를 맨 아래에 추가해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search </span></span><br><span class="line"><span class="comment"># search </span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: <span class="literal">true</span></span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure>



<br>

<br>

<h2 id="테마폴더내에-config-yml-수정하기"><a href="#테마폴더내에-config-yml-수정하기" class="headerlink" title="테마폴더내에 _config.yml 수정하기"></a>테마폴더내에 _config.yml 수정하기</h2><br>

<br>

<p><code>blog/themes/hexo-next-theme/_config.yml</code>파일을 열어줍니다. </p>
<br>

<br>

<p><code>local_search</code>부분을 아래와 같이 수정해 줍니다. </p>
<p><code>enable</code>값을 <code>true</code>로 변경해줍니다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: manual</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<br>



<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>블로그에 검색기능이 잘 반영된것 같습니다. hexo 라고 검색하니까. </p>
<p>잘 작동합니다. </p>
<br>

<img src="/2020/03/26/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%82%B4%EC%97%90-%EA%B2%80%EC%83%89-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80/image1.png" class="">]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>검색기능,hexo-generator-searchdb</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 - SEO 세팅하기</title>
    <url>/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="NeXT-Theme-검색엔진-최적화"><a href="#NeXT-Theme-검색엔진-최적화" class="headerlink" title="NeXT Theme 검색엔진 최적화"></a>NeXT Theme 검색엔진 최적화</h1><h2 id="검색엔진-최적화-SEO-시작"><a href="#검색엔진-최적화-SEO-시작" class="headerlink" title="검색엔진 최적화 (SEO) 시작"></a>검색엔진 최적화 (SEO) 시작</h2><br>

<p>블로그이든, 홈페이지든, 쇼핑몰이든, 어떠한 서비스 이든, 만들어 놓기만 하고, <br></p>
<p>사람들이 검색해서 찾지 못한다면, 사용자들이 사용할수 없겠죠? ㅎㅎ <br></p>
<p><br><br></p>
<blockquote>
<p><strong>사용자들이 웹에 검색해서 원하는 컨텐츠들을 우리 블로그에서 찾을수 있도록 하기 위해서,</strong> </p>
<br>

<p>우리는 모두  블로그나, 웹사이트 혹은 어떠한 웹서비스를 검색엔진에 최적화를 시켜놓아야 합니다. <br><br></p>
</blockquote>
<p><br>점점 저의 블로그도 뼈대를 갖춰 가고 있으니, 사람들이 필요한 정보를 검색해서 찾을수 있게. <br></p>
<p>돈을 들여서 검색광고를 하면, 더 많은 사용자들에게 찾아지겠지만, 이 블로그는 어디까지나 공부가 목적이니. <br></p>
<br>

<p>비용을 전혀 들이지 않고 검색이 잘 나올수 있게.  SEO 세팅을 좀 해보겠습니다 ㅎㅎ </p>
<br>

<br>

<p><strong>SEO (Search Engine Optimization)</strong>  과정을 알아봅니다. </p>
<br>

<br>

<a id="more"></a> 

<br>

<h2 id="Config-파일에-SEO-Settings"><a href="#Config-파일에-SEO-Settings" class="headerlink" title="Config 파일에 SEO Settings"></a>Config 파일에 SEO Settings</h2><br>

<br>

<p><code>blog/themes/hexo-theme-next/_config.yml</code>을 열어줍니다. </p>
<br>

<br>

<p>NeXT 테마는 기본적인 SEO  설정을 할수 있게끔 만들어 주고 있습니다. <br></p>
<br>

<p>저는, 아래와 같이 설정해주었습니다. </p>
<br>

<br>

<p>*<em>사실은,,, canonical: true 부분은 기본값이 아닌데, 다른 블로그 참조해서 갖다가 붙여놨습니다; *</em></p>
<p>잘 동작하는지 안하는지 잘 모르겠으나. 일단 따라해 봅니다. </p>
<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># SEO Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable Baidu transformation on mobile devices.</span></span><br><span class="line">disable_baidu_transformation: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a canonical link tag in your hexo, you could use it for your SEO of blog. </span></span><br><span class="line"><span class="comment"># https://support.google.com/webmasters/anser/139066</span></span><br><span class="line"><span class="comment"># Remember to set up your URL in Hexo '_config.yml' (e.g. url: http://yourdomain.com) </span></span><br><span class="line">canonical: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change headers hierarchy on site-subtitle (will be main site description) and on all post / page titles for better SEO-optimization.</span></span><br><span class="line">seo: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If true, site-subtitle will be added to index page.</span></span><br><span class="line"><span class="comment"># Remember to set up your site-subtitle in Hexo `_config.yml` (e.g. subtitle: Subtitle)</span></span><br><span class="line">index_with_subtitle: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></span><br><span class="line">exturl: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters</span></span><br><span class="line">google_site_verification:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmaster</span></span><br><span class="line">bing_site_verification:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Yandex Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://webmaster.yandex.ru</span></span><br><span class="line">yandex_site_verification:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line">baidu_site_verification:</span><br></pre></td></tr></table></figure>

<br>

<p>표준 링크를 생성해주는 <code>canonical</code>과 검색엔진 최적화를 위한 <code>seo</code>기능을 활성화 되었고.<br></p>
<br>

<p><code>exturl</code>기능은 외부 링크들이 크롤러에 수집되지 않게 하는 기능을 합니다. <br><br></p>
<h2 id="hexo-generator-feed-설치하기"><a href="#hexo-generator-feed-설치하기" class="headerlink" title="hexo-generator-feed 설치하기"></a>hexo-generator-feed 설치하기</h2><br>

<p>아래 명령어를 실행해서, 플러그인을 설치합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>blog/_config.yml</code>파일에 아래 내용을 추가합니다. </p>
<p>피드 종류를 정할 수 있습니다만, 저는 제가 보았던 블로그를 참조하여. <code>rss2</code>로 설정해 주었습니다. </p>
<br>

<blockquote>
<p>네이버를 사용하려 하면, rss2 가 더 유리 하다 합니다 </p>
</blockquote>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: rss2     <span class="comment">#피드의 종류(atom/rss2)</span></span><br><span class="line">  path: rss2.xml  <span class="comment">#피드가 생성될 경로</span></span><br><span class="line">  <span class="built_in">limit</span>: 20      <span class="comment">#최신 포스트의 개수(0 또는 false 설정시 모든 포스트)</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="hexo-generator-seo-friendly-sitemap-설치하기"><a href="#hexo-generator-seo-friendly-sitemap-설치하기" class="headerlink" title="hexo-generator-seo-friendly-sitemap 설치하기"></a>hexo-generator-seo-friendly-sitemap 설치하기</h2><br>

<p>아래 명령어를 실행하여, 플러그인을 설치해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure>



<br>

<p>설치가 끝났으면, <code>blog/_config.yml</code>파일에 아래 내용을 추가해줍니다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml   <span class="comment">#생성될 경로</span></span><br><span class="line">  tag: <span class="literal">false</span>          <span class="comment">#sitemap에 tag 포함 여부</span></span><br><span class="line">  category: <span class="literal">false</span>     <span class="comment">#sitemap에 category 포함 여부</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="hexo-generator-robottxt-설치하기"><a href="#hexo-generator-robottxt-설치하기" class="headerlink" title="hexo-generator-robottxt 설치하기"></a>hexo-generator-robottxt 설치하기</h2><br>



<p><code>robots.txt</code>파일을 사이트에 생성해줍니다. 이 파일 생성도, 자동으로 생성해주는 plugin을 설치해서 생성해 줍니다. 참 쉽습니다. </p>
<br>

<p>참고로, <code>robots.txt</code> 파일은 <code>서치엔진</code>이나 <code>크로울러</code>들에게 어떤 페이지나 파일들을 요청할수 있는지 혹은 없는지에 대한 정보를 줍니다. </p>
<br>

<p>아래 커맨드를 입력하여, 플러그인을 설치해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-robotstxt --save</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>blog/_config.yml</code> 파일을 열어서, 맨 밑에다가 아래 내용을 추가 해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Robots.txt</span></span><br><span class="line">robotstxt:</span><br><span class="line">  useragent: <span class="string">"*"</span>    <span class="comment"># 적용시킬 검색엔진</span></span><br><span class="line">  allow:            <span class="comment"># 허용할 페이지</span></span><br><span class="line">    - /</span><br><span class="line">  sitemap: https://djangojeng-e.github.io/sitemap.xml</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>이 robots.txt 내용을 추가해주면, Github Banner 의 위치가 </p>
<p>깨져버립니다. 이 부분은 추후에 해결해 보려 합니다. </p>
</blockquote>
<br>

<br>

<h2 id="구글-웹마스터-인증하기"><a href="#구글-웹마스터-인증하기" class="headerlink" title="구글 웹마스터 인증하기"></a>구글 웹마스터 인증하기</h2><p>구글 웹마스터에 접속해서, 오른쪽 메뉴에 자신의 블로그 사이트 URL  을 입력합니다. </p>
<br>

<br>

<p>입력하면, 아래와 같이, 소유권을 인증 하라고 나오는데. </p>
<p>저는, head 태그 안에, <code>&lt;meta name=&quot;google-site-verification&quot; content=&lt;content&gt;</code> 코드를 넣어주고 소유권을 인증 해보려 합니다. </p>
<br>



<img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image1.png" class="">

<br>

<p><code>blog/themes/hexo-theme-next/layout/_layout.swig</code> 파일을 열어서, </p>
<p><code>&lt;head&gt;</code>부분에, 구글에서 생성된 메타 테그를 추가해 줍니다. </p>
<img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image2.png" class="">

<br>



<br>

<br>

<p>Generate 하고 Deploy 해줍시다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate </span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>



<br>

<p>다시 구글로 돌아가서, <code>verify</code> 버튼을 누르면, 소유권이 인증 됩니다. <br></p>
<br>

<img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image3.png" class="">



<br>

<br>

<p><code>Properties</code> 확인하기로 들어가면, 구글 메인 메뉴가 나오고. </p>
<p><code>&lt;br&gt; 사이드바에 있는 sitemap</code> 메뉴를 클릭하고, 사이트맵 두개를 추가해 줍니다. </p>
<br>

<p>저 같은 경우는, 아래와 같이 입력해주니까. 등록이 되었습니다. </p>
<br>



<p><code>https://&lt;username&gt;.github.io/sitemap</code> </p>
<p><code>https://&lt;username&gt;/github.io/rss</code> </p>
<br>

<img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image4.png" class="">





<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><code>SEO</code> 기본 설정을 다 마친듯 합니다. <br></p>
<p>근데.. 무언가 굉장히 찝찝하네요. 잘 모르겠어요 뭐가 된건지 안된건지.. </p>
<br>

<p>일단 넘어가도록 하고, 나중에 뭐가 이루어 진건지 안 이루어 진건지 확인 해봐야겠네요. </p>
<p><br><br></p>
<p><strong>그것보다 더 큰 문제는,  SEO 설정을 진행 했더니.. 깃헙 베너가 깨져서 나옵니다. <br></strong></p>
<p><strong>해당 에러는 천천히 어떻게 고치는지 알아내려 합니다….</strong></p>
<p>3월 23일에, 에러를 찾아 냈습니다. _config.yml 파일에 <code>exturl</code>파일 설정을 <code>false</code>로 바꾸니까 잘 됩니다! </p>
<br>

]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>Google 에드센스 시작하기 - 1</title>
    <url>/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/</url>
    <content><![CDATA[<h1 id="Google-에드센스-시작하기-1"><a href="#Google-에드센스-시작하기-1" class="headerlink" title="Google 에드센스 시작하기 - 1"></a>Google 에드센스 시작하기 - 1</h1><p><br><br></p>
<h2 id="Google-에드센스-계정-Sign-Up"><a href="#Google-에드센스-계정-Sign-Up" class="headerlink" title="Google 에드센스 계정 Sign Up"></a>Google 에드센스 계정 Sign Up</h2><br>



<p><a href="https://www.google.com/adsense/signup/new/lead" target="_blank" rel="noopener">https://www.google.com/adsense/signup/new/lead</a> 에 접속해서. </p>
<br>

<p>에드 센스를 시작합니다. </p>
<br> 

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image1.png" class="">




<br>



<h2 id="Google-Adsense-Signup-진행"><a href="#Google-Adsense-Signup-진행" class="headerlink" title="Google Adsense Signup 진행"></a>Google Adsense Signup 진행</h2><a id="more"></a>

<br>

<blockquote>
<br>



<p>사이트 URL 과 이메일 주소를 입력해 줍니다. </p>
<br>
</blockquote>
<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image2.png" class="">

<!-- more -->

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image3.png" class="">




<br>

<blockquote>
<p>진행 하다보면, 지역 설정을 하고. </p>
<p>약관에 동의 후에. 다음 단계로 넘어가는 단계가 오는데. </p>
<p>아래와 같이 다음 단계로 넘어갑니다. </p>
</blockquote>
<br>

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image4.png" class="">



<p><br><br></p>
<p><code>CREATE ACCOUNT</code> 버튼을 눌러서 다음 단계로 진행합니다. </p>
<p><br><br></p>
<p>다음 단계로 넘어가면,  <code>AdSense Code</code>가 나오고. <br></p>
<p>이 코드를 블로그의 <code>&lt;head&gt;&lt;/head&gt;</code> 사이에 넣어줘야 한다 합니다. </p>
<p><br><br></p>
<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image5.png" class="">



<br>

<p>아래와 같이 에드센스 코드를 카피해 놓고. 블로그 사이트의 <code>&lt;head&gt;</code>태그 안에 넣어주는 작업을 해야 한답니다. </p>
<br>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script data-ad-client=<span class="string">"ca-pub-9284986247336734"</span> <span class="keyword">async</span> src=<span class="string">"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<br>

<p>일반 블로그도 아니고, 깃헙 블로그라서, <code>index.html</code>이 어디에 있는지.. 전혀 감이 안와서;;; </p>
<br>

<p><strong>해당 코드를 어디에 붙여야 되는지 몰랐는데.</strong> <br></p>
<p><strong><code>&lt;head&gt;</code>태그에 넣어주기 위해서, 아래 과정으로 넘어갑니다.</strong></p>
<br>

<h3 id="layout-swig-파일을-찾기"><a href="#layout-swig-파일을-찾기" class="headerlink" title="_layout.swig 파일을 찾기"></a><code>_layout.swig</code> 파일을 찾기</h3><p><br><br></p>
<p>에드센스 코드를 블로그에 추가해 주기 위해서,<code>hexo-theme-next/layout/_layout.swig</code> 파일을 엽니다. </p>
<br>

<h2 id="에드센스-코드는-lt-head-gt-태그-안에-넣어주기"><a href="#에드센스-코드는-lt-head-gt-태그-안에-넣어주기" class="headerlink" title="에드센스 코드는 &lt;head&gt;태그 안에 넣어주기"></a>에드센스 코드는 <code>&lt;head&gt;</code>태그 안에 넣어주기</h2><br>

<p>저는, <code>&lt;head&gt;</code> 밑에,   밑에 붙여 놔줬습니다;;; </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &#123;&#123; partial(<span class="string">'_partials/head/head.swig'</span>, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  </span><br><span class="line">  &lt;script data-ad-client=<span class="string">"ca-pub-9284986247336734"</span> async src=<span class="string">"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>웹페이지를 생성하고, 구글 코드가 있는지 확인 합니다. </p>
<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g </span><br><span class="line"></span><br><span class="line">hexo d </span><br><span class="line"></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>브라우저로 접속해서 view source code  기능을 이용해서 소스를 보면. </p>
<p>해당 스크립트가 <head>  영역안에 있는걸 확인 할수 있습니다. </p>
</blockquote>
<br>

<br>

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image6.png" class="">



<br>

<br>

<blockquote>
<p>사이트 소스에 구글 에드센스 스크립트 코드를 붙여놨으니, </p>
<p>구글 에스센스 Home 에, <code>코드를 내 사이트에 붙여 놨습니다</code> 라는곳에 체크 박스에 체크를 하고 </p>
<p>완료 버튼을 누릅니다 </p>
</blockquote>
<br>

<br>

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image7.png" class="">



<br>

<br>



<p><strong>구글에서 코드를 찾았다는 메시지가 아래와 같이 나오고.</strong> </p>
<br>

<p>계정 활성화를 이제 시작할수 있다고 나옵니다. 보통 하루 이내에 완료 되지만, </p>
<p>어떤때는 하루보다 오래 걸린다네요. 다 완료되면, 이메일로 알려준다 하네요. </p>
<br>





<p><br><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image8.png" class=""></p>
<p><br><br></p>
<blockquote>
<p><strong><code>GOT IT</code> 을 꾹 눌러줍니다</strong> </p>
</blockquote>
<br>

<h2 id="Google-Adsense-리뷰-기다리기"><a href="#Google-Adsense-리뷰-기다리기" class="headerlink" title="Google Adsense 리뷰 기다리기"></a>Google Adsense 리뷰 기다리기</h2><br> 

<p>위의 과정을  다 마치면, 사이트를 리뷰 하겠다는 메시지가 뜹니다. </p>
<p>며칠 걸릴수도 있고, 2주까지 걸릴수 있다네요 ㅎㄷㄷ </p>
<br>

<br>

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image9.png" class="">

<br>







<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>구글 에드센스 추가하기를 다룬 블로그는 많은데. 아래의 이유로.. 애를 좀 먹었습니다;; </p>
<br>

<ul>
<li>테마가 <code>NeXT</code>가 아닌경우 </li>
<li>위 세팅을 하나도 안해놨는데, 광고 생성 페이지 부터 시작하는 블로그 </li>
<li>구글 화면 캡쳐 거의 없음</li>
<li>기타 이유  </li>
</ul>
<br>

<p><strong>한 2주 승인 걸린다 하니, 에드센스 승인이 날때까지 기다렸다가 다음 포스팅 진행 하겠습니다.</strong> </p>
<br>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Adsense</tag>
        <tag>Advertisement</tag>
      </tags>
  </entry>
  <entry>
    <title>Google 에드센스 시작하기 - 2</title>
    <url>/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/</url>
    <content><![CDATA[<h1 id="Google-에드센스-승인전-수정사항"><a href="#Google-에드센스-승인전-수정사항" class="headerlink" title="Google 에드센스 승인전 수정사항"></a>Google 에드센스 승인전 수정사항</h1><br>

<p>지난 포스팅을 마치면서, 구글 리뷰가 한 2주 정도 걸릴것 같았는데. <br></p>
<p>아직 사이트 검토중인데, </p>
<br>

<p>이메일이 하나 날라왔습니다. <code>계정 승인에 앞서 수정이 필요한 사항이 있음</code> 이라는 타이틀로 말이죠  <br></p>
<br>

<p><img src="/home/dhkang/.config/Typora/typora-user-images/image-20200403072425033.png" alt="image-20200403072425033"></p>
<p><br><br><br></p>
<h2 id="Google-에드센스-계정-승인-실패"><a href="#Google-에드센스-계정-승인-실패" class="headerlink" title="Google 에드센스 계정 승인 실패"></a>Google 에드센스 계정 승인 실패</h2><br>

<br>

<p>이메일을 열어보니, 에드센스 정책을 위반했다고.. 승인이 되지 않았다네요;; </p>
<a id="more"></a>

<p><br><br></p>
<blockquote>
<p> 가치 있는 인벤토리: 콘텐츠 없음 </p>
</blockquote>
<br>

<p>위 사유로 인해 승인이 되지 않았다고 합니다. </p>
<p><br><br></p>
<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/image1.png" class="">

<br>

<br>



<p>아무래도, 포스팅이 너무 없어서 에드센스 승인이 나지 않은것 같은데.. <br></p>
<p>여기저기 찾아보니까. 포스팅은 한 20개 이상 정도는 있어줘야 승인이 난다 하네요. </p>
<p><br><br></p>
<blockquote>
<p><strong>포스트를 더 해보고, 에드센스 신청을 해야될것 같습니다.</strong> </p>
</blockquote>
<br>



<h2 id="수정사항-가이드라인"><a href="#수정사항-가이드라인" class="headerlink" title="수정사항 가이드라인"></a>수정사항 가이드라인</h2><br>



<p>자세한 내용은 메일에 써져 있듯이, 아래 링크들을 따라 확인해보면 된답니다;;; </p>
<br>

<ul>
<li><p>고품질 사이트를 만들기 위한 정책 도움말 1부</p>
<p><a href="https://adsense.googleblog.com/2012/09/tips-for-creating-high-quality-sites.html" target="_blank" rel="noopener">https://adsense.googleblog.com/2012/09/tips-for-creating-high-quality-sites.html</a></p>
</li>
<li><p>고품질 사이트를 만들기 위한 정책 도움말 2부 </p>
<p><a href="https://adsense.googleblog.com/2012/04/tips-for-creating-high-quality-sites.html" target="_blank" rel="noopener">https://adsense.googleblog.com/2012/04/tips-for-creating-high-quality-sites.html</a></p>
</li>
<li><p>웹마스터 품질 가이드라인 </p>
<p><a href="https://support.google.com/adsense/answer/1348737" target="_blank" rel="noopener">https://support.google.com/adsense/answer/1348737</a></p>
</li>
<li><p>애드센스 프로그램 정책 </p>
<p><a href="https://support.google.com/adsense/answer/48182?utm_source=crs&amp;utm_medium=email&amp;utm_campaign=notification" target="_blank" rel="noopener">https://support.google.com/adsense/answer/48182?utm_source=crs&amp;utm_medium=email&amp;utm_campaign=notification</a></p>
</li>
</ul>
<p><br><br></p>
<p><strong>추가로, 콘텐츠 정책 이나 고객센터를 방문해서 알아봅니다.</strong></p>
<br>

<p>저같은 경우는, 콘텐츠 불충분 일거 같습니다;; </p>
<br>

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/image3.png" class="">





<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br> 

<p>구글에 이것저것 가이드라인이 많이 나와 있는데. <br><br></p>
<p>차근차근 읽어보면서 진행 해볼까 합니다. </p>
<p><br><br></p>
<blockquote>
<br>

<p>*<em>일단, 컨텐츠를 많이 늘려야 하는것 같으니까 ㅎㅎ *</em></p>
<p><br><strong>조금 더 포스팅을 많이 해보고, 다시 승인 요청 해볼까 합니다.</strong> </p>
</blockquote>
<p><br><br></p>
<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/image2.png" class="">]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Adsense</tag>
        <tag>Advertisement</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 포스트에 이미지 사용 - 데모</title>
    <url>/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9-%EB%8D%B0%EB%AA%A8/</url>
    <content><![CDATA[<br> 

<p>이미지 사용1 </p>
<br>

<img src="/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9-%EB%8D%B0%EB%AA%A8/terminal_capture.png" class="">

<p><br><br></p>
<p>이미지 사용2 </p>
<br>

<br>

<img src="/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9-%EB%8D%B0%EB%AA%A8/terminal_capture2.png" class="">]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Demo</tag>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 - 포스트에 이미지 사용</title>
    <url>/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9/</url>
    <content><![CDATA[<h1 id="포스트에-이미지-삽입하기"><a href="#포스트에-이미지-삽입하기" class="headerlink" title="포스트에 이미지 삽입하기"></a>포스트에 이미지 삽입하기</h1><br> 

<p>그동안 포스팅을 하면서, 큰 실수를 하고 있었는데. <br></p>
<p>여태껏 포스트에 올린 스크린 캡쳐라던지, 이미지들은 모두 반영이 되질 않았습니다. <br> <br></p>
<p>현재 저는  <code>typora</code>라는 마크다운 프로그램을 사용하고 있는데. </p>
<br>

<br>

<p>이미지를 그냥 <code>drag and drop</code>하면 포스트에 바로 반영되는것 같아 보여서, 그냥 넘어갔었는데. <br></p>
<p><strong>블로그 올라간거 보니까. 이미지가 모두 안올라 갔었습니다.</strong> <br></p>
<br>

<p>이점을 해결 하기 위해서, 오늘 포스팅을 합니다. </p>
<a id="more"></a>

<br>

<h2 id="config-yml-파일-수정하기"><a href="#config-yml-파일-수정하기" class="headerlink" title="_config.yml 파일 수정하기"></a>_config.yml 파일 수정하기</h2><br>

<p>블로그 폴더의 <code>_config.yml</code> 파일을 수정합니다. </p>
<p><br> 아래, post_asset_folder 값을  <code>true</code>로 바꾸어 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<br>

<p>이 값이 <code>true</code>로 설정되면, 포스트 마다 포스트 제목과 같은 asset 디렉토리가 생깁니다. </p>
<br>



<h2 id="포스트에-이미지-삽입하기-1"><a href="#포스트에-이미지-삽입하기-1" class="headerlink" title="포스트에 이미지 삽입하기"></a>포스트에 이미지 삽입하기</h2><br> 



<p><code>Hexo-블로그-포스트에-이미지-사용-데모</code> 라는 타이틀을 가진 포스트를 생성해봅니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"Hexo-블로그-포스트에-이미지-사용-데모"</span></span><br></pre></td></tr></table></figure>

<p><br> <br></p>
<p><code>blog/source/_post</code>폴더에 들어가면, <br>새로 생성된 포스트의 제목과 같은 이름의 폴더가 생성된걸 확인할수 있습니다. <br></p>
<br>

<br>

<p><code>blog/source/_post/Hexo-블로그-포스트에-이미지-사용-데모</code> 폴더에, <br></p>
<p><code>terminal_capture.png</code> 와 <code>terminal_capture2.png</code>파일을 넣어주었습니다. </p>
<br>

<p><strong>해당 파일들을 해당 포스트에서 사용하려면</strong>,</p>
<p><br><br></p>
<blockquote>
<p> 이미지 참조를 올바르게 해야 합니다. </p>
<p> hexo 블로그-포스트에-이미지-사용-데모 페이지에서, </p>
<p>아래 참조문을 사용해줍니다. </p>
</blockquote>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img terminal_capture.png %&#125;</span><br><span class="line">&#123;% asset_img terminal_capture2.png %&#125;</span><br></pre></td></tr></table></figure>





<br>



<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br> 위와 같은 방법으로, 포스트에 이미지를 넣어보고 확인해봅니다. </p>
<p>다음 데모 페이지를 확인 해봅니다. </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Posts</tag>
        <tag>Images</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 Scaffolds 수정</title>
    <url>/2020/03/18/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-Scaffolds-%EC%88%98%EC%A0%95/</url>
    <content><![CDATA[<h1 id="Scaffolds-수정"><a href="#Scaffolds-수정" class="headerlink" title="Scaffolds 수정"></a>Scaffolds 수정</h1><br>

<br>

<p><code>hexo new &quot;&lt;포스트제목&gt;&quot;</code> 을 입력해서 새로운 포스트를 생성하고. </p>
<p><br>새 포스트를 생성할때 마다, 상단에,</p>
 <br>

<p>아래 세부 정보를 입력하는게 귀찮았었습니다.<br> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 블로그 Scaffolds 수정 </span><br><span class="line">categories:</span><br><span class="line">  - Hexo Blog </span><br><span class="line">tags: </span><br><span class="line">  - Scaffolds </span><br><span class="line">date: 2020-03-10 21:00:33</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<br> 

<p>포스트를 생성할때마다, 상단 정보 입력 필드를 기본값으로 지정하고 싶다면, <br></p>
<p><code>scaffolds</code>폴더에 있는 <code>post.md</code>파일을 수정해주면 됩니다. <br> </p>
<br>

<p><code>scaffolds</code>폴더 안에 파일을 수정해 주면, <br><br></p>
<p><strong>포스트가 생성 될때마다 상단에 자동으로 쓰여집니다</strong> </p>
<a id="more"></a>



<br>

<h2 id="Scaffolds-post-md-수정-하기"><a href="#Scaffolds-post-md-수정-하기" class="headerlink" title="Scaffolds/post.md 수정 하기"></a>Scaffolds/post.md 수정 하기</h2><br>

<p>블로그 폴더에서 <code>scaffolds</code>폴더로 이동 합니다. <br> </p>
<p><code>scaffolds</code>폴더 안에, <code>post.md</code> 라는 파일이 존재하는데. 이것을 아래와 같이 수정해 줍니다. </p>
<p><br> 수정해 주면, 앞으로 <code>post</code>를 생성할때마다, 아래 내용이 새로운 포스트 상단에 위치 하고. <br></p>
<p>우리는 디테일만 바꿔주면 됩니다. </p>
<br>

<p>일단 저는, 아래와 같이 수정해 줬습니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">  -</span><br><span class="line">tags:</span><br><span class="line">  - </span><br><span class="line">---</span><br></pre></td></tr></table></figure>





<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br> 블로그 폴더에 가서 포스트를 하나 생성합니다. <br></p>
<p><code>hexo new &quot;Hexo-블로그-Scaffolds-수정&quot;</code></p>
<br>

<p>포스트를 생성하고, 해당 포스트 파일을 열었을때, 상단에 <code>scaffolds/post.md</code> 에 있는 내용이 나오면. <br></p>
<p>성공적으로 반영 된것입니다. </p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: Hexo 블로그 Scaffolds 수정</span><br><span class="line">categories:</span><br><span class="line">  - null</span><br><span class="line">tags:</span><br><span class="line">  - null</span><br><span class="line">date: 2020-03-18 21:00:33</span><br><span class="line"></span><br><span class="line"><span class="comment"># 저의 경우는, 아래와 같이 categories 값과 tags 값을 바꾸어 주었습니다. </span></span><br><span class="line"></span><br><span class="line">title: Hexo 블로그 Scaffolds 수정</span><br><span class="line">categories:</span><br><span class="line">  - Hexo Blog</span><br><span class="line">tags:</span><br><span class="line">  - Scaffolds</span><br><span class="line">date: 2020-03-18 21:00:33</span><br></pre></td></tr></table></figure>

<br>

<p>참고로, <code>categories</code> 와 <code>tags</code>는 <code>null</code> 값으로 지정 되어 있는데. <br></p>
<p>본인이 사용할 값을 입력해 주면 됩니다. </p>
<hr>
<br>

<p>새로운 포스트를 이렇게 써보고, <code>hexo server</code>를 실행하고 포스트가 잘 생성되는지 확인해 보러 갑니다. </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Scaffolds</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NeXT 테마 - 블로그 방문자, 조회수</title>
    <url>/2020/03/17/Hexo-NeXT-%ED%85%8C%EB%A7%88-%EB%B0%A9%EB%AC%B8%EC%9E%90-%EC%A1%B0%ED%9A%8C%EC%88%98/</url>
    <content><![CDATA[<h1 id="블로그-방문자-및-조회수-표시"><a href="#블로그-방문자-및-조회수-표시" class="headerlink" title="블로그 방문자 및 조회수 표시"></a>블로그 방문자 및 조회수 표시</h1><br>

<p>블로그를 운영하다보면, </p>
<br>

<p>내 블로그에 몇명이나 방문 했는지, 포스트의 조회수는 어떤지 궁금해 질때가 있을겁니다. </p>
<p><br> 블로그 방문자 및 조회수를 알면, 내가 쓴글에 대한 피드백도 받을수 있고, 더 중요한 토픽을 알게되어서. </p>
<p>블로그의 퀄리티의 발전에 큰 도움이 될것이라 생각합니다. </p>
<br>

<p>따라서, 블로그 방문자 및 조회수를 세는것을 NeXT 테마에 적용 해보도록 하겠습니다. </p>
<a id="more"></a>
<p><br> <br> </p>
<h2 id="1-Busuanzi-설정하기"><a href="#1-Busuanzi-설정하기" class="headerlink" title="1. Busuanzi 설정하기"></a>1. Busuanzi 설정하기</h2><br>

<p>테마의  <code>_config</code>파일을 열어봅니다. <br></p>
<p>필자의 경우 <code>blog/themes/hexo-next-theme/_config.yml</code></p>
<br>

<p><code>busuanzi_count</code> 섹션으로 가서 <code>enable</code> 값을 <code>true</code>로 설정해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line">busuanzi_count:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  total_visitors: <span class="literal">true</span></span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: <span class="literal">true</span></span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: <span class="literal">true</span></span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure>

<p><br> 해당 기능의 사이트를 방문해 보면, <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">http://ibruce.info/2015/04/04/busuanzi/</a> </p>
<p><br>온통 중국어로 되어 있어서..</p>
<p><br> 잘 모르겠지만. 구글 번역기를 돌려서 대충 내용을 파악해 보면, <br></p>
<p>아래의 <code>script</code>와 <code>span</code> 코드들이 사용된다는것을 파악할수 있다. 찍는것이지요;;; </p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span> = <span class="string">"// busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span> </span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/ <span class="attr">script</span>&gt;</span></span></span></span><br><span class="line">    </span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">"busuanzi_container_site_pv"</span>&gt;</span> </span></span></span><br><span class="line"><span class="actionscript">    Total traffic of <span class="keyword">this</span> site </span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">"busuanzi_value_site_pv"</span>&gt;</span> </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/ <span class="attr">span</span>&gt;</span> times </span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/ <span class="attr">span</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure>



<br> 

<h2 id="블로그에-적용하기"><a href="#블로그에-적용하기" class="headerlink" title="블로그에 적용하기"></a>블로그에 적용하기</h2><br>

<p>정말 여기까지 알아내야 하나 하면서, 여기저기 찾아보니까.. </p>
<br>

<p><code>theme/layout/_partials</code>의 <code>footer.swig</code>파일에 내용을 추가해 주면 된다 합니다. <br></p>
<p>우선, 아래와 내용을, 파일 제일 하단에 추가해 줍니다.</p>
<br>

<p><strong>Javascript</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;%- <span class="keyword">if</span> theme.busuanzi.enabled %&#125;</span><br><span class="line">&lt;script <span class="keyword">async</span> src = <span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;<span class="regexp">/script &gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>



<br>

<p><strong>Span</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.busuanzi.enabled %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line"> 총 조회 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 회</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span> |</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line"> 총 방문자 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 명</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>footer.swig 파일에 위 내용을 추가 해줬으면, 확인을 해보러 갑니다. </p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p>블로그의 가장 하단으로 가서. 조회수와 방문자 수가 표시되는지 확인 해봅니다. </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>블로그 카운트</tag>
        <tag>조회자수</tag>
        <tag>statistics</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NeXT 테마 - 포스트에 Read More 버튼 추가</title>
    <url>/2020/03/17/Hexo-NeXT-%ED%85%8C%EB%A7%88-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-Read-More-%EB%B2%84%ED%8A%BC-%EC%B6%94%EA%B0%80/</url>
    <content><![CDATA[<h1 id="Read-More-버튼-추가하기"><a href="#Read-More-버튼-추가하기" class="headerlink" title="Read More 버튼 추가하기"></a>Read More 버튼 추가하기</h1><p>포스트가 너무 길어지면, 블로그에 접속했을때. </p>
<p>너무 많은 양이 보여지는것 같아서 불편 했었는데. </p>
<br>



<p>특정 영역까지만 포스트를 보여주고, <code>Read More</code> 혹은  <code>더 읽어보기</code>버튼을 눌르면 전체 포스트 내용이 나오게 하여서. </p>
<br> 

<p>조금 더, 깔끔하게 포스트들이 나오게 하겠습니다. </p>
<a id="more"></a>

<br>

<h2 id="lt-more-gt-추가하기"><a href="#lt-more-gt-추가하기" class="headerlink" title="&lt;!-- more --&gt; 추가하기"></a><code>&lt;!-- more --&gt;</code> 추가하기</h2><br>

<p>방법은 아주 간단합니다. 보여주고 싶은 영역 까지 지정한 후에. </p>
<p>그곳에 <code>&lt;!-- more --&gt;</code> 만 입력해주면 됩니다. </p>
<br>

<p>예를들면, 아래 캡쳐 이미지에서 보면, “이번엔 잘 되었으면 좋겠습니다 ^^;” 영역 밑에, </p>
<p><code>&lt;!-- more --&gt;</code> 를 입력해 놨습니다. 이렇게 해놓으면, 해당 포스트는 블로그에 디스플레이 될때. </p>
<p><br>![Screenshot from 2020-03-15 10-56-01](/home/dhkang/Pictures/Screenshot from 2020-03-15 10-56-01.png)</p>
<p>![Screenshot from 2020-03-15 10-56-01](/home/dhkang/Pictures/Screenshot from 2020-03-15 10-56-01.png)</p>
<p><br><br> <code>이번엔 잘 되었으면 좋겠습니다 ^^;</code> 부분까지만 보여지고. <br>포스트의 나머지 부분은 <code>더 읽어보기</code>를 클릭해야 볼수 있습니다. </p>
<p>![Screenshot from 2020-03-15 11-02-09](/home/dhkang/Pictures/Screenshot from 2020-03-15 11-02-09.png)</p>
<p>![Screenshot from 2020-03-15 11-02-09](/home/dhkang/Pictures/Screenshot from 2020-03-15 11-02-09.png)</p>
<p><br>포스트가 너무 길경우, 이렇게 쓰면 더 깔끔하게 보여지겟네요.</p>
<br>



<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><br> 

<p>이상하게 tag만 입력하면, <code>hexo runserver</code>를 입력하였을때, </p>
<p>태그 인식도 안되고. 아래와 같은 에러가 납니다. </p>
<br>

<p>일단 동작은,,, 되는데.. 찝찝하니.. 에러 처리를 하는 방법을 계속 알아봐야 겠습니다 ;;;  </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">YAMLException: can not <span class="built_in">read</span> a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</span><br></pre></td></tr></table></figure>



<p>여기까지가, 포스트에<code>Read More</code> 버튼 추가하기, <code>더 읽어보기</code> 버튼 추가 설정이었습니다. </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Read More</tag>
        <tag>Posts</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NeXT 테마 - Disqus 댓글 설정하기</title>
    <url>/2020/03/17/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-Disqus-%EC%84%B8%ED%8C%85/</url>
    <content><![CDATA[<h1 id="Disqus-세팅하기"><a href="#Disqus-세팅하기" class="headerlink" title="Disqus 세팅하기"></a>Disqus 세팅하기</h1><br>

<br>

<p><strong>Disqus란?</strong> </p>
<br>

<p>Disqus는 네트워크 커뮤니티 플랫폼으로. 댓글 시스템을 지원합니다. (추가로 여러 기능들을 제공하기도 합니다. 예를들면, social network 연동, 뛰어난 admin 등). </p>
<br>

<p><strong>Hexo 블로그에 Disqus를 연동하면, 블로그 내에서 댓글 시스템을 사용할수 있겟죠? ㅎㅎ</strong> </p>
<a id="more"></a>
<br>

<p>아주 기본적인 기능만 사용하는 Basic 플랜을 사용한다면, 공짜로 사용할수 있습니다. </p>
<br>



<h2 id="Disqus-가입"><a href="#Disqus-가입" class="headerlink" title="Disqus 가입"></a>Disqus 가입</h2><p><a href="https://disqus.com/" target="_blank" rel="noopener">https://disqus.com/</a> 에 접속합니다. </p>
<p>![](/home/dhkang/Pictures/Screenshot from 2020-03-16 21-09-11.png)</p>
<p><br><br></p>
<p><code>GET STARTED</code>버튼을 눌러서, 가입 진행을 합니다. </p>
<br>

<br>



<p>![Screenshot from 2020-03-16 21-11-59](/home/dhkang/Pictures/Screenshot from 2020-03-16 21-11-59.png)</p>
<br>

<p><code>I want to install Disqus on my Site</code> 옵션을 클릭하고. </p>
<p>가입 진행을 합니다. 프로필에 적당한 정보를 입력해주고. 회원 가입을 완료 합니다. </p>
<br>

<p>저는 이전에 만들었던 사이트가 있었어서, 새로운 사이트를 추가 해주었습니다. </p>
<br>

<p>![Screenshot from 2020-03-16 21-32-21](/home/dhkang/Pictures/Screenshot from 2020-03-16 21-32-21.png)</p>
<br>

<p>사이트를 추가 하고나면, 플랜을 설정하는 페이지가 나오는데. <br></p>
<p>상단에 노출되는 메뉴들을 다 유료이니, 밑으로 내려가서 Basic Plan <code>Subscribe Now</code> 버튼을 눌러줍니다. </p>
<br>



<p>![Screenshot from 2020-03-16 21-33-19](/home/dhkang/Pictures/Screenshot from 2020-03-16 21-33-19.png)</p>
<p><br> <br> </p>
<p><code>subscribe now</code> 버튼을 누르면, 다음 페이지에 어떤 플랫폼을 사용할지 선택하는 메뉴가 있습니다. <br><br></p>
<p> <code>hexo</code>는 옵션에 없기 때문에, 맨 밑에 있는<br> <code>I don&#39;t see my platform listed, install manually with Universal Code</code> 옵션을 선택합니다. </p>
<br>

<br>



<p>![Screenshot from 2020-03-16 21-55-36](/home/dhkang/Pictures/Screenshot from 2020-03-16 21-55-36.png)</p>
<p><br><br></p>
<p>Installation 가이드가 나오는데,, 다 넘어가고, 맨밑에 <code>Configure</code> 버튼을 누르고 진행합니다. </p>
<br>

<p>![Screenshot from 2020-03-16 22-16-14](/home/dhkang/Pictures/Screenshot from 2020-03-16 22-16-14.png)</p>
<br>

<p>새로운 창으로 넘어가고, 몇가지 필드들을 추가해 줘야 하는 부분이 나옵니다. <br></p>
<p><code>Website URL</code>에 블로그 주소를 풀로 적어줍니다. <code>http://djnagojeng-e.github.io</code>로 적어줬습니다. <br><br></p>
<p>![Screenshot from 2020-03-16 22-19-26](/home/dhkang/Pictures/Screenshot from 2020-03-16 22-19-26.png)</p>
<br>

<br>

<blockquote>
<p>다 적어 놨으면, <code>Complete Setup</code>버튼을 눌러서 설정 완료를 해줍니다. </p>
</blockquote>
<br>



<p>셋업이 완료되었다는 페이지가 뜹니다. <br></p>
<p>![Screenshot from 2020-03-16 22-29-12](/home/dhkang/Pictures/Screenshot from 2020-03-16 22-29-12.png)</p>
<br>

<h2 id="설정된-Disqus를-블로그에-적용하기"><a href="#설정된-Disqus를-블로그에-적용하기" class="headerlink" title="설정된 Disqus를 블로그에 적용하기"></a>설정된 Disqus를 블로그에 적용하기</h2><br> 



<p><code>테마 next/ _config.yml</code> 파일을 열어서, <code>Disqus</code> 항목을 설정해 줍니다. </p>
<br>

<p><code>shortname</code>은, 웹사이트 생성시 입력했던<code>website name 을 입력합니다.</code></p>
<p>저는 <code>djangojeng-e</code>로 입력합니다. </p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Disqus</span></span><br><span class="line">disqus:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  shortname: djangojeng<span class="_">-e</span></span><br><span class="line">  count: <span class="literal">true</span></span><br><span class="line">  lazylaod: <span class="literal">false</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>







<p>윗 부분 수정을 완료했으면, 저장하고 나옵니다. </p>
<h2 id="적용-후-deploy-하기"><a href="#적용-후-deploy-하기" class="headerlink" title="적용 후 deploy 하기"></a>적용 후 deploy 하기</h2><br>

<p>블로그의 루트 디렉토리로 가서 , 아래 명령어들을 차례대로 입력해 줍니다. </p>
<br> 

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate </span><br><span class="line"></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>



<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p>각 포스트의 하단에, 댓글을 달고 지울수 있는, <code>Disqus</code>영역이 나오고. </p>
<p>댓글을 달고 지울수 있습니다. 한번 확인 하러 갑니다 ㅎㅎ </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>disqus</tag>
        <tag>comments</tag>
      </tags>
  </entry>
  <entry>
    <title>NeXT Theme - Categories and Tags</title>
    <url>/2020/03/15/NeXT-Theme-Categories-and-Tags/</url>
    <content><![CDATA[<p>카테고리와 태그 설정 테스트 페이지.</p>
<h3 id="Custom-Page-Support"><a href="#Custom-Page-Support" class="headerlink" title="Custom Page Support"></a>Custom Page Support</h3><p>Next allows users to add custom pages in menu.</p>
<div class="tabs" id="adding-custom-page"><ul class="nav-tabs"><li class="tab active"><a href="#adding-custom-page-1">Adding New Page →</a></li><li class="tab"><a href="#adding-custom-page-2">Setting Front-matter Values →</a></li></ul><div class="tab-content"><div class="tab-pane active" id="adding-custom-page-1"><p>In your terminal emulator, change to Hexo site dir. Use <code>hexo new page custom_name</code> to create a new <code>custom_name</code> page:</p>
<pre><code>$ cd your-hexo-site
$ hexo new page custom_name</code></pre></div><div class="tab-pane" id="adding-custom-page-2"><p>Front-matter is a block of YAML or JSON at the beginning of the file that is used to configure settings for your writings. Settings Front-matter values and more detailed can be found in <a href="https://hexo.io/docs/front-matter" target="_blank" rel="noopener">Front-matter</a>. You can also add contents in <code>custom_name/index.md</code> if you like.</p></div></div></div>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NeXT 테마 - 카테고리와 테그</title>
    <url>/2020/03/15/Hexo-NeXT-%ED%85%8C%EB%A7%88-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC%EC%99%80-%ED%85%8C%EA%B7%B8/</url>
    <content><![CDATA[<p>블로그에 NeXT 테마 적용이 완료되었으니, </p>
<p>Categories 와 Tags 설정을 해주고 싶습니다. 이전에 시도 했을때는, 제대로 적용이 안되었는데. </p>
<br>

<p>이번엔 잘 되었으면 좋겠습니다 ^^; </p>
<a id="more"></a>
<br>

<h2 id="메뉴-수정하기"><a href="#메뉴-수정하기" class="headerlink" title="메뉴 수정하기"></a>메뉴 수정하기</h2><br>

<blockquote>
<p>우선 테마의 _config 파일을 엽니다. </p>
<p>필자의 경우, blog/themes/hexo-theme-next</p>
<p>by 장고쟁이</p>
</blockquote>
<p>아래 <br>menu 부분에, <strong>tags 와 categories 부분을 uncomment 처리 해줍니다.</strong> </p>
<p>앞 부분에 # 만 없애면 되겟죠? ㅎㅎ</p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:  </span><br><span class="line">home: / || home  </span><br><span class="line"><span class="comment"># about: /about/ || user  </span></span><br><span class="line">tags: /tags/ || tags  </span><br><span class="line">categories: /categories/ || th  </span><br><span class="line">archives: /archives/ || archive  </span><br><span class="line"><span class="comment"># schedule: /schedule/ || calendar  </span></span><br><span class="line"><span class="comment"># sitemap: /sitemap.xml || sitemap  </span></span><br><span class="line"><span class="comment"># commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>



<br>

<p><strong>메뉴에 categories 와 tag 를 보이게 했습니다.</strong> </p>
<p><strong>이제, categories 와 tag 페이지 설정을 해주러 갑니다.</strong> </p>
<br>

<hr>
<hr>
<h2 id="Categories-페이지-추가"><a href="#Categories-페이지-추가" class="headerlink" title="Categories 페이지 추가"></a><strong>Categories 페이지 추가</strong></h2><hr>
<p>다음 명령어를 입력하여, 카테고리 페이지를 추가 해 줍니다. </p>
<br>



<p>hexo new page categories <br></p>
<hr>
<p><strong>추가된 파일은 /source/categories/index.md 에 생성 됩니다.</strong> </p>
<p><strong>해당 index.md 파일을 아래와 같이 수정해 줍니다.</strong> </p>
<hr>
<p><strong>※ 맨 위 — 와 맨 아래 — 를 꼭 맞게 작성해야 합니다. 이게 포맷입니다.</strong> </p>
<p>****<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title:Categories</span><br><span class="line">date:2020-03-15 09:28:47</span><br><span class="line"><span class="built_in">type</span>:<span class="string">"categories"</span></span><br><span class="line">comments:<span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<br>

<h2 id="Tags-페이지-추가"><a href="#Tags-페이지-추가" class="headerlink" title="Tags 페이지 추가"></a><strong>Tags 페이지 추가</strong></h2><br>



<p>카테고리 생성할때와 비슷하게, tags 페이지를 생성합니다 </p>
<br>

<p>hexo new page tags</p>
<br> 

<hr>
<p><strong>추가된 파일은 /source/categories/index.md 에 생성 됩니다.</strong> </p>
<p><strong>해당 index.md 파일을 아래와 같이 수정해 줍니다.</strong> </p>
<hr>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title:Tags</span><br><span class="line">date:2020-03-15 09:28:47</span><br><span class="line"><span class="built_in">type</span>:<span class="string">"tags"</span></span><br><span class="line">comments:<span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<br>



<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a><strong>마치며</strong></h2><br>

<p>카테고리와 태그 세팅이 된것 같습니다. </p>
<p>앞으로 포스트 작성시, 상단 내용에 <strong>categories</strong> 와 <strong>tags</strong> 항목을 추가하고 작성 해보면 됩니다.</p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: NeXT Theme - Categories and Tags</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">categories: [Hexo Blog]</span><br><span class="line">tags: [hexo]</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<br>



<p>계속 에러가 났었는데. 이번에는 잘 되네요;; </p>
<br>





<p>​                                <a href="https://blog.naver.com/PostView.nhn?blogId=headfat1218&Redirect=View&logNo=221854430054&categoryNo=9&isAfterWrite=true&isMrblogPost=false&isHappyBeanLeverage=true&contentLength=28744#" target="_blank" rel="noopener">                                     <img src="https://postfiles.pstatic.net/MjAyMDAzMTVfMTM2/MDAxNTg0MjM0MTYzNzg5.f2wNFiebhXxB7HTWFdjIwZdgKZYb_ZPuFhL3z0SSsfkg.KQn8qlK4ekf1Keo3EACPy8i5I97kHXSXcJs4MYvkrOEg.PNG.headfat1218/Screenshot_from_2020-03-15_10-02-16.png?type=w773" alt="img">                                 </a>                        </p>
<br>

<p>앞으로 hexo 블로그를 카테고리와 테그를 구분해서 다양하게 작성할수 있을것 같습니다. 화이팅~ </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>categories</tag>
        <tag>tags</tag>
      </tags>
  </entry>
  <entry>
    <title>My First Post</title>
    <url>/2020/03/14/My-First-Post/</url>
    <content><![CDATA[<h1 id="깃헙-페이지-배포하기"><a href="#깃헙-페이지-배포하기" class="headerlink" title="깃헙 페이지 배포하기"></a>깃헙 페이지 배포하기</h1><br>

<p>hexo도 설치 되었고 </p>
<p>로컬 컴퓨터에서 동작도 되고. 테마도 적용 된것 같으니. </p>
<br>

<p>첫번째 포스트로 깃헙에 배포 하는걸 진행 하고 싶습니다. </p>
<p>참고로, 포스트를 작성하려면, 블로그 폴더에서 아래 명령어를 실행 하면 됩니다. 이 페이지 title 명은 “My First Post” 이니, 이걸 명령어에 포함 시킵니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"My First Post"</span></span><br></pre></td></tr></table></figure>



<p>명령어를 실행 하면, 해당 파일은 <code>source/_posts/</code>에 생성 됩니다. </p>
<br> 

<h2 id="1-Github-페이지-생성하기"><a href="#1-Github-페이지-생성하기" class="headerlink" title="1. Github 페이지 생성하기"></a>1. Github 페이지 생성하기</h2><br> 

<p>깃헙에 가서, 블로그 페이지로 쓰일 <code>repository</code> 를 생성합니다. </p>
<br>

<p>repository 이름은 반드시 <code>&lt;username&gt;.github.io</code> 가 되어야 합니다. </p>
<p>저는 장고쟁이니까 <code>djangojeng-e.github.io</code>로 생성 하였습니다. </p>
<br>



<p><strong>Initalize with Readme.md 옵션을 선택하고 생성 완료 해주세요</strong></p>
<br>



<p>생성이 완료되면, 브라우저에 ‘djangojeng-e.github’ 을 입력해서. 잘 동작 하는지 확인 합니다. </p>
<p>![Screenshot from 2020-03-14 21-47-32](/home/dhkang/Pictures/Screenshot from 2020-03-14 21-47-32.png)</p>
<h2 id="2-Config-파일에-깃헙-주소-등록하기"><a href="#2-Config-파일에-깃헙-주소-등록하기" class="headerlink" title="2. Config 파일에 깃헙 주소 등록하기"></a>2. Config 파일에 깃헙 주소 등록하기</h2><br>

<p>블로그폴더 최상단으로 이동하여서 <code>_config.yml</code>을 수정합니다. </p>
<br>

<p>저는 장고쟁이이니까. <code>url</code>에 <a href="http://djangojeng-e.github.io">http://djangojeng-e.github.io</a> 라고 설정해 주었습니다 ㅎㅎ </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://djangojeng-e.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  trailing_html: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>deployment</code>부분도 수정해 줍니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/djangojeng<span class="_">-e</span>/djangojeng-e.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<br>



<h2 id="3-정적파일-생성후-배포하기"><a href="#3-정적파일-생성후-배포하기" class="headerlink" title="3. 정적파일 생성후 배포하기"></a>3. 정적파일 생성후 배포하기</h2><p><code>hexo generate</code> 명령어를 실행하면, 정적파일들을 만들어 냅니다. </p>
<br> 

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<br>

<p><strong>정적파일이 다 생성되었으면, 배포를 진행 합니다.</strong></p>
<br>

<p>배포를 진행하기전에, hexo 와 git 을 연결해줄수 있는 플러그인 하나를 설치 해야 합니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<br>

<p>설치를 마친 뒤에, <code>hexo deploy</code> 명령어를 실행하여, 배포 합니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<br>

<p><code>https://djangojeng-e.github.io</code>를 브라우저에 입력하고, 확인해 보면. </p>
<p>브라우저에서 블로그가 잘 작동 합니다!</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
