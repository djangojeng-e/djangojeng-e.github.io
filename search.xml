<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Form API 2편 - 폼을 사용하여 데이터 검증하기</title>
    <url>/2020/10/15/Form-API-2%ED%8E%B8-%ED%8F%BC%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="폼을-사용하여-데이터-검증하기"><a href="#폼을-사용하여-데이터-검증하기" class="headerlink" title="폼을 사용하여 데이터 검증하기"></a>폼을 사용하여 데이터 검증하기</h2><br>

<h3 id="Form-clean"><a href="#Form-clean" class="headerlink" title="Form.clean()"></a><code>Form.clean()</code></h3><br>

<p>서로 의존되어 있는 필드들을 위한 커스텀 검증을 추가해야 할때는, 폼에 clean() 메서드를 써주면 됩니다. </p>
<br>

<h3 id="Form-is-valid"><a href="#Form-is-valid" class="headerlink" title="Form.is_valid()"></a><code>Form.is_valid()</code></h3><br>

<p>폼 객체의 기본 과제는, 데이터를 검증하는것입니다. </p>
<br>

<p>Bound 폼 인스턴스를 가지고, <code>is_valid()</code> 메서드를 호출하여 유효성 검증을 실행하고, 데이터가 유효했었는지 아닌지에 대한 불리언값을 반환합니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: data = &#123;'subject': 'hello', </span><br><span class="line">   ...:         'message': 'Hi there',  </span><br><span class="line">   ...:         'sender': 'foo@example.com', </span><br><span class="line">   ...:         'cc_myself': True&#125;                                                                                                                                        </span><br><span class="line"></span><br><span class="line">In [2]: from forms_more_on_fields.forms import ContactForm                                                                                                                </span><br><span class="line"></span><br><span class="line">In [3]: f = ContactForm(data)                                                                                                                                             </span><br><span class="line"></span><br><span class="line">In [4]: f.is_valid()                                                                                                                                                      </span><br><span class="line">Out[4]: True</span><br></pre></td></tr></table></figure>

<br>

<p>유효하지 않은 데이터로도 시도해보기 위해서, 아래 예시에는 subject  필드가 비어있습니다 (모든 필드들이 채워져야 하는 폼이므로, 이것은 에러 입니다). 게다가, 아래 예시에서, sender 는 유효한 이메일 주소가 아니게 입력 된 폼입니다. </p>
<br>

<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [5]: data = &#123;'subject': '', </span><br><span class="line">   ...:         'message': 'Hi there', </span><br><span class="line">   ...:         'sender': 'invalid email address', </span><br><span class="line">   ...:         'cc_myself': True&#125;                                                                                                                                     </span><br><span class="line"></span><br><span class="line">In [6]: f = ContactForm(data)                                                                                                                                          </span><br><span class="line"></span><br><span class="line">In [7]: f.is_valid()                                                                                                                                                   </span><br><span class="line">Out[7]: False</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<a id="more"></a>

<br>

<h3 id="Form-errors"><a href="#Form-errors" class="headerlink" title="Form.errors"></a><code>Form.errors</code></h3><br>

<p>에러 속성을 error messages 의 사전에서 가져옵니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [8]: f.errors                                                                                                                                                       </span><br><span class="line">Out[8]: </span><br><span class="line">&#123;'subject': ['This field is required.'],</span><br><span class="line"> 'sender': ['Enter a valid email address.']&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>해당 사전에서, keys 는 필드 이름들이고, Values 는 에러 메시지들을 문자열로 표시한 리스트 입니다. </p>
<p>에러 메시지들은 리스트에 저장 되어 있습니다. 왜냐하면, 하나의 필드는 여러개의 에러 메시지들을 가질수도 있기 때문입니다. </p>
<br>

<p><code>is_valid()</code> 를 호출하지 않아도, errors 에 엑세스 할수 있습니다. <br></p>
<br>

<p>폼의 데이터는 처음 is_valid() 혹은 errors 에 호출하거나 access 할때 유효성 검사가 이루어 집니다. </p>
<br>

<p>유효성 루틴은 오직 한번만 호출됩니다. 몇번에 걸쳐서 errors 를 접근을 하던, is_valid() 를 호출하던. 딱 한번만 유효성 검사가 이루어집니다. 이것이 의미하는 바는, 유효성이 다른 부작용이 있을때, 부작용들은 오직 한번만 일어난다는것을 의미합니다. </p>
<br>

<h3 id="Form-errors-as-data"><a href="#Form-errors-as-data" class="headerlink" title="Form.errors.as_data()"></a><code>Form.errors.as_data()</code></h3><br>

<p>오리지널 ValidationError 인스턴스들을 매핑하는 사전을 반환합니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [9]: f.errors.as_data()                                                                                                                                             </span><br><span class="line">Out[9]: </span><br><span class="line">&#123;'subject': [ValidationError(['This field is required.'])],</span><br><span class="line"> 'sender': [ValidationError(['Enter a valid email address.'])]&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>코드로 에러를 식별하고 싶을때, 이 메서드를 사용합니다. 이 메서드는 에러의 메시지를 재작성 하거나 에러가 있을때, 뷰 안에 커스텀 로직을 작성할수 있게 해줍니다. </p>
<br>

<p>또한, 에러들을 커스텀 형태, (예, XML) 로 직력화 하는데에도 사용될수 있습니다.  </p>
<br>

<p>예를들면, as_json() 은 as_data() 에 의존하는 메서드 입니다. </p>
<br>

<br>

<h3 id="Form-errors-as-json-escape-html-False"><a href="#Form-errors-as-json-escape-html-False" class="headerlink" title="Form.errors.as_json(escape_html=False)"></a><code>Form.errors.as_json(escape_html=False)</code></h3><br>

<p>에러를 직렬화된 JSON 으로 반환합니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [10]: f.errors.as_json()                                                                                                                                            </span><br><span class="line">Out[10]: '&#123;"subject": [&#123;"message": "This field is required.", "code": "required"&#125;], </span><br><span class="line">"sender": [&#123;"message": "Enter a valid email address.", "code": "invalid"&#125;]&#125;'</span><br></pre></td></tr></table></figure>

<br>

<p>기본값으로, as_json() 은 그 결과를 escape  하지 않습니다. </p>
<p>만약 AJAX 요청 같은 것을 Form View 에 사용하고 있다면, (Form view 에서 클라이언트는 응답을 해석하여, 에러들을 페이지에 삽입하고, 당신은 사이트간 스크립팅 공격의 가능성을 피하기 위해서, 클라이언트 사이드에 결과들을 escape 하고 싶을것입니다). 이는, JavaScript 로 element.textContext = errorText 혹은 jQuery의 $(el).text(errorText) 를 사용해서 해결할수 있습니다. </p>
<br>

<p>만약 어떠한 이유로인해, client-side escaping 을 원치 않는다면, escape_html=True 를 설정해 주면 됩니다. 그리고 에러 메시지들은 escaped 되어서, 직접 HTML  안에 사용할수 있습니다. </p>
<br>

<h3 id="Form-errors-get-json-data-escape-html-False"><a href="#Form-errors-get-json-data-escape-html-False" class="headerlink" title="Form.errors.get_json_data(escape_html=False)"></a><code>Form.errors.get_json_data(escape_html=False)</code></h3><br>

<p>JSON 으로 직렬화하기 좋은 사전으로 에러들을 반환합니다. </p>
<p><br>form.errors.as_json() 은 직렬화된 JSON 을 반환 합니다. 하지만, Form.errors.get_json_data() 는 직렬화 되기 전 에러 데이터를 반환 합니다. <br></p>
<p>escape_html 파라미터는, Form.errors.as_json() 에서 나온것처럼 작동합니다. </p>
<br>

<h3 id="Form-add-errors-field-error"><a href="#Form-add-errors-field-error" class="headerlink" title="Form.add_errors(field,error)"></a><code>Form.add_errors(field,error)</code></h3><br>

<p>이 메서드는 에러들을 Form.clean() 메서드 안에서 혹은 폼의 바깥에서 특정 필드들에 추가할수 있게 해줍니다. </p>
<p>field 인자는 필드의 이름이고, 에러가 추가되어야 하는 필드입니다. 이 값이 None 이면, 에러는 non-field 에러로 간주됩니다.</p>
<br>

<p>error 인자는 문자열로 될수 있습니다 혹은 ValidationError 의 인스턴스가 선호될수 있습니다. </p>
<br>

<p>Form.add_error() 는 자동으로 cleaned_data 부터 연결된 필드들을 지워줍니다. </p>
<br>

<h3 id="Form-has-error-field-code-None"><a href="#Form-has-error-field-code-None" class="headerlink" title="Form.has_error(field, code=None)"></a><code>Form.has_error(field, code=None)</code></h3><br>

<p>필드가 특정 에러코드를 가진 에러를 가지고 있는지 없는지 Boolean 값을 리턴합니다. </p>
<p>만약 code 가 None 이면, 필드가 어떤 에러들을 가지고 있을경우, True 를 반환합니다. </p>
<br>

<p>non-field errors 를 확인하기 위해서는, NON_FIELD_ERRORS 를 field 파라미터로 사용할수 있습니다. </p>
<br>

<br>

<h3 id="Form-non-field-errors"><a href="#Form-non-field-errors" class="headerlink" title="Form.non_field_errors()"></a><code>Form.non_field_errors()</code></h3><br>

<p>이 메서드는 특정 필드와 연관이 없는 Form.errors 로 부터 에러들의 리스트를 반환합니다.</p>
<p>이는 Form.clean() 과 Form.add_errors를 사용하여 추가된 에러들에 발생된 ValidationErrors 들을 포함합니다. </p>
<br>

<br>

<h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><br>

<table>
<thead>
<tr>
<th><strong>Method</strong></th>
<th><strong>role</strong></th>
</tr>
</thead>
<tbody><tr>
<td>clean()</td>
<td>서로 의존하는 필드들을 위한 사용자 검증이 필요할때</td>
</tr>
<tr>
<td>is_valid()</td>
<td>Bound 된 폼 인스턴스의 유효성 검사. Boolean 값을 반환</td>
</tr>
<tr>
<td>.errors</td>
<td>error messages 사전을 가져오기 위한 errors 속성에 엑세스 합니다.</td>
</tr>
<tr>
<td>.errors.as_data()</td>
<td>오리지널 ValidationError 인스턴스들을 매핑하는 사전을 반환 합니다.</td>
</tr>
<tr>
<td>.errors.as_json()</td>
<td>에러를 직렬화된 JSON 으로 반환합니다.</td>
</tr>
<tr>
<td>.errors.get_json_data(escape_html=False)</td>
<td>에러들을 JSON 으로 직렬화하기 좋은 형태의 사전으로 반환합니다.</td>
</tr>
<tr>
<td>.add_error(field, error)</td>
<td>특정 필드에 에러를 추가할수 있게 해줍니다.</td>
</tr>
<tr>
<td>.has_error(field, code=None)</td>
<td>필드가 특정 코드를 가진 에러를 가지고 있는지 없는지 Boolean을 리턴합니다.</td>
</tr>
<tr>
<td>.non_field_errors()</td>
<td>특정 필드와 연결되지 않은 Form.errors 로부터 에러의 리스트를 반환합니다.</td>
</tr>
</tbody></table>
<br>



]]></content>
      <categories>
        <category>Django</category>
        <category>Form API</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Form API</tag>
      </tags>
  </entry>
  <entry>
    <title>Form API 1편 - Bound and Unbound Forms</title>
    <url>/2020/10/14/Form-API-1%ED%8E%B8-Bound-and-Unbound-Forms/</url>
    <content><![CDATA[<h2 id="Form-API"><a href="#Form-API" class="headerlink" title="Form API"></a>Form API</h2><br>

<h3 id="Bound-and-Unbound-Forms"><a href="#Bound-and-Unbound-Forms" class="headerlink" title="Bound and Unbound Forms"></a>Bound and Unbound Forms</h3><br>

<p>하나의 폼 인스턴스는 <code>bound</code> 혹은 <code>unbound</code> 로 종류가 나뉩니다. </p>
<br>

<h4 id="Bound-Form"><a href="#Bound-Form" class="headerlink" title="Bound Form"></a>Bound Form</h4><br>

<p>폼이 Bound 되어있다라는 표현은, 데이터가 폼에 묶여있는 형태로. </p>
<p>폼에 데이터가 있는 상태를 의미합니다.<br> 해당 폼 인스턴스가, 데이터를 가지고 있다면, Django 는 해당 데이터를 검증하고, 데이터와 함께 HTML 로 렌더링 할수 있게 됩니다. </p>
<br>

<h4 id="Unbound-Form"><a href="#Unbound-Form" class="headerlink" title="Unbound Form"></a>Unbound Form</h4><br>

<p>만약에 폼이 unbound 되었다면, 해당 폼 인스턴스에는 데이터 검증 작업을 수행할수 없습니다 (검증할 데이터가 없기 때문입니다). 그렇지만, 비어있는 폼을 HTML 로 렌더 할수 있습니다. </p>
<br>

<br>

<h2 id="폼-클래스로-폼-인스턴스-생성"><a href="#폼-클래스로-폼-인스턴스-생성" class="headerlink" title="폼 클래스로 폼 인스턴스 생성"></a>폼 클래스로 폼 인스턴스 생성</h2><br>

<p>하나의 unbound  폼 (데이터가 비어있는 폼 인스턴스) 을 생성하기 위해서는, 폼 클래스를 인스턴스화 시켜주면 됩니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">f = ContactForm()</span><br></pre></td></tr></table></figure>

<br>

<p>반대로, 폼에 데이터를 묶어주는, bound 폼 인스턴스를 생성하기 위해서는, </p>
<p><br>묶어줄 데이터를 사전 형태로 전달해주면 됩니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'subject'</span>: <span class="string">'hello'</span>,</span><br><span class="line">    <span class="string">'message'</span>: <span class="string">'Hi there'</span>,</span><br><span class="line">    <span class="string">'sender'</span>: <span class="string">'foo@example.com'</span>,</span><br><span class="line">    <span class="string">'cc_myself'</span>: <span class="literal">True</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = ContactForm(data)</span><br></pre></td></tr></table></figure>

<br>

<p>이 사전안에 keys 는 필드 이름이고, 이는 Form 클래스안의 속성들과 대응합니다. </p>
<p><br>사전안에 있는 values 는 여러분들이 검증하려고 하는 데이터 입니다. 이들은 보통 문자열로 되어 있지만, 문자열이여만 하는 요구 조건은 없습니다. 전달될 데이터 타입은 필드 마다 다를수 있습니다. </p>
<br>

<h2 id="is-bound"><a href="#is-bound" class="headerlink" title="is_bound"></a><code>is_bound</code></h2><br>

<p>만약 여러분들이 form 인스턴스가 bound 인지 unbound 인지 실행시에 구분하고 싶다면, form 의 is_bound 속성의 값을 확인 하면 됩니다. True 혹은 False 를 반환합니다. </p>
<br>

<p>shell 에서 확인해보면, </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [3]: from forms_more_on_fields.forms import ContactForm                                                                                                             </span><br><span class="line">In [4]: f = ContactForm()                                                                                                                                              </span><br><span class="line">In [5]: f.is_bound                                                                                                                                                     </span><br><span class="line">Out[5]: False</span><br><span class="line">In [6]: f = ContactForm(&#123;'subject': 'hello'&#125;)                                                                                                                          </span><br><span class="line">In [7]: f.is_bound                                                                                                                                                     </span><br><span class="line">Out[7]: True</span><br></pre></td></tr></table></figure>

<br>

<ul>
<li>폼 인스턴스에 데이터가 들어가면, is_bound 를 호출했을때, True 를 반환하고 </li>
<li>폼 인스턴스에 데이터가 들어가지 않은 unbound 폼에 is_bound 를 호출하면, False 를 반환합니다 </li>
</ul>
<br>

<p>비어 있는 사전을 전달할 경우, 비어 있는 데이터를 가진 bound form 이 됩니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [8]: f = ContactForm(&#123;&#125;)       # 비어있는 사전 전달                                                                                                                            </span><br><span class="line"></span><br><span class="line">In [9]: f.is_bound                                                                                                                                                     </span><br><span class="line">Out[9]: True</span><br></pre></td></tr></table></figure>

<br>

<p>Bound Form 인스턴스를 가지고 있고, 어떻게든 데이터를 바꾸고 싶거나 혹은 unbound form 을 어떠한 데이터를 가지게 하고 싶다면, 또다른 Form 인스턴스를 생성하면 됩니다. </p>
<br>

<p>Form instance 안에 데이터를 변경하는 길은 없습니다. 한번 Form 인스턴스가 생성이 되면, 데이터를 가지고 있던 없던, 데이터는 변경이 불가능 합니다! </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Form API</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Form API</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 18편 - 폼 템플릿 작업하기-6</title>
    <url>/2020/10/13/Django-Forms-18%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-6/</url>
    <content><![CDATA[<h2 id="Reusable-form-templates"><a href="#Reusable-form-templates" class="headerlink" title="Reusable form templates"></a>Reusable form templates</h2><br>

<p>만약 여러분의 사이트가 공통된 렌더링 로직을 가진 폼들을 다수의 공간에서 사용한다면, </p>
<p><br>반복되는것을 폼의 템플릿 안에 저장하고 include 테그를 사용하여, 다른 템플릿 안에서 사용할수 있습니다. </p>
<br>



<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'form_snippet.html' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># In form_snippet_html </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> field <span class="keyword">in</span> form %&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; field.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; field.label_tag &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>만약 폼 객체가 컨텍스트 안에 포함되어, 다른 이름을 가진 템플릿으로 전달 된다면, with  인자를 통해서, alias 설정을 할수 있습니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> "form_snippet.html" with form=common_form %&#125;</span></span><br></pre></td></tr></table></figure>

<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 17편 - 폼 템플릿 작업하기-5</title>
    <url>/2020/10/13/Django-Forms-17%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-5/</url>
    <content><![CDATA[<h2 id="Looping-over-hidden-and-visible-fields"><a href="#Looping-over-hidden-and-visible-fields" class="headerlink" title="Looping over hidden and visible fields"></a>Looping over hidden and visible fields</h2><br>

<p>만약 여러분들이 수동으로 폼을 템플릿안에서 레이아웃을 잡는 작업을 하고 있다면, Django 의 기본 폼 레이아웃과는 반대되게, <code>&lt;input type=&quot;hidden&quot;&gt;</code> 을 사용하여, 숨김처리가 되지 않은 필드들과 다르게 사용할수 있습니다. </p>
<br>

<p>예를들면, 숨겨진 필드들은 아무것도 출력하지 않기 때문에, 에러 메시지들을 해당 필드 옆에 출력 한다는것은 사용자들에게 혼란을 일으킬수 있을것입니다. 따라서, 이런 필드들의 에러들은 다른 방식으로 다루어 져야 합니다. </p>
<br>

<p>Django 는 숨겨진 필드와 노출된 필드들을 따로 반복할수 있게 해줍니다. </p>
<br>

<p>바로, hidden_fields() 와 visible_fields()</p>
 <br>

<p>아래 예시를 참고합니다. </p>
<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="comment">&#123;# Include the hidden fields #&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> hidden <span class="keyword">in</span> form.hidden_fields %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="template-variable">&#123;&#123; hidden &#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="comment">&#123;# Include the visible fields #&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> field <span class="keyword">in</span> form.visible_fields %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">         </span><span class="template-variable">&#123;&#123; field.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">         </span><span class="template-variable">&#123;&#123; field.label_tag &#125;&#125;</span><span class="xml">  </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<p>위의 예시는, 숨겨진 필드들 안에 있는 어떤 에러도 다루지 않습니다. 보통은, 숨겨진 필드안에 있는 에러는 폼 변조를 의미할수 있습니다. 보통 폼 동작은 폼을 바꾸지 않습니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 16편 - 폼 템플릿 작업하기-4</title>
    <url>/2020/10/12/Django-Forms-16%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-4/</url>
    <content><![CDATA[<h2 id="Looping-over-the-form’s-fields"><a href="#Looping-over-the-form’s-fields" class="headerlink" title="Looping over the form’s fields"></a>Looping over the form’s fields</h2><br>

<p>만약 여러분들이 각 폼 필드들을 위해 같은 HTML 테그들을 사용하고 있다면, 반복되는 코드들을 줄일수 있습니다 </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"># 반복문을 사용하여 반복되는 코드를 줄일수 있습니다 </span></span><br><span class="line"><span class="xml"># </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> %&#125;</span><span class="xml"> </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># 예시 </span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> field <span class="keyword">in</span> form %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldwrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; field.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; field.lable_tag &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> field.help_text %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"help"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; field.help_text|<span class="name">safe</span> &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<p>반복문이 실행될때마다, 각 필드에서 사용할수 유용한 속성들이 존재 합니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span><span class="xml"> 가 포함하고 있는 유용한 속성들은 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.lable &#125;&#125;</span><span class="xml"> 필드의 레이블을 표시합니다. 예) Email Address </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml"># 필드의 label 이 적절한 HTML <span class="tag">&lt;<span class="name">label</span>&gt;</span> 태그로 감싸집니다. 이는 form 의 label_suffix 를 포함합니다. 예를들면, labe_suffix 의 기본값은 콜론입니다. </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"id_email"</span>&gt;</span>Email address:<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.id_for_label &#125;&#125;</span></span><br><span class="line"><span class="xml"># 이 필드를 위해 사용될 ID (위 예시에서는 id_email). </span></span><br><span class="line"><span class="xml"># 만약 여러분들이 label 을 수동으로 만들고 있다면, 이것을 label_tag 대신에 사용할수 있습니다 </span></span><br><span class="line"><span class="xml"># 이것또한 유용하게 사용될수 있습니다. </span></span><br><span class="line"><span class="xml"># 예를들면, 여러분들이 인라인 JavaScript 를 가지고 있고, 필드의 ID 를 하드코딩 하는것을 피하고 </span></span><br><span class="line"><span class="xml"># 싶을때처럼 말이죠 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.value &#125;&#125;</span></span><br><span class="line"><span class="xml"># 필드의 값 예) someone@example.com </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.html_name &#125;&#125;</span></span><br><span class="line"><span class="xml"># 인풋 요소의 이름 필드에 사용될 필드의 이름, 설정 되어 있다면, 폼의 접두사를 고려합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.help_text &#125;&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"># 필드와 관련된 hep text </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.errors  &#125;&#125;</span></span><br><span class="line"><span class="xml"># 필드에 해당하는 유효성 혹은 검증 에러를 가지고 있는 <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class-</span>"<span class="attr">errorlist</span>"&gt;</span>를 출력합니다 </span></span><br><span class="line"><span class="xml"># 에러의 모습을 </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> error <span class="keyword">in</span> field.errors %&#125;</span><span class="xml"> 반복문을 사용하여, 커스터마이즈 할수 있습니다. </span></span><br><span class="line"><span class="xml"># 이 경우에는, 반복문안에 각 객체들은 에러 메시지를 포함하고 있는 문자열이 됩니다. </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.is_hidden &#125;&#125;</span></span><br><span class="line"><span class="xml"># 만약 필드가 숨겨진 필드라면 True 를 반환하고, 숨겨져 잇지 않다면 False 를 반환합니다 </span></span><br><span class="line"><span class="xml"># 이것은 특출나게 템플릿 변수로써 유용하지 않습니다. 하지만 아래 예시같이 조건적인 테스트에서는</span></span><br><span class="line"><span class="xml"># 유용할수 있습니다 </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> field.is_hidden %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.field &#125;&#125;</span></span><br><span class="line"><span class="xml"># 폼 클래스로부터 필드 인스턴스로 BoundField 로 감싸집니다. </span></span><br><span class="line"><span class="xml"># Field 속성들을 엑세스하기 위해 사용합니다. 예) </span><span class="template-variable">&#123;&#123;char_field.field.max_length&#125;&#125;</span></span><br></pre></td></tr></table></figure>

<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 15편 - 폼 템플릿 작업하기-3</title>
    <url>/2020/10/11/Django-Forms-15%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-3/</url>
    <content><![CDATA[<h2 id="Rendering-form-error-messages"><a href="#Rendering-form-error-messages" class="headerlink" title="Rendering form error messages"></a>Rendering form error messages</h2><br>

<p>폼에 에러 메시지들을 출력해줄수 있습니다. 하지만, 물론 이 부분은 유연한 추가 작업일 뿐입니다. </p>
<br>

<p>현재까지 우리는, 폼 에러들을 어떻게 출력해주어야 하는지에 대해 걱정하지 않아도 되었었습니다. </p>
<p><br>이번 예시에서 우리는, 각 필드에서 발생하는 에러와 폼 전체에서 발생하는 에러에 대해서 어떻게 관리 해야 하는지에 대해서 다룹니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.non_field_errors &#125;&#125;</span><span class="xml"> 가 폼의 가장 상단에 위치하고, 템플릿은 각 필드에 error 들을 조회 한다는것을 숙지 합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.필드명.errors &#125;&#125;</span><span class="xml"> 를 사용하면, 폼 에러의 리스트를 출력해 줍니다. 이는 순서가 정해지지 않은 unordered list 로 렌더 됩니다 </span></span><br><span class="line"><span class="xml">아래와 같이 보여질수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"errorlist"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sender is required.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<p>해당 리스트는 errorlist  의 CSS 클래스를 가지고, 모양을 스타일링 할수 있게 해줍니다. 만약, 여러분들이 조금 더 출력 된 에러들을 커스터마이즈 하고 싶다면, 반복문을 사용하여 이를 꾸며줄수 있습니다. </p>
<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> form.subject.errors %&#125;</span></span><br><span class="line"><span class="xml">	<span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> error <span class="keyword">in</span> form.subject.errors %&#125;</span></span><br><span class="line"><span class="xml">        	<span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; error|<span class="name">escape</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>필드 에러가 아닌것 (그리고 혹은, form.as_p) 를 사용하여, 폼의 상단에 렌더된 숨겨진 필드 에러들은 추가적인 nonfield 클래스와 함께 렌더가 됩니다. </p>
<p><br>이는, 특히 필드 특화된 에러들과의 구분을 도와줍니다.  예를들면, </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"errorlist nonfield"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Generic Validation error<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<p>The Forms API 를 확인하면, 에러들과, 스타일링 그리고 템플릿 안에서의 폼 속성들에 대한 것들을 확인 할수 있습니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 14편 - 폼 템플릿 작업하기-2</title>
    <url>/2020/10/10/Django-Forms-14%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-2/</url>
    <content><![CDATA[<h2 id="Rendering-Fields-Manually"><a href="#Rendering-Fields-Manually" class="headerlink" title="Rendering Fields Manually"></a>Rendering Fields Manually</h2><br>

<p>Django 가 forms.py 에 작성된 폼들을 템플릿에 자동으로 풀어놓게 하고 싶지 않으면, 수동으로 작업하는 방법도 있습니다. </p>
<br>

<p>각 필드들은, form.(폼필드명) 의 형태로, 해당폼의 속성으로 존재합니다. 그리고, Django 템플릿안에서 적절하게 사용하여 렌더 될수 있습니다. </p>
<p>예시를 들자면, 이전 포스팅에서 작성한 forms.py 와 views.py 를 기반으로 해서 예를 듭니다. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># forms.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">	subject = forms.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">	message = forms.CharField(widget=forms.Textarea)</span><br><span class="line">	sender = forms.EmailField()</span><br><span class="line">	cc_mysself = forms.BooleanField(required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">form_render</span><span class="params">(request)</span>:</span></span><br><span class="line">	form = ContactForm() </span><br><span class="line">	<span class="keyword">return</span> render(request, <span class="string">'form.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure>

<br>

<p>form.html 파일에 렌더를 수동으로 해주려면, 아래와 같이 작성해주면 됩니다. </p>
<br>

<a id="more"></a>

<br>



<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; form.non_field_errors &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.subject.id_for_lable &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span> Email Subject <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.message.id_for_label &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Your messages : <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.sender.id_for_label &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Your Email Address : <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.cc_myself.id_for_label &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>CC Yourself <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="label-tag"><a href="#label-tag" class="headerlink" title="label_tag()"></a><code>label_tag()</code></h2><br>

<p><code>&lt;label&gt;</code> 요소들을 <code>label_tag()</code> 를 사용하여 완성 시킬수 있습니다. 예를들면, 아래와 같이 HTML 에 작성해 주면 됩니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<p>서버를 실행 시키고, 템플릿을 확인해 보면, 아래와 같이 폼이 출력 됩니다. </p>
<br>

<img src="/2020/10/10/Django-Forms-14%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-2/image1.png" class="">

<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"># 이미지에서 들여다 보면, </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.subject.errors &#125;&#125;</span><span class="xml"> 는 아무것도 출력하지 않습니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.subject.label_tag &#125;&#125;</span><span class="xml"> 는, </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_subject"</span>&gt;</span>Subject<span class="tag">&lt;/<span class="name">label</span>&gt;</span> 로 출력되는걸 볼수 있습니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.subject &#125;&#125;</span><span class="xml"> 는, </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">request</span> <span class="attr">id</span>=<span class="string">"id_subject"</span>&gt;</span> 형태로 출력되는것을 확인 할수 있습니다.</span></span><br></pre></td></tr></table></figure>

<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 13편 - 폼 템플릿 작업하기-1</title>
    <url>/2020/10/09/Django-Forms-13%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-1/</url>
    <content><![CDATA[<h2 id="Working-with-form-templates"><a href="#Working-with-form-templates" class="headerlink" title="Working with form templates"></a>Working with form templates</h2><br>

<p>폼을 템플릿으로 가져오기 위해서 해야할 모든것은, 폼 인스턴스를 템플릿 컨텍스트에 넣어주는것입니다. </p>
<br>

<br>



<ol>
<li><p>폼인스턴스 생성</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py 에서 </span></span><br><span class="line">form = NameForm()</span><br></pre></td></tr></table></figure>
</li>
<li><p>템플릿 컨텍스트에 넣기 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> render(request, form.html, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure>



</li>
</ol>
<br>

<p>템플릿 컨텍스트에 넣어진 컨텍스트 즉, <code>{&#39;form&#39;: form}</code> 은, 해당 템플릿 페이지에서, 아래와 같이 사용될수 있습니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; form &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<p>이렇게 하면, 템플릿에서 적절하게 label 과 input 요소들을 렌더해줄수 있습니다. </p>
<br>

<br>

<h2 id="Form-rendering-options"><a href="#Form-rendering-options" class="headerlink" title="Form rendering options"></a>Form rendering options</h2><br>

<blockquote>
<p><strong>추가해야할 폼 템플릿 요소들</strong> </p>
<p>폼의 출력은 <code>&lt;form&gt;</code> 테그 혹은 폼의 제출 약식들을 포함하지 않는다는것을 잊지 마세요. </p>
<p><code>&lt;form&gt;</code> 태그와 <code>&lt;submit&gt;</code> 태그 같은것들은 여러분들이 스스로 넣어줘야 합니다. </p>
</blockquote>
<br>

<p>Django 에서 Form 을 템플릿에 렌더할때에, 옵션을 붙여서 폼의 출력 형태를 바꾸어 줄수 있습니다.  </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; form.as_table &#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span> 테그로 감싸진 테이블로 폼을 렌더해줍니다 </span></span><br><span class="line"><span class="template-variable">&#123;&#123; form.as_p &#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">p</span>&gt;</span> 테그로 감싸진 폼을 렌더해 줍니다 </span></span><br><span class="line"><span class="template-variable">&#123;&#123; form.as_ul &#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span> 태그로 감싸진 폼을 렌더해 줍니다</span></span><br></pre></td></tr></table></figure>

<br>

<p>form.as_table 과 form.as_ul 같은 경우, 상위 태그인 <code>&lt;table&gt;</code> 과, <code>&lt;ul&gt;</code> 요소들을 여러분들 스스로 작성하고 감싸주어야 합니다. </p>
<br>



<br>

<h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><br>

<p>아주 간단한 폼을 템플릿에 렌더해 보면, </p>
<br>

<a id="more"></a>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"># forms.py </span></span><br><span class="line"></span><br><span class="line"><span class="xml">from django import forms </span></span><br><span class="line"></span><br><span class="line"><span class="xml">class ContactForm(forms.Form):</span></span><br><span class="line"><span class="xml">	subject = forms.CharField(max_length=100)</span></span><br><span class="line"><span class="xml">	message = forms.CharField(widget=forms.Textarea)</span></span><br><span class="line"><span class="xml">	sender = forms.EmailField()</span></span><br><span class="line"><span class="xml">	cc_mysself = forms.BooleanField(required=False)</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># views.py </span></span><br><span class="line"><span class="xml">def form_render(request):</span></span><br><span class="line"><span class="xml">	form = ContactForm() </span></span><br><span class="line"><span class="xml">	return render(request, 'form.html', &#123;'form': form&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"># form.html 에서 </span><span class="template-variable">&#123;&#123; form.as_p &#125;&#125;</span><span class="xml"> 로 렌더를 해보면,</span></span><br><span class="line"><span class="xml"># 아래처럼 html 태그가 생성됩니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_subject"</span>&gt;</span>Subject:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"id_subject"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_message"</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">id</span>=<span class="string">"id_message"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_sender"</span>&gt;</span>Sender:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"sender"</span> <span class="attr">id</span>=<span class="string">"id_sender"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_cc_myself"</span>&gt;</span>Cc myself:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"cc_myself"</span> <span class="attr">id</span>=<span class="string">"id_cc_myself"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 12편 - Django Form 클래스에 대해 2</title>
    <url>/2020/10/08/Django-Forms-12%ED%8E%B8-Django-Form-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-2/</url>
    <content><![CDATA[<h2 id="Fields-에-대해서"><a href="#Fields-에-대해서" class="headerlink" title="Fields 에 대해서"></a>Fields 에 대해서</h2><br>

<p>이전 포스팅들에서 다루었었던 예시보다 좀더 유용한 폼을 한번 생각해 봅시다. </p>
<p><br>개인적인 웹사이트에 contact me 기능을 구현하는 폼을 생각해 봅시다. Contact Me 폼을 작성하기 위한 <code>forms.py</code> 파일은 아래와 같이 작성될수 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    subject = forms.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    message = forms.CharField(widget=forms.Textarea)</span><br><span class="line">    sender = forms.EmailField()</span><br><span class="line">    cc_myself = forms.BooleanField(required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>이전 포스팅에서 들었었던 폼의 예시는, 하나의 필드만 사용했었습니다. your_ name 과 CharField 만 사용햇었습니다. </p>
<p><br>하지만, 이번 경우에는, 4가지의 필드들을 가지고 있습니다. </p>
<br>

<table>
<thead>
<tr>
<th><strong>Fields</strong></th>
<th><strong>FieldTypes</strong></th>
</tr>
</thead>
<tbody><tr>
<td>subject</td>
<td>CharField</td>
</tr>
<tr>
<td>message</td>
<td>CharField(widget=forms.Textarea)</td>
</tr>
<tr>
<td>sender</td>
<td>EmailField</td>
</tr>
<tr>
<td>cc_myself</td>
<td>BooleanField</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="Widgets"><a href="#Widgets" class="headerlink" title="Widgets"></a>Widgets</h2><br>

<p>각 폼의 필드는 그에 상응하는 Widget 클래스를 가지고 있습니다, 위의 예시에서는 widget=forms.Textarea 로 지정되어 <code>&lt;input type=&quot;text&quot;&gt;</code> 같은 HTML 폼 widget 이 될것입니다. </p>
<br>

<p>대부분의 경우, 필드는 적당한 기본 widget 을 가지고 있을것입니다. </p>
<p><br>예를들면, 기본값으로 CharField 는 TextInput widget 을 가질것이고, 이는 <code>&lt;input type=&quot;text&quot;&gt;</code> 를 HTML 안에서 만들어 내줍니다. </p>
<br>

<p>만약 <code>&lt;textarea&gt;</code> 가 필요했다면, 적절한 widget 을 Form 필드를 정의할때 지정해 주면 됩니다. 우리는 이것을 message 필드를 정의할때 지정해 주었습니다. </p>
<br>

<br>

<a id="more"></a>

<br>

<h2 id="Field-Data"><a href="#Field-Data" class="headerlink" title="Field Data"></a>Field Data</h2><br>

<p>어떤 데이터이든 폼과 함께 제출되었고, <code>is_valid()</code> 함수를 호출하여 성공적으로 검증되었으면 (is_valid() 가 True 를 반환했을때),  </p>
<p><br>검증된 폼 데이터는 <code>form.cleaned_data</code> 에 사전 형태로 있을것입니다. 이 데이터는 여러분들을 위해 python 데이터 타입으로 좋게 전환되어 있습니다.  </p>
<br>

<blockquote>
<p><strong>NOTE</strong></p>
<p>우리는 여전히 검증되지 않은 데이터들을, request.POST 를 사용하여 </p>
<p>직접 엑세스 할수 있습니다. 하지만, 검증된 데이터를 다루는것이 더 좋습니다. </p>
</blockquote>
<br>

<p>위에 있는 contact form 예시에서, cc_myself 는 불리언 값이 될것 입니다. 비슷하게도, IntegerField 와 FloatField  같은 필드들은, Python 이 값을 int 와 Float 으로 전환 합니다. </p>
<br>

<h2 id="Form-데이터-처리하기"><a href="#Form-데이터-처리하기" class="headerlink" title="Form 데이터 처리하기"></a>Form 데이터 처리하기</h2><br>

<p>폼에서 제출된 데이터가, is_valid() 함수를 사용하여 검증이 된 데이터라고 할때, 아래 예시에서는 어떻게 폼에서 받은 데이터를 뷰에서 다룰수 있는지 간단하게 보여줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.is_valid():</span><br><span class="line">    subject = form.cleaned_data[<span class="string">'subject'</span>]</span><br><span class="line">    message = form.cleaned_data[<span class="string">'message'</span>]</span><br><span class="line">    sender = form.cleaned_data[<span class="string">'sender'</span>]</span><br><span class="line">    cc_myself = form.cleaned_data[<span class="string">'cc_myself'</span>]</span><br><span class="line">    </span><br><span class="line">    recipients = [<span class="string">'info@example.com'</span>]</span><br><span class="line">    <span class="keyword">if</span> cc_myself:</span><br><span class="line">        recipients.append(sender)</span><br><span class="line">        </span><br><span class="line">    send_mail(subject, message, sender, recipients)</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/thanks/'</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>기본적으로, form.is_valid() 가 True 이면, 각 필드들에 입력된 데이터들은, <code>form.cleaned_data[&#39;subject&#39;]</code> 같은 형식에 담아져 있습니다. 이는, 검증된 폼 데이터가 form.cleaned_data  에 사전 형태로 저장되어 있기 때문입니다. </p>
<br>

<p>이 예시에서, send_mail 에 대한 구현은 다루지 않습니다. 이 send_mail 을 더 알고 싶으면, Django 에서 이메일 보내기를 더 알아야 합니다. </p>
<p>Sending Email 문서를 참조하면 되는데, 처음엔 무슨 소리인지 이해가지 않을겁니다. </p>
<br>

<p>몇가지 필드 타입들은 추가적인 처리가 필요할수 있습니다. 예를들면, 폼을 사용하여 업로드된 파일들은 좀 다르게 다루어질 필요가 있습니다. <br></p>
<p>이런 파일들은 (request.POST 보다는 request.FILES 로 조회될수 있습니다)</p>
<br>

<p>어떻게 업로드된 파일들을 다루는지에 대해서는, binding uploaded files to a form 문서를 확인하시면 됩니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 11편 - Django Form 클래스에 대해 1</title>
    <url>/2020/10/08/Django-Forms-11%ED%8E%B8-Django-Form-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-1/</url>
    <content><![CDATA[<h2 id="Django-Form-Classes"><a href="#Django-Form-Classes" class="headerlink" title="Django Form Classes"></a>Django Form Classes</h2><br>

<h3 id="More-about-Django-Form-Classes"><a href="#More-about-Django-Form-Classes" class="headerlink" title="More about Django Form Classes"></a>More about Django Form Classes</h3><br>

<blockquote>
<p><strong>모든 폼 클래스들은</strong></p>
<p>django.forms.Form 혹은 django.forms.ModelForm 클래스 둘중 하나의 </p>
<p>서브 클래스들로 생성 됩니다. </p>
</blockquote>
<br>

<p>ModelForm 은 Form.Form 그리고 ModelForm 의 서브클래스로. 사실상 공통 기능들을 BaseForm 클래스로부터 상속 받는다고 생각하면 됩니다. </p>
<br>

<br>

<blockquote>
<p><strong>Models and Forms</strong></p>
<p>여러분드르이 폼이 직접적으로 Django 모델을 추가하거나 수정하는데에 쓰인다면, </p>
<p>ModelForm 이 시간과 노력 그리고 코드의 양을 줄이는데에 크게 기여할수 있습니다. </p>
<p>왜냐하면, ModelForm 은 Model 클래스로부터 적절한 필드들과 속성들을 가지고 폼을 생성해 주기 때문입니다. </p>
</blockquote>
<br>

<br>

<h3 id="Bound-and-Unbound-Form-instances"><a href="#Bound-and-Unbound-Form-instances" class="headerlink" title="Bound and Unbound Form instances"></a>Bound and Unbound Form instances</h3><br>

<p><strong>Bound 된 폼과, unbound 된 폼 사이의 차이점을 알아둡시다</strong></p>
<br>

<blockquote>
<p><strong>Unbound Form</strong></p>
<p>폼과 관련된 데이터를 가지고 있지 않은 폼을 의미 합니다. </p>
<p>사용자에게 폼이 렌더 되었을때, 해당 폼은 비어 있거나, 기본값들을 가지고 있을것입니다. </p>
</blockquote>
<br>

<blockquote>
<p><strong>Bound Form</strong></p>
<p>제출된 데이터를 가지고 있습니다. </p>
<p>따라서, 데이터가 유효한지 얘기하기 위해서 사용될수 있습니다. </p>
<p>만약, 유효하지 않은 bound form 이 렌더 된다면, 해당 폼은 인라인으로 에러 메시지들을 포함하여 사용자에게 어떤 데이터를 고쳐야 하는지 얘기해줄수 있습니다. </p>
</blockquote>
<br>

<br>

<h3 id="is-bound-속성"><a href="#is-bound-속성" class="headerlink" title="is_bound 속성"></a><code>is_bound</code> 속성</h3><br>

<p>form 의 <code>is_bound</code> 속성은 해당 폼이 데이터를 가지고 있는지 없는지 확인해 줄수 있습니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 10편 - Django 에서 폼만들기 3</title>
    <url>/2020/10/07/Django-Forms-10%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-3/</url>
    <content><![CDATA[<h2 id="The-Template"><a href="#The-Template" class="headerlink" title="The Template"></a>The Template</h2><br>

<p>이제 직접적으로 template 에 html 폼을 그려주기 위해서, <code>name.html</code> 파일을 생성해 줍니다. </p>
<br>

<p>지난 포스팅에서 views.py 에서 <code>{&#39;form&#39;: form}</code> 이라는 컨텍스트를 <code>name.html</code> 파일로 전달하였으므로, </p>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> NameForm </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 만약 이것이 POST 요청이라면, 폼 데이터를 처리할 필요가 있습니다 </span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>: </span><br><span class="line">        <span class="comment"># 폼 인스턴스를 생성하고, 요청으로부터 받아온 데이터로 채웁니다</span></span><br><span class="line">        form = Nameform(request.POST)</span><br><span class="line">        <span class="comment"># 유효한 데이터인지 검사합니다 </span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># form.cleaned_data 안에 있는 데이터를 요구사항에 맞게 처리합니다. </span></span><br><span class="line">            <span class="comment"># ... </span></span><br><span class="line">            <span class="comment"># 새로운 URL 로 리다이렉트 시켜줍니다.</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/thanks/'</span>)</span><br><span class="line">    <span class="comment"># 만약 GET 이나 다른 method 의 요청을 받으면, 비어있는 폼을 생성합니다.</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = NameForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'name.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure>

<p><br><br>템플릿에 있는 name.html 에서 아래와 같이 <code></code>  이라고 출력하면, 폼이 출력 됩니다. </p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/your-name/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<a id="more"></a>

<br>

<p><code>&lt;form&gt;&lt;/form&gt;</code> 과 <code>&lt;input&gt;</code> 태그들을 제외한, 폼에 필요한 모든 필드들과 그 속성들은 <code></code> 이 HTML 마크업 언어로 자동으로 풀려져서 표시됩니다. </p>
<br>



<br>

<h2 id="FORM-and-CSRF-CROSS-SITE-REQEUST-FORGERY"><a href="#FORM-and-CSRF-CROSS-SITE-REQEUST-FORGERY" class="headerlink" title="FORM and CSRF (CROSS SITE REQEUST FORGERY)"></a>FORM and CSRF (CROSS SITE REQEUST FORGERY)</h2><br>

<blockquote>
<p><strong>Form 과 Cross Site Request Forgery Protection</strong></p>
<p>Django 는 사이트간 요청 위조에 방어할수 있는 기능을 쉽게 사용할수 있는 형태로 제공합니다.</p>
<p>폼이 POST 로 CSRF 보호가 활성화 되어 있을때, <code>csrf_token</code> 탬플릿 테그를 위의 예시처럼 꼭 써주어야만 합니다. </p>
<br>

<p>이 CSRF 보호 태그는, 자동으로 붙여지지 않기 때문에, 태그를 HTML 마크업에 붙여주어야 합니다. </p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>


</blockquote>
<br>

<br>

<h2 id="HTML5-와-브라우저-유효성"><a href="#HTML5-와-브라우저-유효성" class="headerlink" title="HTML5 와 브라우저 유효성"></a>HTML5 와 브라우저 유효성</h2><br>

<blockquote>
<p>*<em>인풋 타입과 브라우저 유효성 *</em></p>
<p>만약 여러분들의 폼이, URLField, EmailField 혹은 integer Field 같은 필드들을 포함하고 있으면, </p>
<p>Django 는 URL, email 그리고 숫자 HTML5 입력 타입들을 사용할것 입니다. </p>
<p>기본값으로, 브라우저들은 이런 필드들을 위해 그들만의 검증 방식을 적용할수 있고, 그것은 Django 의 유효성 검증 방식보다 더 깐간할수 있습니다. </p>
<br>

<p>이 동작을 비활성화 시키고 싶다면, form 태그 안에 novalidate 속성을 설정 하거나, </p>
<p>혹은, TextInput 과 같은 다른 widget 을 필드에 사용해 주면 됩니다. </p>
</blockquote>
<br>

<br>

<h2 id="폼의-개념"><a href="#폼의-개념" class="headerlink" title="폼의 개념"></a>폼의 개념</h2><br>

<p>Django 는 Django 폼으로 표현된 웹폼을 가지고 있을수 있습니다. </p>
<p>이 폼은 뷰로 프로세스가 되고, HTML 으로 렌더가 됩니다. </p>
<br>

<p>이것이 Django 폼을 시작하기 위해서 필요한 컨셉입니다만, form Framework 은 사용할것이 굉장히 많습니다. 위에 설명된 기본적인 동작만 잘 이해하면, 폼 시스템의 다른 기능들도 이해할 준비가 될것입니다. 그리고, 추가 기본 동작 방식에 대해서도 배울수 있습니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
        <tag>CSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 9편 - Django 에서 폼만들기 2</title>
    <url>/2020/10/06/Django-Forms-9%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-2/</url>
    <content><![CDATA[<h2 id="The-View"><a href="#The-View" class="headerlink" title="The View"></a>The View</h2><br>

<p>Django 웹사이트로 다시 전송된 폼 데이터는 뷰가 처리 합니다. </p>
<p><br>보편적으로, 폼을 발행했던 뷰가 처리합니다. 이는, 같은 로직들을 재사용하게 해줍니다. </p>
<br>

<blockquote>
<p>폼을 다루기 위해서는, </p>
<p>뷰에서 폼을 발행하려고 하는 URL 을 위해 폼을 인스턴스화 시켜주어야 합니다. </p>
</blockquote>
<br>

<p>Django 에서 폼을 다루려면, 폼을 출력할 URL 을 생각해놓고, 폼을 발행하기 전에, 폼을 인스턴스화 시켜주어야 한다는 이야기 입니다. </p>
<br>

<br>

<h2 id="폼-인스턴스화-시켜주기"><a href="#폼-인스턴스화-시켜주기" class="headerlink" title="폼 인스턴스화 시켜주기"></a>폼 인스턴스화 시켜주기</h2><br>

<br>

<p>Django 프로젝트에서, buildingaform 이라는 앱을 따로 생성해주고 <br></p>
<p>buildingaform 앱 안의 구조가 아래와 같다고 가정해 봅시다. </p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── admin.py</span><br><span class="line">├── apps.py</span><br><span class="line">├── forms.py      <span class="comment"># 이전 포스팅에서 작성한 forms.py 파일 </span></span><br><span class="line">├── __init__.py</span><br><span class="line">├── migrations</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">├── models.py</span><br><span class="line">├── tests.py</span><br><span class="line">└── views.py     <span class="comment"># 전달된 폼데이터를 처리 혹은 폼을 인스턴스화</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>forms.py</code>  파일이 생성되있는것을 확인할수 있고. <code>views.py</code> 가 전달된 폼 데이터를 처리 하거나, 폼을 인스턴스화 합니다. </p>
<br>

<blockquote>
<p><code>views.py</code> 파일을 간단하게 살펴보자면, </p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect </span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> NameForm </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>: </span><br><span class="line">        <span class="comment"># 요청이, POST 라면, form 인스턴스를 아래와 같이 생성해줍니다.</span></span><br><span class="line">        form = NameForm(request.POST)</span><br><span class="line">        <span class="comment"># 유효한 데이터인지 검사하기 위해, is_valid 메서드를 사용해 줍니다. </span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># form.cleaned_data 안에 있는 데이터를 요구사항에 맞게 처리할 로직을 작성합니다 </span></span><br><span class="line">            <span class="comment"># ..</span></span><br><span class="line">            <span class="comment"># 새로운 URL 로 리다이렉트 시켜줍니다 </span></span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/thanks/'</span>)</span><br><span class="line">    <span class="comment"># 만약, GET 이나 다른 method 의 요청을 받으면, 비어있는 폼을 생성합니다 </span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        form = NameForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'name.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="Views-py-에서-폼을-처리하는-포인트"><a href="#Views-py-에서-폼을-처리하는-포인트" class="headerlink" title="Views.py 에서 폼을 처리하는 포인트"></a>Views.py 에서 폼을 처리하는 포인트</h2><br>

<ul>
<li><p><strong>GET 요청으로 이 뷰에 요청이 들어오면</strong> </p>
<p>해당 뷰는 비어있는 폼 인스턴스를 생성하고, 폼이 렌더될 템플릿 컨텍스트에 넣어놓습니다. 이것은, 우리가 처음 폼이 존재하는 URL 에 방문하였을때 예상할수 있는 일입니다. 비어있는 폼 인스턴스를 생성하였기 때문에, 비어있는 폼이 화면에 출력 됩니다. <br></p>
</li>
<li><p><strong>POST 요청으로 사용자가 폼을 제출 하면</strong>  </p>
<p>해당 뷰는, 또다시 폼 인스턴스를 생성하는데, 요청으로부터 들어온 데이터를 채워줍니다 <code>form=NameForm(request.POST)</code>. 이를 두고, 데이터를 폼에 묶어준다고 표현합니다. <br></p>
</li>
<li><p><strong><code>is_valid()</code> 메서드를 호출 합니다</strong> </p>
<p> <code>is_valid()</code> 를 호출하였을때, True 가 반환되지 않는다면 (즉 False 가 반환될때), 폼과 함께 템플릿으로 다시 돌아갑니다. 이렇게 다시 폼이 출력되는 화면으로 돌아갈때에는, 비어 있는 폼이 아닐수 있습니다. 이전에 제출된 데이터로 채워져 있을것입니다. 따라서, 이전에 제출된 데이터들을 요구사항에 따라 수정 혹은 고쳐줄수 있습니다.  <br></p>
</li>
<li><p><strong>만약 <code>is_valid()</code> 가 True 라면</strong> </p>
<p>유효한 Form data  들을 <code>cleaned_data</code> 속성에서 찾을수 있을것입니다. 이 <code>cleaned_data</code> 속성 안에 드렁있는 데이터를 사용하여, 데이터베이스를 업데이트 하거나, 혹은 다른 처리과정을 HTTP redirect 를 하기전에 수행할수 있습니다.<br></p>
</li>
</ul>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 8편 - Django 에서 폼만들기 1</title>
    <url>/2020/10/05/Django-Forms-8%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-1/</url>
    <content><![CDATA[<h2 id="The-Form-Class"><a href="#The-Form-Class" class="headerlink" title="The Form Class"></a>The Form Class</h2><br>

<p>우리는 이미 우리가 필요한 HTML 폼이 어떻게 보여질지 알고 있습니다. </p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/your-name/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"your_name"</span>&gt;</span>Your name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"your_name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"your_name"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; current_name &#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">values</span>=<span class="string">"OK"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p>해당 폼을 Django 에서 사용하기 위한 시작점은 아래와 같습니다. <br></p>
<p>앱 안에서 사용될 Django 폼을 만드려면, </p>
<br>

<h2 id="forms-py"><a href="#forms-py" class="headerlink" title="forms.py"></a>forms.py</h2><br>

<p>해당 앱안에  forms.py 파일을 만들어 줍니다. 그리고 아래와 같이 작성해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">	your_name = forms.CharField(label=<span class="string">"Your name"</span>, max_length=<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>이 폼 클래스는, 하나의 필드 <code>your_name</code> 을 가진 하나의 폼 클래스를 정의합니다. </p>
<br>

<p>폼 클래스의 필드에서 우리는, 사람에게 친숙한 레이블을 필드에 적용해 주었씁니다 (이 경우에는, 우리가 지정한 label 의 경우 우리가 빠트렸어도 자동으로 생성되었을 것이긴 합니다)</p>
<br>

<p>필드의 최대 허용 길이는 max_length 로 정의 됩니다. 이것은 두가지 일을 합니다. </p>
<p><br><a id="more"></a></p>
<br>

<ul>
<li>max_length=100 으로 HTML <code>&lt;input&gt;</code> 태그에 지정하여, 브라우저가 사용자가 해당길이 이상으로 입력하는것을 방지 합니다. </li>
<li>또한, Django 가 폼을 브라우저에서 다시 받을때에, 데이터의 길이에 대한 유효성을 체크 할겁니다 </li>
</ul>
<br>



<br>

<h2 id="is-valid-메서드"><a href="#is-valid-메서드" class="headerlink" title="is_valid() 메서드"></a><code>is_valid()</code> 메서드</h2><br>

<blockquote>
<p><strong>하나의 Form 인스턴스는 is_valid() 메서드를 가지고 있습니다</strong> </p>
<p>이 메서드는, 폼안에 있는 모든 필드의 검증 루틴을 실행합니다 </p>
<p>이 메서드가 호출 되었을때, 모든 필드가 유효한 데이터를 가지고 있는 경우,</p>
<ul>
<li>True   를 리턴합니다 </li>
<li>그리고, 폼의 데이터를 cleaned_data 속성에 넣어놓습니다 </li>
</ul>
</blockquote>
<br>

<p>Django 폼 클래스 전체가 처음으로 브라우저에 렌더링 될때에는, 아래와 같이 보일겁니다.  </p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"your_name"</span>&gt;</span>Your name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"your_name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"your_name"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">required</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>주의할점은, <code>&lt;form&gt;</code> 태그 혹은 <code>submit</code> 버튼은 포함되지 않는다는것을 숙지해야 합니다. 이런것들은 우리가 스스로 템플릿에 넣어줘야 합니다. </p>
<br>

<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 7편 - 필요한 작업들</title>
    <url>/2020/10/05/Django-Forms-7%ED%8E%B8-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9E%91%EC%97%85%EB%93%A4/</url>
    <content><![CDATA[<h2 id="The-work-that-needs-to-be-done"><a href="#The-work-that-needs-to-be-done" class="headerlink" title="The work that needs to be done"></a>The work that needs to be done</h2><br>

<p>여러분들이 사용자의 이름을 얻기위해 필요한 간단한 폼을, 웹사이트에 생성하고 싶다고 가정해 봅시다. </p>
<p>여러분들은 아마 아래와 같은 코드를, 여러분들의 템플릿 안에 필요로 할것 입니다. </p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/your-name/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"your_name"</span>&gt;</span>Your name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"your_name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"your_name"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; current_name &#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">values</span>=<span class="string">"OK"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p>위의 간단한 폼을 잠시 둘러보자면, </p>
<br>

<ol>
<li>브라우저에게 POST 메서드를 사용하여, 폼 데이터를 <code>/your-name/URL</code>  에 반환하라고 얘기합니다 </li>
<li><code>Your name</code> 으로 레이블 되고, <code>OK</code> 가 쓰여진 버튼을 출력합니다 </li>
<li>만약에 template 에 전달된 context 에 <code>current_name</code>  이라는 변수를 가지고 있다면, <code>your_name</code> 필드를 미리 채우는데에 사용될것입니다. </li>
</ol>
<br>

<p>위의 HTML 폼을 가지고 있는 템플릿을 렌더해줄 뷰가 필요할것 입니다. 그리고, 그 뷰는 current_name 필드를 적절하게 제공해줄수 있습니다.  </p>
<br>

<h2 id="폼이-제출될때"><a href="#폼이-제출될때" class="headerlink" title="폼이 제출될때"></a>폼이 제출될때</h2><br>

<p>폼이 제출 될때에는, 폼 데이터를 가지고 있는 POST 요청이 서버에 보내집니다. </p>
<br>

<p>요청이 보내졌을때에, <code>/your-name/</code> URL 과 상응하는 뷰도 필요할것입니다. 이 뷰는 적절한 키/값 페어들을 요청안에서 찾을것이고, 그것들을 처리해줄것 입니다. </p>
<br>

<h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><br>

<p>위의 예시는, 매우매우 간단한 폼입니다. 실전에서는, 하나의 폼이 10개 혹은 100개의 필드들을 가질수도 있고, 많은것들이 미리 채워져야 할 필요가 있을수 있습니다. </p>
<br>

<p>그렇지 않으면, 사용자가 몇번의 수정-제출 을 통해 폼의 동작이 결정될수 있습니다. </p>
<br>

<p>우리는 브라우저에서 어떠한 유효성 검사가 필요할지도 모릅니다. 심지어 폼이 제출되기 전에도 말이죠. </p>
<br>

<p>사용자들이 날짜를 달력에서 선택하는것 같이 아주 복잡한 필드들을 사용하길 원할지도 모릅니다. </p>
<br>

<p>일단, Django 가 이런것들을 위해 기본 작업을 하게 하는것이 훨씬 쉬운 길이 될수 있습니다. (직접 모든것을 구현하려면, 힘듭니다;)</p>
<br>

<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 6편 - 인스턴스화, 프로세싱, 폼 그리기</title>
    <url>/2020/10/04/Django-Forms-6%ED%8E%B8-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%ED%99%94-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8B%B1-%ED%8F%BC-%EA%B7%B8%EB%A6%AC%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="Instantiating-processing-and-rendering-forms"><a href="#Instantiating-processing-and-rendering-forms" class="headerlink" title="Instantiating, processing and rendering forms"></a>Instantiating, processing and rendering forms</h2><br>

<blockquote>
<p>Django 에서 객체를 렌더링 해줄때 우리는 보통, </p>
<br>

<ol>
<li>view 에서 객체를 확보합니다 (예, 데이터베이스에서 가져오기)</li>
<li>template 컨텍스트에 전달해 줍니다 </li>
<li>템플릿 변수들을 사용하여, HTML 마크업으로 확장 시킵니다 </li>
</ol>
</blockquote>
<br>

<p>템플릿에서 하나의 폼을 렌더링 해주는것은 다른 종류의 객체를 렌더링 해주는것과 거의 흡사 합니다. </p>
<br>

<p>하지만, 거기에는 몇가지 차이점들이 존재합니다. </p>
<br>

<ol>
<li>데이터를 포함하고 있지 않은 모델 인스턴스일 경우에는, 우리가 그 인스턴스를 렌더링 해서 템플릿에서 어떠한 작업을 수행하려 할때, 유용하지 않을때가 많습니다. 하지만, 폼에서는 채워지지 않은 폼을 렌더 해주는것에 완벽한 의미가 있습니다 - 우리는 사용자가 비어있는 폼을 채워주길 바라며, 이것이 폼이 하고자 하는 일입니다 </li>
<li>따라서, 우리가 뷰에서 모델 인스턴스를 다룰때에, 우리는 보통 데이터베이스에서 조회해 옵니다만, 폼을 다룰때에는, 뷰에서 폼을 인스턴스화 시켜주면 됩니다. </li>
</ol>
<br>

<h2 id="폼-인스턴스화"><a href="#폼-인스턴스화" class="headerlink" title="폼 인스턴스화"></a>폼 인스턴스화</h2><br>

<p>하나의 폼을 인스턴스화 할때에는, 우리는 폼을 비어있게 할것인지 혹은 미리 채워놓을것인지 선택할수 있습니다. </p>
<br>

<p>예를들면, 폼에 채울 데이터는 아래와 같습니다. </p>
<br>

<br>

<ul>
<li>저장된 모델 인스턴스에서부터 온 데이터 </li>
<li>다른 소스들에서 합친 데이터 </li>
<li>이전 HTML 폼 제출에서 받은 데이터 </li>
</ul>
<br>

<p>이전 HTML 폼 제출에서 받은 데이터가 흥미로운 부분인데, 이것은 사용자들이 단순히 웹사이트를 읽기만 하는것이 아니라, 정보를 역으로 보낼수 있게 해주기 때문에 흥미롭습니다. </p>
<br>

<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 5편 - Django Form Class</title>
    <url>/2020/10/03/Django-Forms-5%ED%8E%B8-Django-Form-Class/</url>
    <content><![CDATA[<h2 id="Django-Form-Class"><a href="#Django-Form-Class" class="headerlink" title="Django Form Class"></a>Django Form Class</h2><br>

<h3 id="Forms-in-Django"><a href="#Forms-in-Django" class="headerlink" title="Forms in Django"></a>Forms in Django</h3><br>

<p>우리는 HTML 폼에 대해서 간단히 설명 했습니다.  하지만, <code>&lt;form&gt;</code> HTML 태그는 단지 필요한 도구일뿐입니다. </p>
<br>

<p>웹 어플리케이션의 맥락에서, </p>
<br>

<blockquote>
<p>form 은 HTML <code>&lt;form&gt;</code> 테그를 가르키거나, </p>
<p>혹은, 그것을 생성하는 Django Form, </p>
<p>또는, 제출되었을때 반환되는 구조화된 데이터 </p>
<p>또는, 이 모든 부분들의 end-to-end 동작의 집합들이라고 말할수 있습니다. </p>
</blockquote>
<br>

<h2 id="Django-Form-Class-1"><a href="#Django-Form-Class-1" class="headerlink" title="Django Form Class"></a>Django Form Class</h2><br>

<p>이 컴포넌트들의 시스템의 심장은 Django 의 Form Class 입니다. </p>
<p><br>매우 같은 방식으로, Django 모델이 객체의 구조, 동작 그리고 어떻게 표시가 되어야 하는지에 대해서 논리적인 묘사를 하듯이, </p>
<br>

<blockquote>
<p>Form 클래스는 Form 을 묘사하고, </p>
<p>어떻게 작동하고 나타나야 하는지에 대해 결정합니다. </p>
</blockquote>
<br>

<br>

<p>모델 클래스의 필드들이 데이터베이스 필드들을 가르키고 매핑되는것과 비슷하게도, </p>
<br>

<p>폼 클래스의 필드들은 HTML form <code>&lt;input&gt;</code> 요소와 매핑 됩니다 (ModelForm 은 모델 클래스의 필드들을 HTML form <code>&lt;input&gt;</code> 요소를 Form 을 통해서 매핑 합니다.)</p>
<br>

<br>

<blockquote>
<p>폼의 필드들은 그들 스스로 클래스들입니다. </p>
<p>폼이 제출될때, 데이터를 관리하고 유효성 검사를 수행합니다. </p>
</blockquote>
<br>

<p>DateField 와 FileField 는 매우 다른 종류의 데이터와 그 데이터 들과 같이 해야만 하는 다른 일들을 다룹니다. </p>
<br>

<p>폼 필드는 브라우저에서 사용자에게 HTML widget 으로 표시됩니다. </p>
<p>각 필드 타입들은 적절한 기본 widget class 들을 가지고 있지만, 필요할때에는 override 되서 사용될수 있습니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 4편 - Form 에 대한 Django 의 역할</title>
    <url>/2020/10/02/Django-Forms-4%ED%8E%B8-Form-%EC%97%90-%EB%8C%80%ED%95%9C-Django-%EC%9D%98-%EC%97%AD%ED%95%A0/</url>
    <content><![CDATA[<h2 id="Django’s-role-in-forms"><a href="#Django’s-role-in-forms" class="headerlink" title="Django’s role in forms"></a>Django’s role in forms</h2><br>

<p>폼을 다루는것은 복잡한 일입니다. </p>
<br>

<p>Django 의 어드민을 생각해보면, </p>
<br>

<p>서로 다른 종류의 데이터들의 많은 항목들이 폼안에 출력되도록 준비 되어야 하고, </p>
<p><br>HTML 로 렌더링 되어야하고, 편리한 인터페이스를 사용해서 편집되어야 하고, 서버로 반환되어야 하고, 유효성 검사와 정리가 되어야 하고, 그리고 나서도 추후 처리를 위해 저장 혹은 전달 되어야 합니다. </p>
<br>

<p>Django 의 form 기능은, 이 복잡한 일의 상당한 부분들을 간소화 시키고 자동화 시킵니다. </p>
<br>

<p>또한, Django 에서 폼은 대부분의 프로그래머들이 자신들이 코드를 작성한것만큼 안전하게 작동합니다. </p>
<br>

<h2 id="Django-Form-이-다루는-영역"><a href="#Django-Form-이-다루는-영역" class="headerlink" title="Django Form 이 다루는 영역"></a>Django Form 이 다루는 영역</h2><br>

<ol>
<li>데이터를 준비하고 재구조화 하여, 렌더할 준비 </li>
<li>데이터를 위한 HTML 폼을 생성 </li>
<li>클라이언트가 제출한 폼들과 데이터를 받는 부분 </li>
<li>받은 데이터를 처리 </li>
</ol>
<br>

<p>이 모든것들을 수동으로 수행하는 코드를 작성하는것도 가능하지만, </p>
<p><br>django 는 여러분들을 위해 모든것들을 처리할 수 있습니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 3편 - GET and POST</title>
    <url>/2020/10/02/Django-Forms-3%ED%8E%B8-GET-and-POST/</url>
    <content><![CDATA[<h2 id="GET-vs-POST-Method"><a href="#GET-vs-POST-Method" class="headerlink" title="GET vs POST Method"></a>GET vs POST Method</h2><br>

<blockquote>
<p>GET 과 POST 는 </p>
<p>Form 을 다룰때 쓸수 있는 유일한 HTTP Method 입니다. </p>
</blockquote>
<br>

<p>Django 의 로그인 폼은 POST 메서드를 사용하여 반환 되고, </p>
<br>

<p>브라우저는 폼 데이터들을 모아서, 전송을 위한 인코딩을 합니다. 인코딩을 한뒤에 서버로 보낸다음 서버에서 응답을 받습니다. </p>
<br>

<h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><br>

<p>POST 와 비교했을때, GET 메서드는, </p>
<br>

<blockquote>
<p>제출된 데이터를 문자열로 모으고, </p>
<p>모아진 문자열들을 URL 을 만들때 사용합니다. </p>
<br>

<p>URL 은 데이터가 전송되어야만하는 주소를 가지고 있고, </p>
<p>데이터 키 와 값을 가지고 있습니다. </p>
</blockquote>
<br>

<h2 id="GET-과-POST-의-다른-사용-목적"><a href="#GET-과-POST-의-다른-사용-목적" class="headerlink" title="GET  과 POST  의 다른 사용 목적"></a>GET  과 POST  의 다른 사용 목적</h2><br>

<p>시스템의 상태를 바꾸기 위해서 사용되는 요청들 같은 경우, </p>
<p><br>예를들어, 데이터베이스에 어떠한 변경을 만들어주는 요청들은 POST 를 사용해야 합니다. </p>
<br>

<blockquote>
<p>*<em>POST 를 사용해야 할때 *</em></p>
<p>시스템의 상태를 바꾸기 위한 요청을 받을때, </p>
<p>예) 데이터베이스에 변경 사항들을 만들어주는 요청을 다룰때 </p>
<br>

<p><strong>GET을 사용해야 할때</strong></p>
<p>GET 은 시스템의 상태에 영향을 주지 않는 요청을 처리할때만 사용되어야 합니다 </p>
</blockquote>
<br>

<br>

<h2 id="GET-의-위험성"><a href="#GET-의-위험성" class="headerlink" title="GET 의 위험성"></a>GET 의 위험성</h2><br>

<p>GET 메서드는, 폼에서 입력된 데이터를 받아서 URL 로 만들어 줍니다. </p>
<br>

<p>따라서, GET은 패스워드 폼 사용에는 적합하지 않습니다. 왜냐하면, 입력된 패스워드가 URL 에 보여지게 될것이기 때문입니다. 그리고, 브라우저 히스토리와 서버 로그에 순수 텍스트로 나타나게 될겁니다. </p>
<p><br>보안상 문제가 생기겠죠? </p>
<br>

<br>

<p>또한, 큰 데이터 양이나, 이미지 같은 이진수 데이터에도 적합하지 않습니다. </p>
<br>

<blockquote>
<p>GET 요청을 어드민 폼에 사용하는 웹 어플리케이션은 보안상 아주 위험합니다. </p>
<br>

<p>공격자들은, 폼의 요청을 조작하여 시스템의 아주 민감한 부분에 접근할수 있습니다. </p>
<p>Django 의 CSRF protection 같은, 다른 보호 방법과 같이 쓰여지는 POST 의 경우, 공격자들의 접근을 좀더 관리 할수 있습니다. </p>
</blockquote>
<p><br><br></p>
<h2 id="GET-을-사용하면-좋을때"><a href="#GET-을-사용하면-좋을때" class="headerlink" title="GET 을 사용하면 좋을때"></a>GET 을 사용하면 좋을때</h2><br>

<blockquote>
<p><strong>GET 을 사용하면 좋을때</strong></p>
<p>GET Method 는, 웹 검색 폼 같은것에 사용하기 적합합니다 </p>
<p>왜냐하면, GET 요청으로 표현되는 URL 들은 쉽게 북마크 될수도 있고, </p>
<p>쉽게 공유될수 있으면서, 쉽게 다시 제출될수 있습니다. </p>
</blockquote>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
        <tag>GET</tag>
        <tag>POST</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 2편 - HTML FORMS</title>
    <url>/2020/10/01/Django-Forms-2%ED%8E%B8-HTML-FORMS/</url>
    <content><![CDATA[<h2 id="HTML-FORMS"><a href="#HTML-FORMS" class="headerlink" title="HTML FORMS"></a>HTML FORMS</h2><br>

<p>HTML 에서 form 은 <code>&lt;form&gt;</code> … <code>&lt;/form&gt;</code> 안에 있는 요소들의 집합입니다. </p>
<p><br>이는 방문자들이 text 를 입력하고, 옵션을 선택하고, 객체들을 관리하고 혹은 제어하게 만들어 줍니다. </p>
<p><br>그리고 나서, 해당 정보를 다시 서버로 보내줄수도 있습니다. </p>
<br>

<p>이러한 몇가지 폼 인터페이스 요소들은 (예, text input, 혹은 checkboxes) HTML 자체에 내장 되어 있습니다만. 다른것들은 훨씬 더 복잡합니다. 예를들면, 보통 JavaScript 와 CSS 그리고  HTML 을 사용하여 날짜선택 팝업 혹은 슬라이더, 그리고 제어를 조종하는 <code>&lt;input&gt;</code> 요소들이 그렇습니다. </p>
<br>

<br>

<h2 id="Form-이-지정해줘야할-2가지"><a href="#Form-이-지정해줘야할-2가지" class="headerlink" title="Form 이 지정해줘야할 2가지"></a>Form 이 지정해줘야할 2가지</h2><br>

<p>form 은 대부분 아래 두가지를 지정해주어야 합니다. </p>
<br>



<ol>
<li>where?  사용자가 입력한 데이터가 어디로 반환 되어야 하는지 </li>
<li>how? 어떠한 <code>HTTP Method</code> 로 데이터가 반환 되어야 하는지 </li>
</ol>
<br>

<p>예시를 들자면, Django Admin 의 로그인 폼은 몇가지 아래의 <code>&lt;input&gt;</code>  요소들을 가지고 있습니다. </p>
<br> 

<ol>
<li><p>username 을 위한  <code>type=&quot;text&quot;</code> 라는 것이고, </p>
</li>
<li><p>다른 하나는, password 를 위한 input </p>
</li>
<li><p>마지막으로, 로그인을 진행하는 버튼을 위한 type=”submit” 을 가지고 있습니다. </p>
</li>
</ol>
<br>

<p>그리고, 어드민에는 Django 가 입력값을 받은 다음에 무엇을 해야하는지 결정하기 위해, 사용자가 볼수 없는 숨겨진 텍스트 필드들도 존재합니다. </p>
<br>

<p>또한, 브라우저에 폼 데이터가 어떤 URL 로 보내져야 하는지, <code>&lt;form&gt;</code>의 action 속성에다가 URL 을 지정해 줍니다 <code>/admin/</code>. 그리고, 폼 데이터는, method 속성에 지정된 HTTP 동작을 통해서 보내집니다 (예, POST)</p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Log in"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<p>위 요소가 실행되면, 데이터는 /admin/ 에 반환됩니다. </p>
<br>



]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Forms 1편 - FORM 으로 작업하기</title>
    <url>/2020/10/01/Django-Forms-1%ED%8E%B8-FORM-%EC%9C%BC%EB%A1%9C-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="Working-with-Forms"><a href="#Working-with-Forms" class="headerlink" title="Working with Forms"></a>Working with Forms</h2><br>

<p>Django 의 Form에 대해 공식문서를 읽으면서 내용을 정리합니다.  </p>
<br>

<blockquote>
<p>Django 공식문서에서 Form 부분은, </p>
<p>web forms 에 대한 기본과, Django 에서 어떻게 Form 들이 다루어 지는지 소개합니다. </p>
<br>

<p>특정 부분에 대한 좀 더 자세한 디테일을 위해서는, </p>
<p><code>The Forms API</code>, <code>Form Fields</code> 그리고 <code>Form and field validation</code> 문서들을 보면 자세히 알수 있습니다. </p>
</blockquote>
<br>

<p>여러분들의 웹사이트와 어플리케이션이 단순히 컨텐츠만 발행하고, 방문자들한테서 input 을 받는 사이트가 아니라면, 여러분들은 form 에 대해 이해하고 사용할 필요가 없습니다. </p>
<br>

<p>하지만, 그 반대라면, 여러분들의 웹사이트와 어플리케이션은, 단순히 컨텐츠만 발행할 뿐만 아니라, 방문자들한테서 input 을 받고, 받은 input 을 기반으로 어떠한 작업을 실행해야 할지 모릅니다. </p>
<br>

<p>이러한 경우에는, form 에 대해서 이해하고 잘 사용할 필요가 있습니다. </p>
<br>

<p>Django 는 다양한 도구들과 라이브러리를 제공하여, 당신이 form 을 만들고 사이트 방문자로부터 값을 입력 받을수 있게 도와줍니다. </p>
<br>

<p>거기에, 입력값을 처리하고 값에 반응하는 작업을 할수도 있습니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Forms</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Forms</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Elastic Beanstalk 배포 - 6</title>
    <url>/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-6/</url>
    <content><![CDATA[<h2 id="EB-CLI-로-사이트-배포하기"><a href="#EB-CLI-로-사이트-배포하기" class="headerlink" title="EB CLI 로 사이트 배포하기"></a>EB CLI 로 사이트 배포하기</h2><br>

<p>지난 포스팅까지, Elastic Beanstalk 에 배포를 위한 기본 설정과, Elastic Beanstalk 를 위한 추가 설정까지 마쳤습니다 (<code>ebextensions</code> 폴더 생성후, <code>django.config</code> 파일 생성 완료)</p>
<br>

<p>Elastic Beanstalk 에 사이트를 배포할 준비가 다 되었습니다. </p>
<br>

<p>프로젝트 디렉토리는 아래와 같은 구조로 되어 있습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  l</span><br><span class="line">total 24K</span><br><span class="line">drwxr-xr-x 4 dhkang dhkang 4.0K  9월 24 13:09 .</span><br><span class="line">drwxr-xr-x 5 dhkang dhkang 4.0K  9월 24 12:52 ..</span><br><span class="line">-rw-r--r-- 1 dhkang dhkang    0  9월 24 12:55 db.sqlite3</span><br><span class="line">drwxr-xr-x 3 dhkang dhkang 4.0K  9월 24 12:55 ebdjango</span><br><span class="line">drwxr-xr-x 2 dhkang dhkang 4.0K  9월 24 13:12 .ebextensions</span><br><span class="line">-rwxr-xr-x 1 dhkang dhkang  540  9월 24 12:52 manage.py</span><br><span class="line">-rw-r--r-- 1 dhkang dhkang   27  9월 24 13:06 requirements.txt</span><br></pre></td></tr></table></figure>



<br>

<p>자 이제, 어플리케이션 환경을 생성하고, 설정된 어플리케이션을, Elastic Beanstalk 로 배포합니다. </p>
<br>

<blockquote>
<p>EB CLI 를 사용하여, 배포하기 위해 아래 순서대로 진행 해 봅니다 </p>
</blockquote>
<br>

<a id="more"></a>



<br>

<h2 id="eb-init-으로-EB-CLI-레포지토리-시작하기"><a href="#eb-init-으로-EB-CLI-레포지토리-시작하기" class="headerlink" title="eb init 으로 EB CLI 레포지토리 시작하기"></a><code>eb init</code> 으로 EB CLI 레포지토리 시작하기</h2><br>

<p>로컬 컴퓨터의 프로젝트 폴더에서, 아래 명령어를 실행하여 EB CLI 레포지토리를 시작해 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  eb init -i -p python-3.6 django-tutorial</span><br></pre></td></tr></table></figure>

<br>

<p><code>-i</code> 옵션을 사용하여, 지역을 선택할수 있습니다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  eb init -i -p python-3.6 django-tutorial</span><br><span class="line"></span><br><span class="line">Select a default region</span><br><span class="line">1) us-east-1 : US East (N. Virginia)</span><br><span class="line">2) us-west-1 : US West (N. California)</span><br><span class="line">3) us-west-2 : US West (Oregon)</span><br><span class="line">4) eu-west-1 : EU (Ireland)</span><br><span class="line">5) eu-central-1 : EU (Frankfurt)</span><br><span class="line">6) ap-south-1 : Asia Pacific (Mumbai)</span><br><span class="line">7) ap-southeast-1 : Asia Pacific (Singapore)</span><br><span class="line">8) ap-southeast-2 : Asia Pacific (Sydney)</span><br><span class="line">9) ap-northeast-1 : Asia Pacific (Tokyo)</span><br><span class="line"></span><br><span class="line">(default is 3): 8</span><br><span class="line"></span><br><span class="line">Application django-tutorial has been created.</span><br><span class="line">Do you want to <span class="built_in">set</span> up SSH <span class="keyword">for</span> your instances?</span><br><span class="line">(Y/n): Y</span><br><span class="line"></span><br><span class="line">Select a keypair.</span><br><span class="line">1) elastic_beanstalk</span><br><span class="line">2) [ Create new KeyPair ]</span><br></pre></td></tr></table></figure>

<br>

<p>2번을 눌러줘 봅니다. </p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Select a keypair.</span><br><span class="line">1) aws-eb</span><br><span class="line">2) [ Create new KeyPair ]</span><br><span class="line">(default is 1): 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Type a keypair name.</span><br><span class="line">(Default is aws-eb2): </span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/werwre/.ssh/aws-eb.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/dfdfefe/.ssh/aws-eb.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:dfeg+3ih82hi2hkfn292/12323dfsdf aws-eb</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|       .abc      |</span></span><br><span class="line"><span class="string">|    44455.o+.    |</span></span><br><span class="line"><span class="string">|    ##.o+o .23   |</span></span><br><span class="line"><span class="string">|    #@$.So. .    |</span></span><br><span class="line"><span class="string">|     # + *o..    |</span></span><br><span class="line"><span class="string">|  E!@#@1###.+    |</span></span><br><span class="line"><span class="string">| .o*+@#!$!.=o#   |</span></span><br><span class="line"><span class="string">|  #######+=.o#.  |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">WARNING: Uploaded SSH public key for "aws-eb" into EC2 for region ap-southeast-2.</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="eb-create-를-사용하여-환경을-생성"><a href="#eb-create-를-사용하여-환경을-생성" class="headerlink" title="eb create 를 사용하여 환경을 생성"></a>eb create 를 사용하여 환경을 생성</h2><br>

<p><code>eb create</code> 명령어를 사용하여, 배포 환경을 생성해 줍니다. </p>
<p>환경명은 <code>django-env</code> 입니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  eb create django-env</span><br></pre></td></tr></table></figure>

<br>

<p>시간이 좀 걸리는데, 작업을 다 마치고 나면, 아래와 같이 환경이 생성된것을 확인할수 있습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">g-stack-AWSEBCloudwatchAlarmHigh-1GEUR7I1T33QF</span><br><span class="line">2020-09-24 08:00:08    INFO    Created CloudWatch alarm named: awseb<span class="_">-e</span>-cizji5shhg-stack-AWSEBCloudwatchAlarmLow-6M9MHE521DWB</span><br><span class="line">2020-09-24 08:00:36    INFO    Application available at django-env.eba-taamyy5q.ap-southeast-2.elasticbeanstalk.com.</span><br><span class="line">2020-09-24 08:00:36    INFO    Successfully launched environment: django-env</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="eb-status-명령어로-도메인-명을-확인"><a href="#eb-status-명령어로-도메인-명을-확인" class="headerlink" title="eb status 명령어로 도메인 명을 확인"></a>eb status 명령어로 도메인 명을 확인</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  eb status</span><br><span class="line">Environment details <span class="keyword">for</span>: django-env</span><br><span class="line">  Application name: django-tutorial</span><br><span class="line">  Region: ap-southeast-2</span><br><span class="line">  Deployed Version: app-200924_165824</span><br><span class="line">  Environment ID: e-cizji5shhg</span><br><span class="line">  Platform: arn:aws:elasticbeanstalk:ap-southeast-2::platform/Python 3.6 running on 64bit Amazon Linux/2.9.14</span><br><span class="line">  Tier: WebServer-Standard-1.0</span><br><span class="line">  CNAME: django-env.eba-taamyy5q.ap-southeast-2.elasticbeanstalk.com</span><br><span class="line">  Updated: 2020-09-24 08:00:36.586000+00:00</span><br><span class="line">  Status: Ready</span><br><span class="line">  Health: Green</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="Django-settings-py-파일-수정하기"><a href="#Django-settings-py-파일-수정하기" class="headerlink" title="Django settings.py 파일 수정하기"></a>Django settings.py 파일 수정하기</h2><br>

<p>Django 앱의 settings.py 파일 안에, <code>ALLOWED_HOSTS</code>에, CNAME 으로 표시된 도메인명을 넣어줍니다.  </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># SECURITY WARNING: don't run with debug turned on in production!</span></span><br><span class="line">DEBUG = True</span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'django-env.eba-taamyy5q.ap-southeast-2.elasticbeanstalk.com</span></span><br><span class="line"><span class="string">'</span>]</span><br></pre></td></tr></table></figure>

<br>

<h2 id="eb-deploy-로-배포-진행"><a href="#eb-deploy-로-배포-진행" class="headerlink" title="eb deploy 로 배포 진행"></a><code>eb deploy</code> 로 배포 진행</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  eb deploy</span><br><span class="line">Creating application version archive <span class="string">"app-200924_170655"</span>.</span><br><span class="line">Uploading django-tutorial/app-200924_170655.zip to S3. This may take a <span class="keyword">while</span>.</span><br><span class="line">Upload Complete.</span><br><span class="line">2020-09-24 08:06:56    INFO    Environment update is starting.      </span><br><span class="line">2020-09-24 08:07:36    INFO    Deploying new version to instance(s).</span><br><span class="line"> -- Events -- (safe to Ctrl+C) Use <span class="string">"eb abort"</span> to cancel the <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>

<p><br><br><br></p>
<h2 id="eb-open-명령어를-사용하여-웹사이트-실행"><a href="#eb-open-명령어를-사용하여-웹사이트-실행" class="headerlink" title="eb open 명령어를 사용하여, 웹사이트 실행"></a><code>eb open</code> 명령어를 사용하여, 웹사이트 실행</h2><br>

<p><code>eb open</code> 명령어를 사용하여, 사이트를 열어봅니다. </p>
<br>

<p>터미널에서 명령어를 실행하면, 자동으로 브라우저가 열리고. Django 앱이 실행됩니다. <br></p>
<br>

<p>아래와 같은 화면을 보면, 성공입니다.</p>
<img src="/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-6/image.png" class="">]]></content>
      <categories>
        <category>AWS</category>
        <category>Elastic Beanstalk</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>Elastic Beanstalk</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Elastic Beanstalk 배포 - 5</title>
    <url>/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-5/</url>
    <content><![CDATA[<h2 id="Elastic-Beanstalk-를-위한-설정"><a href="#Elastic-Beanstalk-를-위한-설정" class="headerlink" title="Elastic Beanstalk 를 위한 설정"></a>Elastic Beanstalk 를 위한 설정</h2><br>

<p>지난 포스팅까지, django2.1.1 기반의 django 프로젝트를 하나 생성해 주었습니다. </p>
<p><br>아무것도 수행하지 않는 어플리케이션이지만, 이 간단한 어플리케이션을 Elastic Beanstalk 에 배포하기 위해서는, 아래와 같은 몇가지 설정들을 해주어야 합니다. </p>
<p><br><br></p>
<ol>
<li>requirements.txt 파일 생성 </li>
<li>.ebextensions 폴더 생성후, 그 안에 django.config 파일 작성  </li>
</ol>
<br>

<br>

<a id="more"></a>

<h3 id="requirements-txt-파일-생성"><a href="#requirements-txt-파일-생성" class="headerlink" title="requirements.txt 파일 생성"></a>requirements.txt 파일 생성</h3><br>

<p><code>pip freeze &gt; requirements.txt</code> 명령어를 통해, requirements.txt 파일을 생성해 줍니다. </p>
<br>

<p>requirements.txt 는 어플리케이션이 작동하기 위한 패키지들의 목록을 담고 있습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  pip freeze &gt; requirements.txt</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  ls</span><br><span class="line">db.sqlite3  ebdjango  manage.py  requirements.txt</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>Elastic Beanstalk 는 requirements.txt 파일을 사용하여, </p>
<p>어떤 패키지들이 EC2 인스턴스에 설치 되어야 하는지 결정합니다. </p>
</blockquote>
<br>

<h3 id="ebextensions-라는-디렉토리-만들어-주기"><a href="#ebextensions-라는-디렉토리-만들어-주기" class="headerlink" title=".ebextensions 라는 디렉토리 만들어 주기"></a><code>.ebextensions</code> 라는 디렉토리 만들어 주기</h3><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  mkdir .ebextensions</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  ls</span><br><span class="line">db.sqlite3  ebdjango  manage.py  requirements.txt</span><br></pre></td></tr></table></figure>

<br>

<p>디렉토리를 만들었으면, 해당 디렉토리로 이동후에, <code>django.config</code> 파일을 생성해 줍니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  <span class="built_in">cd</span> .ebextensions </span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango/.ebextensions  ls</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango/.ebextensions  touch django.config</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango/.ebextensions  ls</span><br><span class="line">django.config</span><br></pre></td></tr></table></figure>

<br>

<p>파일이 생성되었으면, 아래 내용을 <code>django.config</code>파일에 추가해 줍니다. </p>
<br>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">option_settings:</span></span><br><span class="line">  <span class="attr">aws:elasticbeanstalk:container:python:</span></span><br><span class="line">    <span class="attr">WSGIPath:</span> <span class="string">ebdjango/wsgi.py</span></span><br></pre></td></tr></table></figure>

<br>



<img src="/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-5/image1.png" class="">

<br>



<blockquote>
<p>이 세팅은, Elastic Beanstalk 가 여러분의 애플리케이션을 시작하기 위한 WSGI 스크립트의 위치를 지정해 줍니다. </p>
<br>

<p>이 세팅을 잘못하면, </p>
<p>배포 후에 Internal Server Error 라던지, 사이트가 표시되지 않는등의 에러를 경험할수 있습니다. </p>
</blockquote>
<br>

<p>이렇게 Elastic Beanstalk 를 위한 추가 설정을 마쳤습니다.</p>
<br>

<p><code>.ebextensions</code> 폴더를 만들고, 그안에  django.config 파일을 생성해 주면 됩니다. </p>
<br>

]]></content>
      <categories>
        <category>AWS</category>
        <category>Elastic Beanstalk</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>Elastic Beanstalk</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Elastic Beanstalk 배포 - 4</title>
    <url>/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-4/</url>
    <content><![CDATA[<h2 id="Django-프로젝트-생성하기"><a href="#Django-프로젝트-생성하기" class="headerlink" title="Django 프로젝트 생성하기"></a>Django 프로젝트 생성하기</h2><br>

<p><code>django-admin startproject ebdjango</code> 명령어를 실행하여, ebdjango 라는 프로젝트를 하나 생성해 줍니다. <br></p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  ls</span><br><span class="line">eb_env</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  django-admin startproject ebdjango</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  ls</span><br><span class="line">ebdjango  eb_env</span><br></pre></td></tr></table></figure>

<br>

<p><code>ebdjango</code>라는 폴더가 생성되고, 프로젝트가 생성된것을 확인 할수 있습니다. </p>
<br>

<a id="more"></a>

<br>

<p><code>ebdjango</code> 폴더로 이동하여, <code>python manage.py runserver</code> 명령어를 실행하고, 서버를 시작해 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  <span class="built_in">cd</span> ebdjango </span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  ls</span><br><span class="line">ebdjango  manage.py</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  python manage.py runserver</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 15 unapplied migration(s). Your project may not work properly until you apply the migrations <span class="keyword">for</span> app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run <span class="string">'python manage.py migrate'</span> to apply them.</span><br><span class="line"></span><br><span class="line">September 24, 2020 - 03:55:51</span><br><span class="line">Django version 2.1.1, using settings <span class="string">'ebdjango.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>서버를 실행한뒤에, </p>
<p><a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> 에 접속하면, 정상적으로 django 애플리케이션이 실행 되는것을 확인할수 있습니다. </p>
<br>

<img src="/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-4/image1.png" class="">

<p><br><br></p>
]]></content>
      <categories>
        <category>AWS</category>
        <category>Elastic Beanstalk</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>Elastic Beanstalk</tag>
        <tag>배포</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Elastic Beanstalk 배포 - 3</title>
    <url>/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-3/</url>
    <content><![CDATA[<h2 id="배포전-환경설정"><a href="#배포전-환경설정" class="headerlink" title="배포전 환경설정"></a>배포전 환경설정</h2><br>

<p>Elastic Beanstalk 에 Django 애플리케이션을 배포하기 위해서 필요한 환경 설정들이 몇가지 있습니다. </p>
<p><br>배포 작업을 진행하기 전에, 로컬 컴퓨터에서 배포를 위한 설정들을 하나씩 해주고. </p>
<p><br>Django 어플리케이션을 Elastic Beanstalk 에 배포하도록 할겁니다. </p>
<br>

<h2 id="AWS-Elastic-Beanstalk-주요-환경"><a href="#AWS-Elastic-Beanstalk-주요-환경" class="headerlink" title="AWS Elastic Beanstalk 주요 환경"></a>AWS Elastic Beanstalk 주요 환경</h2><br>

<ul>
<li>AWS 계정 </li>
<li>Python 3.6</li>
<li>pip </li>
<li>virtualenv</li>
<li>awsebcli </li>
<li>Django 2.1.1 </li>
</ul>
<br>

<blockquote>
<p>Django 버전은, </p>
<p>Elastic Beanstalk Python 구성 버전과 호환 되어야 합니다 </p>
<p>Django 2.2 는 Elastic Beanstalk Python 3.6 플랫폼과 호환되지 않으므로 </p>
<p>Django2.1.1 을 기반으로 한 프로젝트 실습을 진행 합니다. </p>
</blockquote>
<br>

<br>

<p><strong>파이썬 3.6 가상환경 생성 부터 진행해 봅니다 (ubuntu18.04)</strong></p>
<a id="more"></a>

<br>

<h3 id="Python-3-6-가상환경-생성"><a href="#Python-3-6-가상환경-생성" class="headerlink" title="Python 3.6 가상환경 생성"></a>Python 3.6 가상환경 생성</h3><br>

<p>실습을 위해, 로컬 컴퓨터에 Elastic_beanstalk 라는 디렉토릴를 하나 만들어 줍니다. </p>
<p><br>해당 디렉토리로 이동하여, 파이썬 가상환경 하나를 만들어 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir elastic_beanstalk </span><br><span class="line"><span class="built_in">cd</span> elastic_beanstalk</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>virtualenv 가 로컬 컴퓨터에 제대로 설치 되어 있다는 전제하에, </p>
<p>elastic_beanstalk 디렉토리 안에서 아래 명령어를 실행하여, </p>
<p>Python3.6 으로 된 가상환경을 생성해 줍니다. </p>
</blockquote>
<br>

<br>

<p>참고로, virtualenv 를 시스템에 설치하려면,</p>
<p> <code>pip install virtualenv</code> 명령어를 실행하여 설치할수 있습니다. </p>
<br>

<br>

<p>해당 디렉토리에서, <code>virtualenv -p python3.6 eb_env</code> 명령어를 실행하여, 환경명이 <code>eb_env</code>이고 Python 3.6  으로 된 가상환경을 하나 생성해 줍니다.  </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> dhkang  ~/elastic_beanstalk  virtualenv -p python3.6 eb_env                 </span><br><span class="line">  created virtual environment CPython3.6.9.final.0-64 <span class="keyword">in</span> 294ms</span><br><span class="line">  creator CPython3Posix(dest=/home/dhkang/elastic_beanstalk/eb_env, clear=False, global=False)</span><br><span class="line">  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/dhkang/.<span class="built_in">local</span>/share/virtualenv)</span><br><span class="line">    added seed packages: pip==20.2.2, setuptools==49.6.0, wheel==0.35.1</span><br><span class="line">  activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator</span><br><span class="line">  </span><br><span class="line"> dhkang  ~/elastic_beanstalk  ls</span><br><span class="line">eb_env</span><br></pre></td></tr></table></figure>

<br>

<p>환경이 생성되면, <code>eb_env</code>라는 가상환경 폴더가 생성됩니다. </p>
<br>

<blockquote>
<p>생성된 가상환경은, 해당 폴더에서, 아래 명령어를 실행하여 시작할수 있습니다. </p>
</blockquote>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">source</span> eb_env/bin/activate</span><br></pre></td></tr></table></figure>

<br>

<p>커맨드라인 맨 앞에, 가상환경명이 (eb_env) 로 표시가 된다면, 가상환경 실행이 잘 된것입니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">eb_env</span><br><span class="line"> dhkang  ~/elastic_beanstalk  <span class="built_in">source</span> eb_env/bin/activate</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk </span><br></pre></td></tr></table></figure>

<br>

<h2 id="EB-CLI-설치-awsebcli"><a href="#EB-CLI-설치-awsebcli" class="headerlink" title="EB CLI 설치 (awsebcli)"></a>EB CLI 설치 (awsebcli)</h2><br>

<p>아래 링크를 참조하여, <code>awsebcli</code> 를 시스템에 설치해 줍니다. </p>
<br>

<p><a href="https://github.com/aws/aws-elastic-beanstalk-cli-setup" target="_blank" rel="noopener">https://github.com/aws/aws-elastic-beanstalk-cli-setup</a></p>
<br>

<p>우분투 18.04 기준으로, </p>
<p>터미널에서, 아래 명령어를 실행하여, awsebcli  를 설치ㅏ기 위한 git을 클론해줍니다.<br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dhkang  ~  git <span class="built_in">clone</span> https://github.com/aws/aws-elastic-beanstalk-cli-setup.git</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">dhkang  ~  ./aws-elastic-beanstalk-cli-setup/scripts/bundled_installer</span><br></pre></td></tr></table></figure>

<br>

<p>인스톨 작업을 시작하고, 작업이 끝나면, 아래와 같은 화면이 나타납니다.<br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">***********************</span><br><span class="line">4. Creating EB wrappers</span><br><span class="line">***********************</span><br><span class="line"></span><br><span class="line">***************</span><br><span class="line">5. Finishing up</span><br><span class="line">***************</span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">    Note: To complete installation, ensure `eb` is <span class="keyword">in</span> PATH. You can ensure this by executing:</span><br><span class="line"></span><br><span class="line">    1. Bash:</span><br><span class="line"></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">'export PATH="/home/dhkang/.ebcli-virtual-env/executables:$PATH"'</span> &gt;&gt; ~/.bash_profile &amp;&amp; <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line">    2. Zsh:</span><br><span class="line"></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">'export PATH="/home/dhkang/.ebcli-virtual-env/executables:$PATH"'</span> &gt;&gt; ~/.zshenv &amp;&amp; <span class="built_in">source</span> ~/.zshenv</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    - NOTE: To complete installation, ensure `python` is <span class="keyword">in</span> PATH. You can ensure this by executing:</span><br><span class="line">   </span><br><span class="line">      1. Bash:</span><br><span class="line">   </span><br><span class="line">         <span class="built_in">echo</span> <span class="string">'export PATH=/home/dhkang/.pyenv/versions/3.7.2/bin:$PATH'</span> &gt;&gt; /home/dhkang/.bash_profile &amp;&amp; <span class="built_in">source</span> /home/dhkang/.bash_profile</span><br><span class="line">   </span><br><span class="line">      2. Zsh:</span><br><span class="line">   </span><br><span class="line">         <span class="built_in">echo</span> <span class="string">'export PATH=/home/dhkang/.pyenv/versions/3.7.2/bin:$PATH'</span> &gt;&gt; /home/dhkang/.zshrc &amp;&amp; <span class="built_in">source</span> /home/dhkang/.zshrc</span><br><span class="line"> dhkang  ~ </span><br></pre></td></tr></table></figure>

<br>

<p>인스톨을 마무리 하기 위해서, 아래 명령어들을 실행 해줍니다. (Zshell)</p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH="/home/dhkang/.ebcli-virtual-env/executables:$PATH"'</span> &gt;&gt; ~/.zshenv &amp;&amp; <span class="built_in">source</span> ~/.zshenv</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH=/home/dhkang/.pyenv/versions/3.7.2/bin:$PATH'</span> &gt;&gt; /home/dhkang/.zshrc &amp;&amp; <span class="built_in">source</span> /home/dhkang/.zshrc</span><br></pre></td></tr></table></figure>

<br>

<p>설치 확인을 위해, 터미널에서 eb 라는 명령어를 실행해 봅니다<br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> dhkang  ~  eb</span><br><span class="line">usage: eb (sub-commands ...) [options ...] &#123;arguments ...&#125;</span><br><span class="line"></span><br><span class="line">Welcome to the Elastic Beanstalk Command Line Interface (EB CLI). </span><br><span class="line">For more information on a specific <span class="built_in">command</span>, <span class="built_in">type</span> <span class="string">"eb &#123;cmd&#125; --help"</span>.</span><br><span class="line"></span><br><span class="line">commands:</span><br><span class="line">  abort        Cancels an environment update or deployment.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  --debug               toggle debug output</span><br><span class="line">  --quiet               suppress all output</span><br><span class="line">  -v, --verbose         toggle verbose output</span><br><span class="line">  --profile PROFILE     use a specific profile from your credential file</span><br><span class="line">  -r REGION, --region REGION</span><br><span class="line">                        use a specific region</span><br><span class="line">  --no-verify-ssl       don<span class="string">'t verify AWS SSL certificates</span></span><br><span class="line"><span class="string">  --version             show application/version info</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="Django-2-1-1-설치"><a href="#Django-2-1-1-설치" class="headerlink" title="Django 2.1.1 설치"></a>Django 2.1.1 설치</h2><br>

<p>아래 명령어를 실행하여, django 2.1.1 버전을 설치해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django==2.1.1</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  pip install django==2.1.1</span><br><span class="line">Collecting django==2.1.1</span><br><span class="line">  Using cached Django-2.1.1-py3-none-any.whl (7.3 MB)</span><br><span class="line">Collecting pytz</span><br><span class="line">  Using cached pytz-2020.1-py2.py3-none-any.whl (510 kB)</span><br><span class="line">Installing collected packages: pytz, django</span><br><span class="line">Successfully installed django-2.1.1 pytz-2020.1</span><br><span class="line">WARNING: You are using pip version 20.2.2; however, version 20.2.3 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'/home/dhkang/elastic_beanstalk/eb_env/bin/python -m pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  pip list</span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">Django     2.1.1</span><br><span class="line">pip        20.2.2</span><br><span class="line">pytz       2020.1</span><br><span class="line">setuptools 49.6.0</span><br><span class="line">wheel      0.35.1</span><br><span class="line">WARNING: You are using pip version 20.2.2; however, version 20.2.3 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'/home/dhkang/elastic_beanstalk/eb_env/bin/python -m pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>

<br>

<p>이정도 까지, 로컬 컴퓨터에서 Elastic Beanstalk 배포 실습을 위한 기본 환경 설정을 마쳤습니다. </p>
]]></content>
      <categories>
        <category>AWS</category>
        <category>Elastic Beanstalk</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>Elastic Beanstalk</tag>
        <tag>배포</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Elastic Beanstalk 배포 - 2</title>
    <url>/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-2/</url>
    <content><![CDATA[<h2 id="Django-애플리케이션-배포하기"><a href="#Django-애플리케이션-배포하기" class="headerlink" title="Django 애플리케이션 배포하기"></a>Django 애플리케이션 배포하기</h2><br>

<p>AWS Elastic Beanstalk 에 Django 애플리케이션을 배포하는 연습을 진행 해 보려 합니다. </p>
<p><br>우선, 배포 진행을 하기전에 알아야할 주요 환경은 아래와 같습니다. </p>
<br>

<h2 id="주요-환경"><a href="#주요-환경" class="headerlink" title="주요 환경"></a>주요 환경</h2><br>

<ul>
<li>AWS 계정 </li>
<li>Python 3.6</li>
<li>pip</li>
<li>virtualenv</li>
<li>awsebcli</li>
<li>Django2.1.1 </li>
</ul>
<br>

<blockquote>
<p>Django 버전은, </p>
<p>Elastic Beanstalk Python 구성 버전과 호환 되어야 합니다 </p>
<p>Django 2.2 는, Elastic Beanstalk Python 3.6 플랫폼과는 호환되지 않으므로, </p>
<p>Django 2.1.1 기반으로 한 프로젝트 실습을 진행 합니다. </p>
</blockquote>
<br>

<a id="more"></a> 

<br>]]></content>
      <categories>
        <category>AWS</category>
        <category>Elastic Beanstalk</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>Elastic Beanstalk</tag>
        <tag>배포</tag>
      </tags>
  </entry>
  <entry>
    <title>AWS Elastic Beanstalk 배포 - 1</title>
    <url>/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-1/</url>
    <content><![CDATA[<h2 id="AWS-Elastic-Beanstalk-로-배포하기"><a href="#AWS-Elastic-Beanstalk-로-배포하기" class="headerlink" title="AWS Elastic Beanstalk 로 배포하기"></a>AWS Elastic Beanstalk 로 배포하기</h2><br>

<p>Django 로 프로젝트를 개발한뒤에는, 아무래도 서비스를 실제 배포하여 사용할수 있습니다. </p>
<p><br>수 많은 배포 방법들이 존재하지만, 배포는 프로그래밍과는 또다른 의미로 어렵습니다. </p>
<br>

<p>특히 AWS 서비스를 다루는것만 해도 굉장히 복잡하기 때문에. Django 웹개발 공부를 진행하다가도, 배포에서 막힙니다. </p>
<br>

<p>배포에 막혀 너무 힘든 나날들을 보내다가, Elastic Beanstalk 로 배포를 시도해 보려 합니다. </p>
<br>

<br>

<h2 id="Elastic-Beanstalk-란"><a href="#Elastic-Beanstalk-란" class="headerlink" title="Elastic Beanstalk 란?"></a>Elastic Beanstalk 란?</h2><br>

<blockquote>
<p>AWS Elastic Beanstalk 는 JAVA, .NET, PHP, node.js, Python, Ruby, GO, Docker 를 사용하여, </p>
<p>Apache, Nginx, Passenger, IIS 와 같은 친숙한 서버에서 개발된 웹 애플리케이션 및 서비스를 </p>
<p>간편하게 배포하고 조정할수 있는 서비스 입니다. </p>
</blockquote>
<br>

<br>

<h2 id="Elastic-Beanstalk-의-이점"><a href="#Elastic-Beanstalk-의-이점" class="headerlink" title="Elastic Beanstalk 의 이점"></a>Elastic Beanstalk 의 이점</h2><br>

<ol>
<li><p><strong>빠르고 간편한 시작</strong> </p>
<p>AWS 에 애플리케이션을 배포하는 가장 빠르면서 간단한 방법입니다. Git 을 통해 어플리케이션을 업로드 하면, Elastic Beanstalk 가 용량 프로비져닝, 로드 밸런싱, Auto Scaling, 모니터링에 대한 배포 정보를 자동으로 처리합니다. 개발자가 배포를 위한, 인프라나 리소스를 따로 구성할 필요가 없습니다. </p>
</li>
</ol>
<br>



<ol start="2">
<li><p><strong>개발자 생산성</strong> </p>
<p>Elastic Beanstlak 는 사용자 대신 배포를 위한 인프라를 운영 및 관리 해주므로, 개발자가 서버, 데이터베이스, 로드 밸런서, 방화벽, 네트워크 등을 관리하고 구성하는데에 시간을 들이지 않고. 오롯이 코드 작성에 집중할수 있게 해줍니다.</p>
</li>
</ol>
<br>

<ol start="3">
<li><p><strong>Auto Scaling</strong></p>
<p>자동 스케일링 설정을 사용하여, 어플리케이션의 특정 요건에 따라, 자동으로 어플리케이션을 확장 및 축소 합니다. CPU 사용률 지표를 참조하여 Auto Scaling 작업을 발생 시킵니다. 이는, 어플리케이션 비용을 최소화 하면서, 높은 워크로드나, 트래픽을 처리할수 있게 해줍니다. </p>
</li>
</ol>
<br>

<ol start="4">
<li><p><strong>완벽한 리소스 제어</strong></p>
<p>EC2 인스턴스 유형과 같은 AWS 리소스를 어플리케이션에 가장 적합한 리소스로 자유롭게 선택할수 있습니다. 손쉽게 리소스, 인프라 요소 등을 제어하려면, Elastic Beanstalk 의 관리 기능을 사용하면 됩니다. </p>
</li>
</ol>
<br>

]]></content>
      <categories>
        <category>AWS</category>
        <category>Elastic Beanstalk</category>
      </categories>
      <tags>
        <tag>AWS,Elastic Beanstalk,배포</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 22편 - 패키지안 모델 정리하기</title>
    <url>/2020/08/22/Django-Models-22%ED%8E%B8-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%95%88-%EB%AA%A8%EB%8D%B8-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="Models-Organising-models-in-a-package"><a href="#Models-Organising-models-in-a-package" class="headerlink" title="Models - Organising models in a package"></a>Models - Organising models in a package</h2><h3 id="Organising-models-in-a-package"><a href="#Organising-models-in-a-package" class="headerlink" title="Organising models in a package"></a>Organising models in a package</h3><br>

<p><code>manage.py startapp</code> 커맨드는 models.py 를 포함한 어플리케이션 구조를 생성합니다. 많은 모델들을 가지고 있다면, 별도의 파일에 정리를 해두는것도 유용한 방법입니다. </p>
<br>

<p>그렇게 하기 위해서는,  models 패키지를 생성해야 합니다. </p>
<br>

<ol>
<li>models.py 를 없애고 </li>
<li>app이름/models/디렉토리 를 생성합니다 </li>
<li>app이름/models/디렉토리 안에, <code>__init__.py</code> 파일을 생성하고, 당신의 모델을 저장할 파일들을 생성합니다 </li>
<li><code>__init__.py</code> 파일에  import 해주어야 합니다 </li>
</ol>
<br>

<p>예를들어, organic.py , synthetic.py 가 모델 디렉토리 안에 있었다면, </p>
<br>

<blockquote>
<p><code>__init__.py</code> 파일에 import 해주는것을 잊지 않아야 합니다. </p>
<p><code>myapp/models/__init__.py</code></p>
</blockquote>
<br>

<a id="more"></a>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .organic <span class="keyword">import</span> Person </span><br><span class="line"><span class="keyword">from</span> .synthetic <span class="keyword">import</span> Robot</span><br></pre></td></tr></table></figure>

<br>

<p>명시적으로 각 모델을 가져오는것은, <code>from .models import *</code> 을 사용하는것보다 이점이 있습니다. </p>
<p><br>이름 공간을 어수선하게 하지 않게되고, 코드를 좀더 읽기 좋게 하고, 코드 분석 툴들을 더 유용하게 해줍니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 21편 - Multiple Inheritance</title>
    <url>/2020/08/21/Django-Models-21%ED%8E%B8-Multiple-Inheritance/</url>
    <content><![CDATA[<h2 id="Multiple-Inheritance"><a href="#Multiple-Inheritance" class="headerlink" title="Multiple Inheritance"></a>Multiple Inheritance</h2><br>

<p>파이썬에서 서브클래스를 받는것과 같이, DJango 모델은 다수의 부모 모델들을 상속 받는게 가능합니다. </p>
<p><br>하지만, 파이썬에서 일반적으로 이름짓는 방식들이 이 Django 모델 클래스에 적용된다는점을 염두해 두고 있어야 합니다 (예, 예약어들은 클래스명으로 사용할수 없음)</p>
<br>

<p>특정 이름, (예, Meta) 가 나타나는 첫번째 기본 클래스가 사용 될것입니다. 예를들면, 이것의 의미는 만약 다수의 부모 클래스들이 Meta 클래스를 하나씩 가지고 있는다면, 오직 첫번째 것만 사용이 되고, 나머지들은 무시 됩니다. </p>
<br>

<p>보편적으로 우리는, 다수의 부모 클래스로부터 상속 받을 필요가 없는 경우가 많습니다. 주 사용처는, “mix-in” 클래스들을 사용할때 유용하다는 점입니다. 특정 추가 필드를 추가하거나 “mix-in” 을 상속받는 모든 클래스에 메서드를 추가할때 유용합니다. </p>
<br>

<p>당신의 상속 구조를 가능한한 최대로 간단하고 명료하게 유지하도록 노력해야 합니다. 그래야, 특정 정보가 어디서 왔는지 알아내기 위해 고생할 필요가 없어집니다. </p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>다수의 모델에서 상속받을때, </p>
<p>공통된 id, primary key 필드를 가지고 있는 모델들로부터 상속받는것은 에러를 발생 시킬겁니다. </p>
<br>

<p>제대로 다중 상속을 사용하기 위해서는, </p>
<p>명시적으로 AutoField 를 base 모델들 안에 사용합니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    article_id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    book_id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookReview</span><span class="params">(Book, Article)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<br>

<p>혹은 AutoField 를 가지기 위해서, 공통 조상을 사용합니다. 이것은 각 부모 모델과 공통 조상 사이에 명시적으로 OneToOneField 를 사용하는것을 필요로 합니다. </p>
<br>

<p>그래야, 자식 클래스에 자동으로 생성되었거나 상속이 된 필드들 간에 충돌을 피할수 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piece</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Piece)</span>:</span></span><br><span class="line">    article_piece = models.OneToOneField(Piece, on_delete=models.CASCADE, parent_link=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(Piece)</span>:</span></span><br><span class="line">    book_piece = models.OneToOneField(Piece, on_delete=models.CASCADE, parent_link=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookReview</span><span class="params">(Book, Article)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="Field-name-“hiding”-is-not-permitted"><a href="#Field-name-“hiding”-is-not-permitted" class="headerlink" title="Field name “hiding” is not permitted"></a>Field name “hiding” is not permitted</h3><br>

<blockquote>
<p>일반 파이썬 클래스 상속에서, </p>
<p>자녀 클래스가 부모 클래스의 속성을 override 하는것이 허용됩니다.</p>
<p>하지만, Django 에서는, 모델 필드들에 허용되지 않습니다. </p>
</blockquote>
<br>

<p>만약에 Abstract 모델 베이스 클래스가 author 라는 필드를 가지고 있으면, 이 베이스 클래스를 상속받는 어떤 클래스도 author 라는 필드 혹은 Author 라는 속성을 정의할수 없습니다. </p>
<br>

<p>이런 제약은, Abstract  모델에서 상속받은 모델 필드들에는 적용되지 않습니다. 이런 경우에 필드들은 다른 필드나 값으로 override 될수 있고, field_name = None 으로 제거 될수도 있습니다. </p>
<br>

<blockquote>
<p>주의사항 </p>
<p>모델 managers 는 Abstract base 클래스들에서 상속됩니다. </p>
<p>상속된 Manager 로 참조되는 상속된 필드를 Override 하는것은 버그를 일으킬수 있습니다. </p>
</blockquote>
<br>

<blockquote>
<p>노트 </p>
<p>어떤 필드들은 모델에 추가 속성들을 정의 합니다 </p>
<p>예를들어, </p>
<p>ForeignKey 는 _id 가 필드명에 추가된 추가 속성을 정의하고, related_name 과 related_query_name 을 Foreign 모델에 정의합니다. </p>
<p>이 추가 속성들은 override 될수 없습니다. 만약에 해당 필드를 저으이하는 필드가 수정 되었거나, </p>
<p>삭제되어서 해당 추가 속성을 더이상 정의하지 않는한, 이 추가 속성들은 override 될수 없습니다. </p>
</blockquote>
<br>

<p>부모 모델안에 필드들을 overriding 하는것은, 새로운 인스턴스들을 시작하거나 직렬화 같은 영역 안에서 어려움을 초래할수 있습니다. 이런 기능들은, 일반 파이썬 클래스 상속과 같은 방식으로 처리하지 않아도 되는것입니다. 따라서, Django 모델 상속과 Python 클래스 상속의 차이점은 임의적이지 않습니다. </p>
<br>

<p>이 제약은 필드 인스턴스들인 속성에만 적용됩니다. </p>
<br>

<p>표준 파이썬 속성들은, 원한다면, override 될수 있습니다. </p>
<br>

<p>속성 이름에도 적용이 됩니다. 만약 수동으로 데이터베이스 컬럼명을 바꾸고 있다면, multi-table 상속을 위해서 같은 컬럼명을 자식 모델과 조상 모델에 나타나게 할수 있습니다. (두개의 다른 데이터베이스 테이블에 있는 컬럼들 입니다.)</p>
<br>

<p>만약, 어떤 조상 모델이던지간에, 어떠한 모델 필드를 override 한다면, django 는 FieldError 를 발생 시킵니다. </p>
<br>



]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 20편 - Model 상속 (Proxy models - 2)</title>
    <url>/2020/08/20/Django-Models-20%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Proxy-models-2/</url>
    <content><![CDATA[<h2 id="Model-Inheritance-proxy-models-2"><a href="#Model-Inheritance-proxy-models-2" class="headerlink" title="Model Inheritance proxy models - 2"></a>Model Inheritance proxy models - 2</h2><br>

<h3 id="Base-class-restrictions"><a href="#Base-class-restrictions" class="headerlink" title="Base class restrictions"></a>Base class restrictions</h3><br>

<p>프록시 모델은 하나의 모델 클래스 (abstract 가 아닌것)을 상속 받아야 합니다 </p>
<p><br>하지만, 다중의 모델 (abstract 가 아닌것)들을 상속 받을수 없습니다. </p>
<blockquote>
<p>프록시 모델은, 다른 데이터 베이스 테이블들에 존재하는 행(row) 들끼리 연결을 지원하지 않습니다. </p>
</blockquote>
<br>

<p>프록시 모델은 abstract 모델이 어떤 모델 필드도 정의하지 않는다는 전제하에, 여러개의 abstract 모델 클래스들을 상속 받을수 있습니다. </p>
<br>

<p>프록시 모델은 또한, 공통된 부모 클래스 (단, abstract 클래스가 아니여야 함)를 공유한다는 전제하에, 몇개라도 프록시 모델들을 상속 받을수 있습니다. </p>
<br>

<h3 id="Proxy-model-managers"><a href="#Proxy-model-managers" class="headerlink" title="Proxy model managers"></a>Proxy model managers</h3><br>

<p>프록시 모델에 어떤 model manager 도 지정하지 않는다면, 부모 모델의 manager 를 상속 받습니다. </p>
<br>

<p>만약 프록시 모델에 manager 를 정의 한다면, 정의된 manager 가 기본값이 됩니다. </p>
<p><br>물론, 어떤 manager 든지 부모 클래스에 정의된 manager 도 여전히 사용 가능합니다. </p>
<br>

<p>이전 포스팅에서 진행한 예시에 이어서, Person 모델의 쿼리에서 사용되는 기본 manager 를 바꿀수 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPerson</span><span class="params">(Person)</span>:</span></span><br><span class="line">    objects = NewManager()</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        proxy = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<br>

<p>만약 새로운 manager 를 기존에 존재하는 기본값을 바꾸지 않고 프록시에 추가하고 싶으면, custom manager 문서에 나와 있는 기술들을 사용해서 바꿀수 있습니다. </p>
<br>

<p>새로운 manager 를 가지고 있는 클래스를 생성하고, 기본 베이스 클래스 뒤에, 생성한 클래스를 상속 시켜 주면 됩니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 새로운 Manager 를 위한 Abstract 클래스를 생성해줍니다.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtraManagers</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    secondary = NewManager() </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPerson</span><span class="params">(Person, ExtraManagers)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        proxy = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="프록시-상속과-관리되지않은-모델의-차이점"><a href="#프록시-상속과-관리되지않은-모델의-차이점" class="headerlink" title="프록시 상속과 관리되지않은 모델의 차이점"></a>프록시 상속과 관리되지않은 모델의 차이점</h3><br>

<p>프록시 모델 상속은 Meta 클래스에 managed 속성을 사용한, 관리되지 않은 모델을 생성하는것과 비슷해 보일지 모릅니다. </p>
<br>

<p>조심스럽게 Meta.db_table 을 설정하여, 기존에 존재하는 모델의 그림자 같은 관리되지 않은 모델을 생성할수 있고, 파이썬 메서드도 추가할수 있습니다. </p>
<br>

<p>하지만, 그것은 매우 반복적이고 깨지기 쉬운 구조 입니다. 수정할때 마다, 모든 복사본들을 동기화 해야 하기 때문입니다. </p>
<br>

<p>한편으로는, 프록시 모델들은 정확하게 프록싱 하는 기존 모델의 동작 처럼 동작하게 만들어 졌습니다. 프록시 모델은 언제나 부모 모델과 동기화 되어 있습니다 (직접 필드와 메니져들을 부모에게서 상속 받기 때문).</p>
<br>

<p>보통 법칙들은 </p>
<ol>
<li>기존 모델 혹은 데이터베이스를 미러링 하고, 모든 오리지널 데이터베이스 테이블 열들을 원하지 않을때, Meta.mangled=False 를 사용해 줍니다. 이 옵션은 데이터베이스 뷰들을 모델링 할때와 Django 로 제어되지 않는 테이블들을에 유용합니다. </li>
</ol>
<ol start="2">
<li>만약 모델의 파이썬 동작만 바꾸고 싶은데, 같은 필드들을 오리지널과 같이 유지하고 싶을때, Meta.proxy=True 로 설정해 줍니다. 이 설정은, 데이터가 저장될때, 프록시 모델이 정확한 오리지널 모델 저장구조의 복사본이 됩니다.  <br></li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 20편 - Model 상속 (Proxy models - 1)</title>
    <url>/2020/08/19/Django-Models-20%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Proxy-models-1/</url>
    <content><![CDATA[<h2 id="Model-상속-Proxy-models"><a href="#Model-상속-Proxy-models" class="headerlink" title="Model 상속 (Proxy models)"></a>Model 상속 (Proxy models)</h2><br>

<h3 id="Proxy-models"><a href="#Proxy-models" class="headerlink" title="Proxy models"></a>Proxy models</h3><br>

<p>Multi-table 상속을 사용할때에는, 새로운 데이터베이스 테이블이 각 서브 클래스 마다 생성 됩니다. </p>
<br>

<p>이는 보통 우리가 의도하는 동작이고, 서브 클래스들은, 베이스 클래스에 존재하지 않는 추가적인 데이터 필드들을 저장하기 위한 공간이 필요합니다.<br><br></p>
<p>하지만, 때때로 모델의 파이썬 동작을 바꾸고 싶을때가 있습니다 - 기본 메니저를 변경하거나 혹은 새로운 메서드를 추가할때 처럼 말이죠. <br><br></p>
<p>이것이 바로 프록시 모델 상속이 존재하는 이유 입니다. 기존 모델을 위해서 새로운 proxy 를 생성하는것 입니다. </p>
<br>



<blockquote>
<p>모델의 파이썬 동작을 바꾸고 싶을때, 기존 모델을 위한 새로운 proxy 를 생성 합니다. </p>
<p>예) 기본 메니져 변경, 새로운 메서드 추가 등등 </p>
</blockquote>
<a id="more"></a>

<br>

<blockquote>
<p>프록시 (proxy) 라는 개념은 영문으로 직역하면, 일종의 대리권, 대리인 이라 생각하면 되고.</p>
<p>일종의 부모 클래스의 복제품이라고 생각하면 됩니다. </p>
<p>다만, 부모 클래스와 동일한 데이터베이스 테이블을 사용합니다. </p>
</blockquote>
<br>

<p>여러분들은 프록시 모델의 인스턴스들을 생성, 삭제, 그리고 업데이트를 해줄수 있고. </p>
<p><br>모든 데이터들은 마치 기존 모델을 사용하느것처럼 저장될수 있습니다. <br><br></p>
<p>차이점은, 여러분들이 proxy 의 기본 모델 정렬 혹은 기본 메니져 같은 것들을 뭔본 모델을 바꿀 필요 없이 수정할수 있다는 점 입니다. <br><br></p>
<blockquote>
<p>프록시 모델은 일반 모델처럼 생성 됩니다 </p>
<p>하지만, proxy 속성 값을 Meta 클래스 안에서, True 로 지정해주어야 합니다 .</p>
</blockquote>
<br>

<p>아래 코드를 예시로 들면, </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPerson</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="comment"># Meta 클래스 안에, proxy = True 로 설정해줌 </span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        proxy = <span class="literal">True</span> </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># ... </span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<br>

<p>MyPerson 클래스는, 부모 클래스인 Person 클래스와 같은 데이터베이스 테이블에서 동작 합니다. </p>
<br>

<p>특히, Person 의 어떤 새로운 인스턴스들도 MyPerson 을 통해서 접근이 가능합니다. MyPerson 의 새로운 인스턴스들도 Person 을 통해서 접근이 가능합니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: p = Person.objects.create(first_name="Colin", last_name="Firth")                                                                                                  </span><br><span class="line">In [2]: MyPerson.objects.get(first_name="Colin")                                                                                                                          </span><br><span class="line">Out[2]: &lt;MyPerson: MyPerson object (1)&gt;</span><br><span class="line"></span><br><span class="line">In [3]: Person.objects.get(first_name="Colin")                                                                                                                            </span><br><span class="line">Out[3]: &lt;Person: Person object (1)&gt;</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderPerson</span><span class="params">(Person)</span>:</span></span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">MEta</span>:</span></span><br><span class="line">		ordering = [<span class="string">"last_name"</span>]</span><br><span class="line">		proxy = <span class="literal">True</span></span><br></pre></td></tr></table></figure>



<br>

<p>일반적인  Person 쿼리들은 정렬이 되지 않겠지만, </p>
<p><br>OrderedPerson 쿼리들은 last_name 기준으로 정렬이 될겁니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [4]: a = Person.objects.create(first_name="동원", last_name="강")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [5]: b = Person.objects.create(first_name="지석", last_name="강")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [6]: c = Person.objects.create(first_name="문희", last_name="나")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [7]: d = Person.objects.create(first_name="민영", last_name="박")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [8]: e = Person.objects.create(first_name="태현", last_name="차")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [9]: f = Person.objects.create(first_name="성경", last_name="이")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [10]: Person.objects.all()                                                                                                                                             </span><br><span class="line">Out[10]: &lt;QuerySet [&lt;Person: Firth&gt;, &lt;Person: 강&gt;, &lt;Person: 강&gt;, </span><br><span class="line">&lt;Person: 나&gt;, &lt;Person: 박&gt;, &lt;Person: 차&gt;, &lt;Person: 이&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> last_name 즉 성씨를 기준으로 정렬 </span></span><br><span class="line">In [11]: OrderedPerson.objects.all()                                                                                                                                      </span><br><span class="line">Out[11]: &lt;QuerySet [&lt;OrderedPerson: Firth&gt;, &lt;OrderedPerson: 강&gt;, &lt;OrderedPerson: 강&gt;, </span><br><span class="line">&lt;OrderedPerson: 나&gt;, &lt;OrderedPerson: 박&gt;, &lt;OrderedPerson: 이&gt;, &lt;OrderedPerson: 차&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>프록시 모델들은,  Meta 속성을 일반 모델들이 상속 받는 방식과 동일하게 상속 받습니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 19편 - Model 상속 Multi-table inheritance 2편</title>
    <url>/2020/08/18/Django-Models-19%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Multi-table-inheritance-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="Multi-table-inheritance-2편"><a href="#Multi-table-inheritance-2편" class="headerlink" title="Multi-table inheritance 2편"></a>Multi-table inheritance 2편</h2><br>

<h3 id="Inheritance-and-reverse-relations"><a href="#Inheritance-and-reverse-relations" class="headerlink" title="Inheritance and reverse relations"></a>Inheritance and reverse relations</h3><br>

<p>multi-table 상속은 암시적으로, OneToOneField 를 사용하여 자식 클래스와 부모 클래스를 연결해 주기 때문에, 부모 클래스에서 자식 클래스로 이동이 가능해 집니다. </p>
<br>

<p>하지만, 이는 ForeignKey 와 ManyToManyField 관계들을 위한 기본 related_name 값을 사용합니다. </p>
<br>

<p>만일 우리가, ForeignKey 나 ManyToManyField 관게들을 부모의 서브클래스에 넣어준다면, 각 필드에 related_name 속성들을 지정해 주어야 합니다. </p>
<br>

<p>각 필드에 이 relate_name 속성을 지정해 주지 않는다면, Django는 유효성 에러를 발생 시킬겁니다. </p>
<br>

<br>
<a id="more"></a>

<br>

<p>예시를 들면, </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">80</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(Place)</span>:</span></span><br><span class="line">    serves_hot_dogs = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    serves_pizza = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 새로운 서브 클래스 추가 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Supplier</span><span class="params">(Place)</span>:</span></span><br><span class="line">    customers = models.ManyToManyField(Place)</span><br></pre></td></tr></table></figure>

<br>

<p>이렇게 코드를 짜면, 에러를 발생 시킵니다. </p>
<p><br>새로운 클래스를 추가하고, python manage.py makemigraitons 를 실행하면, 아래와 같은 에러가 출력 됩니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">(django-tutorial)  dhkang  ~/django_tutorial/django_docs master python manage.py makemigrations</span><br><span class="line">SystemCheckError: System check identified some issues:</span><br><span class="line"></span><br><span class="line">ERRORS:</span><br><span class="line">multitableinheritance.Supplier.customers: (fields.E305) Reverse query name </span><br><span class="line">for 'Supplier.customers' clashes with reverse query name for 'Supplier.place_ptr'.</span><br><span class="line">        HINT: Add or change a related_name argument to the definition for </span><br><span class="line">'Supplier.customers' or 'Supplier.place_ptr'.</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>related_name 을 아래와 같이 customers 필드에 추가를 하면, 에러가 해결됩니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">80</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(Place)</span>:</span></span><br><span class="line">    serves_hot_dogs = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    serves_pizza = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 새로운 서브 클래스 추가 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Supplier</span><span class="params">(Place)</span>:</span></span><br><span class="line">    customers = models.ManyToManyField(Place, related_name=<span class="string">'provider'</span>)</span><br><span class="line">    <span class="comment"># related_name='provider' 라고 지정을 해줌</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>related_name</code> 을 지정해주고, python manage.py makemigrations 를 실행해주면, migrations 가 생성됩니다.<br><br></p>
<h3 id="Specifying-the-parent-link-field"><a href="#Specifying-the-parent-link-field" class="headerlink" title="Specifying the parent link field"></a>Specifying the parent link field</h3><br>

<p>이전에도 언급되었듯이, django 는 자동적으로 OneToONeField 를 사용하여, 자식 클래스를 Abstract base 클래스가 아닌 부모 클래스 모델에 연결해 줍니다. 만약 부모와 연결되는 속성들의 이름을 제어하고 싶다면, 스스로 OneToOneField 를 생성하고, parent_link = True 로 설정하여, 당신의 필드가 부모 클래스에 뒤쪽으로 연결 된다는것을 표시할수 있습니다.<br><br></p>
]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 19편 - Model 상속 Multi-table inheritance 1편</title>
    <url>/2020/08/17/Django-Models-19%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Multi-table-inheritance-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="Model-상속-Multi-table-inheritance"><a href="#Model-상속-Multi-table-inheritance" class="headerlink" title="Model 상속 (Multi-table inheritance )"></a>Model 상속 (Multi-table inheritance )</h2><br>

<p>Django 모델을 상속 받는데에 있어서 3가지 스타일이 존재합니다. </p>
<br>

<ol>
<li>Abstract base classes </li>
<li>Multi-table inheritance</li>
<li>Proxy Models </li>
</ol>
<br>

<h3 id="Multi-table-inheritance"><a href="#Multi-table-inheritance" class="headerlink" title="Multi-table inheritance"></a>Multi-table inheritance</h3><br>

<p>Django 모델에서 지원하는 두번째 모델 상속 방식은, Multi-table inheritance 입니다. </p>
<p><br>각 모델이 계층구조에서, 자체적으로 모델일 경우 입니다. </p>
<p>각 모델은 각자의 데이터베이스 테이블에 해당 되고, 각각 쿼리문을 보내거나 생성될수 있습니다. </p>
<br>

<p>상속 관계는, 자식 모델과 부모 모델의 연결고리를 만들어 놓습니다. </p>
<br>

<p>예를들면, <a id="more"></a></p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">80</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(Place)</span>:</span></span><br><span class="line">    serves_hot_dogs = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    serves_pizza = models.BooleanField(default=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>Place 의 모든 필드들은, Restaurant 에서도 사용할수 있습니다. </p>
<p><br>하지만, 데이터는 다른 데이터베이스 테이블에 존재하게 됩니다. 따라서, 아래 상황들 둘다 가능합니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Place.objects.filter(name=<span class="string">"Bob's Cafe"</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Restaurant.objects.filter(name=<span class="string">"Bob's Cafe"</span>)</span></span><br><span class="line"></span><br><span class="line">In [1]: bobscafe = Place.objects.create(name="Bob's Cafe", address="Bob ba di rara")                                                                                      </span><br><span class="line"></span><br><span class="line">In [2]: Place.objects.filter(name="Bob's Cafe")                                                                                                                           </span><br><span class="line">Out[2]: &lt;QuerySet [&lt;Place: Place object (1)&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [3]: Restaurant.objects.filter(name="Bob's Cafe")                                                                                                                      </span><br><span class="line">Out[3]: &lt;QuerySet []&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>만약 Place 이면서, Restaurant 인 경우, </p>
<p><br>Place 객체에서 Restaurant 객체를 얻을수 있는데, 모델 이름의 소문자 형태를 사용하여 얻을수 있습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [4]: p = Restaurant.objects.create(name="pizza hut", address="789 Hume Highway", serves_hot_dogs=False, serves_pizza=True)                                             </span><br><span class="line"></span><br><span class="line">In [5]: Place.objects.all()                                                                                                                                               </span><br><span class="line">Out[5]: &lt;QuerySet [&lt;Place: Place object (1)&gt;, &lt;Place: Place object (2)&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [7]: Restaurant.objects.all()                                                                                                                                          </span><br><span class="line">Out[7]: &lt;QuerySet [&lt;Restaurant: Restaurant object (2)&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [8]: p = Place.objects.get(id=2)    # p 가 Restaurant 객체 일때, 자식 클래스를 제공한다                                                                                                                                    </span><br><span class="line"></span><br><span class="line">In [10]: p.restaurant                                                                                                                                                     </span><br><span class="line">Out[10]: &lt;Restaurant: Restaurant object (2)&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>하지만, 위 예제에서, p  라는 인스턴스가 Restaurant 이 아니라, Place 객체로 직접 생성 되었다면, </p>
<p><code>p.restaurant</code> 은 Restaurant DoesNotExist 예외를 발생 시켰을 겁니다. </p>
<p><br> Restaurant 을 Place 에 연결해 주는, 자동 생성된 OneToOneField 는 아래와 같이 생겼습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Place_ptr = models.OneToOneField(</span><br><span class="line">    Place, on_delete=models.CASCADE, </span><br><span class="line">    parent_link = <span class="literal">True</span>, </span><br><span class="line">    primary_key = <span class="literal">True</span>, </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<br>

<p>Restaurant 에서 OneToOneField 의 paraent_link=True 로 설정해 줌으로써, 필드를 오버라이드 할수 있습니다. </p>
<br>

<h3 id="Meta-and-Multi-table-inheritance"><a href="#Meta-and-Multi-table-inheritance" class="headerlink" title="Meta and Multi-table inheritance"></a>Meta and Multi-table inheritance</h3><br>

<p>multi-table 상속 상황속에서는, 자식 클래스가 부모의 Meta 클래스를 상속 받는게 있을수 없는 일입니다. </p>
<p><br>모든 Meta 옵션들은 이미 부모 클래스에 적용 되어 있고, 이것을 다시 적용 한다는것은 단지 모순된 동작으로 이어지게 할 뿐입니다. </p>
<br>

<p>따라서, 자식 모델은, 부모의 Meta 클래스에 접근할수 없습니다. 그렇지만, 자식 모델이 부모 모델의 동작을 상속받는 몇가지 제한적 경우가 있습니다. </p>
<br>

<blockquote>
<p>만약, </p>
<p>자식 모델이 ordering 속성 혹은 get_latest_by 속성을 지정하고 있지 않다면, </p>
<p>이 속성들을 부모 클래스에서 상속 받을수 있습니다. </p>
</blockquote>
<br>

<p>만약 부모 모델이  ordering 을 가지고 있고, 자식 모델이 자연스러운 ordering 을 가지게 하고 싶으면, </p>
<p><br>명시적으로 비활성화를 시켜주면 됩니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildModel</span><span class="params">(ParentModel)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 부모 모델의 ordering 을 제거 해주기 </span></span><br><span class="line">        ordering = []</span><br></pre></td></tr></table></figure>

<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 18편 - Model 상속 related_name, related_query_name</title>
    <url>/2020/08/16/Django-Models-18%ED%8E%B8-Model-%EC%83%81%EC%86%8D-related-name-related-query-name/</url>
    <content><![CDATA[<h2 id="Be-careful-with-related-name-and-related-query-name"><a href="#Be-careful-with-related-name-and-related-query-name" class="headerlink" title="Be careful with related_name and related_query_name"></a>Be careful with related_name and related_query_name</h2><br>

<p>만약 우리가 ForeginKey 나 ManyToManyField 에 related_name 혹은 related_query_name 을 사용하고 있다면, 우리는 언제나 고유한 reverse name 과 query name 들을 해당 필드에 지정해 주어야 합니다. </p>
<br>

<p>이 related_name 과 related_query_name 부분에 대해서, 아주 심도있게 clarification 한 곳이 없으므로. </p>
<br>

<p>예시만 보고 지나갑니다. </p>
<a id="more"></a>

<br>

<p>common/models.py </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    m2m = models.ManyToManyField(</span><br><span class="line">    OtherModel, </span><br><span class="line">    related_name = <span class="string">"%(app_label)s_%(class)s_related"</span>,</span><br><span class="line">    related_query_name = <span class="string">"%(app_label)s_%(class)ss"</span>,</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">  	<span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span> </span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChilA</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">class ChildB(Base);</span><br><span class="line">	<span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<br>

<p>다른 앱도 같이 주어 집니다 rare/models.py </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> common.models <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildB</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>common.ChilA.m2m 필드의 역방향 이름은, </p>
<p>common_childa_related 이고, </p>
<p>역방향 쿼리 이름은, common_childas 가 될것입니다. </p>
<br>

<p>common.ChildB.m2m  필드의 역방향 이름은, </p>
<p>common_childb_related 이고, </p>
<p>역방향 쿼리 이름은, common_childbs 가 될것입니다. </p>
<br>

<p>마지막으로, </p>
<br>

<p>rare.childB.m2m 의 역방향 이름은, rare_childb_related 가 되고, </p>
<p>역방향 쿼리 이름은, rare_childbs 가 될것입니다. </p>
</blockquote>
<br>

<br>



]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 17편 - Model 상속 (Abstract Base Class) 2</title>
    <url>/2020/08/15/Django-Models-17%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Abstract-Base-Class-2/</url>
    <content><![CDATA[<h2 id="Meta-Inheritance"><a href="#Meta-Inheritance" class="headerlink" title="Meta Inheritance"></a>Meta Inheritance</h2><br>

<p><code>abstract base class</code>가 생성될때에, django 는 base class 안에 선언된 Meta 클래스를 속성으로 만들어 줍니다. 만약 하나의 자식 클래스안에, 해당 자식 클래스를 위한 Meta class 가 정의되어 있지 않다면, 부모의 Meta 를 상속 받을것 입니다. </p>
<br>

<blockquote>
<p>만약 자식 클래스가, 부모의 Meta 클래스를 확장하고 싶다면, </p>
<p>자식  클래스는, 부모의 Meta 클래스를 자식 클래스 내에 있는 Meta 에서 상속 받으면 됩니다. </p>
</blockquote>
<br>

<p>코드 예시를 들자면, </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    age = models.PositiveIntegerField()</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span> </span><br><span class="line">        ordering = [<span class="string">'name'</span>]</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(CommonInfo)</span>:</span></span><br><span class="line">    home_group = models.CharField(max_length=<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span><span class="params">(CommonInfo.Meta)</span>:</span></span><br><span class="line">        db_table = <span class="string">'student_info'</span></span><br></pre></td></tr></table></figure>

<br>

<p>Django 는 기본적으로, abstract base 클래스의 Meta class 에 대한 조정사항을 가집니다. Meta 속성을 설치하기 이전에, abstract=False 로 지정합니다. </p>
<br>

<p>이것이 의미하는바는, <br></p>
<p>abstract 클래스의 자녀들은 자동으로 그리고 스스로는 abstract 클래스가 되지 않는다는것을 의미합니다.</p>
<br>

<p>물론, 다른 abstract 클래스를 상속받는 Abstract 클래스를 만드는것도 가능합니다. </p>
<p>단지 만들때마다, 명시적으로, abstract=True 를 지정해주는것만이 필요할 뿐입니다. </p>
<br>

<p>어떠한 속성들은 Abstract base class 의 Meta 안에 포함되는것이 이상해 보일때가 있습니다. </p>
<p><br>예를들면, db_table 을 포함한다면, 모든 자식 클래스들이 같은 데이터베이스 테이블을 사용하게 된다는 의미가 됩니다. 이렇게 설정하면, 매우 일이 이상해 집니다. </p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>자식 클래스에 있는 Meta Class 도 부모 클래스에 있는 Meta 클래스를 상속 받을수 있습니다. </p>
<br>

<p>연습도 해볼겸, 인스턴스 생성후, 속성값들을 확인해 봅니다. </p>
<br>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="keyword">In</span> [<span class="number">1</span>]: colin = Student.objects.create(name=<span class="string">"Colin Firth"</span>, age=<span class="number">60</span>, home_group=<span class="string">"king"</span>)                                                                                     </span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">2</span>]: colin.Meta                                                                                                                                                        </span><br><span class="line">Out[<span class="number">2</span>]: abstractbaseclasses.models.CommonInfo.Meta</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">4</span>]: colin.name                                                                                                                                                        </span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'Colin Firth'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">5</span>]: colin.age                                                                                                                                                         </span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">60</span></span><br></pre></td></tr></table></figure>

<br>

<p>Student class 안에 Meta 클래스에 db_table 이 데이터베이스 테이블 명이 된것을 확인할수 있습니다. </p>
<br>

<p>CommonInfo 클래스 안에 존재하는 Meta 클래스에, 이 db_table 속성을 넣어두면, </p>
<p>CommonInfo 클래스를 상속하는 모든 자식 클래스들의 데이터베이스 테이블명이 모두 하나로 동일하게 될겁니다. 그렇게 되면, 조금 이상한 일이 될겁니다. </p>
<br>



<br>

<br>

<br>

<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 17편 - Model 상속 (Abstract Base Class) 1</title>
    <url>/2020/08/14/Django-Models-17%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Abstract-Base-Class-1/</url>
    <content><![CDATA[<h2 id="Model-Inheritance-Abstract-Base-Classes"><a href="#Model-Inheritance-Abstract-Base-Classes" class="headerlink" title="Model Inheritance (Abstract Base Classes)"></a>Model Inheritance (Abstract Base Classes)</h2><br>

<p><code>Abstract Base classes</code></p>
<br>

<p>Abstract base 클래스들은, 여러분들이 어떠한 공통된 정보들을, 다른 모델들에 넣고 싶을때에 유용하게 쓸수 있습니다. </p>
<br>

<p>Base 클래스를 작성한다음, <code>Meta class</code> 에다가, <code>abstract=True</code>  로 설정합니다. </p>
<p><br>그러면, 해당 모델은, 데이터베이스를 생성하는데에 사용되지 않습니다. </p>
<br>

<blockquote>
<p>다른 모델들의 Base 클래스로 사용될때에는, </p>
<p>Base 클래스의 필드들이 자식 클래스들에 추가 됩니다. </p>
</blockquote>
<br>

<p>예시를 들자면, </p>
<br>

<a id="more"></a>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    age = models.PositiveIntegerField()</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span> </span><br><span class="line">        <span class="comment"># class Meta 를 선언함으로써, 다른 모델들이 상속 받을수 있는 모델이 됨 </span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(CommonInfo)</span>:</span></span><br><span class="line">    <span class="comment"># 공통된 정보를 가지고 있는 CommonInfo 클래스를 상속받는 Student 클래스 모델 </span></span><br><span class="line">    home_group = models.CharField(max_length=<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(CommonInfo)</span>:</span></span><br><span class="line">    <span class="comment"># 공통된 정보를 가지고 있는 CommonInfo 클래스를 상속받는 Teacher 클래스 모델 </span></span><br><span class="line">    teaching_subject = models.CharField(max_length=<span class="number">20</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>위의 예시에서, CommonInfo 클래스에 있는 name 과 age 필드는, </p>
<p>Student 모델과, Teacher 모델이 상속받는 필드입니다. </p>
<br>

<p>따라서, Student 모델은 3가지 필드들을 갖게 됩니다. name, age 그리고 home_group. </p>
<p>비슷한 의미로, Teacher 모델은 name, age 그리고 teaching_subject 필드를 갖게 됩니다. </p>
<br>

<blockquote>
<p>CommonInfo 모델은 abstract base 클래스 이기 때문에, </p>
<p>CommonInfo 모델은 일반 Django 모델로 사용될수 없습니다. </p>
<br>

<p>CommonInfo 모델은 데이터베이스 테이블을 생성하지도 않고, manager 도 갖지 않습니다 (object  메서드를 가지지 않습니다). 그리고, 직접적인 인스턴스 생성과 저장도 되지 않습니다. </p>
</blockquote>
<br>

<p>abstract base class 에서 상속받은 필드들은 다른 필드 혹은 값으로 override 될수 있습니다. </p>
<p><br>혹은, None 으로 제거 될수 있습니다. </p>
<br>

<p><code>abstract base</code> 클래스 상속 방식은, 공통된 정보를 파이썬 레벨에 두고, </p>
<p>각각의 자식 모델마다 한개의 데이터베이스 테이블을 데이터베이스에 생성합니다. </p>
<br>

<p>실제로 위의 예시에서 CommonInfo 클래스로 Shell 에 들어가서, 몇가지 명령어를 실행해보면, 에러가 납니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: common = CommonInfo.objects.create(name="django", age=22)                                                                                                         </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-1-8d6637697465&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 common = CommonInfo.objects.create(name=<span class="string">"django"</span>, age=22)</span></span><br><span class="line"></span><br><span class="line">NameError: name 'CommonInfo' is not defined</span><br><span class="line"></span><br><span class="line">In [2]: CommonInfo.objects.all()                                                                                                                                          </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-2-fc35ec638311&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 CommonInfo.objects.all()</span></span><br><span class="line"></span><br><span class="line">NameError: name 'CommonInfo' is not defined</span><br><span class="line"></span><br><span class="line">In [3]: c = CommonInfo()                                                                                                                                                  </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-3-2542378fc97f&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 c = CommonInfo()</span></span><br><span class="line"></span><br><span class="line">NameError: name 'CommonInfo' is not defined</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 16편 - Model Inheritance</title>
    <url>/2020/08/13/Django-Models-16%ED%8E%B8-Model-Inheritance/</url>
    <content><![CDATA[<h2 id="Model-Inheritance-모델-상속"><a href="#Model-Inheritance-모델-상속" class="headerlink" title="Model Inheritance (모델 상속)"></a>Model Inheritance (모델 상속)</h2><br>

<p>Django 에서 모델 상속은, 파이썬에서 일반적인 클래스 상속을 하는것과 거의 비슷하게 작동합니다.  </p>
<br>

<p>다만, django 의 기본에는 충실해야 합니다. 이것이 의미하는것은, Django 모델 클래스들은 <code>django.db.models.Model</code> 의 서브 클래스가 되어야 한다는 이야기 입니다. </p>
<br>

<p>여러분들이 결정해야 할 사항은 아래와 같습니다. </p>
<br>

<ol>
<li>부모 모델이 자신의 모델이 될지 </li>
<li>부모 모델은 단지 공통된 정보를 가지고, 자식 모델들을 통해서만 정보가 보이게 하게 할지 </li>
</ol>
<br>

<p>이 개념을 쉽게 이해하기 위해서는, 파이썬에서 클래스의 상속 개념을 잘 알고 있어야 합니다. </p>
<br>

<br>

<blockquote>
<p>Django 에서는 상속에 대한 3가지 스타일들이 존재 합니다. </p>
</blockquote>
<br>

<ol>
<li>보통은, 자식 모델들의 필드에 대해서 타이핑 하기 싫을때, 부모 클래스가 정보만 가지게끔 사용할수 있습니다. 이 클래스는 절대로 분리되서 사용될수 없습니다. 따라서, <code>Abstract base classes</code> 들이 당신이 원하는것이 될겁니다. </li>
<li>이미 존재하는 모델 (다른 어플리케이션에 있는 모델)을 상속을 받고 있고, 각 모델이 각자의 데이터베이스 테이블을 가지고 있다면, <code>Multi-table inheritance</code> 를 사용할수 있습니다.</li>
<li>모델 필드의 수정 없이, 모델의 파이썬 레벨 동작을 고치고 싶다면, <code>proxy models</code> 를 사용하면 됩니다.  </li>
</ol>
<br>

<a id="more"></a>

<br>

<p>정리하자면, </p>
<br>

<blockquote>
<p>Django 에서 모델 상속에 대해, 아래 3가지 스타일이 존재합니다. </p>
<br>

<p>1) Abstract base classes </p>
<p>2) Multi-table inheritance </p>
<p>3) Proxy models </p>
</blockquote>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 15편 - 이미 정의된 모델 메서드 오버라이드 하기</title>
    <url>/2020/08/12/Django-Models-15%ED%8E%B8-%EC%9D%B4%EB%AF%B8-%EC%A0%95%EC%9D%98%EB%90%9C-%EB%AA%A8%EB%8D%B8-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9C-%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="Overriding-predefined-model-methods"><a href="#Overriding-predefined-model-methods" class="headerlink" title="Overriding predefined model methods"></a>Overriding predefined model methods</h2><br>

<p>여러분들이 커스터마이즈 하고 싶은 데이터베이스의 동작을 캡슐화 해주는 모델 메서드들도 존재 합니다. </p>
<br>

<p>특히 우리는 종종 <code>save()</code> 와 <code>delete()</code> 의 동작 방식을 바꾸고 싶어 집니다.  </p>
<br>

<blockquote>
<p>save() 나 delete() 같은 메서드들을 override 해서 동작 방식을 바꾸는것도 가능하고,</p>
<p>다른 어떤 모델 메서드들을 override 해서 사용하는것도 가능합니다.  </p>
</blockquote>
<br>

<p>내장된 메서드, <code>save()</code> 같은 메서드를 override 하여 사용하는 고전적인 예시는, </p>
<p><br>하나의 객체를 저장할때마다 다른 무언가를 발생시키고 싶을 때입니다.</p>
<br>

<a id="more"></a>

<br>

<h2 id="Method-override-예시"><a href="#Method-override-예시" class="headerlink" title="Method override 예시"></a>Method override 예시</h2><br>

<p>예시 코드를 둘러봅니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">	name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    tagline = models.TextField()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        do_something()</span><br><span class="line">        super().save(*args, **kwargs)  <span class="comment"># 실제 save() 를 호출 </span></span><br><span class="line">        do_something_else()</span><br><span class="line">        </span><br><span class="line"><span class="comment"># save()를 호출할때, do_something() 부분에 어떠한 작업을 하는 코드를 써주면, </span></span><br><span class="line"><span class="comment"># 실제 save() 가 동작하기 전에, do_something() 을 수행합니다 </span></span><br><span class="line"><span class="comment"># 그리고, save()가 호출 되고 나서는, do_something_else() 부분에 있는 또다른 </span></span><br><span class="line"><span class="comment"># 작업을 해줄수 있습니다.</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>def save(self, *args, **kwargs)</code> 를 사용하여, 평범하게 객체를 저장하기 보다는, 다른 작업을 실행하고 저장할수 있는 기능을 가질수 있습니다.  </p>
<br>



<blockquote>
<p>저장하는것을 방지할수도 있습니다 </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    tagline = models.TextField() </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.name == <span class="string">"Yoko One's blog"</span>:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="comment"># 블로그 이름이 "Yoko One's blog" 이면, save 가 호출 되지 않고 </span></span><br><span class="line">        <span class="comment"># 비어있는값이 return 됩니다 </span></span><br><span class="line">        <span class="comment"># "Yoko One's blog" 가 제목이 아닐경우, else 로 넘어갑니다. </span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            super().save(*args, **kwargs)	<span class="comment"># 실제 save()를 호출해서 save() 진행</span></span><br></pre></td></tr></table></figure>



<br>

<br>

<h2 id="super-save-args-kwargs"><a href="#super-save-args-kwargs" class="headerlink" title="super().save(*args, **kwargs)"></a><code>super().save(*args, **kwargs)</code></h2><br>

<p>처음에는 생소해 보일지 모르지만, </p>
<br>

<blockquote>
<p><code>super().save(*args, **kwargs)</code> 를 통해서, </p>
<p>superclass 의 메서드를 호출하는것이 중요합니다. </p>
<p>이것을 호출하여, 객체가 여전히 데이터베이스에 저장되게 하는것이 중요합니다. </p>
</blockquote>
<br>

<p>superclass 메서드를 호출하지 않는다면, 기본적인 저장 동작이 일어나지 않을것이고. </p>
<p><br>이는 데이터베이스를 건들지 않습니다. </p>
<br>

<p>또한, 모델 메서드에 전달된 인자들을 전달하는것도 중요합니다. </p>
<p><br><code>*args, **kwargs</code> 부분이 이 역할을 수행합니다. <br></p>
<p>Django 는 때때로, 내장 모델 메서드들의 능력을 확장하고, 새로운 인자들을 추가해줄수 있습니다. </p>
<br>

<blockquote>
<p>정의된 모델안에서, <code>*args</code> 와 <code>**kwargs</code> 를 사용하면, </p>
<p>인자들이 추가 되었을때, 코드가 자동으로 해당 인자들을 지원합니다.</p>
</blockquote>
<br>

<h2 id="Quick-Note"><a href="#Quick-Note" class="headerlink" title="Quick Note"></a>Quick Note</h2><br>

<blockquote>
<p>override 된 모델 메서드들은, 대량으로 운영되는 상황에서는 호출되지 않습니다. </p>
<br>

<p>객체를 위한, <code>delete()</code> 메서드는 쿼리셋을 이용해서 대량으로 객체를 지울때에는 호출 되지 않습니다. 혹은, cascading delete 일때도 호출되지 않습니다. </p>
<br>

<p>사용자 정의 delete 로직의 실행을 확실시 하고 싶으면, </p>
<p>pre_delete 그리고/혹은 post_delete 신호를 사용합니다.</p>
<br>

<p>안타깝게도, 객체를 대량으로 creating 혹은 updating 하는 작업은 존재하지 않습니다. </p>
<p>save(), pre_save() 그리고 post_save()  들이 대량으로 작업해야 하는 상황에서는 호출되지 않기 때문입니다.  </p>
</blockquote>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
        <tag>super.save()</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 14편 - Model Methods</title>
    <url>/2020/08/11/Django-Models-14%ED%8E%B8-Model-Methods/</url>
    <content><![CDATA[<h2 id="Model-Methods"><a href="#Model-Methods" class="headerlink" title="Model Methods"></a>Model Methods</h2><br>

<p>모델 클래스에는,  사용자 정의 메서드를 추가할수 있습니다. (row-level, 즉, 줄 단위)</p>
<p><br>Manager 메서드 (objects) 는, table 전체에 적용되고. 모델 메서드들은, 특정한 모델 인스턴스에 적용됩니다.  </p>
<br>

<p>해당 모델의 인스턴스에 대해서, 특별한 비지니스 로직을 동작하고 싶을때에, 이런 모델 메서드를 사용해서. 하나의 모델에 모아놓고 사용할수 있습니다. </p>
<br>

<p>아래 예시에는, 몇가지 사용자 정의 메서드가 정의되어 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    birth_date = models.DateField()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">baby_boomer_status</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># "Returns the person's baby-boomer status. "</span></span><br><span class="line">        <span class="comment"># 해당 사람이, baby_boomer 세대인지 아닌지 판단합니다. </span></span><br><span class="line">        <span class="keyword">import</span> datetime </span><br><span class="line">        <span class="keyword">if</span> self.birth_date &lt; datetime.datetime(<span class="number">1945</span>, <span class="number">8</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Pre-boomer"</span></span><br><span class="line">        <span class="keyword">elif</span> self.birth_date &lt; datetime.datetime(<span class="number">1965</span>, <span class="number">1</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Baby boomer"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Post-boomer"</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">full_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># "Returns the person's full name"</span></span><br><span class="line">        <span class="comment"># 해당 사람의 이름을 리턴합니다 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s %s'</span> % (self.first_name, self.last_name)</span><br></pre></td></tr></table></figure>

<br>

<br>

<a id="more"></a>

<br>

<p>예시에서, 마지막으로 작성된 <code>def full_name(self)</code> 메서드는, property 입니다. </p>
<br>

<p>모델 인스턴스는 자동으로 각 모델에 부여된 메서드의 목록을 가지고 있고. </p>
<p><br>아래 예시에서 보면, colin 이라는 인스턴스가 모델에 정의된 메서드들을 사용할수 있다는것을 확인합니다. <br></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">colin = Person.objects.create(first_name="colin", last_name="firth", birth_date="1961-10-07")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> colin 이라는 객체를 가져옴 </span></span><br><span class="line">colin = Person.objects.get(first_name="colin")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> colin 이라는 인스턴스의 baby_boomer_status 메서드를 호출 </span></span><br><span class="line">colin.baby_boomer_status </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> colin 이라는 인스턴스의 full_name 메서드를 호출 </span></span><br><span class="line">colin.full_name</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="str-메서드"><a href="#str-메서드" class="headerlink" title="__str__() 메서드"></a><code>__str__()</code> 메서드</h2><br>

<p>객체의 문자열 표시를 반환하는 파이썬 <code>magic method</code> (매직 메서드) 입니다. 이 메서드는 파이썬과 장고가 언제든 모델 인스턴스가 순수한 문자열로 표시되길 원할때에 사용됩니다. </p>
<br>

<blockquote>
<p> <code>__str__()</code> 메서드를 사용하면, 해당 모델 인스턴스를 문자열로 표시해서 반환할수 있습니다. </p>
</blockquote>
<br>

<p>이 메서드는 아주 많이, 많이, 많이, 그리고 자주, 사용되는 메서드입니다.  </p>
<br>

<h2 id="get-absolute-url"><a href="#get-absolute-url" class="headerlink" title="get_absolute_url()"></a><code>get_absolute_url()</code></h2><br>

<p>이 메서드는 Django 에게 어떻게 객체에 대한 URL 을 계산해야 하는지 얘기해 줍니다. </p>
<p><br>Django 는 이 메서드를 어드민 인터페이스에서 사용합니다. 또는 언제든 객체의 URL 을 알아내야 할때 사용합니다. </p>
<br>

<p>어떤 객체든 고유한 URL 이 식별하는 객체일때, 이 메서드로 정의 합니다. </p>
<br>



<h2 id="Model-Method-연습"><a href="#Model-Method-연습" class="headerlink" title="Model Method 연습"></a>Model Method 연습</h2><br>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: import datetime                                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [2]: colin = Person.objects.create(first_name="Colin", </span><br><span class="line">                                      last_name="Firth", </span><br><span class="line">                                      birth_date=datetime.date(1960, 9, 10))                                                       </span><br><span class="line"></span><br><span class="line">In [3]: colin.first_name                                                                                                                                                  </span><br><span class="line">Out[3]: 'Colin'</span><br><span class="line"></span><br><span class="line">In [4]: colin.last_name                                                                                                                                                   </span><br><span class="line">Out[4]: 'Firth'</span><br><span class="line"></span><br><span class="line">In [5]: colin.birth_date                                                                                                                                                  </span><br><span class="line">Out[5]: datetime.date(1960, 9, 10)</span><br><span class="line"></span><br><span class="line">In [6]: colin.baby_boomer_status                                                                                                                                          </span><br><span class="line">Out[6]: &lt;bound method Person.baby_boomer_status of &lt;Person: Person object (4)&gt;&gt;</span><br><span class="line"></span><br><span class="line">In [7]: colin.full_name                                                                                                                                                   </span><br><span class="line">Out[7]: 'Colin Firth'</span><br></pre></td></tr></table></figure>

<br>







]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 13편 - Model Attributes</title>
    <url>/2020/08/10/Django-Models-13%ED%8E%B8-Model-Attributes/</url>
    <content><![CDATA[<h2 id="Model-Attributes"><a href="#Model-Attributes" class="headerlink" title="Model Attributes"></a>Model Attributes</h2><br>

<p>모델의 가장 중요한 속성은 Manager 입니다. </p>
<br>



<blockquote>
<p>Manager 는 </p>
<p>Django 데이터베이스 쿼리 운영을 제공 하는 인터페이스로, </p>
<p>데이터베이스에서 인스턴스들을 검색할때 사용 됩니다. <br></p>
<p>만약, 사용자 정의 Manager 가 정의되어 있지 않다면, 기본값으로, Manager 의 이름은 objects 입니다. </p>
</blockquote>
<br>

<p>Manager 는 모델 클래스들을 통해서만 접근 가능합니다. 모델 인스턴스로는 접근이 가능하지 않습니다. </p>
<br>

<a id="more"></a>

<h2 id="Manager-의-사용"><a href="#Manager-의-사용" class="headerlink" title="Manager 의 사용"></a>Manager 의 사용</h2><br>

<p>우리가 Django 에서 해당 모델의 데이터베이스 모든 데이터를 조회할때에는, 아래와 같이 ORM 을 작성합니다. </p>
<p><br>이때 사용되는, objects 가 Manager의 기본 이름입니다. <br></p>
<p><code>&lt;model명&gt;.objects.all()</code></p>
<br>

<p>예시를 들어보자면, </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'학생 이름'</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>위의 Student 모델이 있다고 가정할때에, 해당 모델의 데이터베이스를 조회하는 명령어들은 아래와 같습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Student.objects.all()   # Student 의 모든 객체를 조회 </span><br><span class="line">Student.objects.get(name='장고쟁이') # 이름이 장고쟁이인 Student 를 찾음</span><br></pre></td></tr></table></figure>

<br>



]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 12편 - Meta Options</title>
    <url>/2020/08/09/Django-Models-12%ED%8E%B8-Meta-Options/</url>
    <content><![CDATA[<h2 id="Models-Meta-Options"><a href="#Models-Meta-Options" class="headerlink" title="Models - Meta Options"></a>Models - Meta Options</h2><br>

<blockquote>
<p>Metadata </p>
<p>데이터의 집합체로 다른 데이터에 대한 설명과 정보를 제공합니다 </p>
</blockquote>
<br>

<p>모델에 metadata 를 부여할수 있습니다. 클래스 안에 Meta 클래스를 사용해서 부여할수 있습니다. </p>
<p><br>아래 예시와 같이 모델 클래스 안에 부가적으로, Meta 클래스를 넣어서 metadata 를 넣을수 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ox</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    horn_length = models.IntegerField()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 아래와 같이 Ox 모델 클래스 안쪽에 Meta 클래스를 넣어서 metadata 를 부여 할수 있습니다 </span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">"horn_length"</span>]</span><br><span class="line">        verbose_name_plural = <span class="string">"oxen"</span></span><br></pre></td></tr></table></figure>

<br>

<p>필드가 아닌 무엇이든, 모델의 메타데이터가 될수 있습니다. </p>
<p><br>필드는, 메타 데이터가 될수 없습니. </p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>정렬 옵션인 ordering, </p>
<p>데이터 베이스 테이블명,  db_table </p>
<p>혹은 사람이 읽기 편한 단수와 복수 이름들인, verbose_name, verbose_name_plural </p>
<p>이런것들이 Meta 클래스안에 정의 될수 있습니다. </p>
</blockquote>
<br>

<p>모델에 대한 class Meta 적용은 전적으로 선택 사항입니다. </p>
<br>

<p>Meta Option 에 가능한 모든 옵션들에 대해서는,  model option reference 문서에서 보면 됩니다. </p>
<br>

<h2 id="Meta-option-리스트"><a href="#Meta-option-리스트" class="headerlink" title="Meta option 리스트"></a>Meta option 리스트</h2><br>

<p>메타 옵션에는 아래와 같은 항목들이 존재합니다. </p>
<p>모든 리스트를 확인하고 싶다면, <a href="https://docs.djangoproject.com/en/3.0/ref/models/options/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/3.0/ref/models/options/</a></p>
<p><br>링크를 확인 하면 됩니다. </p>
<table>
<thead>
<tr>
<th>Meta Options</th>
<th>Function</th>
<th>Remarks</th>
</tr>
</thead>
<tbody><tr>
<td>abstract</td>
<td>모델이 abstract base class 가 됩니다</td>
<td><code>abstract = True</code></td>
</tr>
<tr>
<td>app_label</td>
<td>모델이 INSTALLED_APPS 밖에 있는 어플리케이션에 존재할때에 선언합니다</td>
<td><code>app_label = myapp</code></td>
</tr>
<tr>
<td>base_manager_name</td>
<td>메니저의 속성 이름을 지정합니다. 예를들면, objects</td>
<td></td>
</tr>
<tr>
<td>db_table</td>
<td>해당 모델을 위한 데이터베이스 테이블 명을 지정합니다</td>
<td><code>db_table = &#39;music_album&#39;</code></td>
</tr>
<tr>
<td>db_tablespace</td>
<td>데이터베이스 테이블 스페이스의 이름</td>
<td></td>
</tr>
<tr>
<td>default_manager_name</td>
<td>해당 모델을 위해 사용할 메니저의 이름을 지정합니다</td>
<td></td>
</tr>
<tr>
<td>default_related_name</td>
<td>관련된 객체에서 역으로 접근할 이름을 지정합니다.  기본값은, <code>모델명_set</code> 입니다</td>
<td></td>
</tr>
<tr>
<td>get_latest_by</td>
<td>보편적으로 ,DateField, DateTimeField 혹은 IntegerField 같은 모델명에 사용합니다.</td>
<td>get_latest_by = “order_date”, get_latest_by = [‘-priority’, ‘order_date’]</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 11편 - Fields (Field name restrictions)</title>
    <url>/2020/08/08/Django-Models-11%ED%8E%B8-Fields-Field-name-restrictions/</url>
    <content><![CDATA[<h2 id="Models-Fields-Field-Name-Restrictions"><a href="#Models-Fields-Field-Name-Restrictions" class="headerlink" title="Models - Fields(Field Name Restrictions)"></a>Models - Fields(Field Name Restrictions)</h2><br>

<h3 id="Field-name-restrictions"><a href="#Field-name-restrictions" class="headerlink" title="Field name restrictions"></a>Field name restrictions</h3><br>

<p>Django 는 모델 필드 이름들에 대한 제약이 있습니다. </p>
<br>

<ol>
<li><p>필드명은 파이썬 예약어들이 될수 없습니다. 만약 사용한다면, 파이썬 문법 에러를 발생 시킵니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">	<span class="keyword">pass</span> = models.IntegerField()</span><br><span class="line"></span><br><span class="line"><span class="comment"># pass 는 파이썬에서 reversed word (예약어) 입니다 </span></span><br><span class="line"><span class="comment"># 따라서, 모델의 필드명이 될수 없습니다</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<br>

<ol start="2">
<li><p>필드명은 하나 이상의 언더스코어를 사용할수 없습니다. Django 의 쿼리 조회문이 언더스코어를 2개 사용하기 때문에, 필드명은, <code>__</code> 를 가질수 없습니다.  <br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">	foo__bar = models.IntegerField() </span><br><span class="line">	</span><br><span class="line"><span class="comment"># foo__bar 는 언더스코어 2개를 가지고 있습니다. 잘못된 필드명입니다.</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<br>

<ol start="3">
<li><p>비슷한 이유로, 언더스코어로 끝나면 안됩니다. 쿼리 구문과 겹치기 때문입니다 <br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">	foobar_ = models.InegerField() </span><br><span class="line">	</span><br><span class="line"><span class="comment"># foobar_ 처럼 언더스코어로 끝나는 필드명은 사용하면 안됩니다.</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<br>

<a id="more"></a>



<br>

<p>하지만, 이런 제약들은 유도리 있게 잘 사용될수 있습니다. 필드명은 데이터베이스 컬럼명과 꼭 같지 않아도 되기 때문입니다. </p>
<br>

<p>join, where 혹은 select 같은 SQL 예약어들은 모델 필드명에 사용해도 됩니다. </p>
<p><br>Django 는 모든 SQL 쿼리 기반에서의 데이터베이스 테이블 이름들과 컬럼명들에서 자유롭습니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 10편 - Fields (Models across files)</title>
    <url>/2020/08/07/Django-Models-10%ED%8E%B8-Fields-Models-across-files/</url>
    <content><![CDATA[<h2 id="파일사이에-모델들"><a href="#파일사이에-모델들" class="headerlink" title="파일사이에 모델들"></a>파일사이에 모델들</h2><br>

<blockquote>
<p>다른 앱에 존재하는 모델끼리 관계를 형성해도 괜찮습니다. </p>
<p>다른 앱에 존재하는 모델을 사용하려면, 관계된 모델을 파일 상단에 가져와서 사용합니다. </p>
</blockquote>
<br>

<p>다른 모델 클래스를 가져온 다음에는, 필요한곳에 사용하면 됩니다. </p>
<br>

<p>공식문서에서는 예시가 많이 빈약한데, 프로젝트 구조가 아래처럼 되어 있다고 가정합니다. </p>
<br>

<blockquote>
<p>order 라는 앱이 있고, product 라는앱이 있습니다 </p>
<br>

<p>이런 구조안에서, order/models.py 파일에서, product/models.py 에 있는 모델을 </p>
<p>가져다 사용할수 있습니다.  </p>
</blockquote>
<p><br><a id="more"></a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">├── config</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── manage.py</span><br><span class="line">├── order</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── forms.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── product</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── forms.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><br>

<blockquote>
<p>파일 상단에, 다른 앱에 존재하는 클래스를 가져와서 사용하면 됩니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> order.models <span class="keyword">import</span> Order 	</span><br><span class="line"></span><br><span class="line"><span class="comment"># order 앱에 있는 models.py 에서 Order 라는 모델을 불러옴</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    order = models.ForeignKey(Order, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>

<br>

<h2 id="공식문서-예시"><a href="#공식문서-예시" class="headerlink" title="공식문서 예시"></a>공식문서 예시</h2><br>

<p>공식문서 예시에서는, geography 에 있는 models 를 불러오고, 그 안에 있는 ZipCode 클래스를 가져와서 사용하는것을 보여주고 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"><span class="keyword">from</span> geography.models <span class="keyword">import</span> ZipCode </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    zip_code = models.ForeignKey(</span><br><span class="line">    ZipCode, on_delete=models.SET_NULL,</span><br><span class="line">    blank=<span class="literal">True</span>,</span><br><span class="line">    null=<span class="literal">True</span>, </span><br><span class="line">    )</span><br></pre></td></tr></table></figure>

<br>

<p>파일 상단에 다른 앱에 존재하는 모델을 불러오기 위해서는, 아래 형식으로 불러와주면 됩니다. </p>
<br>

<p><code>from &lt;앱이름&gt;.models import &lt;가져올클래스이름&gt;</code></p>
]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 9편 - One-to-One</title>
    <url>/2020/08/06/Django-Models-9%ED%8E%B8-One-to-One/</url>
    <content><![CDATA[<h2 id="Models-Relationships-One-to-One"><a href="#Models-Relationships-One-to-One" class="headerlink" title="Models - Relationships (One-to-One)"></a>Models - Relationships (One-to-One)</h2><br>

<h3 id="one-to-one-relationships"><a href="#one-to-one-relationships" class="headerlink" title="one-to-one relationships"></a>one-to-one relationships</h3><br>

<p>one-to-one 관계, 즉 1대 1 관계를 정의하기 위해서는, </p>
<p><br><code>OneToOneField</code>를 사용해 줍니다. 다른 필드 타입을 사용하는것과 비슷하게, 모델 클래스 안에 클래스 속성으로 정의해 줍니다. </p>
<br>

<p>OneToOneField 는 위치 인자를 필요로 합니다. </p>
<br>

<blockquote>
<p>OneToOneField 는 연결된 모델 클래스를, 필수 위치 인자로 받습니다 </p>
</blockquote>
<br>

<p>예를들어, “places” 라는 데이터베이스를 만들고 있었는데,  <code>address</code> 나 <code>phone number</code> 같이 매우 보편적인 것들을 데이터베이스에 만드려고 하는 상황이 올지 모릅니다. </p>
<br>

<p>places 라는 장소위에 restaurant 이라는 데이터베이스를 만들고 싶으면, Place 를 만들때 포함하였던 </p>
<br>

<blockquote>
<p>데이터베이스 필드들을 Restaurant 모델에 반복하여 생성해 주기 보다는, </p>
<p>Restaurant 이 OneToOneField 를 Place 에 갖게 하면 됩니다. </p>
</blockquote>
<br>

<p>이게 무슨 이야기냐면,,, 하나의 장소 (Place)는 <code>address</code> 나 <code>phone number</code> 같은 보편적인 정보를 가지고 있을지 모릅니다. 그런데 만약, 하나의 장소 위에 식당 (restaurant) 을 만들고 싶다면? </p>
<br>

<p>restaurant 모델을 만들어 줄때에 <code>address</code> 나 <code>phone number</code> 같은 보편적인 필드들을 다시 정의하지 않고,</p>
<p><br>Restaurant 이 OneToOneField 를 사용하여 Place 모델과 연결되면 됩니다.  </p>
<br>

<a id="more"></a>

<br>

<p>사실, Restaurant 도 하나의 Place 이기 때문에, 이런 상황을 해결 하기 위해서는 보통 상속 개념을 사용합니다. </p>
<p>클래스를 상속 하면, 상속받는 클래스의 필드와 메서드들을 사용할수 있다는것을 숙지해둡시다. </p>
<br>

<p>데이터베이스 상속은 암묵적으로, <code>one-to-one</code> 관계를 형성합니다. </p>
<br>

<h2 id="OneToOneField-예시"><a href="#OneToOneField-예시" class="headerlink" title="OneToOneField 예시"></a>OneToOneField 예시</h2><br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">80</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s the place"</span> % self.name </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># OneToOneField 의 첫번째 인자로, Place 클래스를 받음 </span></span><br><span class="line">    place = models.OneToOneField(Place, on_delete=models.CASCADE, 		 primary_key=<span class="literal">True</span>)</span><br><span class="line">    serves_hot_dogs = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    serves_pizza = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s the restaurant"</span> % self.place.name </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waiter</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    restaurant = models.ForeignKey(Restaurant, on_delete=models.CASCADE)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s the waiter at %s"</span> % (self.name, self.restaurant)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>위의 예시 모델에서, 하나의 장소 <code>Place</code> 에는 하나의 <code>Restaurant</code> 이 존재하고, 이는 <code>OneToOneField</code> 로 연결되어 있습니다. 하나의 <code>Restaurant</code> 에는 <code>ForeignKey</code> 로 연결되어 있는, <code>Waiter</code>  라는 모델이 존재합니다. </p>
<p><br>이는, 하나의 Restaurant 에 일하는 웨이터가 여러명 있을수 있는 관계를 모델링 한것입니다. <br><br></p>
<blockquote>
<p><code>OneToOneField</code> 는 선택 인자로 parent_link 를 받습니다. </p>
</blockquote>
<br>

<h2 id="Python-API-사용해보기"><a href="#Python-API-사용해보기" class="headerlink" title="Python API 사용해보기"></a>Python API 사용해보기</h2><br>

<p>장소 (Place) 2 곳을 생성해 줍니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: p1 = Place(name="명랑핫도그", address="성남시 분당구 정자1동")                                                                                                    </span><br><span class="line"></span><br><span class="line">In [2]: p1.save()                                                                                                                                                         </span><br><span class="line"></span><br><span class="line">In [3]: p2 = Place(name="피자헛", address="성남시 분당구 금곡동 불정로 87")                                                                                               </span><br><span class="line"></span><br><span class="line">In [4]: p2.save()</span><br></pre></td></tr></table></figure>

<br>

<p>식당을 생성해 주고, 부모 객체를 해당 객체의 primary key 로 전달해줍니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [5]: r = Restaurant(place=p1, serves_hot_dogs=True, serves_pizza=False)                                                                                                </span><br><span class="line"></span><br><span class="line">In [6]: r.save()</span><br></pre></td></tr></table></figure>

<br>

<p>r 은 Restaurant 의 인스턴스 이니까, 하나의 Restaurant 인스턴스는, 해당 장소에 접근할수 있습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [7]: r.place                                                                                                                                                           </span><br><span class="line">Out[7]: &lt;Place: 명랑핫도그 the place&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>반대로, 하나의 Place 는 restaurant 에 접근할수 있습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [8]: p1.restaurant                                                                                                                                                     </span><br><span class="line">Out[8]: &lt;Restaurant: 명랑핫도그 the restaurant&gt;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>p2 는 연결된 restaurant 이 아직 없습니다. </p>
<p>따라서, 아래 코드를 shell 에서 실행 하면, p2 에는 restaurant 이 없다고 나옵니다 </p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [9]: from django.core.exceptions import ObjectDoesNotExist                                                                                                             </span><br><span class="line"></span><br><span class="line">In [10]: try: </span><br><span class="line">    ...:     p2.restaurant </span><br><span class="line">    ...: except ObjectDoesNotExist: </span><br><span class="line">    ...:     print("There is no restaurant here.") </span><br><span class="line">    ...:                                                                                                                                                                  </span><br><span class="line"><span class="meta">#</span><span class="bash"> Shift + Enter 를 실행하면, 실행됨. </span></span><br><span class="line"></span><br><span class="line">There is no restaurant here.</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><code>hasattr</code> 메서드를 사용하여, 예외처리를 하지 않아도 됩니다. </p>
<ul>
<li><code>hasattr</code> 는 파이썬 내장함수 입니다.</li>
<li>객체가 주어진 이름의 어트리뷰트를 가지고 있을때 True 를 반환하고, 그렇지 않을때에 False 를 반환합니다.  </li>
<li><code>hasatt(object, name)</code></li>
</ul>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [11]: hasattr(p2, 'restaurant')                                                                                                                                        </span><br><span class="line">Out[11]: False</span><br></pre></td></tr></table></figure>

<br>

<p>할당 기호 (<code>=</code>) 를  사용하여, place 를 설정해 줍니다. place 는 Restaurant 의 primary key 이므로, save 는 새로운 restaurant 을 생성합니다 </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 위에서 r = Restaurant(place=p1, serves_hot_dogs=True, serves_pizza=False)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> r.place = p2 로 바꿔줍니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [12]: r.place = p2                                                                                                                                               </span><br><span class="line">In [13]: r.save()                                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [14]: p2.restaurant                                                                                                                                                    </span><br><span class="line">Out[14]: &lt;Restaurant: 피자헛 the restaurant&gt;</span><br><span class="line"></span><br><span class="line">In [15]: r.place                                                                                                                                                          </span><br><span class="line">Out[15]: &lt;Place: 피자헛 the place&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>Place 를 다시 역으로 바꿔줍니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [16]: p1.restaurant = r                                                                                                                                                </span><br><span class="line"></span><br><span class="line">In [17]: p1.restaurant                                                                                                                                                    </span><br><span class="line">Out[17]: &lt;Restaurant: 명랑핫도그 the restaurant&gt;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>One-To-One 관계가 할당 되기 이전에 </p>
<p>객체가 저장 되어 있어야 ValueError 가 나질 않습니다. </p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [18]: p3 = Place(name='Daemon Dogs', address='944 W. Fullerton')                                                                                                       </span><br><span class="line"></span><br><span class="line">In [19]: Restaurant.objects.create(place=p3, serves_hot_dogs=True, serves_pizza=False)                                                                                    </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-19-18b4cdec5239&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 Restaurant.objects.create(place=p3, serves_hot_dogs=True, serves_pizza=False)</span></span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>Restaurant.objects.all() 은 Restaurants 만 반환합니다. Place 는 반환하지 않습니다. </p>
<p>Place.objects.all() 은 Places 들을 반환합니다. Restaurant을 가지고 있던 안있던,  결과를 반환합니다. </p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [20]: Restaurant.objects.all()                                                                                                                                         </span><br><span class="line">Out[20]: &lt;QuerySet [&lt;Restaurant: 명랑핫도그 the restaurant&gt;, &lt;Restaurant: 피자헛 the restaurant&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [21]: Place.objects.order_by('name')                                                                                                                                   </span><br><span class="line">Out[21]: &lt;QuerySet [&lt;Place: 명랑핫도그 the place&gt;, &lt;Place: 피자헛 the place&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>관계간 룩업들을 사용하여, 해당 모델에 쿼리문을 작성할수 있습니다. </p>
</blockquote>
<br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [22]: Restaurant.objects.get(place&#x3D;p1)                                                                                                                                 </span><br><span class="line">Out[22]: &lt;Restaurant: 명랑핫도그 the restaurant&gt;</span><br><span class="line"></span><br><span class="line">In [23]: Restaurant.objects.get(place__pk&#x3D;1)                                                                                                                              </span><br><span class="line">Out[23]: &lt;Restaurant: 명랑핫도그 the restaurant&gt;</span><br><span class="line"></span><br><span class="line">In [24]: Restaurant.objects.filter(place__name__startswith&#x3D;&quot;명&quot;)                                                                                                          </span><br><span class="line">Out[24]: &lt;QuerySet [&lt;Restaurant: 명랑핫도그 the restaurant&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [25]: Restaurant.objects.exclude(place__address__contains&#x3D;&quot;헛&quot;)                                                                                                        </span><br><span class="line">Out[25]: &lt;QuerySet [&lt;Restaurant: 명랑핫도그 the restaurant&gt;, &lt;Restaurant: 피자헛 the restaurant&gt;]&gt;</span><br><span class="line"></span><br><span class="line"># 한글은 조회 필터가 안걸리는지, exclude 를 했는데도. 조회가 되서 나옵니다;;;;</span><br></pre></td></tr></table></figure>

<br>

<p>물론 거꾸로도 작동 합니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [27]: Place.objects.get(pk=1)                                                                                                                                          </span><br><span class="line">Out[27]: &lt;Place: 명랑핫도그 the place&gt;</span><br><span class="line"></span><br><span class="line">In [28]: Place.objects.get(restaurant__place=p1)                                                                                                                          </span><br><span class="line">Out[28]: &lt;Place: 명랑핫도그 the place&gt;</span><br><span class="line"></span><br><span class="line">In [29]: Place.objects.get(restaurant=r)                                                                                                                                  </span><br><span class="line">Out[29]: &lt;Place: 명랑핫도그 the place&gt;</span><br><span class="line"></span><br><span class="line">In [30]: Place.objects.get(restaurant__place__name__startswith="명")                                                                                                      </span><br><span class="line">Out[30]: &lt;Place: 명랑핫도그 the place&gt;</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>Waiter 를 Restaurant 에 추가해 줍니다. </p>
<p>Waiter는 Restaurant 에 ForeignKey 로 등록 되어 있습니다. </p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [31]: w = r.waiter_set.create(name="장고쟁이")                                                                                                                         </span><br><span class="line"></span><br><span class="line">In [32]: w                                                                                                                                                                </span><br><span class="line">Out[32]: &lt;Waiter: 장고쟁이 the waiter at 명랑핫도그 the restaurant&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>웨이터들을 쿼리를 통해 조회합니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [33]: Waiter.objects.filter(restaurant__place=p1)                                                                                                                      </span><br><span class="line">Out[33]: &lt;QuerySet [&lt;Waiter: 장고쟁이 the waiter at 명랑핫도그 the restaurant&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [34]: Waiter.objects.filter(restaurant__place__name__startswith="명")                                                                                                  </span><br><span class="line">Out[34]: &lt;QuerySet [&lt;Waiter: 장고쟁이 the waiter at 명랑핫도그 the restaurant&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="데이터베이스-리뷰"><a href="#데이터베이스-리뷰" class="headerlink" title="데이터베이스 리뷰"></a>데이터베이스 리뷰</h2><br>

<img src="/2020/08/06/Django-Models-9%ED%8E%B8-One-to-One/image1.png" class="">



<img src="/2020/08/06/Django-Models-9%ED%8E%B8-One-to-One/image2.png" class=""> 

<img src="/2020/08/06/Django-Models-9%ED%8E%B8-One-to-One/image3.png" class="">  

<p><br><br></p>
]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 8편 - Many-to-many 예시</title>
    <url>/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/</url>
    <content><![CDATA[<h2 id="Django-Models-ManyToMany-예시"><a href="#Django-Models-ManyToMany-예시" class="headerlink" title="Django Models - ManyToMany 예시"></a>Django Models - ManyToMany 예시</h2><br>

<h3 id="예시-개요"><a href="#예시-개요" class="headerlink" title="예시 개요"></a>예시 개요</h3><br>

<p>대학교에서 학생들이 듣는 과정들과 학생들에 대한 모델링을 합니다. </p>
<p><br>과정은, Course 로 표현하고, 과목들은 아래와 같이 몇개만 정리 합니다. </p>
<br>

<table>
<thead>
<tr>
<th>CourseID</th>
<th>CourseName</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Algorithm Design</td>
</tr>
<tr>
<td>2</td>
<td>Systems Programming</td>
</tr>
<tr>
<td>3</td>
<td>Object-Oriented Programming</td>
</tr>
</tbody></table>
<br>

<p>아래 학생들이 재학하고 있다고 가정합니다. </p>
<br>

<table>
<thead>
<tr>
<th>StudentID</th>
<th>Name</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>djangojeng-e</td>
</tr>
<tr>
<td>2</td>
<td>Jennifer Lawrence</td>
</tr>
<tr>
<td>3</td>
<td>Will Smith</td>
</tr>
</tbody></table>
<br>

<blockquote>
<p>학생들은, 여러개의 과목들을 수강할수 있고. </p>
<p>한 과목은 여러명의 수강생들이 들을수 있습니다. </p>
<br>

<p>따라서, Students - to - Courses 는 Many-to-Many, 다대다 관계가 성립됩니다 </p>
<br>

<p>일반적인 Many-to-Many 관계로는, 학생의 수강날짜, 수강종료날짜, 그리고 성적 같은것들을 모두 기록할수 없기 때문에. 중간 모델을 하나 만들어서 관리할수 있습니다. </p>
</blockquote>
<br>

<a id="more"></a>

<h3 id="모델링"><a href="#모델링" class="headerlink" title="모델링"></a>모델링</h3><br>

<p>Student 와 Course 모델들의 중간 모델인, Enrolment 를 생성하고. </p>
<p><br>Enrolment 에 수강날짜, 수강종료날짜, 그리고 성적을 관리 할겁니다. </p>
<br>

<table>
<thead>
<tr>
<th>Student</th>
<th>Course</th>
<th>Enrolment</th>
</tr>
</thead>
<tbody><tr>
<td>name (CHARFIELD)</td>
<td>name (CHARFIELD)</td>
<td>student (ForeignKey, Student)</td>
</tr>
<tr>
<td></td>
<td>enrolments - Enrolment 라는 중간 모델을 통해서 Student 와 M2M을 성립</td>
<td>enrolment (ForeignKey, Course)</td>
</tr>
<tr>
<td></td>
<td>- 중간모델을 성립하기 위해 through 를 사용해야 함</td>
<td>enrolled_date (수강시작 날짜)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>finished_date (수강종료 날짜)</td>
</tr>
<tr>
<td></td>
<td></td>
<td>academic_record (성적)</td>
</tr>
</tbody></table>
<br>

<blockquote>
<p>이렇게 정리된 사항을, Django 모델로 작성을 해보면, 아래와 같습니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Student(models.Model);</span><br><span class="line">	name = models.CharField(max_length=<span class="number">40</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    enrolments = models.ManyToManyField(Student, through=<span class="string">'Enrolment'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    	<span class="keyword">return</span> self.name </span><br><span class="line">    	</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Enrolment</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    student = models.ForeignKey(Student, on_delete=models.CASCADE)</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE)</span><br><span class="line">    enrolled_date = models.DateTimeField()</span><br><span class="line">    finished_date = models.DateTimeField(blank=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 학점을 관리 하기 위해서, 등급을 ABCDEF 로 나눕니다 </span></span><br><span class="line">    <span class="comment"># 학점 선택을 위해서, models.TextChoice 로 선택할수 있는 학점을 밑에 넣어줍니다. </span></span><br><span class="line">    </span><br><span class="line">    AcademicType = models.TextChoices(<span class="string">'AcademicType'</span>, <span class="string">'A B C D E F'</span>)</span><br><span class="line">    </span><br><span class="line">    academic_record = models.CharField(blank=<span class="literal">True</span>, choices=AcademicType.choices, 					   max_length=<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self.student + <span class="string">" "</span></span><br><span class="line">               + self.course + <span class="string">" "</span></span><br><span class="line">               + self.enrolled_date + <span class="string">" "</span></span><br><span class="line">               + self.finished_date + <span class="string">" "</span></span><br><span class="line">               + self.academic_record)</span><br></pre></td></tr></table></figure>



<br>

<h2 id="객체-생성-연습"><a href="#객체-생성-연습" class="headerlink" title="객체 생성 연습"></a>객체 생성 연습</h2><br>

<p>아래 테이블에 정리된 데이터 처럼, 객체 생성 연습을 해봅니다. </p>
<br>

<table>
<thead>
<tr>
<th>CourseID</th>
<th>CourseName</th>
<th>StudentID</th>
<th>StudentName</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>Algorithm Design</td>
<td>1</td>
<td>djangojeng-e</td>
</tr>
<tr>
<td>2</td>
<td>Systems Programming</td>
<td>2</td>
<td>Jennifer Lawrence</td>
</tr>
<tr>
<td>3</td>
<td>Object-Oriented Programming</td>
<td>3</td>
<td>Will Smith</td>
</tr>
</tbody></table>
<br>

<blockquote>
<p>shell_plus  를 사용해서, 객체 생성을 해보았습니다. </p>
<p>Student 와 Course 데이터 생성 </p>
</blockquote>
<br>

<h3 id="Student-와-Course-객체-생성"><a href="#Student-와-Course-객체-생성" class="headerlink" title="Student 와 Course 객체 생성"></a>Student 와 Course 객체 생성</h3><br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: djangojeng_e = Student.objects.create(name="장고쟁이")                                                                                                            </span><br><span class="line"></span><br><span class="line">In [2]: jennifer = Student.objects.create(name="Jennifer Lawrence")                                                                                                       </span><br><span class="line"></span><br><span class="line">In [3]: will = Student.objects.create(name="Will Smith")                                                                                                                  </span><br><span class="line"></span><br><span class="line">In [4]: algorith_design = Course.objects.create(name="Algorith Design")                                                                                                   </span><br><span class="line"></span><br><span class="line">In [5]: systems_programming = Course.objects.create(name="Systems Programming")                                                                                           </span><br><span class="line"></span><br><span class="line">In [6]: object_oriented_programming = Course.objects.create(name="Object Oriented Programming")</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>db 에 아래와 같이 저장 됩니다 </p>
</blockquote>
<br>

<img src="/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/image1.png" class="">

<br>

<img src="/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/image2.png" class="">

<br>

<h3 id="Student-객체-둘러보기"><a href="#Student-객체-둘러보기" class="headerlink" title="Student 객체 둘러보기"></a>Student 객체 둘러보기</h3><br>

<p>shell 에서, 아래와 같이 Student 객체를 생성후, <code>dir(인스턴스)</code>를 쳐보면, 해당 인스턴스의 메서드들이 모두 나열됩니다. 이 메서드중에, 가장 중요한것만 나열해 봅니다.  (<code>__메서드</code> 들은 모두 빼주고 나열함)</p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">djangojeng_e = Student.objects.create(name='장고쟁이')     </span><br><span class="line"></span><br><span class="line">dir(djangojeng_e)                                                                                                                         </span><br><span class="line">['DoesNotExist',</span><br><span class="line"> 'MultipleObjectsReturned',</span><br><span class="line"> 'course_set',</span><br><span class="line"> 'delete',</span><br><span class="line"> 'enrolment_set',</span><br><span class="line"> 'id',</span><br><span class="line"> 'name',</span><br><span class="line"> 'pk',</span><br><span class="line"> 'save',</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> djangojeng_e 인스턴스로 호출가능한것들</span></span><br><span class="line">djangojeng_e.id </span><br><span class="line">djangojeng_e.name </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 해당 인스턴스와 연관된 enrolment 객체에 접근 가능 </span></span><br><span class="line">djangojeng_e.enrolment_set   </span><br><span class="line"><span class="meta">#</span><span class="bash"> 예를들면, </span></span><br><span class="line">djangojeng_e.enrolment_set.all() </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 해당 인스턴스와 연관된 course 객체에 접근 가능 </span></span><br><span class="line">djangojeng_e.course_set </span><br><span class="line"><span class="meta">#</span><span class="bash"> 예를들면, </span></span><br><span class="line">djangojeng_e.course_set.all()</span><br></pre></td></tr></table></figure>

<br>



<h3 id="Course-객체-둘러보기"><a href="#Course-객체-둘러보기" class="headerlink" title="Course 객체 둘러보기"></a>Course 객체 둘러보기</h3><br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oop = Course.objects.create(name='객체지향 프로그래밍')</span><br><span class="line">dir(oop)</span><br><span class="line"></span><br><span class="line">['DoesNotExist',</span><br><span class="line"> 'MultipleObjectsReturned',</span><br><span class="line"> 'delete',</span><br><span class="line"> 'enrolment_set',</span><br><span class="line"> 'enrolments',</span><br><span class="line"> 'id',</span><br><span class="line"> 'name',</span><br><span class="line"> 'pk',</span><br><span class="line"> 'save',</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">oop.id </span><br><span class="line">oop.name</span><br><span class="line">oop.pk</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> oop 인스턴스와 연결된 enrolment 객체 조회 가능 </span></span><br><span class="line">oop.enrolment_set.all() </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> enrolments </span></span><br><span class="line">oop.enrolments</span><br></pre></td></tr></table></figure>

<br>

<br>

<br>

<h3 id="Enrolment-객체-생성"><a href="#Enrolment-객체-생성" class="headerlink" title="Enrolment 객체 생성"></a>Enrolment 객체 생성</h3><br>

<p>아래 테이블에 정리된대로, Enrolment 객체를 생성해 줍시다. </p>
<br>

<table>
<thead>
<tr>
<th>EnrolmentID</th>
<th>Student</th>
<th>Course</th>
<th>enrolled_date</th>
<th>finished_date</th>
<th>academic_record</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>djangojeng-e</td>
<td>Object-Oriented Programming</td>
<td>2020.04.20</td>
<td></td>
<td></td>
</tr>
<tr>
<td>2</td>
<td>Jennifer Lawrence</td>
<td>Object-Oriented Programming</td>
<td>2020.04.20</td>
<td></td>
<td></td>
</tr>
<tr>
<td>3</td>
<td>Will Smith</td>
<td>Systems Programming</td>
<td>2019.04.21</td>
<td>2020.04.21</td>
<td>A</td>
</tr>
</tbody></table>
<p><br><br></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> import datetime 을 먼저 하고 명령어를 실행해줘야 합니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [9]: e1 = Enrolment(student=djangojeng_e, </span><br><span class="line">                       course=oop, </span><br><span class="line">                       enrolled_date=datetime.datetime(2020, 4, 20))                                            </span><br><span class="line">In [10]: e1.save()          </span><br><span class="line"></span><br><span class="line">In [11]: oop.enrolments.all()                                                                                                                     </span><br><span class="line">Out[11]: &lt;QuerySet [&lt;Student: 장고쟁이&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [12]: djangojeng_e.course_set.all()     </span><br><span class="line"><span class="meta">#</span><span class="bash"> 장고쟁이 학생에 관련된 course 를 조회하려면, course_set.all() 하면 됩니다.                                                                                                   <span class="comment"># 참고로, djangojeng_e.enrolment_set.all() 하면, enrol 된 객체가 조회 됩니다.                             </span></span></span><br><span class="line">Out[12]: &lt;QuerySet [&lt;Course: 객체지향 프로그래밍&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">In [15]: e2 = Enrolment.objects.create(student=jennifer, </span><br><span class="line">course=oop, </span><br><span class="line">enrolled_date=datetime.datetime(2020, 4, 20))    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [17]: e3 = Enrolment.objects.create(student=will,  </span><br><span class="line">    ...: course=systems_programming,  </span><br><span class="line">    ...: enrolled_date=datetime.datetime(2019, 4, 19), </span><br><span class="line">    ...: finished_date=datetime.datetime(2020, 4, 20),  </span><br><span class="line">    ...: academic_record="A")</span><br></pre></td></tr></table></figure>

<br>

<p>데이터베이스 데이터를 저장할때, datetime 관련 에러가 날수가 있는데. 이 점에 대해서는 추후에 해결해봐야 할것 같습니다. </p>
<br>

<img src="/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/image3.png" class="">

<p><br><br></p>
<blockquote>
<p>add(), create() 혹은 set() 을 사용해서, </p>
<p>관계들을 생성 할수 있습니다. through_defaults 를 통해, 요구되는 필드값을 넣어줄수 있습니다. </p>
</blockquote>
<br>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">In [18]: john &#x3D; Student.objects.create(name&#x3D;&quot;John Snow&quot;)   </span><br><span class="line"></span><br><span class="line">In [19]: systems_programming.enrolments.add(john, through_defaults&#x3D;&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19)&#125;)</span><br><span class="line"></span><br><span class="line">In [20]: object_oriented_programming.enrolments.create(name&#x3D;&quot;Arya Stark&quot;, through_defaults&#x3D;&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19)&#125;) </span><br><span class="line"></span><br><span class="line">In [21]: algorithm_design.enrolments.set([djangojeng_e, jennifer, will], through_defaults&#x3D;&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19)&#125;) </span><br><span class="line"></span><br><span class="line">In [23]: algorithm_design.enrolments.all()                                                                                                                                </span><br><span class="line">Out[23]: &lt;QuerySet [&lt;Student: 장고쟁이&gt;, &lt;Student: Jennifer Lawrence&gt;, &lt;Student: Will Smith&gt;]&gt;</span><br></pre></td></tr></table></figure>



<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">john &#x3D; Student.objects.create(name&#x3D;&quot;John Snow&quot;)</span><br><span class="line">systems_programming.enrolments.add(jogn, through_defaults&#x3D;</span><br><span class="line">	&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19) &#125;)</span><br><span class="line"></span><br><span class="line">object_oriented_programming.enrolments.create(name&#x3D;&quot;Arya Stark&quot;, through_defaults&#x3D;&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19)&#125;)</span><br><span class="line"></span><br><span class="line">algorithm_design.enrolments.set(</span><br><span class="line">	[djangojeng_e, jennifer, will],</span><br><span class="line">	through_defaults&#x3D;&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19)&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">algorith_design.enrolments.all() </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">Out[23]: &lt;QuerySet [&lt;Student: 장고쟁이&gt;, &lt;Student: Jennifer Lawrence&gt;, &lt;Student: Will Smith&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/image4.png" class=""><br><br>

<blockquote>
<p>remove() 사용하기 </p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> oop 에서 장고쟁이 빼기 </span></span><br><span class="line"></span><br><span class="line">In [25]: object_oriented_programming.enrolments.all()                                                                                                             </span><br><span class="line">Out[25]: &lt;QuerySet [&lt;Student: 장고쟁이&gt;, &lt;Student: Jennifer Lawrence&gt;, &lt;Student: Arya Stark&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [26]: object_oriented_programming.enrolments.remove(djangojeng_e)                                                                                                 </span><br><span class="line">In [27]: object_oriented_programming.enrolments.all()                                                                                                             </span><br><span class="line">Out[27]: &lt;QuerySet [&lt;Student: Jennifer Lawrence&gt;, &lt;Student: Arya Stark&gt;]&gt;</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>many-to-many 로 관계된 모델들의 속성을 사용하여 </p>
<p>쿼리 생성하기 </p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 과목중에서, 수강중인 학생 이름이 will 로 시작하는 과목 찾기 </span></span><br><span class="line"></span><br><span class="line">In [28]: Course.objects.filter(enrolments__name__startswith='Will')           </span><br><span class="line">Out[28]: &lt;QuerySet [&lt;Course: Systems Programming&gt;, &lt;Course: Algorith Design&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>중간 모델을 사용하여, 쿼리 작성하기 </p>
<p>Student 가 중간 모델을 이용해서, 찾고자 하는 데이터를 조회 </p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Student 중에서, 아래 조건들을 충족하는 데이터 검색 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 수강 과목 이름이 <span class="string">"Systems Programming' 인것 </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 수강 시작 날짜가 2018년 4월 19일 이후인것들을 조회 </span></span><br><span class="line"></span><br><span class="line">In [30]: Student.objects.filter( </span><br><span class="line">    ...:                 course__name='Systems Programming', </span><br><span class="line">    ...:                 enrolment__enrolled_date__gte=datetime.datetime(2018, 4, 19))  </span><br><span class="line"></span><br><span class="line">Out[30]: &lt;QuerySet [&lt;Student: Will Smith&gt;, &lt;Student: John Snow&gt;]&gt;</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>Enrolment 의 정보를 바로 접근 </p>
<p>Enrolment 모델에 직접 쿼리를 사용해서 데이터를 조회할수 있습니다 </p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [32]: will_enrolment = Enrolment.objects.get(course=systems_programming, student=will)                                                                                 </span><br><span class="line">In [33]: will_enrolment.enrolled_date                                                                                                                               </span><br><span class="line">Out[33]: datetime.datetime(2019, 4, 19, 0, 0, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line">In [34]: will_enrolment.finished_date                                                                                                                               </span><br><span class="line">Out[34]: datetime.datetime(2020, 4, 20, 0, 0, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line">In [35]: will_enrolment.academic_record                                                                                                                             </span><br><span class="line">Out[35]: 'A'</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>Student 객체에서부터, enrolment 에 접근하는 many-to-many reverse </p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">n [36]: will_enrolment = will.enrolment_set.get(course=systems_programming)                                                                                              </span><br><span class="line"></span><br><span class="line">In [37]: will_enrolment.enrolled_date                                                                                                                                     </span><br><span class="line">Out[37]: datetime.datetime(2019, 4, 19, 0, 0, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line">In [38]: will_enrolment.finished_date                                                                                                                                     </span><br><span class="line">Out[38]: datetime.datetime(2020, 4, 20, 0, 0, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line">In [39]: will_enrolment.academic_record                                                                                                                                   </span><br><span class="line">Out[39]: 'A'</span><br></pre></td></tr></table></figure>

<br>

<p>reverse, back_ward relationship, forward relationship 에 대한 정리도 필요할것으로 보입니다! </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 8편 - Relationships (Many-to-many) B</title>
    <url>/2020/08/04/Django-Models-8%ED%8E%B8-Relationships-Many-to-many-B/</url>
    <content><![CDATA[<h2 id="Many-to-Many-2편"><a href="#Many-to-Many-2편" class="headerlink" title="Many-to-Many-2편"></a>Many-to-Many-2편</h2><br>

<p>Many-To-Many 인스턴스들 생성하기 </p>
<br>

<p>지난 포스팅에서, through 를 사용하여, 중간 모델을 가진 Many-to-Many 관계에 대한 모델을 작성했고. </p>
<br>

<p>중간모델 Membership 을 사용하는 ManyToManyField 를 설정하였습니다. </p>
<p><br>이제 몇가지 many-to-many relationship 을 생성할 준비가 되어 있습니다. 중간 모델의 인스턴스들을 생성하면서 Membership 을 사용하는 Many-to-Many 관계를 생성해 봅시다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    members = models.ManyToManyField(Person, through=<span class="string">'Membership'</span>)</span><br><span class="line">    <span class="comment"># through="Membership" 을 넣어줌으로, </span></span><br><span class="line">    <span class="comment"># Membership 이 Person 과 Group  사이의 중간 모델 역할을 하게 만들수 있음 </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Membership</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 중간 모델에서는, Person과 Group이 ForeignKey 로 등록 되어 있어야 함 </span></span><br><span class="line">    person = models.ForeignKey(Person, on_delete=models.CASCADE)</span><br><span class="line">    group = models.ForeignKey(Group, on_delete=models.CASCADE)</span><br><span class="line">    date_joined = models.DateField() </span><br><span class="line">    invite_reason = models.CharField(max_length=<span class="number">64</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>위 모델을 바탕으로, shell 에서 객체를 만들어 봅니다. </p>
<br>

<blockquote>
<p>shell 에 접속하려면,</p>
<p>python manage.py shell 명령어를 커맨드 라인에서 실행 시키면 됩니다.  </p>
</blockquote>
<br>

<a id="more"></a>

<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ringo = Person.objects.create(name="Ringo Starr")</span><br><span class="line">paul = Person.objects.create(name="Paul McCartney")</span><br><span class="line">beatles = Group.objects.create(name="The Beatles")</span><br><span class="line"></span><br><span class="line">import datetime </span><br><span class="line"></span><br><span class="line">m1 = Membership(person=ringo, group=beatles, date_joined=datetime.datetime(1962,8, 16), invite_reason="Needed a new drummer.")</span><br><span class="line"></span><br><span class="line">m1.save()</span><br><span class="line"></span><br><span class="line">In [7]: beatles.members.all()                                                                                                                                             </span><br><span class="line">Out[7]: &lt;QuerySet [&lt;Person: Ringo Starr&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [8]: ringo.group_set.all()                                                                                                                                             </span><br><span class="line">Out[8]: &lt;QuerySet [&lt;Group: The Beatles&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [9]: m2 = Membership.objects.create(person=paul, group=beatles, date_joined=datetime.datetime(1960, 8, 1), invite_reason="Wanted to form a band.")                     </span><br><span class="line"></span><br><span class="line">In [10]: beatles.members.all()                                                                                                                                            </span><br><span class="line">Out[10]: &lt;QuerySet [&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>add(), create() 혹은 set() 을 사용해서 관계들을 생성할수도 있습니다. </p>
<p>요구되는 필드에 through_defaults 만 명시해주면 됩니다. </p>
</blockquote>
<br>

<p>공식문서에는, 아래와 같은 예제가 있는데. shell 에서 쳐보면, 하나도 제대로 동작하지 않습니다. </p>
<p><br>공식문서를 무슨생각으로 만들어 놓은건지;;; </p>
<br>

<p>john 이라는 객체를 생성하면 잘 동작할것입니다만. 우선, 아래와 같이 연습 내역을 담습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [11]: beatles.members.add(john, through_defaults=&#123;'date_joined': date(1960, 8, 1)&#125;)                                                                                    </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-11-47e459b083b9&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 beatles.members.add(john, through_defaults=&#123;<span class="string">'date_joined'</span>: date(1960, 8, 1)&#125;)</span></span><br><span class="line"></span><br><span class="line">NameError: name 'john' is not defined</span><br><span class="line"></span><br><span class="line">In [12]: beatles.members.create(name="George Harrison", through_defaults=&#123;'date_joined': datetime.datetime(1960, 8, 1)&#125; </span><br><span class="line">    ...: )                                                                                                                                                                </span><br><span class="line">Out[12]: &lt;Person: George Harrison&gt;</span><br><span class="line"></span><br><span class="line">In [13]: beatles.members.set([john, paul, ringo, george], through_defaults=&#123;'date_joined': date(1960, 8, 1)&#125;)                                                             </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-13-cad5aee581b9&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 beatles.members.set([john, paul, ringo, george], through_defaults=&#123;<span class="string">'date_joined'</span>: date(1960, 8, 1)&#125;)</span></span><br><span class="line"></span><br><span class="line">NameError: name 'john' is not defined</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>만약 중간 모델에 의해서, through 테이블이 커스텀 정의가 되었는데, (model1, model2 ) 페어에 강제적으로 고유성을 요구하지 않고, 다중의 값을 허용한다면, remove() 를 호출해서 모든 중간 모델 인스턴스들을 제거할수 있습니다.</p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [14]: Membership.objects.create(person=ringo, group=beatles, date_joined=datetime.datetime(1968, 9, 4), invite_reason="You've been gone for a month and we miss you.") </span><br><span class="line">Out[14]: &lt;Membership: Membership object (9)&gt;</span><br><span class="line"></span><br><span class="line">In [15]: beatles.members.all()                                                                                                                                            </span><br><span class="line">Out[15]: &lt;QuerySet [&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;, &lt;Person: George Harrison&gt;, &lt;Person: Ringo Starr&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [16]: beatles.members.remove(ringo)                                                                                                                                    </span><br><span class="line"></span><br><span class="line">In [17]: beatles.members.all()                                                                                                                                            </span><br><span class="line">Out[17]: &lt;QuerySet [&lt;Person: Paul McCartney&gt;, &lt;Person: George Harrison&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>clear() 메서드는, </p>
<p>하나의 인스턴스를 위한 모든 Many-to-Many 관계들을 없애줍니다.</p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [18]: # 비틀즈가 해산                                                                                                                                                  </span><br><span class="line"></span><br><span class="line">In [19]: beatles.members.clear()                                                                                                                                          </span><br><span class="line"></span><br><span class="line">In [20]: # 이 방식은 중간 모델 인스턴스를 삭제해줍니다                                                                                                                    </span><br><span class="line"></span><br><span class="line">In [21]: Membership.objects.all()                                                                                                                                         </span><br><span class="line">Out[21]: &lt;QuerySet []&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>한번 many-to-many 관계를 성립하였으면, 쿼리들을 발행할수 있습니다. 보통의 many-to-many 관계와 같이, many-to-many 로 관계된 모델들의 속성들을 사용하여 쿼리를 사용할수 있습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 멤버의 이름이 <span class="string">'Paul'</span> 로 시작하는 그룹 찾기                                                                                                                     </span></span><br><span class="line"></span><br><span class="line">In [39]: Group.objects.filter(members__name__startswith='Paul')                                                                                                           </span><br><span class="line">Out[39]: &lt;QuerySet [&lt;Group: The Beatles&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>중간 모델을 사용하면서, 중간 모델의 속성을 쿼리 조회 할수 있습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Person 중에, group 이름이 <span class="string">'The Beatles'</span> 이면서 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Membership에 든 날짜가 1961년 1월 1일 보다 이후인 객체를 조회 </span></span><br><span class="line">In [40]: Person.objects.filter( </span><br><span class="line">    ...:     group__name='The Beatles', </span><br><span class="line">    ...:     membership__date_joined__gt=datetime.datetime(1961, 1, 1))                                                                                                   </span><br><span class="line">Out[40]: &lt;QuerySet [&lt;Person: Ringo Starr&gt;]&gt;</span><br></pre></td></tr></table></figure>



<br>

<blockquote>
<p>membership  의 정보를 바로 접근하고 싶으면, </p>
<p>바로 Membership 모델에 쿼리를 보내면 됩니다. </p>
</blockquote>
<br>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [41]: ringos_membership = Membership.objects.get(group=beatles, person=ringo)                                                                                          </span><br><span class="line"></span><br><span class="line">In [42]: ringos_membership.date_joined                                                                                                                                    </span><br><span class="line">Out[42]: datetime.date(1962, 8, 16)</span><br><span class="line"></span><br><span class="line">In [43]: ringos_membership.invite_reason                                                                                                                                  </span><br><span class="line">Out[43]: 'Needed a new drummer.'</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>Person 객체에서 부터 거꾸로 가는  </p>
<p>Many-To-Many reverse 관계도 존재합니다 </p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [44]: ringos_membership = ringo.membership_set.get(group=beatles)                                                                                                      </span><br><span class="line"></span><br><span class="line">In [45]: ringos_membership.date_joined                                                                                                                                    </span><br><span class="line">Out[45]: datetime.date(1962, 8, 16)</span><br><span class="line"></span><br><span class="line">In [46]: ringos_membership.invite_reason                                                                                                                                  </span><br><span class="line">Out[46]: 'Needed a new drummer.'</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>공식문서가 예시도 너무 불충분하고,, 뭐라 설명은 하는지는 잘 모르겠습니다. </p>
<p><br>다음 포스팅에서는, ManyToMany 예제를 좀 들어서, 데이터베이스 검색 및 쿼리문 사용을 좀 연습 해봐야 할것 같습니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 8편 - Relationships (Many-to-many) A</title>
    <url>/2020/08/03/Django-Models-8%ED%8E%B8-Relationships-Many-to-many/</url>
    <content><![CDATA[<h2 id="Many-to-many-Relationships"><a href="#Many-to-many-Relationships" class="headerlink" title="Many-to-many Relationships"></a>Many-to-many Relationships</h2><br>

<p>many-to-many 관계를 정의하기 위해서는, ManyToManyField 를 사용해 주면 됩니다. </p>
<p><br>다른 Field 타입을 사용하는것과 비슷하게 사용합니다. 클래스 속성에 포함해주는 방식으로 사용하면 됩니다. </p>
<br>

<p>ManyToManyField 는 위치 인자를 필요로 합니다. </p>
<br>

<blockquote>
<p>관계된 모델을 </p>
<p>ManyToManyField 의 위치인자로 넣어주어야 합니다 </p>
</blockquote>
<br>

<p>예를들면, 하나의 피자가 다수의 토핑 객체를 가진다면, </p>
<p><br>- 토핑은 다수의 피자에 있을수 있고, 각 피자는 다수의 토핑들을 가질수 있습니다. </p>
<p>이러한 관계는 아래의 형태로 표현될수 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topping</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pizza</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    <span class="comment"># toppings = models.ManyToManyField(Topping)</span></span><br></pre></td></tr></table></figure>

<p><br><a id="more"></a></p>
<p>ForeignKey 와 마찬가지로, 재귀적인 관계를 생성할수도 있습니다. (객체가 many-to-many 관계를 자기 자신에게 갖는것). 그리고, 아직 정의되지 않은 모델과도 관계를 생성할수도 있습니다. </p>
<br>

<blockquote>
<p>필수는 아니지만, 권장 사항으로는, </p>
<p>ManyToManyField 필드명은, 관계된 모델 객체의 복수형으로 표현합니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pizza</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    toppings = models.ManyToManyField(Topping)</span><br><span class="line">    <span class="comment"># toppings 라고 복수형의 필드로 사용</span></span><br></pre></td></tr></table></figure>

<br>

<p>위 예시에서 Pizza 와 Topping, 두 모델을 예시로 들어봤는데. </p>
<p>두 모델중 한쪽에만 ManyToManyField 가 사용되어야 합니다. 양쪽 다 사용하지는 않습니다! </p>
<br>

<p>보통 ManyToManyField 인스턴스들은, Form 에서 수정될 객체에 생성됩니다. </p>
<p><br>위 예시에서는, Pizza 안에 toppings 가 들어가 있는데. Pizza 가 여러개의 topping 들을 가지고, 피자에 들어간 토핑을 고치는 개념이 Topping 이 Pizza 를 가지고, 토핑에 들어간 피자를 고치는것보다 자연스럽기 때문에. </p>
<p><br>Pizza 클래스안에 ManyToManyField 를 넣어준것입니다. </p>
<br>

<h2 id="Extra-fields-on-many-to-many-relationships"><a href="#Extra-fields-on-many-to-many-relationships" class="headerlink" title="Extra fields on many-to-many relationships"></a>Extra fields on many-to-many relationships</h2><br>

<p>many-to-many 관계에는, 추가적인 필드들이 존재합니다. </p>
<p><br>피자와 토핑같은 피자와 토핑을 섞고 매칭하는 다대다 관계를 다룰때는, 일반적인 ManyToManyField 만으로도 충분히 다룰수 있습니다. </p>
<br>

<p>하지만, 때때로, 우리는 두개의 모델 사이의 관계를 관련지어서 데이터들을 생각할 필요가 생깁니다. </p>
<br>

<p>예를들어서, 뮤지컬 그룹과 뮤지컬 그룹들에 속해 있는 뮤지션들의 관계를 생각해 봅시다. </p>
<p><br><br></p>
<p>한 사람과, 사람이 멤버로 속해 있는 그룹 사이에는 many-to-many 관계를 사용할수 있습니다. 따라서, ManyToManyField 를 사용하여 해당 관계를 표현할수 있습니다. 그렇지만, 멤버쉽에 대한 조금 더 많은 세부 사항들을 수집하고 싶어질지 모릅니다. 예를들면, 아래와 같은 사항들을 따로 기록해 놓고 싶을지 모릅니다. </p>
<br>

<ul>
<li>사람이 어떤 날짜에 그룹에 합류 하였는지  </li>
<li>언제 떠나갔는지 </li>
<li>가입 장소는 어디인지 </li>
<li>기타 정보 </li>
</ul>
<br>

<p>이러한 상황들에서, Django 는 many-to-many 관계를 관리하기 위한 모델을 명시할수 있게 해줍니다.  </p>
<p><br><code>extra field</code> 를 중간 모델에 넣어둘수 있습니다.  여기서 이야기 하는 중간 모델은, 새로운 모델로써, ManyToManyField 와 연관되어 있고, through 인자를 사용하여, 해당 모델이 중간 모델 역할을 할거라고 명시할수 있습니다. <br></p>
<br>

<blockquote>
<p>조금 더 복잡한 many-to-many 관계를 관리하기 위해, 두 모델 사이에 어떠한 모델을 생성해 주고. </p>
<p>extra field  들을 중간 모델에 넣어주고 사용할수 있습니다. </p>
<br>

<p>중간 모델은 ManyToManyField 와 연관되어 있고, through 인자를 사용하여, </p>
<p>해당 모델이 중간 모델 역할을 할것이라고 명시할수 있습니다. </p>
<br>

<p>코드를 보면서 이해하는것이 더 빠를것입니다. 뮤지션 예시를 보면 아래와 같습니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    members = models.ManyToManyField(Person, through=<span class="string">'Membership'</span>)</span><br><span class="line">    <span class="comment"># through = "Membership" 을 넣어줌으로, </span></span><br><span class="line">    <span class="comment"># Membership 이 Person 과 Group 사이의 중간 모델 역할을 하게 만들수 있음 </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Membership</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 중간 모델에서는, Person 과 Group 이 ForeginKey 로 등록 되어 있어야 함 </span></span><br><span class="line">    person = models.ForeignKey(Person, on_delete=models.CASCADE)</span><br><span class="line">    group = models.ForeignKey(Group, on_delete=models.CASCADE)</span><br><span class="line">    date_joined = models.DateField()</span><br><span class="line">    invite_reason = models.CharField(max_length=<span class="number">64</span>)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="중간모델의-제약사항"><a href="#중간모델의-제약사항" class="headerlink" title="중간모델의 제약사항"></a>중간모델의 제약사항</h2><p><br><br></p>
<ul>
<li>중간 모델은 반드시 하나의 소스모델을 가르키는 foreign Key 를 가져야 합니다 (예시에서는 Group 이 됩니다) </li>
<li>Group 모델이 바로 소스 모델인데, Group class 안에 <code>through=&#39;Membership&#39;</code> 을 사용해서, Membership 이 Group 모델에 대한 중간 모델이 되게 만들어 주었습니다. </li>
<li>따라서, 중간 모델인  Membership 에서 1개의 Foreign Key 를 소스 모델인 Group 에 지정해 주었습니다. </li>
</ul>
<br>

<p><strong>유의사항</strong></p>
<br>

<p>소스모델이 두개 이상이라면, ManyToManyField.through_fields 를 사용해서, Django 가 데이터베이스 관계를 위해 사용할 foreign key 들을 명시적으로 지정해 줘야 합니다. </p>
<p>만약 foreign key 가 한개 이상 있고, through_fields 가 지정되어 있지 않으면, 유효성 에러가 발생하게 됩니다. </p>
<p><br>비슷한 제약 사항이 타겟 모델에 쓰이는 Foreign key 에도 적용됩니다 (예시에서는, Person 모델이 타겟 모델입니다)<br><br></p>
<p>- 중간 모델을 통해서 many-to-many 관계를 자기자신에 갖는 모델들은, 두개의 Foreign key 들을 같은 모델에 지정하는것이 허용됩니다. 하지만, 이것은 many-to-many 관계의 양쪽 사이드로 취급됩니다. 만일 2개 이상의 foreign key 들이 존재한다면, through_fields 를 사용해서 지정을 해줘야 합니다. 그렇지 않으면, 유효성 에러가 발생 합니다.  </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>many-to-many</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 7편 - Relationships (Many-to-one)</title>
    <url>/2020/08/03/Django-Models-7%ED%8E%B8-Relationships-Many-to-one/</url>
    <content><![CDATA[<h2 id="Models-Relationships-Many-to-one"><a href="#Models-Relationships-Many-to-one" class="headerlink" title="Models - Relationships (Many-to-one)"></a>Models - Relationships (Many-to-one)</h2><br>

<br>

<p>확실히, 관계형 데이터베이스의 장점은, 테이블들끼리 관계를 생성하는데에서 옵니다. </p>
<br>

<blockquote>
<p><strong>관계형 데이터베이스란?</strong></p>
<p>데이터베이스계의 주류로, </p>
<p>데이터를 로우 (Row:행, 줄) 과 컬럼 (Column: 열, 칸) 이라는 일종의 표 형태로 저장하고, </p>
<p>데이터의 종속성은 관계 (Relation) 으로 표현한다. </p>
<p>한 테이블에 있는 모든 로우는 같은 길이의 컬럼을 가지고 있으며, 이 컬럼의 구조와 데이터의 관계가 테이블 스키마 (Schema) 로 사전 정의 된다.</p>
</blockquote>
<br>

<br>

<p>Django 는 가장 공통적인 relational database 3가지를 지원합니다. </p>
<br>

<ul>
<li><p>many-to-one (1:M, 1 대 다수)</p>
</li>
<li><p>many-to-many (M:M, 다수 대 다수)</p>
</li>
<li><p>one-to-one (1:1, 일 대 일 )</p>
</li>
</ul>
<a id="more"></a>

<br>

<h2 id="Many-to-one-relationships"><a href="#Many-to-one-relationships" class="headerlink" title="Many-to-one relationships"></a>Many-to-one relationships</h2><br>

<p>다수 : 1 혹은 1: 다수 관계를 정의하기 위해서는, django.db.models.ForeignKey 를 사용합니다. </p>
<p>모델내에 클래스 속성으로 다른 필드 타입을 사용하는것과 비슷하게 사용할수 있습니다. </p>
<br>

<blockquote>
<p>ForeignKey 는 위치 인자를 필수적으로 필요로 합니다 </p>
<p>ForeignKey 를 사용하면, 다른 모델과 해당 필드에 관계를 만들어 놓을수 있습니다. </p>
<p>ForeignKey 를 사용할때에는, 위치인자에 관계를 만들고 싶은 다른 class 이름을 넣어줍니다. </p>
<br>

<p>예를들면, </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manufuacturer</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 여러대의 Car 는 1개의 Manufacturuer 를 가집니다 </span></span><br><span class="line">    <span class="comment"># ForeginKey 를 사용해서, 이 관계를 모델링 해줄수 있습니다. </span></span><br><span class="line">    <span class="comment"># 위의 Manufacturer 클래스를 소문자화한 이름으로 필드명을 짓는것이 권장 됩니다. </span></span><br><span class="line">    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>

<br>

<ul>
<li>Car 모델은 하나의 Manufacturer 를 가집니다 </li>
<li>하나의 Manufacturer (브랜드 공장) 은 여러개의 자동차를 생산합니다 </li>
<li>하지만, 각 자동차는 하나의 Manufacturer 만 가질수 있습니다 </li>
<li>다수 : 1 의 데이터베이스 관계를 성립하여, ForeignKey 를 이용해 위의 예시처럼 정의해주었습니다. </li>
</ul>
<br>

<p>또한, 재귀적인 관계를 생성할수도 있습니다 (many-to-one 관계를 스스로 갖는 객체) </p>
<br>

<p>필수는 아니지만, 권장되는 사항은, ForeignKey 필드 이름은 해당 모델의 소문자로 표현하는게 좋습니다. </p>
<p><br>하지만, 당연히 필드명은 우리가 원하는데로 지을수 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    company_that_makes_it = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 필드명을 company_that_makes_it 으로, 사용자가 사용하기 편하게 지어줬습니다 </span></span><br><span class="line">    <span class="comment"># 하지만, 이 필드명은 Manufacturer 의 소문자 형태인 manufacturer 로 짓는것이 권장됩니다.</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dev_Department</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    team = models.CharField(max_length=<span class="number">40</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dev_Staff</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">40</span>, verbose_name=<span class="string">"직원이름"</span>)</span><br><span class="line">    department = models.ForeignKey(Dev_Department, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure>

<br>

<ul>
<li>개발 조직에 있는 하나의 팀에는, 여러명의 직원이 소속될수 있습니다 </li>
<li>Dev_Staff 는, 직원의 이름과 부서 팀을 정의합니다. ForeignKey 를 사용하여, Dev_Department 와 관계를 가지게 정의되었습니다. </li>
</ul>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 6편 - Fields (verbose field names)</title>
    <url>/2020/08/02/Django-Models-6%ED%8E%B8-Fields-verbose-field-names/</url>
    <content><![CDATA[<h2 id="Models-Fields-verbose-field-names"><a href="#Models-Fields-verbose-field-names" class="headerlink" title="Models - Fields (verbose field names)"></a>Models - Fields (verbose field names)</h2><br>

<p><code>ForeignKey</code>, <code>ManyToManyField</code> 그리고 <code>OneToOneField</code> 들을 제외한, 각 필드 타입은 선택적으로 첫번째 위치인자로, <code>verbose name</code> 을 받습니다. </p>
<br>

<p><code>verbose name</code> 이 주어지지 않았을때는, Django 는 자동으로 field 의 속성명의 언더스코어를 공백으로 전환하여 verbose name 을 생성합니다. </p>
<br>

<blockquote>
<p>verbose name 은 </p>
<p>사용자가 사용하는 자세한 이름을 의미합니다 </p>
</blockquote>
<br>

<p><code>verbose name</code> 을 지정하지 않으면, 어드민에 표시되는 이름이 이상하다는것을 느낄수 있을겁니다. </p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>아래 예시에서, verbose name 은 “person’s first name” 입니다 </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_name = models.CharField(<span class="string">"person's first name"</span>, max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>



<br>

<blockquote>
<p>아래 예시에서는, verbose name 이 “first name” 입니다.</p>
<p>필드 타입의 첫번째 인자로, verbose name 이 명시되지 않았기 때문에, </p>
<p>필드명 first_name 에서, 언더스코어를 공백으로 전환하여 verbose name 을 표시합니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">first_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>



<br>

<blockquote>
<p>verbose_name 을 정의한 모델의 예시입니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Members</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'이름'</span>)</span><br><span class="line">    nick_name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">"닉네임"</span>)</span><br><span class="line">    birth_date = models.DateField(verbose_name=<span class="string">"생년월일"</span>, null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>위 Members 모델에서는, name, nick_name, birth_date 이 각각 한글로 표시된 verbose_name 들을 어드민에 표시할것입니다.  </p>
<br>

<h2 id="외래키-모델들"><a href="#외래키-모델들" class="headerlink" title="외래키 모델들"></a>외래키 모델들</h2><br>

<p>아직 살펴보지는 않았지만, <code>ForeignKey</code>, <code>ManyToManyField</code> 그리고 <code>OneToOneField</code> 들은 첫번째 인자로 모델 클래스가 옵니다. </p>
<blockquote>
<p>따라서, <code>verbose_name</code>을 키워드 인자로 사용해줍니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">poll = models.ForeignKey(Poll, on_delete=models.CASCADE, verbose_name=<span class="string">"the related poll"</span>)</span><br><span class="line"><span class="comment"># poll 은 ForeignKey (외래키) 로 Poll 이라는 클래스를 첫번째 인자로 받음 </span></span><br><span class="line"><span class="comment"># verbose_name 은 키워드 인자로 넣어줌 </span></span><br><span class="line"></span><br><span class="line">sites = models.ManyToManyField(Site, verbose_name=<span class="string">"list of sites"</span>)</span><br><span class="line"><span class="comment"># sites 는 ManyToManyField 로 Site 라는 클래스를 첫번째 인자로 받음 </span></span><br><span class="line"><span class="comment"># verbose_name 은 키워드 인자로 넣어줌 </span></span><br><span class="line"></span><br><span class="line">place = models.OneToOneField(Place, on_delete=models.CASCADE, verbose_name=<span class="string">'related place'</span>)</span><br><span class="line"><span class="comment"># place 는 OneToOneField 로 Place 라는 클래스를 첫번째 인자로 받음 </span></span><br><span class="line"><span class="comment"># verbose_name 은 키워드 인자로 넣어줌</span></span><br></pre></td></tr></table></figure>

<br>

<p>위의 예시에서는, 단지 <code>ForeignKey</code>, <code>ManyToManyField</code>  그리고 <code>OneToOneField</code> 를 사용할때에, verbose_name 이 어떻게 키워드 인자로 들어가는지에 대한 코딩 스타일만 보여주고 있습니다. </p>
<br>

<blockquote>
<p>관례적으로, </p>
<p>verbose_name 의 첫번째 글자는 대문자로 써주지 않습니다. </p>
<p>Django 가 필요할때 자동으로 첫번째 글자를 대문자화 해줍니다. </p>
</blockquote>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>verbose_name 에 대해서 알아보았습니다.<br>verbose_name 을 사용하면, 어떤것이 달라지는지 완벽한 예시가 있으면 좋았을텐데, <br><br></p>
<p>현재까지는, verbose_name 을 사용할경우, 해당 필드가 어드민에 표시되는 바가 달라지게 된다는점을 알고 넘어가면 될것 같습니다. </p>
<br>

<p>지난 포스팅에서 Runner 모델을 작성했었는데, 아래와 같이, <br></p>
<p>name 필드에 verbose_name 을 추가해주었습니다. “러너 이름” </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runner</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    MedalType = models.TextChoices(<span class="string">'MedalType'</span>, <span class="string">'GOLD SILVER BRONZE'</span>)</span><br><span class="line">    name = models.CharField(<span class="string">"러너이름"</span>, max_length=<span class="number">60</span>)</span><br><span class="line">    medal = models.CharField(blank=<span class="literal">True</span>, choices=MedalType.choices, max_length=<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name + <span class="string">" "</span> + self.medal</span><br></pre></td></tr></table></figure>



<br>

<p>위와같이 verbose_name 을 모델 필드에 추가하면, 아래처럼 어드민에 “러너이름” 이라고 표시가 됩니다. </p>
<br>

<img src="/2020/08/02/Django-Models-6%ED%8E%B8-Fields-verbose-field-names/image1.png" class="">]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 5편 - Fields (Automatic primary key fields)</title>
    <url>/2020/08/02/Django-Models-5%ED%8E%B8-Fields-Automatic-primary-key-fields/</url>
    <content><![CDATA[<h2 id="Models-Fields-Automatic-primary-key"><a href="#Models-Fields-Automatic-primary-key" class="headerlink" title="Models - Fields(Automatic primary key)"></a>Models - Fields(Automatic primary key)</h2><br>

<p>기본값으로, Django 는 각 모델에 다음과 같은 field 를 부여 합니다. </p>
<p>아래 필드는, 해당 모델에 명시적으로 정의해 놓지 않아도, 자동으로 적용이 되어 있습니다. </p>
<br>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>이는, 자동으로 증가하는 primary key 입니다. </p>
<br>

<p>만약 사용자 정의의 primary key  를 명시하고 싶으면, primary_key 로 사용하고 싶은 필드에, <code>primary_key=True</code> 를 명시해주면 됩니다. </p>
<br>

<p>만약, 여러분들이 명시적으로, 어떠한 필드에 <code>primary_key = True</code> 를 설정한것을 보면, django 는 자동으로 id 컬럼을 추가하지 않을것입니다. </p>
<br>

<p>각 모델은, 정확히 하나의 필드가 primary_key = True 를 가질것을 요구합니다 (두개 이상의 필드가 primary_key=True  를 가질수는 없다는 이야기 입니다) </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 4편 - Fields (Field Options)</title>
    <url>/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/</url>
    <content><![CDATA[<h2 id="Field-Options"><a href="#Field-Options" class="headerlink" title="Field Options"></a>Field Options</h2><br>

<p>각각의 필드들은, 해당 필드에 특화된 독립 변수들을 갖습니다. </p>
<br>

<blockquote>
<p>예를들면, </p>
<p>CharField 와 CharField 의 서브클래스들은, </p>
<p>max_length 같은, 데이터를 저장하기 위해서 길이를 정의하는 독립된 변수들을 갖게 됩니다. </p>
</blockquote>
<br>

<p>또한, 모든 필드 타입들에 유효한, 공통 독립 변수들도 존재합니다. </p>
<p><br>모든 변수들은, 선택적으로 사용할수 있고, reference 문서에 완벽하게 설명이 되어 있지만. </p>
<p><br><strong>가장 공통적으로 많이 사용되는것들을 정리하고 넘어갑니다.</strong> <br></p>
<br>

<a id="more"></a> 

<br>

<h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><br>

<p><code>null=True</code> 일 경우에, Django 는 빈값을 NULL 로 데이터베이스에 저장합니다. </p>
<p>기본값은 False 입니다. </p>
<br>

<h3 id="blank"><a href="#blank" class="headerlink" title="blank"></a>blank</h3><br>

<p><code>blank=True</code> 일 경우에, 필드는 비어있는 값이 허용됩니다. 기본값은 False 입니다. </p>
<br>

<br>

<h2 id="NULL-vs-Blank"><a href="#NULL-vs-Blank" class="headerlink" title="NULL vs Blank?"></a>NULL vs Blank?</h2><br>

<blockquote>
<p>blank 와 null 은 다르다는것을 숙지해야 합니다. </p>
<p>null 은 순수하게 데이터베이스 측면에서 생각하는 값이고, </p>
<p>blank 는 검증 혹은 유효성 검사 측면에서 바라보는것입니다. </p>
<br>

<p>null 은 필드의 값이 NULL (정보없음) 으로 저장되는것을 허용하고, </p>
<p>blank 는 필드가 폼(입력 양식) 에서 비어있는 채로 저장되는것을 허용합니다. </p>
<br>

<p>blank = false 이면, 해당 필드가 비어있는채로 저장되는것을 허용하지 않습니다. </p>
<p>비슷하게도, null=false 일 경우에, 필드의 값이 NULL (정보없음) 으로 저장되는것을 허용하지 않습니다. </p>
</blockquote>
<br>

<h3 id="choices"><a href="#choices" class="headerlink" title="choices"></a>choices</h3><br>

<p>2개로된 튜플은, 필드의 선택값으로 사용할수 있습니다. </p>
<p><br>튜플이 주어지면, 기본 양식 폼 위젯은 문자열 필드 대신에 select box 가 될것이고, 튜플에 들어있는 선택들로, 선택이 제한됩니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">YEAR_IN_SCHOOL_CHOICES = [</span><br><span class="line">    (<span class="string">'FR'</span>, <span class="string">'Freshman'</span>), </span><br><span class="line">    (<span class="string">'SO'</span>, <span class="string">'Sophomore'</span>), </span><br><span class="line">    (<span class="string">'JR'</span>, <span class="string">'Junior'</span>), </span><br><span class="line">    (<span class="string">'SR'</span>, <span class="string">'Senior'</span>), </span><br><span class="line">    (<span class="string">'GR'</span>, <span class="string">'Graduate'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<p>여기서 알아야 할게, </p>
<br>

<blockquote>
<p>Choices 의 순서가 바뀔대마다, 새로운 migration  이 생겨납니다. </p>
</blockquote>
<br>

<blockquote>
<p>또한, </p>
<p>튜플의 첫번째 값은, 데이터베이스에 저장되는 값이고, </p>
<p>튜플의 두번째 값은, 필드의 입력양식 위젯에 표시됩니다. 즉, 이 모델을 가지고 폼 (입력양식) 을 만들었을때, 입력양식 위젯에 표시되는것은, 튜플의 두번째 값이고. </p>
<p>실제 사용자가 이 입력양식을 통해서 값을 입력하여 데이터베이스에 저장할시에는, 튜플의 첫번째 값으로 저장이 됩니다. </p>
</blockquote>
<br>

<br>

<p>모델 인스턴스가 주어졌을때, Choices 를 가진 필드의 표시값은, get_shirt_size_display() 메서드를 사용해서 접근할수 있습니다. 아래 예시를 통해서 알아봅니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    SHIRT_SIZES = (</span><br><span class="line">    	(<span class="string">'S'</span>, <span class="string">'Small'</span>),</span><br><span class="line">        (<span class="string">'M'</span>, <span class="string">'Medium'</span>),</span><br><span class="line">        (<span class="string">'L'</span>, <span class="string">'Large'</span>),</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">60</span>)</span><br><span class="line">    shirt_size = models.CharField(max_length=<span class="number">1</span>, choices=SHIRT_SIZES)</span><br></pre></td></tr></table></figure>

<br>





<h4 id="choices-값의-표시"><a href="#choices-값의-표시" class="headerlink" title="choices 값의 표시"></a>choices 값의 표시</h4><p><br><br></p>
<ul>
<li>shirt_size 가 데이터베이스에 저장될때에는, 튜플의 첫번째 값들인, S, M, L 로 저장이 되고 </li>
<li>shirt_size 가 폼에 표시될때는, Small, Medium, Large 로 표시가 됩니다 </li>
<li>이렇게 데이터베이스 외의 위치에서 표시되는 값들은, get_shirt_size_display() 로 호출할수 있습니다. </li>
</ul>
<br>

<br>

<blockquote>
<p>실제로 model 을 작성해서 테스트 해봅니다 </p>
<p>shell 에 접속하여, 아래 코드를 입력합니다. </p>
</blockquote>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># shell 에 접속 </span></span><br><span class="line">python manage.py shell </span><br><span class="line"></span><br><span class="line"><span class="comment"># shell 접속후에 실습 </span></span><br><span class="line"></span><br><span class="line">In [1]: p = Person(name=<span class="string">"Superman"</span>, shirt_size=<span class="string">"L"</span>)                                   </span><br><span class="line"></span><br><span class="line">In [2]: <span class="comment"># Person의 name이 Superman, 셔츠 사이즈가 L 인 인스턴스 생성                                                                                                      </span></span><br><span class="line"></span><br><span class="line">In [3]: p.save()                                                                                                                                                          </span><br><span class="line"></span><br><span class="line">In [4]: <span class="comment">#  p.save() 를 호출하여, p 를 데이터베이스에 저장                                                                                                                 </span></span><br><span class="line"></span><br><span class="line">In [5]: p.shirt_size                                                                                                                                                      </span><br><span class="line">Out[5]: <span class="string">'L'</span></span><br><span class="line"></span><br><span class="line">In [6]: p.get_shirt_size_display()                                                                                                                                        </span><br><span class="line">Out[6]: <span class="string">'Large'</span></span><br><span class="line"></span><br><span class="line">In [7]: <span class="comment"># p의 shirt_size의 display 값을 표시</span></span><br></pre></td></tr></table></figure>

<br>

<p>어드민에서 SHIRT_SIZE 는  Large 라고 표시됩니다.</p>
<br>

<img src="/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/image1.png" class="">

<br>

<p>하지만, 정작 DB 에는, L 로 저장되어 있는것을 확인 할수 있습니다. </p>
<br>

<img src="/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/image2.png" class="">

<br>

<br>

<h4 id="간단하게-choices-정의하기"><a href="#간단하게-choices-정의하기" class="headerlink" title="간단하게 choices 정의하기"></a>간단하게 choices 정의하기</h4><br>

<p>enumeration 클래스들을 사용해서 간단한 방법으로 choices 들을 정의할수 있습니다 </p>
<br>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">class Runner(models.Model);</span><br><span class="line">	MedalType = models.TextChoices(<span class="string">'MedalType'</span>, <span class="string">'GOLD SILVER BRONZE'</span>)</span><br><span class="line">	<span class="comment"># 튜플에서 두번째 값인, 'GOLD SILVER BRONZE' 가 선택할수 있는값이 됨 </span></span><br><span class="line">	name = models.CharField(max_length=<span class="number">60</span>)</span><br><span class="line">	medal = models.CharField(blank=<span class="literal">True</span>, choices=MedalType.choices, max_length=<span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>Runner 를 추가할때, GOLD SILVER BRONZE 셋중 하나를 선택해서 추가할수 있습니다. </p>
</blockquote>
<br>

<img src="/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/image3.png" class="">

<p><br><br></p>
<h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><br>

<p>필드의 기본값을 지정합니다. 기본값은 특정 값일수도 있고, 호출 가능한 객체일수도 있습니다. </p>
<p>호출 가능한 객체라면, 새로운 객체가 생성될때마다, 호출이 됩니다.<br></p>
<p>예) </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line">class Djangojeng_e(models.Model);</span><br><span class="line">	<span class="comment"># 이름이 장고쟁이인 객체만 생성할수 있음 </span></span><br><span class="line">	name = models.CharFied(max_length=<span class="number">20</span>, default=<span class="string">'장고쟁이'</span>)</span><br></pre></td></tr></table></figure>

<br>

<h3 id="help-text"><a href="#help-text" class="headerlink" title="help_text"></a>help_text</h3><br>

<p>추가적인 help 텍스트가 입력양식 위젯과 함께 표시가 됩니다. 필드가 입력양식에서 사용되지 않더라도. </p>
<p><br>문서화 할때에 유용합니다 <br><br></p>
<h3 id="primary-key"><a href="#primary-key" class="headerlink" title="primary_key"></a>primary_key</h3><br>

<p><code>primary_key = True</code> 일때, 해당 필드는 모델의 primary key 가 됩니다. </p>
<br>

<p>모델안에 어떻나 필드도 primary_key = True 라고 명시하지 않은 경우에는, django가 자동적으로 IntegerField 를 추가하여, primary key 를 지니게 합니다. 딸사ㅓ, primary_key = True 라고 어떠한 필드에도 설정해줄 필요는 없습니다. 하지만, 기본 primary-key 동작을 오버라이드 하고 싶으면, 명시적으로 설정해 주면 됩니다.  <br><br></p>
<p>primary key 필드는 read-only 입니다.<br>만약, 이미 존재하는 객체의 primary key 값을 바꾸고 저장하면, 새로운 객체가 기존의 객체와 같이 생성이 됩니다. 예를들면, <br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 이름이 primary_key 값으로 되어있음</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. name 이 '사과' 인 객체를 생성 </span></span><br><span class="line">fruit = Fruit.objects.create(name=<span class="string">'사과'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. name 을 '배' 로 바꾸어줌 </span></span><br><span class="line">fruit.name = <span class="string">'배'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 바뀐 name 을 데이터베이스에 저장 </span></span><br><span class="line">fruit.save() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 값 list 를 조회 </span></span><br><span class="line">Fruit.objects.values_list(<span class="string">'nam'</span>, flat=<span class="literal">True</span>)</span><br><span class="line">Out[<span class="number">4</span>]: &lt;QuerySet [<span class="string">'사과'</span>, <span class="string">'배'</span>]&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: Fruit.objects.all()                               <span class="comment"># 모든 객체 조회                                                                                                                 </span></span><br><span class="line">Out[<span class="number">5</span>]: &lt;QuerySet [&lt;Fruit: 사과&gt;, &lt;Fruit: 배&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># primary key 값인 name 을 바꾸고 저장했기 때문에, 새로운 객체인 '배' 가 생겨난것을 확인</span></span><br></pre></td></tr></table></figure>

<br>

<h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><br>

<p>만일 True 일 경우, 해당 필드는 테이블 전체에서 고유한 값이여야 합니다. </p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>공통된 필드 옵션에 대한 짧은 설명이었습니다. 더 많은 디테일들은, common model field option reference 문서에서 확인할수 있습니다. </p>
<br>]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 3편 - Fields (Field Types)</title>
    <url>/2020/08/01/Django-Models-3%ED%8E%B8-Fields-Field-Types/</url>
    <content><![CDATA[<h2 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h2><br>

<p>모델에서 가장 중요하고, 가장 요구되는 사항중 하나는. </p>
<p><br>모델에서 정의하는 데이터베이스 필드들의 리스트 입니다. </p>
<br>

<p>필드는 클래스 속성으로 정의되어 있습니다. </p>
<br>

<blockquote>
<p>주의사항, </p>
<p>필드명은, clean, save, delete 와 같은 model API 와 충돌할수 있는 이름으로 지으면 안됩니다. </p>
</blockquote>
<br>

<a id="more"></a> 

<br>

<p>예시 코드는 아래와 같습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Musician</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">50</span>)  <span class="comment"># Musician class 의 속성 </span></span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    instrument = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Album</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    artist = models.ForiengKey(Musician, on_delete=models.CASCADE)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    release_date = models.DateField()</span><br><span class="line">    num_stars = models.IntegerField()</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="Field-Types"><a href="#Field-Types" class="headerlink" title="Field Types"></a>Field Types</h2><br>

<p>각 모델안에 필드들은 적절한 필드클래스의 인스턴스여야 합니다. </p>
<br>

<p>Django 는 필드 클래스에 정의되어 있는 type 들을 사용해서 여러가자 사항들을 결정합니다. </p>
<br>

<ul>
<li>INTEGER, VARCHAR, TEXT 같은 컬럼 타입을 결정하여, 데이터베이스가 어떤 종류의 데이터를 저장할건지 결정합니다 </li>
<li>폼 필드를 출력할때 어떤 기본  HTML 위젯을 사용할지 결정합니다 </li>
<li>DJango 의 어드민과 자동 생성되는 폼에서 사용할 최소한의 검증사항들을 결정합니다. </li>
</ul>
<br>

<p>Django 는 여러개의 내장 필드 타입들을 지원합니다. 필드타입의 리스트를 확인하고 싶다면,  model field reference 문서를 확인하면 됩니다. Django 의 내장 필드타입으로 충분하지 않다면, 본인 스스로 커스텀 필드를 작성할수도 있습니다. wrting custom model fields 문서를 참조하면 됩니다. </p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>Django 에서 모델을 작성할때, models.py 안에 작성하는 클래스는 데이터베이스 테이블이 되고. </p>
<p><br>클래스 안의 속성들을 통해서 필드명과 데이터 타입을 정의할수 있습니다. </p>
<br>]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 2편 - using models </title>
    <url>/2020/07/31/Django-Models-2%ED%8E%B8-using-models/</url>
    <content><![CDATA[<h2 id="Using-models-모델-사용하기"><a href="#Using-models-모델-사용하기" class="headerlink" title="Using models (모델 사용하기)"></a>Using models (모델 사용하기)</h2><br>

<h3 id="앱-등록하기"><a href="#앱-등록하기" class="headerlink" title="앱 등록하기"></a>앱 등록하기</h3><br>

<p>모델을 정의 한 후에 우리는, Django 에게 이 모델을 사용할것이라고 얘기해주어야 합니다. </p>
<p><br>Django 에게 이 모델을 사용할것이라고 알려주기 위해서는, </p>
<br>

<blockquote>
<p>settings.py 에 있는 INSTALLED_APPS 에 해당 모듈명을 추가해 주어야 합니다 </p>
</blockquote>
<br>

<p>예를들어, <code>python manage.py startapp usemodel</code> 명령어를 통해, usemodel 이라는 앱을 생성하였다고 가정하면, settings.py 파일에 INSTALLED_APPS 안에, 생성된 모델이 아래와 같이 등록 되어 있어야 합니다.  </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    <span class="string">'usemodel'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<br>

<a id="more"></a>

<br>

<h3 id="makemigrations"><a href="#makemigrations" class="headerlink" title="makemigrations"></a>makemigrations</h3><br>

<p>INSTALLED_APPS 에 새로운 앱을 추가해 주고, 해당 앱에 대한 모델을 작성해 주었으면, </p>
<p>데이터베이스에 적용을 해주어야 합니다. 하지만, 적용전에 <code>python manage.py makemigrations</code> 명령어를 통해서, 데이터베이스 적용 전에 migrations 파일을 만들어 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>해당 앱의 모델을 아직 작성하지 않아도, 위의 makemigrations 명령어는 정상으로 실행됩니다. </p>
<p>왜냐하면, 새로운 모델이 생성되었기 때문입니다. </p>
<p>이렇게 앱과 모델을 등록한다음에는, 앱의 모델을 변경할때마다, </p>
<p>makemigrations 와 migrate 명령어를 실행하여, 데이터베이스에 변경사항을 적용 해주어야 합니다. </p>
</blockquote>
<br>

<h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><br>

<p>makemigrations 명령어를 실행 시켜 주었으면, <code>migrate</code> 명령어를 통해서, 데이터 베이스에 실제 적용을 합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="모델을-사용하는-순서"><a href="#모델을-사용하는-순서" class="headerlink" title="모델을 사용하는 순서"></a>모델을 사용하는 순서</h2><br>

<ol>
<li>앱생성 </li>
<li>앱을 settings.py 에 등록 </li>
<li><code>python manage.py makemigrations</code></li>
<li><code>python manage.py migrate</code></li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>Django Models 1편 - Quick Example</title>
    <url>/2020/07/30/Django-Models-1%ED%8E%B8-Quick-Example/</url>
    <content><![CDATA[<h2 id="Models-Quick-example"><a href="#Models-Quick-example" class="headerlink" title="Models - Quick example"></a>Models - Quick example</h2><br>

<p>Django 공식문서에 나와있는, models 에 대한 부분을 둘러봅니다. </p>
<p><br>공식 문서에는 완벽한 번역본이 존재하지 않고, 설명이 너무 불충분해서, 초반에 공부할때에 많은 어려움이 있었습니다. </p>
<p>물론,, 지금도 쉽지는 않지만.. 어쨋든, Django models 에 대한 포스팅을 시작합니다. </p>
<br>

<br>

<blockquote>
<p><strong>Models (모델)</strong> </p>
<p>모델은 당신의 데이터에 대한 정보를 가지고 있고, 당신의 데이터에 대한 정의를 내리는 하나의 소스 입니다.</p>
<p>모델은 당신에게 필요하고 저장하고자 하는 필드들과 동작들에 대한 정보를 포함하고 있습니다</p>
<p>각 모델들은, 보통 하나의 데이터 베이스 테이블로 매핑 됩니다.﻿</p>
</blockquote>
<br>

<a id="more"></a>

<br>

<h2 id="기본-사항들"><a href="#기본-사항들" class="headerlink" title="기본 사항들"></a>기본 사항들</h2><br>

<ol>
<li>각 모델은 Python 클래스 이고, <code>django.db.models.Model</code> 의 서브 클래스 이다 </li>
<li>각 모델의 속성들은 데이터베이스 필드를 표현 합니다 </li>
<li>이 모든 정보들을 가지고, Django 는 자동으로 생성된 database-access API 를 제공합니다. </li>
</ol>
<br>

<br>

<h2 id="빠른-예제"><a href="#빠른-예제" class="headerlink" title="빠른 예제"></a>빠른 예제</h2><br>

<p>아래 예제는, first_name, last_name 정보를 가지는 Person 모델을 정의 합니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Person(models.Model);</span><br><span class="line">	first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>first_name 과 last_name 은 모델의 필드들입니다. 각 필드들은, 클래스의 속성들로 표현되어 있습니다. </p>
<br>

<p>그리고, 각 속성들은 database 컬럼들과 메칭 됩니다. </p>
<br>

<blockquote>
<p>처음에 공부할때, 데이터베이스의 Column 그리고 Field 에 대해서 잘 몰라서 </p>
<p>이해가 안갔었는데,  아래 그림을 가져와서 참고 합니다. </p>
</blockquote>
<br>

<img src="/2020/07/30/Django-Models-1%ED%8E%B8-Quick-Example/image1.png" class="">

<br>

<ul>
<li>위의 모델에서  class Person 이라는 클래스는 데이터베이스 테이블명이 됩니다 </li>
<li>first_name 은 해당 테이블의 필드명이 되고, 최대 길이는 30자 입니다 </li>
<li>last_name 은 해당 테이블의 필드명이 되고, 최대 길이는 30자 입니다   </li>
</ul>
<br>

<blockquote>
<p>위의 Person 모델은 아래와 같은 데이터베이스 테이블을 생성합니다. </p>
</blockquote>
<br>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myapp_person (</span><br><span class="line">    <span class="string">"id"</span> <span class="built_in">serial</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="string">"first_name"</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">"last_name"</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<br>

<h2 id="기술적인-노트"><a href="#기술적인-노트" class="headerlink" title="기술적인 노트"></a>기술적인 노트</h2><br>

<ul>
<li>테이블의 이름은, myapp_person 으로 지정되어 있는데, 이것은 자동적으로 메타데이터에서 따옵니다. 하지만, 이 이름은 오버라이드 될수 있습니다 </li>
<li>id 필드는 자동으로 추가됩니다. 이 동작 방식도 수정될수는 있습니다 </li>
<li>이번 예제에서 사용된 CREATE TABLE SQL 구문은, PostgreSQL 구문을 사용한 형식입니다. 하지만, django 는 데이터베이스 백앤드를 당신의 settings.py 파일에 명시되어 있는 데이터베이스에 맞추어 사용합니다. </li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
        <category>공식문서</category>
      </categories>
      <tags>
        <tag>데이터베이스</tag>
        <tag>models</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 33편 - Docker로 배포 (nginx 와 gunicorn)</title>
    <url>/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/</url>
    <content><![CDATA[<h2 id="Docker로-배포-nginx-gunicorn"><a href="#Docker로-배포-nginx-gunicorn" class="headerlink" title="Docker로 배포 (nginx, gunicorn)"></a>Docker로 배포 (nginx, gunicorn)</h2><br>

<p>연습 차원에서, Docker 에 nginx 와 gunicorn 을 적용하여 배포 연습을 진행 해 봅니다. </p>
<p><br>이전 포스팅하고는 조금 다른 방식으로 쓰는 예제를 찾아서, 이 프로젝트에 적용해 보려 합니다. 아래 내용대로 진행해보았지만, 배포 결과는 실패했습니다. </p>
<p><br>이 포스팅에서는, 그냥 배포 시도 과정만을 담고 있습니다. </p>
<a id="more"></a>

<br>

<h2 id="Docker-Compose-설치하기"><a href="#Docker-Compose-설치하기" class="headerlink" title="Docker Compose 설치하기"></a>Docker Compose 설치하기</h2><br>

<p>터미널에서 아래 명령어를 실행하여, Docker compose  를 설치해 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<br>

<p>바이너리에 실행 권한을 적용합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure>

<br>

<p>정상적으로 설치가 되었는지, 아래 버전 확인 명령어를 통해서 확인 합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose --version </span><br><span class="line">docker-compose version 1.25.5, build 8a1c60f6</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="gunicorn-설치하기"><a href="#gunicorn-설치하기" class="headerlink" title="gunicorn 설치하기"></a>gunicorn 설치하기</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="requirements-txt-파일-업데이트"><a href="#requirements-txt-파일-업데이트" class="headerlink" title="requirements.txt  파일 업데이트"></a>requirements.txt  파일 업데이트</h2><br>

<p>프로젝트 폴더에서 터미널 명령어를 통해, requirements.txt 파일을 업데이트 해줍니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<br>

<h2 id="settings-py-파일-수정"><a href="#settings-py-파일-수정" class="headerlink" title="settings.py 파일 수정"></a>settings.py 파일 수정</h2><br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">'web'</span>]</span><br></pre></td></tr></table></figure>



<br>

<h2 id="Dockerfile-재작성"><a href="#Dockerfile-재작성" class="headerlink" title="Dockerfile 재작성"></a>Dockerfile 재작성</h2><br>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /todo </span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /todo </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r /todo/requirements.txt</span></span><br></pre></td></tr></table></figure>

<br>

<ol>
<li><code>FROM python:3.8-slim</code> - 파이썬 3.8-slim 을 베이스 이미지로 사용합니다 </li>
<li><code>COPY . /todo</code> - 컨테이너 안에 /todo 디렉토리 안으로, 로컬에서의 현재 위치에 있는 모든 파일 및 디렉토리를 복사합니다 </li>
<li><code>WORKDIR /todo</code> - ~/todo 디렉토리로, 워킹 디렉토리를 변경합니다 </li>
<li><code>RUN pip install -r /todo/requirements.txt</code> - 프로젝트에 필요한 파이썬 패키지들을 설치합니다. </li>
</ol>
<br>

<h2 id="docker-compose-yml-작성"><a href="#docker-compose-yml-작성" class="headerlink" title="docker-compose.yml 작성"></a>docker-compose.yml 작성</h2><br>

<p>docker-compose 를 사용하여, Dockerfile 빌드 준비를 합니다. </p>
<p><br>프로젝트 폴더 내에, docker-compose.yml 파일을 생성해 주고, 아래와 같이 작성해 줍니다. </p>
<br>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">	<span class="attr">web:</span></span><br><span class="line">		<span class="attr">build:</span></span><br><span class="line">		  <span class="attr">context:</span> <span class="string">.</span> </span><br><span class="line">		  <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> </span><br><span class="line">		<span class="attr">command:</span> <span class="string">python</span> <span class="string">manage.py</span> <span class="string">runserver</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8000</span></span><br><span class="line">		<span class="attr">volumes:</span></span><br><span class="line">		  <span class="bullet">-</span> <span class="string">.:todo</span></span><br><span class="line">		<span class="attr">ports:</span></span><br><span class="line">		  <span class="bullet">-</span> <span class="string">"8000:8000"</span></span><br></pre></td></tr></table></figure>

<br>

<ol>
<li>version - docker compose 정의 파일의 버전 </li>
<li>services - 서비스 정의 </li>
<li>web - 서비스 명 </li>
<li>build - 빌드 지정 </li>
<li>context - Dockerfile 이 있는 디렉토리의 경로 </li>
<li>dockerfile - 도커파일명 </li>
<li>command - 컨테이너 안에서 작동하는 명령 지정, 베이스 이미지에 지정되어 있을 경우 덮어씁니다 </li>
<li>volumes - 컨테이너에 볼륨을 마운트 합니다 </li>
<li>ports - 컨테이너가 공개하는 포트는 ports 로 지정, <code>&lt;호스트 머신의 포트번호&gt;:&lt;컨테이너의 포트번호&gt;</code><br></li>
</ol>
<br>

<h2 id="docker-compose-명령어로-이미지를-빌드하여-실행"><a href="#docker-compose-명령어로-이미지를-빌드하여-실행" class="headerlink" title="docker-compose 명령어로 이미지를 빌드하여 실행"></a>docker-compose 명령어로 이미지를 빌드하여 실행</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up -- build</span><br></pre></td></tr></table></figure>

<br>

<p>위 명령어를 실행한뒤에, 터미널에는, Attaching to todolist_web_1 이라고 표시 되는데. 이때, 웹 브라우저에서 django 어플리케이션이 정상적으로 실행 되는지 확인 합니다. </p>
<br>

<img src="/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/image1.png" class="">

<br>

<p>우선, django 어플리케이션은 브라우저에서 동작하는것을 확인할수 있습니다. </p>
<br>

<img src="/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/image2.png" class="">

<p><br><br></p>
<h2 id="nginx-gunicorn-django"><a href="#nginx-gunicorn-django" class="headerlink" title="nginx, gunicorn, django"></a>nginx, gunicorn, django</h2><br>

<p>nginx 와  gunicorn 을 사용하여 django 배포 작업을 해줍니다. <br></p>
<p>위의 docker-compose.yml 파일을 아래와 같이 수정해 줍니다. </p>
<br>

<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/todo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/nginx:/etc/nginx.conf.d</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">web</span> </span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> </span><br><span class="line">    <span class="attr">command:</span> <span class="string">gunicorn</span> <span class="string">todolist.wsgi:application</span> <span class="string">==</span> <span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8000</span> </span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/todo</span> </span><br><span class="line">    <span class="attr">expose:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8000"</span></span><br></pre></td></tr></table></figure>

<br>

<ol>
<li><p>version - docker compose 정의 파일의 버전 </p>
</li>
<li><p>services - 서비스 정의 </p>
</li>
<li><p>nginx - 서비스명 </p>
</li>
<li><p>image - 도커이미지 (d2hub 에서 최신버전) </p>
</li>
<li><p>ports - &lt;호스트 머신 번호&gt;:&lt;컨테이너의 포트 번호&gt; </p>
</li>
<li><p>volumes - 컨테이너에 볼륨을 마운트 할때 사용, &lt;호스트의 디렉토리 경로&gt;:&lt;컨테이너의 디렉토리 경로&gt; </p>
</li>
<li><p>depends_on</p>
<ul>
<li><p>서비스의 의존 관계 정의 </p>
</li>
<li><p>nginx 컨테이너 시작전, web 컨테이너 시작 </p>
</li>
<li><p>depends_on 으로 컨테이너 시작 순서를 제어 </p>
</li>
<li><p>컨테이너 상 어플리케이션이 이용 가능해질때까지 기다리고, 제어 하지 않음 </p>
</li>
</ul>
</li>
</ol>
<ol start="8">
<li><p>web - 서비스명 </p>
</li>
<li><p>build - 빌드지정 </p>
</li>
<li><p>context - Dockerfile이 있는 디렉토리의 경로 </p>
</li>
<li><p>dockerfile - 도커파일 명 </p>
</li>
<li><p>command </p>
<ul>
<li><p>컨테이너 안에서 작동하는 명령어 지정 </p>
</li>
<li><p>gunicorn 으로 django 서버를 실행 시킴 </p>
</li>
</ul>
</li>
</ol>
<ol start="13">
<li>volumens - 현재 디렉토리 전부를 컨테이너 /todo 에 마운트 </li>
<li>ports <ul>
<li>컨테이너 포트 번호만 지정 </li>
<li>호스트 머신의 포트는 랜덤한 값으로 설정 </li>
<li>호스트 머신에서 직접 접근하지 않고 웹서버 기능을 갖고 있는 컨테이너를 경유해서 접근 </li>
</ul>
</li>
</ol>
<br>

<h2 id="nginx-conf-파일-생성"><a href="#nginx-conf-파일-생성" class="headerlink" title="nginx.conf 파일 생성"></a>nginx.conf 파일 생성</h2><br>

<p>todolist/config/nginx/nginx.conf 파일을 생성해 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream web &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  server web:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  location /static/ &#123;</span><br><span class="line">      <span class="built_in">alias</span> /todo/static;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">      proxy_pass http://web/;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="docker-compose-명령어로-이미지-빌드후-실행"><a href="#docker-compose-명령어로-이미지-빌드후-실행" class="headerlink" title="docker-compose 명령어로 이미지 빌드후 실행"></a>docker-compose 명령어로 이미지 빌드후 실행</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>django 어플리케이션을 배포하는일은 매우 어렵고 비효율적입니다. </p>
<p>이렇게 복잡하게 할거면, 왜 만들었는지도 의심 스럽네요;;; 위 작업을 다 마쳤지만, 실제 배포랑은 완전 거리가 멀고. 되지도 않았습니다. </p>
<p>다른 배포 방법을 찾아봅시다! </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>niginx</tag>
        <tag>gunicorn</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 32편 - .dockerignore 파일</title>
    <url>/2020/07/28/TodoList-32%ED%8E%B8-dockerignore-%ED%8C%8C%EC%9D%BC/</url>
    <content><![CDATA[<h2 id="dockerignore-파일"><a href="#dockerignore-파일" class="headerlink" title="dockerignore 파일"></a>dockerignore 파일</h2><br>

<p>현재까지 배포를 위해 진행한 스텝입니다 </p>
<br>

<ol>
<li>AWS EC2 생성 </li>
<li>AWS RDS 생성 - PostgreSQL 적용 </li>
<li>AWS S3 생성 및 적용 </li>
<li>AWS S3 정적 이미지와 CSS 파일 적용 </li>
<li>Docker 설치 </li>
<li>Dockerfile 작성 후 이미지 생성 </li>
<li>생성된 이미지를 DockerHub 에 Push </li>
<li>Docker 를 이용하여 EC2 에 배포하기 (.dockerigrnoe파일) </li>
</ol>
<br>

<p>지난 포스팅까지, Docker 를 이용하여, EC2 에 배포하는것 까지 진행 하였고. <br></p>
<p>EC2 에 잘 배포가 되는것까지 확인 하였습니다. </p>
<br>

<blockquote>
<p>하지만, Docker 를 사용하여, </p>
<p>EC2 에 배포할때에, .dockerignore 파일에 대해서 </p>
<p>신경 써야 한다는 점을 잊지 말아야 합니다 </p>
</blockquote>
<a id="more"></a> 

<br>

<h2 id="dockerignore-파일이란"><a href="#dockerignore-파일이란" class="headerlink" title=".dockerignore 파일이란?"></a>.dockerignore 파일이란?</h2><br>

<br>

<p><code>.gitignore</code> 파일과 비슷하게, <code>.dockerignore</code> 파일은 하나의 도구로써, <br></p>
<p>정말로 필요한 Docker 빌드 내용을 정의 하는데에 사용됩니다. </p>
<br>

<p>이 파일을 사용함으로써, 어떤 폴더와 파일들이 도커를 빌드할때에 무시되고, 예외처리가 될지 기준을 정합니다<br></p>
<p>마치, git 에 무언가를 작업하여 올릴때, gitignore 에 올리지 말아야 할 파일과 디렉토리를 정하는것 처럼 말입니다. <br></p>
<p><code>.dockerignore</code> 파일에 포함된 파일들과 폴더들은, <br>빌드내용에 포함되지 않게 되어서 도커 서버에 업로드가 되지 않을것입니다. </p>
<br>

<h2 id="왜-신경을-써야-하나요"><a href="#왜-신경을-써야-하나요" class="headerlink" title="왜 신경을 써야 하나요?"></a>왜 신경을 써야 하나요?</h2><br>

<p>실제로, 요즘 컴퓨터들은 빠르고, 네트워크도 꽤나 안정적이고 빠른데다가 저장소를 사용하는것도 많이 저렴해 졌습니다. 그렇다면, </p>
<blockquote>
<p><code>.dockerignore</code>를 사용하여, 파일들과 폴더들을 업로드 하지 않는 이유가. </p>
<p>용량때문만은 아닐것입니다.  </p>
</blockquote>
<br>

<p>어째서 .dockerignore 를 사용해야 하는지에 대해서 몇가지 예를 들어 봅니다. </p>
<br>

<br>

<h3 id="도커-이미지-사이즈"><a href="#도커-이미지-사이즈" class="headerlink" title="도커 이미지 사이즈"></a>도커 이미지 사이즈</h3><br>

<p>요즘 컴퓨터들이 아무리 빠르고, 네트워크도 안정적이고, 저장소가 저렴해졌다고 해도, </p>
<p><br>도커 이미지의 용량에 대해서 신경쓰지 않아도 된다는 이야기는 아닙니다. 여전히 용량은 중요한 포인트 이고, 어떤 상황에서는, 하나의 도커 이미지를 여러개의 서버에 올려서 사용해야 할때도 있습니다. </p>
<br>

<p>이런 상황에서는, 이미지 사이즈와 이미지 생성 시간이 중요해 집니다. </p>
<br>

<p>예를들면, 5 MB 짜리 도커 이미지를 100개의 서버에 배포하는것이, 700MB 짜리 도커 이미지를 100개의 서버에 배포하는것보다 훨씬 빠르고 저렴할것입니다. </p>
<br>

<p>따라서, .dockerignore 를 사용하여, 용량관리를 해보는것도 나쁘지 않은 생각입니다. </p>
<br>

<h3 id="의도하지-않은-비밀값-노출"><a href="#의도하지-않은-비밀값-노출" class="headerlink" title="의도하지 않은 비밀값 노출"></a>의도하지 않은 비밀값 노출</h3><br>

<p>빌드 내용을 제어하지 않는다면, </p>
<p><br>의도치 않게 우리의 코드, 커밋 내역 그리고 비밀값들 (키와 인증키 등등) 이 노출 될수 있습니다. </p>
<br>

<p><code>ADD .</code> 혹은 <code>COPY .</code> 커맨드를 사용하여 파일들을 도커 이미지 안에 복사를 한다면, 우리는 의도하지 않게 소스 파일들을 포함하고, 모든 깃 내역과, 비밀값들 (.aws, env, 혹은 개인정보 키같은 값들), 캐시, 그리고 기타 파일들을 도커 빌드 내용에 넣어, 결국에 도커 이미지 안에 의도치 않게 넣을수 있습니다. </p>
<br>

<p>DockerHub 에 존재하는 도커 이미지중에 여러개의 이미지들은, 어플리케이션 소스 코드, 비밀번호, 키값들 그리고 인증값들을 노출하고 있습니다. <code>.git</code> 폴더를 도커 이미지안에 실수로라도 복사하는것은 특히나 좋지 않습니다. </p>
<br>

<p>따라서, <code>.dockerignore</code> 를 사용하여, 이런 비밀값들이나 민감한 정보 관리를 할수 있습니다. </p>
<p><br><code>.git folder</code>를 <code>.dockerignore</code>  파일에 항상 표시해두는것이 좋습니다. </p>
<br>

<h3 id="Cache-무효"><a href="#Cache-무효" class="headerlink" title="Cache 무효"></a>Cache 무효</h3><br>

<p>어플리케이션의 전체 코드베이스를 이미지에 넣는 방식은 대체로 아래 명령어를 사용하는것이 일반적입니다. </p>
<br>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> . /user/src/app</span></span><br></pre></td></tr></table></figure>

<br>

<p>이런 경우에는, 전체 빌드 내용을 이미지에 복사하게 됩니다. </p>
<p><br>그리고 한가지 더 중요한점은, 각 Dockerfile 명령어는 새로운 레이어를 생성한다는 점입니다. </p>
<br>

<p>따라서, 포함된 파일들에 대한 수정 사항들은, <code>COPY . /opt/myapp</code> 레이어와 새로운 이미지 레이어가 다음 빌드에 생성되게 될때, 빌드 캐시를 무효화 합니다 (빌드를 훨씬 더 느리게 한다는 이야기 입니다) </p>
<br>

<br>

<p>만약 우리의 작업 폴더들이 매우 빈번히 업데이트가 되는 파일들을 가지고 있다면, (로그, 테스트 결과, 깃내역, 임시 캐시파일등등), 우리는 이 레이어를 매번 dockr build 를 실행할때마다 생성하게 될것입니다. </p>
<br>

<p>따라서, 빌드 내용을 맞게 관리 하지 않는다면, 빌드들은 캐시를 맞는 방법으로 사용할수가 없어서, 매우 느려질겁니다. </p>
<br>

<br>

<h3 id="dockerignore-문법"><a href="#dockerignore-문법" class="headerlink" title=".dockerignore 문법"></a>.dockerignore 문법</h3><br>

<p>이제 우리는 어째서 도커 빌드 내용을 제어해야만 하고, 이것이 어떻게 이루어지는지 살펴 보았습니다. </p>
<br>



<blockquote>
<p>.dockerignore 파일은, </p>
<p>깃툴에서 사용되는, .girignore  파일과 비슷합니다. </p>
</blockquote>
<br>

<p>깃헙에서 사용되는 <code>.gitignore</code> 파일들과 비슷하게, 도커 빌드 내용을 생성할때 무시되어야 할 파일들과 폴더들을 특정 패턴을 통해 설정할수 있습니다. </p>
<br>

<blockquote>
<p><code>.dockerignore</code> 파일 문법이, <code>.gitignore</code>  파일과 비슷한 문법이다 하더라도, </p>
<p>그것들이 똑같지는 않습니다! </p>
</blockquote>
<br>

<p>예시) </p>
<br>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># .git 과 .cache 폴더를 무시 </span></span><br><span class="line">.git </span><br><span class="line">.cache </span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore all *.class files in all folders, including build root</span></span><br><span class="line"><span class="comment"># 모든 폴더안에 있는 모든, *.class 파일들을 무시   </span></span><br><span class="line">**/*.class </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 모든 마크다운 파일들 (md) 파일들을 무시, </span></span><br><span class="line"><span class="comment"># 모든 README*.md 파일 무시 </span></span><br><span class="line">*.md </span><br><span class="line">IREADME*.md</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h3 id="Dockerfile-을-dockerignore-에-포함되어야-하나요"><a href="#Dockerfile-을-dockerignore-에-포함되어야-하나요" class="headerlink" title="Dockerfile 을 .dockerignore 에 포함되어야 하나요?"></a>Dockerfile 을 .dockerignore 에 포함되어야 하나요?</h3><br>

<p>이 질문에 대한 명확한 답은 존재하지 않습니다. </p>
<p><br>대부분 개인 취향에 달려 있긴 하지만. <code>.dockerfile</code> 을 <code>Dockerfile</code> 안에 포함하는것이 권장 됩니다<br></p>
<p>그리고, 그전에, Dockerfile 이 어떠한 민감한 정보도 갖고 있지 않도록 합니다. </p>
<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p><code>.dockerignore</code> 파일을 도커 이미지들을 생성하는 모든 프로젝트에 사용해야 합니다. </p>
<p><br><code>.dockerignore</code>는 도커 이미지들을 작고, 빠르고, 안전하게 만들어 줍니다.<br>또한, 로컬 개발에서 도커 캐시를 도와주기도 합니다. </p>
<br>

<p>최소한, git 폴더는 .dockerignore 파일에 포함되어야만 합니다. 그리고 아래 프로젝트 특화 추가 파일들도 추가해주어야 합니다. </p>
<br>

<ul>
<li>빌드로그 </li>
<li>스크립트 / 결과 테스트 </li>
<li>임시 파일들 </li>
<li>캐싱 </li>
<li>로컬 비밀값들 </li>
<li>docker-compose.yml 같은 로컬 개발 파일들 </li>
</ul>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>dockerignore</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 31편 - Docker를 이용하여 EC2에 배포</title>
    <url>/2020/07/27/TodoList-31%ED%8E%B8-Docker%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC/</url>
    <content><![CDATA[<p>현재까지 배포를 위해 진행한 순서는, </p>
<ol>
<li>AWS EC2 생성 </li>
<li>AWS RDS 생성 - PostgreSQL 적용 </li>
<li>AWS S3 생성 및 적용 </li>
<li>AWS S3 정적 이미지와 CSS파일 적용 </li>
<li>Docker 설치 </li>
<li>Dockerfile 작성후 이미지 생성 </li>
<li>생성된 이미지를 DockerHub 에 Push </li>
<li>Docker 를 이용하여 EC2 배포하기 </li>
</ol>
<br>

<br>

<p>지난 포스팅에서, 로컬에서 생성한 Docker 를 실행하여, 서버가 잘 작동하는것을 확인 하였습니다. <br></p>
<p>이제 EC2 에다가, 생성하였던 Docker 를 이용하여, 서버를 실행 시켜 보는 작업을 진행합니다. </p>
<br>

<br>

<blockquote>
<p>EC2에 배포를 하려면, </p>
<p>EC2에 접속하여, EC2 터미널에서 생성한 Docker 를 실행시키면 됩니다. </p>
</blockquote>
<br>

<a id="more"></a> 

<br>

<p>정확히 이야기하면, 아래 단계들을 거쳐야 하는데. </p>
<p><br>이 단계들을 명령어화 하여 진행해 보면 됩니다. </p>
<br>

<ol>
<li>EC2에 접속, 서버 초기 설정을 해줍 </li>
<li>로컬에서 pip freeze &gt; requirements.txt 를 실행, requirements.txt 를 갱신 </li>
<li>로컬에서 Dokerfile 을 이용하여, Docker 이미지 빌드 </li>
<li>로컬에서 Docker image tag 지정 </li>
<li>로컬에서 DockerHub 로 docker push </li>
<li>EC2 에서, DockerHub 에  push 된 이미지 pull </li>
<li>EC2 에서, pull 한 Docker 이미지를 실행하기 </li>
</ol>
<br>

<blockquote>
<p>이전 포스팅에서 생성한 Docker 이미지는, </p>
<p>자동으로 python manage.py runserver 를 실행해 주므로. </p>
<p>Docker 이미지를 실행 시키는것만으로도 runserver 를 실행한 상태로 유지해 줍니다. </p>
</blockquote>
<br>



<h2 id="1-EC2에-접속-서버-초기-설정"><a href="#1-EC2에-접속-서버-초기-설정" class="headerlink" title="1. EC2에 접속, 서버 초기 설정"></a>1. EC2에 접속, 서버 초기 설정</h2><br>

<p>터미널에서, EC2 에 접속합니다. 접속하여서, 기본 세팅을 해줍니다. <br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i ~/.ssh/newtodolist.pem ubuntu@52.79.175.188</span><br><span class="line">*** System restart required ***</span><br><span class="line">Last login: Sat May 23 13:06:22 2020 from 49.194.199.4</span><br><span class="line">ubuntu@ip-172-31-35-66:~$ sudo apt update &amp;&amp; sudo DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y &amp;&amp; apt -y autoremove</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 도 설치해 줍니다. </span></span><br><span class="line">ubuntu@ip-172-31-35-66:~$ sudo apt -y install docker.io</span><br></pre></td></tr></table></figure>



<br>

<h2 id="2-로컬-컴퓨터-터미널에서-requiremnts-txt-갱신"><a href="#2-로컬-컴퓨터-터미널에서-requiremnts-txt-갱신" class="headerlink" title="2. 로컬 컴퓨터 터미널에서 requiremnts.txt 갱신"></a>2. 로컬 컴퓨터 터미널에서 requiremnts.txt 갱신</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">~/mini_projects   master ●  </span><br><span class="line"><span class="string">"<span class="variable">$HOME</span>"</span>/.pyenv/versions/3.8.0/envs/to-do-list/bin/pip freeze &gt; <span class="string">"<span class="variable">$HOME</span>"</span>/mini_projects/todolist/requirements.txt</span><br></pre></td></tr></table></figure>

<br>

<h2 id="3-로컬에서-Dockerfile-을-이용-Docker-이미지-빌드"><a href="#3-로컬에서-Dockerfile-을-이용-Docker-이미지-빌드" class="headerlink" title="3. 로컬에서 Dockerfile 을 이용, Docker  이미지 빌드"></a>3. 로컬에서 Dockerfile 을 이용, Docker  이미지 빌드</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t todolist ~/mini_projects/todolist</span><br></pre></td></tr></table></figure>

<br>

<p>todolist 라는 이미지를,  ~/mini_projects/todolist 경로에 있는 Dockerfile 을 이용하여 생성. </p>
<br>

<h2 id="4-로컬에서-docker-image-tag-지정"><a href="#4-로컬에서-docker-image-tag-지정" class="headerlink" title="4. 로컬에서 docker image tag 지정"></a>4. 로컬에서 docker image tag 지정</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag todolist:latest headfat1218/todolist:latest</span><br></pre></td></tr></table></figure>

<br>

<p>todolist:latest 를 테그로 지정 </p>
<br>

<h2 id="5-로컬에서-DockerHub-로-docker-push"><a href="#5-로컬에서-DockerHub-로-docker-push" class="headerlink" title="5. 로컬에서 DockerHub 로 docker push"></a>5. 로컬에서 DockerHub 로 docker push</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push headfat1218/todolist:latest</span><br></pre></td></tr></table></figure>

<br>

<p>headfat1218/todolist:latest 로 테그된 이미지를 DockerHub 로 푸쉬 <br><br></p>
<h2 id="6-EC2-에서-DockerHub-에-push-된-이미지-pull"><a href="#6-EC2-에서-DockerHub-에-push-된-이미지-pull" class="headerlink" title="6. EC2 에서, DockerHub 에 push 된 이미지  pull"></a>6. EC2 에서, DockerHub 에 push 된 이미지  pull</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-35-66:~$ sudo docker pull headfat1218/todolist:latest</span><br></pre></td></tr></table></figure>

<br>

<h2 id="7-EC2-에서-Pull-한-이미지를-실행하기"><a href="#7-EC2-에서-Pull-한-이미지를-실행하기" class="headerlink" title="7. EC2 에서, Pull 한 이미지를 실행하기"></a>7. EC2 에서, Pull 한 이미지를 실행하기</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo docker run --rm -it -p 80:8000 --name todolist headfat1218/todolist:latest</span><br></pre></td></tr></table></figure>

<br>

<p>이미지를 실행하면, 이미지가 빌드된 대로, </p>
<br>

<p><code>python manage.py makemigrations</code>를 알아서 해주고 </p>
<p><code>python manage.py migrate</code> 도 알아서 해주고,<br></p>
<br>

<p><code>python manage.py runserver</code> 도 알아서 해줍니다.<br><br></p>
<img src="/2020/07/27/TodoList-31%ED%8E%B8-Docker%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC/image1.png" class="">

<br>

<br>

<blockquote>
<p>이제, EC2 인스턴스에서 RUNSERVER 를 실행하고 있으니까 </p>
<p>브라우저에서, 해당 EC2 인스턴스의 퍼블릭 IP 로 접속해 봅니다. </p>
<p>퍼블릭 IP 로 접속을 하면, 브라우저에서, 현재까지 개발한 Django 프로젝트가 돌아가는것을 확인할수 있을겁니다. </p>
</blockquote>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>Docker</tag>
        <tag>DockerHub</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 30편 - 생성된 이미지 DockerHub 에 푸쉬</title>
    <url>/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/</url>
    <content><![CDATA[<h2 id="DockerHub-에-이미지-푸쉬"><a href="#DockerHub-에-이미지-푸쉬" class="headerlink" title="DockerHub 에 이미지 푸쉬"></a>DockerHub 에 이미지 푸쉬</h2><br>

<p>현재까지 진행한 순서대로 정리하면, </p>
<br>

<ol>
<li>AWS EC2 생성 </li>
<li>AWS RDS 생성 - PostgreSQL 적용 </li>
<li>AWS S3 생성 및 적용 </li>
<li>AWS S3 정적 이미지와 CSS 파일 적용 </li>
<li>Docker 설치 </li>
<li>Dockerfile 작성 후 이미지 생성 </li>
<li>생성된 이미지를 DockerHub 에 push </li>
</ol>
<br>

<h2 id="이미지-저장소"><a href="#이미지-저장소" class="headerlink" title="이미지 저장소"></a>이미지 저장소</h2><br>

<p>도커는 빌드한 이미지를 서버에 배포하기 위한 파일을 도커 레지스트리, 즉, Docker registery 라는 저장소를 사용해 복사합니다. 빌드가 완료된 이미지를 레지스트리에 푸쉬 (push) 하고, 다른 서버에서 (pull) 하여 사용하는 구조로 되어 있습니다. </p>
<br>

<p>살짝, git 과 비슷한 느낌입니다. </p>
<br>

<img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image1.png" class="">



<a id="more"></a> 

<br>

<h2 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h2><br>

<p>도커 허브는, 도커에서 제공하는 이미지 저장소 입니다. <br></p>
<p>ubuntu, centos, debian 등의 베이스 이미지와, ruby, golang, java, python 등의 공식 이미지가 저장되어 있습니다. </p>
<br>

<p>회원 가입 이후에, 대용량 이미지를 무료로 저장할수 있고, 다운로드 트래픽도 무료 입니다. <br><br></p>
<p>하지만, 모든 이미지는 공개되어 누구나 접근 가능하고, 비공개로 설정하려면 유료 서비스를 이용해야 합니다.<br></p>
<p>도커 헙 페이지에 접속하여, 회원가입을 마칩니다. <br>회원가입을 다 마치면, 로그인을 하여, 사용 준비를 할수 있습니다.<br></p>
<br>

<img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image2.png" class="">

<br>

<h2 id="Docker-Hub-로그인"><a href="#Docker-Hub-로그인" class="headerlink" title="Docker Hub 로그인"></a>Docker Hub 로그인</h2><br>

<p>계정을 생성해주었으면, 터미널에서 아래 명령어를 실행하여, </p>
<p><br>도커 허브 계정을 사용할수 있게 로그인 합니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure>

<br>

<p>아래와 같은 메시지가 뜨고, 성공적으로 로그인이 되는걸 확인할수 있습니다. </p>
<p><br>로그아웃 하기 전까지, 로그인 정보가 유지됩니다.<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure>



<br>

<h2 id="Docker-Hub-Push"><a href="#Docker-Hub-Push" class="headerlink" title="Docker Hub Push"></a>Docker Hub Push</h2><br>

<p>지난 포스팅에서, Dockerfile 을 이용하여, docker image 를 생성해 주었었습니다. </p>
<br>

<p><code>docker images</code>명령어를 실행하여, 이미지 목록을 확인해 보면, 지난 시간에 생성해 주었었던, <br></p>
<p><code>todolist:latest</code> 이미지가 있는것을 확인 할수 있습니다. </p>
<br>



<img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image3.png" class="">



<br>

<p>이제 이 이미지를, DockerHub 에 전송해 보도록 하겠습니다. </p>
<br>

<blockquote>
<p>우선, tag 명령어를 사용하여, </p>
<p>업로드할 이미지의 이름을 지정해 줍니다. </p>
</blockquote>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker tag todolist:latest headfat1218/todolist:latest</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>이미지를 지정해주었으면, 이제 push 명령어를 사용하여, </p>
<p>push 를 진행 합니다. </p>
</blockquote>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker push headfat1218/todolist:latest</span><br></pre></td></tr></table></figure>

<br>

<p>명령어를 실행하면, 아래와 같이 진행이 되고 </p>
<br>

<img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image4.png" class="">

<br>

<img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image5.png" class="">

<br>

<blockquote>
<p>push 가 완료 된 후에, DockerHub 페이지로 가보면, </p>
<p>repository 에 전송 되어 있는것을 확인 할수 있습니다. </p>
</blockquote>
<br>

<img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image6.png" class="">

<br>

<h2 id="이미지를-푸쉬-하는-이유"><a href="#이미지를-푸쉬-하는-이유" class="headerlink" title="이미지를 푸쉬 하는 이유"></a>이미지를 푸쉬 하는 이유</h2><br>

<p>DockerHub 에 업로드 된 이미지는, 어디서든 pull 받아서 사용할수 있습니다. </p>
<p><br>아래 명령어를 예로 들어보면, DockerHub repository 저장소, headfat1218/todolist:latest 를 다운 받아와서 사용하겠다는 명령어 입니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8000:8000 --name todolist headfat1218/todolist:latest</span><br></pre></td></tr></table></figure>

<br>

<p>터미널에서, 위 명령어를 실행한뒤에, 브라우저에 접속해서 127.0.0.1:8000 으로 접속하면, </p>
<p><br>프로젝트가 잘 작동합니다. <br></p>
<p>로컬에서는 배포가 잘 이루어 지는것 같아 보이는데… 그 다음 스텝은 무엇이 될까요…? ㅠㅠ</p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>DockerHub</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 29편 - Dockerfile 작성후 이미지 생성</title>
    <url>/2020/07/21/TodoList-29%ED%8E%B8-Dockerfile-%EC%9E%91%EC%84%B1%ED%9B%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1/</url>
    <content><![CDATA[<h2 id="Dockerfile-작성"><a href="#Dockerfile-작성" class="headerlink" title="Dockerfile 작성"></a>Dockerfile 작성</h2><br>

<p>배포를 위해 현재까지 진행한 단계는, 아래와 같습니다. </p>
<p><br>각 단계마다 매우 꼬이고 있어서, 순서를 좀 정리 해봅니다.<br><br></p>
<ol>
<li>AWS EC2 생성 </li>
<li>AWS RDS 생성 - PostgreSQL 을 Django 프로젝트에 적용 </li>
<li>AWS S3 생성 및 Django 프로젝트에 적용 </li>
<li>AWS S3 정적 이미지와 CSS 파일 적용 </li>
<li>Docker 설치 </li>
<li>Dockerfile 작성 후 이미지 생성 </li>
<li>DockerHub Push </li>
</ol>
<br>

<blockquote>
<p><strong>Dockerfile 이란?</strong></p>
<p>Dockerfile 은 Docker 이미지를 생성하기 위해 필요한 명령어를 가지고 있는 파일로, </p>
<p>이 파일이 있는 디렉토리에서, Docker 이미지를 만들수 있습니다. </p>
<p>Dockerfile 에 나열되어 있는 명령어들을 자동으로 실행하여, 이미지를 빌드할때 해당 이미지에 필요한 </p>
<p>파일과 설정값들을 정할수 있습니다. </p>
<br>

<p>확장자 없이도 동작하고, </p>
<p><code>RUN</code>, <code>COPY</code>, <code>WORKDIR</code> 과 같은, Dockerfile 언어로 작성할수 있습니다. </p>
</blockquote>
<br>

<a id="more"></a><br><br>

<p>잘 작성된 Dockerfile 을 사용하여, 이미지를 생성할수 있고, 이미지는 컨테이너 실행에 필요한 파일들과 설정값들을 포함하고 있습니다. </p>
<br>

<p><strong>일단 dockerfile 과 start 파일을 작성해 보려 합니다. 작성을 마친뒤에는, 작성된 Dockerfile 을 사용하여, 이미지를 생성해 볼겁니다.<br></strong></p>
<br>

<h2 id="프로젝트-구조-확인하기"><a href="#프로젝트-구조-확인하기" class="headerlink" title="프로젝트 구조 확인하기"></a>프로젝트 구조 확인하기</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── config</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── Dockerfile     <span class="comment"># 확장자가 없는 Dockerfile 파일 </span></span><br><span class="line">├── manage.py</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── secrets.json</span><br><span class="line">├── start          <span class="comment"># 확장자가 없는 start 파일 </span></span><br><span class="line">├── static</span><br><span class="line">└── todo</span><br></pre></td></tr></table></figure>

<br>

<p>확장자가 없는, <code>Dockerfile</code> 과 <code>start</code>  파일을 생성해 줍니다 </p>
<br>

<h2 id="Dockerfile-파일과-start-파일"><a href="#Dockerfile-파일과-start-파일" class="headerlink" title="Dockerfile 파일과 start 파일"></a>Dockerfile 파일과 start 파일</h2><br>

<p><strong>컨테이너 실행에 필요한 이미지는 아래 사항들을 바탕으로 작성되어야 합니다</strong></p>
<br>

<ul>
<li><p>기본 이미지는 Python 3.8 을 베이스로 합니다 </p>
</li>
<li><p>이 이미지는, 로컬에 존재하는 todolist 프로젝트 파일들을 복사해서 가지고 있습니다 </p>
</li>
<li><p>이미지 안에, todo/requirements.txt 를 가지고 있기 때문에, <code>pip install -r /todo/requirements.txt</code>를 실행하여, 필요 패키지들을 설치 합니다 <br></p>
<br> 
</li>
<li><p>이 이미지를 사용하여 실행되는 컨테이너는, runserver 를 실행 시킵니다 (runserver 명령어를 실행하기 이전에 공통된 명령어들, <code>python manage.py makemigrations</code>, <code>python manage.py migrate</code> 그리고 <code>python manage.py runserver</code> 같은 명령어들은, todo/start 파일에 담겨져 잇어서, 해당 이미지는 이 start 파일을 실행시켜서 서버를 시작합니다.) </p>
</li>
</ul>
<br>

<blockquote>
<p>todolist/Dockerfile 을 아래와 같이 작성 </p>
</blockquote>
<br>

<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 기본설정 </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \ </span></span><br><span class="line">	&amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="line">		postgresql-client \</span><br><span class="line">	&amp;&amp; rm -rf /var/lib/apt/lists/* </span><br><span class="line">	</span><br><span class="line"><span class="comment"># Django 프로젝트 파일들을 이미지로 복사 </span></span><br><span class="line"><span class="comment"># 이미지 안에서도 todolist/ 폴더로 복사되게 지정 </span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /todolist </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 이미지에 복사된 requirements.txt 를 사용하여 패키지 설치 </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r /todolist/requirements.txt </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start 파일을 실행할수 있게 파일 설정 </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 755 /todolist/start </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 워킹 디렉토리를 /todolist 로 설정 </span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /todolist </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8000 포트를 expose </span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># app/start 파일을 실행 </span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/todolist/start"</span>]</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>todolist/start 파일을 아래와 같이 작성 </p>
<ul>
<li>참고 : start  파일은 확장자가 없음 </li>
</ul>
</blockquote>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">python manage.py makemigrations </span><br><span class="line">python manage.py migrate </span><br><span class="line"></span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure>



<br>



<h2 id="Dockerfile-로-이미지-생성하기"><a href="#Dockerfile-로-이미지-생성하기" class="headerlink" title="Dockerfile 로 이미지 생성하기"></a>Dockerfile 로 이미지 생성하기</h2><br>

<p>Dockerfile 과 start 파일을 작성해 주었으니, </p>
<p><br>이 파일들을 이용하여, 이미지를 하나 생성해 볼수 있습니다. </p>
<br>

<p>프로젝트 폴더인, todolist/폴더로 이동하여, 아래 명령어를 사용합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker build -t todolist .</span><br></pre></td></tr></table></figure>

<br>

<p><code>-t</code> : 생성될 이미지의 이름을 지정 </p>
<br>

<p><code>.</code>: Dockerfile 과 프로젝트 파일들이 있는 경로를 표시, Dockerfile 이 있는 위치이므로, 현재경로인 <code>.</code> 을 입력 </p>
<br>

<blockquote>
<p>docker images 명령어를 사용하여, </p>
<p>todolist:latest 와 Base 이미지인, python 3.8 이 있는것을 확인 할수 있습니다. </p>
<p>영상참고 </p>
</blockquote>
<br>





<p><a href="https://blog.naver.com/headfat1218/221975245936" target="_blank" rel="noopener">https://blog.naver.com/headfat1218/221975245936</a></p>
<br>

<br>

<h2 id="Docker-실행-시키기"><a href="#Docker-실행-시키기" class="headerlink" title="Docker 실행 시키기"></a>Docker 실행 시키기</h2><br>

<p>이미지가 생성되었으니, Docker 를 로컬에서 실행 시켜 보려 합니다.</p>
<p><br>8000번 포트를 열어 주기 때문에, <code>-p 8000:8000</code> 옵션을 넣어줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8000:8000 --name todolist todolist:latest</span><br></pre></td></tr></table></figure>

<br>

<table>
<thead>
<tr>
<th><strong>옵션</strong></th>
<th><strong>descriptions</strong></th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>백그라운드 실행</td>
</tr>
<tr>
<td>-p 8000:8000</td>
<td>호스트와 컨테이너 포트를 매핑</td>
</tr>
<tr>
<td>–name todolist</td>
<td>컨테이너의 이름을 todolist 로 지정</td>
</tr>
<tr>
<td>todolist:latest</td>
<td>이미지의 이름과 버전을 지정</td>
</tr>
</tbody></table>
<br>

<img src="/2020/07/21/TodoList-29%ED%8E%B8-Dockerfile-%EC%9E%91%EC%84%B1%ED%9B%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1/image1.png" class="">



<br>

<p><code>todolist:latest</code> 이미지를 사용하여, 컨테이너를 하나 실행 시켜 주었습니다. </p>
<p><br>이 컨테이너는, 백그라운드로 실행이 되고, dockerfile 에서 지정해준대로, runserver 를 구동하고 있습니다<br></p>
<p>브라우저로, 서버에 접속해 봅니다 (<a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a>)<br><br></p>
<p>로컬에서는 잘 작동하는것을 확인 할수 있습니다. </p>
<br>

<img src="/2020/07/21/TodoList-29%ED%8E%B8-Dockerfile-%EC%9E%91%EC%84%B1%ED%9B%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1/image2.png" class="">

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>배포가 제일 어려운것 같습니다. 틀린 순서일지도 모르지만, </p>
<p><br>지나온 순서를 다시 리마인드 합니다. <br></p>
<br>

<ol>
<li><p>AWS EC2 생성 </p>
</li>
<li><p>AWS RDS 생성 - PostgreSQL 적용 </p>
</li>
<li><p>AWS S3 생성 및 적용 </p>
</li>
<li><p>AWS S3 정적 이미지와 CSS 파일 적용 </p>
</li>
<li><p>Docker 설치 </p>
</li>
<li><p><strong>Dockerfile 작성 후 이미지 생성</strong> </p>
</li>
<li><p>DockerHub Push  </p>
</li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>컨테이너</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 28편 - Docker 컨테이너 생성 연습</title>
    <url>/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/</url>
    <content><![CDATA[<h2 id="Docker-컨테이너-연습"><a href="#Docker-컨테이너-연습" class="headerlink" title="Docker 컨테이너 연습"></a>Docker 컨테이너 연습</h2><br>

<p>이 포스팅은 Docker 컨테이너를 실행해보는 개인적인 과정을 담고 있습니다. </p>
<p><br><a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html" target="_blank" rel="noopener">https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html</a> 에 있는 내용을 기반으로 따라한 과정과 정리 내용입니다. </p>
<br>

<p>도커에 대해 자세하게 알고 싶다면, 위 블로그를 참조하시면 됩니다. </p>
<br>

<br>

<h2 id="Docker-설치-확인"><a href="#Docker-설치-확인" class="headerlink" title="Docker 설치 확인"></a>Docker 설치 확인</h2><a id="more"></a>

<br>

<br>

<p>이전 포스팅에서 도커 설치를 진행 했었는데, 잘 설치되었는지 확인해 봅니다. </p>
<p><br>터미널에서, <code>docker version</code> 명령어를 실행해 봅니다.  </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image1.png" class="">

<br>

<p>정상적인 설치가 완료 된것으로 보입니다. </p>
<p><br>버전 정보는 Client 와 서버로 나누어져 있습니다. </p>
<p>이는, 클라이언트와 서버 역할을 할수 있다는것을 의미 합니다. </p>
<br>

<h2 id="컨테이너-실행-하기"><a href="#컨테이너-실행-하기" class="headerlink" title="컨테이너 실행 하기"></a>컨테이너 실행 하기</h2><br>

<p>도커를 실행하는 명령어의 구조는 아래와 같습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure>

<br>

<p>자주 사용하는 옵션들은, 아래와 같습니다. </p>
<br>

<table>
<thead>
<tr>
<th>옵션</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>detached mode 흔히 말하는 백그라운드 모드</td>
</tr>
<tr>
<td>-p</td>
<td>호스트와 컨테이너의 포트를 연결 (포워딩)</td>
</tr>
<tr>
<td>-v</td>
<td>호스트와 컨테이너의 디렉토리를 연결 (마운트)</td>
</tr>
<tr>
<td>-e</td>
<td>컨터이너 내에서 사용할 환경변수 설정</td>
</tr>
<tr>
<td>-name</td>
<td>컨테이너 이름 설정</td>
</tr>
<tr>
<td>-rm</td>
<td>프로세스 종료시 컨테이너 자동 제거</td>
</tr>
<tr>
<td>-it</td>
<td>-i 와 -t 를 동시에 사용한 것으로 터미널 입력을 위한 옵션</td>
</tr>
<tr>
<td>-link</td>
<td>컨터이너 연결 [컨테이너명:별칭]</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="컨테이너-생성하기"><a href="#컨테이너-생성하기" class="headerlink" title="컨테이너 생성하기"></a>컨테이너 생성하기</h2><br>

<p>터미널에서 아래 명령어를 실행하여, 컨테이너를 생성해 봅니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run ubuntu:18.04</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image2.png" class="">

<br>

<p><code>docker run ubuntu:18.04</code> 를 실행하면, </p>
<p><br>ubuntu:18.04 를 로컬에서 찾을수가 없으니, 다운로드를 한 뒤에 컨테이너를 생성하고 시작합니다. </p>
<p><br><br></p>
<p>중요한점은, 컨테이너는 생성되었지만, 바로 종료가 된다는 점인데. </p>
<p><br>컨테이너는 잘 생성되어 실행 되었지만, 명령어가 전달되지 않았기 때문에, <br>생성되자마자 바로 종료가 됩니다. 컨테이너는 프로세스이기 때문에, 실행중인 프로세스가 없으면 컨테이너는 종료됩니다.<br><br></p>
<h2 id="컨테이너-생성후-bin-bash-실행"><a href="#컨테이너-생성후-bin-bash-실행" class="headerlink" title="컨테이너 생성후 bin/bash/ 실행"></a>컨테이너 생성후 bin/bash/ 실행</h2><br>

<p>위와 같은 명령어지만, 몇가지 옵션을 추가하여 컨테이너를 실행 해 볼수 있습니다. <br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run --rm -it ubuntu:18.04 /bin/bash</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image3.png" class="">

<br>

<p><code>--rm</code>  프로세스가 종료되면, 컨테이너가 자동으로 삭제되도록 하는 옵션 </p>
<br>

<p><code>--it</code> 컨테이너 내부에 들어가기 위한 bash 쉘을 실행하고, 키보드 입력을 할수 있게 해줌 </p>
<br>

<blockquote>
<p>bash 쉘을 <code>exit</code> 명령어를 사용하여 종료하면, 컨테이너도 같이 종료가 됩니다 (<code>--rm</code> 옵션으로 인해서..) </p>
</blockquote>
<br>

<br>

<h2 id="Redis-Container"><a href="#Redis-Container" class="headerlink" title="Redis Container"></a>Redis Container</h2><br>

<p>redis 는 메모리기반의 다양한 기능을 가진 스토리지로, <br></p>
<p>6379 포트로 통신하여, telnet 명령어로 테스트해볼수 있습니다 <br></p>
<br>

<p>일단 아래 명령어를 실행하여, detached mode 로 redis 컨테이너를 실행해줍니다 <br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker runi -d -p 1234:6379 redis</span><br></pre></td></tr></table></figure>

<br>

<p>-d 와 -p 옵션을 추가하여, 컨테이너의 포트를 호스트 포트로 연결해 줍니다. </p>
<p><br>-d 가 없으면, 프로세스가 foreground 로 실행되어, 아무키도 입력할수 없습니다. </p>
<br>

<img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image4.png" class="">

<br>

<p>redis 에 접속하여 새로운 키를 저장하고 불러와 보았습니다. </p>
<p><br>호스트의 포트만 다르게 하며느 하나의 서버에 여러개의 redis 서버를 띄우는것도 간단합니다. </p>
<br>

<br>

<h2 id="MySQL-5-7-Container-생성"><a href="#MySQL-5-7-Container-생성" class="headerlink" title="MySQL 5.7 Container 생성"></a>MySQL 5.7 Container 생성</h2><br>

<p>MySQL 서버 컨테이너를 생성 후 실행해봅니다. </p>
<p><br>여기에 들어가는 옵션들이 중요한데. </p>
<br>

<table>
<thead>
<tr>
<th>옵션</th>
<th>설명</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td>detached mode 흔히 말하는 백그라운드 모드</td>
</tr>
<tr>
<td>-p</td>
<td>호스트와 컨테이너의 포트를 연결 (포워딩)</td>
</tr>
<tr>
<td>-e</td>
<td>환경변수 설정</td>
</tr>
<tr>
<td>–name</td>
<td>읽기 어려운 ID 대신, 쉬운 이름을 부여</td>
</tr>
</tbody></table>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 \</span><br><span class="line">	-e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="literal">true</span> \</span><br><span class="line">	--name mysql \</span><br><span class="line">	mysql:5.7</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image5.png" class="">

<br>

<p>해당 시스템에는, mysql이 설치가 되질 않아서, mysql에는 접속이 되지 않습니다;;; <br><br></p>
<h2 id="tensorflow-컨테이너"><a href="#tensorflow-컨테이너" class="headerlink" title="tensorflow 컨테이너"></a>tensorflow 컨테이너</h2><br>

<p>머신러닝을 할수 있는 툴, tensorflow 를 만들어 실행해 봅니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8888:8888 -p 6006:6006 teamlab/pydata-tensorflow:0.1</span><br></pre></td></tr></table></figure>

<br>

<h2 id="도커-기본-명령어-컨테이너-목록-확인"><a href="#도커-기본-명령어-컨테이너-목록-확인" class="headerlink" title="도커 기본 명령어 - 컨테이너 목록 확인"></a>도커 기본 명령어 - 컨테이너 목록 확인</h2><br>

<p><code>ps</code> 는 실행중인 컨테이너 목록을 보여줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 컨테이너 목록 확인 </span></span><br><span class="line">docker ps [options]</span><br><span class="line"></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image6.png" class="">

<br>

<p>혹은, <code>-a</code> 옵션을 주어도 됩니다 <br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image7.png" class="">

<br>

<h2 id="도커-기본-명령어-컨테이너-중지"><a href="#도커-기본-명령어-컨테이너-중지" class="headerlink" title="도커 기본 명령어 - 컨테이너 중지"></a>도커 기본 명령어 - 컨테이너 중지</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker stop [options] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure>

<br>

<p>생성되어 있던 tensorflow 를 중지해봅니다<br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps  <span class="comment"># get container ID</span></span><br><span class="line">docker stop TENSORFLOW_CONTAINER_ID </span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image8.png" class="">

<br>



<h2 id="도커-기본-명령어-컨테이너-제거"><a href="#도커-기본-명령어-컨테이너-제거" class="headerlink" title="도커 기본 명령어 - 컨테이너 제거"></a>도커 기본 명령어 - 컨테이너 제거</h2><br>

<p>종료된 컨테이너를 완전하게 제거하는 명령어는 아래와 같습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker rm [options] CONTAINER [CONTAINER..]</span><br></pre></td></tr></table></figure>

<br>

<p>종료된 ubuntu 컨테이너와 tensorflow 컨테이너를 삭제해봅니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker ps -a   <span class="comment"># get container ID </span></span><br><span class="line">docker rm <span class="comment">#ubuntu_CONTAINER_ID #TENSORFLOW_CONTAINER_ID </span></span><br><span class="line"></span><br><span class="line">docker ps -a  <span class="comment"># 위 컨테이너들이 존재하는지 확인</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="도커-기본-명령어-이미지-제거"><a href="#도커-기본-명령어-이미지-제거" class="headerlink" title="도커 기본 명령어 - 이미지 제거"></a>도커 기본 명령어 - 이미지 제거</h2><br>

<p>이미지 목록 확인 하기 (images)<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image9.png" class="">

<br>

<p>컨테이너가 실행중인 이미지는 삭제되지 않지만, 아래 명령어를 사용해서, tensorflow 를 제거해봅니다 <br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello-world                     latest              fce289e99eb9        16 months ago       1.84kB</span><br><span class="line">teamlab/pydata-tensorflow       0.1                 7bdf5d7e0191        3 years ago         3.08GB</span><br><span class="line"> dhkang  ~ $ docker rm 7bdf5d7e0191</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image10.png" class=""><br>

<p>이미지가 삭제 됩니다</p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 27편 - Docker 리뷰</title>
    <url>/2020/07/06/TodoList-27%ED%8E%B8-Docker-%EB%A6%AC%EB%B7%B0/</url>
    <content><![CDATA[<h2 id="Docker-리뷰"><a href="#Docker-리뷰" class="headerlink" title="Docker 리뷰"></a>Docker 리뷰</h2><br>

<blockquote>
<p><strong>도커란?</strong> </p>
<p>컨테이너 기반의 오픈소스 가상화 플랫폼으로, </p>
<p>컨테이너는 다양한 프로그램, 실행환경을 추상화 하고. 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해줍니다. </p>
</blockquote>
<br>

<a id="more"></a>

<h3 id="컨테이너-Container"><a href="#컨테이너-Container" class="headerlink" title="컨테이너 (Container)"></a>컨테이너 (Container)</h3><br>

<p>격리된 공간에서 프로세스가 동작하는 기술로, 가상화 기술이지만 기존 가상화 기술과는 약간의 차이가 있습니다. </p>
<p><br>추가적인 OS를 설치하여 가상화 하는 방법 대신에, 프로세스를 격리 하는 방식을 사용합니다 </p>
<p><br>리눅스 컨테이너를 사용하여, 단순히 프로세스를 격리시켜서 가볍고 빠르게 동작하게 할수 있습니다. </p>
<p><br>CPU 나 메모리는 딱 프로세스가 필요한 만큼만 추가로 사용하고, 성능적으로도 손실이 별로 없습니다. </p>
<br>



<h3 id="이미지-image"><a href="#이미지-image" class="headerlink" title="이미지 (image)"></a>이미지 (image)</h3><br>

<p><strong>이미지는 컨테이너 실행에 필요한 파일과 설정값들을 포함하고 있는것으로.</strong> </p>
<p><br>상태값을 가지게 되며, immutable 합니다 (즉, 한번 선언되면 수정될수는 없음). 같은 이미지를 가지고 여러개의 컨테이너를 생성할수 있고, 컨테이너의 상태가 바뀌거나 컨테이너가 삭제 되더라도, 이미지는 변하지 않고, 그대로 남습니다. </p>
<br>

<p>새로운 서버가 추가되면, 미리 만들어 놓은 이미지를 다운받고 컨테이너를 생성만 하면 됩니다. </p>
<br>

<p>한 서버에 여러개의 컨테이너를 실행할수 있고, 수십, 수백, 수천대의 컨테이너 실행도 괜찮습니다. </p>
<br>

<blockquote>
<p><strong>Docker Image (도커 이미지)는</strong> </p>
<p>Docker Hub 와 Docker Registry 저장소를 직접 만들어 관리할수 있습니다 </p>
</blockquote>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 26편 - Docker 설치 (Ubuntu18.04) 기준</title>
    <url>/2020/07/05/TodoList-26%ED%8E%B8-Docker-%EC%84%A4%EC%B9%98-Ubuntu18-04-%EA%B8%B0%EC%A4%80/</url>
    <content><![CDATA[<h2 id="Docker-설치-ubuntu18-04"><a href="#Docker-설치-ubuntu18-04" class="headerlink" title="Docker 설치 (ubuntu18.04)"></a>Docker 설치 (ubuntu18.04)</h2><p><br><br></p>
<blockquote>
<p><strong>Docker 란?</strong></p>
<p>Linux 컨테이너라는 커널 컨테이너 기술을 이용하여 만든 컨테이너 기술 중 하나.</p>
<ul>
<li>운영체제를 가상화 하지 않는 컨테이너 기술이라, 가상머신에 비해 가볍다 </li>
<li>VM 을 포함하여, 한대의 서버에 여러개의 서비스를 구동하기 좋다 </li>
<li>가상머신 (VM) 과는 달리, 기존 리눅스 자원 (디스크, 네트워크) 들을 그대로 활용할수 있어서, 여러 서비스들을 한 서버에 돌기기가 좋은 편이다. </li>
</ul>
<br>

<p>구글과 아마존에서도 도커를 지원하고 있기 떄문에, 많은 사용자들이 작성해둔 소프트웨어 패키지/이미지들이 많아서, 사용성과 접근성이 좋다. </p>
<br>

<p><code>다시 한번 정리하면, 도커란,</code> </p>
<p>컴퓨터안에 다른 공간들과 분리된, 컨테이너 라는 가상의 공간을 만들어 주는 프로그램으로, </p>
<p>리눅스 기반으로 되어 있다. </p>
<br>

<p>컨테이너를 통해, 여러 환경들을 관리할수 있고, 같은 세팅을 공유하는 일도, </p>
<p>이미지 파일 하나만 공유한다면, 쉽게 작업할수 있다. </p>
</blockquote>
<br>

<a id="more"></a>

<br>

<h2 id="Docker-설치하기-Ubuntu18-04"><a href="#Docker-설치하기-Ubuntu18-04" class="headerlink" title="Docker 설치하기 (Ubuntu18.04)"></a>Docker 설치하기 (Ubuntu18.04)</h2><br>

<p>이전 도커의 버전들은, <code>docker</code>, <code>docker.io</code> 혹은 <code>docker-engine</code>으로 불리웁니다. </p>
<p><br>만약 이들이 설치되어 있다면, 언인스톨 해주어야 합니다. 터미널에서 아래 명령어를 실행해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="Repository-셋업하기"><a href="#Repository-셋업하기" class="headerlink" title="Repository 셋업하기"></a>Repository 셋업하기</h3><br>

<br>

<ol>
<li><p>apt 패키지 인덱스를 업데이트 해주고, apt 가 HTTPS 를 통해 저장소를 사용할수 있게 해줍니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>도커의 공식 GPG 키를 추가해 줍니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure>

<br>
</li>
<li><p>아래 명령어를 실행하여, 안정적인 저장소를 설정 합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br></pre></td></tr></table></figure>

<br>



</li>
</ol>
<h3 id="Docker-Engine-인스톨-하기"><a href="#Docker-Engine-인스톨-하기" class="headerlink" title="Docker Engine 인스톨 하기"></a>Docker Engine 인스톨 하기</h3><br>

<p>apt 패키지 인덱스를 업데이트 해주고, 가장 최근의 도커 엔진을 설치해 줍니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>도커 엔진이 알맞게 설치 되었는지 확인 하기 위해, </p>
<p>hello-world 이미지를 실행 시켜 봅니다 </p>
</blockquote>
<br>

<p>이 커멘드를 실행 시키면, 테스트 이미지를 다운 받아서, 컨테이너 안에 실행 시킵니다. </p>
<p><br>컨테이너가 실행되면, 정보 메시지를 출력하고 종료됩니다. </p>
<br>

<img src="/2020/07/05/TodoList-26%ED%8E%B8-Docker-%EC%84%A4%EC%B9%98-Ubuntu18-04-%EA%B8%B0%EC%A4%80/image1.png" class="">

<br>

<p>Docker 설치가 완료 되었습니다! </p>
<br>]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>ubuntu18.04</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 25편 - AWS S3 정적 이미지와 CSS 파일 적용</title>
    <url>/2020/06/16/TodoList-25%ED%8E%B8-AWS-S3-%EC%A0%95%EC%A0%81-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-CSS-%ED%8C%8C%EC%9D%BC-%EC%A0%81%EC%9A%A9/</url>
    <content><![CDATA[<h2 id="AWS-S3-정적-이미지와-CSS-파일-적용"><a href="#AWS-S3-정적-이미지와-CSS-파일-적용" class="headerlink" title="AWS S3 정적 이미지와 CSS 파일 적용"></a>AWS S3 정적 이미지와 CSS 파일 적용</h2><br>

<p>이전 포스팅에서, </p>
<p>S3 를 사용해 보았는데, 그전까지 잘 보이던 CSS 와 이미지 파일들이 보이지 않았습니다. </p>
<br>

<p>이미지와 CSS가 적용되지 않은 사이트를 보게되니, 살짝 당황 했었습니다. </p>
<br>

<br>

<p>아래 두가지 사유로 인해서, 적용이 되지 않는다는것을 알아냈습니다. </p>
<br>

<ol>
<li>경로</li>
<li>권한 (엑세스 설정) </li>
</ol>
<br>

<a id="more"></a> 

<br>

<h2 id="경로-settings-py-파일에-S3관련-세팅-재확인"><a href="#경로-settings-py-파일에-S3관련-세팅-재확인" class="headerlink" title="경로 (settings.py 파일에 S3관련 세팅 재확인)"></a>경로 (settings.py 파일에 S3관련 세팅 재확인)</h2><br>

<p>정적파일이 있는 URL 을 잘 찾을수 있도록, 경로를 다시 한번 확인해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django-storages</span></span><br><span class="line"><span class="comment"># django FIleStorage로 S3Boto3Storage (AWS S3) 사용 </span></span><br><span class="line">SECRETS = json.load(open(os.path.join(BASE_DIR, <span class="string">'secrets.json'</span>), <span class="string">'rt'</span>))</span><br><span class="line">DEFAULT_FILE_STORAGE = <span class="string">'storages.backends.s3boto3.S3BotoStorage'</span></span><br><span class="line">AWS_ACCESS_KEY_ID = SECRETS[<span class="string">'AWS_ACCESS_KEY_ID'</span>]</span><br><span class="line">AWS_SECRET_ACCESS_KEY = SECRETS[<span class="string">'AWS_SECRET_ACCESS_KEY'</span>]</span><br><span class="line">AWS_STORAGE_BUCKET_NAME = <span class="string">'todolist-djangojenge'</span></span><br><span class="line">AWS_S3_REGION_NAME = <span class="string">'ap-northeast-2'</span></span><br><span class="line">AWS_S3_CUSTOM_DOMAIN = <span class="string">'%s.s3.%s.amazonaws.com'</span> % (AWS_STORAGE_BUCKET_NAME, AWS_S3_REGION_NAME)</span><br><span class="line">AWS_AUTO_CREATE_BUCKET = <span class="literal">True</span></span><br><span class="line">AWS_DEFAULT_ACL = <span class="string">'public-read'</span></span><br><span class="line">AWS_S3_OBJECT_PARAMETERS = &#123;<span class="string">'CacheControl'</span>: <span class="string">'max-age=86400'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/howto/static-files/</span></span><br><span class="line">PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">STATIC_ROOT = os.path.join(PROJECT_DIR, <span class="string">'static'</span>)</span><br><span class="line">AWS_LOCATION = <span class="string">'static'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 필자의 경우, 아래 STATIC_URL 이 'https://%s/' %(AWS_S3_CUSTOM_DOMAIN) 으로만 되어 있었음</span></span><br><span class="line"><span class="comment"># S3에 있는 정적파일들의 Full 주소는, 아래 조합과 같음. </span></span><br><span class="line">STATIC_URL = <span class="string">'https://%s/%s/'</span> % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION) </span><br><span class="line"></span><br><span class="line">STATICFILES_STORAGE = <span class="string">'storages.backends.s3boto3.S3Boto3Storage'</span></span><br><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">'static'</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># MEDIA_ROOT 설정 </span></span><br><span class="line"><span class="comment"># user-uploaded static files 의 기본 경로 </span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'.media'</span>)</span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br></pre></td></tr></table></figure>

<br>

<p>참고로, secrets.json 파일은, 프로젝트 폴더 내에 존재하는 json 파일로, </p>
<p><br>이 파일에 AWS_ACCESS_KEY 값과, AWS_SECRET_ACCESS_KEY 값이 json 형태로 저장되어 있습니다. </p>
<p><br>이를, json.loads 를 사용하여, settings.py 파일에 적용해 줍니다. </p>
<br>

<h2 id="권한-엑세스-설정"><a href="#권한-엑세스-설정" class="headerlink" title="권한 (엑세스 설정)"></a>권한 (엑세스 설정)</h2><br>

<blockquote>
<p>기본적으로, S3 버킷은, private 으로 설정이 되어 있어서, </p>
<p>그냥 정적파일을 읽어 오려 하면, 안 읽어 집니다. </p>
</blockquote>
<br>

<p>따라서, S3 버킷 접근 속성을, Public 으로 바꾸어줘야. </p>
<p><br>서버를 실행 시켰을때, 정적파일들을 읽을수 있게 되어, 이 파일들을 이용해서 화면에 렌더해줄수 있습니다. </p>
<p><br>아래 사이트에 아주 자세히 나와 있어서, 참조하고 권한을 고쳐주면 됩니다. </p>
<br>

<p><a href="https://www.simplified.guide/aws/create-public-s3-bucket" target="_blank" rel="noopener">https://www.simplified.guide/aws/create-public-s3-bucket</a></p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>S3 적용후에, 정적파일들이 적용 되지 않아서 당황했었지만, <br></p>
<p>다행히, 에러를 해결할수 있었습니다. 이제 정적파일들과 미디어 파일들은, 로컬 위치가 아닌, S3에서 불러 옵니다. <br></p>
<p>S3 에서 불러와도 로컬에서 불러온것처럼, 잘 적용되고 표시되는것을 확인할수 있었습니다. </p>
<br>

<img src="/2020/06/16/TodoList-25%ED%8E%B8-AWS-S3-%EC%A0%95%EC%A0%81-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-CSS-%ED%8C%8C%EC%9D%BC-%EC%A0%81%EC%9A%A9/image1.png" class="">]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>S3</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 24편 - AWS S3 적용하기</title>
    <url>/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="Amazon-S3-적용하기"><a href="#Amazon-S3-적용하기" class="headerlink" title="Amazon S3 적용하기"></a>Amazon S3 적용하기</h2><br>

<blockquote>
<p>Amazon S3 란? </p>
<p>Amazon S3 는 인터넷상 어디서나 원하는 양의 데이터를 저장하고 검색할수 있도록 구축된, </p>
<p>객체 스토리지 입니다. 안정성이 매우 뛰어나고, 가용성이 높으며, </p>
<p>무제한으로 확장 가능한 데이터 스토리지 인프라를 매우 저렴한 비용으로 제공하는, </p>
<p>간단한 스토리지 서비스 입니다. </p>
</blockquote>
<br>

<a id="more"></a> 

<br>

<h2 id="Amazon-S3로-무엇을-할수-있나요"><a href="#Amazon-S3로-무엇을-할수-있나요" class="headerlink" title="Amazon S3로 무엇을 할수 있나요?"></a>Amazon S3로 무엇을 할수 있나요?</h2><br>

<blockquote>
<p>스토리지를 이용하여, 간편한 웹 서비스 인터페이스를 사용할수 있습니다. </p>
<p>인터넷 스토리지를 이용한 어플리케이션을 쉽게 개발할수 있습니다. </p>
<p>원하는 형식의 데이터를 원하는 만큼 저장하고, 동일한 데이터를 수백만번 읽거나 비상 재해 복구 용도로만 사용하고, 간단한 FTP 어플리케이션 또는, Amazon.com 소매 웹사이트와 같은 복잡한 웹 어플리케이션을 구축할수 있습니다. </p>
<br>

<p>Amazon S3 를 사용하는 개발자는 데이터 저장 방법에 대한 고민을 하기 보다, </p>
<p>좀더 혁신적인 것들에 집중할수 있습니다. </p>
</blockquote>
<br>

<br>

<h2 id="AWS-S3-생성하기"><a href="#AWS-S3-생성하기" class="headerlink" title="AWS S3 생성하기"></a>AWS S3 생성하기</h2><br>

<p>우선, S3 를 생성하기 위해서, AWS S3 Management 콘솔에 접속합니다. </p>
<br>

<img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image1.png" class="">

<br>

<p>버킷 만들기를 클릭합니다</p>
<br>

<img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image2.png" class="">

<br>

<p>버킷 이름을 정하고, 버킷 만들기 버튼을 눌러서 버킷을 생성해 줍니다. </p>
<br>

<br>

<h2 id="필요한-패키지-설치"><a href="#필요한-패키지-설치" class="headerlink" title="필요한 패키지 설치"></a>필요한 패키지 설치</h2><br>

<br>

<p>터미널에서, 아래 명령어를 실행해서, <code>django-storages</code> 와 <code>boto3</code> 를 설치해 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-storages</span><br><span class="line">pip install boto3</span><br></pre></td></tr></table></figure>

<br>

<p>그리고 나서, settings.py 에 INSTALLED_APPS 에 storage 를 등록해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="string">'todo'</span>,</span><br><span class="line">    <span class="string">'django_extensions'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># storages 설정 </span></span><br><span class="line">    <span class="string">'storages'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Bulma CSS Framework </span></span><br><span class="line">    <span class="string">'bulma'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Allauth를 위한 Apps </span></span><br><span class="line">    <span class="string">'django.contrib.sites'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'allauth'</span>,</span><br><span class="line">    <span class="string">'allauth.account'</span>,</span><br><span class="line">    <span class="string">'allauth.socialaccount'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 소셜로그인을 할 제공자 리스트를 아래에 포함 </span></span><br><span class="line">    <span class="string">'allauth.socialaccount.providers.naver'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="settings-py-에-S3-기본설정"><a href="#settings-py-에-S3-기본설정" class="headerlink" title="settings.py 에 S3 기본설정"></a>settings.py 에 S3 기본설정</h2><br>

<p>생성된 버킷을 사용하기 위한 패키지들을 모두 설치했으면, S3를 Django 에서 사용하기 위해서,</p>
<p><br>settings.py 파일에, 아래 내용을 추가해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django-storages </span></span><br><span class="line"><span class="comment"># Django의 FilesStorage로 S3Boto3Storage (AWS S3) </span></span><br><span class="line">DEFAULT_FILE_STORAGE = <span class="string">'storages.backends.s3boto3.S3Boto3Storage'</span></span><br><span class="line">AWS_ACCESS_KEY_ID = <span class="string">''</span></span><br><span class="line">AWS_SECRET_ACCESS_KEY = <span class="string">''</span></span><br><span class="line">AWS_STORAGE_BUCKET_NAME = <span class="string">'todolist-djangojenge'</span></span><br><span class="line">AWS_S3_CUSTOM_DOMAIN = <span class="string">'%s.s3.amazonaws.com'</span> % AWS_STORAGE_BUCKET_NAME</span><br><span class="line">AWS_AUTO_CREATE_BUCKET = <span class="literal">True</span></span><br><span class="line">AWS_S3_REGION_NAME = <span class="string">'ap-northeast-2'</span></span><br><span class="line">AWS_DEFAULT_ACL = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<br>

<p>여기서 중요한 값들은,  아래 두가지 AWS 관련 값들입니다. </p>
<br>

<ol>
<li>AWS_ACCESS_KEY_ID </li>
<li>AWS_SECRET_ACCESS_KEY </li>
</ol>
<br>

<p>이 값들을 받아오기 위한 과정을 아래에 설명합니다. </p>
<br>

<h2 id="AWS-IAM-에서-ACCESS-KEY-값들-받아오기"><a href="#AWS-IAM-에서-ACCESS-KEY-값들-받아오기" class="headerlink" title="AWS IAM 에서 ACCESS_KEY 값들 받아오기"></a>AWS IAM 에서 ACCESS_KEY 값들 받아오기</h2><br>

<p>AWS_ACCESS_KEY_ID 와 AWS_SECRET_ACCESS_KEY 를 가져오기 위해서는, </p>
<p><br>AWS IAM 서비스에 접속을 해줍니다. </p>
<br>

<img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image3.png" class="">

<br>

<br>

<blockquote>
<p>IAM (Idnetity and Access Management (IAM)) 에서, </p>
<p>사용자 추가를 해줍니다. </p>
</blockquote>
<br>

<img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image4.png" class="">

<br>

<p>사용자 추가 버튼을 누르면, 아래와 같이. 세부정보 설정 페이지가 나오고, </p>
<p><br>사용자 이름을 쓴 다음, 엑세스 유형을 프로그래밍 방식 엑세스로 선택 합니다. </p>
<br>

<img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image5.png" class="">

<p><br>****</p>
<p><strong>다음 버튼을 누르면, 권한 설정 페이지로 넘어갑니다.</strong> </p>
<p><br>아래와 같이, <strong>기존 정책 직접연결 탭을 누르고</strong> , 정책 필터에 AmazonS3FullAccess 를 검색하여, </p>
<p>정책이름을 클릭합니다. AmazonS3FullAccess 에 표시를 하고, 다음으로 넘어갑니다. </p>
<br>

<br>

<img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image6.png" class="">

<br>

<p>다음은 태그를 설정하는 페이지인데, 그다지 중요하지 않습니다. </p>
<p><br>그냥 다음으로 넘어갑니다.<br></p>
<br>

<img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image7.png" class="">

<br>

<p>검토 사항을 체크하고, 사용자 만들기를 클릭합니다.</p>
<br>

<img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image8.png" class="">

<br>

<p>사용자 만들기를 클릭하면, 아래 화면 엑세스키 ID 와 비밀엑세스 키 밑에, <br></p>
<p>각각의 값들이 표시 되어서 나옵니다. </p>
<br>

<blockquote>
<p>ACCESS_KEY_ID 와 SECRET_ACCESS_KEY 를 여기에서 잘 복사해 둡니다. </p>
</blockquote>
<br>

<img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image9.png" class="">

<br>

<br>

<blockquote>
<p>이제 이 값들을, </p>
<p>settings.py 파일에 AWS_ACCESS_KEY_ID 값과 AWS_SECRET_ACCESS_KEY 값에 넣어줍니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django-storages </span></span><br><span class="line"><span class="comment"># Django의 FilesStorage로 S3Boto3Storage (AWS S3) </span></span><br><span class="line">DEFAULT_FILE_STORAGE = <span class="string">'storages.backends.s3boto3.S3Boto3Storage'</span></span><br><span class="line">AWS_ACCESS_KEY_ID = <span class="string">''</span>         <span class="comment"># ACCESS_KEY_ID 입력 </span></span><br><span class="line">AWS_SECRET_ACCESS_KEY = <span class="string">''</span>     <span class="comment"># SECRET_ACCESS_KEY 입력 </span></span><br><span class="line">AWS_STORAGE_BUCKET_NAME = <span class="string">'todolist-djangojenge'</span></span><br><span class="line">AWS_S3_CUSTOM_DOMAIN = <span class="string">'%s.s3.amazonaws.com'</span> % AWS_STORAGE_BUCKET_NAME</span><br><span class="line">AWS_AUTO_CREATE_BUCKET = <span class="literal">True</span></span><br><span class="line">AWS_S3_REGION_NAME = <span class="string">'ap-northeast-2'</span></span><br><span class="line">AWS_DEFAULT_ACL = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="정적파일-경로-설정"><a href="#정적파일-경로-설정" class="headerlink" title="정적파일 경로 설정"></a>정적파일 경로 설정</h2><p><br><br></p>
<p>settings.py 파일에 STATIC 관련 내용을 아래와 같이 바꿔줍니다.<br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/howto/static-files/</span></span><br><span class="line">PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">STATIC_ROOT = os.path.join(PROJECT_DIR, <span class="string">'static'</span>)</span><br><span class="line">AWS_LOCATION = <span class="string">'static'</span></span><br><span class="line">STATIC_URL = <span class="string">'https://%s/%s/'</span> % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)</span><br><span class="line">STATICFILES_STORAGE = <span class="string">'storages.backends.s3boto3.S3Boto3Storage'</span></span><br><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">'static'</span>)]</span><br></pre></td></tr></table></figure>

<br>

<p>위와 같이 STATIC 관련 내용을 설정해주었으면, 아래 명령어를 실행하여, staticfiles 들을 모아줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python manage.py collectstatic </span><br><span class="line">You have requested to collect static files at the destination</span><br><span class="line">location as specified <span class="keyword">in</span> your settings.</span><br><span class="line"></span><br><span class="line">This will overwrite existing files!</span><br><span class="line">Are you sure you want to <span class="keyword">do</span> this?</span><br><span class="line"></span><br><span class="line">Type <span class="string">'yes'</span> to <span class="built_in">continue</span>, or <span class="string">'no'</span> to cancel: yes</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/sass/package.json'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/sass/package-lock.json'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/sass/style.sass'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/css/style.css.map'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/css/style.min.css'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/css/style.css'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line"></span><br><span class="line">144 static files copied.</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>S3에 로그인해서 들어가보면, static 하고 todo 폴더가 생성되어 있는것을 확인 할수 있었습니다. </p>
<p><br>정적파일과, 미디어 파일을 관리하는 폴더입니다.<br><br></p>
<img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image10.png" class="">

<br>

<p>그런데, 문제가 하나 생깁니다.. 정적파일을 모으고 서버를 실행시켜도. </p>
<p><br>정적파일들이 적용되지 않는것을 확인할수 있습니다. <br></p>
<br>

<img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image11.png" class="">

]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>S3</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 23편 - AWS RDS 사용하기</title>
    <url>/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="AWS-RDS-사용하기"><a href="#AWS-RDS-사용하기" class="headerlink" title="AWS RDS 사용하기"></a>AWS RDS 사용하기</h2><br>

<p>지난 포스팅에서, 데이터베이스 인스턴스 생성하기 버튼을 눌러 RDS 인스턴스 생성을 하였습니다. </p>
<br>

<p>이제, 사용 가능한 RDS 인스턴스가 있습니다. </p>
<br>

<img src="/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/image1.png" class=""> 

<br>

<p>이 인스턴스를 클릭하면, 엔드포인트가 생성 되어 있는것을 확인 할수 있는데. </p>
<p><br>이 앤드포인트를 Django에서 데이터베이스 설정할때 사용할것 입니다. </p>
<a id="more"></a> 

<br>

<h2 id="settings-py-파일에-DATABASES"><a href="#settings-py-파일에-DATABASES" class="headerlink" title="settings.py 파일에 DATABASES"></a>settings.py 파일에 DATABASES</h2><br>

<p>settings.py 파일의 DATABASES 설정으로 가서, 아래와 같이 DATABASES 설정을 해줍니다. </p>
<br> 

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'todolist'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'djangojenge'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'django12!'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'todolist-django.r2tcewdefdf1.ap-northeast-2.rds.amazonaws.com'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">5432</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>위 DATABASES 설정에서, </p>
<p>‘NAME’ 과 ‘PASSWORD’는 아직 정해지지 않았습니다. </p>
<p>NAME  과 PASSWORD 는 직접 설정해 주어야 합니다. </p>
</blockquote>
<br>

<br>

<h2 id="RDS-보안그룹-생성하기"><a href="#RDS-보안그룹-생성하기" class="headerlink" title="RDS 보안그룹 생성하기"></a>RDS 보안그룹 생성하기</h2><br>

<p>EC2 Management Console 로 가서, </p>
<p><br>네트워크 및 보안탭에 가장 첫번째 메뉴인, 보안그룹을 클릭하여</p>
<p><br>아래와 같이 보안그룹을 하나 생성 해줍니다. </p>
<br>

<br>

<img src="/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/image2.png" class="">

<br>

<p>이 보안 그룹을, RDS 인스턴스에 적용해 줍니다. </p>
<p><br>RDS 인스턴스 수정 버튼을 눌러서, 네트워크 및 보안 섹션에, 아래와 같이 EC2 에서 생성한 보안그룹을 정하고, </p>
<p><br>퍼블릭 엑세스 가능성을 ‘예’ 로 표시합니다. </p>
<br>

<br>

<img src="/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/image3.png" class="">

<br>

<img src="/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/image4.png" class="">

<br>

<p>보안그룹이 활성이라고 하는 상태가 보이면 적용이 된것입니다. </p>
<br>

<br>

<h2 id="postgres-계정-설정"><a href="#postgres-계정-설정" class="headerlink" title="postgres 계정 설정"></a>postgres 계정 설정</h2><p><br><br></p>
<p>위의 설정을 다 마쳤으면, 터미널에서, psql 명령어를 사용하여, postgres 계정 설정을 진행합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">psql --host=todolist-django.ctskq7umc1ur.ap-northeast-2.rds.amazonaws.com --username=todo-list123456 --dbname=postgres</span><br><span class="line">Password <span class="keyword">for</span> user todo-list123456:</span><br></pre></td></tr></table></figure>

<br>

<p>여기서 사용되는 username 과 password 는 RDS를 처음 생성할때 입력했던, </p>
<p><br>username 과 password 입니다. 알맞는 username 과 password 를 입력하면, </p>
<p><br>아래와 같이 postgres 에 접속이 됩니다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">psql (10.12 (Ubuntu 10.12-0ubuntu0.18.04.1), server 11.6)</span><br><span class="line">WARNING: psql major version 10, server major version 11.</span><br><span class="line">         Some psql features might not work.</span><br><span class="line">SSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 명령어를 실행하여, 데이터베이스를 생성 해줍니다. </span></span><br><span class="line"></span><br><span class="line">postgres=&gt; CREATE DATABASE todolist OWNER=todolist1234 TEMPLATE template0 LC_COLLATE <span class="string">'C'</span>;</span><br><span class="line">​</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="settings-py-파일에-DATABASES-값-수정"><a href="#settings-py-파일에-DATABASES-값-수정" class="headerlink" title="settings.py 파일에 DATABASES 값 수정"></a>settings.py 파일에 DATABASES 값 수정</h2><br>

<p>settings.py 파일에 DATABASES 값을 고쳐 줍니다 <br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'todolist'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'todolist1234'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'&lt;데이터베이스 생성할때 사용한 패스워드&gt;'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'&lt;데이터베이스 앤드포인트 주소&gt;'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">5432</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="pyscopg2-설치하기"><a href="#pyscopg2-설치하기" class="headerlink" title="pyscopg2 설치하기"></a>pyscopg2 설치하기</h2><br>

<p>settings.py 파일에 DATABASES 설정을 마쳤으니, 서버를 시작해보면<br></p>
<p>psycopg2 를 설치해야 한다는 메시지가 나옵니다. 설치를 진행 해 줍시다. <br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install psycopg2-binary</span><br></pre></td></tr></table></figure>

<br>

<p>설치뒤에, 서버를 실행해 보면, 아래와 같은 화면이 나옵니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 29 unapplied migration(s). Your project may not work properly until you apply the migrations <span class="keyword">for</span> app(s): account, admin, auth, contenttypes, sessions, sites, socialaccount, todo.</span><br><span class="line">Run <span class="string">'python manage.py migrate'</span> to apply them.</span><br><span class="line"></span><br><span class="line">May 20, 2020 - 14:09:47</span><br><span class="line">Django version 3.0.6, using settings <span class="string">'config.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>python manage.py migrate 를 실행하여, migrate 를 해줍니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure>



<br>

<p>migrate 를 해준뒤에, 서버를 실행 시키고, 브라우저로 접속해 보면, </p>
<p><br>이제까지 개발한 main 페이지가 나옵니다</p>
<br>

<img src="/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/image5.png" class="">

]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>RDS</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 22편 - AWS RDS 생성하기</title>
    <url>/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="AWS-RDS-생성하기"><a href="#AWS-RDS-생성하기" class="headerlink" title="AWS RDS 생성하기"></a>AWS RDS 생성하기</h2><br>

<p>지난 포스팅에서는, 진행한건 아래와 같습니다. </p>
<br>

<ol>
<li>AWS EC2 생성</li>
<li>EC2 인스턴스에 프로젝트 폴더 업로드 </li>
<li>EC2 인스턴스 안에서 서버 실행 </li>
<li>브라우저로 EC2 접속 </li>
<li>프로젝트 동작 확인  </li>
</ol>
<br>

<p>하지만, 문제가 하나 있었습니다. </p>
<br>

<blockquote>
<p>static 파일을 읽어오지 못해서, 이미지와 CSS 적용이 되질 않았었습니다. </p>
<p>일단 이 부분에 대해서는, 나중에 찾아가면서 해결해 보도록 하고, </p>
<p>데이터 베이스를 기본 데이터베이스인 Sqlite3 대신에, 다른 DB 를 적용 해 보려 합니다. </p>
</blockquote>
<br>

<a id="more"></a>

<br>

<h2 id="AWS-RDS-사이트-접속"><a href="#AWS-RDS-사이트-접속" class="headerlink" title="AWS RDS 사이트 접속"></a>AWS RDS 사이트 접속</h2><br>

<p><a href="https://ap-northeast-2.console.aws.amazon.com/rds/home?region=ap-northeast-2#databases:" target="_blank" rel="noopener">https://ap-northeast-2.console.aws.amazon.com/rds/</a></p>
<br>

<p>AWS에 접속하여, RDS 인스턴스 생성 과정으로 넘어갑니다. </p>
<p>데이터베이스 인스턴스 창으로 가서, 우측 상단에 데이터베이스 생성 버튼을 눌러줍니다. </p>
<br>

<img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image1.png" class="">

<br>

<img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image2.png" class="">

<br>

<p>PostgreSQL 로 설정해 주고, 프리티어를 선택합니다. </p>
<br>

<img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image3.png" class=""> 

<br>

<p>DB 계정 정보, 인스턴스 식별자, 사용자 이름, 암호를 설정해 줍니다. </p>
<br>

<img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image4.png" class=""> 

<br>

<p>쭈욱 내리면서, 바꿀 내용이 있는지 확인해 봅니다. 딱히 바꿀것은 없습니다. </p>
<br>

<img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image5.png" class="">

<br>

<img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image6.png" class="">

<br>

<p>손댈곳은 없는것 같고, 데이터베이스 생성 버튼을 눌러서, 생성 진행을 해줍니다. </p>
<br>

<img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image7.png" class="">

<br>

<p>생성 버튼을 누르면, 아래와 같이 생성중 이라고 표시가 됩니다. </p>
<br>

<p>생성이 완료 된 후에 사용 시작 하면 됩니다. </p>
<br>

<img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image8.png" class="">



]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>RDS</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 21편 - AWS EC2에 배포 시작</title>
    <url>/2020/06/08/TodoList-21%ED%8E%B8-AWS-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC-%EC%8B%9C%EC%9E%91/</url>
    <content><![CDATA[<h2 id="AWS-EC2에-배포-시작"><a href="#AWS-EC2에-배포-시작" class="headerlink" title="AWS EC2에 배포 시작"></a>AWS EC2에 배포 시작</h2><br>

<p>지난 포스팅에서, </p>
<p><br>EC2 인스턴스에 연결도 진행하였고, 프로젝트 폴더도 해당 인스턴스에 업로드도 가능했습니다. </p>
<br>

<p>이제 기본 배포 진행을 해보려 합니다. 우선 EC2 인스턴스에 접속해서, 기본 우분투 세팅을 해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-32-46:~$ sudo apt update </span><br><span class="line">ubuntu@ip-172-31-32-46:~$ sudo apt install python3-pip vim</span><br></pre></td></tr></table></figure>

<br>

<a id="more"></a>

<br>

<h2 id="관련-패키지들-설치"><a href="#관련-패키지들-설치" class="headerlink" title="관련 패키지들 설치"></a>관련 패키지들 설치</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install python3-pip vim</span><br></pre></td></tr></table></figure>

<br>

<p>python3, pip, vim 을 설치해줍니다. </p>
<br>

<h2 id="nginx-설치-및-세팅"><a href="#nginx-설치-및-세팅" class="headerlink" title="nginx 설치 및 세팅"></a>nginx 설치 및 세팅</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure>

<br>



<blockquote>
<p>nginx 란? </p>
<p>2002년부터 러시아의 프로그래머 이고르 시쇼브(Игорь Сысоев)가 Apache HTTPd를 코딩하다 Apache의 C10K 문제[1]를 보고, 이를 극복하기 위해서 네이티브 Win32 환경에도 돌아갈 무설치 웹 서버 데몬 프로그램에 대한 개발을 시작하여 2004년 스푸트니크 1호 발사일에 발표한 <strong>오픈 소스 웹 서버 프로그램</strong>. 현재 이고르 시쇼브와 그가 설립한 회사인 NGINX, Inc.가 이 프로젝트를 운영 중에 있다.[2] 목표는 가벼우면서도 강력한 프로그램이라고 한다. HTTP와 리버스 프록시, IMAP/POP3 등의 서버 구동이 가능하다. Java 서블릿은 대개 Apache의 톰캣을 연동해서 구동하고, PHP의 경우 PHP-FPM(FastCGI Process Manager)을 연동해서 구동한다. </p>
</blockquote>
<br>

<p>nginx 설치가 완료되었으면, 환경 설정을 위해서, sudo su 를 사용. 루트로 들어가준다 </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/nginx/sites-available/ 폴더에 접속해본다 </span><br><span class="line"></span><br><span class="line">접속한 후에, ls 를 실행하여, 폴더안에 무엇이 있는지 확인 해보면, </span><br><span class="line">default 라는 항목만 존재하는것을 확인 할수 있다. </span><br><span class="line"></span><br><span class="line">ubuntu@ip-172-31-32-46:~$ sudo su</span><br><span class="line">root@ip-172-31-32-46:/home/ubuntu# cd /etc/nginx/sites-available/</span><br><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available# ls</span><br><span class="line">default</span><br><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available# mv default default.bak</span><br><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available# ls</span><br><span class="line">default.bak</span><br><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available# vim default</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>default 파일을 vim 을 통해서, 아래와 같은 내용을 추가후 저장 종료 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream django&#123;</span><br><span class="line">    server 127.0.0.1:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  proxy_set_header X-Forwarded-Photo <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># gunicorn app</span></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    proxy_set_header X-Url-Scheme <span class="variable">$scheme</span>;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line"></span><br><span class="line">    proxy_redirect off;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://django;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /static/ &#123;</span><br><span class="line">  autoindex on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location /media/ &#123;</span><br><span class="line">  autoindex on;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>service nginx restart 명령어 실행 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available<span class="comment"># service nginx restart</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>EC2 에서 일반 우분투 터미널로 복귀 </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ubuntu@ip-172-31-32-46:~$ ls</span><br><span class="line">ubuntu@ip-172-31-32-46:~$</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="업로드된-프로젝트로-이동"><a href="#업로드된-프로젝트로-이동" class="headerlink" title="업로드된 프로젝트로 이동"></a>업로드된 프로젝트로 이동</h2><br>

<p>지난 포스팅에서 프로젝트 폴더를 EC2 에 업로드 해주었었는데.</p>
<p><br>해당 폴더로 EC2에서 들어가 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-32-46:~$ ls</span><br><span class="line">todolist</span><br><span class="line">ubuntu@ip-172-31-32-46:~$ <span class="built_in">cd</span> todolist</span><br><span class="line">ubuntu@ip-172-31-32-46:~/todolist$ ls</span><br><span class="line">config      deploy.sh  requirements.txt  static     todo</span><br><span class="line">db.sqlite3  manage.py  secrets.json      templates</span><br></pre></td></tr></table></figure>

<br>

<p>pip3 install -r requirements.txt 명령어를 실행하여, 패키지를 설치해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-32-46:~/todolist$ pip3 install -r requirements.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 실행후, makemigrations, migrate 를 해줍니다. </span></span><br><span class="line">ubuntu@ip-172-31-32-46:~$ python3 manage.py makemigrations </span><br><span class="line">ubuntu@ip-172-31-32-46:~$ python3 manage.py migrate</span><br></pre></td></tr></table></figure>

<br>

<h2 id="settings-py-파일-수정"><a href="#settings-py-파일-수정" class="headerlink" title="settings.py 파일 수정"></a>settings.py 파일 수정</h2><br>

<p>settings.py 파일안에, ALLOWED_HOSTS 에, EC2 주소를 추가해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ALLOWED_HOSTS = [</span><br><span class="line">    <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    <span class="string">'15.164.97.104'</span>,]  <span class="comment"># EC2 주소</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="EC2에서-서버-실행-작동-테스트"><a href="#EC2에서-서버-실행-작동-테스트" class="headerlink" title="EC2에서 서버 실행 작동 테스트"></a>EC2에서 서버 실행 작동 테스트</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-32-46:~$ python3 manage.py runserver</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">May 20, 2020 - 02:11:11</span><br><span class="line">Django version 3.0.6, using settings <span class="string">'config.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure>

<br>

<p>서버를 실행 시켜 놓은 상태로, 브라우저에 접속해서, EC2 IP 주소를 입력해 보면<br><br>투두리스트가 뜨긴 뜨는데.. CSS와 이미지 적용이 전혀 되지 않은 내용이 브라우저에 표시가 되는걸 확인할수 있었습니다. <br><br></p>
<img src="/2020/06/08/TodoList-21%ED%8E%B8-AWS-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC-%EC%8B%9C%EC%9E%91/image1.png" class="">

<br>

<p>일단 잘 작동하는것은 확인 하였으니, 서버를 종료 시켜 줍니다.<br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>Django 에서 가장 큰 어려움은, 배포인것 같습니다. <br></p>
<p>특히, 위의 nginx 는 사용하지 않아도 서버를 실행시키면, 배포가 완료 되긴 하는데;;; 왜 사용하는지도 잘 모르겠고. <br></p>
<p>nginx 에 대한 설명과 자료들도 굉장히 빈약합니다. 무엇보다 초심자를 위한 설명은 없는듯 합니다;;;  </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>EC2</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 20편 - AWS EC2 인스턴스에 접속, 파일 전송</title>
    <url>/2020/06/05/TodoList-20%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%91%EC%86%8D-%ED%8C%8C%EC%9D%BC-%EC%A0%84%EC%86%A1/</url>
    <content><![CDATA[<h2 id="AWS-EC2-접속-파일전송"><a href="#AWS-EC2-접속-파일전송" class="headerlink" title="AWS EC2 접속, 파일전송"></a>AWS EC2 접속, 파일전송</h2><br>

<p>지난 포스팅에서, AWS EC2 인스턴스를 생성 하였으니, </p>
<p><br>이제 해당 인스턴스에 자유롭게 접속도 하고, 작업한 프로젝트도 업로드 해보려 합니다. </p>
<br>

<p>해당 인스턴스에 접속하는 명령어는 아래와 같습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i &lt;newtodolist.pem 이 다운로드 되있는 경로&gt; ubuntu@&lt;해당인스턴스public IP&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 에시는 아래와 같음. pem 파일의 경로를 잘 설정해주는것이 중요! </span></span><br><span class="line">ssh ~i ~/home/pemkeys/newkeys/newtodolist.pem ubuntu@12.111.87.111</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>해당 인스턴스에 프로젝트 폴더를 전송하여, 배포 작업을 시작할것 입니다. </p>
<br>

<a id="more"></a> 

<br>

<h2 id="EC2-에-파일전송-하기"><a href="#EC2-에-파일전송-하기" class="headerlink" title="EC2 에 파일전송 하기"></a>EC2 에 파일전송 하기</h2><br>

<p>터미널에서 scp 명령어를 사용하여,<br> 생성한 인스턴스에 TodoList 프로젝트 폴더를 업로드 해봅니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -i ~/downloads/keys/newtodolist.pem -r ~/projects/todolist ubuntu@15.164.97.104:/home/ubuntu/</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p><a href="mailto:ubuntu@15.164.87.452">ubuntu@15.164.87.452</a>, 뒤에 </p>
<p><code>:</code>을 꼭 붙여주어야 합니다. </p>
</blockquote>
<br>

<p>ssh 명령어를 실행하여, EC2 로 접속해 보면, </p>
<p><br>파일이 업로드 되어 있는것을 확인 할수 있습니다. </p>
<br>

<br>

<img src="/2020/06/05/TodoList-20%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%91%EC%86%8D-%ED%8C%8C%EC%9D%BC-%EC%A0%84%EC%86%A1/image1.png" class=""> 

<br>]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>EC2</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 19편 - AWS EC2 인스턴스 생성하기</title>
    <url>/2020/06/04/TodoList-19%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="AWS-EC2-인스턴스-생성"><a href="#AWS-EC2-인스턴스-생성" class="headerlink" title="AWS EC2 인스턴스 생성"></a>AWS EC2 인스턴스 생성</h2><br>

<p><strong>AWS (AMAZON WEB SERVICES)</strong></p>
<br>

<p>투두리스트가 완전되었다고 가정하고, AWS 서버에 올려서 배포하는 작업을 시작해 보려 합니다. </p>
<p><br>EC2 인스턴스를 하나 생성해서, 사용해 보려 합니다. </p>
<br>

<a id="more"></a>

<br>

<h2 id="EC2-인스턴스-생성하기"><a href="#EC2-인스턴스-생성하기" class="headerlink" title="EC2 인스턴스 생성하기"></a>EC2 인스턴스 생성하기</h2><br>

<p>aws.com 콘솔에 접속해서, </p>
<p><br>EC2 탭으로 이동합니다. 거기서, 인스턴스 시작을 눌러줍니다. </p>
<br>

<img src="/2020/06/04/TodoList-19%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image1.png" class="">

<br>

<p>왼쪽 빠른 시작 탭에, 프리티어 옵션에 체크를 해줍니다. (프리 티어만 사용) </p>
<br>

<img src="/2020/06/04/TodoList-19%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image2.png" class="">

<br>

<p>Ubuntu Server 18.04 LTS(HVM), SSD Volume Type 을 선택하고, </p>
<br>

<img src="/2020/06/04/TodoList-19%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image3.png" class="">

<br>

<br>

<p>단계 2에서, 인스턴스 유형을 선택하고, </p>
<p><br>다음 인스턴스 세부 정보 구성으로 넘어갑니다 </p>
<br>

<img src="/2020/06/04/TodoList-19%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image4.png" class="">

<br>

<ol start="3">
<li>인스턴스 구성 </li>
<li>스토리지 추가</li>
<li>태그 추가 </li>
</ol>
<br>

<p>이 메뉴들은 그닥 중요하지 않으니, 넘어갑니다. </p>
<br>

<p><strong>하지만, 6. 보안그룹 구성에서 보안그룹을 아래와 같이 설정해 줘봅시다.</strong> </p>
<p><br>규칙 추가를 클릭하여, 아래와 같이 만들어 줄수 있습니다. </p>
<br>

<img src="/2020/06/04/TodoList-19%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image5.png" class="">

<br>

<p>단계 7로 넘어가고, 인스턴스 시작 검토를 합니다. 검토를 다 마쳤으면, </p>
<p><br>시작버튼을 눌러서, EC2 생성을 마칩니다. </p>
<br>

<br>

<img src="/2020/06/04/TodoList-19%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image6.png" class="">

<br>

<p>시작하기 버튼을 누르면, 기존 키페어 선택 또는 새 키 페어 생성 탭이 나오는데, <br></p>
<p>새 키 페이 생성을 누르고, 키페어 이름을 TodoList 로 정해 줍니다. </p>
<br>

<img src="/2020/06/04/TodoList-19%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image7.png" class="">

<br>

<br>

<blockquote>
<p><strong>주의사항</strong></p>
<p>키 페어 다운로드를 눌러서, 키페어를 다운로드 해주는것을 절대로 잊으면 안됩니다. </p>
<p>그리고, 이 다운로드 된 파일의 경로를 정확히 잘 알고 있어야 합니다!</p>
</blockquote>
<p><br><br></p>
<p>인스턴스 시작을 눌러서, 인스턴스 생성을 마칩니다.<br></p>
<p>아래와 같이 인스턴스 생성이 완료 되었습니다.<br><br></p>
<img src="/2020/06/04/TodoList-19%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image8.png" class="">

<p><br><br></p>
<h2 id="생성된-인스턴스에-접속"><a href="#생성된-인스턴스에-접속" class="headerlink" title="생성된 인스턴스에 접속"></a>생성된 인스턴스에 접속</h2><br>

<p>생성한 인스턴스로 접속하려면, 터미널에서 ssh 명령어를 실행하여 접속할수 있습니다. </p>
<br>

<h3 id="pem-파일-권한-바꿔주기"><a href="#pem-파일-권한-바꿔주기" class="headerlink" title="pem 파일 권한 바꿔주기"></a>pem 파일 권한 바꿔주기</h3><br>

<p>인스턴스에 접속을 시도하기 전에, 위 과정에서 다운로드 받았던, pem 파일. </p>
<p><br>즉, 키페어 파일의 권한을 수정해 주어야 합니다. <br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># pem 파일이 있는 폴더로 가서, 아래와 같이 chmod 명령어를 사용하여 </span></span><br><span class="line"><span class="comment"># 파일의 권한 수정 </span></span><br><span class="line"></span><br><span class="line">chmod 400 newtodolist.pem</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh -i &lt;newtodolist.pem 이 다운로드 되있는 경로&gt; ubuntu@&lt;해당인스턴스public IP&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 에시는 아래와 같음. pem 파일의 경로를 잘 설정해주는것이 중요! </span></span><br><span class="line">ssh ~i ~/home/pemkeys/newkeys/newtodolist.pem ubuntu@12.111.87.111</span><br></pre></td></tr></table></figure>

<br>

<p>yes/no 메시지가 나오면, yes 라고 타이핑을 해주고 엔터를 눌러줍니다<br></p>
<p>모든것이 정상적으로 이루어 졋으면, 아래와 같이 EC2 우분투에 접속 완료가 됩니다. </p>
<br>

<img src="/2020/06/04/TodoList-19%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image9.png" class=""><br>

<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>AWS</tag>
        <tag>EC2</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 18편 - 미니프로젝트 중간 정리</title>
    <url>/2020/06/03/TodoList-18%ED%8E%B8-%EB%AF%B8%EB%8B%88%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%A4%91%EA%B0%84-%EC%A0%95%EB%A6%AC/</url>
    <content><![CDATA[<h2 id="프로젝트-중간정리"><a href="#프로젝트-중간정리" class="headerlink" title="프로젝트 중간정리"></a>프로젝트 중간정리</h2><br>



<p>매우 간단한,<br></p>
<br>



<p>그리고 빈약한 미니프로젝트 진행 상황을 중간 정리 합니다. </p>
<br>



<br>



<p><strong>아쉬운 점</strong> </p>
<hr>
<p><strong>가장 아쉬운점 :</strong> </p>
<hr>
<p><strong>forms.py 를 사용하여 폼을 그리고, 폼에서 넘어오는 데이터 처리 등. 전반적으로 폼이 문제인것 같음..;;</strong>  </p>
<hr>
<hr>
<br>



<p>1) 자바스크립트를 몰라서 동적으로 브라우저에서 값을 바꾸거나, 좀더 다이나믹하게 만들수가 없었다. </p>
<p>2) 디자인 - Bulma CSS 를 사용하여, 어느정도 생으로 프론트 작업 하는것보단 편했지만, 여전히 무언가 아쉽다 </p>
<p>3) 클래스 기반 뷰의 사용이 아직 서툴다 </p>
<p>4) allauth 를 사용해서 로그인 로그아웃 그리고 네이버 로그인 기능까지 구현 하긴 했지만. 내부 동작을 파악하고 한것이 아니다. </p>
<p>5) models.py 파일을 보면, 무언가 효율적으로 쓴것 같지가 않다 </p>
<a id="more"></a>

<br>



<p><strong>현재까지 좋았던 점</strong>  </p>
<br>



<p><strong>가장 좋았던점:</strong> </p>
<hr>
<p><strong>어떻게든 꾸역꾸역 하려고 하면서, 문서도 많이 보게 되고, 다른 사람들이 짜놓은 코드 예시도 많이 접할수 있었다.</strong> <br></p>
<p><strong>참고해서 구현한 기능들이 동작하는것을 볼때, 묘한 성취감과 기쁨을 느낀다.</strong> </p>
<hr>
<p>****<br></p>
<br>



<p>1) Bulma CSS 를 적용하여, 프론트가 생으로 하는거보단 이쁘게 된것 같다. </p>
<p>2) Django 패키지 - Django-bulma 와 allauth 를 사용해 보았다. </p>
<p>3) 간편하게 로그인, 로그아웃, 회원가입 기능을 구현하였다. </p>
<p>4) 관리자 페이지에 모델을 등록하는 방법에 대해 조금 더 익숙해 졌다. </p>
<p>5) 여기저기 찾아서, javascript 를 구현해 보았다. </p>
 <br>



<hr>
<br>

<p>마치며.. </p>
<p>아주 빈약한 프로젝트지만, 다음 포스팅부터, AWS에 배포를 진행해보려 합니다.</p>
<p>배포를 진행하기 전에, 중간 정리를 한번 해보았네요.  </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 17편 - allauth로 네이버로 로그인 구현</title>
    <url>/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/</url>
    <content><![CDATA[<p>allauth 를 사용하여, 소셜 로그인중 하나인 네이버로 로그인 하기를 구현 하고 싶습니다. <br></p>
<br>

<p>이를 구현하기 위해서는, 네이버 개발자 센터를 방문하여 </p>
<p><br>네이버 아이디로 로그인 API 키를 발급 받아야 합니다.<br><br></p>
<p> <a href="https://developers.naver.com/apps/#/register" target="_blank" rel="noopener">https://developers.naver.com/apps/#/register</a></p>
<br>

<img src="/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/image1.png" class="">

<p><br><br></p>
<a id="more"></a>

<h2 id="네이버-아이디-로그인-API-키-발급"><a href="#네이버-아이디-로그인-API-키-발급" class="headerlink" title="네이버 아이디 로그인 API 키 발급"></a>네이버 아이디 로그인 API 키 발급</h2><p><br><br></p>
<img src="/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/image2.png" class=""><br><br>

<p>서비스 URL : <a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000</a></p>
<p>네이버아이디로그인 Callback URL : <a href="http://127.0.0.1:8000/accounts/naver/login/callback/" target="_blank" rel="noopener">http://127.0.0.1:8000/accounts/naver/login/callback/</a></p>
<br>

<img src="/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/image3.png" class="">

<br>

<p>등록하기 버튼을 누르면, 앱이 등록 됩니다.<br></p>
<p>그리고, 클라이언트 ID 와 클라이언트 secret 생성이 됩니다.<br><br></p>
<img src="/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/image4.png" class="">

<br>

<h2 id="INSTALLED-APPS-에-네이버-추가"><a href="#INSTALLED-APPS-에-네이버-추가" class="headerlink" title="INSTALLED_APPS 에 네이버 추가"></a>INSTALLED_APPS 에 네이버 추가</h2><br>

<p>settings.py 안에, INSTALLED_APPS 에 <br></p>
<p>소셜로그인 제공자로 네이버를 추가해줍니다. <br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment"># Allauth를 위한 Apps </span></span><br><span class="line">    <span class="string">'django.contrib.sites'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'allauth'</span>,</span><br><span class="line">    <span class="string">'allauth.account'</span>,</span><br><span class="line">    <span class="string">'allauth.socialaccount'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 소셜로그인을 할 제공자 리스트를 아래에 포함 </span></span><br><span class="line">    <span class="string">'allauth.socialaccount.providers.naver'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="어드민에서-social-application-모델-추가"><a href="#어드민에서-social-application-모델-추가" class="headerlink" title="어드민에서 social application 모델 추가"></a>어드민에서 social application 모델 추가</h2><p><br><br></p>
<p>어드민에 접속하여, 소셜 계정 / 소셜 어플리케이션을 추가 해줍니다. </p>
<br>

<img src="/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/image5.png" class=""> 





<p><br><br></p>
<p>이름은, 아래와 같이 네아로 라고 쓰고,</p>
<p>클라이언트 아이디와 비밀 키는, 네이버 개발자 센터에서 앱을 등록했을때 발급받은,  <br></p>
<p>아이디와 키값을 입력합니다. </p>
<p><br><br></p>
<img src="/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/image6.png" class="">



<br>

<p>그리고, 하단에 있는, 이용 가능한 Sites 에, example.com 을 선택하여, </p>
<p><br>오른쪽으로 옮겨 줍니다 </p>
<br>

<img src="/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/image7.png" class="">

<br>

<p>여기까지 설정을 마쳤으면, 저장 버튼을 눌러줍니다. </p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>네이버 아이디로 로그인 하기 기능을 위한 기본 세팅을 마쳤습니다. </p>
<p><br>이제부터 잘 작동하는지 확인해 봅니다. 우선, 서버를 실행하고, 로그인 페이지로 갑니다. </p>
<p><br>기존 로그인 폼 위에, Naver 라고 텍스트 링크가 생겨난걸 확인 할수 있습니다. </p>
<br>

<img src="/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/image8.png" class="">

<br>

<p>naver 텍스트를 클릭하면, 아래와 같이 네이버 로그인 페이지가 뜹니다. </p>
<br>

<img src="/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/image9.png" class="">

<br>

<p>네이버 페이지에서 OK 버튼을 누르면, 로그인이 완료 됩니다.<br><br></p>
<img src="/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/image10.png" class="">

<p><br><br></p>
<p>다시 로그아웃 하고, 어드민으로 접속해서 소셜 계정 탭을 확인하면,<br></p>
<p>네이버 로그인을 사용해서 로그인 했던 사용자의 정보가 들어와 있는것을 확인 할수 있습니다. </p>
<br>

<img src="/2020/06/02/TodoList-17%ED%8E%B8-allauth%EB%A1%9C-%EB%84%A4%EC%9D%B4%EB%B2%84%EB%A1%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B5%AC%ED%98%84/image11.png" class="">

<br>]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 16편 - allauth를 사용하여 로그인, 로그아웃</title>
    <url>/2020/06/01/TodoList-16%ED%8E%B8-allauth%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83/</url>
    <content><![CDATA[<h2 id="allauth-사용-로그인-로그아웃-구현"><a href="#allauth-사용-로그인-로그아웃-구현" class="headerlink" title="allauth 사용 로그인, 로그아웃 구현"></a>allauth 사용 로그인, 로그아웃 구현</h2><p>지난 포스팅에서, allauth 패키지 설치를 완료 하였고, </p>
<p>패키지를 통하여, 로그인, 로그아웃 기능을 구현 해보려 합니다. </p>
<br>

<p>로그인 / 로그아웃을 사용하기 위해서는, allauth 에서 제공하는 로그인 / 로그아웃 URL 들을 알아야 합니다. </p>
<br>

<blockquote>
<p>allauth 에서, </p>
<p>로그인 / 로그아웃을 위해 기본으로 제공하는 URL 은 아래와 같습니다 </p>
<p><a href="http://127.0.0.1:8000/accounts/login" target="_blank" rel="noopener">http://127.0.0.1:8000/accounts/login</a></p>
<p><a href="http://127.0.0.1:8000/accounts/logout" target="_blank" rel="noopener">http://127.0.0.1:8000/accounts/logout</a> </p>
</blockquote>
<br>

<p>이 URL 들을 사용하여, 미니프로젝트에 적용하는 방법은 아래와 같습니다. </p>
<br>

<ol>
<li>settings.py 파일에 LOGIN_REDIRECT_URL 설정 </li>
<li>templates 페이지들에 회원가입 / 로그인 / 로그아웃 링크 추가 </li>
</ol>
<p><br><a id="more"></a></p>
<h3 id="LOGIN-REDIRECT-URL-설정"><a href="#LOGIN-REDIRECT-URL-설정" class="headerlink" title="LOGIN_REDIRECT_URL 설정"></a>LOGIN_REDIRECT_URL 설정</h3><br>

<p>settings.py 파일에, LOGIN_REDIRECT_URL 설정을 해 놓아야지만, </p>
<p><br>회원가입 / 로그인 / 로그아웃 기능이 잘 작동 합니다. </p>
<br>

<p>config/settings.py 파일에 아래 한줄을 추가해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Allauth 관련 세팅 </span></span><br><span class="line">LOGIN_REDIRECT_URL = <span class="string">'/'</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="템플릿-파일에-회원가입-로그인-로그아웃-링크-추가"><a href="#템플릿-파일에-회원가입-로그인-로그아웃-링크-추가" class="headerlink" title="템플릿 파일에 회원가입, 로그인, 로그아웃 링크 추가"></a>템플릿 파일에 회원가입, 로그인, 로그아웃 링크 추가</h2><br>

<ul>
<li>templates/base.html 파일, </li>
<li>templates/todo/todolist.html 파일 </li>
<li>templates/todo/update.html  파일 </li>
</ul>
<br>

<p>위 3개의 파일들을 수정해 줍니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buttons"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> user.is_authenticated %&#125;</span></span><br><span class="line"><span class="xml">           # 사용자가 로그인 되어 있으면, 로그아웃 버튼을 화면에 표시 </span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"button is-primary"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'account_logout' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">             Log Out</span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">           </span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"><span class="xml">           # 그렇지 않다면, 회원가입과 로그아웃 버튼 표시 </span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"button is-primary"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'account_signup' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">             <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"button is-light"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'account_login' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">             Log in</span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">           </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>서버를 시작하고, 메인 페이지로 들어가서, </p>
<p><br>signup 을 눌러 새로운 사용자를 생성해 봅니다. </p>
<p><br>CSS 를 따로 적용해야 하겠지만, 그래도 BULMA 스타일로 출력되어 나오긴 합니다. </p>
<p><br>디테일을 입력하고, 회원가입을 진행해봅니다. </p>
<br>

<br>

<img src="/2020/06/01/TodoList-16%ED%8E%B8-allauth%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83/image1.png" class="">

<br>

<p>회원가입을 완료하면, 자동으로 로그인이 되고, </p>
<p><br>화면 상단에 로그아웃 버튼이 표시되는것을 볼수 있습니다. </p>
<br>

<img src="/2020/06/01/TodoList-16%ED%8E%B8-allauth%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83/image2.png" class="">

<br>

<p>로그아웃 버튼도 눌러보면, 로그아웃 컨펌 페이지가 표시가 되고,</p>
<p><br>컨펌 페이지에서, 로그아웃 버튼을 누르면, 다시 메인페이지로 이동이 되는데.  </p>
<p><br><br></p>
<img src="/2020/06/01/TodoList-16%ED%8E%B8-allauth%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83/image3.png" class="">

<br>

<p>로그인 되어 있는 상태가 아니니까, Sign Up 과 Log in 만 표시되어 나옵니다. </p>
<p><br><br></p>
<p>로그인도 한번 진행해 보면, 화면 상단에 로그인 버튼을 눌러서</p>
<p><br>아래와 같이 아이디와 비밀번호를 화면에 입력하고, 로그인을 진행 해 보면<br><br> <img src="/2020/06/01/TodoList-16%ED%8E%B8-allauth%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83/image4.png" class=""></p>
<p><br><br></p>
<p>아이디와 비밀번호를 입력하면, </p>
<p><br>메인 페이지로 다시 들어오는데, 화면 상단에 Logout 버튼이 표시가 됩니다. <br><br></p>
<img src="/2020/06/01/TodoList-16%ED%8E%B8-allauth%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EB%A1%9C%EA%B7%B8%EC%95%84%EC%9B%83/image5.png" class=""> 

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>일단, 직접 구현 하는것 보다는, <br></p>
<p>훨씬 간단하게 회원가입, 로그인, 로그아웃 기능을 구현해 보았습니다.<br>그렇지만, 패키지의 내부 동작을 파악하는것은 아직 다 마친것이 아니라 무엇인가 찝찝하긴 합니다<br><br></p>
<p>회원가입 / 로그인 / 로그아웃 폼이 좀 맘에 들지 않는다면, allauth 의 템플릿을 수정해 주면 되는데. </p>
<br>

<p>이는, 다음 미니 프로젝트때 진행해보려 합니다. <br></p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 15편 - allauth 패키지 설치</title>
    <url>/2020/05/30/TodoList-15%ED%8E%B8-allauth-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98/</url>
    <content><![CDATA[<h2 id="allauth-패키지-설치"><a href="#allauth-패키지-설치" class="headerlink" title="allauth 패키지 설치"></a>allauth 패키지 설치</h2><br>

<p>django 패키지중 하나인, allauth 를 사용하여, </p>
<p><br>기본 로그인, 로그아웃을 구현하고, 가능하면, 네이버 로그인 까지 구현해 볼까 합니다. </p>
<br>

<p>로그인, 로그아웃을 직접 구현하기 보다는, </p>
<p><br>아무래도 이런 편리한 패키지를 이용하여 소셜 로그인까지 구현이 가능해 보여서 사용해 보려 합니다. </p>
<br>

<a id="more"></a>

<br>

<p>순서는 아래와 같습니다. </p>
<br>

<ol>
<li><p>allauth 설치 </p>
</li>
<li><p>config/settings.py 파일 수정 </p>
<ul>
<li>TEMPLATES</li>
<li>AUTHENTICATION_BACKENDS</li>
<li>INSTALLED_APPS</li>
<li>SITE_ID </li>
</ul>
</li>
<li><p>config/urls.py 파일 수정 </p>
</li>
<li><p>python mange.py migrate </p>
</li>
<li><p>어드민에 접속해서 도메인을 위한 Site  추가 </p>
</li>
</ol>
<br>

<h2 id="allauth-설치"><a href="#allauth-설치" class="headerlink" title="allauth 설치"></a>allauth 설치</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-allauth</span><br></pre></td></tr></table></figure>

<br>

<h2 id="config-settings-py-파일-수정"><a href="#config-settings-py-파일-수정" class="headerlink" title="config/settings.py 파일 수정"></a>config/settings.py 파일 수정</h2><br>

<ul>
<li>AUTHENTICATION_BACKENDS</li>
<li>INSTALLED_APPS </li>
<li>SITE_ID </li>
</ul>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">AUTHENTICATION_BACKENDS = (</span><br><span class="line">    <span class="comment"># allauth 와 상관없이 username 으로 장고 어드민에 로그인이 필요할때 </span></span><br><span class="line">    <span class="string">'django.contrib.auth.backends.ModelBackend'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 'allauth' 특화 인증 방법, e-mail로 로그인 하는것 같은것 </span></span><br><span class="line">    <span class="string">'allauth.account.auth_backends.AuthenticationBackend'</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="string">'todo'</span>,</span><br><span class="line">    <span class="string">'django_extensions'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Bulma CSS Framework </span></span><br><span class="line">    <span class="string">'bulma'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Allauth를 위한 Apps </span></span><br><span class="line">    <span class="string">'django.contrib.sites'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'allauth'</span>,</span><br><span class="line">    <span class="string">'allauth.account'</span>,</span><br><span class="line">    <span class="string">'allauth.socialaccount'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 소셜로그인을 할 제공자 리스트를 아래에 포함 </span></span><br><span class="line">    <span class="comment"># 'allauth.socialaccount.providers.naver'</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">SITE_ID = <span class="number">1</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="config-urls-py-파일-수정"><a href="#config-urls-py-파일-수정" class="headerlink" title="config/urls.py  파일 수정"></a>config/urls.py  파일 수정</h2><br>

<p>allauth 의 urls 들의 경로를 추가해줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'todo.urls'</span>)),</span><br><span class="line">    path(<span class="string">'accounts/'</span>, include(<span class="string">'allauth.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="python-manage-py-migrate"><a href="#python-manage-py-migrate" class="headerlink" title="python manage.py migrate"></a>python manage.py migrate</h2><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(to-do-list)  python manage.py migrate</span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: account, admin, auth, contenttypes, sessions, sites, socialaccount, todo</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying account.0001_initial... OK</span><br><span class="line">  Applying account.0002_email_max_length... OK</span><br><span class="line">  Applying sites.0001_initial... OK</span><br><span class="line">  Applying sites.0002_alter_domain_unique... OK</span><br><span class="line">  Applying socialaccount.0001_initial... OK</span><br><span class="line">  Applying socialaccount.0002_token_max_lengths... OK</span><br><span class="line">  Applying socialaccount.0003_extra_data_default_dict... OK</span><br></pre></td></tr></table></figure>

<br>

<h2 id="어드민에-접속해서-설치-확인"><a href="#어드민에-접속해서-설치-확인" class="headerlink" title="어드민에 접속해서 설치 확인"></a>어드민에 접속해서 설치 확인</h2><br>

<p>설치후에, 어드민에 로그인하면, </p>
<p><br>아래와 같이 이전에는 볼수 없었던 메뉴들이 생겨납니다. </p>
<br>

<img src="/2020/05/30/TodoList-15%ED%8E%B8-allauth-%ED%8C%A8%ED%82%A4%EC%A7%80-%EC%84%A4%EC%B9%98/image1.png" class="">

<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 14편 - 투두리스트 생성 구현</title>
    <url>/2020/05/29/TodoList-14%ED%8E%B8-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-%EA%B5%AC%ED%98%84/</url>
    <content><![CDATA[<h2 id="TodoList-Create-페이지-구현"><a href="#TodoList-Create-페이지-구현" class="headerlink" title="TodoList Create 페이지 구현"></a>TodoList Create 페이지 구현</h2><br>

<p>투두리스트를 생성하는것을 구현해 보려 합니다. </p>
<p><br>클래스 기반 뷰인 CreateView 를 사용해 보려 했었는데. 잘 모르겠어서. 함수형 으로 진행 했습니다. </p>
<p><br>forms 적용 하는것에서 꼬이고, 함수기반 뷰 작성할때 꼬이고, 클래스 기반 뷰에서도 꼬이고, </p>
<p><br>Bulma CSS 적용할때 꼬이고, URL 설정할때 꼬여서. 매우 힘들게 구현한것 같습니다;;; </p>
<br>

<p>아래와 같이 진행 해봅니다. </p>
<br>

<a id="more"></a>

<br>

<h2 id="todo-list-html-파일-수정"><a href="#todo-list-html-파일-수정" class="headerlink" title="todo_list.html 파일 수정"></a>todo_list.html 파일 수정</h2><br>

<p>templates/todo/todo_list.html 파일을 수정해줍니다. </p>
<p><br>생성하기 버튼을 추가 하고, 링크를 연결해줍니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> 'base.html' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml">할일 목록</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box has-text-centered"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'todo:todolist_create' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-info is-rounded is-fullwidth"</span>&gt;</span>할일 추가하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"columns"</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> todo <span class="keyword">in</span> to_do_list %&#125;</span></span><br><span class="line"><span class="xml">....</span></span><br></pre></td></tr></table></figure>



<br>

<h2 id="todo-forms-py-파일-생성-후-작성"><a href="#todo-forms-py-파일-생성-후-작성" class="headerlink" title="todo/forms.py 파일 생성 후 작성"></a>todo/forms.py 파일 생성 후 작성</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoCreateForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    name = forms.CharField(</span><br><span class="line">    	max_length=<span class="number">20</span>,</span><br><span class="line">    	widget=forms.TextInput(</span><br><span class="line">        	attrs=&#123;</span><br><span class="line">                <span class="string">'class'</span>: <span class="string">'input'</span>,</span><br><span class="line">                <span class="string">'placeholder'</span>: <span class="string">'해야할일'</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">description = forms.CharField(</span><br><span class="line">	max_length=<span class="number">200</span>,</span><br><span class="line">	widget=forms.Textarea(</span><br><span class="line">    	attrs=&#123;</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'textarea'</span>,</span><br><span class="line">            <span class="string">'placeholder'</span>: <span class="string">'할일에 대한 디테일'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">date_deadline = forms.DateField(</span><br><span class="line">	widget=forms.DateInput(</span><br><span class="line">    	attrs=&#123;</span><br><span class="line">            <span class="string">'id'</span>: <span class="string">'datepicker'</span>,</span><br><span class="line">            <span class="string">'placeholder'</span>: <span class="string">'YYYY-MM-DD'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    )</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">images = forms.ImageField(</span><br><span class="line">	widget=forms.ClearableFileInput(</span><br><span class="line">    	attrs=&#123;</span><br><span class="line">            <span class="string">'multiple'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'file-input'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ), required=<span class="literal">False</span>,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">files = forms.FileField(</span><br><span class="line">	widget=forms.ClearableFileInput(</span><br><span class="line">    	attrs=&#123;</span><br><span class="line">            <span class="string">'multiple'</span>: <span class="literal">True</span>,</span><br><span class="line">            <span class="string">'class'</span>: <span class="string">'file-input'</span>,</span><br><span class="line">        &#125;</span><br><span class="line">    ), required=<span class="literal">False</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="todo-views-py-파일-수정"><a href="#todo-views-py-파일-수정" class="headerlink" title="todo/views.py 파일 수정"></a>todo/views.py 파일 수정</h2><br>

<p>함수기반 뷰인 TodoCreate 를 추가해줌 </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> TodoCreateForm</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">TodoCreate</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        form = TodoCreateForm(request.POST)</span><br><span class="line">        </span><br><span class="line">        name = request.POST[<span class="string">'name'</span>]</span><br><span class="line">        description = request.POST[<span class="string">'description'</span>]</span><br><span class="line">        date_deadline = request.POST[<span class="string">'date_deadline'</span>]</span><br><span class="line">        images = request.FILES.getlist(<span class="string">'images'</span>)</span><br><span class="line">        files = request.FILES.getlist(<span class="string">'files'</span>)</span><br><span class="line">        date_created = date.today()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># valid 한 date_deadline value 를 넣지 않았을때 막을 방법이 없음.</span></span><br><span class="line">        <span class="comment"># date_created 가 date_deadline 보다 지난 날짜라도, Todo는 생성되는 문제점도 있음 </span></span><br><span class="line">        </span><br><span class="line">        t = TodoList.objects.create(</span><br><span class="line">        	name=name,</span><br><span class="line">        	description=description,</span><br><span class="line">        	date_created=date_created,</span><br><span class="line">        	date_deadline=date_deadline,</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">        t.save()</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> image <span class="keyword">in</span> images:</span><br><span class="line">            TodoList_images.objects.create(todo=t, image=image)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">for</span> file_in_list <span class="keyword">in</span> files:</span><br><span class="line">            TodoList_files.objects.create(todo=t, files=file_in_list)</span><br><span class="line">            </span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">'/'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = TodoCreateForm()</span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'todo/create.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure>

<br>

<h2 id="create-html-파일-생성후-작성-폼-작성"><a href="#create-html-파일-생성후-작성-폼-작성" class="headerlink" title="create.html 파일 생성후 작성 (폼 작성)"></a>create.html 파일 생성후 작성 (폼 작성)</h2><br>

<p>templates/todo/create.html 파일을 생성하고, 작성해 줍니다. </p>
<br>

<p>BULMA 공식 페이지에서, components 에 대한 섹션을 참고해 가면서. 하나하나 구현 해 봅니다. </p>
<p><br>포인트는, forms.py 에 작성된 필드들의 클래스가 Bulma css 에 존재하는 클래스명으로 나와야 합니다. </p>
<br>

<ul>
<li><p>그리고, image 인풋과 file 인풋은, 다른 클래스를 가지고 있기 때문에, </p>
<p>field.name 이 image 혹은 file 이라면, 일반 form div 가 아닌, 클래스명을 가진 div 로 표시되게 만들었습니다. (이게 if field.name == ‘image’ or filed.name == ‘file’ 이 하는 일입니다.)</p>
</li>
<li><p><code>script</code>태그 안에, datepicker() 함수를 넣어서, deadline_date 을 선택할때, 날짜를 선택하는 위젯을 구현해 주었습니다 </p>
</li>
</ul>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> 'base.html' %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> head %&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"/resources/demos/style.css"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/jquery-1.12.4.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://code.jquery.com/ui/1.12.1/jquery-ui.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="xml">$( function() &#123;</span></span><br><span class="line"><span class="xml">  $( "#datepicker" ).datepicker();</span></span><br><span class="line"><span class="xml">&#125; );</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"message is-info"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message-header"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>Todo List 추가<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"delete"</span> <span class="attr">aria-label</span>=<span class="string">"delete"</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"message-body"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      새로운 투두 리스트를 추가해 보세요! </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">article</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"columns is-centered"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">enctype</span>=<span class="string">"multiplart/form-data"</span> <span class="attr">style</span>=<span class="string">"margin-top: 50px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> field <span class="keyword">in</span> form %&#125;</span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> field.name == 'images' or field.name == 'files' %&#125;</span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; field.name &#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"file has-name"</span> <span class="attr">style</span>=<span class="string">"margin-top: 10px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">class</span>=<span class="string">"file-label"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"file-cta"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"file-icon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-upload"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"file-label"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          Choose </span><span class="template-variable">&#123;&#123; field.name &#125;&#125;</span><span class="xml"> to upload</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"file-name"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        Upload your </span><span class="template-variable">&#123;&#123; field.name &#125;&#125;</span><span class="xml"> here</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">            </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">else</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field"</span> <span class="attr">style</span>=<span class="string">"margin-top: 10px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; field.name &#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field is-grouped is-grouped-centered"</span> <span class="attr">style</span>=<span class="string">"margin-top: 30px;"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-link"</span>&gt;</span>Submit<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"control"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-danger is-light"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<p>여기서 한가지 정말 아쉬운것 하나는, 날짜를 입력해야하는 필드에 date picker 를 <br>자바스크립트를 사용하여 구현하고 싶었지만, 짧은 지식으로 인하여, <br></p>
<p><br>아직까지 제대로 구현하지 못했다는 점입니다. </p>
<br>

<br>

<h2 id="URL-설정"><a href="#URL-설정" class="headerlink" title="URL 설정"></a>URL 설정</h2><br>

<p>todo/urls.py 파일에서, url 을 설정해주어야 합니다. </p>
<p><br>create/ 로 접속하면, TodoCreate 함수가 호출되게 URL 설정을 해줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> IndexView, DetailView, DeleteView, UpdateView, TodoCreate</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'todo'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, IndexView.as_view(), name=<span class="string">'todolist'</span>),</span><br><span class="line">    path(<span class="string">'detail/&lt;int:pk&gt;/'</span>, DetailView.as_view(), name=<span class="string">"todolist_detail"</span>),</span><br><span class="line">    path(<span class="string">'delete/&lt;int:pk&gt;/'</span>, DeleteView.as_view(), name=<span class="string">"todolist_delete"</span>),</span><br><span class="line">    path(<span class="string">'update/&lt;int:pk&gt;/'</span>, UpdateView.as_view(), name=<span class="string">'todolist_update'</span>),</span><br><span class="line"></span><br><span class="line">    path(<span class="string">'create/'</span>, TodoCreate, name=<span class="string">'todolist_create'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>



<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>많은것이 찝찝한,,, 그리고 많이 아쉬운 부분이 많습니다;; </p>
<p><br>일단, 아래 같이 추가가 제대로 동작하긴 하지만, 개선점이 많아 보입니다. </p>
<br>

<br>

<img src="/2020/05/29/TodoList-14%ED%8E%B8-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-%EA%B5%AC%ED%98%84/image1.png" class="">

<br>

<br>

<img src="/2020/05/29/TodoList-14%ED%8E%B8-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-%EA%B5%AC%ED%98%84/image2.png" class="">





<p><br>submit 버튼을 누르면, 메인페이지 이동후, 방금 생성한 투두리스트가 나타나는것을 볼수 있습니다. </p>
<br>

<img src="/2020/05/29/TodoList-14%ED%8E%B8-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%83%9D%EC%84%B1-%EA%B5%AC%ED%98%84/image3.png" class="">]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 13편 - 업데이트 기능 구현</title>
    <url>/2020/05/29/TodoList-13%ED%8E%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84/</url>
    <content><![CDATA[<h2 id="Todolist-업데이트-기능-구현"><a href="#Todolist-업데이트-기능-구현" class="headerlink" title="Todolist - 업데이트 기능 구현"></a>Todolist - 업데이트 기능 구현</h2><br>

<br>

<p>투두 리스트를 수정할수 있는 업데이트 기능을 구현해 봅니다. </p>
<p><br>클래스 기반 뷰인 UpdateView 를 사용하여, 기능을 구현해 볼것입니다. </p>
<br>

<br>

<p>이를 구현하기 위해선, 대략적으로, 아래의 과정을 거쳐야 합니다. </p>
<br>

<ol>
<li><p>views.py 에 generic 뷰를 상속받는 UpdateView 클래스 작성 </p>
</li>
<li><p>templates/todo/update.html 파일 생성 및 작성 </p>
</li>
<li><p>templates/todo/todolist_list.html 파일 수정 </p>
</li>
<li><p>templates/todo/todolist_detail.html 파일 수정 </p>
</li>
<li><p>todo/urls.py 파일 수정 </p>
</li>
</ol>
<br>

<a id="more"></a>

<br>

<h2 id="UpdateView-클래스-작성"><a href="#UpdateView-클래스-작성" class="headerlink" title="UpdateView 클래스 작성"></a>UpdateView 클래스 작성</h2><br>

<p>todo/views.py 파일에 아래와 같이, UpdateView 를 추가해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UpdateView</span><span class="params">(generic.UpdateView)</span>:</span></span><br><span class="line">    model = TodoList </span><br><span class="line">    fields = [<span class="string">'name'</span>, <span class="string">'description'</span>, <span class="string">'date_deadline'</span>]</span><br><span class="line">    template_name = <span class="string">'todo/update.html'</span></span><br><span class="line">    success_url = <span class="string">"/"</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="update-html-파일-생성-및-작성"><a href="#update-html-파일-생성-및-작성" class="headerlink" title="update.html 파일 생성 및 작성"></a>update.html 파일 생성 및 작성</h2><br>

<p>templates/todo/update.html 파일을 아래와 같이 생성해주고 작성해 줍니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">class</span>=<span class="string">"has-navbar-fixed-top"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>To do List - </span></span><br><span class="line"><span class="xml">      </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml">할일 정보</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'bulma/css/style.css' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span> </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar is-fixed-top"</span> <span class="attr">role</span>=<span class="string">"navigation"</span> <span class="attr">aria-label</span>=<span class="string">"main navigation"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'images/todo_list.jpg' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">width</span>=<span class="string">"112"</span> <span class="attr">height</span>=<span class="string">"28"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-burger burger"</span> <span class="attr">aria-label</span>=<span class="string">"menu"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">data-target</span>=<span class="string">"navbarBasicExample"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbarBasicExample"</span> <span class="attr">class</span>=<span class="string">"navbar-menu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-end"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-end"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          Home</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          To Do Lists</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-item has-dropdown is-hoverable"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-link"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            More</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-dropdown"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              About</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              Jobs</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              Contact</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"navbar-divider"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              Report an issue</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buttons"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"button is-primary"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"button is-light"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              Log in</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.as_p &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Update"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<p>UpdateView를 통해서, form 을 html 에 표시할수 있습니다.<br></p>
<br>

<h2 id="todolist-list-html-파일-수정"><a href="#todolist-list-html-파일-수정" class="headerlink" title="todolist_list.html 파일 수정"></a>todolist_list.html 파일 수정</h2><br>

<p>templates/todo/todolist_list.html 파일을 수정해 줍니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"card-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/detail/</span></span></span><span class="template-variable">&#123;&#123; todo.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-primary is-fullwidth"</span>&gt;</span>더보기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/update/</span></span></span><span class="template-variable">&#123;&#123; todo.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-warning is-fullwidth"</span>&gt;</span>수정하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/delete/</span></span></span><span class="template-variable">&#123;&#123; todo.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-danger is-fullwidth"</span>&gt;</span>삭제하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="todolist-detail-html-파일-수정"><a href="#todolist-detail-html-파일-수정" class="headerlink" title="todolist_detail.html 파일 수정"></a>todolist_detail.html 파일 수정</h3><br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"># Detail 페이지에서도 update 가 가능하게끔, </span></span><br><span class="line"><span class="xml"># update/</span><span class="template-variable">&#123;&#123; todolist.pk &#125;&#125;</span><span class="xml"> 링크를 추가해 줍니다. </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"card-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'todo:todolist' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-link is-fullwidth"</span>&gt;</span>뒤로가기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/update/</span></span></span><span class="template-variable">&#123;&#123; todolist.pk &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-warning is-fullwidth"</span>&gt;</span>수정하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'todo:todolist' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-danger is-fullwidth"</span>&gt;</span>삭제하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="todo-urls-py-파일-수정"><a href="#todo-urls-py-파일-수정" class="headerlink" title="todo/urls.py 파일 수정"></a>todo/urls.py 파일 수정</h2><br>

<p><code>update/&lt;int:pk&gt;/</code> 로 접속하면, UpdateView 를 호출하게 되는 URL 세팅을 해줍니다 </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> IndexView, DetailView, DeleteView, UpdateView</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'todo'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, IndexView.as_view(), name=<span class="string">'todolist'</span>),</span><br><span class="line">    path(<span class="string">'detail/&lt;int:pk&gt;/'</span>, DetailView.as_view(), name=<span class="string">"todolist_detail"</span>),</span><br><span class="line">    path(<span class="string">'delete/&lt;int:pk&gt;/'</span>, DeleteView.as_view(), name=<span class="string">"todolist_delete"</span>),</span><br><span class="line">    path(<span class="string">'update/&lt;int:pk&gt;/'</span>, UpdateView.as_view(), name=<span class="string">'todolist_update'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>좀 아쉬운 부분들이 많이 존재하긴 하지만, 일단 잘 작동하는지 테스트를 진행 해보았습니다. <br></p>
<br>

<img src="/2020/05/29/TodoList-13%ED%8E%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84/image1.png" class="">

<br>

<br>

<p><strong>수정하기 버튼을 누르면, todo/update.html 파일을 읽어오고,</strong><br></p>
<p><strong>그안에는 해당 폼이 있습니다. 내용을 추가하고, update 버튼을 누르면, 해당 투두 리스트의 정보가 변경 됩니다.</strong></p>
<br>

<img src="/2020/05/29/TodoList-13%ED%8E%B8-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84/image2.png" class="">

<br>

<p>마찬가지로, Detail 페이지에서 수정 버튼을 누르면, 위의 폼이 뜨고,<br> update 버튼을 누르면 투두리스트가 변경됩니다. </p>
<p><br><br></p>
<p>아직까지 구현이 너무너무 딸립니다만… 일단 기능 구현만 되게 해놓고 나중에 천천히 고치려 합니다… </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 12편 - 투두리스트 삭제 기능 구현</title>
    <url>/2020/05/27/TodoList-12%ED%8E%B8-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%82%AD%EC%A0%9C-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84/</url>
    <content><![CDATA[<h2 id="Todo-List-투두리스트-삭제-기능-구현"><a href="#Todo-List-투두리스트-삭제-기능-구현" class="headerlink" title="Todo List - 투두리스트 삭제 기능 구현"></a>Todo List - 투두리스트 삭제 기능 구현</h2><br>

<p>투두 리스트 삭제 기능을 추가해 보려 합니다. </p>
<br>

<p>삭제 버튼은, 투두리스트 페이지와, </p>
<p><br>투두리스트 디테일 페이지에 추가해 줄겁니다. </p>
<p><br>DeleteView 를 사용하기 때문에, <br><br>삭제 버튼을 누르면, ‘정말 삭제하겠습니까?’ 라는 문구를 가진 컨펌 페이지가 뜨고, <br>한번 더 삭제하기 버튼을 누르면, <br>삭제가 완료되고. <br><br>취소 버튼을 누르면, 다시 투두리스트 리스트 페이지로 가게 됩니다. </p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>DeleteView 는 클래스 기반 뷰로, </p>
<p>기본적으로, 정말로 삭제할것인지에 대한 컨펌 페이지를 가지고 있어서 </p>
<p>삭제 버튼을 눌렀을때, 이 컨펌 페이지를 거쳐서 삭제를 눌러야 </p>
<p>객체가 삭제 됩니다. </p>
</blockquote>
<br>

<p>구현 과정은 아래와 같습니다. </p>
<br>

<ol>
<li><p>todo/views.py 파일에 DeleteView 클래스를 추가 </p>
</li>
<li><p>templates/todo/delete.html 파일 생성및 작성 </p>
</li>
<li><p>templates/todo/todolist_list.html 파일 수정 (삭제버튼 설정) </p>
</li>
<li><p>templates/todo/todolist_detail.html 파일 수정 (삭제버튼 설정) </p>
</li>
<li><p>todo/urls.py 파일에서 delete URL 설정 </p>
</li>
</ol>
<br>

<br>

<h2 id="todo-views-py-파일에-DeleteView-클래스-추가"><a href="#todo-views-py-파일에-DeleteView-클래스-추가" class="headerlink" title="todo/views.py 파일에 DeleteView 클래스 추가"></a>todo/views.py 파일에 DeleteView 클래스 추가</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DeleteView</span><span class="params">(generic.DeleteView)</span>:</span></span><br><span class="line">    model = TodoList </span><br><span class="line">    success_url = <span class="string">'/'</span></span><br><span class="line">    tempalte_name = <span class="string">'todo/delete.html'</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="templates-todo-delete-html-파일-생성-및-작성"><a href="#templates-todo-delete-html-파일-생성-및-작성" class="headerlink" title="templates/todo/delete.html 파일 생성 및 작성"></a>templates/todo/delete.html 파일 생성 및 작성</h2><br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">base.html 상속받는 대신에, </span><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span><span class="xml"> 을 사용하여, </span></span><br><span class="line"><span class="xml">static 폴더 안에 있는 style.css 파일을 직접 가져와 사용했습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml">DeleteView 를 사용하기 때문에, </span><span class="template-variable">&#123;&#123; form &#125;&#125;</span><span class="xml"> 을 사용하여, 삭제 폼을 만들어 주었고, </span></span><br><span class="line"></span><br><span class="line"><span class="xml">삭제 버튼과 취소 버튼을 만들어 주었습니다.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'bulma/css/style.css' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field is-grouped is-grouped-centered"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><span class="template-variable">&#123;&#123; object &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field is-grouped is-grouped-centered"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"POST"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"control"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">class</span>=<span class="string">"button is-danger"</span> <span class="attr">value</span>=<span class="string">"삭제"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"button is-light"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'todo:todolist' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        취소</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"field is-grouped is-grouped-centered"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"control"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        해당 투두리스트를 삭제 하시겠습니까?</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<br>

<h2 id="templates-todo-todolist-list-html-파일-수정"><a href="#templates-todo-todolist-list-html-파일-수정" class="headerlink" title="templates/todo/todolist_list.html 파일 수정"></a>templates/todo/todolist_list.html 파일 수정</h2><br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">삭제하기 버튼을 누르면, "/delete/</span><span class="template-variable">&#123;&#123; todo.id &#125;&#125;</span><span class="xml">" url 로 넘어가서, </span></span><br><span class="line"><span class="xml">DeleteView 를 호출할것입니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"card-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/detail/</span></span></span><span class="template-variable">&#123;&#123; todo.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-primary is-fullwidth"</span>&gt;</span>더보기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-warning is-fullwidth"</span>&gt;</span>수정하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/delete/</span></span></span><span class="template-variable">&#123;&#123; todo.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-danger is-fullwidth"</span>&gt;</span>삭제하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="templates-todo-todolist-detail-html-파일-수정"><a href="#templates-todo-todolist-detail-html-파일-수정" class="headerlink" title="templates/todo/todolist_detail.html 파일 수정"></a>templates/todo/todolist_detail.html 파일 수정</h2><br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">삭제하기 버튼을 누르면, "/delete/</span><span class="template-variable">&#123;&#123; todo.id &#125;&#125;</span><span class="xml">" url 로 넘어가서, </span></span><br><span class="line"><span class="xml">DeleteView 를 호출하게 해서, </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">Detail 페이지에서도 삭제가 가능하게 하려 했지만, </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">DeleteView 를 Detail 페이지에서 호출하면, 에러가 납니다. (이에 대한 해결 방법을 찾지 못하고 있음) </span></span><br><span class="line"></span><br><span class="line"><span class="xml">따라서, 삭제 버튼을 누르면, 다시 리스트 페이지로 되돌아오게 해주었습니다..</span></span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"card-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'todo:todolist' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-link is-fullwidth"</span>&gt;</span>뒤로가기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-warning is-fullwidth"</span>&gt;</span>수정하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'todo:todolist' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-danger is-fullwidth"</span>&gt;</span>삭제하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<br>

<h2 id="todo-urls-py-파일에서-delete-URL-설정"><a href="#todo-urls-py-파일에서-delete-URL-설정" class="headerlink" title="todo/urls.py 파일에서 delete URL 설정"></a>todo/urls.py 파일에서 delete URL 설정</h2><br>

<p>‘delete/<a href="int:pk">int:pk</a>/‘ 라는 URL 을 가지면, DeleteView 를 호출하고, </p>
<p>삭제 페이지로 넘어가게 됩니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> IndexView, DetailView, DeleteView</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'todo'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, IndexView.as_view(), name=<span class="string">'todolist'</span>),</span><br><span class="line">    path(<span class="string">'detail/&lt;int:pk&gt;/'</span>, DetailView.as_view(), name=<span class="string">"todolist_detail"</span>),</span><br><span class="line">    path(<span class="string">'delete/&lt;int:pk&gt;/'</span>, DeleteView.as_view(), name=<span class="string">"todolist_delete"</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br>서버를 시작하고, 삭제 테스트를 해봅니다. </p>
<br>

<p>투두 리스트 페이지에서 삭제 진행 </p>
<br>

<img src="/2020/05/27/TodoList-12%ED%8E%B8-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%82%AD%EC%A0%9C-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84/image1.png" class="">

<br>

<p>삭제 버튼을 누르면, 아래 컨펌 페이지가 뜨고, 여기서 한번 더 삭제를 누르면 객체가 삭제 완료 됩니다. </p>
<br>

<img src="/2020/05/27/TodoList-12%ED%8E%B8-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%82%AD%EC%A0%9C-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84/image2.png" class="">

<br>

<p>삭제 버튼을 누르면, 투두리스트 삭제가 진행 되는것을 확인 하였습니다만. <br></p>
<p>디테일 페이지에서 삭제 동작을 구현하지 못한것이 아쉽습니다. <br>클래스 베이스 뷰에 있는 DeleteView 를 더 많이 경험해 봐야 알것 같습니다. </p>
<p><br><br></p>
<p><strong>만약, DeleteView 를 사용하지 않고, 함수형으로 이 기능을 구현하고 싶다면,</strong> </p>
<hr>
<p><br>views.py 에 아래와 같은 함수를 작성하고, 적절히 URL 을 연결하여 사용하면 됩니다. </p>
<br>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># views.py </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete_todo</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    t = TodoList.objects.get(pk=pk)</span><br><span class="line">    t.delete() </span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'/'</span>)</span><br></pre></td></tr></table></figure>



<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># todo/urls.py </span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> IndexView, DetailView, DeleteView, UpdateView, TodoCreate</span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> delete_todo</span><br><span class="line">app_name = <span class="string">'todo'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, IndexView.as_view(), name=<span class="string">'todolist'</span>),</span><br><span class="line">    path(<span class="string">'detail/&lt;int:pk&gt;/'</span>, DetailView.as_view(), name=<span class="string">"todolist_detail"</span>),</span><br><span class="line">    path(<span class="string">'delete/&lt;int:pk&gt;/'</span>, DeleteView.as_view(), name=<span class="string">"todolist_delete"</span>),</span><br><span class="line">    path(<span class="string">'delete_todo/&lt;int:pk&gt;/'</span>, delete_todo, name=<span class="string">"delete_todo"</span>),</span><br><span class="line">    path(<span class="string">'update/&lt;int:pk&gt;/'</span>, UpdateView.as_view(), name=<span class="string">'todolist_update'</span>),</span><br><span class="line">    path(<span class="string">'create/'</span>, TodoCreate, name=<span class="string">'todolist_create'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><br><br>다만, 이렇게 구현 하면, DeleteView 를 사용했을때랑은 다르게, </p>
<p>Confirm page 가 나오지 않고. 바로 삭제가 됩니다. <br></p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 11편 - 디테일 페이지에 이미지와 파일 표시</title>
    <url>/2020/05/26/TodoList-11%ED%8E%B8-%EB%94%94%ED%85%8C%EC%9D%BC-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-%ED%8C%8C%EC%9D%BC-%ED%91%9C%EC%8B%9C/</url>
    <content><![CDATA[<h2 id="디테일-페이지에-이미지와-파일-표시"><a href="#디테일-페이지에-이미지와-파일-표시" class="headerlink" title="디테일 페이지에 이미지와 파일 표시"></a>디테일 페이지에 이미지와 파일 표시</h2><br>

<h2 id="MEDIA-경로-설정"><a href="#MEDIA-경로-설정" class="headerlink" title="MEDIA 경로 설정"></a>MEDIA 경로 설정</h2><br>

<br>

<p>개발 단계에서 MEDIA 파일을 업로드 해줄 MEDIA 경로를 설정해 주어야 합니다. </p>
<p><br>confit/settings.py 파일로 가서, 아래와 같이 MEDIA 경로를 설정해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># MEDIA_ROOT 설정 </span></span><br><span class="line"><span class="comment"># 사용자가 업로드하는 미디어 정적 파일들의 기본 경로 </span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'.media'</span>)</span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<a id="more"></a>

<h2 id="image-와-file-URL-을-위한-쿼리셋-연습"><a href="#image-와-file-URL-을-위한-쿼리셋-연습" class="headerlink" title="image 와 file URL 을 위한 쿼리셋 연습"></a>image 와 file URL 을 위한 쿼리셋 연습</h2><br>

<p>쿼리셋을 연습하기 위해서</p>
<p><br>두개의 이미지 파일과, 두개의 파일을 가지고 있는 투두리스트 하나를 어드민에서 생성해 주었습니다. </p>
<p><br>image 의 URL을 얻기위해서, Shell_plus 에서 연습한 내용은 아래와 같습니다. </p>
<br>

<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: t = TodoList.objects.get(pk=3)   </span><br><span class="line">In [2]: images = TodoList_images.objects.filter(todo=t) </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> images 에, 해당 todo에 관련된 TodoList_images images 들을 담고, </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 이를 순회하면서, 각 image 가 어떤 속성이 있는지 프린트 해봅니다. </span></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">In [3]: for image in images: </span><br><span class="line">   ...:     print(dir(image))    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 각 image 마다, image 라는 속성이 존재 하는것을 확인 할수 있습니다 </span></span><br><span class="line">In [4]: for image in images: </span><br><span class="line">   ...:     print(dir(image.image)) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> image.image 에는 url 속성이 있어서, image.image.url 을 출력하면, </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 각 이미지들의 url 을 얻을수 있습니다. </span></span><br><span class="line"></span><br><span class="line">In [6]: for image in images: </span><br><span class="line">   ...:     print(image.image.url)</span><br><span class="line">/media/todo/images/2020/05/todolist_logo.jpg</span><br><span class="line">/media/todo/images/2020/05/main.jpg</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="이미지-URL-적용하기"><a href="#이미지-URL-적용하기" class="headerlink" title="이미지 URL 적용하기"></a>이미지 URL 적용하기</h2><br>

<p>이를 잘 활용하여, templates/todo/todo_list.html 파일에 적용해봅니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">       남은 일수 : </span><span class="template-variable">&#123;&#123; todolist.remaining_days &#125;&#125;</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">       관련 이미지 : </span></span><br><span class="line"><span class="xml">       </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> image <span class="keyword">in</span> todolist.todolist_images_set.all %&#125;</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; image.image.url &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">width</span>=<span class="string">"300px"</span> <span class="attr">height</span>=<span class="string">"350px"</span> <span class="attr">alt</span>=<span class="string">"reference_image"</span>&gt;</span></span></span><br><span class="line"><span class="xml">       </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>이렇게 까지 작업을 하고, 다시 투두 리스트의 디테일을 확인해보면, <br>이미지가 화면에 나올것이라고 생각하고 확인해 보면, 이미지가 화면에 표시되지 않는것을 확인 할수 있습니다. </p>
<br>

<img src="/2020/05/26/TodoList-11%ED%8E%B8-%EB%94%94%ED%85%8C%EC%9D%BC-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-%ED%8C%8C%EC%9D%BC-%ED%91%9C%EC%8B%9C/image1.png" class="">

<br>

<p>브라우저를 열어서 요소 검사를 해보면, 아래와 같이 HTML 은 잘 작성이 되어 있는데, </p>
<p><br>이미지 표시가 안됩니다. </p>
<br>

<img src="/2020/05/26/TodoList-11%ED%8E%B8-%EB%94%94%ED%85%8C%EC%9D%BC-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-%ED%8C%8C%EC%9D%BC-%ED%91%9C%EC%8B%9C/image2.png" class="">

<br>

<h2 id="URL-patterns-에-MEDIA-URL-추가"><a href="#URL-patterns-에-MEDIA-URL-추가" class="headerlink" title="URL patterns 에 MEDIA_URL 추가"></a>URL patterns 에 MEDIA_URL 추가</h2><br>

<p>이 문제를 해결하기 위해서는, </p>
<p><br>config/urls.py 파일을 수정해 주어야 합니다. <br>기존 urlpatterns 에, MEDIA_URL 그리고, 루트를 설정해 주어야 합니다. <br><br></p>
<h3 id="config-urls-py-파일-수정"><a href="#config-urls-py-파일-수정" class="headerlink" title="config/urls.py 파일 수정"></a>config/urls.py 파일 수정</h3><p><br><br></p>
<ol>
<li>from django.conf import settings </li>
<li>from django.conf.urls.static import static </li>
</ol>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"><span class="keyword">from</span> django.conf <span class="keyword">import</span> settings</span><br><span class="line"><span class="keyword">from</span> django.conf.urls.static <span class="keyword">import</span> static </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.stie.urls),</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'todo.urls'</span>)),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns += static(</span><br><span class="line">	prefix=settings.MEDIA_URL, </span><br><span class="line">    document_root=settings.MEDIA_ROOT, </span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>위와 같이 수정을 해주었다면, </p>
<p>브라우저에서 한번 확인 해 봅니다. 투두리스트의 디테일을 확인하면, </p>
<p>해당 투두리스트의 관련 이미지가 화면에 표시되는것을 확인할수 있습니다. </p>
</blockquote>
<br>

<img src="/2020/05/26/TodoList-11%ED%8E%B8-%EB%94%94%ED%85%8C%EC%9D%BC-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-%ED%8C%8C%EC%9D%BC-%ED%91%9C%EC%8B%9C/image3.png" class="">

<p><br><br></p>
<h2 id="파일-정보도-표시해주기"><a href="#파일-정보도-표시해주기" class="headerlink" title="파일 정보도 표시해주기"></a>파일 정보도 표시해주기</h2><br>

<p>매우매우 비슷한 방식으로, </p>
<p><br>파일 정보도 디테일 페이지에 표시해줄수 있습니다.<br><br></p>
<p>일단, templates/todo/todolist_detail.html 파일에, 파일정보 부분을 아래와 같이 고쳐줍니다.<br><br></p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">          관련 이미지 : </span></span><br><span class="line"><span class="xml">          </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> image <span class="keyword">in</span> todolist.todolist_images_set.all %&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; image.image.url &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">width</span>=<span class="string">"300px"</span> <span class="attr">height</span>=<span class="string">"350px"</span> <span class="attr">alt</span>=<span class="string">"reference_image"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">          관련 파일 : <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">          </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> file <span class="keyword">in</span> todolist.todolist_files_set.all %&#125;</span></span><br><span class="line"><span class="xml">          </span><span class="template-variable">&#123;&#123; file.files.url &#125;&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; file.files.url &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>(파일보기)<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">          </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<p>파일과 이미지를 표시하는 templates/todo/todolist_detail.html 을 위와 같이 수정해 주었다면, <br></p>
<p>브라우저로 어떻게 표시되는지 확인하러 갑니다. <br><br></p>
<img src="/2020/05/26/TodoList-11%ED%8E%B8-%EB%94%94%ED%85%8C%EC%9D%BC-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-%ED%8C%8C%EC%9D%BC-%ED%91%9C%EC%8B%9C/image4.png" class="">

<br>

<p>관련 파일이라고 하는 항목에, 파일 주소가 표시되고, <br>파일보기 링크가 표시되는것을 확인 할수 있습니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 10편 - 리스트 더보기 (디테일) 기능 구현</title>
    <url>/2020/05/25/TodoList-10%ED%8E%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EB%8D%94%EB%B3%B4%EA%B8%B0-%EB%94%94%ED%85%8C%EC%9D%BC-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84/</url>
    <content><![CDATA[<br>

<p>하나의 TodoList 는, 아래의 필드들을 가지고 있습니다. </p>
<p><br><br></p>
<table>
<thead>
<tr>
<th><strong>Field</strong></th>
<th><strong>비고</strong></th>
</tr>
</thead>
<tbody><tr>
<td>name</td>
<td>할일의 제목</td>
</tr>
<tr>
<td>description</td>
<td>할일에 대한 설명</td>
</tr>
<tr>
<td>date_created</td>
<td>생성 날짜</td>
</tr>
<tr>
<td>date_deadline</td>
<td>데드라인 날짜</td>
</tr>
<tr>
<td>TodoList_images</td>
<td>외래키로, 관련된 이미지파일들을 보유</td>
</tr>
<tr>
<td>TodoList_files</td>
<td>외래키로, 관련된 파일들을 보유</td>
</tr>
</tbody></table>
<br>

<blockquote>
<p>리스트만 보여주는 페이지에서는, </p>
<p>간략하게만 보여주기 때문에, 관련 이미지와 파일들을 보여주고 있지 않지만, </p>
<p>더보기 버튼을 눌러서, 디테일을 보여줄때에는, 관련 이미지와 파일도 보여져야 될것 같습니다. </p>
</blockquote>
<br>

<a id="more"></a>

<br>

<p>이를 진행하기 위해서는, 아래와 같은 순서를 거쳐야 합니다. </p>
<br>

<ol>
<li><p>templates/todo/todolist_detail.html 파일을 생성후 작성 </p>
</li>
<li><p>todo/views.py 파일에 detailview  를 추가 </p>
</li>
<li><p>todo/urls.py 파일에서 detailview 를 호출할 url 설정 </p>
</li>
<li><p>templates/todo/todolist_list.html 에서 todollist_detail 로 가는 URL 링크 추가 </p>
</li>
</ol>
<br>

<br>

<h2 id="templates-todo-todolist-detail-html"><a href="#templates-todo-todolist-detail-html" class="headerlink" title="templates/todo/todolist_detail.html"></a>templates/todo/todolist_detail.html</h2><br>

<br>

<p>templates/todo/todolist_detail.html 파일을 생성 후 아래와 같이 작성합니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> 'base.html' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml">할일 정보</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"columns"</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card column"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"card-header"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-header-title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            할일 : </span><span class="template-variable">&#123;&#123; todolist.name &#125;&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"card-header-icon"</span> <span class="attr">aria-label</span>=<span class="string">"more options"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-angle-down"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            해야 할일 : </span><span class="template-variable">&#123;&#123; todolist.description &#125;&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            생성 날짜 : </span><span class="template-variable">&#123;&#123; todolist.date_created &#125;&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">            데드 라인 : </span><span class="template-variable">&#123;&#123; todolist.date_deadline &#125;&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            남은 일수 : </span><span class="template-variable">&#123;&#123; todolist.remaining_days &#125;&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            관련 이미지 : </span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> image <span class="keyword">in</span> todolist_images_set.all %&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; image &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">            관련 파일 : </span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> file <span class="keyword">in</span> todolist_files_set.all %&#125;</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span><span class="template-variable">&#123;&#123; file &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"card-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'todo:todolist' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-link is-fullwidth"</span>&gt;</span>뒤로가기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-warning is-fullwidth"</span>&gt;</span>수정하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-danger is-fullwidth"</span>&gt;</span>삭제하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> content %&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="todo-views-py-파일에-DetailView-추가"><a href="#todo-views-py-파일에-DetailView-추가" class="headerlink" title="todo/views.py 파일에 DetailView 추가"></a>todo/views.py 파일에 DetailView 추가</h2><br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render </span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> TodoList, TodoList_files, TodoList_images </span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic </span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></span><br><span class="line">    context_object_name = <span class="string">'to_do_list'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> TodoList.objects.all() </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    model = TodoList </span><br><span class="line">    contxt_object_name = <span class="string">'todolist'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> TodoList.objects.all()</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="DetailView-를-호출할-URL-설정"><a href="#DetailView-를-호출할-URL-설정" class="headerlink" title="DetailView 를 호출할 URL 설정"></a>DetailView 를 호출할 URL 설정</h2><br>

<br>

<p>todo/urls.py 파일을 아래와 같이 DetailView 를 호출하는 URL 을 등록해줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin </span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path </span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> IndexView, DetailView </span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'tdodo'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, IndexView.as_view(), name=<span class="string">'todolist'</span>),</span><br><span class="line">    path(<span class="string">'detail/&lt;int:pk&gt;/'</span>, DetailView.as_view(), name=<span class="string">"todolist_detail"</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="todolist-detail-로-가는-URL-링크를-추가"><a href="#todolist-detail-로-가는-URL-링크를-추가" class="headerlink" title="todolist_detail 로 가는 URL 링크를 추가"></a>todolist_detail 로 가는 URL 링크를 추가</h2><br>

<p>templates/todo/todolist_list.html 에서 todolist_detail 로 가는 링크를 추가 해줍니다. </p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"card-footer"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/detail/&#123;&#123; todo.id &#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-primary is-fullwidth"</span>&gt;</span>더보기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-warning is-fullwidth"</span>&gt;</span>수정하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-danger is-fullwidth"</span>&gt;</span>삭제하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>투두리스트의 디테일 보기 구현이 간단하게 되었습니다. </p>
<p><br>순서대로 하면 잘 구현 되는것을 확인할수 있었습니다. 하지만, 문제가 하나 발생합니다. </p>
<p><br>투두리스트에 이미지와 파일이 있어도, 이것이 디테일 페이지에서 표시가 되지 않습니다. </p>
<p><br>이를 위해서는, MEDIA 경로를 설정하고, URL 패턴에 MEDIA_URL 을 추가해주어야 합니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
        <tag>DetailView</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 9편 - 리스트페이지 카드형태로 꾸미기</title>
    <url>/2020/05/24/TodoList-9%ED%8E%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%B9%B4%EB%93%9C%ED%98%95%ED%83%9C%EB%A1%9C-%EA%BE%B8%EB%AF%B8%EA%B8%B0/</url>
    <content><![CDATA[<img src="/2020/05/24/TodoList-9%ED%8E%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%B9%B4%EB%93%9C%ED%98%95%ED%83%9C%EB%A1%9C-%EA%BE%B8%EB%AF%B8%EA%B8%B0/image1.png" class="">



<br>

<p>템플릿 작업을 마친 메인 페이지 하단에 보면, </p>
<p><br>할일 목록들이 나오긴 하는데, 이쁘지가 않습니다. 이것을, BULMA CSS 를 사용하여, </p>
<p><br>카드형태로 나오게 할겁니다. </p>
<br>

<a id="more"></a>

<br>

<h2 id="todolist-list-html-파일-수정하기"><a href="#todolist-list-html-파일-수정하기" class="headerlink" title="todolist_list.html 파일 수정하기"></a>todolist_list.html 파일 수정하기</h2><br>

<p>templates/todo/todolist_list.html 파일을 아래와 같이 수정해 줍니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> 'base.html' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml">할일 목록</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"columns"</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> todo <span class="keyword">in</span> to_do_list %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card column"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">header</span> <span class="attr">class</span>=<span class="string">"card-header"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"card-header-title"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        할일 : </span><span class="template-variable">&#123;&#123; todo.name &#125;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"card-header-icon"</span> <span class="attr">aria-label</span>=<span class="string">"more options"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"icon"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">"fas fa-angle-down"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"card-content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"content"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        해야 할일 : </span><span class="template-variable">&#123;&#123; todo.description|<span class="name">truncatechars</span>:30 &#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        생성 날짜 : </span><span class="template-variable">&#123;&#123; todo.date_created &#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">        데드 라인 : </span><span class="template-variable">&#123;&#123; todo.date_deadline &#125;&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span></span><br><span class="line"><span class="xml">        남은 일수 : </span><span class="template-variable">&#123;&#123; todo.remaining_days &#125;&#125;</span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">footer</span> <span class="attr">class</span>=<span class="string">"card-footer"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-primary is-fullwidth"</span>&gt;</span>더보기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-warning is-fullwidth"</span>&gt;</span>수정하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#"</span> <span class="attr">class</span>=<span class="string">"card-footer-item"</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"button is-danger is-fullwidth"</span>&gt;</span>삭제하기<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> content %&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<p>파일을 수정하고, 서버를 시작한다음, </p>
<p><br><a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a> 으로 접속해 보면, 아래와 같이 투두 리스트 정보가 카드 형태로 나옵니다. </p>
<br>

<img src="/2020/05/24/TodoList-9%ED%8E%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8%ED%8E%98%EC%9D%B4%EC%A7%80-%EC%B9%B4%EB%93%9C%ED%98%95%ED%83%9C%EB%A1%9C-%EA%BE%B8%EB%AF%B8%EA%B8%B0/image2.png" class=""> 

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>디자인이 많이 아쉽습니다..<br></p>
<p>역시 부트스트랩이 컴포넌트도 더 많은거 같고, 예제도 더 많아서 사용하기 편리한거 같습니다. <br><br></p>
<p>Bulma 는 예제도, 설명도, CSS 사이즈 자체도 좀 빈약한 감이 있습니다. </p>
 <br>

<p>더보기, 수정하기, 삭제하기 버튼을 추가하게 되어서. 매우 일이 커지게 된것 같습니다만.. </p>
<p>진행 하면서 알아가는것이 클테니.. 계속 진행 합니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 8편 - 프로젝트 Templates 설정</title>
    <url>/2020/05/23/TodoList-8%ED%8E%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-Templates-%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<p>이전 포스팅에서, </p>
<br>

<p>BULMA CSS를 프로젝트에서 사용하기 위한 준비를 하였습니다. </p>
<p><br>static 폴더안에 Bulma 폴더가 생성되고, 그안에 CSS 폴더안에, style.css 파일이 생성되었습니다. </p>
<br>

<br>

<p>이제 이 CSS 를 적용한 기본 템플릿을 생성하고, </p>
<p><br>이 기본 템플릿을 다른 페이지들이 상속받아 사용하게 해봅니다. </p>
<br>

<h2 id="Templates-폴더-생성"><a href="#Templates-폴더-생성" class="headerlink" title="Templates 폴더 생성"></a>Templates 폴더 생성</h2><br>

<a id="more"></a>

<br>

<p>프로젝트 폴더안에, templates 폴더를 생성합니다.</p>
<p><br>그리고, 그 폴더안에, base.html 파일을 생성합니다. 아래 트리 구조 형태로 생성합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── config</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── manage.py</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── static</span><br><span class="line">│   └── bulma</span><br><span class="line">│       ├── css</span><br><span class="line">│       │   ├── style.css</span><br><span class="line">│       │   ├── style.css.map</span><br><span class="line">│       │   └── style.min.css</span><br><span class="line">│       └── sass</span><br><span class="line">│           ├── package.json</span><br><span class="line">│           ├── package-lock.json</span><br><span class="line">│           └── style.sass</span><br><span class="line">├── templates</span><br><span class="line">│   └── base.html</span><br><span class="line">└── todo</span><br><span class="line">    ├── admin.py</span><br><span class="line">    ├── apps.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── migrations</span><br><span class="line">    │   ├── 0001_initial.py</span><br><span class="line">    │   ├── 0002_auto_20200511_1242.py</span><br><span class="line">    │   ├── __init__.py</span><br><span class="line">    ├── models.py</span><br><span class="line">    ├── templates</span><br><span class="line">    │   └── todo</span><br><span class="line">    │       └── todo-lists.html</span><br><span class="line">    ├── tests.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── views.py</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="생성된-templates-폴더-설정하기"><a href="#생성된-templates-폴더-설정하기" class="headerlink" title="생성된 templates 폴더 설정하기"></a>생성된 templates 폴더 설정하기</h2><br>

<p>생성된 templates 폴더를, </p>
<p><br>프로젝트의 templates 폴더로 사용하기 위해서, <br>config/settings.py 파일에 templates  폴더를 지정해주어야 합니다. </p>
<br>

<p>settings.py 파일안에, TEMPLATES 부분에, DIR 값을 아래와 같이 설정해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># settings.py</span></span><br><span class="line">TEMPLATES = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="string">'BACKEND'</span>: <span class="string">'django.template.backends.django.DjangoTemplates'</span>,</span><br><span class="line">        <span class="string">'DIRS'</span>: [os.path.join(BASE_DIR, <span class="string">'templates'</span>)], <span class="comment"># Templates folder 설정 </span></span><br><span class="line">        <span class="string">'APP_DIRS'</span>: <span class="literal">True</span>,</span><br><span class="line">        <span class="string">'OPTIONS'</span>: &#123;</span><br><span class="line">            <span class="string">'context_processors'</span>: [</span><br><span class="line">                <span class="string">'django.template.context_processors.debug'</span>,</span><br><span class="line">                <span class="string">'django.template.context_processors.request'</span>,</span><br><span class="line">                <span class="string">'django.contrib.auth.context_processors.auth'</span>,</span><br><span class="line">                <span class="string">'django.contrib.messages.context_processors.messages'</span>,</span><br><span class="line">            ],</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="base-html-파일-꾸미기"><a href="#base-html-파일-꾸미기" class="headerlink" title="base.html 파일 꾸미기"></a>base.html 파일 꾸미기</h2><br>

<p>templates/base.html 파일은, 다른 템플릿 페이지들이 상속받아서 사용할 페이지 입니다. <br></p>
<p>base.html 파일을 아래와 같이 생성해 줍니다. 이 파일은 BULMA CSS 프레임워크가 적용되어 있고, <br>이 파일을 상속받는 다른 페이지들도, BULMA CSS 적용이 될것입니다. </p>
<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>To do List<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> head %&#125;</span><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="xml"> </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>위와 같은 구조를 만들었으면, <br></p>
<p>이제 BULMA CSS 프레임워크를 이용하여, 기본 레이아웃 구조를 만들어 줍니다. <br></p>
<p><br><br></p>
<p>첫번째로, 네비게이션 바를 만들어 놓을겁니다. <br></p>
<p>이 네비게이션 바를 base.html 파일에 만들어놓고, <br>다른 페이지들이 이 base.html 파일을 확장하여 사용하면, <br></p>
<p>base.html 파일에 있는 네비게이션 바가, 기본으로 다른 페이지들에도 보이게 될것입니다. <br></p>
<p><br><br></p>
<p>Bulma CSS Navbar  를 적용하기 위해서, 아래 사이트를 참조합니다. </p>
<br>

<p><a href="https://bulma.io/documentation/components/navbar/" target="_blank" rel="noopener">https://bulma.io/documentation/components/navbar/</a></p>
<br>


<p>이곳에 나와 있는 Basic Navbar 를 조금 수정하여, 사용할것입니다. <br></p>
<p>위에 작성한, base.html 파일에, 이 Bulma Navbar 를 아래와 같이 수정하여 붙여 놓습니다. </p>
<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">class</span>=<span class="string">"has-navbar-fixed-top"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>To do List - </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'bulma/css/style.css' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> head %&#125;</span><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">nav</span> <span class="attr">class</span>=<span class="string">"navbar is-fixed-top"</span> <span class="attr">role</span>=<span class="string">"navigation"</span> <span class="attr">aria-label</span>=<span class="string">"main navigation"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-brand"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'images/todo_list.jpg' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">width</span>=<span class="string">"112"</span> <span class="attr">height</span>=<span class="string">"28"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"navbar-burger burger"</span> <span class="attr">aria-label</span>=<span class="string">"menu"</span> <span class="attr">aria-expanded</span>=<span class="string">"false"</span> <span class="attr">data-target</span>=<span class="string">"navbarBasicExample"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"navbarBasicExample"</span> <span class="attr">class</span>=<span class="string">"navbar-menu"</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-end"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-end"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          Home</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          To Do Lists</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-item has-dropdown is-hoverable"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-link"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            More</span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-dropdown"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              About</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              Jobs</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              Contact</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">hr</span> <span class="attr">class</span>=<span class="string">"navbar-divider"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              Report an issue</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"navbar-item"</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"buttons"</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"button is-primary"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Sign up<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"button is-light"</span>&gt;</span></span></span><br><span class="line"><span class="xml">              Log in</span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'images/main.jpg' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">width</span>=<span class="string">"100%"</span>&gt;</span></span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span><span class="xml"> </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="todolist-list-html-을-메인페이지로-사용"><a href="#todolist-list-html-을-메인페이지로-사용" class="headerlink" title="todolist_list.html 을 메인페이지로 사용"></a>todolist_list.html 을 메인페이지로 사용</h2><br>

<p>base.html 파일을 확장하는, templates/todollist_list.html 파일을 만들고, <br></p>
<p>여기에 Todo list 들이 나오게 할겁니다. </p>
<p><br><br></p>
<ol>
<li><p>templates/todolist_list.html  파일 생성</p>
</li>
<li><p>todo/views.py 파일 수정 </p>
</li>
<li><p>todo/urls.py 파일 수정 </p>
</li>
</ol>
<br>

<h3 id="templates-todolist-list-html-파일-생성후-작성"><a href="#templates-todolist-list-html-파일-생성후-작성" class="headerlink" title="templates/todolist_list.html 파일 생성후 작성"></a>templates/todolist_list.html 파일 생성후 작성</h3><p><br><br></p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> 'base.html' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml">할일 목록</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> todo <span class="keyword">in</span> to_do_list %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>할일 제목 : </span><span class="template-variable">&#123;&#123; todo.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>생성 날짜 : </span><span class="template-variable">&#123;&#123; todo.date_created &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>데드라인 날짜 : </span><span class="template-variable">&#123;&#123; todo.date_deadline &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>남은 일수 : </span><span class="template-variable">&#123;&#123; todo.remaining_days &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> content %&#125;</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h3 id="todo-views-py-파일-수정"><a href="#todo-views-py-파일-수정" class="headerlink" title="todo/views.py 파일 수정"></a>todo/views.py 파일 수정</h3><br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> TodoList, TodoList_files, TodoList_images</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></span><br><span class="line">    context_object_name = <span class="string">'to_do_list'</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> TodoList.objects.all()</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h3 id="config-urls-py-파일-수정"><a href="#config-urls-py-파일-수정" class="headerlink" title="config/urls.py 파일 수정"></a>config/urls.py 파일 수정</h3><p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'todo.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>위와 같은 작업을 마치고 나서, </p>
<br>

<blockquote>
<p>서버를 시작하고 </p>
<p><a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a> 으로 접속하면, </p>
<p>아래와 같은 화면이 나옵니다. </p>
</blockquote>
<br>

<img src="/2020/05/23/TodoList-8%ED%8E%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-Templates-%EC%84%A4%EC%A0%95/image1.png" class="">

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>아직 익숙치 않아서, 여러가지로 꼬이고 꼬였지만, 레슨이 하나 있었습니다.<br></p>
<br>

<p>View 에서 ListView 클래스를 사용하는데. <br></p>
<p>예네는 templates 을, templates/todolist_list.html 파일에서 찾습니다;;; <br><br>이 파일이 없으면, 렌더가 안되서. </p>
<p>이 파일을 생성하고 메인 url 로 설정해 주었습니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 7편 - BULMA CSS 적용하기</title>
    <url>/2020/05/22/TodoList-7%ED%8E%B8-BULMA-CSS-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="Bulma-CSS-Framework-적용"><a href="#Bulma-CSS-Framework-적용" class="headerlink" title="Bulma CSS Framework 적용"></a>Bulma CSS Framework 적용</h2><br>

<br>

<img src="/2020/05/22/TodoList-7%ED%8E%B8-BULMA-CSS-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image1.png" class="">

<br>

<br>

<p>부트스트랩과 비슷한 CSS Framework 의 하나인 BULMA 를, </p>
<p><br>이번 투두 리스트 미니 프로젝트에 적용해 보려 합니다.<br> 처음 접해보는 CSS 프레임워크지만, 시도한번 해보려 합니다. </p>
<br>

<a id="more"></a>

<br>

<h2 id="참고-사이트"><a href="#참고-사이트" class="headerlink" title="참고 사이트"></a>참고 사이트</h2><br>

<p>CSS 를 프로젝트에 적용하기 위한 참고 사이트는 아래와 같습니다.</p>
<br>

<ol>
<li>django-bulma 패키지  <a href="https://github.com/timonweb/django-bulma" target="_blank" rel="noopener">https://github.com/timonweb/django-bulma</a></li>
<li>bulma 공식 페이지 <a href="https://bulma.io" target="_blank" rel="noopener">https://bulma.io</a> </li>
</ol>
<br>

<br>

<h2 id="django-bulma-패키지-설치"><a href="#django-bulma-패키지-설치" class="headerlink" title="django-bulma 패키지 설치"></a>django-bulma 패키지 설치</h2><br>

<br>

<p>아래 명령어를 실행하여, bulma  프레임워크를 장고 프로젝트에 설치해 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-bulma</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/05/22/TodoList-7%ED%8E%B8-BULMA-CSS-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image2.png" class="">

<br>

<h2 id="settings-py-파일-INSTALLED-APPS-등록"><a href="#settings-py-파일-INSTALLED-APPS-등록" class="headerlink" title="settings.py 파일 INSTALLED_APPS 등록"></a>settings.py 파일 INSTALLED_APPS 등록</h2><br>

<br>

<p>config/settings.py 파일안, INSTALLED_APPS 에 아래와 같이,</p>
<p><br>bulma 를 등록해줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Application definition</span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="string">'todo'</span>,</span><br><span class="line">    <span class="string">'django_extensions'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Bulma CSS Framework </span></span><br><span class="line">    <span class="string">'bulma'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="Bulma-프레임워크를-사용할-static-폴더"><a href="#Bulma-프레임워크를-사용할-static-폴더" class="headerlink" title="Bulma 프레임워크를 사용할 static 폴더"></a>Bulma 프레임워크를 사용할 static 폴더</h2><br>

<p>프레임워크 파일들을 가지고 있을, 정적파일 폴더를 생성하고 설정해 줍니다.  </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── config</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── manage.py</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── static            <span class="comment"># 프로젝트 폴더에, static 폴더를 생성 (manage.py와 같은 위치)</span></span><br><span class="line">└── todo</span><br><span class="line">    ├── admin.py</span><br><span class="line">    ├── apps.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── migrations</span><br><span class="line">    ├── models.py</span><br><span class="line">    ├── templates</span><br><span class="line">    │   └── todo</span><br><span class="line">    │       └── todo-lists.html</span><br><span class="line">    ├── tests.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── views.py</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>static 폴더 생성을 완료 하였으면, </p>
<p>settings.py 파일을 열고, STATICFILES_DIRS = [] 을 설정해주어야 합니다.</p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/howto/static-files/</span></span><br><span class="line"></span><br><span class="line">STATIC_URL = <span class="string">'/static/'</span></span><br><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">'static'</span>)]</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="Bulma-프레임워크-복사하기"><a href="#Bulma-프레임워크-복사하기" class="headerlink" title="Bulma 프레임워크 복사하기"></a>Bulma 프레임워크 복사하기</h2><p><br><br></p>
<p>static 폴더에, 수동으로 BULMA 프레임워크 파일들을 복사해주어도 괜찮지만, </p>
<p><br>아래 명령어를 실행해서, bulma css 파일들을 static 폴더로 복사해 올수 있습니다.<br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py copy_bulma_static_into_project</span><br></pre></td></tr></table></figure>

<br>

<p>명령어를 실행하면,<br>static 폴더안에, bulma 폴더가 생기고, 그 안에 css 파일들이 들어 있는것을 확인 할수 있습니다.<br><br></p>
<img src="/2020/05/22/TodoList-7%ED%8E%B8-BULMA-CSS-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image3.png" class="">

<p><br><br></p>
<h2 id="bulma-CSS-를-템플릿에-적용하기"><a href="#bulma-CSS-를-템플릿에-적용하기" class="headerlink" title="bulma CSS 를 템플릿에 적용하기"></a>bulma CSS 를 템플릿에 적용하기</h2><br>

<p>CSS 파일들을 프로젝트에 가져왔으면, 이제 적용해 보아야 겟죠? </p>
<br>

<h3 id="base-html-파일-생성하기"><a href="#base-html-파일-생성하기" class="headerlink" title="base.html 파일 생성하기"></a>base.html 파일 생성하기</h3><br>

<p>프로젝트 전반에 걸쳐서, 이 프레임워크를 적용시킬수 있는 base.html 파일을</p>
<p><br>templates/base.html 경로에 생성을 합니다<br><br></p>
<p>이 base.html 파일에, static 폴더에 있는 bulma css 파일들을 적용하고. <br>이 base.html 파일이 다른 페이지들에 확장되서 쓰여질겁니다.</p>
<br>

<p>templates/base.html 파일을 아래와 같이 생성하고 작성해줍니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span></span><br><span class="line"><span class="xml"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span> <span class="attr">class</span>=<span class="string">"has-navbar-fixed-top"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>To do List - </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'bulma/css/style.css' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span> </span></span><br><span class="line"></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> head %&#125;</span><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> contents %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<br>

<h3 id="todolist-템플릿을-수정"><a href="#todolist-템플릿을-수정" class="headerlink" title="todolist 템플릿을 수정"></a>todolist 템플릿을 수정</h3><p><br>이전 포스팅에 만들어 놓은 투두리스트 - 리스트페이지인 <br></p>
<p>todo/templates/todo/todo-lists.html 파일 상단에 아래와 같은 내용을 추가해주고, 수정해 줍니다<br><br></p>
<p>base.html 파일을 상속 받습니다.</p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> 'base.html' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="xml">내가 할일 뭐지?</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> content %&#125;</span></span><br><span class="line"><span class="xml">  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> todo <span class="keyword">in</span> to_do_list %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>할일 제목 : </span><span class="template-variable">&#123;&#123; todo.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>생성 날짜 : </span><span class="template-variable">&#123;&#123; todo.date_created &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>데드라인 날짜 : </span><span class="template-variable">&#123;&#123; todo.date_deadline &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span>남은 일수 : </span><span class="template-variable">&#123;&#123; todo.remaining_days &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> content %&#125;</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="Bulma-프레임워크-적용-확인"><a href="#Bulma-프레임워크-적용-확인" class="headerlink" title="Bulma 프레임워크 적용 확인"></a>Bulma 프레임워크 적용 확인</h2><br>

<p>투두리스트를 리스트 해주는 페이지에 다시 접속해서, </p>
<p><br>CSS 프레임워크가 잘 적용 되었을지 확인 해봅니다 <br><br></p>
<p>적용전, </p>
<br>

<img src="/2020/05/22/TodoList-7%ED%8E%B8-BULMA-CSS-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image4.png" class="">

<p><br><br></p>
<p>적용후, </p>
<br>

<img src="/2020/05/22/TodoList-7%ED%8E%B8-BULMA-CSS-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image5.png" class="">

<p><br><br></p>
<p>해당 이미지는, 기본 템플릿만 적용한 이미지이지만, <br>어쨋든, 글씨꼴이나 색깔이 느낌이 전반적으로 바뀌었다면, 잘 적용 된것입니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
        <tag>bulma</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 6편 - 리스트 페이지 만들기</title>
    <url>/2020/05/21/TodoList-6%ED%8E%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
    <content><![CDATA[<p>Todo 리스트가 출력될 화면을 만들어 볼겁니다. </p>
<p><br>현재까지는, 서버를 실행하고, 브라우저로 접속하면, 아래와 같은 화면이 뜹니다. </p>
<br>

<img src="/2020/05/21/TodoList-6%ED%8E%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/image1.png" class="">

<br>

<br>

<a id="more"></a>

<h2 id="Todo리스트를-화면에-출력해줄-View-작성하기"><a href="#Todo리스트를-화면에-출력해줄-View-작성하기" class="headerlink" title="Todo리스트를 화면에 출력해줄 View 작성하기"></a>Todo리스트를 화면에 출력해줄 View 작성하기</h2><br>

<p>현재 데이터베이스에는, Todo List 두개가 추가 되어 있습니다. (수동으로 생성해줌) </p>
<p><br>이것을 화면에 뿌려줄 페이지가 필요한데, 페이지에 화면을 출력해 주기 위해서는,</p>
<p><br>이를 처리하는 함수나 클래스가 필요합니다. </p>
<p><br>이 함수나 클래스들은, todo/views.py 파일에 작성 합니다. 이를 클래스뷰를 사용하여 진행해 봅니다. </p>
<p><br>todo/views.py 파일을 아래와 같이 작성해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> TodoList, TodoList_files, TodoList_images </span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic </span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></span><br><span class="line">    context_object_name = <span class="string">'to_do_list'</span></span><br><span class="line">    template_name = <span class="string">'todo/todo-lists.html'</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> TodoList.objects.all()</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="View-를-통해-그려줄-페이지-템플릿-생성"><a href="#View-를-통해-그려줄-페이지-템플릿-생성" class="headerlink" title="View 를 통해 그려줄 페이지 (템플릿) 생성"></a>View 를 통해 그려줄 페이지 (템플릿) 생성</h2><br>

<p>todo/templates/todo/ 폴더를 생성한 후에,</p>
<p><br>폴더 안에, todo-lists.html 파일을 생성하고, 아래와 같이 작성해 줍니다. </p>
<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> todo <span class="keyword">in</span> to_do_list %&#125;</span><span class="xml">   </span></span><br><span class="line"><span class="xml">    # to_do_list 는 클래스에서 지정된 객체 리스트, context_object_name 에 지정된 값 </span></span><br><span class="line"><span class="xml">    # 이 객체에는, 모든 TodoList 를 포함한, TodoList.objects.all() 을 포함 </span></span><br><span class="line"><span class="xml">    # def get_queryset(self) 를 통해서 객체를 포함함 </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>할일 제목 : </span><span class="template-variable">&#123;&#123; todo.name &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>생성 날짜 : </span><span class="template-variable">&#123;&#123; todo.date_created &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>데드라인 날짜 : </span><span class="template-variable">&#123;&#123; todo.date_deadline &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>남은 일수 : </span><span class="template-variable">&#123;&#123; todo.remaining_days &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="요청을-보낼-URL-설정"><a href="#요청을-보낼-URL-설정" class="headerlink" title="요청을 보낼 URL 설정"></a>요청을 보낼 URL 설정</h2><p><br><br></p>
<p>todo/urls.py 파일을 설정해 줍니다 </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin </span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path </span><br><span class="line"><span class="keyword">from</span> .views <span class="keyword">import</span> IndexView </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, IndexView.as_view(), name=<span class="string">'todolist'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<p>config/urls.py 파일에서, todo/urls.py 파일을 연결해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">'todo/'</span>, include(<span class="string">'todo.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="투두리스트-화면-확인하기"><a href="#투두리스트-화면-확인하기" class="headerlink" title="투두리스트 화면 확인하기"></a>투두리스트 화면 확인하기</h2><p><br><br></p>
<p>python manage.py runserver 를 실행하여, 서버를 시작한 후에, </p>
<p><a href="http://127.0.0.1:8000/todo/" target="_blank" rel="noopener">http://127.0.0.1:8000/todo/</a> 에 접속합니다. </p>
<br>

<p>view 에서 투두리스트를 작업하여, 화면에 그려주고 있다는것을 확인할수 있습니다<br><br></p>
<img src="/2020/05/21/TodoList-6%ED%8E%B8-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/image2.png" class="">

<br>]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 5편 - 어드민 수정하기</title>
    <url>/2020/05/20/TodoList-5%ED%8E%B8-%EC%96%B4%EB%93%9C%EB%AF%BC-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="Todo-List-어드민-수정하기"><a href="#Todo-List-어드민-수정하기" class="headerlink" title="Todo List 어드민 수정하기"></a>Todo List 어드민 수정하기</h2><br>

<p>지난 포스팅에서, 모델이 잘 작동하는것을 확인 해 보았습니다. </p>
<p><br>하지만, 어드민 페이지에서 todo  를 추가할때 뭔가 아쉬운점이 있습니다. </p>
<br>

<p>분명히, Todo 에는 연관된 이미지도 파일도 올라갈수 있어야 하는데. </p>
<p><br>어드민에 등록되어 잇는 Todo 는, 아주 기본적인 필드들만 가진 TodoList 를 생성할수 있습니다. </p>
<br>

<br>

<img src="/2020/05/20/TodoList-5%ED%8E%B8-%EC%96%B4%EB%93%9C%EB%AF%BC-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0/image1.png" class="">

<br>

<blockquote>
<p>TodoList 를 생성할때, </p>
<p>이미지와 파일도 추가할수 있게 어드민에 등록해 보겠습니다. </p>
</blockquote>
<br>

<a id="more"></a> 

<br>

<h2 id="todo-admin-py-파일-수정하기"><a href="#todo-admin-py-파일-수정하기" class="headerlink" title="todo/admin.py 파일 수정하기"></a>todo/admin.py 파일 수정하기</h2><br>

<br>

<p>inline 클래스들을 작성해주고, </p>
<p>TodoListAdmin 클래스의 inlines = [] 에 넣어주면 됩니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin </span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> TodoList, TodoList_files, TodoList_images </span><br><span class="line"><span class="comment"># Register your models here. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList_filesInline</span><span class="params">(admin.StackedInline)</span>:</span></span><br><span class="line">    model = TodoList_files </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList_imageInline</span><span class="params">(admin.StackedInline)</span>:</span></span><br><span class="line">    model = TodoList_images</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoListAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    inlines = [TodoList_filesInline, TodoList_imageInline]</span><br><span class="line">    list_display = (<span class="string">'name'</span>, <span class="string">'description'</span>, <span class="string">'date_created'</span>, <span class="string">'date_deadline'</span>, 	                       <span class="string">'remaining_days'</span>)</span><br><span class="line">    list_filter = [<span class="string">'date_created'</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">admin.site.register(TodoList, TodoListAdmin)</span><br></pre></td></tr></table></figure>

<br>

<p>어드민을 위와 같이 고쳐주면, 어드민에서 TodoList 의 표시가 마법처럼 바뀝니다. </p>
<br>

<img src="/2020/05/20/TodoList-5%ED%8E%B8-%EC%96%B4%EB%93%9C%EB%AF%BC-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0/image2.png" class="">

<p><br><br></p>
<blockquote>
<p>그리고, 추가할때 </p>
<p>파일과 이미지도 넣을수 있습니다. </p>
</blockquote>
<br>

<img src="/2020/05/20/TodoList-5%ED%8E%B8-%EC%96%B4%EB%93%9C%EB%AF%BC-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0/image3.png" class="">

<img src="/2020/05/20/TodoList-5%ED%8E%B8-%EC%96%B4%EB%93%9C%EB%AF%BC-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0/image4.png" class="">

<img src="/2020/05/20/TodoList-5%ED%8E%B8-%EC%96%B4%EB%93%9C%EB%AF%BC-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0/image5.png" class="">

<p><br><br></p>
<p>파일 하나, 이미지 하나를 추가한뒤에, 저장 버튼을 눌러줍니다. </p>
<p><br>파일과 이미지를 가지고 있는 투두리스트 생성에 성공 했습니다.<br><br></p>
<img src="/2020/05/20/TodoList-5%ED%8E%B8-%EC%96%B4%EB%93%9C%EB%AF%BC-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0/image6.png" class="">

<p><br><br></p>
<p>모델에서 파일이나, 이미지를 upload 할시에, 저장할 폴더를 생성해 주었기 때문에,<br><br>todo/images 폴더와, todo/files 폴더가 생성된것을 확인 할수 있습니다. <br><br></p>
<img src="/2020/05/20/TodoList-5%ED%8E%B8-%EC%96%B4%EB%93%9C%EB%AF%BC-%EC%88%98%EC%A0%95%ED%95%98%EA%B8%B0/image7.png" class=""><br><br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>


<p>admin.py 파일을 어떻게 수정해 주었는지 복습하고 넘어갑니다. </p>
<br>

<p>Inline 클래스들을 생성해주고 (model 을 지정함).<br><br></p>
<p>기존 TodoListAdmin(models.ModelAdmin) 클래스에서, inlines = [] 에 넣어줍니다. </p>
<p>list_display 에 모델에 있는 필드명들을 넣어주고, list_filter 는 생성날짜 기준으로 해주었습니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 4편 - 모델 확인하기</title>
    <url>/2020/05/19/TodoList-4%ED%8E%B8-%EB%AA%A8%EB%8D%B8-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="Todo-List-모델-확인하기"><a href="#Todo-List-모델-확인하기" class="headerlink" title="Todo List 모델 확인하기"></a>Todo List 모델 확인하기</h2><br>

<br>

<p>지난 포스팅에 작성했던 모델이 잘 작동하는지 확인을 해보아야 겠습니다. </p>
<br>

<p>어드민을 통해 확인을 진행 해보려 합니다. </p>
<p><br>어드민에 todo 앱을 등록해 주는데서 부터 시작해 봅니다. </p>
<br>

<h2 id="어드민-페이지에-todo-앱-등록하기"><a href="#어드민-페이지에-todo-앱-등록하기" class="headerlink" title="어드민 페이지에 todo 앱 등록하기"></a>어드민 페이지에 todo 앱 등록하기</h2><p><br><a id="more"></a></p>
<p>todo/admin.py 파일을 열고, 아래와 같이 어드민에, TodoList 모델을 등록해 줍니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin </span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> TodoList, TodoList_files, TodoLies_images </span><br><span class="line"><span class="comment"># Register your models here. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoListAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList_imagesAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList_filesAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">admin.site.register(TodoList, TodoListAdmin)</span><br><span class="line">admin.site.register(TodoList_images, TodoList_imagesAdmin)</span><br><span class="line">admin.site.register(TodoList_images, TodoList_filesAdmin)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="어드민-관리자-계정-생성하기"><a href="#어드민-관리자-계정-생성하기" class="headerlink" title="어드민 관리자 계정 생성하기"></a>어드민 관리자 계정 생성하기</h2><br>

<p>아래 명령어를 실행해서, 관리자 계정 하나를 생성합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure>

<br>

<p>계정 실행을 완료 하였으면, python manage.py runserver 를 실행하여, <br>서버를 실행한다음, 어드민 사이트로 접속 합니다.</p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a> 에 접속하여 로그인 하면,</p>
<p>아래와 같은 화면을 볼수 있을겁니다. </p>
<br>

<br>

<img src="/2020/05/19/TodoList-4%ED%8E%B8-%EB%AA%A8%EB%8D%B8-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/image1.png" class="">

<br>

<br>

<h2 id="Todo-List-하나-추가해-보기"><a href="#Todo-List-하나-추가해-보기" class="headerlink" title="Todo List 하나 추가해 보기"></a>Todo List 하나 추가해 보기</h2><br>

<p>Todo Lists 에 Add 버튼을 눌러서, todo list 하나를 추가해 보려 합니다. </p>
<p><br>아래와 같이, 디테일을 입력후, SAVE 버튼을 눌러봅니다.<br></p>
<br>

<img src="/2020/05/19/TodoList-4%ED%8E%B8-%EB%AA%A8%EB%8D%B8-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/image2.png" class="">

<br>

<p>아래와 같이 잘 생성이 됩니다 </p>
<p><br><br></p>
<img src="/2020/05/19/TodoList-4%ED%8E%B8-%EB%AA%A8%EB%8D%B8-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0/image3.png" class="">

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>아쉬운대로, 일단 모델의 기본 동작은 잘 되고 있는것 같습니다.<br></p>
<p>하지만, 프로젝트 진행중에, 모델을 다시 수정해 줘야 할일이 올지 몰릅니다. </p>
<br>]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 3편 - 모델설계하기</title>
    <url>/2020/05/18/TodoList-3%ED%8E%B8-%EB%AA%A8%EB%8D%B8%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="Todo-List-모델-설계하기"><a href="#Todo-List-모델-설계하기" class="headerlink" title="Todo List 모델 설계하기"></a>Todo List 모델 설계하기</h2><br>

<br>

<h3 id="INSTALLED-APPS-에-앱등록하기"><a href="#INSTALLED-APPS-에-앱등록하기" class="headerlink" title="INSTALLED_APPS 에 앱등록하기"></a>INSTALLED_APPS 에 앱등록하기</h3><br>

<p>config/settings.py 파일에 INSTALLED_APPS 안에, todo 앱을 등록해 줍니다. </p>
<br>

<img src="/2020/05/18/TodoList-3%ED%8E%B8-%EB%AA%A8%EB%8D%B8%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0/image1.png" class="">

<br>

<a id="more"></a>

<blockquote>
<p>settings.py 파일을 수정해주는 김에, </p>
<p>언어설정과, 타임존 세팅까지 해줍니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">LANGUAGE_CODE - <span class="string">'ko-kr'</span></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Seoul'</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<img src="/2020/05/18/TodoList-3%ED%8E%B8-%EB%AA%A8%EB%8D%B8%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0/image2.png" class="">

<br>

<br>

<h2 id="모델-계획하기"><a href="#모델-계획하기" class="headerlink" title="모델 계획하기"></a>모델 계획하기</h2><br>

<blockquote>
<p>내가 할일 이라는, Todo List 의 모델을 설계해 봅니다. </p>
<p>기본적으로, 아래와 같이 테이블로 정리된 사항들을 가지고 있었으면 좋겠습니다. </p>
</blockquote>
<br>

<table>
<thead>
<tr>
<th><strong>번호</strong></th>
<th><strong>필드명</strong></th>
<th><strong>설명</strong></th>
<th><strong>데이터타입</strong></th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>name</td>
<td>내가 할일에 대한 짧은 이름</td>
<td>문자</td>
</tr>
<tr>
<td>2</td>
<td>description</td>
<td>내가 할일에 대한 정보</td>
<td>긴 문자열</td>
</tr>
<tr>
<td>3</td>
<td>date_created</td>
<td>할일 생성 날짜</td>
<td>날짜</td>
</tr>
<tr>
<td>4</td>
<td>date_deadline</td>
<td>데드라인 날짜</td>
<td>날짜</td>
</tr>
<tr>
<td>5</td>
<td>images_related</td>
<td>관련된 이미지 (선택사항)</td>
<td>이미지</td>
</tr>
<tr>
<td>6</td>
<td>files_related</td>
<td>관련된 파일들 (선택사항)</td>
<td>파일</td>
</tr>
</tbody></table>
<br>

<br>

<p>하나의 TodoList 는, 관련된 images 와 files 필드들을 가지어, </p>
<p>할일에 대한 더 많은 세부정보를 첨부할수 있게 해주었습니다. 이를 모두 한 테이블에 넣기 보다는, </p>
<p><br> <br></p>
<p>아래와 같이,  3가지 테이블로 나누고, 필드들을 정리해보았습니다. </p>
<br>

<table>
<thead>
<tr>
<th><strong>TodoList</strong></th>
<th></th>
<th><strong>TodoList_images</strong></th>
<th></th>
<th><strong>TodoList_files</strong></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>필드명</td>
<td>데이터 타입</td>
<td>필드명</td>
<td>데이터 타입</td>
<td>필드명</td>
<td>데이터 타입</td>
</tr>
<tr>
<td>name</td>
<td>CharField</td>
<td>todo</td>
<td>ForeignKey</td>
<td>todo</td>
<td>ForeignKey</td>
</tr>
<tr>
<td>description</td>
<td>TextField</td>
<td>image</td>
<td>ImageField</td>
<td>file</td>
<td>FileField</td>
</tr>
<tr>
<td>date_created</td>
<td>DateField()</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>date_deadline</td>
<td>DateField()</td>
<td></td>
<td></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<br>

<br>

<blockquote>
<p>하나의 Todo 는 여러개의 이미지들을 가질수 있고, </p>
<p>하나의 Todo 는 여러개의 파일들을 가질수 있습니다. </p>
<p>두 테이블은 하나의 Todo 에 ForeignKey 로 연결 됩니다. </p>
</blockquote>
<br>

<br>

<h2 id="models-py-파일-작성하기"><a href="#models-py-파일-작성하기" class="headerlink" title="models.py 파일 작성하기"></a>models.py 파일 작성하기</h2><br>

<br>

<p>위에서 계획했던 모델링 대로, models.py 파일을 실제로 작성해 봅니다. </p>
<p><br>저는 아래와 같이 작성해 주었습니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">40</span>, verbose_name=<span class="string">"할일제목"</span>)</span><br><span class="line">    description = models.TextField(max_length=<span class="number">200</span>, verbose_name=<span class="string">"할일세부사항"</span>)</span><br><span class="line">    date_created = models.DateField(auto_now_add=<span class="literal">True</span>, verbose_name=<span class="string">"생성날짜"</span>)</span><br><span class="line">    date_deadline = models.DateField(verbose_name=<span class="string">"데드라인"</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remaining_days</span><span class="params">(self)</span>:</span></span><br><span class="line">        delta = self.date_deadline - date.today()</span><br><span class="line">        days = delta.days </span><br><span class="line">        <span class="keyword">return</span> days</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">f'<span class="subst">&#123;self.name&#125;</span> | <span class="subst">&#123;self.description&#125;</span> | <span class="subst">&#123;self.date_created&#125;</span> | 		  <span class="subst">&#123;self.date_deadline&#125;</span>'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList_images</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    todo = models.ForeignKey(TodoList, on_delete=models.CASCADE)</span><br><span class="line">    image = models.ImageField(upload_to=<span class="string">'todo/images/%Y/%m'</span>, blank=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList_files</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    todo = models.ForeignKey(TodoList, on_delete=models.CASCADE)</span><br><span class="line">    files = models.FileField(upload_to=<span class="string">'todo/files/%Y/%m'</span>, blank=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="Images-를-위한-패키지-Pillow-설치"><a href="#Images-를-위한-패키지-Pillow-설치" class="headerlink" title="Images 를 위한 패키지 Pillow 설치"></a>Images 를 위한 패키지 Pillow 설치</h2><p><br><br></p>
<p>모델을 다 작성한 다음, migrations 를 시도하면, 아래와 같은 오류 메시지가 뜹니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations</span><br><span class="line">SystemCheckError: System check identified some issues:</span><br><span class="line"></span><br><span class="line">ERRORS:</span><br><span class="line">todo.TodoList_images.image: (fields.E210) Cannot use ImageField because Pillow is not installed.</span><br><span class="line">        HINT: Get Pillow at https://pypi.org/project/Pillow/ or run <span class="built_in">command</span> <span class="string">"python -m pip install Pillow"</span>.</span><br></pre></td></tr></table></figure>

<br>

<p> 이 에러를 해결하기 위해서는, 이미지 파일을 위한 패키지인, pillow 를 설치해야만 합니다. </p>
<p><br>아래 명령어를 실행하여, 패키지를 설치해 줍니다.<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install Pillow</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>설치가 완료되었으면, makemigrations 와 migrate 를 실행하여, 데이터베이스를 생성해 줍니다. </p>
<br>

<h2 id="makemigrations-migrate-해주기"><a href="#makemigrations-migrate-해주기" class="headerlink" title="makemigrations, migrate 해주기"></a>makemigrations, migrate 해주기</h2><br>

<br>

<p>python manage.py makemigrations 를 실행, </p>
<br>

<img src="/2020/05/18/TodoList-3%ED%8E%B8-%EB%AA%A8%EB%8D%B8%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0/image3.png" class="">

<br>

<p>python manage.py migrate 를 실행, </p>
<br>

<img src="/2020/05/18/TodoList-3%ED%8E%B8-%EB%AA%A8%EB%8D%B8%EC%84%A4%EA%B3%84%ED%95%98%EA%B8%B0/image4.png" class="">]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 2편 - 프로젝트와 앱 생성하기</title>
    <url>/2020/05/15/TodoList-2%ED%8E%B8-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EC%99%80-%EC%95%B1-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="프로젝트-생성하기"><a href="#프로젝트-생성하기" class="headerlink" title="프로젝트 생성하기"></a>프로젝트 생성하기</h2><br>

<p>프로젝트 폴더에서, 아래 터미널 명령어를 실행하여, todo list 프로젝트 설정 폴더를 생성해 줍니다.  </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin startproject config .</span><br></pre></td></tr></table></figure>

<br>

<p>아래와 같은 구조가 나오면 됩니다.</p>
<br>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"> ~/mini_projects/todolist   master  django<span class="literal">-admin</span> startproject config .</span><br><span class="line">~/mini_projects/todolist   master  ls</span><br><span class="line">config  manage.py  requirements.txt</span><br><span class="line">~/mini_projects/todolist   master  tree</span><br><span class="line">.</span><br><span class="line">├── config</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── manage.py</span><br><span class="line">└── requirements.txt</span><br></pre></td></tr></table></figure>

<br>

<p>프로젝트 설정 폴더가 잘 생성되었으면, 앱을 생성해 줍니다. </p>
<br>

<h2 id="프로젝트-앱-생성하기"><a href="#프로젝트-앱-생성하기" class="headerlink" title="프로젝트 앱 생성하기"></a>프로젝트 앱 생성하기</h2><br>

<blockquote>
<p>todo 앱을 생성하여,</p>
<p>todo list 의 등록, 관리, 삭제를 수행하는 어플리케이션을 만들것입니다. </p>
</blockquote>
<br>

<p>아래 명령어를 실행하여, 프로젝트 폴더안에 todo 라는 앱을 만들어 줍시다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp todo</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>생성후의 디렉토리 구조는 아래와 같습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── config</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── manage.py</span><br><span class="line">├── requirements.txt</span><br><span class="line">└── todo</span><br><span class="line">    ├── admin.py</span><br><span class="line">    ├── apps.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── migrations</span><br><span class="line">    │   └── __init__.py</span><br><span class="line">    ├── models.py</span><br><span class="line">    ├── tests.py</span><br><span class="line">    └── views.py</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>프로젝트와 앱이 생성되었으니, </p>
<p>이제 개발을 위한 모든 준비가 완료 되었습니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>TodoList 1편 - 초기설정</title>
    <url>/2020/05/15/TodoList-1%ED%8E%B8-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h2 id="미니프로젝트-시작"><a href="#미니프로젝트-시작" class="headerlink" title="미니프로젝트 시작"></a>미니프로젝트 시작</h2><br>

<p>간단한 todolist 프로젝트를 진행하며, </p>
<p><br>이제까지 공부한 내용을 복습도 하고, 그동안 구현하지 못했던것들도 찾으면서 구현해 보려 합니다. </p>
<p><br>내가 할일을 생성하고, 업데이트하고, 삭제하는, Todolist 사이트를 만들어 봅니다. </p>
<br>

<h2 id="개발-개요"><a href="#개발-개요" class="headerlink" title="개발 개요"></a>개발 개요</h2><br>

<table>
<thead>
<tr>
<th><strong>개발 정보</strong></th>
<th><strong>디테일</strong></th>
</tr>
</thead>
<tbody><tr>
<td>python version</td>
<td>3.8.0</td>
</tr>
<tr>
<td>os</td>
<td>ubuntu18.04</td>
</tr>
<tr>
<td>django version</td>
<td>3.06</td>
</tr>
<tr>
<td>CSS Framework</td>
<td>Bulma</td>
</tr>
<tr>
<td>개발 툴</td>
<td>visual studio code</td>
</tr>
<tr>
<td>배포</td>
<td>AWS</td>
</tr>
<tr>
<td>데이터베이스</td>
<td>sqlite3 혹은 postgreSQL</td>
</tr>
</tbody></table>
<br>

<ul>
<li>개발내역은, 프로젝트의 진행 상황과 숙련도에 따라서 달라질수 있음. </li>
</ul>
<br>

<a id="more"></a> 

<br>

<br>

<h2 id="가상환경-세팅"><a href="#가상환경-세팅" class="headerlink" title="가상환경 세팅"></a>가상환경 세팅</h2><br>

<br>

<p>터미널에서 아래 명령어를 실행하여, 가상환경을 설정하고, 프로젝트 폴더에 적용해 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv virtualenv 3.8.0 to-do-list</span><br></pre></td></tr></table></figure>

<br>

<p>스크린샷, </p>
<br>

<img src="/2020/05/15/TodoList-1%ED%8E%B8-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/image1.png" class="">

<br>

<p>프로젝트 폴더앞에, (to-do-list) 라고 써지면, 잘 적용 된겁니다. </p>
<br>

<h2 id="VisualStudioCode-열기"><a href="#VisualStudioCode-열기" class="headerlink" title="VisualStudioCode 열기"></a>VisualStudioCode 열기</h2><br>

<p>프로젝트 폴더에 가상환경이 잘 적용 되었으면, </p>
<p>Visual Studio Code 로 해당 프로젝트 폴더를 열어줍니다. </p>
<br>

<img src="/2020/05/15/TodoList-1%ED%8E%B8-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/image2.png" class="">

<br>

<br>

<h3 id="가상환경에-장고-설치"><a href="#가상환경에-장고-설치" class="headerlink" title="가상환경에 장고 설치"></a>가상환경에 장고 설치</h3><br>

<br>

<p>가장 중요한 Django 를 설치해 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/05/15/TodoList-1%ED%8E%B8-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/image3.png" class="">





<br>

<br>

<blockquote>
<p>pip list 를 통하여, </p>
<p>현재 가상환경에 설치된 패키지를 확인해 봅니다. </p>
<p>Django 3.0.6 이 정상적으로 설치된것을 확인 할수 있습니다. </p>
</blockquote>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">asgiref    3.2.7  </span><br><span class="line">Django     3.0.6  </span><br><span class="line">pip        19.2.3 </span><br><span class="line">pytz       2020.1 </span><br><span class="line">setuptools 41.2.0 </span><br><span class="line">sqlparse   0.3.1  </span><br><span class="line">WARNING: You are using pip version 19.2.3, however version 20.1 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="가상환경의-패키지-목록"><a href="#가상환경의-패키지-목록" class="headerlink" title="가상환경의 패키지 목록"></a>가상환경의 패키지 목록</h2><p><br><br></p>
<blockquote>
<p>pip freeze &gt; requirements.txt 명령어를 실행하여, </p>
<p>해당 가상환경에 설치된 모든 패키지들을 리스트 해줍니다. </p>
</blockquote>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>이 프로젝트가 나중에 누군가와 공유된다면, </p>
<p>이 프로젝트를 사용하고 싶은 사람들은, 나중에 아래 명령어를 통해서 </p>
<p>프로젝트에 들어간 패키지들을 설치하고 사용합니다. </p>
</blockquote>
<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>기본적인 개발 환경 설정을 마쳤습니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>미니프로젝트</category>
      </categories>
      <tags>
        <tag>미니프로젝트</tag>
        <tag>todolist</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part 7 - 5편</title>
    <url>/2020/05/10/Writing-your-first-Django-app-part-7-5%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="admin-인덱스-페이지-꾸미기"><a href="#admin-인덱스-페이지-꾸미기" class="headerlink" title="admin 인덱스 페이지 꾸미기"></a>admin 인덱스 페이지 꾸미기</h2><br>

<p>이전 포스팅과 비슷하게, Django 의 admin 인덱스 페이지를 고치고 싶어질지 모릅니다.</p>
<br>

<p>기본값으로, 인덱스 페이지에는, admin 어플리케이션과 함께 </p>
<p><br>INSTALLED_APPS 에 등록된 모든 앱들을 출력합니다. </p>
<p><br>레이아웃에 큰 변화를 주고 싶어질지도 모릅니다. 인덱스 페이지는 아마 가장 중요한 어드민 페이지중에 하나일것이고, </p>
<p><br>사용하기 쉬어야 합니다. </p>
<br>

<blockquote>
<p>수정해야할 템플릿은, admin/index.html 입니다.</p>
<p>admin/base_site.html 파일과 같은 방식으로, </p>
<p>프로젝트 폴더내에, templates/admin 으로 복사해 옵니다. </p>
</blockquote>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> dhkang  ~/.pyenv/versions/3.7.4/envs/django-tutorial/lib/python3.7/site-packages/django/contrib/admin/templates/admin   master  </span><br><span class="line">cp index.html ~/django_tutorial/mysite/templates/admin</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>이 파일을 수정하면, app_list 라는 템플릿 변수를 사용하는것을 볼수 있습니다.</p>
<p><br>이 변수는 설치된 모든 Django app 을 포함하고 있습니다. 이것을 사용하기 보다는, 객체 특화된 어드민 페이지를 하드코드된 링크들을 사용해서 어드민 페이지를 꾸밀수 있습니다. </p>
<br>

<br>

<h2 id="What’s-next"><a href="#What’s-next" class="headerlink" title="What’s next?"></a>What’s next?</h2><br>

<br>

<p>초심자를 위한 튜토리얼은 여기서 끝입니다.</p>
<br>

<p>python 패키지와 어떻게 이 polls 앱을 재사용 가능한 앱으로 만들지에 대해서 배우고 싶다면, </p>
<p><br>심화과정 튜토리얼 : 재사용가능한 앱 만들기를 보시면 됩니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>첫번째 Django 앱 만들기 기본 튜토리얼이 끝났습니다. </p>
<p>첫번째 튜토리얼인데도 아직도 이해가 안가는 부분이 많습니다. </p>
<br>

<p>다시 한번 또 리뷰하면서 보면, 더 이해가 많아지겠죠;;; 당분간 reusable app 만들기는 건들지 않고. <br></p>
<p>실력이 더 쌓이면 건들 생각입니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>admin</tag>
        <tag>튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part 7 - 4편</title>
    <url>/2020/05/09/Writing-your-first-Django-app-part-7-4%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="admin-모양과-느낌-꾸미기"><a href="#admin-모양과-느낌-꾸미기" class="headerlink" title="admin 모양과 느낌 꾸미기"></a>admin 모양과 느낌 꾸미기</h2><br>

<p>확실히 django administration 을 어디믄 페이지 상단에 가지는것은 좋아보이지 않습니다.</p>
<p><br>그저 따분한 타이틀 텍스트 같아 보여서 더더욱이 안좋아 보이고, 지루해 보입니다.</p>
<br>

<br>

<p>Django 의 템플릿 시스템을 사용하여 바꿀수 있습니다. </p>
<p><br>Django admin 은 Django 에 의해서 동작하고, 어드민 인터페이스는 Django 의 자체 템플릿 시스템을 사용합니다.<br><br></p>
<a id="more"></a>

<br>

<h2 id="프로젝트의-templates-꾸미기"><a href="#프로젝트의-templates-꾸미기" class="headerlink" title="프로젝트의 templates 꾸미기"></a>프로젝트의 templates 꾸미기</h2><p><br><br></p>
<p>프로젝트 폴더내에 templates 라는 폴더를 생성합니다 (manage.py 파일과 같은 위치에 생성합니다) </p>
<br>

<p>templates 폴더는 Django 가 접근할수 있는 파일 시스템 어디에 위치해 있어도 상관없습니다. </p>
<p><br>하지만,  project 폴더 내에 templates 폴더를 갖게 하는것은 관례적으로 따라하기 좋습니다. </p>
<br>

<br>

<blockquote>
<p>mysite/settings.py 파일을 열고, </p>
<p>TEMPLATES 세팅에 DIR 옵션을 추가해 줍니다. </p>
</blockquote>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">TEMPLATES = [</span></span><br><span class="line"><span class="xml">    &#123;</span></span><br><span class="line"><span class="xml">        'BACKEND': 'django.template.backends.django.DjangoTemplates',</span></span><br><span class="line"><span class="xml">        'DIRS': [os.path.join(BASE_DIR, 'templates')],</span></span><br><span class="line"><span class="xml">        'APP_DIRS': True,</span></span><br><span class="line"><span class="xml">        'OPTIONS': &#123;</span></span><br><span class="line"><span class="xml">            'context_processors': [</span></span><br><span class="line"><span class="xml">                'django.template.context_processors.debug',</span></span><br><span class="line"><span class="xml">                'django.template.context_processors.request',</span></span><br><span class="line"><span class="xml">                'django.contrib.auth.context_processors.auth',</span></span><br><span class="line"><span class="xml">                'django.contrib.messages.context_processors.messages',</span></span><br><span class="line"><span class="xml">            ],</span></span><br><span class="line"><span class="xml">        &#125;,</span></span><br><span class="line"><span class="xml">    &#125;,</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>DIRS 는 파일시스템 폴더들을 가진 리스트입니다. </p>
<p>Django 가 templates 를 읽을때 확인 합니다. </p>
</blockquote>
<br>

<br>

<blockquote>
<p>템플릿 정리하기 </p>
<p>static files 들과 비슷하게, </p>
<p>우리는 모든 템플릿들을 하나의 큰 템플릿 폴더안에 넣어둘수 있고, 완벽하게 작동할것입니다. </p>
<p>하지만, 특정 어플리케이션을 따르는 템플릿들은 </p>
<p>프로젝트의 tempaltes 폴더안에 넣기보다는 어플리케이션의 templates 폴더에 넣습니다. </p>
<p>(예, polls/templates)</p>
<p>resuable app 튜토리얼에서 이것에 대해 더 얘기해볼겁니다 </p>
</blockquote>
<br>

<br>

<p>생성된 templates 폴더 안에, admin 폴더를 생성합니다. <br>그리고, django/contrib/admin/templates 에서 admin/base_site.html 을 복사해서 붙여놓습니다. </p>
<p><br>아래 커맨드를 실행해서, django 소스 파일들이 어디있는지 찾아냅니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ python -c <span class="string">"import django; print(django.__path__)"</span></span><br><span class="line">(django-tutorial)  dhkang  ~/django_tutorial/mysite   master  python -c <span class="string">"import django; print(django.__path__)"</span></span><br><span class="line">[<span class="string">'/home/dhkang/.pyenv/versions/3.7.4/envs/django-tutorial/lib/python3.7/site-packages/django'</span>]</span><br><span class="line">​</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>해당 경로로 들어가서, base_site.html 파일을 cp 커멘드를 입력하여, mysite/templates 폴더 안에 카피해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> dhkang  ~/.pyenv/versions/3.7.4/envs/django-tutorial/lib/python3.7/site-packages/django/contrib/admin/templates/admin   master  </span><br><span class="line">cp base_site.html ~/django_tutorial/mysite/templates/</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="admin-base-site-html-수정하기"><a href="#admin-base-site-html-수정하기" class="headerlink" title="admin base_site.html 수정하기"></a>admin base_site.html 수정하기</h2><br>

<blockquote>
<p>mysite/templates/admin/base_site.html </p>
<p>파일을, 아래와 같이 수정해 줍니다. </p>
</blockquote>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">extends</span></span> "admin/base.html" %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> title %&#125;</span><span class="template-variable">&#123;&#123; title &#125;&#125;</span><span class="xml"> | </span><span class="template-variable">&#123;&#123; site_title|<span class="name">default</span>:_('Django site admin') &#125;&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> branding %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"site-name"</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'admin:index' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Polls Administration<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> nav-global %&#125;</span><span class="template-tag">&#123;% <span class="name"><span class="name">endblock</span></span> %&#125;</span></span><br></pre></td></tr></table></figure>



<br>

<p>이 방식을 사용해서 어떻게 템플릿들을 덮어쓸수 있는지 가르쳐줍니다. 실제 프로젝트에서는, django.contrib.admin.AdminSite.site_header 속성을 사용해서 이런 특수한 꾸미기를 더 쉽게 만들수 있습니다. </p>
<p><br><br></p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">block</span></span> branding %&#125;</span><span class="xml"> 이나 </span><span class="template-variable">&#123;&#123; title &#125;&#125;</span><span class="xml"> 같은 템플릿 테그들이 이 템플릿 </span></span><br><span class="line"><span class="template-tag">&#123;% %&#125;</span><span class="xml"> 나 </span><span class="template-variable">&#123;&#123; &#125;&#125;</span><span class="xml"> 태그들은 django 언어들입니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml">Django admin/base_site.html 파일을 그릴때, </span></span><br><span class="line"><span class="xml">이 템플릿 언어들이 검토되어 마지막 HTML 페이지를 그려냅니다.</span></span><br><span class="line"></span><br><span class="line"><span class="xml">튜토리얼 part3 에서 이미 확인한 바 있습니다.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>Django 의 기본 어드민 템플릿 어떤것이든 덮어써서 사용할수 있습니다. </p>
<p><br>템플릿을 덮어쓸때에는, base_html 을 덮어쓴 방식과 같은 일을 수행하면 됩니다. <br></p>
<br>

<blockquote>
<p>admin 에 들어가서, </p>
<p>템플릿이 잘 수정되었는지 확인 합니다. </p>
<p>Polls Administration 이라고 어드민 페이지 상단에 잘 표시되는걸 확인할수 있습니다. </p>
</blockquote>
<br>

<img src="/2020/05/09/Writing-your-first-Django-app-part-7-4%ED%8E%B8/image1.png" class="">

<br>

<h2 id="어플리케이션의-템플릿-꾸미기"><a href="#어플리케이션의-템플릿-꾸미기" class="headerlink" title="어플리케이션의 템플릿 꾸미기"></a>어플리케이션의 템플릿 꾸미기</h2><br>

<p>눈치빠른 독자들은, 물어볼것입니다. <br></p>
<p>만약, DIRS 가 기본값으로 비어 있으면, Django 는 어떻게 기본 admin templates 를 찾았을까요? </p>
<p><br>정답은, APP_DIRS 가 True 로 설정 되어 있었기 때문입니다. </p>
<p><br>Django 는 자동으로 각 어플리케이션 안에 있는 templates/ 서브 디렉토리를 찾고 폴백으로 사용합니다. <br></p>
<p>(django.contrib.admin 도 하나의 어플리케이션이란것을 잊지 않습니다) </p>
<br>

<p>poll 어플리케이션은 너무 복잡하지 않고, 사용자 정의 admin 템플릿들을 필요로 하지 않습니다. <br>하지만, 만약 앱이 더 복잡하게 자라나고 Django 의 기본 어드민 템플릿들을 어떤 기능들을 위해서 수정이 필요할때는,<br> 어플리케이션들의 템플릿들을 고쳐주는것이 프로젝트의 템플릿을 고쳐주는것보다 나을것입니다. </p>
<br>

<br>

<p>이 방식으로, polls application 을 새로운 프로젝트에 포함시킬수 있고, 사용자 정의 템플릿을 필요에 따라 찾을것입니다. </p>
<p><br><br></p>
<p>Django 가 어떻게 템플릿들을 찾는지에 대해서는, template loading documentation 문서를 참조합니다.  </p>
<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>Django 어드민 페이지의 템플릿을 수정해 보았습니다. <br></p>
<p>어드민 템플릿에서 기존 템플릿 파일을 프로젝트내에 templates/admin 폴더에 복사해서 붙여놓고. <br></p>
<p>파일을 수정하면 됩니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>admin</tag>
        <tag>튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part 7 - 3편</title>
    <url>/2020/05/08/Writing-your-first-Django-app-part-7-3%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="어드민-변경메뉴-목록-꾸미기"><a href="#어드민-변경메뉴-목록-꾸미기" class="headerlink" title="어드민 변경메뉴 목록 꾸미기"></a>어드민 변경메뉴 목록 꾸미기</h2><br>

<p>현재 Question 어드민 페이지는 좋아 보입니다. </p>
<p><br>change list 페이지를 변경해 보도록 합시다. change list 페이지는 시스템에 있는 모든 질문들을 출력합니다.</p>
<br>

<br>

<img src="/2020/05/08/Writing-your-first-Django-app-part-7-3%ED%8E%B8/image1.png" class="">

<br>

<p>기본값으로, Django 는 각 객체의 str() 을 출력해 줍니다. </p>
<br>

<a id="more"></a><br>하지만, 때때로, 각각의 fields 를 출력하는게 더 도움될때가 있습니다. <br>어드민 옵션으로, list_display 를 사용해서 display 를 바꿔줄수 있습니다. 

<br>

<br>

<h2 id="list-display-어드민-옵션"><a href="#list-display-어드민-옵션" class="headerlink" title="list_display 어드민 옵션"></a>list_display 어드민 옵션</h2><br>

<br>

<blockquote>
<p>list_display 어드민 옵션은, </p>
<p>field 명들을 가진 튜플로 이루어져 있습니다. </p>
<p>polls/admin.py 파일을 열어서, list_display 를 써보도록 합시다. </p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    list_display = (<span class="string">'question_text'</span>, <span class="string">'pub_date'</span>)</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/05/08/Writing-your-first-Django-app-part-7-3%ED%8E%B8/image2.png" class="">

<br>

<blockquote>
<p>was_published_recently() 메서드도, </p>
<p>list_display 안에 추가해 봅니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    list_display = (<span class="string">'question_text'</span>. <span class="string">'pub_date'</span>, <span class="string">'was_published_recently'</span>)</span><br></pre></td></tr></table></figure>

<br>

<p>list_display 튜플안에 있는 필드대로, 테이블이 생성되고, 데이터가 출력 되는것을 확인 할수 있습니다. </p>
<br>

<img src="/2020/05/08/Writing-your-first-Django-app-part-7-3%ED%8E%B8/image3.png" class="">

<br>

<p>컬럼의 헤더를 클릭하면, 값을 기반으로 정렬이 가능합니다. </p>
<p><br>was_published_recently 헤더는 예외입니다, arbitrary method 를 정렬하는것은 지원하지 않기 때문입니다. <br></p>
<blockquote>
<p>polls/models.py 파일을 개선 시킬수 있습니다. </p>
<p>몇가지 속성들을 추가해 줍니다. </p>
</blockquote>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></span><br><span class="line">        now = timezone.now()</span><br><span class="line">        <span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</span><br><span class="line">    was_published_recently.admin_order_field = <span class="string">'pub_date'</span></span><br><span class="line">    was_published_recently.boolean = <span class="literal">True</span> </span><br><span class="line">    was_published_recently.short_description = <span class="string">'Published recently?'</span></span><br></pre></td></tr></table></figure>

<br>

<p>이 메서드 속성들에 대해서 더 알고 싶으면, list_display 문서를 참조 하면 됩니다. </p>
<br>

<h2 id="list-filter-옵션"><a href="#list-filter-옵션" class="headerlink" title="list_filter 옵션"></a>list_filter 옵션</h2><br>

<blockquote>
<p>polls/admin.py 파일을 다시 열고, </p>
<p>Question 의 변경 리스트 페이지의 개선사항을 추가합니다. </p>
<p>list_filter 를 사용해서, QuestionAdmin 에 추가해줍니다. </p>
</blockquote>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="string">'질문들'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'question_text'</span>]&#125;),</span><br><span class="line">        (<span class="string">'날짜정보'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'pub_date'</span>], <span class="string">'classes'</span>: [<span class="string">'collapse'</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line">    inlines = [ChoiceInline]</span><br><span class="line">    list_display = (<span class="string">'question_text'</span>, <span class="string">'pub_date'</span>, <span class="string">'was_published_recently'</span>)</span><br><span class="line">    list_filter = [<span class="string">'pub_date'</span>]</span><br></pre></td></tr></table></figure>

<br>

<p>어드민에서 Filter 사이드바를 추가해주어서, 사람들이 pub_date 로 필터를 할수 있게 해줍니다. </p>
<br>

<img src="/2020/05/08/Writing-your-first-Django-app-part-7-3%ED%8E%B8/image4.png" class="">

<br>

<p>출력된 필터 타입은, 필터를 하고 싶은 필드의 타입을 따라갑니다. </p>
<p><br>pub_date 는 DateTimeField 이기 때문에,<br>Django 에서는, filter option 으로, <br> “Any date”, “Today”, “Past 7 days”, “This month”, “This Year” 라고 적절하게 옵션을 써줍니다. <br><br></p>
<br>



<h2 id="검색기능-추가"><a href="#검색기능-추가" class="headerlink" title="검색기능 추가"></a>검색기능 추가</h2><p><br>모양새가 좋아졌습니다. 검색 기능도 가능하게 추가해 보겠습니다. </p>
<br>

<blockquote>
<p>polls/admin.py 파일을 열고, </p>
<p>아래 내용을 QuestionAdmin 클래스에 추가해 줍니다. </p>
<p>search_fields = [‘quesiton_text’]</p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="string">'질문들'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'question_text'</span>]&#125;),</span><br><span class="line">        (<span class="string">'날짜정보'</span>, &#123;<span class="string">'fiedls'</span>: [<span class="string">'pub_date'</span>], <span class="string">'classes'</span>: [<span class="string">'collapse'</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line">    inlines = [ChoiceInline]</span><br><span class="line">    list_display = (<span class="string">'quesiton_text'</span>, <span class="string">'pub_date'</span>, <span class="string">'was_published_recently'</span>)</span><br><span class="line">    list_filter = [<span class="string">'pub_date'</span>]</span><br><span class="line">    search_fields = [<span class="string">'question_text'</span>]</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>화면에 검색바가 하나 추가되는것을 확인 할수 있습니다. </p>
<br>

<img src="/2020/05/08/Writing-your-first-Django-app-part-7-3%ED%8E%B8/image5.png" class="">

<br>

<p>검색 바에 내용을 입력하면, Django 는 question_text 필드를 조회할것 입니다. <br><br></p>
<p>사용하고 싶은 필드들을 입력할수 있습니다. <br>다만, 서치바 뒤에서 작업되는 방식은 LIKE 쿼리문이 동작하는 것과 동일한 방식으로 사용됩니다. <br>사용 가능한 필드 숫자를 제한하여 데이터베이스가 조회 작업을 하기 편하게 해줘야 합니다. </p>
<p><br><br></p>
<p>Change List, 즉 변경 리스트는 pagination 을 제공합니다.<br> 기본값은 100개의 아이템을 한페이지에 출력 하는것입니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>어드민 파일 클래스에, 아래 내용들을 추가하면, </p>
<p>디스플레이가 바뀐다는것을 복습하고 넘어갑니다. </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">list_display = (<span class="string">'question_text'</span>, <span class="string">'pub_date'</span>, <span class="string">'was_published_recently'</span>)</span><br><span class="line">list_filter = [<span class="string">'pub_date'</span>]</span><br><span class="line">search_fields = [<span class="string">'question_text'</span>]</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>admin</tag>
        <tag>튜토리얼</tag>
        <tag>list_display</tag>
        <tag>list_filter</tag>
        <tag>search_fields</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part 7 - 2편</title>
    <url>/2020/05/07/Writing-your-first-Django-app-part-7-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="관련된-객체-추가하기"><a href="#관련된-객체-추가하기" class="headerlink" title="관련된 객체 추가하기"></a>관련된 객체 추가하기</h2><br>

<br>

<p>Question 은 admin 페이지에 등록이 되었습니다.</p>
<p>하지만, Question 은 다수의 Choices 들을 가지고 있고, 이것은 어드민 페이지에 아직 표시가 되지 않습니다. </p>
<br>

<br>

<p>아직은요,..</p>
<br>

<br>

<blockquote>
<p>Question 이 가진 Choices 들을 어드민에 표시하기 위해서는 2가지 해결 방법이 존재합니다. </p>
</blockquote>
<br>

<a id="more"></a>

<br>

<br>

<h2 id="1-polls-admin-py에-Choice-등록"><a href="#1-polls-admin-py에-Choice-등록" class="headerlink" title="1. polls/admin.py에 Choice 등록"></a>1. polls/admin.py에 Choice 등록</h2><br>

<br>

<p>Choice 모델을 가져오고, admin.site.register(Choice)를 사용하여, </p>
<p><br>어드민에 등록해줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question, Choice </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="string">'질문내용'</span>,		&#123;<span class="string">'fields'</span>: [<span class="string">'question_text'</span>]&#125;),</span><br><span class="line">        (<span class="string">'Date information'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'pub_date'</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line">    </span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br><span class="line">admin.site.register(Choice)</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/05/07/Writing-your-first-Django-app-part-7-2%ED%8E%B8/image1.png" class="">

<p><br><br></p>
<img src="/2020/05/07/Writing-your-first-Django-app-part-7-2%ED%8E%B8/image2.png" class="">

<p><br><br></p>
<img src="/2020/05/07/Writing-your-first-Django-app-part-7-2%ED%8E%B8/image3.png" class="">

<p><br><br></p>
<p>Django 어드민에서, Choice 가 사용 가능합니다. “Add choice” 양식은 위와 같이 보입니다. </p>
<p><br><br></p>
<blockquote>
<p>해당 양식에서, </p>
<p>Question 필드는 선택 박스로 데이베이스에 있는 모든 질문들을 가지고 있습니다. </p>
<p>DJango 는 ForeignKey 로 등록된것을 <code>&lt;select&gt;</code> 박스 안에 넣어둡니다. </p>
</blockquote>
<p><br><br></p>
<p>또한, Question 옆에 “Add Another” 링크는, 모든 ForeignKey 의 관계를 가진 객체는 이 버튼을 그냥 가지게 됩니다. “Add Another” 를 클릭하면, <br>“Add quesiton” 폼을 가진 팝업이 뜹니다. 이 팝업 윈도우에서 “Save” 버튼을 누르면, <br>Django 는 question을 동적으로 데이터베이스 저장합니다. </p>
<p>하지만, 이것은 Choice 객체를 추가하는데 있어서 효율적인 방법이 아닙니다.<br> 아마도, Question 객체를 생성할때 몇개의 Choices 들을 추가해주는것이 더욱 효율적인 방법일것 입니다. 한번 해봅시다. </p>
<p><br><br></p>
<h2 id="Question-등록-코드-수정"><a href="#Question-등록-코드-수정" class="headerlink" title="Question 등록 코드 수정"></a>Question 등록 코드 수정</h2><br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoiceInline</span><span class="params">(admin.StackedInline)</span>:</span></span><br><span class="line">    model = Choice</span><br><span class="line">    extra = <span class="number">3</span> </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="literal">None</span>,		&#123;<span class="string">'fields'</span>: [<span class="string">'question_text'</span>]&#125;),</span><br><span class="line">        (<span class="string">'Date information'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'pub_date'</span>], <span class="string">'classes'</span>: [<span class="string">'collapse'</span>]&#125;),</span><br><span class="line">    ]</span><br><span class="line">    inlines = [ChoiceInline]</span><br><span class="line">    </span><br><span class="line">admin.site.register(Question, QuestionAdmin)</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>Choice 객체가 Question 어드민 페이지에서도 수정될수 있게 만들었습니다. </p>
<p><br>기본값으로, 3개의 선택을 넣을수 있는 충분한 필드 공간들을 제공합니다, extra 로 명시된 필드 수입니다. </p>
<p><br><br></p>
<p>3개 이상의 Choice 도 등록할수 있습니다, “Add Another Choice” 버튼을 누르면, 3개 이상도 등록 가능합니다. </p>
<br>

<br>

<img src="/2020/05/07/Writing-your-first-Django-app-part-7-2%ED%8E%B8/image4.png" class="">

<p><br><br></p>
<h2 id="TabularInline"><a href="#TabularInline" class="headerlink" title="TabularInline"></a>TabularInline</h2><br>

<blockquote>
<p>허나, 작은 문제점은, 화면에 자리를 너무 많이 차지한다는 점입니다. </p>
<p>이런 이유로, Django 는 Tabular 방식으로, </p>
<p>관련 객체를 inline 형식으로 출력할수 있습니다. </p>
<p>polls/admin.py 에서 ChoiceInline 이 TabularInline 을 상속받도록 수정합니다. </p>
</blockquote>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChoiceInline</span><span class="params">(admin.TabularInline)</span>:</span></span><br><span class="line">    model = Choice</span><br><span class="line">    extra = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>ChoiceInline 클래스가 StackedInline 대신에, TabularInline 을 상속 받음으로써, </p>
<p><br>조금 더 간소화된 테이블 기반 포맷으로 바뀌어 어드민에 출력됩니다.<br><br></p>
<img src="/2020/05/07/Writing-your-first-Django-app-part-7-2%ED%8E%B8/image5.png" class="">



<p><br><br></p>
<p>추가로, Delete 컬럼이 생기고, <br></p>
<p>Add Another Choice 를 사용해서 추가된 이미 저장된 자료들을 지울수 있습니다. </p>
<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>어드민에 객체를 등록할때 클래스 형태로 StackedInline 과 TabularInline 을 사용해 보았습니다.<br></p>
<p>아무리 봐도 다시 봐도 잘외워지지가 않습니다;;; 나중에 프로젝트 진행할때 다시 한번 써봐야 할것 같습니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>admin</tag>
        <tag>튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part 7 - 1편</title>
    <url>/2020/05/07/Writing-your-first-Django-app-part-7-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="Admin-form-고치기"><a href="#Admin-form-고치기" class="headerlink" title="Admin form 고치기"></a>Admin form 고치기</h2><br>

<p>Question 모델을 admin.site.register(Question) 을 사용해서 polls/admin.py 에 등록을 하면, </p>
<p><br>Django 는 기본 어드민 표시 양식을 만들수 있었습니다.  그러나, 때때로 우리는 관리자 양식이 조금 다르게 보이고 작동하길 원합니다.<br></p>
<br>

<p>관리자 페이지가 조금 다른 모습과 조금 다른 동작을 원한다면, </p>
<p><br>Django 에 객체를 등록할때, 이 옵션에 대해서 얘기해 주어야 합니다. </p>
<a id="more"></a>

<br>

<br>

<blockquote>
<p>polls/admin.py 파일에 </p>
<p>class QuestionAdmin 코드를 추가해 주고, </p>
<p>코드 순서를 아래와 같이 바꾸어 줍니다. </p>
</blockquote>
<br>

<br>

<h2 id="fields-사용하기"><a href="#fields-사용하기" class="headerlink" title="fields 사용하기"></a>fields 사용하기</h2><br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">from django.contrib import admin </span></span><br><span class="line"><span class="xml">from .models import Question </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">class QuestionAdmin(admin.ModelAdmin):</span></span><br><span class="line"><span class="xml">    fields = ['pub_date', 'question_text']</span></span><br><span class="line"></span><br><span class="line"><span class="xml">admin.site.register(Question, QuestionAdmin)</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>새로 등록된 QuestionAdmin 클래스를, admin.site.register 의 두번째 인자로 넣어줍니다.</p>
<p><br>이 특정 변경 사항은, Publication date” 가 “Question” 필드 전에 나오게 만듭니다. </p>
<br>

<br>

<img src="/2020/05/07/Writing-your-first-Django-app-part-7-1%ED%8E%B8/image1.png" class=""> 

<br>

<p>두개의 필드밖에 없는 앱이라서 별로 특별해 보이지 않을지 모르지만, </p>
<p><br>필드가 많은때에는, 사용성 측면에서 직관적인 순서가 중요할수 있습니다.</p>
<br>

<br>

<h2 id="fieldsets-사용하기"><a href="#fieldsets-사용하기" class="headerlink" title="fieldsets 사용하기"></a>fieldsets 사용하기</h2><br>

<br>

<blockquote>
<p>polls/admin.py 파일에서, </p>
<p>fieldsets 를 사용해서, form 을 나눕니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionAdmin</span><span class="params">(admin.ModelAdmin)</span>:</span></span><br><span class="line">    fieldsets = [</span><br><span class="line">        (<span class="string">'질문내용'</span>, 		&#123;<span class="string">'fields'</span>: [<span class="string">'question_text'</span>]&#125;),</span><br><span class="line">        (<span class="string">'Date information'</span>, &#123;<span class="string">'fields'</span>: [<span class="string">'pub_date'</span>]&#125;),</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure>

<br>

<p>fieldsets 안에 있는 각 튜플들의 첫번째 요소들은 fieldset 의 제목들입니다. </p>
<p><br>polls/admin.py 파일을 위와 같이 고쳐놓고, <br>서버를 실행한다음, 어드민에 접속하면, 아래와 같은 화면을 볼수 있습니다.<br><br></p>
<img src="/2020/05/07/Writing-your-first-Django-app-part-7-1%ED%8E%B8/image2.png" class="">

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>간단하게 admin 을 커스터마이즈 해보았습니다. </p>
<p>다음 포스팅에서는, 관계된 객체를 어드민에 추가하는것에 대해 둘러봅니다. </p>
<br>

]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>admin</tag>
        <tag>튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part 6 - 2편</title>
    <url>/2020/05/06/Writing-your-first-Django-app-part-6-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="Background-image-추가하기"><a href="#Background-image-추가하기" class="headerlink" title="Background-image 추가하기"></a>Background-image 추가하기</h2><br>

<p>다음은, 배경 이미지를 추가해 보는것입니다. </p>
<p><br>polls/static/polls/ 폴더 아래에 서브 폴더로 images 라는 폴더를 생성합니다. </p>
<br>

<p>이 폴더 안에 background.jpg 라는 이미지를 저장 했습니다. </p>
<br>

<blockquote>
<p>polls/static/polls/background.jpg 를 저장 하였으면, </p>
<p>polls/static/polls/style.css 에 아래 내용을 추가해서, 배경 이미지가 나오게 합니다. </p>
</blockquote>
<br>

<a id="more"></a>

<br>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: white <span class="built_in">url</span>(<span class="string">"images/background.jpg"</span>) no-repeat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>위 내용대로, 파일을 잘 정리해 두었으면, </p>
<p>브라우저에서 <a href="http://localhost:8000/polls/" target="_blank" rel="noopener">http://localhost:8000/polls/</a> 로 접속해서 확인해 봅니다. </p>
</blockquote>
<br>

<img src="/2020/05/06/Writing-your-first-Django-app-part-6-2%ED%8E%B8/image1.png" class="">

<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">경고사항! </span></span><br><span class="line"><span class="xml">Django 에서 생성된 페이지가 아니라면, </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> %&#125;</span><span class="xml"> 이라는 템플릿 테그를 사용할수 없습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml">그리고, 항상 정적파일들을 연결할때에는, 상대 경로로 지정해 주어야 합니다.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>이것은 아주 기본적인 것만 다룬것이고, 프레임워크에 포함된 세부 사항들은, </p>
<p><br>the static files howto 그리고 the staticfiles reference, Deploying static files 문서들을 참고하여,</p>
<p><br>실제 정적 파일들을 사용하는 법을 알수 있습니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>정적파일들과 친숙해졌으면, 튜토리얼의 Part 7 으로 넘어갑니다.</p>
<p><br>Part 7 에서는, Django 에서 자동으로 생성되는 관리자 사이트를 맞춤화 하는것에 대해 배웁니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>튜토리얼</tag>
        <tag>정적파일</tag>
        <tag>staticfiles</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part 6 - 1편</title>
    <url>/2020/05/06/Writing-your-first-Django-app-part-6-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="Django에서-정적-파일-사용하기"><a href="#Django에서-정적-파일-사용하기" class="headerlink" title="Django에서 정적 파일 사용하기"></a>Django에서 정적 파일 사용하기</h2><br>

<p>이번 튜토리얼은 part 5 에서 이어서 진행 합니다. </p>
<p><br>Web-poll 어플리케이션을 만들었고, 이제 stylesheet 과  이미지들을 추가해야 할때입니다. </p>
<br>

<br>

<blockquote>
<p>서버에서 생성되는 HTML 파일 외에 </p>
<p>웹 어플리케이션은 보통 이미지나, JavaScript 혹은 CSS 같은 </p>
<p>추가적인 파일을 가져야 합니다. </p>
<br>

<p>이 파일들은 웹페이지를 완성할때 필요합니다. </p>
<p>Django에서는, 이 파일들을 “static files” 라고 불릅니다. </p>
</blockquote>
<br>

<a id="more"></a>

<br>

<p>작은 프로젝트에는, 이게 아주 큰 문제가 되지 않습니다. 왜냐하면, static files 들은 웹서버 어딘가에 두고 웹서버가 찾게 하면 되기 때문입니다. 하지만, 큰 프로젝트들 - 특히 다수의 앱으로 구성되고 다중의 static files 들을 처리해야 할때가 오면 좀 어려워 집니다. </p>
<br>

<blockquote>
<p>이것이 바로, django.contrib.staticfiles 가 하는 일입니다.</p>
<p>각 어플리케이션에서 정적파일들을 한곳에 모아서 놓아줍니다.</p>
<p>프로덕션 환경에서 쉽게 찾을수 있게 한곳에 모아서 관리 합니다. </p>
</blockquote>
<br>

<br>

<h2 id="App-의-느낌과-모양-정의하기"><a href="#App-의-느낌과-모양-정의하기" class="headerlink" title="App 의 느낌과 모양 정의하기"></a>App 의 느낌과 모양 정의하기</h2><br>

<br>

<p>첫번째로, polls 폴더안에, static 폴더를 만듭니다. Django 는 정적파일들을 이 폴더에서 찾게 됩니다. </p>
<p><br>Django 가 템플릿들을 polls/templates/ 폴더에서 찾는 방식과 비슷하게 이루어 집니다. </p>
<p><br>Django 의 STATICFILES_FINDERS 세팅은 검색자의 리스트들을 포함하고 있습니다. Finders 즉 검색자들은 여러 곳에서 static files 들을 찾습니다. </p>
<br>

<br>

<p>기본값중 하나는, AppDirectoriesFinder 인데, </p>
<p><br>이것은, 각 INSTALLED_APPS 에 등록된 앱의 서브폴더인 ‘static’ 을 찾습니다. 위에 생성한 polls/static 같은 폴더를 의미 합니다. 장고의 관리자 페이지는 정적파일들을 찾기 위해, 위와 같은 구조의 폴더 구조를 사용합니다. </p>
<br>

<br>

<blockquote>
<p>polls/static/polls/style.css 파일을 생성해 줍니다. </p>
<p>AppDirectoriesFinder 가 polls/styles.css 같은 정적파일들을 찾을수 있게 </p>
<p>경로를 지정해 주는 것인데, </p>
<p>이 방식은 템플릿 경로를 설정해준 방식과 비슷합니다. </p>
</blockquote>
<br>

<br>

<h2 id="Static-file-namespacing"><a href="#Static-file-namespacing" class="headerlink" title="Static file namespacing"></a>Static file namespacing</h2><br>

<br>

<blockquote>
<p>Static file namespacing </p>
<p>템플릿과 비슷하게, 우리는 정적파일들을 바로 polls/static 에 넣을수 있었을 겁니다. </p>
<p>하지만, 이것은 좋은 생각이 아닙니다. Django 는 static 이름과 매치되는 첫번째 static 파일을 찾습니다. </p>
<br>

<p>만약, 같은 이름의 정적파일이 다른 앱에 존재하면, Django 는 이 정적파일들을 구분할수 없을겁니다. </p>
<br>

<p>따라서, polls/static/polls/style.css 와 같이, poll 앱이 사용될 정적파일들을 담아놓습니다.</p>
<p>우리는 장고에게 정확한 정적파일들을 가르키게 해야하고, 최선의 방법은 namespacing (이름공간)을 두어서 구분 하는것입니다. </p>
<br>

<p>따라서, 정적파일들을 어플리케이션을 위한 폴더명 안에 넣어줍니다. </p>
</blockquote>
<br>

<br>

<p>polls/static/polls/style.css 파일을 생성해 주고, 아래 내용을 추가해 줍니다. </p>
<br>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">li</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="staticfiles-읽어오기"><a href="#staticfiles-읽어오기" class="headerlink" title="staticfiles 읽어오기"></a>staticfiles 읽어오기</h2><p><br><br></p>
<p>정적 파일을 생성하였으니, </p>
<p>index.html 파일에서 이 정적파일들을 불러오게끔 해줘야 합니다. polls/templates/polls/index.html 파일을 열고, </p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span><span class="xml"> 이라고 파일 상단에서 정적파일을 열어줍니다.</span></span><br><span class="line"><span class="xml">그리고나서, link 테그를 통해 해당 CSS 파일을 읽어줍니다. </span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">static</span></span> 'polls/style.css' %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br></pre></td></tr></table></figure>



<p><br><br></p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">load</span></span> static %&#125;</span><span class="xml"> 템플릿 테그는 정적파일들의 절대경로의 URL 을 생성해줍니다. </span></span><br><span class="line"><span class="xml">python manage.py runserver 를 실행 시켜서 정적파일이 잘 적용되었는지 확인 해봅니다.</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>브라우저를 열어서  <a href="http://localhost:8000/polls/" target="_blank" rel="noopener">http://localhost:8000/polls/</a> 로 접속해보면, </p>
<p>Stylesheet 이 잘 읽어져서, 질문 링크들이 Django 스타일인 초록색으로 표시가 됩니다. </p>
<p><br><br></p>
<img src="/2020/05/06/Writing-your-first-Django-app-part-6-1%ED%8E%B8/image1.png" class="">



<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>Django 페이지에 정적파일을 적용해 보았습니다. </p>
<p><br>이 정적파일 경로 설정을 유의깊게 보고 있다가, 앱마다 사용되는 정적파일들을 사용합시다.</p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>튜토리얼</tag>
        <tag>정적파일</tag>
        <tag>staticfiles</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part5 - 6편</title>
    <url>/2020/05/05/Writing-your-first-Django-app-part5-6%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="더많은-테스트가-좋습니다"><a href="#더많은-테스트가-좋습니다" class="headerlink" title="더많은 테스트가 좋습니다"></a>더많은 테스트가 좋습니다</h2><br>

<br>

<p>우리가 작성한 테스트는 우리의 제어 능력을 벗어나 보일지 모릅니다. </p>
<p><br>이대로 가다가는, 테스트에 있는 코드가 어플리케이션에 있는 코드보다 많아질것이고, </p>
<p><br>미심쩍은 반복만 늘어날것입니다. 기타 코드와 비교해서 우아할것 같아 보이지 않기도 합니다. </p>
<br>

<br>

<p>상관 없습니다! 코드가 자라나게 냅둬도 되니다 ㅎㅎ</p>
<p><br>가장 좋은 방법은 테스트를 한번만 작성하고, 잊고 사는겁니다. 테스트는 프로그래밍 개발이 계속 되는동안 그 기능을 계속 수행합니다. </p>
<br>

<a id="more"></a>

<br>

<p>때때로, 테스트들은 업데이트 되어야 합니다. view 를 수정해서 Choices 를 가진 Questions 만 발행 된다고 가정해 봅시다. 이런 상황에서는, 이미 존재하는 많은 테스트들이 실패할것입니다. 따라서, 테스트들은 view  에 맞게 업데이트 되어야 합니다. </p>
<p><br><br></p>
<p>개발을 계속 하면서, 테스트가 불필요해지는 경우를 발견할수 있습니다. </p>
<p><br>테스트가 불필요해진다는것은 문제될게 없습니다. 테스트가 불필요해진다는것은 좋은 일입니다. </p>
<br>

<p>테스트들이 좋게 마련이 되어 있으면, 관리를 못하는 상황이 오지 않습니다. 아래는 테스트에 대한 좋은 원칙들 입니다.</p>
<br>

<ul>
<li>별도의 Testclass 를 각 모델 혹은 뷰에 가짐 </li>
<li>별도의 테스트 메서드를 각 테스트를 하고 싶은 조건에 가짐 </li>
<li>테스트 메서드 이름은 해당 함수를 묘사 </li>
</ul>
<br>

<br>

<h2 id="추가-테스트"><a href="#추가-테스트" class="headerlink" title="추가 테스트"></a>추가 테스트</h2><br>

<p>튜토리얼은 몇가지의 기본 테스팅을 소개합니다. </p>
<p><br>더 할수 있는것이 존재하고, 몇가지 매우 유용한 도구들도 존재합니다. <br><br><br></p>
<p>예를들어, 우리의 테스트가 모델의 내부 로직과, 정보를 발행하는 방식을 둘러보았고, </p>
<p><br>Selenium 같은 ‘in-browser’ 프레임워크를 사용해서 HTML  이 실제로 브라우저에서 그려지는지도 테스트 할수 있습니다. </p>
<br>

<p>이러한 툴들은, Django 코드의 동작을 확인하는것 뿐만 아니라, JavaScript 의 브라우저를 실행하여, 마치 사람이 동작시키는것처럼 테스트를 할수 있습니다. Django 는 Selenium 같은 툴과 연동을 도와주기 위해서, LiveServerTestCase  같은 모듈을 제공합니다.<br></p>
<br>

<p>만약 복잡한 어플리케이션을 가지고 있다면, 자동으로 각 커밋마다 테스트를 실행 시키고 싶을수 있습니다. </p>
<p><br>지속적인 연동의 목적을 가지고 말이죠, 따라서 품질관리가 스스로 혹은 적어도 부분적으로는 자동화가 됩니다. </p>
<p><br><br></p>
<p>테스트 되지 않은 응용 프로그램 부분을 확인 하는 좋은 방법은 코드 범위를 확인 하는것 입니다. </p>
<br>

<p>또한, 깨지기 쉬운 코드나 죽은 코드를 식별하는데에 도움이 됩니다. 코드를 테스트 할수 없는 경우 보통 코드를 리펙토링 하거나 제거 합니다. 적용 범위는 죽은 코드를 식별하는데에 도움이 됩니다. 자세한 내용은 coverage.py 와의 통합을 참조하면 됩니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>테스트에 대한 토픽을 한번 읽어보았는데. </p>
<p>무슨 소리하는건지 하나도 모르겠습니다. <br></p>
<br>

<p>테스트를 진행하는것을 겪어본적이 없으니, 당췌 뭔소린지 알수가 없군요. </p>
<br>

<p>공부를 더 진행 해보면서, 체크 해봐야 되겠습니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>튜토리얼</tag>
        <tag>자동화테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part5 - 5편</title>
    <url>/2020/05/04/Writing-your-first-Django-app-part5-5%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="새로운-view-테스트하기"><a href="#새로운-view-테스트하기" class="headerlink" title="새로운 view 테스트하기"></a>새로운 view 테스트하기</h2><br>

<br>

<p>이제 우리는 runserver 를 통해서 만족스러운 결과를 가질수 있습니다.</p>
<p><br>브라우저로 사이트를 열어서 과거와 미래 날짜를 가진 Question 을 생성하고, 발행이 완료된 Question 만 리스트 되어야 합니다. shell 세션을 기반으로, tests.py 를 작성해 줍니다. </p>
<br>

<br>

<p>첫번째로, polls/tests.py 에 reverse 를 추가해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br></pre></td></tr></table></figure>

<br>

<a id="more"></a>

<br>

<p>그 다음에, 질문들을 생성하기 위해서 단축 함수를 만들어주고,</p>
<p><br>새로운 클래스도 생성해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_question</span><span class="params">(question_text, days)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Create a question with the given 'question_text' and published the given 		number of 'days' offset to now (negative for question published in the past, </span></span><br><span class="line"><span class="string">    positive for questions that have yet to be published).</span></span><br><span class="line"><span class="string">	"""</span></span><br><span class="line">    time = timezone.now() + datetime.timedelta(days=days)</span><br><span class="line">    <span class="keyword">return</span> Question.objects.create(question_text=question_text, pub_date=time)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionIndexViewTest</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_no_questions</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        If no questions exist, an appropriate message is displayed. </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">200</span>)</span><br><span class="line">        self.assertContains(response, <span class="string">"No polls are available"</span>)</span><br><span class="line">        self.assertQuerysetEqual(response.context[<span class="string">'latest_question_list'</span>], [])</span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_past_question</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Questions with a pub_date in the past are displayed on the index page </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        create_question(question_text=<span class="string">"Past question."</span>, days=<span class="number">30</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</span><br><span class="line">        self.assertQuerysetEqual(</span><br><span class="line">        	response.context[<span class="string">'latest_question_list'</span>],</span><br><span class="line">            [<span class="string">'&lt;Question: Past quesiton.&gt;'</span>]</span><br><span class="line">        )</span><br><span class="line">        </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">test_future_question</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Questions with a pub_date in the future aren't displayed on</span></span><br><span class="line"><span class="string">        the index page.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        create_question(question_text=<span class="string">"Future question."</span>, days=<span class="number">30</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</span><br><span class="line">        self.assertContains(response, <span class="string">"No polls are available."</span>)</span><br><span class="line">        self.assertQuerysetEqual(response.context[<span class="string">'latest_question_list'</span>], [])</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_future_question_and_past_question</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Even if both past and future questions exist, only past questions</span></span><br><span class="line"><span class="string">        are displayed.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        create_question(question_text=<span class="string">"Past question."</span>, days=<span class="number">-30</span>)</span><br><span class="line">        create_question(question_text=<span class="string">"Future question."</span>, days=<span class="number">30</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</span><br><span class="line">        self.assertQuerysetEqual(</span><br><span class="line">            response.context[<span class="string">'latest_question_list'</span>],</span><br><span class="line">            [<span class="string">'&lt;Question: Past question.&gt;'</span>]</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_two_past_questions</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        The questions index page may display multiple questions.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        create_question(question_text=<span class="string">"Past question 1."</span>, days=<span class="number">-30</span>)</span><br><span class="line">        create_question(question_text=<span class="string">"Past question 2."</span>, days=<span class="number">-5</span>)</span><br><span class="line">        response = self.client.get(reverse(<span class="string">'polls:index'</span>))</span><br><span class="line">        self.assertQuerysetEqual(</span><br><span class="line">            response.context[<span class="string">'latest_question_list'</span>],</span><br><span class="line">            [<span class="string">'&lt;Question: Past question 2.&gt;'</span>, <span class="string">'&lt;Question: Past question 1.&gt;'</span>]</span><br><span class="line">        )</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>세부사항들을 잠시 체크하고 넘어갑니다. </p>
<br>

<p>첫번째로, quesiton 숏컷 함수인, create_question 은 질문 생성하는데에 반복되는 부분을 책임집니다. </p>
<br>

<p>test_no_questions 는 질문을 생성하지 않습니다. 하지만 “No polls are available” 이라는 메시지를 체크 하고, latest_question_list 가 비어있는것을 검증합니다. <br>django.test.TestCase 클래스는 추가적인 assertion 메써드들을 제공합니다.<br><br> 해당 예시에서는, assertContains() 그리고 assertQuerysetEqual() 을 사용합니다. </p>
<p><br><br></p>
<p>test_past_question 에서는, 질문을 생성하고 리스트에 표시되는지 확인 합니다. </p>
<br>

<p>test_future_question 에서는, pub_date 가 미래일인 질문을 생성합니다.<br> 데이터베이스는 각 테스트 메써드 마다 재설정 됩니다. <br><br>따라서, 첫번째 질문은 더이상 데이터베이스에 존재하지 않습니다. 그러므로, 인덱스는 아무 질문들도 가지고 있지 않아야 합니다. </p>
<p><br><br></p>
<p>추가적으로, 우리는 관리자 입력값과 사용자 경험 그리고 각 상태 와 각 변경사항, 예상된 결과들의 발행 같은 것들을 테스트를 통해 하나의 이야기를 만들어 가는겁니다. </p>
<br>

<p>python manage.py test polls 를 실행하면, 8개의 테스트가 진행되고 OK 가 됩니다. </p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Creating <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">........</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 8 tests <span class="keyword">in</span> 0.031s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</span><br></pre></td></tr></table></figure>



<br>

<br>

<h3 id="DetailView-테스트-하기"><a href="#DetailView-테스트-하기" class="headerlink" title="DetailView 테스트 하기"></a>DetailView 테스트 하기</h3><br>

<p>우리가 또 해결해야 하는것은, 미래의 질문들이 인덱스에 표시가 되지 않는다 하더라도, </p>
<p><br>사용자들이 정확한 URL 을 알고 있거나, 추측할수 있다면, 사용자들은, 여전히 질문들에 접근할수 있습니다.  </p>
<p><br>따라서, DetailView 에 비슷한 제약을 추가해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        아직 발행되지 않은 질문들을 제외합니다.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.filter(pub_date__lte=timezone.now())</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>그리고, 물론, 몇개의 테스트를 추가해 줄겁니다. pub_date 가 미래는 출력이 되지 않는 상황에서,<br></p>
<p>pub_date 가 과거값인 Question 이 출력될수 있는지, </p>
<p><br><br></p>
<p>polls/tests.py 파일을 아래와 같이 업데이트 해줍니다</p>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionDetailViewTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_future_question</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        The detail view of a question with a pub_date in the future</span></span><br><span class="line"><span class="string">        returns a 404 not found.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        future_question = create_question(question_text=<span class="string">'Future question.'</span>, days=<span class="number">5</span>)</span><br><span class="line">        url = reverse(<span class="string">'polls:detail'</span>, args=(future_question.id,))</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertEqual(response.status_code, <span class="number">404</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_past_question</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        The detail view of a question with a pub_date in the past</span></span><br><span class="line"><span class="string">        displays the question's text.</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        past_question = create_question(question_text=<span class="string">'Past Question.'</span>, days=<span class="number">-5</span>)</span><br><span class="line">        url = reverse(<span class="string">'polls:detail'</span>, args=(past_question.id,))</span><br><span class="line">        response = self.client.get(url)</span><br><span class="line">        self.assertContains(response, past_question.question_text)</span><br></pre></td></tr></table></figure>



<br>

<p>python manage.py test polls 를 실행하면,<br></p>
<p>아래와 같이 10가지의 테스트 케이스가 OK 됩니다.<br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Creating <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">..........</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 10 tests <span class="keyword">in</span> 0.047s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="더많은-테스트를-위한-아이디어"><a href="#더많은-테스트를-위한-아이디어" class="headerlink" title="더많은 테스트를 위한 아이디어"></a>더많은 테스트를 위한 아이디어</h2><p><br><br></p>
<p>비슷한 개념의 get_queryset 메써드를 ResultsView 에 추가해 주어야 하고 새로운 테스트 클래스를 생성 해주어야 합니다.. <br>방금 DetailView 를 위해 한 작업과 굉장히 비슷한 작업이 될것이고, <br>사실 반복적인 작업이 될것 입니다. </p>
<p><br><br></p>
<p>또한 다른 방식으로도 어플리케이션을 향상 시킬수 있습니다.<br> 예를 들어, Choices 가 없는 Questions 를 사이트에 발행 시키는것은 어리석은 짓입니다. <br>따라서, 우리의 뷰들은 이것에 대해 체크하고 Choice 가 없는 Questions 들을 제외할수 있습니다. <br><br>우리의 테스트들은 Choices 가 없는 Question 을 생성하고, 발행이 되지 않았는지 테스트 하고 비슷한 Question 인데  Choices 가 있는 것을 생성해서, 발행 되는지 테스트 합니다. </p>
<p><br><br></p>
<p>아마도, 로그인이 되어있는 관리자들은 발행이 취소된 Questions 도 볼수 있어야 합니다. 하지만, 일반 사이트 방문자는 볼수 없어야 하겠죠. 다시한번, 이것을 위해서 소프트웨어에 추가되어야 하는 그 어떤것이던지, </p>
<p><br><br></p>
<p>테스트와 함께 병행 되어야 합니다. 테스트를 먼저 작성하고 테스트를 통과하는 코드를 작성하던, </p>
<p>로직을 먼저 생각한다음에 테스트를 작성하여 증명하던지. </p>
<p><br><br></p>
<p>어떤 방식으로던, 테스트와 같이 병행되어야 합니다.  <br><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>view 들을 테스트 해보았는데. </p>
<p>아직은 test 를 작성할 상황이 많지 않았어서 그런지.. 전반적인 순서라던지, 감이 오지 않네요. </p>
<p>작동은 완벽하게 되지만, 코드 동작 자체의 연계성에 대한 이해가 좀 부족한것 같습니다;;; </p>
<br>

<p>조금 더 공부 진행하면서 알아봐야 할것 같습니다. <br></p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>튜토리얼</tag>
        <tag>자동화테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part5 - 4편</title>
    <url>/2020/05/03/Writing-your-first-Django-app-part5-4%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="View-테스트-하기"><a href="#View-테스트-하기" class="headerlink" title="View 테스트 하기"></a>View 테스트 하기</h2><br>

<p>우리가 작성한 polls 어플리케이션은 구분을 잘 못합니다. </p>
<p><br>이게 무슨 이야기냐면, polls app은 아무 질문이나 발행하고, pub_date 필드가 미래의 값인것도 발행 가능합니다. 이점은 개선 되어야 할점입니다. </p>
<p><br><br></p>
<p>pub_date 를 미래의 날짜로 설정한다는것은, </p>
<p><br>Question 은 그때 발행은 되지만, 해당 pub_date 날짜가 올때까지 보여지지 않아야 합니다. </p>
<br>

<a id="more"></a>

<br>

<h3 id="View-를-위한-테스트"><a href="#View-를-위한-테스트" class="headerlink" title="View 를 위한 테스트"></a>View 를 위한 테스트</h3><br>

<br>

<p>버그를 위에서 고쳤을때, 테스트를 처음 써주고, 해당 버그를 고치는 코드를 써주었습니다. 하지만, 이것은 테스트 기반 개발 방식의 예시입니다. 어떤 순서로 일을 하던 상관은 없습니다. </p>
<br>



<br>

<p>우리의 첫번째 테스트에서는, 코드의 내부 동작에 대해 조금 더 집중하였습니다. 이번 테스트에서는, 코드의 동작이 웹브라우저를 통한 사용자가 경험할 법한 것들에 대해서 확인 하고 싶습니다. </p>
<br>

<p>뭐든지 고치기 전에, 몇가지 도구들을 둘러보고 갑니다. </p>
<br>

<h3 id="Django-테스트-클라이언트"><a href="#Django-테스트-클라이언트" class="headerlink" title="Django 테스트 클라이언트"></a>Django 테스트 클라이언트</h3><br>

<p>장고는 테스트 클라이언트를 제공합니다. 뷰에서 사용자가 코드와 상호작용 하는것을 시뮬레이션 할수 있습니다.</p>
<p><br>tests.py 에서도 사용할수 있고, 심지어 shell 에서도 사용이 가능합니다. </p>
<p><br>shell 에서 먼저 시작해 보도록 합시다. shell 에서 tests.py 에서 불필요한것들을 수행해 보려 합니다. </p>
<br>

<br>

<blockquote>
<p>첫번째로, shell 에서 테스트 환경을 설정해 줘야 합니다 </p>
<p>튜토리얼에서는, shell 을 사용하나, 저는 shell_plus 를 사용했습니다. </p>
</blockquote>
<p><br><br></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py shell_plus</span><br></pre></td></tr></table></figure>



<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: from django.test.utils import setup_test_environment                                                                                                              </span><br><span class="line"></span><br><span class="line">In [2]: setup_test_environment()</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>setup_test_environment()</code> 는 템플릿 렌더러를 설치합니다. template renderer 는 response.context 같은 리스폰스에 추가적인 속성들을 실험해 볼수 있게 해줍니다. 하지만, 이 메서드는 테스트 데이터베이스를 생성하지 않습니다. </p>
<p><br><br></p>
<p>따라서, 이것을 실행 하면, 이미 존재하는 데이터베이스를 기반으로 실행이 되고, 결과는 어떤 질문들을 생성했느냐에 따라서 살짝 달라질수 있습니다. settings.py 에 있는 TIME_ZONE 설정이 잘못 되어 있을 경우, 전혀 예상치 못한 결과가 나타날수 있습니다. </p>
<br>

<p>다음은, test 클라이언트 클래스를 가져 오는 겁니다. </p>
<p><br><br></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [3]: from django.test import Client                                                                                                                               </span><br><span class="line">In [4]: client = Client()</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>여기까지 준비가 되었으면, 우리는 클라이언트에 어떠한 일을 수행해 달라고 할수 있습니다. </p>
<br>

<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [5]: # / 에서 response 를 가져옴                                                                                                                                       </span><br><span class="line"></span><br><span class="line">In [6]: response = Client.get('/')                                                                                                                                        </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-6-4f89fae61f34&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 response = Client.get(<span class="string">'/'</span>)</span></span><br><span class="line"></span><br><span class="line">TypeError: get() missing 1 required positional argument: 'path'</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p><code>/</code>로 접속하면, 접속이 되질 않지만, <code>/polls/</code> 를 입력하면 접속이 됩니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [8]: response = client.get('/polls/')                                                                                                                             </span><br><span class="line">In [9]: response.status_code                                                                                                                                         </span><br><span class="line">Out[9]: 200</span><br><span class="line"><span class="meta">#</span><span class="bash"> reverse() 함수를 사용하여 하드코드된 URL 을 피할수 있습니다. </span></span><br><span class="line"></span><br><span class="line">In [11]: from django.urls import reverse                                           </span><br><span class="line"></span><br><span class="line">In [12]: response = client.get(reverse('polls:index'))                                                                                                               </span><br><span class="line">In [13]: response.status_code                                                                                                                                       </span><br><span class="line">Out[13]: 200</span><br><span class="line"></span><br><span class="line">In [14]: response.content                                                                                                                                            Out[14]: b'\n    &lt;ul&gt;\n    \n        &lt;li&gt;&lt;a href="/polls/specifics/1/"&gt;What&amp;#x27;s up?&lt;/a&gt;&lt;/li&gt;\n    \n    &lt;/ul&gt;\n'</span><br><span class="line"></span><br><span class="line">In [15]: response.context['latest_question_list']                                                                                                               </span><br><span class="line">Out[15]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>shell 을 통해서 테스트 환경을 테스트 해보았습니다. </p>
<br>

<h3 id="View-향상-시키기"><a href="#View-향상-시키기" class="headerlink" title="View 향상 시키기"></a>View 향상 시키기</h3><br>

<br>

<p>polls 의 리스트는 발행되지 않은 polls 도 표시합니다. 이건 문제가 될수 있으니, 수정해주어야 합니다. </p>
<p><br>part4 에서 ListView 를 기반으로 하는 클래스 기반 뷰를 소개했었습니다. </p>
<p><br>polls/views.py 파일을 열어서, IndexView 안의 get_queryset() 메서드를 수정해줍니다. timezone.now() 와 날짜를 비교하여 체크하게 만들겁니다. 일단 polls/views.py 에 timezone 가져옵니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></span><br><span class="line">    template_name = <span class="string">'polls/index.html'</span></span><br><span class="line">    context_object_name = <span class="string">'latest_question_list'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        가장 최근의 5개의 발행된 질문들을 반환합니다 </span></span><br><span class="line"><span class="string">        미래 날짜에 발행된 질문들은 반환되지 않습니다</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.filter(pub_date__lte=timezone.now()).order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br></pre></td></tr></table></figure>



<br>

<p>Question.objects.filter(pub_date__lte=timezone.now()) 는 pub_date 가 timezone.now 보다 작거나 같은, 즉 timezone.now 보다 이르거나 같은 시간대를 가진 QUestion 을 반환합니다. </p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>너무 길어질것 같아서 포스팅을 나눕니다. 다음 포스팅에 이어 합니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>튜토리얼</tag>
        <tag>자동화테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part5 - 3편</title>
    <url>/2020/05/02/Writing-your-first-Django-app-part5-3%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="첫번째-테스트-작성하기"><a href="#첫번째-테스트-작성하기" class="headerlink" title="첫번째 테스트 작성하기"></a>첫번째 테스트 작성하기</h2><br>

<h3 id="버그찾기"><a href="#버그찾기" class="headerlink" title="버그찾기"></a>버그찾기</h3><br>

<p>운좋게도, polls 어플리케이션에는 고쳐야할 작은 버그가 있습니다. </p>
<p><br>Question.was_publishd_recently() 메서드는, Question 이 어제 이전에 발행되었거나, Question 의 pub_date 필드가 미래일일 경우에 True 를 반환합니다. </p>
<br>

<p>쉘을 통해성 버그를 확인하고 확실하게 찾아냅시다. shell 을 사용해서 날짜가 미래의 날짜로 지정된 질문의 메서드를 확인 합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py shell_plus</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<a id="more"></a>

<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: import datetime                                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [2]: from django.utils import timezone                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [3]: from polls.models import Question                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [4]: # pub_date 이 30일 미래 날짜를 가진 Question 인스턴스 생성                                                                                                        </span><br><span class="line"></span><br><span class="line">In [5]: future_question = Question(pub_date=timezone.now() + datetime.timedelta(days=30))                                                                                 </span><br><span class="line"></span><br><span class="line">In [6]: # 이게 최근에 발행 됬나요?                                                                                                                                        </span><br><span class="line"></span><br><span class="line">In [7]: future_question.was_published_recently()                                                                                                                          </span><br><span class="line">Out[7]: True</span><br><span class="line"></span><br><span class="line">In [8]: # 최근 발행된 질문이 아닌데도 True 가 표시됩니다. 버그 입니다.</span><br></pre></td></tr></table></figure>

<br>

<p>발행일짜가 30일 이후로 되어 있는데도, 최근인지 확인하는 메서드는 True 를 반환합니다. </p>
<p><br>이것은 명백하게 잘못되어 있는것입니다. <br></p>
<br>

<h2 id="버그를-노출시키는-테스트"><a href="#버그를-노출시키는-테스트" class="headerlink" title="버그를 노출시키는 테스트"></a>버그를 노출시키는 테스트</h2><br>

<p>방금 shell 에서 진행 한것은, 자동화 테스트가 문제점에 대해서 정확히 무엇을 할수 있는지 테스트 해본 겁니다. </p>
<p><br>자, 그럼 자동화 테스트로 전환을 해봅시다.<br></p>
<br>

<p>관례적으로 어플리케이션의 테스트는 어플리케이션의 tests.py 파일에 작성합니다. 테스트 시스템은 자동으로 테스트 코드들을 test 로 시작하는 파일에서 찾습니다. </p>
<br>

<blockquote>
<p>polls/tests.py  파일을 생성하고 </p>
<p>아래 코드를 작성해 줍니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.test <span class="keyword">import</span> TestCase </span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question </span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your tests here </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuestionModelTests</span><span class="params">(TestCase)</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_future_question</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        was_published_recently() 가 pub_date 가 미래 날짜로 지정되어 있는 질문들에 대해서 		  False 를 반환함</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        time = timezone.now() + datetime.timedelta(days=<span class="number">30</span>)</span><br><span class="line">        future_question = Question(pub_date=time)</span><br><span class="line">        self.assertIs(future_question.was_published_recently(), <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>여기에 우리는 django.test.TestCase 서브 클래스를 만들고, pub_date 가 미래 날짜인 Question 인스턴스를 만들어 줍니다. 그 후에, 값이 False 여야 하는 was_published_recently() 의 결과를 체크합니다. </p>
<br>

<br>

<h3 id="테스트-실행하기"><a href="#테스트-실행하기" class="headerlink" title="테스트 실행하기"></a>테스트 실행하기</h3><br>

<p>터미널에서 테스트를 실행 할수 있습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python manage.py test polls</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>실행해 보면, 아래와 같은 스크린을 볼수 있습니다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Creating <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">F</span><br><span class="line">======================================================================</span><br><span class="line">FAIL: test_was_published_recently_with_future_question (polls.tests.QuestionModelTests)</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/home/dhkang/django_tutorial/mysite/polls/tests.py"</span>, line 19, <span class="keyword">in</span> test_was_published_recently_with_future_question</span><br><span class="line">    self.assertIs(future_question.was_published_recently(), False)</span><br><span class="line">AssertionError: True is not False</span><br><span class="line"></span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 <span class="built_in">test</span> <span class="keyword">in</span> 0.001s</span><br><span class="line"></span><br><span class="line">FAILED (failures=1)</span><br><span class="line">Destroying <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>무엇이 발생했냐면.. </p>
<br>

<ol>
<li><p>manage.py test polls 명령어를 실행하여, polls 앱 안에 test 를 찾았습니다 </p>
</li>
<li><p>django.test.TestCase 클래스의 서브 클래스를 찾았습니다 </p>
</li>
<li><p>테스트의 목적을 수행할 특수한 데이터베이스를 하나 생성했습니다 </p>
</li>
<li><p>test 로 시작하는 테스트의 메서드를 찾습니다 </p>
</li>
<li><p>test_was_published_recently_with_future_question 안에 Question 인스턴스를 하나 생성합니다. 이때, pub_date 는 30일 이후의 날짜로 지정해서 생성합니다 </p>
</li>
<li><p>assertIs() 함수를 사용해서, False 가 반환되어야 하는데, was_published_recently() 가 True 를 반환하는것을 발견합니다 </p>
</li>
</ol>
<br>

<p>테스트는 어떤 테스트가 실패했고, 어느 줄에서 실패가 발생했는지 알려줍니다. </p>
<br>

<h3 id="버그-수정하기"><a href="#버그-수정하기" class="headerlink" title="버그 수정하기"></a>버그 수정하기</h3><br>

<p>우리는 이미 문제점이 무엇인지 알고 있습니다. </p>
<br>

<blockquote>
<p>Question.was_published_recently() 는 </p>
<p>pub_date 가 미래의 날짜일 경우, </p>
<p>False 를 반환 해야 합니다. </p>
<p> polls/models.py 의 이 메서드를 수정해 줍니다. </p>
</blockquote>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></span><br><span class="line">    now = timezone.now()</span><br><span class="line">    <span class="keyword">return</span> now - datetime.timedelta(days=<span class="number">1</span>) &lt;= self.pub_date &lt;= now</span><br></pre></td></tr></table></figure>

<br>

<p>수정을 마쳤으면, 테스트를 다시 실행 해 줍니다. <code>python manage.py test polls</code></p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py <span class="built_in">test</span> polls </span><br><span class="line">Creating <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">.</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 1 <span class="built_in">test</span> <span class="keyword">in</span> 0.001s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</span><br></pre></td></tr></table></figure>

<br>

<p>버그를 확인한 뒤에, 버그를 노출 시키는 테스트를 작성 하였고. </p>
<p><br>버그를 코드에서 수정하여, 테스트를 통과하게 만들었습니다.  </p>
<p><br>향후, 다른 많은 부분들이 우리의 어플리케이션에서 잘못될수 있습니다. 하지만, 우리는 이 버그를 다시 가지지 않을것입니다. 왜냐하면, 테스트를 실행 시키기만 하면, 바로 버그에 대한 경고를 받을 수 있기 때문입니다. <br></p>
<p>이 부분에 대해서 고쳐졌다고 볼수 있습니다. </p>
<br>

<br>

<h3 id="좀더-다양한-테스트"><a href="#좀더-다양한-테스트" class="headerlink" title="좀더 다양한 테스트"></a>좀더 다양한 테스트</h3><p><br><br></p>
<p>was_published_recently() 를 조금 더 고쳐보기로 합니다. 사실 이것은 긍정적인 의미를 가진 당황스러움 이 있습니다. </p>
<p><br>polls/tests.py 파일을 열고, 두개의 테스트를 같은 클래스에 추가해 줍니다<br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_old_question</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    was_published_recently() returns False for question whose pub_date is older    	   than 1 day</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    time = timezone.now() - datetime.timedelta(days=<span class="number">1</span>, seconds=<span class="number">1</span>)</span><br><span class="line">    old_question = Question(pub_date=time)</span><br><span class="line">    self.assertIs(old_question.was_published_recently(), <span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_was_published_recently_with_recent_question</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    was_published_recently() returns True for questions whose pub_date is within 	 the last day</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    time = timezone.now() - datetime.timedelta(hours=<span class="number">23</span>, minutes=<span class="number">59</span>, seconds=<span class="number">59</span>)</span><br><span class="line">    recent_question = Quesiton(pub_date=time)</span><br><span class="line">    self.assertIs(recent_question.was_published_recently(), <span class="literal">True</span>)</span><br></pre></td></tr></table></figure>



<br>

<p>이제 Question.was_published_recently() 가 과거, 현재, 미래 날짜에 발행된 질문들에 대한 체크에 센스 있는 값을 반환 하는지 봅니다. </p>
<br>

<p><code>python manage.py test polls</code>를 실행해 봅니다. 3개의 테스트를 진행 했고, OK 가 표시되는것을 확인 할수 있습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Creating <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">...</span><br><span class="line">----------------------------------------------------------------------</span><br><span class="line">Ran 3 tests <span class="keyword">in</span> 0.002s</span><br><span class="line"></span><br><span class="line">OK</span><br><span class="line">Destroying <span class="built_in">test</span> database <span class="keyword">for</span> <span class="built_in">alias</span> <span class="string">'default'</span>...</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>다시 한번, 튜토리얼에서 만든 polls 어플리케이션은 매우 최소한의 단위를 가진 어플리케이션 입니다. </p>
<p><br>하지만, 향후에는 더 복잡함이 자라날것이고, 다른 코드들과 상호 작용을 함에 있어서, 더 복잡해 질것입니다.<br></p>
<p>우리는 우리가 작성한 코드가 예상대로 동작할것이라는 어느정도의 보장성을 가질수 있습니다. </p>
<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며."></a>마치며.</h2><br>

<p>테스트를 진행 할때, 기억해야 하는 포인트는,, </p>
<p><br><br></p>
<ol>
<li>앱안에 tests.py 파일 생성 </li>
<li>django.test.TestCase 클래스를 상속받는 클래스를 작성 </li>
<li>클래스 안에 test  로 시작하는 메서드를 작성 </li>
<li>해당 메서드 안에서, 테스트 할 인스턴스 생성 </li>
<li>assertIs 함수를 사용해서, 테스트가 원하는값을 반환하는지 확인 </li>
<li>버그 수정하기 </li>
</ol>
]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>튜토리얼</tag>
        <tag>자동화테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part5 - 2편</title>
    <url>/2020/05/01/Writing-your-first-Django-app-part5-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="기본테스트-전략"><a href="#기본테스트-전략" class="headerlink" title="기본테스트 전략"></a>기본테스트 전략</h2><br>

<p>테스트 작성에 접근하는 방식은 많습니다. </p>
<br>

<p>어떤 프로그래머들은 “test-driven development” (테스트 기반 개발 방식) 원칙을 따릅니다. </p>
<p><br>테스트 기반 개발 방식에서는, 개발자들이 실제 코드를 작성하기 전에 테스트를 먼저 작성합니다. </p>
<br>

<br>

<p>이것은 직관적이지 않아 보일수 있습니다만, 어쨋든 대부분의 사람들이 하는일과 다를바가 별로 없습니다. 문제점들을 묘사하고, 문제점들을 풀기 위해서 코드를 작성합니다. </p>
<a id="more"></a>

<br>

<br>

<blockquote>
<p>테스트 기반 개발 방식은, 파이썬 테스트 케이스를 공식화 합니다. </p>
</blockquote>
<br>

<br>

<p>종종, 테스팅에 새로 입문하는 사람들은, 어떤 코드를 먼저 작성하고, 나중에 테스트가 있어야 한다고 결정합니다. </p>
<p><br>하지만, 그때는 테스트를 좀 더 일찍 작성하는것이 나았을거라 생각할겁니다. 하지만, 언제든 테스트 작성을 시작하는것은 늦지 않았습니다. </p>
<br>

<br>

<p>때때로, 테스트 작성을 시작해야하는 시점을 결정하기 어렵습니다. </p>
<p><br>만약, 몇천줄의 파이썬 코드를 이미 작성했다고 가정한다면, 어떤것을 테스트 해야할지 결정하는것이 쉽지 않을수 있습니다. 이런 상황에서는, 다음에 코드를 바꿀때에, 첫번째 테스트를 작성하는것이 좋습니다. </p>
<p><br>새로운 코드를 추가할때나 버그를 수정할때 말이죠. 바로 이것을 다음에 진행 해 볼 예정입니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>테스트 코드 작성은 실제 코드를 작성하기 이전에 이미 작성하는것이 좋지만. <br></p>
<p>코드가 이미 몇천줄 작성이 되어 있더라도 언제든 테스트 코드를 작성하는것은 늦지 않습니다.</p>
<p><br><br></p>
<p>이미 작성된 코드가 너무 방대할 경우, 해당 코드에 새로운 기능을 추가하거나 버그를 고치는 코드를 작성할때 테스트 코드 작성을 시작해도 늦지 않습니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>튜토리얼</tag>
        <tag>자동화테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part5 - 1편</title>
    <url>/2020/05/01/Writing-your-first-Django-app-part5-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="자동화된-테스트-소개하기"><a href="#자동화된-테스트-소개하기" class="headerlink" title="자동화된 테스트 소개하기"></a>자동화된 테스트 소개하기</h2><br>

<p>튜토리얼 part4 에 이어서 진행합니다</p>
<p><br>튜토리얼을 통해서, 현재까지 Web-poll 어플리케이션을 만들었습니다. </p>
<p><br>이번 part 5 에서는, 자동화된 테스트를 생성해 봅니다. </p>
<br>

<br>

<h2 id="자동화-테스트란"><a href="#자동화-테스트란" class="headerlink" title="자동화 테스트란?"></a>자동화 테스트란?</h2><br>

<br>

<p>자동화 테스트는 코드의 동작을 체크하는 루틴 입니다. </p>
<br>

<a id="more"></a> 

<br>

<p>테스팅은 모두 다른 단위로 행해집니다. 어떤 테스트는 아주 작은 세부 사항을 테스트를 합니다 (예, 특정 모델 메서드가 예상된 값을 반환하는지) </p>
<br>

<p>반면, 어떤 또다른 테스트는 전반적인 소프트웨어의 동작을 테스트 합니다 (예, 사용자 입력값의 순서가 요구하는 결과를 도출해 내는가?) </p>
<br>

<p>튜토리얼 part 2 에서 쉘을 이용하여 메서드의 동작과 어플리케이션 실행 그리고 데이터를 입력해서 어떻게 동작하는지 확인해 보았던것과 다르지 않습니다. </p>
<br>

<p>자동화 테스트가 다른점은, 시스템에서 자동으로 테스트를 실행해 볼수 있다는 점입니다. </p>
<p><br>테스트를 한번 생성하고, 앱에 변경 사항들을 만듭니다. 그리고, 생성한 테스트로 코드가 원래 의도했던대로 작동하는지에 대한 확인을. 시간과 귀찮음을 들여서 수동으로 테스트할 필요 없이, 자동으로 테스트를 해볼수 있습니다. </p>
<br>

<br>

<h2 id="왜-테스트가-필요한가"><a href="#왜-테스트가-필요한가" class="headerlink" title="왜 테스트가 필요한가?"></a>왜 테스트가 필요한가?</h2><br>

<br>

<p>어째서 테스트가 필요한가, 그리고 지금 왜 필요할까요? </p>
<p><br>지금까지 단지 python/django 를 배우는것만 해도 충분하다고 느낄수 있고, 다른것을 배워야 하는것이 버겁고 불필요하게 느껴질수 있습니다. 튜토리얼에서 작성한 투표앱은 현재 잘 동작하고. 자동화 테스트를 생성하는 괴로움이 잘 동작하고 있는 투표앱을 더 나은 앱으로 만들것 같지 않습니다. </p>
<br>

<p>투표앱이 우리가 작성할 마지막 Django 프로그램 이라면, 자동화 테스트를 생성하는 괴로움은 불필요할지 모릅니다.<br> 하지만, 투표앱이 우리가 작성할 마지막 단계의 Django 프로그래밍이 아니기 때문에, 지금이 배우기 가장 적절한 때입니다. </p>
<br>

<br>

<h3 id="테스트는-시간을-절약해-줍니다"><a href="#테스트는-시간을-절약해-줍니다" class="headerlink" title="테스트는 시간을 절약해 줍니다"></a>테스트는 시간을 절약해 줍니다</h3><br>

<p>지금까지는, ‘잘 작동하는것 같아 보이면’ 만족스러운 테스트 결과 였습니다. </p>
<p><br>하지만, 좀 더 복잡한 어플리케이션에서는, 각 앱의 구성요소들 끼리 더 복잡한 상호 작용들을 가지게 됩니다. </p>
<p><br>어떤 구성요소의 변경 사항은 예상치 못한 앱 동작의 결과를 초래할수 있습니다. 이것을 ‘잘 작동하는것 같아 보여’ 라고 테스트 한다는것은, 코드의 기능들을 20개의 다른 테스트 데이터를 가지고 실행 해 보아야 하는데, 어떤것도 잘못된것이 없다는것을 증명하기 위해서 사용하는 시간들은. 시간을 쓰는 좋은 방법이 아닙니다. </p>
<br>

<br>

<p>특히, 자동화 테스트가 테스트를 몇초 안에 끝낼수 있는 상황이면, 이것은 전적으로 맞는 이야기 입니다. 만약 어떤것이라도 잘못 되었을때, 테스트는 예상치 못한 동작들을 찾아내는데 도움이 됩니다. </p>
<br>

<p>때때로, 코드가 정상적으로 잘 작동할때, 흉측하고 재미없는 테스트들을 작성하는 상황에 직면하는것은 우리를 생산성 잇고 창의적인 프로그래밍 작업과 멀어지게 하는일이 될수도 있습니다. </p>
<br>

<p>하지만! 테스트를 작성하는것은, 테스트를 수동으로 진행 하는것에 몇시간을 쏟거나 새로 발견된 문제점들을 찾아내는것 보다는 좀 더 생산적입니다. </p>
<br>

<br>

<h3 id="테스트는-문제점들을-방지해-줍니다"><a href="#테스트는-문제점들을-방지해-줍니다" class="headerlink" title="테스트는 문제점들을 방지해 줍니다"></a>테스트는 문제점들을 방지해 줍니다</h3><br>

<br>

<p>테스트는 문제점들을 찾아내기만 하는게 아니라, 문제점들을 방지해 줍니다. 테스트가 개발의 안좋은 점 이라고 생각하는것은 잘못 된 생각입니다. </p>
<br>

<p>테스트 없이는, 어플리케이션의 목적과 의도된 코드의 동작들이 불투명 해질수 있습니다. </p>
<p><br>본인이 직접 작성한 코드일지라도, 때로 그 코드들을 가지고 정확히 무엇을 수행하는지 찾아내야 할때가 있습니다.<br><br></p>
<p>테스트는 이러한 점을 바꿉니다. 테스트는 코드를 내부에서부터 보고, 무언가가 잘못되었을때 어떤 부분이 잘못 되었는지 비추어 줍니다. 본인이 어떤것이 잘못 되었는지에 대해 깨닫지 못했을때에도 어떤게 잘못 되었는지에 대해 비추어 줄수 있습니다.<br><br></p>
<h3 id="테스트는-코드를-좀더-매력적으로-만들어-줍니다"><a href="#테스트는-코드를-좀더-매력적으로-만들어-줍니다" class="headerlink" title="테스트는 코드를 좀더 매력적으로 만들어 줍니다"></a>테스트는 코드를 좀더 매력적으로 만들어 줍니다</h3><p><br><br></p>
<p>우리는 매우 엄청난 소프트웨어를 만들었을지 모릅니다. 하지만 다수의 다른 개발자들은 아무리 좋은 소프트웨어라도 그것을 보는것을 거부할지도 모릅니다. 왜냐하면, 테스트 하기에 어려움이 있을지 모르기 때문입니다. 테스트가 없이는, 엄청난 소프트웨어라는것을 믿지 않을것입니다. Django 의 기본 개발자인 Jacob Kaplan-Moss 는, “테스트가 없는 코드는 디자인적으로 깨져 잇는 코드” 라고 했습니다. </p>
<br>

<p>다른 개발자들은 소프트웨어를 심각하게 고려 하기 이전에, 소프트웨어 내의 테스트들을 확인 하기를 원합니다. </p>
<br>

<br>

<h3 id="테스트는-팀원들이-함께-일하게-도와줍니다"><a href="#테스트는-팀원들이-함께-일하게-도와줍니다" class="headerlink" title="테스트는 팀원들이 함께 일하게 도와줍니다"></a>테스트는 팀원들이 함께 일하게 도와줍니다</h3><p><br><br></p>
<p>이전까지는, 한명의 개발자가 어플리케이션을 유지 보수하는 시점에서만 작성이 되었습니다<br></p>
<p>하지만, 복잡한 어플리케이션들은 팀 단위로 유지 보수가 됩니다.<br><br></p>
<p>테스트들은 동료들이 좋지 않은 방향으로 당신이 작성한 코드들을 고치는것을 방지해 줍니다. 그리고, 다른 사람들이 작성한 코드들도 알지도 못하면서 바꾸는것을 방지해 줍니다. </p>
<br>

<p>만약, Django 프로그래머로 살아가고 싶다면, 테스트 작성하는것을 잘 할줄 알아야 합니다.<br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>테스트 코드들을 작성하는것은 어렵고, 지루하고, 재미 없습니다. </p>
<br>

<p>하지만, 테스트 코드를 작성하고, 자동화 된 테스트를 진행하면서 소프트웨어의 완성도도 높이고, 코드의 퀄리티도 높일수 있습니다. <br></p>
<p>협업을 할때에도 많은 도움이 되고, 본인이 작성하는 코드에 대한 이해도도 더 높아집니다. <br></p>
<p>좋은 Django 개발자가 되기 위해서는, 자동화 테스트를 잘 알아야 합니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>튜토리얼</tag>
        <tag>자동화테스트</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part4 - 2편</title>
    <url>/2020/04/30/Writing-your-first-Django-app-part4-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="Generic-뷰-사용하기"><a href="#Generic-뷰-사용하기" class="headerlink" title="Generic 뷰 사용하기"></a>Generic 뷰 사용하기</h2><br>

<p>적은 코드가 낫다 </p>
<br>

<p>Part3 에서 detail() 과 results() 뷰들은 매우 짧지만, 중복이 됩니다. </p>
<p>index() 뷰도 비슷하고, 투표 리스트를 출력합니다. </p>
<br>

<p>이 뷰들은 공통적인 기본 웹개발 방법을 대표합니다. </p>
<br>

<ol>
<li>URL 에서 전달된 파라미터에 따라서 데이터를 데이터베이스에서 가져오고 </li>
<li>템플릿을 읽고 처리된 템플릿을 반환합니다 </li>
</ol>
<br>

<p>이것은 매우 공통된 부분이기 때문에, 이것을 쉽게 다룰수 있는 generic view 시스템을 Django 가 제공합니다. </p>
<br>

<a id="more"></a>

<br>

<h2 id="왜-GenericView-인가"><a href="#왜-GenericView-인가" class="headerlink" title="왜 GenericView 인가?"></a>왜 GenericView 인가?</h2><br>

<br>

<p>Generic view 는 웹개발에서 공통된 패턴들에 대해서 <br>더이상 파이썬 코드들을 쓸 필요가 없는 지점까지 추상화 합니다. </p>
<br>

<p>튜토리얼에서 작업하고 있었던 polls 앱을 generic view 를 사용하도록 전환 해 봅시다. <br></p>
<p>몇가지 코드를 지우고도 사용할수 있게 됩니다! 전환을 위해서 다음 스텝들을 거쳐 갑니다. </p>
<br>

<ol>
<li>URLConf 바꾸기 </li>
<li>불필요하고 오래된 코드 삭제하기 </li>
<li>Django 의 genericview 를 기반으로 하는 새로운 코드 쓰기 </li>
</ol>
<br>

<blockquote>
<p><strong>왜 코드를 다시 작업하는가?</strong> </p>
<p>보통 Django 앱을 작성할때에는, </p>
<p>generic view 를 사용하는것이 문제 해결에 도움이 되는지에 대해 먼저 파악 합니다.</p>
<p>코드를 중간에 리펙토링 하지 않고, 처음부터 generic view 를 사용합니다. </p>
<p>튜토리얼에서는, 단지 의도적으로 주요 컨셉에 집중하기 위해서 </p>
<p>어려운 방식으로 뷰를 작성 했었던것 뿐입니다. </p>
</blockquote>
<br>

<br>

<h2 id="Generic-view-로-전환"><a href="#Generic-view-로-전환" class="headerlink" title="Generic view 로 전환"></a>Generic view 로 전환</h2><br>

<h3 id="Views-수정하기"><a href="#Views-수정하기" class="headerlink" title="Views 수정하기"></a>Views 수정하기</h3><br>

<p>index, detail 그리고 results 뷰들의 오래된 코드들을 삭제하고, django 의 generic view 를 사용해 봅니다. generic view  를 사용하기 위해서, polls/views.py 파일을 열고, 아래와 같이 코드를 바꾸어 줍니다. </p>
<br>



<blockquote>
<p>polls/views.py 파일을 열고, 아래 뷰들을 수정해 줍니다. </p>
<p>index()</p>
<p>detail()</p>
<p>results()</p>
<p>vote() 는 수정해 주지 않습니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></span><br><span class="line">    template_name = <span class="string">'polls/index.html'</span></span><br><span class="line">    context_object_name = <span class="string">'latest_question_list'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return the last five published questions."""</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">'polls/detail.html'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">'polls/results.html'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    ... <span class="comment"># same as above, no changes needed.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>여기서 우리는 두개의 generic view 를 사용합니다. ListView 와 DetailView 입니다. </p>
<br>

<blockquote>
<p>ListView 는 “모든 객체의 리스트를 출력하기” </p>
<p>DetailView 는 “디테일 페이지 출력하기” </p>
<p>이 두가지 아이디어를 요약 하여, genericview 가 만들어 졌습니다. </p>
</blockquote>
<br>

<br>

<ul>
<li>각 generic view 들은 어떤 모델을 사용해서 작동해야 할지 알아야 합니다. 이것은 model 속성들 사용에 의해서 주어집니다. </li>
<li>DetailView  는 URL 에서 켑쳐된 Primary Key 를 기대하고 있기 때문에, question_id 를 pk 로 바꿔줍니다. </li>
</ul>
<br>

<h2 id="DetailView"><a href="#DetailView" class="headerlink" title="DetailView"></a>DetailView</h2><br>

<p>﻿기본값으로 <code>DetailView</code> 는 <code>&lt;appname&gt;/&lt;model name&gt;_detail.html</code>템플릿 형태를 사용합니다. 튜토리얼 예시에서는 “polls/question_detail.html” 템플릿을 사용할것 입니다.</p>
<br>

<blockquote>
<p>﻿</p>
<p>하지만, 이번 튜토리얼에서는 template_name = “polls/detail.html” 을 둠으로써,</p>
<p>기존에 만든 템플릿을 사용하게 하였습니다.</p>
<p>template_name 속성은,</p>
<p>기본으로 정해진 템플릿명 대신에 django에게 특정 템플릿 이름을 사용하게 합니다.</p>
<p>﻿</p>
</blockquote>
<br>

<p>﻿template_name 속성을 results 리스트 뷰에도 명시하여, <br>기존에 사용했던 results view 와 detail view 가 화면에 출력 될때, 다르게 render 되게 만듭니다.<br> 이렇게 되면 두 뷰가 같은 DetailView 라고 해도, 다르게 표시가 됩니다.</p>
<p><br><br></p>
<h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><br>

<p><br>﻿</p>
<p>비슷한 맥락으로, ListView 는 기본 템플릿으로 <code>&lt;app name&gt;/&lt;model name&gt;_list.html</code>을 사용합니다.<br></p>
<p>하지만, 우리는 tempalte_name = ‘polls/index.html’ 템플릿으로 명시를 해줌으로써,<br> ListView 가 기존에 있던 ‘polls/index.html’ 템플릿을 사용하도록 설정해줍니다.</p>
<p>﻿<br><br></p>
<p>﻿이전 튜토리얼 과정에서, 템플릿들은 question 과 lastest_question_list 컨텍스트 변수들을 가지고 있는 컨텍스트들을 전달 받았었습니다.<br> DetailView 는 question 변수가 자동으로 주어집니다. 이것은 모델명을 기반으로 가져오는것이라, <br>자동으로 DetailView 가 적절한 컨텍스트 변수명을 판단하여 가져옵니다.</p>
<br>

<blockquote>
<p>﻿</p>
<p>ListView 에 context 변수명 속성을 명시해 줍니다</p>
<p>context_object_name = latest_question_list</p>
<p>ListView는 기본적으로 자동으로 생성하는 컨텍스트 변수명은 question_list 입니다. 이 context 변수명을 명시를 해주기 위해서,</p>
<p>context_object_name 속성을 지정해 줍니다.</p>
<p>﻿</p>
</blockquote>
<br>



<p>context_object_name 을 지정해주고 싶지 않다면, 그냥 템플릿에서 context 변수명들을 바꾸어 주면 됩니다. </p>
<br>

<br>

<h2 id="URL-세팅해주기"><a href="#URL-세팅해주기" class="headerlink" title="URL 세팅해주기"></a>URL 세팅해주기</h2><p><br><br></p>
<p>views.py 에 있는 뷰들이 generic view  들인 클래스 뷰들로 바뀌었습니다. </p>
<p>vote  를 제외한 index, detail 그리고 results 뷰들이 바뀌었고. 이것들이 url 에서 호출되도록 변경해주어야 합니다. </p>
<br>

<br>

<p>﻿polls/urls.py 파일을 열어서, index, detail 그리고 results 뷰에 대한 URL설정을 고쳐줍니다.</p>
<br>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'polls'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">""</span>, views.IndexView.as_view(), name=<span class="string">'index'</span>),</span><br><span class="line">    path(<span class="string">'specifics/&lt;int:pk&gt;/'</span>, views.DetailView.as_view(), name=<span class="string">'detail'</span>), </span><br><span class="line">    <span class="comment"># &lt;int:question_id&gt; 를 &lt;int:pk&gt; 로 바꾸어줌 </span></span><br><span class="line">    path(<span class="string">'&lt;int:pk&gt;/results/'</span>, views.ResultsView.as_view(), name=<span class="string">'results'</span>),</span><br><span class="line">    <span class="comment"># &lt;int:question_id&gt; 를 &lt;int:pk&gt; 로 바꾸어줌 </span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>



<br>

<blockquote>
<p>﻿</p>
<p>IndexView, DetailView 그리고 ResultsView 는</p>
<p>클래스 기반의 generic view 입니다.</p>
<p>이 뷰들을 URL에서 호출하려면,</p>
<p>view 뒤에 as_view() 함수를 붙여줘야 잘 작동합니다.</p>
<p>그리고, <a href="int:question_id">int:question_id</a> 를 <a href="int:pk">int:pk</a> 로 바꾸어줘야 작동합니다.</p>
<p>왜냐하면, DetailView 는 pk 를 인자로 받기 때문입니다.</p>
<p>﻿</p>
</blockquote>
<br>



<br>

<p>서버를 시작하고, 한번 시험해 봅니다. IndexView 호출 </p>
<br>

<img src="/2020/04/30/Writing-your-first-Django-app-part4-2%ED%8E%B8/image1.png" class=""> 

<br>

<p>DetailView 호출 </p>
<img src="/2020/04/30/Writing-your-first-Django-app-part4-2%ED%8E%B8/image2.png" class=""> 

<br>

<p>ResultsView 호출 </p>
<img src="/2020/04/30/Writing-your-first-Django-app-part4-2%ED%8E%B8/image3.png" class=""> 

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>사전 지식 없이 튜토리얼만 보고 공부 시작했다가 낭패 봤습니다. </p>
<p>겨우겨우 찾아서, 클래스 기반의 뷰들을 작성 해보았지만.. 알아내기 힘들었습니다. </p>
<br>

<p>폼과 generic view 와 친숙해 졌으면, part5 로 넘어갑니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>튜토리얼</tag>
        <tag>genericviews</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part4 - 1편</title>
    <url>/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="최소한의-폼-작성하기"><a href="#최소한의-폼-작성하기" class="headerlink" title="최소한의 폼 작성하기"></a>최소한의 폼 작성하기</h2><br>

<br>

<p>튜토리얼 part3 에 이어서, 계속 진행 합니다. Web-poll 어플리케이션을 이어서 진행하고. </p>
<br>

<p>part4 에서는 form 프로세싱과 코드양을 줄이는데 집중합니다. </p>
<br>

<p>polls/detail.html 수정하기 </p>
<br>

<blockquote>
<p>지난 포스팅까지 작성한 </p>
<p>디테일 템플릿 polls/detail.html  파일에 </p>
<p>html <code>&lt;form&gt;</code> 요소를 추가하여 업데이트 해줍니다. </p>
</blockquote>
<br>

<a id="more"></a>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> error_message %&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; error_message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'polls:vote' question.id %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"choice"</span> <span class="attr">id</span>=<span class="string">"choice</span></span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; choice.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"choice</span></span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; choice.choice_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Vote"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>빠른 설명: </p>
<br>

<ul>
<li><p>위 템플릿은 각각의 Question 의 Choice 를 라디오 버튼으로 표시해 줍니다.  각 라디오 버튼의 Value 값은 질문에 붙어 있는 Choice 의 ID 가 됩니다. 각 라디오 버튼의 이름은 choice 가 됩니다. 이것이 의미하는 바는, 누군가가 하나의 라디오 버튼을 누르고 폼을 제출하면, 폼은 POST데이터 <code>choice=#</code> 을 전송합니다. <code>#</code>은 선택된 choice  의 ID 값입니다. </p>
</li>
<li><pre><code class="django"><span class="xml">form 에 action 은 <span class="comment">{% url 'polls:vote' question.id %}</span> 를 설정해줍니다. </span>
<span class="xml"><span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  form의 method  는 POST 로 설정해 줍니다. Form 의 method 를 POST 로 설정해 주는것은 중요합니다. 왜냐하면, 이 form 을 제출한다는것은 서버쪽의 데이터를 변경할것이기 때문입니다. 언제든 서버쪽 데이터를 바꾸고 싶으면, method&#x3D;&quot;POST&quot; 를 사용하면 됩니다. Django 에만 국한된 이야기가 아니라, 전반적으로 좋은 웹개발을 위한 연습이 됩니다. </span><br><span class="line"></span><br><span class="line">- forloop.counter 는 for 태그가 반복문의 몇번을 수행했는지 표시합니다</span><br><span class="line"></span><br><span class="line">- POST 폼을 생성하고 있기 때문에, 우리는 &#96;Cross Site Request Forgeries&#96;. 즉, 사이트간 요청 위조에 대해서 걱정해야 합니다. 감사하게도, 이것에 대해서 너무 걱정할 필요가 없습니다. Django 는 이것에 대한 아주 요용한 시스템을 갖추고 있습니다. </span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;django</span><br><span class="line">  내부 URL 을 타겟으로 하는 모든 POST 폼들은 &#123;% csrf_token %&#125; 템플릿 테그를 사용해 줍니다.</span><br></pre></td></tr></table></figure></span></span>


</code></pre>
</li>
</ul>
<br>

<br>

<h2 id="CSRF-사이트간-요청-위조"><a href="#CSRF-사이트간-요청-위조" class="headerlink" title="CSRF (사이트간 요청 위조)"></a>CSRF (사이트간 요청 위조)</h2><br>



<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">내부 URL 을 타겟으로 하는 모든 POST 폼들은 </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="xml"> 템플릿 테그를 사용해 줍니다.</span></span><br></pre></td></tr></table></figure>



<br>

<blockquote>
<p>Cross-site Request Forgery (CSRF, XSRF) 는, </p>
<p>웹사이트 취약점 공격의 하나로, 사용자가 자신의 의지와는 무관하게</p>
<p>공격자가 의도한 행위 (수정, 삭제, 등록) 을 웹사이트에 요청하게 하는 공격을 의미합니다. </p>
<p>출처 : 위키백과 </p>
</blockquote>
<br>



<h2 id="URL-설정"><a href="#URL-설정" class="headerlink" title="URL 설정"></a>URL 설정</h2><p><br><br></p>
<p>이제 form 이 수행하는 Django view 를 수정해줘야 할 차례입니다. 전송된 데이터를 가지고 무언가를 수행할 django view 를 작성해 줍시다. part3 에서, vote 를 처리하는 url 설정을 해주었었습니다.</p>
<br>

<br>



<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/vote/', views.vote, name='vote'),</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="polls-views-py-수정하기"><a href="#polls-views-py-수정하기" class="headerlink" title="polls/views.py 수정하기"></a>polls/views.py 수정하기</h2><br>

<p>위 url 은 vote 함수를 불러옵니다. part3 에서, 이것을 처리하는 예시 view 를 작성했었는데, </p>
<p>이 polls/views.py 파일에서 vote() 함수를 아래와 같이 업데이트 해줍니다.</p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">'choice'</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="comment"># 투표 폼을 다시 출력 </span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, </span><br><span class="line">                  &#123; <span class="string">'question'</span>: question,</span><br><span class="line">                    <span class="string">'error_message'</span>: <span class="string">"You didn't select a choice"</span>,</span><br><span class="line">                    &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span> </span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="comment"># 항상 POST 데이터를 성공적으로 다루었을때는</span></span><br><span class="line">        <span class="comment"># HttpResponseRedirect 를 반환해 줍니다 </span></span><br><span class="line">        <span class="comment"># 이것으로 사용자가 데이터를 뒤로가기 버튼을 눌러서 데이터를 두번 전송하는것을 방지합니다. </span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'polls:results'</span>, args=(question.id,)))</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>위의 예시에는, 아직 우리가 공부하지 않은 몇가지가 있습니다. </p>
<br>

<ul>
<li><p><code>request.POST</code>는 사전 형태의 객체로 전송된 데이터를 key 이름으로 접근할수 있게 해줍니다. 해당 예시에서는, <code>request.POST[&#39;choie&#39;]</code>는 선택된 choice 의 ID 를 문자열 형태로 반환합니다. <code>request.POST</code> 값은 언제나 문자열로 되어 있습니다. </p>
</li>
<li><p>Django 는 <code>request.GET</code>도 지원합니다. GET 데이터를 접근할때 사용합니다. 하지만, 튜토리얼에서는, 명시적으로 <code>request.POST</code>를 사용합니다. 데이터를 바꿀때에는 <code>POST</code> 콜을 통해서만 작업합니다. </p>
</li>
<li><p>만약 choice 가 POST 데이터에서 제공되지 않았을때, <code>request.POST[&#39;choice&#39;]</code> 는 <code>KeyError</code>를 발생시킵니다. 위의 예시 코드는 choice 가 주어지지 않았을때, KeyError 를 확인하고 question 폼을 다시 표시합니다. </p>
</li>
<li><p>choice 카운트가 증가하였을때, 코드는 <code>HttpResponse</code> 대신에, <code>HttpResponseRedirect</code>를 반환합니다. <code>HttpResponseRedirect</code>는 하나의 인자, 즉 redirect 할 URL 을 받습니다. 위의 코드에 주석으로 나와 있듯이, POST 데이터를 성공적으로 다루었을때에는, <code>HttpResponseRedirect</code>를 반환하여, 데이터가 2번 전송되는것을 방지 합니다. </p>
</li>
<li><p><code>reverse()</code> 함수를 <code>HttpResponseRedirect</code>에 사용하는데. reverse() 함수는 view에서 하드코드된 URL 을 가지게 되는것을 방지합니다. <code>reverse(&#39;polls:results&#39;, args=(question.id))</code> 에서 보이듯, view 의 이름과 전달할 변수명을 받습니다. 해당 예시에서는, reverse() 함수가 아래와 같은 문자열을 반환 합니다.  </p>
</li>
<li><pre><code class="django"><span class="xml">reverse('polls:results', args=(quesiton.id,)) </span>

<span class="xml">'/polls/3/results/' </span>

<span class="xml"># 3 은 question.id 이고 </span>
<span class="xml"># Redirect 된 URL 은 'results' 뷰를 호출하여 마지막 페이지를 출력합니다 </span>
<span class="xml"><span class="comment"><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">part3 에서 다루었지만, request 는 HttpRequest 객체입니다. </span><br><span class="line"></span><br><span class="line">&lt;br&gt;HttpRequest 객체에 대해서 더 알고 싶으면, request and response 문서를 확인 하면 됩니다. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">누군가가 질문에 대한 투표를 마치면, vote() 뷰는 질문에 대한 results 페이지로 리다이렉트 시킵니다. 따라서, result view 도 바꿔줘야 합니다. </span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">## polls&#x2F;views.py (Results view) 수정</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">polls&#x2F;views.py 에 results() 함수를 아래와 같이 업데이트 해줍니다. </span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;django</span><br><span class="line">from django.shortcuts import get_object_or_404, render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def results(request, question_id):</span><br><span class="line">    question &#x3D; get_object_or_404(Question, pk&#x3D;question_id)</span><br><span class="line">    return render(request, &#39;polls&#x2F;results.html&#39;, &#123;&#39;question&#39;: question&#125;)</span><br></pre></td></tr></table></figure></span></span>
</code></pre>
</li>
</ul>
<br>

<br>

<p>part3 에서 봤던 detail() 뷰와 거의 흡사합니다만, template 이름만 다른것을 확인 할수 있습니다. </p>
<br>

<blockquote>
<p>results 뷰에서, </p>
<p>‘polls/results.html’에 render 를 해주는데.</p>
<p>polls/results.html 파일이 없습니다. <br></p>
<p>polls/results.html 파일을 생성하고, 아래와 같이 내용을 채워줍니다. </p>
</blockquote>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; choice.choice_text &#125;&#125;</span><span class="xml"> -- </span><span class="template-variable">&#123;&#123; choice.votes &#125;&#125;</span><span class="xml"> vote</span><span class="template-variable">&#123;&#123; choice.votes|<span class="name">pluralize</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'polls:detail' question.id %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Vote again?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure>





<br>

<br>

<blockquote>
<p>서버를 시작하고, 체크해봅니다. 브라우저에서 polls/ 로 접속합니다. </p>
</blockquote>
<br>

<img src="/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/image1.png" class=""> 

<br>



<blockquote>
<p>what’s up? 질문을 클릭합니다. </p>
</blockquote>
<br>

<img src="/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/image2.png" class="">

<br>

<blockquote>
<p>Not Much 를 선택하고 Vote 를 눌러봅니다 </p>
</blockquote>
<br>

<img src="/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/image3.png" class="">

<br>

<blockquote>
<p>아무것도 선택 안하고, </p>
<p>vote 버튼을 누르면, 에러가 표시될겁니다. </p>
</blockquote>
<br>

<img src="/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/image4.png" class=""> 

<br>

<p><strong>Race conditions</strong></p>
<br>

<p>vote() 뷰는 조그마한 문제점이 하나 있습니다. Votes 뷰는 첫번째로, selected_choice 객체를 데이터베이스에서 가져옵니다. 그리고, 새 votes 의 값을 계산하고 데이터베이스에 다시 저장합니다. </p>
<p>하지만, 만약 두명의 사용자가 동시에 vote 를 할때에는, 이것이 잘못 될수도 있습니다. </p>
<p>이것은 race condition 이라고 불리우는데, F() 함수를 사용해서 이점을 피할수도 있습니다. </p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>reverse() 함수를 자주 사용하던데, reverse 함수 사용법을 다시 숙지 해야 합니다. </p>
<p>그리고 F() 함수도 나중에 리뷰해야 할것 같습니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>튜토리얼</tag>
        <tag>forms</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part3 - 7편</title>
    <url>/2020/04/30/Writing-your-first-Django-app-part3-7%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="URL-이름공간-분리하기"><a href="#URL-이름공간-분리하기" class="headerlink" title="URL 이름공간 분리하기"></a>URL 이름공간 분리하기</h2><br>

<p>이번 튜토리얼은, polls 앱 하나 밖에 없습니다. </p>
<p>하지만, 실제 Django 프로젝트에서는, 프로젝트에서 사용되는 앱의 갯수가, 5개, 10개, 20개 혹은 그 이상이 될수 있습니다. </p>
<br>

<p>그렇다면, Django 는 URL 이름들을 어떻게 구분해야 할까요? </p>
<br>

<a id="more"></a> 

<br>

<blockquote>
<p>예를들어, </p>
<p>polls 앱은 detail view 를 가지고 있습니다. </p>
<p>하지만, polls 앱 외에 다른 앱인 blog 앱이 존재한다고 가정할때, </p>
<p>그 앱도 detail view 를 가지고 있을수 있습니다. </p>
</blockquote>
<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">그렇다면, </span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> %&#125;</span><span class="xml"> 태그안에서 어떻게 이 두가지의 detail view 를 구분할까요?</span></span><br></pre></td></tr></table></figure>



<br>

<h2 id="URLConf-에-이름공간-추가하기"><a href="#URLConf-에-이름공간-추가하기" class="headerlink" title="URLConf 에 이름공간 추가하기"></a>URLConf 에 이름공간 추가하기</h2><br>

<p>정답은, URLConf 에 이름공간들을 추가해 주는것입니다. </p>
<p><br>polls/urls.py 파일로 가서, app_name 을 추가해 줍니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">from django.urls import path</span></span><br><span class="line"></span><br><span class="line"><span class="xml">from . import views</span></span><br><span class="line"></span><br><span class="line"><span class="xml">app_name = 'polls'         # Namespace 를 추가해줍니다 </span></span><br><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">    path('', views.index, name='index'),</span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/', views.detail, name='detail'),</span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/results/', views.results, name='results'),</span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/vote/', views.vote, name='vote'),</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="URLConf-에-추가된-Namesapce-사용"><a href="#URLConf-에-추가된-Namesapce-사용" class="headerlink" title="URLConf 에 추가된 Namesapce 사용"></a>URLConf 에 추가된 Namesapce 사용</h2><br>

<p>polls/index.html 템플릿은 아래와 같이 작성되어 있습니다. (지난 포스팅) </p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'detail' question.id %&#125;"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>바뀐 namespace 를 적용하고, a 태그가 정확하게 polls 에 있는 detail  뷰를 가르키게 하려면, </p>
<p>아래와 같이 a 태그를 수정해 줍니다. </p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'polls:detail' question.id %&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> %&#125;</span><span class="xml"> 태그안에, </span></span><br><span class="line"><span class="xml">'polls:detail' 이라고 써주어서, polls 에 있는 detail path 라는것을 지정해 줍니다.</span></span><br></pre></td></tr></table></figure>



<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>polls 앱 말고, 다른 앱이 존재 한다면, namespace  를 분리하기 위해서, 아래 절차를 따르면 됩니다. </p>
<br>

<ol>
<li><p>해당 엡의 urls.py 에 app_name 을 지정 </p>
</li>
<li><p>템플릿에서 </p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> %&#125;</span><span class="xml">  태그안에 '앱이름:url명' 으로 url  연결</span></span><br><span class="line"></span><br><span class="line"><span class="xml">e.g. </span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'polls:detail' question.id %&#125;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
<br>

<p>뷰를 작성하는것이 편해졌다면, 이제 튜토리얼의 part 4 로 넘어갑니다. </p>
<p><br>part4 는, form  프로세싱과 generic 뷰에 대한 기본을 다룹니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>튜토리얼</tag>
        <tag>템플릿</tag>
        <tag>URL</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part3 - 6편</title>
    <url>/2020/04/28/Writing-your-first-Django-app-part3-6%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="템플릿에서-하드-코드된-코드-제거하기"><a href="#템플릿에서-하드-코드된-코드-제거하기" class="headerlink" title="템플릿에서 하드 코드된 코드 제거하기"></a>템플릿에서 하드 코드된 코드 제거하기</h2><br>

<br>

<p>polls/index.html 템플릿에서 question 에 연결된 링크를 기억해야 합니다. </p>
<p><br>해당 링크는 부분적으로 아래와 같이 하드 코드 되어 있습니다. </p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/&#123;&#123; question.id &#125;&#125;/"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<a id="more"></a>

<p>하드 코드된 코드들의 문제점은, </p>
<p><br>템플릿 수가 많아질때, URL 들을 바꾸는것이 굉장히 어려워 진다는 점입니다. </p>
<br>

<p>하지만 path() 함수내 polls.urls 모듈에 대한 인자를 정의 하여, 특정 URL에 대한 의존도를 없앨수 있습니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> %&#125;</span><span class="xml"> 템플릿 테그를 사용해서 이 작업을 수행합니다.</span></span><br></pre></td></tr></table></figure>

<br>

<p>polls/index.html 의 코드를 아래와 같이 바꿔줍니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'detail' question.id %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"># 참고 polls/urls.py </span></span><br><span class="line"></span><br><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">    path("", views.index, name='index'),</span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/', views.detail, name='detail'), </span></span><br><span class="line"><span class="xml">    # 위 a 태그 안에 'detail' 을 지정함 </span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/results/', views.results, name='results'),</span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/vote/', views.vote, name='vote'),</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> %&#125;</span><span class="xml"> 태그 안에,  'detail' 이름을 가진 url 주소를 정의하고, </span></span><br><span class="line"><span class="xml"> question.id 라는 인자를 넣어주었습니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">이러한 방식으로, polls.urls 모듈에 있는 URL 정의를 조회하여 <span class="tag">&lt;<span class="name">a</span>&gt;</span> 태그가 작업을 수행 합니다.</span></span><br></pre></td></tr></table></figure>



<br>

<blockquote>
<p>polls/specifics/12/ 같이 </p>
<p>detail view 를 보여주는 URL 주소명을 다른것으로 바꾸고 싶을때에는, </p>
<p>이전에는 polls/index.html 의 a 태그를 바꾸어 줬어야 했겟지만, </p>
<p>이제는 polls/urls.py 파일에 name=’detail’ 을 가진 path 를 </p>
<p>아래와 같이 고쳐주면 됩니다.  </p>
</blockquote>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">path('specifics/<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/', views.detail, name='detail'),</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>실험을 해보기 위해서, 브라우저에서 <a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/</a> 로 접속합니다.</p>
<p>What’s up? 질문이 화면에 출력이 됩니다. </p>
<br>

<img src="/2020/04/28/Writing-your-first-Django-app-part3-6%ED%8E%B8/image1.png" class="">

<br>

<br>

<p>이 What’s up? 을 클릭하면, polls/urls.py 에 있는 detail 뷰가 호출이 되고, <br> </p>
<p>아래 path() 를 참조하여, url을 찾아가고, detial 뷰가 실행 됩니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">path('specifics/<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/', views.detail, name='detail'),</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>브라우저에서  <a href="http://127.0.0.1:8000/polls/specifics/1/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/specifics/1/</a> 로 이동하게 됩니다. <br></p>
<p>그리고, 화면에 What’s up? 질문에 딸린 choice 들이 표시가 되겠죠. </p>
<br>

<br>

<img src="/2020/04/28/Writing-your-first-Django-app-part3-6%ED%8E%B8/image2.png" class="">

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>urls.py 파일안에  path() 함수 안에 URL name 을 짓고. </p>
<p>이 이름을 템플릿에서 사용할수 있습니다.  </p>
<br>



]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>템플릿</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part3 - 5편</title>
    <url>/2020/04/28/Writing-your-first-Django-app-part3-5%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="템플릿-시스템-사용하기"><a href="#템플릿-시스템-사용하기" class="headerlink" title="템플릿 시스템 사용하기"></a>템플릿 시스템 사용하기</h2><br>

<p>이전 포스팅에서 작성했던 detail() 뷰로 다시 돌아갑니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>



<br>

<blockquote>
<p>컨텍스트 변수 question 이 polls/html 로 전달이 되어 render 가 됩니다. </p>
</blockquote>
<br>

<a id="more"></a>

<p>polls/templates/polls/detail.html 템플릿을 아래와 같이 고쳐줍니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; choice.choice_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<br>

<p>템플릿 시스템은 변수의 속성들에 접근하기 위해서 <code>.</code> 을 찍어 조회를 하는, dot-lookup 형식을 사용합니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="xml"> 에서 </span></span><br><span class="line"></span><br><span class="line"><span class="xml">첫번째로 django 는 question 객체에 대한 사전을 조회 합니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml">두번째로, . 뒤에 question_text 라는 속성값을 조회 합니다.</span></span><br></pre></td></tr></table></figure>

<br>

<br>
서버를 시작하고, 브라우저를 열어서** [**http://127.0.0.1:8000/polls/1/**](http://127.0.0.1:8000/polls/1/) **에 접속하면,** 

<p><strong>아래와 같이 question 하나와, 해당 question에 있는 choice 들이 리스트 되어 있는것을 확인 할수 있습니다.</strong> </p>
<br>

<img src="/2020/04/28/Writing-your-first-Django-app-part3-5%ED%8E%B8/image1.png" class="">

<p><br><br></p>
<h2 id="메서드의-호출"><a href="#메서드의-호출" class="headerlink" title="메서드의 호출"></a>메서드의 호출</h2><br>

<br>



<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span><span class="xml">   </span></span><br><span class="line"><span class="xml"># question 에 붙어있는 선택들을 for 문으로 순회 시작 </span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; choice.choice_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"># 순회 하는동안 <span class="tag">&lt;<span class="name">li</span>&gt;</span> 태그 안에 하나씩 choice_text 들을 출력 </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml">                                  # for 문 종료</span></span><br></pre></td></tr></table></figure>





<br>

<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml">메써드의 호출은 </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> %&#125;</span><span class="xml"> 반복문에서 이루어집니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml">question.choice_set.all 은 파이썬 코드에서 question.choice_set.all() 로 해석이 됩니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">question.choice_set.all() 은 순회가능한 Choice 객체들을 반환하고, </span></span><br><span class="line"></span><br><span class="line"><span class="xml">이것은 </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> %&#125;</span><span class="xml"> 테그 안에서 사용하기 적합합니다.</span></span><br></pre></td></tr></table></figure>





<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>템플릿에 나오는 템플릿 언어의 구분이 많이 힘들었습니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> %&#125;</span><span class="xml"> 나 </span><span class="template-variable">&#123;&#123; question.choice_set.all &#125;&#125;</span><span class="xml"> 같은 템플릿 언어들 말입니다. </span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% %&#125;</span><span class="xml"> 어떠한 로직들을 불러오는 코드라고 생각하고 (예 조건문, 반복문) </span></span><br><span class="line"><span class="template-variable">&#123;&#123; &#125;&#125;</span><span class="xml"> 는 변수나 객체의 값들만 가지는 코드라고 이해하고 넘어갑니다.</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>템플릿</tag>
        <tag>templates</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part3 - 4편</title>
    <url>/2020/04/28/Writing-your-first-Django-app-part3-4%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="render-숏컷"><a href="#render-숏컷" class="headerlink" title="render() 숏컷"></a>render() 숏컷</h2><br>

<br>

<p>템플릿을 읽고, 컨텍스를 채우고, 렌더가 된 템플릿을 결과값으로 가진 HttpResponse 객체를 반환 하는 일은 매우 흔한 일입니다. 따라서, Django 는 이것에 대한 shortcut 함수를 제공합니다. </p>
<br>

<blockquote>
<p>render() 함수는 </p>
<p>템플릿을 읽고, context 를 채우고, </p>
<p>결과를 템플릿에 객체로 반환합니다. </p>
</blockquote>
<br>

<p>render() 함수를 알아보기 위해서, polls/views.py 에 index() 함수를 다시 써줍니다. </p>
<br>

<a id="more"></a> 

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="comment"># render 를 가져옵니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">'latest_question_list'</span>: latest_question_list&#125;</span><br><span class="line">    <span class="comment"># return HttpResponse(template.render(context, request)) 대신 아래 render() 를 써줍니다.</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, context)</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>render() 가 기존에 썼었던 HttpResponse 와 같은 작업을 수행하는것을 확인할수 있습니다. </p>
<br>

<blockquote>
<p>브라우저에서, 아래 URL로 접속해서 확인 합니다. </p>
<p><a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/</a></p>
</blockquote>
<br>

<img src="/2020/04/28/Writing-your-first-Django-app-part3-4%ED%8E%B8/image1.png" class=""> 



<br>

<blockquote>
<p>render() 를 사용하면, </p>
<p>loader 와 HttpResonse 모듈들을 불러오지 않아도 됩니다. </p>
</blockquote>
<br>

<p>render() 함수는 </p>
<br>

<ol>
<li>요청을 첫번째 인자로 받고, </li>
<li>템플릿 이름을 두번째 인자로 받고, </li>
<li>사전 형태의 자료를 선택적으로 세번째 인자로 받습니다. </li>
</ol>
<br>

<blockquote>
<p>render() 함수는, </p>
<p>주어진 context 들이 그려진 template 에 </p>
<p>HttpResponse 객체를 반환 합니다 </p>
</blockquote>
<br>

<h2 id="404-에러-발생-시키기"><a href="#404-에러-발생-시키기" class="headerlink" title="404 에러 발생 시키기"></a>404 에러 발생 시키기</h2><br>

<p>polls/views.py 에 있는 detail() 뷰를 한번 보겠습니다 (주어진 투표의 질문들을 나열하는 페이지). </p>
<p><br>Http404를 통해서, 404 에러를 발생시키는 detail 뷰는 아래와 같습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">"Question does not exist"</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>여기서 새로운 컨셉은 Http404 예외 인데, </p>
<p>요청된 ID 를 가진 question 이 존재하지 않을때 예외를 발생시킵니다. </p>
</blockquote>
<br>

<p>테스트를 진행 하기 위해서, polls/templates/polls/detail.html 파일을 생성하고, 아래 내용을 추가해 줍니다. </p>
<br>

<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; quetions &#125;&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>현재 데이터베이스에 있는 질문은 딱 1개로, </p>
<p>이전 과정에서 생성한 “What’s up?” 질문밖에 없으므로, </p>
<p>id 값이 2 인 질문은 존재하지 않습니다. </p>
</blockquote>
<br>

<p><a href="http://127.0.0.1:8000/polls/1/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/1/</a> 로 접속하면, </p>
<p>What’s Up? 질문이 페이지에 출력이 되겠지만. </p>
<br>

<p> <a href="http://127.0.0.1:8000/polls/2/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/2/</a> 로 접속하면, </p>
<p>출력할 질문이 없어서, 예외가 발생합니다. 이때 Http404 가 메시지를 출력할겁니다. </p>
<br>

<img src="/2020/04/28/Writing-your-first-Django-app-part3-4%ED%8E%B8/image2.png" class=""> 

<br>

<p>Quetion does not exist 가 잘 표시되는것을 확인할수 있습니다. </p>
<br>

<h2 id="get-object-or-404-숏컷-함수"><a href="#get-object-or-404-숏컷-함수" class="headerlink" title="get_object_or_404() 숏컷 함수"></a>get_object_or_404() 숏컷 함수</h2><br>

<p>get() 함수를 사용하고, 객체가 존재하지 않을때,<br></p>
<p>Http404 를 발생시키는것은 매우 빈번하게 일어나는 일입니다. Django 는 이것에 대한 숏컷도 제공합니다. </p>
<p><br>다시 쓰여진 detail() 뷰는 아래와 같습니다.<br></p>
<br>

<p>polls/views.py 에 detail() 뷰를 아래와 같이 수정해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="comment"># get_object_or_404 를 코드 상단에서 가져오는것을 잊지 않습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>get_object_or_404() 함수는 Django 모델을 첫번째 인수로 받고, 키워드 인수들을 두번째로 받습니다. </p>
<p>받은 인수들을 get() 함수에 전달하고, 객체가 존재하지 않으면 Http404 를 발생 시킵니다.  </p>
<p><br><br></p>
<blockquote>
<p>아래 캡쳐 화면을 통해서, </p>
<p>get_object_or_404() 가 잘 동작하는지 확인 해 봅시다. </p>
<p><a href="http://127.0.0.1:8000/polls/1/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/1/</a> 로 접속하면, </p>
<p>What’s Up? 질문이 페이지에 출력이 되겠지만. </p>
<p> <a href="http://127.0.0.1:8000/polls/2/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/2/</a> 로 접속하면, </p>
<p>출력할 질문이 없어서, 예외가 발생하는것은 같은데. </p>
<p>메시지가 “No Question matches the given query” 라고 표시됩니다. </p>
</blockquote>
<p><br><br></p>
<img src="/2020/04/28/Writing-your-first-Django-app-part3-4%ED%8E%B8/image3.png" class=""> 

<br>

<p>또한, get_list_or_404() 라는 함수도 존재합니다. get_object_or_404 와 비슷하게 동작하지만, </p>
<p>받은 인자들을 함수 대신, filter() 함수에 전달 합니다. <br></p>
<br>

<p>get_list_or_404() 함수는, 빈 리스트가 조회되었을때,  Http404 를 발생 시킵니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>장고 숏컷을 다시 리뷰 합니다. </p>
<br>

<ol>
<li>render() 함수 </li>
<li>Http404() 함수 </li>
<li>get_object_or_404() 함수 </li>
</ol>
<br>

<p>filter() 함수와 get() 함수의 차이점도 숙지하고 지나갑니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>view</tag>
        <tag>튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part3 - 3편</title>
    <url>/2020/04/27/Writing-your-first-Django-app-part3-3%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="실제로-무언가를-하는-view-작성하기"><a href="#실제로-무언가를-하는-view-작성하기" class="headerlink" title="실제로 무언가를 하는 view 작성하기"></a>실제로 무언가를 하는 view 작성하기</h2><br>

<p>각각의 뷰는 두가지중 하나를 실행 하도록 되어 있습니다. </p>
<br>

<ol>
<li>요청된 페이지의 컨텐츠를 포함하고 있는 HttpResponse 객체를 반환 </li>
<li>Http404 같은 예외를 발생 </li>
</ol>
<br>

<p>나머지 동작은, 개발자 마음대로 입니다~ </p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>view  는 데이터베이스에서 기록을 읽어 올수 있고, </p>
<p>Django 가 제공하는 혹은 파이썬 템플릿 시스템들을 사용 할수 있고. </p>
<p>PDF, XML, ZIP 같은 파일등을 생성할수도 있습니다 </p>
<br>

<p>어떤 파이썬 라이브러리든지 사용해서 View 가 작업을 수행할수 있습니다. </p>
</blockquote>
<br>

<p>편의성 측면에서, Django 가 원하는건 단지 두가지 뿐입니다. HttpResponse 혹은 예외 처리 뿐입니다. </p>
<br>

<p>Part 2 에서 진행 했었던, database API 를 사용해서, index() view  를 한번 실행 해 봅시다 </p>
<br>

<blockquote>
<p>polls/views.py 의 index 뷰를 </p>
<p>시스템에 존재하는 가장 최근의 질문들 5개를 출력하게 합니다 </p>
<p>질문들은 날짜별로 , 으로 구분되게 합니다 </p>
<br>

<p>index() 뷰를 아래와 같이 수정해 줍니다  </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    lastest_question_list = Question.obejcts.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>] </span><br><span class="line">    output = <span class="string">', '</span>.join([q.question_text <span class="keyword">for</span> q <span class="keyword">in</span> latest_question_list]) </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 다른 view 들 (detail, results, vote) 는 수정하지 않습니다. </span></span><br><span class="line"><span class="comment"># [q.question_text for q in latest_question_list] 는 list comprehension </span></span><br><span class="line"><span class="comment"># ', '.join 으로 list comprehension 안에 값들을 콤마로 구분 합니다</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>파트 2에서, Question.objects.all() API 를 둘러보았었는데, </p>
<p><br>이번에는, <code>Question.objects.order_by(&#39;-pub_date&#39;)[:5]</code> 가 나왔습니다. </p>
<br>

<blockquote>
<p>Question 에 있는 객체 중, </p>
<p>가장 최근의 pub_date 순으로 5개를 조회 하는 쿼리를 실행  </p>
<p>Question.objects.order_by(‘-pub_date’)[:5]</p>
<br>

<p>Question에 있는 모든 객체 조회 쿼리, </p>
<p>Question.objects.all() </p>
</blockquote>
<br>

<br>

<p>근데 여기에, 문제가 좀 있습니다. </p>
<p><br>뷰에 있는 HttpResponse 값은 하드코드가 된 페이지 디자인 입니다. 페이지의 모양을 바꾸고 싶으면, </p>
<p><br>이 파이썬 코드를 매번 바꿔줘야 합니다. 코드가 짧을때는 상관 없겠지만, 페이지가 길면, 더 큰 문제가 될수 있고. </p>
<p><br>무엇보다, 디자인이 예쁘지 않습니다. </p>
<br>

<br>

<blockquote>
<p>따라서, </p>
<p>Django의 템플릿 시스템을 사용하여 디자인과 파이썬 코드를 분리합니다 </p>
<p>view 가 사용할수 있는 템플릿을 생성해서 사용합니다. </p>
</blockquote>
<br>

<h2 id="Template-생성하기"><a href="#Template-생성하기" class="headerlink" title="Template 생성하기"></a>Template 생성하기</h2><br>

<br>

<h3 id="index-html-파일-생성하기"><a href="#index-html-파일-생성하기" class="headerlink" title="index.html 파일 생성하기"></a>index.html 파일 생성하기</h3><br>

<p>polls 폴더내에, templates 라는 폴더를 생성합니다. </p>
<p><br>Django 는 기본적으로 App 폴더안에 있는 Templates 폴더를 찾아서, Template 파일을 확인하고, 그것을 본 뒤에, 브라우저에 출력을 해줍니다. </p>
<br>

<p>polls 앱에서 사용하는 templates 는 polls/templates/ 폴더 안에 있는 파일들이겠죠? </p>
<br>

<blockquote>
<p>생성한 templates 폴더안에, index.html 파일을 생성합니다 </p>
<p>polls/templates/polls/index.html </p>
</blockquote>
<br>

<img src="/2020/04/27/Writing-your-first-Django-app-part3-3%ED%8E%B8/image1.png" class="">

<br>

<br>

<blockquote>
<p><strong>템플릿 이름 공간</strong></p>
<p>장고는 이름과 일치하는 첫번째 템플릿을 선택할 것이고, </p>
<p>다른 응용 프로그램에 같은 이름의 템플릿이 있다면, 장고는 그것을 구별할수 없습니다. </p>
<br>

<p>우리는 장고가 올바른 템플릿을 찾게 만들어줘야 하고, </p>
<p>이것을 확실히 하기 위한 가장 좋은 방법은, 그들의 이름을 붙여주는것입니다. </p>
<br>

<p>즉, 어플리케이션 자체를 위해 명명된 템플릿 폴더안에, </p>
<p>다시한번, 어플리케이션 이름을 가진 폴더를 생성하여 </p>
<p><code>(polls/templates/polls/index.html)</code></p>
<p>다른 이름공간에 존재하는 템플릿을 구분하게 만들어 주는 것입니다.  </p>
</blockquote>
<br>



<br>

<h3 id="index-html-파일-내용-추가"><a href="#index-html-파일-내용-추가" class="headerlink" title="index.html 파일 내용 추가"></a>index.html 파일 내용 추가</h3><br>

<p><code>polls/templates/polls/index.html</code> 파일에 아래 내용을 추가해줍니다. </p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/&#123;&#123; question.id &#125;&#125;/"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"># </span><span class="template-tag">&#123;% %&#125;</span><span class="xml"> 안에 들어 있는 내용들은 템플릿 언어 입니다. 로직 혹은 구문들을 사용할수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123;&#125;&#125;</span><span class="xml"> 안에 들어 있는 내용도 템플릿 언어 인데, 변수들을 표시할수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># html 에서 이 템플릿 언어를 사용하여, 해당 데이터들을 다룰수 있습니다.</span></span><br></pre></td></tr></table></figure>



<br>

<h3 id="View-에서-index-html-파일을-템플릿으로-사용"><a href="#View-에서-index-html-파일을-템플릿으로-사용" class="headerlink" title="View 에서 index.html 파일을 템플릿으로 사용"></a>View 에서 index.html 파일을 템플릿으로 사용</h3><p><br><br></p>
<p>polls/views.py 파일을 아래와 같이 수정해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader    <span class="comment"># 템플릿 파일을 불러오기 위한 loader 모듈 가져오기 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    template = loader.get_template(<span class="string">'polls/index.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># template 에 전달할 객체 latest_question_list 를 사전 형태로 저장 </span></span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'latest_question_list'</span>: latest_question_list,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(context, request))</span><br><span class="line">    <span class="comment"># render 를 사용하여, template에서 사용할 객체 latest_question_list 를 template 에 출력해줌</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>해당 코드는 polls/index.html 템플릿 파일을 읽어오고, 거기에 context 를 전달합니다. </p>
<p><br>context 는 사전형태로, 메핑된 파이썬 객체에 할당된 템플릿 변수 이름들입니다. <br><br></p>
<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="xml"># 이 템플릿 변수가 html 에 전달이 되면, </span></span><br><span class="line"><span class="xml"># 위에 나온 `</span><span class="template-tag">&#123;% %&#125;</span><span class="xml">` 나 `</span><span class="template-variable">&#123;&#123; &#125;&#125;</span><span class="xml">` 같은 템플릿 언어를 사용하여, 데이터들을 다룰수 있습니다.</span></span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>브라우저에 접속해서, </p>
<p><a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/</a> 에 접속합니다.</p>
<p>part2 에서 입력하였던, What’s up? 질문이 화면에 표시됩니다. </p>
</blockquote>
<br>

<img src="/2020/04/27/Writing-your-first-Django-app-part3-3%ED%8E%B8/image2.png" class=""><br><br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>처음에 굉장히 헷갈리는 개념입니다. </p>
<p>view 를 어떻게 작성해야 할지, <br></p>
<p>어떻게 URL에 연결해줘야 할지, <br></p>
<p>어떤 Template 을 끄집어내서 사용할지,,, <br><br></p>
<p>계속 아래 그림을 생각하면서, view 가 어떤 역할을 하는지 이해하려 하고 넘어갑니다. <br></p>
<img src="/2020/04/27/Writing-your-first-Django-app-part3-3%ED%8E%B8/image3.png" class="">]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>view</tag>
        <tag>튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part3 - 2편</title>
    <url>/2020/04/26/Writing-your-first-Django-app-part3-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="더-많은-view-쓰기"><a href="#더-많은-view-쓰기" class="headerlink" title="더 많은 view 쓰기"></a>더 많은 view 쓰기</h2><br>

<br>

<p>지난 포스팅에서 짧게 polls 앱에 필요한 views를 둘러보았습니다. </p>
<p><br>이제 몇개의 view 들을 polls/views.py 에 더 써줄겁니다. 추가될 view 들은 좀 다릅니다. </p>
<p><br>추가되는 view 들은 인수를 가집니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world. You're at the polls index."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're looking at question %s."</span> % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    response = <span class="string">"You're looking at the results of question %s."</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're voting on question %s."</span> % question_id)</span><br></pre></td></tr></table></figure>

<br>

<a id="more"></a>

<br>

<blockquote>
<p>새로 추가된 view 들을 URL과 연결해 줍니다 </p>
<p>polls/urls.py 에 아래와 같이 각 view 들을 URL 과 연결해 줍니다 .</p>
</blockquote>
<br>

<br>

<h2 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h2><p><br><br></p>
<p>참고로, <code>HttpResponse</code> 함수는, 단순히 괄호안에 들어간 값을 브라우저에 출력해 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views         <span class="comment"># polls/views.py 를 가져옴</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 예: /polls/</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/polls/ 로 접속시, views 에 있는 index 함수 호출후 실행 </span></span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 예: /polls/5/</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/polls/5/ 로 접속시, views 에 있는 detail 함수 호출후 실행 </span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 예: /polls/5/results/</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/polls/5/results/ 로 접속시, view 에 있는 results 함수 호출후 실행 </span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 예: /polls/5/vote/</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/polls/5/vote/ 로 접속시, view 에 있는 vote 함수 호출후 실행  </span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls</a>/34 도 브라우저에서 실행 해서 한번 봅니다. 이렇게 하면, views 에 있는 detail() 메서드가 실행되고, URL에 포함되어 있는 어떤 ID 값을 인수로 받아서 화면에 결과값이 출력됩니다. </p>
 <br>

<p><a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls</a>/34/results <br></p>
<p><a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls</a>/34/vote 도 실행 해 보세요. </p>
<br>

<p><strong>HttpResponse 함수가 실행되고, 단순히 괄호안에  들어간 값을 브라우저에 출력해 줍니다.</strong><br><br></p>
<blockquote>
<p>누군가가 웹사이트에 있는 페이지를 요청 하면, </p>
<p>예를들어, <a href="http://127.0.0.1:8000/polls/34/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/34/</a></p>
<br>

<p>Django 는 RootURL 설정으로인해 mysite/urls.py 파이썬 모듈을 읽어 들입니다. </p>
<p>루트 URL 설정으로 경로가, </p>
<p><code>path(&#39;polls&#39;, include(&#39;polls.urls&#39;))</code>로 설정되어 있기 때문에, </p>
<p>polls/urls.py 에 있는 url 설정이 불러져서 작동합니다. </p>
</blockquote>
<p><br><br></p>
<h2 id="lt-int-question-id-gt-는-인자"><a href="#lt-int-question-id-gt-는-인자" class="headerlink" title="&lt;int:question_id&gt;는 인자"></a><code>&lt;int:question_id&gt;</code>는 인자</h2><br>

<p>polls/ 가 URL 경로에 매칭이되고, polls.urls 로 넘어가는데. </p>
<p>polls/34/  라는 URL 경로에 들어가면, 34 가 <code>&lt;int:question_id&gt;</code> 와 매칭이 됩니다, 따라서 detail() 뷰를 호출할때. 이것을 인자로 넘겨줍니다.</p>
<p><br><br></p>
<blockquote>
<p>URL 의 확장자는 붙여줄 필요는 없지만, </p>
<p>원한다면 붙여주어도 괜찮습니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">path(<span class="string">'polls/latest.html'</span>, views.index),</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p>아직도 좀 헷갈리는 부분이긴 한데. </p>
<p>url 을 통해서 요청을 받고, 그 요청을 view 에서 처리한다는 개념을 다시 복습하고 갑니다. </p>
<p>url 을 통해서 요청을 받을때, 그 요청에 인수까지 받아서 view 에 있는 함수에 전달해 줄수 있다. </p>
<p>이런식으로 개념을 잡고 넘어갑니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>view</tag>
        <tag>튜토리얼</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part3 - 1편</title>
    <url>/2020/04/25/Writing-your-first-Django-app-part3-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="Part-3-Overview"><a href="#Part-3-Overview" class="headerlink" title="Part 3 Overview"></a>Part 3 Overview</h2><br>

<p>이번 튜토리얼은 part2 에 이어서, part 3  를 진행합니다. </p>
<p><br>여전히 투표 어플리케이션에 대해 진행이 됩니다. </p>
<br>

<blockquote>
<p>Public Interface 인 “view” 에 집중합니다. </p>
<p>복습을 위해, 아래 그림들을 이전 포스팅에서 가져 왔습니다. </p>
</blockquote>
<br>

<img src="/2020/04/25/Writing-your-first-Django-app-part3-1%ED%8E%B8/image1.png" class="">

<br>

<p>view 란 Django 안에 있는 하나의 웹페이지 종류로, 보통 특정 기능과 특정 템플릿에 대해 수행합니다. </p>
<p><br><a id="more"></a></p>
<p>예를들면, 블로그 어플리케이션은 아래 view 들이 필요할수 있습니다. </p>
<br>

<br>

<img src="/2020/04/25/Writing-your-first-Django-app-part3-1%ED%8E%B8/image2.png" class=""> 

<br>

<table>
<thead>
<tr>
<th><strong>블로그 어플리케이션에 필요할수 있는 view 목록</strong></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>블로그 홈페이지</td>
<td>가장 최근의 게시글 몇개를 표시합니다</td>
</tr>
<tr>
<td>게시글 디테일 페이지</td>
<td>하나의 게시글을 위한 특정페이지의 영구적인 주소</td>
</tr>
<tr>
<td>연도별 아카이브 페이지</td>
<td>해당 연도에 작성된 모든 게시글들 표시</td>
</tr>
<tr>
<td>월별 아카이브 페이지</td>
<td>해당 월에 작성된 모든 게시글들 표시</td>
</tr>
<tr>
<td>일별 아카이브 페이지</td>
<td>해당 일에 작성된 모든 게시글들  표시</td>
</tr>
<tr>
<td>커멘트 엑션</td>
<td>해당 포스트에 다른 커멘트들을 관리</td>
</tr>
</tbody></table>
<br>

<br>

<h2 id="Polls-앱에-필요한-view-목록"><a href="#Polls-앱에-필요한-view-목록" class="headerlink" title="Polls 앱에 필요한 view 목록"></a>Polls 앱에 필요한 view 목록</h2><br>

<table>
<thead>
<tr>
<th><strong>Polls 어플리케이션에 필요한 View 목록</strong></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>Question 인덱스 페이지</td>
<td>가장 최근에 등록된 질문 몇개들을 표시</td>
</tr>
<tr>
<td>Question 디테일 페이지</td>
<td>결과를 제외한 질문의 텍스트를 표시, 투표를 할수 있는 양식 제공</td>
</tr>
<tr>
<td>Question 결과 페이지</td>
<td>해당 투표질문의 결과를 표시</td>
</tr>
<tr>
<td>투표 액션</td>
<td>특정 투표질문에 있는 특정 옵션의 투표를 관리</td>
</tr>
</tbody></table>
<br>

<br>

<p>Django 에서는, 웹페이지들과 다른 컨텐츠가 view 로 전달이 되어서 나옵니다. 각각의 view 는 python 함수로 표시가 됩니다 (혹은, 클래스기반 view 일 경우, 메서드로 표시가 됩니다) </p>
<br>

<blockquote>
<p>Django 는 요청된 URL 을 확인하여, </p>
<p>어떤 view 를 호출할것인가 판단합니다. </p>
<p>한마디로, 도메인 이름 뒤에 붙는 URL 부분을 확인하여, View 를 호출합니다. </p>
</blockquote>
<br>

<p>웹 서핑을 하면서 한번쯤은 이런 URL을 본적이 있을겁니다 “ME2/Sites/dirmod.asp?sid=&amp;type=gen&amp;mod=Core+Pages&amp;gid=A6CD4967199A42D9B65B1B” </p>
<br>

<p>Django 에서는 이것보다는 더 엘레강스한 URL 패턴들을 허용 합니다 </p>
<br>

<blockquote>
<p>URL Pattern 의 예는 아래와 같습니다. </p>
<p><code>/newsarchive/&lt;year&gt;/&lt;month&gt;/</code></p>
</blockquote>
<br>

<p>Django 에서 URL 을 view 로 연결하려면, </p>
<p>URLConfs 를 사용하면 됩니다. URLConf 는 URL 패턴을 view에 연결합니다. </p>
<br>

<p>이번 튜토리얼은 기본적인 URLConfs 사용에 대한 매핑을 제공합니다. </p>
<br>

<p>더 많은 세부사항은, URL Dispatcher 문서를 확인 하면 됩니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>다시 한번 복습하지만, 아래 그림처럼, </p>
<br>

<p>브라우저로 해당 URL 을 접속하면, VIEW를 호출하고, <br>해당 VIEW 에 있는 함수는 MODEL 이나 Template을 통해서 데이터베이스에 접근하거나,<br> 결과를 사용자에게 다시 돌려줄수 있습니다. </p>
<br>

<p>해당 URL 에서 View 를 호출하기 위해서는, URLConf 의 URL 설정을 해주어야 합니다. </p>
<br>

<img src="/2020/04/25/Writing-your-first-Django-app-part3-1%ED%8E%B8/image1.png" class=""> 

<br>]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Django</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>view</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part2 - 9편</title>
    <url>/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="어드민-페이지-기능-살펴보기"><a href="#어드민-페이지-기능-살펴보기" class="headerlink" title="어드민 페이지 기능 살펴보기"></a>어드민 페이지 기능 살펴보기</h2><br>

<br>

<p>지난 포스팅에서, Question 을 관리 할수 있도록, </p>
<p><br>Question 모델을 어드민 페이지에 등록을 하였습니다. </p>
<p><br>Django 는 이제 관리자 페이지에 Question 을 표시해야 하는것을 압니다. </p>
<br>

<img src="/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/image1.png" class=""> 

<br>



<a id="more"></a>

<br>

<blockquote>
<p>화면에 보이는 Question 을 클릭하면, </p>
<p>Question 들을 바꿀수 있는 리스트 페이지로 이동합니다. </p>
<p>해당 페이지는 데이터베이스에 존재하는 모든 question  들을 표시하고, </p>
<p>관리자는 하나를 선택해서 컨텐츠를 바꿀수 있습니다. </p>
</blockquote>
<br>

<img src="/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/image2.png" class=""> 

<br>

<p>이전 포스팅에서 등록했던 ‘What’s up?’ 질문이 등록되어 있는것을 확인 할수 있습니다. </p>
<p>이 ‘What’s up?’ 을 클릭합니다. </p>
<br>

<br>

<img src="/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/image3.png" class=""> 

<br>

<p><strong>여기서 알아야 할것은 아래와 같습니다.</strong> </p>
<ul>
<li><p>해당 폼은 Question 모델을 따라서 자동으로 생성됩니다. </p>
</li>
<li><p>다른 형태의 필드 타입들 (DateTimeField, CharField) 는 적절한 HTML input widget 으로 표시됩니다. 각 타입필드는 django admin 에서 어떻게 표시되어야 하는지 알고 있습니다. </p>
</li>
<li><p>각 DateTimeField 는 JavaScript 숏컷을 가집니다. 날짜는 “Today” 숏컷 그리고 날짜 팝업을 가지고, 시간은 “Now” 숏컷과 공통된 시간대를 나열하는 편리한 팝업을 가집니다.</p>
</li>
</ul>
<br>

<br>

<p><strong>밑부분에 위치하는 버튼들은 아래와 같습니다</strong> </p>
<ul>
<li><p>Save: 변경 사항들을 저장하고, 해당 객체에 대한 변경 리스트를 반환합니다</p>
</li>
<li><p>Save and continue editing: 변경 사항들을 저장하고, 이 객체에 대한 관리자 페이지를 다시 로드 합니다 </p>
</li>
<li><p>Save and add another: 변경 사항들을 저장하고, 이 객체에 대한 빈값을 로드합니다. 새로운 값을 입력하기 편하게 만들어 줍니다 </p>
</li>
<li><p>Delete: 삭제 확인 페이지를 표시해줍니다 </p>
</li>
</ul>
<br>

<p>만약 “Date published” 값이 튜토리얼1 에서 입력한 시간과 맞지 않는다면, TIME_ZONE 세팅에서 맞는 값을 지정하지 않았을지 모릅니다. TIME_ZONE 세팅을 바꾸고 다시 페이지를 열어서 맞는값이 표시되는지 확인하면 됩니다. <br><br></p>
<h2 id="변경-내역-확인하기"><a href="#변경-내역-확인하기" class="headerlink" title="변경 내역 확인하기"></a>변경 내역 확인하기</h2><br>

<p>“Date published” 값을 “Today” 와 “Now” 버튼을 사용해서 바꿔줍니다. 바꾼뒤에는, “Save and continue Editing” 버튼을 눌러줍니다. </p>
<br>

<blockquote>
<p>그리고 나서, 우측 상단에 있는 “History” 버튼을 눌러줍니다. </p>
</blockquote>
<br>

<p>Django 어드민 페이지에서, 이 객체에 대한 모든 수정 사항들을 표시하는 페이지를 확인 할수 있습니다. </p>
<p>시간과 사용자 내역을 볼수 있습니다. </p>
<br>

<img src="/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/image4.png" class=""> 



<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>모델 API 와 어드민 사이트와 친숙해 졌으면, 어떻게 polls 앱에 더 많은 views 를 추가할수 있는 알아보기 위해 part3 로 넘어갑니다.  </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>admin</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part2 - 8편</title>
    <url>/2020/04/25/Writing-your-first-Django-app-part2-8%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="polls-앱을-어드민에서-수정하기"><a href="#polls-앱을-어드민에서-수정하기" class="headerlink" title="polls 앱을 어드민에서 수정하기"></a>polls 앱을 어드민에서 수정하기</h2><br>

<p>지난 포스팅에, 관리자 사이트 꼐정을 만들고, Django에서 기본으로 제공하는 관리자 페이지에 접속해 보았습니다. 접속해 보면, 우리가 생성한 polls 앱을 수정할수 있는 컨텐츠가 보이지 않습니다. </p>
<br>

<br>

<p>polls 앱의 컨텐츠는 Quetion 과 Choice 인데, <br>관리자 페이지에서 추가, 수정, 삭제가 되지 않는다면, 관리자 페이지가 무슨 의미가 있을까요? </p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>따라서, </p>
<p>관리자 페이지에서 해당 컨텐츠들 (polls 앱에 있는 Question, Choice) 을 </p>
<p>관리할수 있게, 관리자 페이지에 등록 해 줘야 합니다. </p>
</blockquote>
<br>

<blockquote>
<p>관리자 페이지에 등록하기 위해서, </p>
<p>polls/admin.py 파일에 아래 내용을 추가해 줍니다. </p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin </span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question        <span class="comment"># polls 앱안에 models 에서 Question 모델 가져오기 </span></span><br><span class="line"></span><br><span class="line">admin.site.register(Question)       <span class="comment"># 가져온 Question 모델을 어드민에 등록</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="관리자-페이지에서-확인"><a href="#관리자-페이지에서-확인" class="headerlink" title="관리자 페이지에서 확인"></a>관리자 페이지에서 확인</h2><br>

<p><br>Question 컨텐츠를 관리자 페이지에서 관리할수 있도록, 관리자페이지에 가서 확인 해 봅니다. </p>
<br>

<p>1) python manage.py runserver 로 개발서버를 실행합니다</p>
<p>2) <a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a> 으로 접속을 합니다</p>
<p>3) 이전 포스팅에서 생성한 아이디와 비밀번호를 입력해서 로그인 합니다</p>
<p>4) 어드민 페이지로 접속을 하고, Questions 가 관리자 페이지에 잘 등록되었는지 확인 합니다. </p>
<br>

<br>

<p>polls/admin.py 파일에 코드를 추가했더니, 아래와 같이 Questions 가 관리자 페이지가 보입니다.</p>
<br>

<br>

<img src="/2020/04/25/Writing-your-first-Django-app-part2-8%ED%8E%B8/image1.png" class=""> 

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>어드민 페이지에서 컨텐츠를 관리하기 위해서, 컨텐츠 정보를 어드민 페이지에 등록 하였습니다. </p>
<p><br><code>admin.site.register(모델 클래스명)</code> 코드를 잊지 맙시다~  </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>장고</tag>
        <tag>admin</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part2 - 7편</title>
    <url>/2020/04/25/Writing-your-first-Django-app-part2-7%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="Django-어드민-소개"><a href="#Django-어드민-소개" class="headerlink" title="Django 어드민 소개"></a>Django 어드민 소개</h2><br>

<br>

<p>지난 시간까지 데이터베이스를 둘러보았습니다. </p>
<p><br>기본 API 를 통해서 데이터를 추가하고, 수정하고, 삭제하는것을 진행 해보았습니다. </p>
<br>

<p>이번 포스팅에서는 Django 가 제공하는 관리자 페이지, 즉 Django Admin 에 대해서 알아봅니다. </p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>철학 </p>
<p>직원이나 고객들이 사이트의 컨텐츠를 추가하고, 바꾸고, 삭제하는 </p>
<p>관리자 페이지를 만드는일은 지루한 일입니다. 그다지 창의성을 요구하는일도 아닙니다. </p>
<br>

<p>이러한 사유로, Django 는 전적으로 관리자 인터페이스를 생성하는것을 자동화 하였습니다. </p>
<br>

<p>Django 는 뉴스룸 환경에서 작성되었습니다. </p>
<p>컨텐츠 발행자들과 일반 공용 사이트의 구분이 명확한 환경에서 쓰여졌습니다. </p>
<p>사이트 관리자는 시스템을 사용해서 뉴스 스토리, 스포츠 점수 등을 추가하고, 이러한 컨텐츠들은 공용 사이트에 표시됩니다. </p>
<br>

<p>Django 는 사이트 관리자가 컨텐츠들을 수정하기 위한 통합 인터페이스를 생성해야 하는 문제를 해결해 줍니다. </p>
<br>

<p>어드민은 사이트 방문자에 의해서 사용될 목적이 없습니다. </p>
<p>어드민은 관리자 페이지로, 사이트 관리자들을 위한 페이지 입니다. </p>
</blockquote>
<br>

<br>

<h2 id="Django-어드민-사용자-생성하기"><a href="#Django-어드민-사용자-생성하기" class="headerlink" title="Django 어드민 사용자 생성하기"></a>Django 어드민 사용자 생성하기</h2><br>

<p>관리자 페이지는, 사이트 관리자들이 로그인 하고 사용할수 있게 만들어야 합니다. </p>
<p><br>모든 사람들이 사용할수 있다면, 관리자 페이지가 아니게 되겠죠. </p>
<br>

<p>따라서, 관리자 사이트를 사용할 사용자를 생성해야 하고, 해당 사용자가 관리자 페이지에 접근할수 있게 해야 합니다. </p>
<br>

<p>어드민 사용자를 생성하기 위해서는, <code>python manage.py createsuperuser</code>명령어를 터미널에서 실행 합니다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-tutorial)  ~/django_tutorial/mysite  ( master ) ls</span><br><span class="line">db.sqlite3  manage.py  mysite  polls</span><br><span class="line">(django-tutorial)  ~/django_tutorial/mysite  ( master ) python manage.py createsuperuser</span><br><span class="line">Username (leave blank to use <span class="string">'dhkang'</span>): admin</span><br><span class="line">Email address: admin@example.com</span><br><span class="line">Password: </span><br><span class="line">Password (again): </span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure>

<br>

<p>관리자 페이지 사용자를 생성하고, username, email address, password, password(again)을 입력하면, 어드민 사용자가 성공적으로 생성됩니다. </p>
<br>

<h2 id="개발-서버-실행하기"><a href="#개발-서버-실행하기" class="headerlink" title="개발 서버 실행하기"></a>개발 서버 실행하기</h2><br>

<p>Django 어드민 사이트는 기본적으로 활성화가 되어 잇습니다. </p>
<p><br>개발 서버를 시작하고, 어드민을 알아볼수 있습니다. </p>
<br>

<blockquote>
<p>개발 서버를 시작했으면, 브라우저를 열어서, 아래 URL로 접속합니다. </p>
<p><a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a></p>
</blockquote>
<br>

<br>

<img src="/2020/04/25/Writing-your-first-Django-app-part2-7%ED%8E%B8/image1.png" class=""> 

<br>

<br>

<blockquote>
<p>어드민 사이트에 접속하기 위해서 </p>
<p>위에서 생성한 username 과 비밀번호를 입력하고 로그인 합니다. </p>
</blockquote>
<br>

<br>

<img src="/2020/04/25/Writing-your-first-Django-app-part2-7%ED%8E%B8/image2.png" class=""> 

<br>

<br>

<p>번역 옵션이 기본적으로 활성화 되어 있기 때문에, 로그인 화면은 브라우저의 기본 언어로 표시됩니다. </p>
<br>

<h2 id="Admin-사이트-들어가기"><a href="#Admin-사이트-들어가기" class="headerlink" title="Admin 사이트 들어가기"></a>Admin 사이트 들어가기</h2><br>

<br>

<p>아이디와 비밀번호를 입력한뒤에, 로그인 버튼을 누르면, </p>
<p>아래와 같은 Django admin 인덱스 페이지를 볼수 있습니다. </p>
<br>

<img src="/2020/04/25/Writing-your-first-Django-app-part2-7%ED%8E%B8/image3.png" class=""> 

<br>

<p>화면에 보이는것 처럼, 몇가지 수정 가능한 컨텐츠들을 볼수 있습니다. groups 과 users 컨텐츠들은, Django 의 인증 프레임워크인, django.contrib.auth 모듈에서 제공이 됩니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>장고 어드민 페이지를 접속해 보았습니다. 복습으로 순서를 정리하자면,, </p>
<br>

<p>1)  python manage.py createsuperuser 로 어드민 관리자 아이디 생성 </p>
<p>2) python manage.py runserver 로 개발 서버 시작 </p>
<p>3) <a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a> 으로 관리자 페이지 접속 </p>
<p>4) 생성된 관리자 아이디로 로그인 </p>
<p>5) 관리자 페이지 접속 완료 </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>ORM</tag>
        <tag>장고</tag>
        <tag>Admin</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part2 - 6편</title>
    <url>/2020/04/24/Writing-your-first-Django-app-part2-6%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="API-가지고-놀기-3편"><a href="#API-가지고-놀기-3편" class="headerlink" title="API 가지고 놀기 - 3편"></a>API 가지고 놀기 - 3편</h2><br>

<p>지난 시간에 이어서, API 실험을 이어서 합니다. </p>
<p><br>[1] 부터 [6] 까지는, 지난 포스팅에서 진행한 내용 입니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: Question.objects.all()                                                                                                                                            </span><br><span class="line">Out[1]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [2]: Question.objects.filter(id=1)                                                                                                                                     </span><br><span class="line">Out[2]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [3]: Question.objects.filter(question_text__startswith='What')                                                                                                         </span><br><span class="line">Out[3]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [4]: from django.utils import timezone                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [5]: current_year = timezone.now().year                                                                                                                                </span><br><span class="line"></span><br><span class="line">In [6]: Question.objects.get(pub_date__year=current_year)                                                                                                                 </span><br><span class="line">Out[6]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure>

<br>

<br>

<a id="more"></a>

<h2 id="없는-데이터-요청하기"><a href="#없는-데이터-요청하기" class="headerlink" title="없는 데이터 요청하기"></a>없는 데이터 요청하기</h2><br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> id가 2번인 값을 조회했습니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Question은 한개밖에 없으니까, 2번은 존재하지 않습니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 따라서 아래와 같은 에러가 표시됩니다. </span></span><br><span class="line"></span><br><span class="line">In [7]: Question.objects.get(id=2)                                                                                                                                        </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">DoesNotExist                              Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-7-75091ca84516&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 Question.objects.get(id=2)</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="pk로-데이터-찾기"><a href="#pk로-데이터-찾기" class="headerlink" title="pk로 데이터 찾기"></a>pk로 데이터 찾기</h2><br>

<br>

<p>primary key 로 데이터를 조회하는것은 일반적인 일입니다. 따라서, Django  는 primary-key 단축키를 제공합니다. 아래 코드는 <code>Question.objects.get(id=1)</code> 과 동일합니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [8]: Question.objects.get(pk=1)                                                                                                                                        </span><br><span class="line">Out[8]: &lt;Question: What's up?&gt;</span><br><span class="line"></span><br><span class="line">In [9]: Question.objects.get(id=1)                                                                                                                                        </span><br><span class="line">Out[9]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="Custom-메서드-동작-확인"><a href="#Custom-메서드-동작-확인" class="headerlink" title="Custom 메서드 동작 확인"></a>Custom 메서드 동작 확인</h2><br>

<br>

<p>Question 에 was_plubished_recently() 라는 메서드를 추가해 줬었습니다. </p>
<p>이게 잘 작동하는지 확인 해 봅니다. True 를 반환 한다면, 잘 작동하는것으로 볼수 있습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [12]: q = Question.objects.get(pk=1)                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [13]: q.was_published_recently()                                                                                                                                       </span><br><span class="line">Out[13]: True</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="Choice-로-조회하기"><a href="#Choice-로-조회하기" class="headerlink" title="Choice 로 조회하기"></a>Choice 로 조회하기</h2><br>

<br>

<p>DATABASE API를 통해서, 하나의 Question 에 여러개의 Choice 를 등록할수 있습니다. </p>
<p>몇개의 Choice 를 하나의 Question 에 등록하는 과정을 진행 합니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> q에 pk값이 1인 Question 을 할당합니다 </span></span><br><span class="line">In [1]: q = Question.objects.get(pk=1)                                                                                                                                    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q.choice_set.all() 을 하면, 해당 Question 에 달려있는 Choice 들이 검색됩니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 비어있는 쿼리셋이 출력됩니다. 아직, 해당 Question 에는 어떠한 Choice 도 등록한적 없기 때문입니다. </span></span><br><span class="line">In [2]: q.choice_set.all()                                                                                                                                                </span><br><span class="line">Out[2]: &lt;QuerySet []&gt;</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>Question 과 Choice 는 ForeignKey 로 연결되어 있습니다. </p>
<p>One-To-Many 관계로 이어져 있습니다. </p>
<p>하나의 Question - 다수의 Choice 관계 입니다. </p>
<p>하나의 Question 을 q 에 할당했고, </p>
<p>q 에 달려있는 Choice 는, q.choice_set.all() 로 검색이 가능합니다. </p>
</blockquote>
<br>

<h2 id="Choice-등록하기"><a href="#Choice-등록하기" class="headerlink" title="Choice 등록하기"></a>Choice 등록하기</h2><br>

<br>

<p>What’s up Question 에 3개의 Choice 를 등록해 봅니다 </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [3]: q                                                                                                                                                                 </span><br><span class="line">Out[3]: &lt;Question: What's up?&gt;</span><br><span class="line"></span><br><span class="line">In [4]: q.choice_set.create(choice_text='Not Much', votes=0)                                                                                                              </span><br><span class="line">Out[4]: &lt;Choice: Not Much&gt;</span><br><span class="line"></span><br><span class="line">In [5]: q.choice_set.create(choice_text='The Sky', votes=0)                                                                                                               </span><br><span class="line">Out[5]: &lt;Choice: The Sky&gt;</span><br><span class="line"></span><br><span class="line">In [6]: c = q.choice_set.create(choice_text='Just Hacking again', votes=0)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="Choice-객체에서-Question-객체-조회"><a href="#Choice-객체에서-Question-객체-조회" class="headerlink" title="Choice 객체에서 Question 객체 조회"></a>Choice 객체에서 Question 객체 조회</h2><p><br><br></p>
<blockquote>
<p>q가 가진 모든 Choice 조회 </p>
<p>q.choice_set.all() </p>
<p>q가 가진 모든 choice 의 갯수 조회 </p>
<p>q.choice_set.count() </p>
</blockquote>
<p><br><br></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Choice 객체 에서 관계된 Question 객체를 조회할수 있는 API 가 있습니다 </span></span><br><span class="line">In [7]: c.question                                                                                                                                                        </span><br><span class="line">Out[7]: &lt;Question: What's up?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 반대로, Question 객체에서 Choice 객체를 조회할수 있습니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> What<span class="string">'s up Question 인 q 에 달려있는 모든 Choice 를 볼수 있습니다 </span></span></span><br><span class="line">In [8]: q.choice_set.all()                                                                                                                                                </span><br><span class="line">Out[8]: &lt;QuerySet [&lt;Choice: Not Much&gt;, &lt;Choice: The Sky&gt;, &lt;Choice: Just Hacking again&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 에 달려있는 Choice 의 갯수를 볼수 있습니다 </span></span><br><span class="line">In [9]: q.choice_set.count()                                                                                                                                              </span><br><span class="line">Out[9]: 3</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="의-사용"><a href="#의-사용" class="headerlink" title="__의 사용"></a><code>__</code>의 사용</h2><br>

<p>API는 자동으로 필요한만큼의 관계들을 따라갑니다. 두개의 언더스코어를 사용해서 관계를 분리 시킬수 있습니다. <br>몇개의 관계로 나누어도 상관 없습니다<br><br></p>
<p>Choice 중 question 의 <code>pub__date</code>가 이번년 인것을 찾으려면, 아래와 같이 써줍니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [10]: from django.utils import timezone                                                                                                                                </span><br><span class="line"></span><br><span class="line">In [11]: current_year = timezone.now().year                                                                                                                               </span><br><span class="line"></span><br><span class="line">In [12]: Choice.objects.filter(question__pub_date__year=current_year)                                                                                                     </span><br><span class="line">Out[12]: &lt;QuerySet [&lt;Choice: Not Much&gt;, &lt;Choice: The Sky&gt;, &lt;Choice: Just Hacking again&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="Choice-하나-삭제하기"><a href="#Choice-하나-삭제하기" class="headerlink" title="Choice 하나 삭제하기"></a>Choice 하나 삭제하기</h2><br>

<p>delete() 함수를 사용해서, 하나의 choice 를 삭제합니다 </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> q 에 달린 choice 중에 <span class="string">'Just hacking'</span> 으로 시작하는것을 조회 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> c 에 할당 </span></span><br><span class="line">In [13]: c = q.choice_set.filter(choice_text__startswith='Just hacking')                                                                                                  </span><br><span class="line"></span><br><span class="line">In [14]: c                                                                                                                                                                </span><br><span class="line">Out[14]: &lt;QuerySet [&lt;Choice: Just Hacking again&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> delete() 메써드를 사용해서, c 를 삭제 </span></span><br><span class="line">In [15]: c.delete()                                                                                                                                                       </span><br><span class="line">Out[15]: (1, &#123;'polls.Choice': 1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 삭제후, q에 달려 있는 choice 조회 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3개였던것이 2개만 출력됩니다</span></span><br><span class="line">In [16]: q.choice_set.all()                                                                                                                                               </span><br><span class="line">Out[16]: &lt;QuerySet [&lt;Choice: Not Much&gt;, &lt;Choice: The Sky&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>이 Queryset 하고 API 부분이, 매우 중요한 부분입니다. </p>
<p>더 많은 정보는, 장고 공식문서에 <strong>Accessing related objects</strong> 를 참조하시면 됩니다. </p>
<p>또한, <code>__</code> 사용에 대해서는, <strong>Field lookups</strong> 와 <strong>Database API reference</strong> 를 참조하시면 됩니다.  </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>ORM</tag>
        <tag>데이터베이스API</tag>
        <tag>QuerySet</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part2 - 5편</title>
    <url>/2020/04/17/Writing-your-first-Django-app-part2-5%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="API-가지고-놀기-2편"><a href="#API-가지고-놀기-2편" class="headerlink" title="API 가지고 놀기 - 2편"></a>API 가지고 놀기 - 2편</h2><br>

<p>지난 포스팅에서, 쿼리셋을 조회 했더니, 아래와 같이 알수 없는 쿼리셋이 반환되서 나왔습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [14]: Question.objects.all() Out[14]: </span><br><span class="line"></span><br><span class="line">&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>Question object (1) 이라고만 표시되어 쿼리셋이 조회가 됩니다. </p>
<p><br>이렇게 조회가 되면, 이게 무슨 질문인지, 언제 생성된 질문인지 알수가 없어지게 되서. 전혀 유용하지 않은 정보가 됩니다. </p>
<br>

<p>이번 포스팅에서 이것을 어떻게 유용한 형태로 표시할것인지에 대한 과정을 진행 합니다. </p>
<br>

<a id="more"></a> 

<br>

<br>

<h2 id="모델-수정하기-str-추가"><a href="#모델-수정하기-str-추가" class="headerlink" title="모델 수정하기 __str__ 추가"></a>모델 수정하기 <code>__str__</code> 추가</h2><br>

<br>

<p>우선, 문제를 해결하기 위해서 polls/models.py 를 수정해 줍니다. <br></p>
<p><code>__str__()</code> 메써드를 Question 과 Choice 클래스에 추가를 해줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>__str__</code> 메써드를 추가해주는것은 중요합니다. 인터렉티브 명령어에 대응할때에만 중요한것 뿐만 아니라,<br> Django 에서 자동으로 생성되는 관리자 페이지에서 표시되는 객체 내역들을 위해서도 중요합니다. </p>
<br>

<blockquote>
<p><code>__str__</code> 을 추가 해주고 나서, 객체를 조회해 봅니다 </p>
<p>python manage.py shell_plus 로 접속해서. 아래와 같이 조회해줍니다 </p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: Question.objects.all()                                                                                                                                            </span><br><span class="line">Out[1]: &lt;QuerySet [&lt;Question: 나 지금 뭐하고 있지?&gt;]&gt;</span><br></pre></td></tr></table></figure>

<br>

<p>이전 포스팅에서 생성한 질문의 값을 제대로 반영한 데이터가 표시됩니다. </p>
<br>

<br>

<h2 id="Custom-메써드-추가하기"><a href="#Custom-메써드-추가하기" class="headerlink" title="Custom 메써드 추가하기"></a>Custom 메써드 추가하기</h2><br>

<p>커스텀 메서드도 (사용자 정의) Question 클래스에 추가해 봅니다 </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>



<br>

<p>import datetime 과 from django.utils import timezone을 가져오는것을 잊지 않습니다. </p>
<p>모델을 저장을 하고 shell_plus 로 접속해 봅니다. </p>
<br>

<p>python manage.py shell_plus </p>
<br>

<p>일단, 지난 포스팅에 튜토리얼과 상관없는 질문을 등록했었습니다. 튜토리얼에서는 “What’s up?” 이라고 썼었는데. 제가 ‘나 지금 뭐하고 있지?’ 라고 임의로 바꿨었습니다. <br></p>
<br>

<p>연습도 할겸, 다시 튜토리얼과 같은 질문으로 바꿔보겠습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Question 중에서 id 값이 1번인것을 q에 저장 </span></span><br><span class="line">In [1]: q = Question.objects.get(id=1)                                                                                                                                    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 를 출력하면, 나 지금 뭐하고 있지? 가 출력됩니다  </span></span><br><span class="line">In [2]: q                                                                                                                                                                 </span><br><span class="line">Out[2]: &lt;Question: 나 지금 뭐하고 있지?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 에 존재하는 question_text 를 <span class="string">"What's up?"</span> 으로 바꾸어 줍니다. </span></span><br><span class="line">In [3]: q.question_text = "What's up?"                                                                                                                                    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> save() 함수를 호출해서 데이터베이스에 저장합니다.</span></span><br><span class="line">In [4]: q.save()                                                                                                                                                          </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q를 출력하면, 바뀐 question_text 를 가진 <span class="string">"What's up?"</span> 이 출력됩니다. </span></span><br><span class="line">In [5]: q                                                                                                                                                                 </span><br><span class="line">Out[5]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="DATABASE-API-실험하기"><a href="#DATABASE-API-실험하기" class="headerlink" title="DATABASE API 실험하기"></a>DATABASE API 실험하기</h2><p><br><br></p>
<p>모델을 저장하고, 질문값을 다 바꾸었으면, 이제부터 DATABASE API 실험에 들어갑니다 .</p>
<br>

<h3 id="str-동작-확인"><a href="#str-동작-확인" class="headerlink" title="__str__ 동작 확인"></a><code>__str__</code> 동작 확인</h3><br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> __str__() 메써드가 잘 작동하는지 확인 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 이제 Question 이 알아볼수 있는 질문 <span class="string">'What'</span>s up?<span class="string">' 으로 표시됩니다.</span></span></span><br><span class="line"></span><br><span class="line">In [1]: Question.objects.all()                                                                                                                                            </span><br><span class="line">Out[1]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br></pre></td></tr></table></figure>



<br>

<h3 id="키워드-인자로-조회"><a href="#키워드-인자로-조회" class="headerlink" title="키워드 인자로 조회"></a>키워드 인자로 조회</h3><br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Django 는 다양한 키워드 인수로 동작하는 lookup API 를 제공합니다</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (id=1) 은 id 가 1번인것을 조회해서 보여줍니다 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"What's up?"</span> 이 첫번째 질문이니, <span class="string">"What's up?"</span> 이 나옵니다 </span></span><br><span class="line"></span><br><span class="line">In [2]: Question.objects.filter(id=1)                                                                                                                                     </span><br><span class="line">Out[2]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> __startswith 는 무엇으로 시작하는지에 대한 필터 입니다 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> question_text__startswith=<span class="string">'What'</span> 은 question_text 중에 <span class="string">'What'</span> 으로 시작하는것을 조회해서 보여줍니다 </span></span><br><span class="line"></span><br><span class="line">In [3]: Question.objects.filter(question_text__startswith='What')                                                                                                         </span><br><span class="line">Out[3]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 이번년도에 등록된 질문에 대해서 조회합니다 ([4] - [6])</span></span><br><span class="line"></span><br><span class="line">In [4]: from django.utils import timezone                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [5]: current_year = timezone.now().year     # current_year 에 timezone.now().year 를 사용, 이번년을 저장                                                                                                                           </span><br><span class="line"></span><br><span class="line">In [6]: Question.objects.get(pub_date__year=current_year)  # Question중 pub_date 이 이번년도와 같은것을 조회                                                                                                                 </span><br><span class="line">Out[6]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure>



<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>포스팅은 나누는것도 길어지는것도 별로 안좋아하지만.. </p>
<p><br>너무 길어질것 같아서, 다시 나누어 포스팅 하려 합니다<br> 다음 포스팅에 이어 합니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>ORM</tag>
        <tag>Queryset</tag>
        <tag>데이터베이스API</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part2 - 4편</title>
    <url>/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="API-가지고-놀기"><a href="#API-가지고-놀기" class="headerlink" title="API 가지고 놀기"></a>API 가지고 놀기</h2><br>

<p>파이썬에 있는 인터렉티브한 쉘에 진입해서 DJango 가 제공하는 기본 데이터베이스 API 를 가지고 놀아봅니다. </p>
<p>Python shell 에 진입하기 위해서는 아래 커맨드를 사용합니다.  </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>일반 shell 에 접속해서 할수도 있지만, 저는 shell_plus 를 사용해서 진행해 봤습니다. </p>
<p>shell_plus 를 사용하기 위해서는 django-extensions 를 설치하고, settings.py 에 INSTALLED_APPS 에 등록 해줘야 합니다. </p>
<br>

<a id="more"></a>

<br>

<h2 id="Shell-plus-사용하기"><a href="#Shell-plus-사용하기" class="headerlink" title="Shell_plus 사용하기"></a>Shell_plus 사용하기</h2><br>

<br>

<p>django-extensions를 설치하고, settings.py 에 INSTALLED_APPS에 등록해주고, notebook도 설치해줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># django-extensions 설치 </span></span><br><span class="line">pip install django-extensions </span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite/settings.py INSTALLED_APPS 에 등록 </span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'django_extensions'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 그리고, notebook 도 설치해줍니다 </span></span><br><span class="line"><span class="comment"># jupyter notebook 으로 Django shell_plus를 실행 시킬수 있지만, Django 3.0 부터 지원이 안되는것 같습니다. </span></span><br><span class="line"></span><br><span class="line">pip install notebook</span><br><span class="line"></span><br><span class="line"><span class="comment"># 설치와 세팅을 마쳤으면, 아래 명령어로 Shell_plus 로 진입합니다 </span></span><br><span class="line">python manage.py shell_plus</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>아래 그림처럼 ln [1]: 이 화면에 나오면 됩니다. </p>
<br>

<img src="/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/image1.png" class="">

<br>

<p>shell_plus 에 진입했으면, database API 를 알아봅시다. </p>
<br>

<br>

<h2 id="DATABASE-API"><a href="#DATABASE-API" class="headerlink" title="DATABASE API"></a>DATABASE API</h2><br>

<br>

<blockquote>
<p>여기서 얘기하는 DATABASE API 란 </p>
<p>Django 가 제공하는 기능으로, 데이터베이스 추출 API 입니다. </p>
<p>사용자는 데이터베이스 객체를 생성하고, 읽어오고, 업데이트 하고 삭제할수 있습니다. </p>
</blockquote>
<br>

<br>

<h2 id="모델-다시-보기"><a href="#모델-다시-보기" class="headerlink" title="모델 다시 보기"></a>모델 다시 보기</h2><br>

<br>

<p>첫번째로, 우리가 작성한 모델을 봐야 합니다. polls/models.py 에는 이미 작성된 모델들 Question, Choice 모델이 있습니다. 이걸 사용해서 데이터베이스 API 사용을 실습합니다. <br></p>
<p>작성한 모델을 다시 정리하자면, </p>
<br>

<br>

<table>
<thead>
<tr>
<th>모델명</th>
<th>필드 이름</th>
<th>데이터 타입</th>
</tr>
</thead>
<tbody><tr>
<td>Question</td>
<td>question_text</td>
<td>Charfield</td>
</tr>
<tr>
<td>Question</td>
<td>pub_date</td>
<td>DateTimeField</td>
</tr>
<tr>
<td>Choice</td>
<td>question</td>
<td>ForeignKey</td>
</tr>
<tr>
<td>Choice</td>
<td>choice_text</td>
<td>CharField</td>
</tr>
<tr>
<td>Choice</td>
<td>votes</td>
<td>IntegerField</td>
</tr>
</tbody></table>
<br>

<p>튜토리얼에서 진행하는 실습을 shell_plus 에 입력하면서 진행 해봅니다. </p>
<br>

<br>

<h2 id="objects-all-조회"><a href="#objects-all-조회" class="headerlink" title="objects.all() 조회"></a>objects.all() 조회</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> polls.models <span class="keyword">import</span> Choice, Question     <span class="comment"># 작성한 모델을 불러오기 </span></span><br><span class="line"></span><br><span class="line">Quesiton.objects.all()                       <span class="comment"># Question의 모든 객체를 조회하는 명령어</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>튜토리얼에서는, 다짜고짜 objects.all() 명령어를 실행 시켜서, 질문들이 없다는것만 보여주는데.. objects.all() 이 어떻게 생겨 나는것인지 짚고 넘어갑니다. </p>
<br>

<p>위에 테이블을 보면, 분명히 Question 은 모델명입니다. Question.objects.all() 을 사용해서 Question 의 모든 객체를 조회하는 것입니다. objects.all() 명령어는, 모델에 붙어 있는 모든 객체를 조회하고 쿼리셋을 반환합니다. </p>
<br>

<p>Choice 도 모델명인데, Choice.objects.all() 을 사용하면 어떨까요? 물론, Choice 에 있는 모든 객체를 조회하는 명령어가 됩니다. </p>
<br>

<blockquote>
<p>현재 우리는, 어떠한 Question도, 어떠한 Choice 도 데이터베이스에 집어 넣지 않았기 때문에 </p>
<p>objects.all() 명령어를 사용하면, 비어 있는 쿼리셋이 반환됩니다</p>
<p>아래 shell_plus 화면 참고  <br></p>
</blockquote>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [1]: from polls.models import Choice, Question                                                                                                       </span><br><span class="line"></span><br><span class="line">In [2]: Question.objects.all()                                                                                                                          </span><br><span class="line">Out[2]: &lt;QuerySet []&gt;</span><br><span class="line"></span><br><span class="line">In [3]: Choice.objects.all()                                                                                                                            </span><br><span class="line">Out[3]: &lt;QuerySet []&gt;</span><br></pre></td></tr></table></figure>

<br>

<h2 id="새로운-Question-생성하기"><a href="#새로운-Question-생성하기" class="headerlink" title="새로운 Question 생성하기"></a>새로운 Question 생성하기</h2><p><br><br></p>
<p>위에서 Question.objects.all() 로 모든 Question 들을 조회해보면, 비어 있는 쿼리셋이 나옵니다. Question 하나를 추가해 보겠습니다. Question 하나를 추가하기 위해서는,<br>모델에 나와 있는 두가지 필드들이 채워져야 합니다 (question_text 와 pub_date). 이중, pub_date 는 데이터 타입이 시간이기 때문에, 시간을 넣어줘야 합니다. <br></p>
<p>Django 는 time zone 을 지원하기 때문에, timezone.now() 를 사용하면 pub_date 에 들어갈 시간을 넣을수 있습니다. </p>
<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [4]: from django.utils import timezone                                                                                                               </span><br><span class="line"></span><br><span class="line">In [5]: q = Question(question_text="What's new?", pub_date=timezone.now())                                                                              </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 객체를 데이터베이스에 저장합니다. save() 를 명시적으로 호출해서 저장합니다. </span></span><br><span class="line">In [6]: q.save()   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 가 데이터베이스에 저장 되었으니, 자동으로 id 값을 가집니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 첫번째 데이터이니, id 값은 자동으로 1 이 됩니다. </span></span><br><span class="line"></span><br><span class="line">In [7]: q.id                                                                                                                                            </span><br><span class="line">Out[7]: 1</span><br></pre></td></tr></table></figure>

<br>

<p>q 라는 변수에 <code>Question(question_text=&quot;what&#39;s new?&quot;, pub_date=timezone.now())</code> 객체 를 넣어주고. 그 객체 q를 저장 하였습니다. 이렇게 하면, 데이터베이스에 하나의 질문이 생성 됩니다. </p>
<br>

<br>

<h2 id="생성된-데이터-접근하기"><a href="#생성된-데이터-접근하기" class="headerlink" title="생성된 데이터 접근하기"></a>생성된 데이터 접근하기</h2><br>

<br>

<p>데이터가 하나 생성되었으니, 생성된 데이트를 접근할수도 있습니다. <br></p>
<p>위에서, q 라는 객체로 데이터베이스에 저장을 하였으니, 파이썬 속성을 사용하여, 필드 값에 접근 할수 있습니다. <br></p>
<br>

<p>위에서 q 는 Question(question_text=”What’s new?”, pub_date=timezone.now()) 였습니다. </p>
<br>

<p>q.question_text 에 접근하면, “What’s new?” 라는 텍스트를 반환합니다. <br></p>
<p>q.pub_date 에 접근하면, timezone.now() 의 값이 반환되겟죠? </p>
<br>

<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [9]: q.question_text                                                                                                                                 </span><br><span class="line">Out[9]: "What's new?"</span><br><span class="line"></span><br><span class="line">In [10]: q.pub_date                                                                                                                                     </span><br><span class="line">Out[10]: datetime.datetime(2020, 4, 13, 6, 58, 8, 963804, tzinfo=&lt;UTC&gt;)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="생성된-데이터-값-바꾸기"><a href="#생성된-데이터-값-바꾸기" class="headerlink" title="생성된 데이터 값 바꾸기"></a>생성된 데이터 값 바꾸기</h2><br>

<br>

<p>속성값을 바꾸고, save() 를 호출함으로써, 데이터베이스에 저장된 값을 바꿀수도 있습니다. <br><br></p>
<p>위에서, “What’s new?” 라고 저장되었던 첫번째 질문을, “나 지금 뭐하고 있지?” 라는 질문으로 바꿔봅니다. (튜토리얼에서는 “What’s up? 이라고 바꾸는데.. 너무 비슷한 질문이라 헷갈립니다)</p>
<br>

<br>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> q.question_text 값을 바꾸어줌 </span></span><br><span class="line">In [11]: q.question_text = "나 지금 뭐하고 있지?"                                                                                                       </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 바뀐 q 값을 데이터베이스에 저장 </span></span><br><span class="line">In [12]: q.save()                                                                                                                                       </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 다시 q.question_text 에 접근 </span></span><br><span class="line">In [13]: q.question_text                                                                                                                                </span><br><span class="line">Out[13]: '나 지금 뭐하고 있지?'</span><br></pre></td></tr></table></figure>





<br>

<h2 id="objects-all-로-다시-조회"><a href="#objects-all-로-다시-조회" class="headerlink" title="objects.all()로 다시 조회"></a>objects.all()로 다시 조회</h2><p><br><br></p>
<p>objects.all() 을 사용하면 데이터베이스에 있는 모든 question 들을 출력해 줄겁니다. <br></p>
<p>이제까지 quesiton 한개를 데이터베이스에 저장해놓았으니, 1개가 출력됩니다. </p>
<p><br><br></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">In [14]: Question.objects.all()                                                                                                                         </span><br><span class="line">Out[14]: &lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>그런데, 이상하네요? 위에서 생성한 question 의 정보는 없고. <br> &lt;Quetion: Question object(1)&gt; 만 출력되어 나옵니다. 이러면, 이게 무슨 질문인지, <br>언제 생성된 질문인지 알수가 없어지게 됩니다. </p>
<p><br><br></p>
<p>데이터베이스가 이런식으로 조회가 된다면, 전혀 도움이 되지 않기때문에. <br>다음 포스팅에서 이것을 어떻게 유용한 형태로 출력할것인지 해결할겁니다. </p>
<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>처음에 튜토리얼 진행하면서, 이 부분이 저언혀 이해가 안갔었습니다. <br></p>
<p>너무 생소했었습니다. 중요한 부분이라 생각하고, 파트를 나누어서 포스팅하기로 했습니다. <br></p>
<br>

<p>다음 포스팅에서 이어서 진행합니다. 아래는, shell_plus 전체 캡쳐 화면 입니다. </p>
<br>

<img src="/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/image2.png" class="">]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>데이터베이스 API</tag>
        <tag>ORM</tag>
        <tag>Queryset</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part2 - 3편</title>
    <url>/2020/04/15/Writing-your-first-Django-app-part2-3%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="모델-활성화-하기"><a href="#모델-활성화-하기" class="headerlink" title="모델 활성화 하기"></a>모델 활성화 하기</h2><br>

<br>

<p>모델에 적혀있는 작은 코드들은 Django 에게 많은 정보를 줍니다. 모델에 있는 코드로, Django 는 아래 작업을 수행할수 있습니다.</p>
<br>

<ul>
<li>이 앱을 위한 데이터베이스 스키마 생성 (CREATE TABLE 구문) </li>
<li>Question 과 Choice 객체를 접근할수 있는 파이썬 데이터베이스 엑세스 API 생성 </li>
</ul>
<br>

<p><strong>하지만 우선, 프로젝트에 우리의 polls 앱이 설치 되었다는것을 알려 줘야 합니다</strong></p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>철학 </p>
<p>Django 앱들은 뺏다꼇다 플러그인 이 가능합니다. </p>
<p>앱들은 여러개의 프로젝트에서 사용될수 있고, 배포도 될수 있습니다 </p>
</blockquote>
<br>

<br>

<h2 id="INSTALLED-APPS-에-등록하기"><a href="#INSTALLED-APPS-에-등록하기" class="headerlink" title="INSTALLED_APPS 에 등록하기"></a>INSTALLED_APPS 에 등록하기</h2><br>

<br>

<p>앱을 프로젝트에 포함 시키기 위해서, <code>mysite/settings.py</code> 에 있는 <code>INSTALLED_APPS</code> 설정안에, 앱의 설정 클래스 참조값을 추가해 줍니다. 앱의 설정 클래스는 <code>PollsConfig</code> 라는 이름으로, <code>polls/apps.py</code> 파일 안에 존재합니다. 따라서 이 경로를 참조하기 위해서 <code>polls.apps.PollsConfig</code> 라고 쓰고 사용합니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># polls 앱 안에, apps.py 에 있는 PollsConfig </span></span><br><span class="line"><span class="comment"># . 으로 이어서 참조값을 만듭니다. </span></span><br><span class="line"><span class="comment"># 이값을 mysite/settings.py 파일에 등록해 줍니다. </span></span><br><span class="line"></span><br><span class="line">polls.apps.PollsConfig</span><br></pre></td></tr></table></figure>



<br>

<blockquote>
<p>mysite/settings.py 파일을 열어서. 위의 <code>.</code>으로 연결된 경로, </p>
<p><code>polls.apps.PollsConfig</code>를 INSTALLED_APPS 설정에 추가해 줍니다. </p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysite/settings.py </span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>,    <span class="comment"># 추가된 항목 </span></span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>참고로, <code>polls.apps.PollsConfig</code> 라고 쓰기 귀찮으면, </p>
<p>그냥 앱의 이름인 <code>polls</code> 라고만 써주어도 됩니다. </p>
<p><code>&#39;&#39;</code> 안에 넣어주는것을 잊지 않습니다. </p>
</blockquote>
<br>



<h2 id="makemigrations-하기"><a href="#makemigrations-하기" class="headerlink" title="makemigrations 하기"></a>makemigrations 하기</h2><br>

<br>

<p>이제 Django 프로젝트에 polls 앱을 포함시켰습니다. </p>
<p><br>INSTALLED_APPS 에  polls 앱을 잘 등록하였으면, 아래 명령어를 실행 합니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py makemigrations polls </span><br><span class="line"><span class="comment"># 아래와같은 메시지가 표시되어야 합니다 </span></span><br><span class="line">Migrations <span class="keyword">for</span> <span class="string">'polls'</span>:</span><br><span class="line">  polls/migrations/<span class="number">0001</span>_initial.py</span><br><span class="line">    - Create model Question</span><br><span class="line">    - Create model Choice</span><br></pre></td></tr></table></figure>

<br>

<p><code>polls/migrations/0001_inital.py</code> 파일이 잘 생성되었는지 확인 합니다. </p>
<br>

<br>

<blockquote>
<p>만약 makemigrations 가 제대로 실행되지 않는다면, </p>
<p>polls/models.py 에 오타가 있을수도 있고, mysite/settings.py 에 제대로 앱이 등록 되지 않았을수 있습니다. </p>
</blockquote>
<br>

<br>

<p><code>makemigrations</code> 명령어를 실행시키므로써, 모델에 변경사항이 있다는것을 Django 에게 얘기 해줍니다.</p>
<p>(여기서 변경사항은, 이전 포스팅에서 새로 작성한 모델입니다) 그리고 변경 사항들은 <code>migration</code> 형태로 저장됩니다. </p>
<br>

<p>migrations는 Django가 변경된 모델 사항들을 저장하는 방법입니다 (즉, 데이터베이스 스키마). migrations는 디스크에 파일 형태로 저장됩니다. 방금 생성한 첫번째 migration 을 읽고 싶으면, 읽을수 있습니다. 이 파일은 <code>polls/migrations/0001_inital.py</code> 파일 입니다. </p>
<br>

<p>하지만, Django 가 이 파일을 하나씩 만들때마다 우리는 이 파일들을 하나씩 다 읽을 필요가 없습니다. 이 파일들은 수동으로 Django가 무언가를 변경시키는것을 비틀기 위해서 사람이 수정할수 있는 형식으로 디자인 되었습니다. </p>
<br>

<blockquote>
<p>migrate 하기 </p>
<p>migrations 와 데이터베이스 스키마를 자동으로 실행시킬수 있는 커맨드가 존재합니다 </p>
<p>바로, migrate 입니다 </p>
</blockquote>
<br>

<br>

<h2 id="sqlmigrate-명령어"><a href="#sqlmigrate-명령어" class="headerlink" title="sqlmigrate 명령어"></a>sqlmigrate 명령어</h2><br>

<br>

<p>튜토리얼에서는, <code>sqlmigrate</code> 명령어를 소개합니다만, 데이터베이스 구문을 모르면, 이해하기 힘듭니다. 초심자들은,, 일단 이부분을 깊게 들어가지 않는것을 권장 합니다 </p>
<br>

<p>일단, 튜토리얼에서 얘기하는 sqlmigrate 명령어를 간단하게 짚고 넘어갑니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">python manage.py sqlmigrate polls <span class="number">0001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 실행하면, 아래와 비슷한 형식의 결과를 볼수 있을겁니다. </span></span><br><span class="line"></span><br><span class="line">BEGIN;</span><br><span class="line">--</span><br><span class="line">-- Create model Question</span><br><span class="line">--</span><br><span class="line">CREATE TABLE <span class="string">"polls_question"</span> (</span><br><span class="line">    <span class="string">"id"</span> serial NOT NULL PRIMARY KEY,</span><br><span class="line">    <span class="string">"question_text"</span> varchar(<span class="number">200</span>) NOT NULL,</span><br><span class="line">    <span class="string">"pub_date"</span> timestamp <span class="keyword">with</span> time zone NOT NULL</span><br><span class="line">);</span><br><span class="line">--</span><br><span class="line">-- Create model Choice</span><br><span class="line">--</span><br><span class="line">CREATE TABLE <span class="string">"polls_choice"</span> (</span><br><span class="line">    <span class="string">"id"</span> serial NOT NULL PRIMARY KEY,</span><br><span class="line">    <span class="string">"choice_text"</span> varchar(<span class="number">200</span>) NOT NULL,</span><br><span class="line">    <span class="string">"votes"</span> integer NOT NULL,</span><br><span class="line">    <span class="string">"question_id"</span> integer NOT NULL</span><br><span class="line">);</span><br><span class="line">ALTER TABLE <span class="string">"polls_choice"</span></span><br><span class="line">  ADD CONSTRAINT <span class="string">"polls_choice_question_id_c5b4b260_fk_polls_question_id"</span></span><br><span class="line">    FOREIGN KEY (<span class="string">"question_id"</span>)</span><br><span class="line">    REFERENCES <span class="string">"polls_question"</span> (<span class="string">"id"</span>)</span><br><span class="line">    DEFERRABLE INITIALLY DEFERRED;</span><br><span class="line">CREATE INDEX <span class="string">"polls_choice_question_id_c5b4b260"</span> ON <span class="string">"polls_choice"</span> (<span class="string">"question_id"</span>);</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure>

<br>

<p>아래 사항들을 숙지해 둡니다 <br></p>
<br>

<ul>
<li>정확한 출력 값은 어떤 데이터베이스를 사용하느냐에 따라서 바뀝니다. 위의 예시는 <code>PostgreSQL</code>을 위해 생성되었습니다. </li>
<li>테이블명은 자동으로 생성되는데 앱의 이름 (polls) 과 소문자의 모델 이름 (즉, question 과 choice) 들을 합쳐서 지어 집니다 </li>
<li>외래키 필드 이름에는 Django의 규칙으로 <code>_id</code> 를 붙여줍니다 </li>
<li>외래키 관계는 명시적으로 <code>FOREIGN KEY</code> 제약으로 만들어집니다. <code>DEFFERABLE</code> 부분에 대해서는 걱정 안해도 됩니다. PostgreSQL 에게 트랜젝션이 끝날때까지 외래키를 실행 시키지 않는 역할을 합니다. </li>
<li>프로젝트가 사용하는 데이터베이스에 맞춤 설정이 되어 있습니다. 예를들면, ﻿(auto_increment(MySQL), serial(PostgreSQL), integer primary key autoincrement(SQLite) 들이 자동으로 처리됩니다</li>
<li>﻿sqlmigrate 캐먼드는 사실 데이터베이스를 위한 migration을 실행 시키지 않습니다. 대신, Django가 생각하는 데이터베이스 요구사항을 화면에 출력해서 사용자가 볼수 있게 해줍니다. Django 가 무엇을 할것인지 혹은 데이터베이스 관리자가 변경을 위해 SQL script 를 필요로 할때 유용하게 쓰입니다.</li>
</ul>
<p><br><br></p>
<h2 id="migrate-실행-하기"><a href="#migrate-실행-하기" class="headerlink" title="migrate 실행 하기"></a>migrate 실행 하기</h2><p><br><br></p>
<p>이제 진짜 migrate 를 실행 해 봅니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, polls, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying polls<span class="number">.0001</span>_initial... OK</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>migrate 커맨드는 적용되지 않은, 모든 migrations  들을 가지고 </p>
<p>데이터베이스에 적용합니다 </p>
<p>데이터베이스 스키마와 모든 변경사항들을 동기화 시켜 줍니다</p>
</blockquote>
<p><br><br></p>
<p>migrations 는 매우 강력한 기능입니다. migrations 는 개발 기간동안 데이터베이스 혹은 테이블을 삭제하지 않고도 모델을 수정 할수 있게 해줍니다. 데이터의 손실없이 실시간으로 데이터베이스를 업그레이드 하는데에 특화 되어 있습니다. </p>
<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<h3 id="숙지하고-있어야할-스텝들"><a href="#숙지하고-있어야할-스텝들" class="headerlink" title="숙지하고 있어야할 스텝들"></a>숙지하고 있어야할 스텝들</h3><br>

<ol>
<li>App 생성 </li>
<li>settings.py 에 INSTALLED_APPS 에 App 등록</li>
<li>해당 App 의 모델 생성 혹은 수정 </li>
<li>python manage.py makemigrations 실행 </li>
<li>python manage.py migrate 실행  </li>
</ol>
<br>

<p>커맨드가 이렇게 분리되어 있는 이유는, migrations 를 버전 관리 시스템에 커밋하고 앱과 함께 배달하기 위해서 입니다. 개발을 쉽게 해주는것 뿐만 아니라, 다른 개발자들이 사용할수 있고, 프로덕션 환경에서 사용할수 있게 해줍니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>모델</tag>
        <tag>sqlmigrate</tag>
        <tag>makemigrations</tag>
        <tag>migrate</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part2 - 2편</title>
    <url>/2020/04/13/Writing-your-first-Django-app-part2-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="모델-작성하기"><a href="#모델-작성하기" class="headerlink" title="모델 작성하기"></a>모델 작성하기</h2><br>

<p>지난 포스팅에서 데이터베이스 설정을 마쳤습니다. 튜토리얼에서 진행하는 기본 데이터베이스인 SQLite 를 사용하고, 기본앱들에 대한 migrate 를 완료해서, 필요한 데이터베이스 테이블들을 생성해 주었습니다. </p>
<br>

<p>이번 파트는, 모델을 작성해 봅니다. 데이터베이스 레이아웃과 추가적인 메타데이터를 정의 합니다. </p>
<br>

<a id="more"></a>

<blockquote>
<p>모델은 하나의 데이터에 대한 확실한 사실적 정의를 내립니다. </p>
<p>모델은 필요한 저장할 데이터의 필드들과 동작들의 정보를 가지고 있습니다. </p>
<p>Django 는 DRY 원칙을 따릅니다 (Don’t Repeat Yourself) </p>
<br>

<p>목표하는것은 데이터 모델을 한곳에 정의하고, 그곳에서 자동으로 도출해 내는겁니다. </p>
<br>

<p>Ruby on Rails 와는 다르게, 여기서는 migrations 를 포함합니다. </p>
<p>예를들면, migrations 는 전적으로 모델파일에서 추출되고, </p>
<br>

<p>Django 는 본질적으로 데이터베이스 스키마를 현재 모델에 업데이트 할수 있게 내역을 기록합니다. </p>
</blockquote>
<p><br><br></p>
<h2 id="모델-클래스-작성하기"><a href="#모델-클래스-작성하기" class="headerlink" title="모델 클래스 작성하기"></a>모델 클래스 작성하기</h2><p><br><br></p>
<p>투표앱 튜토리얼에서는, 2개의 모델을 작성합니다. </p>
<p><br><br></p>
<ul>
<li>Question - 질문과 발행날짜 정보를 가지고 있는 투표 질문 </li>
<li>Choice - 질문에 대한 선택문들과 투표집계 정보를 가지고 있습니다 </li>
</ul>
<p><br>각각의 Choice 들은 하나의 Question과 연관되어 있습니다. </p>
<br>

<blockquote>
<p>해당 컨셉은 파이썬 클래스들로 표현됩니다. </p>
<p>polls/models.py 파일을 열고, 아래와 같이 작성해 줍니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  question = models.ForeignKey(Question, on_delete=models.CASCADE) </span><br><span class="line">  choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">  votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure>



<br>

<p>여기서, 각가의 모델들은 <code>django.db.models.Model</code>을 상속받는 서브클래스들로 표현됩니다. </p>
<p><br>각 모델은 몇개의 클래스 변수들을 가지고 있는데,</p>
<br>

<blockquote>
<p>각 클래스 변수들은 모델안의 데이터베이스 필드들을 표현합니다 </p>
</blockquote>
<br>

<br>

<h2 id="필드-정보"><a href="#필드-정보" class="headerlink" title="필드 정보"></a>필드 정보</h2><br>

<br>

<p>각 필드들은 필드클래스의 인스턴스들로 표현됩니다. </p>
<br>

<p>예) 케릭터필드를 위한 CharField, 날짜시간필드를 위한 DateTimeField </p>
<br>

<p>이 필드 정보들은 각 필드들이 가지는 데이터 타입이 어떤것인지 Django 에게 말해줍니다. </p>
<p><br>각 필드 인스턴스들의 이름들 (예, question_text 혹은 pub_date)은 필드들의 기계친화적 이름들입니다. </p>
<p><br>이 필드 이름들을 파이썬 코드에서 사용할수 있고, 데이터베이스에서 컬럼명으로 사용됩니다.  사람이 읽기 편한 형태의 이름으로 필드를 만들기 위해서 선택적으로 첫번째 위치인자를 필드명으로 사용할수 있습니다. </p>
<br>

<p>보통 Django의 내부 설명 용도로 쓰이는, 문서를 2배로 늘려버립니다. 만약, 필드가 제공되지 않으면, Django는 기계친화적인 이름을 우선 사용합니다. </p>
<br>

<p>튜토리얼에서는, Question.pub_date 만 인간이 읽기 좋은 형태의 이름을 정의합니다. 그외에 다른 필드들은, 기계친화적 이름이라도 사람이 읽기 충분합니다. </p>
<br>



<br>

<h2 id="Field-클래스들의-필수-인수"><a href="#Field-클래스들의-필수-인수" class="headerlink" title="Field 클래스들의 필수 인수"></a>Field 클래스들의 필수 인수</h2><br>

<br>

<p>어떤 필드 클래스들은 필수적으로 인수를 가져야 합니다. </p>
<p><br>예를들어, CharField 는 최대 길이값인 max_length 인수를 가져야 하고, 데이터베이스 스키마에 사용될 뿐만 아니라 검증에도 사용됩니다.</p>
<br>

<br>

<p>필드는 여러가지 선택적 인수들을 가질수도 있습니다. 튜토리얼에서는 votes 의 기본값을 0으로 세팅해주었습니다. </p>
<br>

<br>

<h2 id="데이터베이스-관계의-정의"><a href="#데이터베이스-관계의-정의" class="headerlink" title="데이터베이스 관계의 정의"></a>데이터베이스 관계의 정의</h2><br>

<br>

<p>마지막으로, 튜토리얼의 데이터베이스 모델에서는 관계가 정의 되어 있습니다. </p>
<p><br>ForeignKey를 사용해서 Question 과 Choice 의 관계가 정의되어 있습니다. Django 는 모든 공통적인 데이터베이스 관계들을 지원합니다. 예) <code>many-to-one</code>, <code>many-to-many</code>, <code>one-to-one</code></p>
<br>

<blockquote>
<p>튜토리얼에 나온 Question 과 Choice 는, </p>
<p>일 대 다수의 관계인 </p>
<p>one-to-many (many-to-one) 의 관계를 가지고 있습니다. </p>
</blockquote>
<br>

<br>

<p>하나의 질문에, 여러가지 선택지가 있다는 얘기 입니다. </p>
<br>

<p>2020년 4월 현재에 진행되고 있는, 제 21대 국회의원 선거를 예로 들면.<br></p>
<p>‘우리 지역에서 누가 국회의원이 되어야 하나?’ 라는 질문에, 여러 후보들이 존재합니다.<br><br></p>
<p>하나의 질문에 여러가지 선택이 있는겁니다.  <br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>아주 간단한 모델을 작성해 보았습니다.</p>
<p><br>다음 포스팅에는 모델의 활성화를 진행해 볼겁니다.<br></p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>데이터베이스</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part2 - 1편</title>
    <url>/2020/04/13/Writing-your-first-Django-app-part2-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="데이터베이스-셋업"><a href="#데이터베이스-셋업" class="headerlink" title="데이터베이스 셋업"></a>데이터베이스 셋업</h2><p>첫번째 장고앱 만들기 part2 에 대한 포스팅 시작입니다. </p>
<p>튜토리얼은 part1 에서 이어지고, part2 에서는 데이터베이스 셋업과 첫번째 모델 생성 그리고 Django의 자동 생성 어드민 사이트에 대해 소개 합니다. </p>
<br>

<br>

<h2 id="데이터베이스-셋업하기"><a href="#데이터베이스-셋업하기" class="headerlink" title="데이터베이스 셋업하기"></a>데이터베이스 셋업하기</h2><br>

<br>

<p><code>mysite/settings.py</code> 파일을 열어줍니다. settings.py 는 Django 설정들을 대표하는 모듈레벨의 변수들을 가지고 있는 일반 파이썬 모듈입니다. </p>
<p><br><br></p>
<p>기본값으로 설정되어 있는 데이터베이스는 SQLite 입니다.  <br>만약 데이터베이스 초심자 혹은 그냥 Django 를 시도해 보고 싶은거라면, SQLite 가 가장 쉬운 데이터베이스 사용 선택지 입니다. </p>
<br>

<blockquote>
<p>SQLite 는 파이썬에 포함되어 있습니다 </p>
<p>따라서, 별도로 데이터베이스를 지원하기 위한 설치과정은 없습니다. </p>
</blockquote>
<br>

<a id="more"></a>

<br>

<p>그렇지만, 첫번째 실전 프로젝트를 진행할때에는, PostgreSQL 같은 좀더 확장성이 있고 고도의 데이터베이스를 사용하고 싶어질지 모릅니다. </p>
<br>

<blockquote>
<p>mysite/settings.py 파일을 열면, </p>
<p>아래와 같이 데이터베이스를 설정을 하는 부분이 있습니다. </p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="데이터베이스-ENGINE-값"><a href="#데이터베이스-ENGINE-값" class="headerlink" title="데이터베이스 ENGINE 값"></a>데이터베이스 ENGINE 값</h2><br>

<br>

<ul>
<li>사용하고 싶은 데이터베이스 설정에 따라 <code>ENGINE</code> 값을 바꿔줄수 있습니다. <br></li>
</ul>
<table>
<thead>
<tr>
<th><strong>ENGINE 값</strong></th>
<th><strong>데이터베이스</strong></th>
</tr>
</thead>
<tbody><tr>
<td>‘django.db.backends.sqlite3’</td>
<td>SQLite</td>
</tr>
<tr>
<td>‘django.db.backends.postgresql’</td>
<td>PostgreSQL</td>
</tr>
<tr>
<td>‘django.db.backends.mysql’</td>
<td>MySQL</td>
</tr>
<tr>
<td>‘django.db.backends.oracle’</td>
<td>Oracle</td>
</tr>
</tbody></table>
<br>

<ul>
<li><code>NAME</code> 값은 데이터베이스 이름을 써줍니다. 만약 SQLite 를 사용한다면, 데이터베이스는 컴퓨터에 파일로 존재합니다. 이 경우에 NAME 은 절대 경로로 표시되어야 하고, 파일명을 포함하고 있어야 합니다. 기본값은 <code>os.path.join(BASE_DIR, &#39;db.sqlite3&#39;)</code>이고, 이 파일은 프로젝트 폴더 안에 저장됩니다. <br>



</li>
</ul>
<br>

<blockquote>
<p>SQLite 를 사용하고 있지 않다면, </p>
<p>USER, PASSWORD 그리고 HOST 같은 </p>
<p>추가 설정들이 추가되어야만 합니다. </p>
</blockquote>
<br>

<br>

<p>공식문서 튜토리얼에서는 데이터베이스를 SQLite 를 사용하고 있기 때문에. 다른 데이터베이스 설정에 대해서는 걱정할 필요가 없습니다. </p>
<br>

<br>

<h2 id="데이터베이스-생성전-확인-사항"><a href="#데이터베이스-생성전-확인-사항" class="headerlink" title="데이터베이스 생성전 확인 사항"></a>데이터베이스 생성전 확인 사항</h2><br>

<h3 id="TIME-ZONE"><a href="#TIME-ZONE" class="headerlink" title="TIME_ZONE"></a>TIME_ZONE</h3><br>

<p>튜토리얼에서는 <code>mysite/settings.py</code> 를 수정하는김에, <code>TIME_ZONE</code> 까지 설정하라고 합니다. settings.py 파일을 열면, TIME_ZONE 설정하는 부분이 있는데. 기본값으로 UTC 라고 되어 있습니다. </p>
<br>

<p>서울 시간인 <code>Asia/Seoul</code> 로 바꾸어 줍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Internationalization</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/topics/i18n/</span></span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">'en-us'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Seoul'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="INSTALLED-APPS"><a href="#INSTALLED-APPS" class="headerlink" title="INSTALLED_APPS"></a>INSTALLED_APPS</h3><br>

<p>INSTALLED_APPS 도 유의깊게 보고 가야 합니다. <code>INSTALLED_APPS</code> 는 현재 Django 인스턴스에서 활성화 되어 있는 Django 어플리케이션들의 이름들이 있습니다. </p>
<br>

<p>어플리케이션들은 여러 프로젝트들에서 사용될수 있고, <br></p>
<p>다른 사람들이 프로젝트에 사용할수 있도록 패키지화 해서 배포할수 있습니다. </p>
<br>

<p>기본값으로, <code>INSTALLED_APPS</code>는 아래 앱들을 가지고 있습니다. </p>
<br>

<ul>
<li>django.contrib.admin - 관리자 사이트. 곧 사용하게 됩니다. </li>
<li>django.contrib.auth - 인증 시스템 </li>
<li>django.contrib.contenttypes - 컨텐트타입을 위한 프레임워크 </li>
<li>django.contrib.sessions - 세션 프레임워크 </li>
<li>django.contrib.messages - 메시징 프레임워크 </li>
<li>django.contrib.staticfiles - 정적파일들을 관리하기 위한 프레임워크 </li>
</ul>
<br>

<p>위 어플리케이션들은 공통적인 편의성을 위해 기본값으로 포함되어 있는 어플리케이션들 입니다. </p>
<br>

<br>

<p>이중 어떤 어플리케이션들은 적어도 하나의 데이터베이스 테이블을 사용합니다. <br></p>
<p>따라서, 이 앱들을 사용하기 위해서는, 데이터베이스 테이블이 먼저 생성이 되어 있어야 합니다. </p>
<br>

<br>

<p>데이터베이스 테이블을 생성하기 위해서, 아래 <code>migrate</code> 커맨드를 실행합니다. </p>
<br>

<br>

<h2 id="데이터베이스-migrate-하기"><a href="#데이터베이스-migrate-하기" class="headerlink" title="데이터베이스 migrate 하기"></a>데이터베이스 migrate 하기</h2><br>

<br>

<p>이전 포스팅부터, 계속 서버를 실행시키면, </p>
<p><br>아래와 같이 17 unapplied migration 이 있다고 메시지가 뜹니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"> </span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 17 unapplied migration(s). Your project may not work properly until you </span><br><span class="line">apply the migrations <span class="keyword">for</span> app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run <span class="string">'python manage.py migrate'</span> to apply them.</span><br><span class="line"></span><br><span class="line">April 12, 2020 - 08:29:55</span><br><span class="line">Django version 3.0.5, using settings <span class="string">'mysite.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure>

<p><br>이 메시지를 자세히 읽어보면, 아래와 같은 사항을 확인 할수 있습니다. </p>
<br>

<blockquote>
<p>admin, auth, contenttypes, sessions 앱을 정상적으로 실행시키려면 </p>
<p>python manage.py migrate 명령어를 실행 합니다. </p>
</blockquote>
<br>

<p>python manage.py migrate 을 실행 합니다. <br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py migrate </span><br><span class="line"></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying admin.0003_logentry_add_action_flag_choices... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying auth.0009_alter_user_last_name_max_length... OK</span><br><span class="line">  Applying auth.0010_alter_group_name_max_length... OK</span><br><span class="line">  Applying auth.0011_update_proxy_permissions... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure>

<br>

<p>이 <code>migrate</code> 커맨드는 <code>mysite/settings.py</code>에  INSTALLED_APPS 설정을 보고, </p>
<ul>
<li>settings.py 파일에 설정된 데이터베이스 설정과, </li>
<li>앱과 딸려온 데이터베이스 마이그레이션에 따라 필요한 데이터베이스 테이블들을 생성합니다. <br></li>
</ul>
<p><br> 각각의 마이그레이션의 적용에 따른 메시지들을 볼수 있습니다. <br></p>
<p>관심이 있으시다면, 커맨드라인에서 데이터베이스에 접속해서 테이블 조회를 할수도 있습니다. <br></p>
<p>SQLite 의 경우, SQLite 에 접속해서, <code>.schema</code> 라고 치면 조회가 되겠네요. <br></p>
<br>

<blockquote>
<p>INSTALLED_APPS 에 있는 기본 앱들은 </p>
<p>공통적인 사용을 위해 포함되어 있지만, 모든 사람들이 필요로 하는것들은 아닙니다. </p>
<p>만약 어떤것이든 혹은 전부 필요하지 않다면, </p>
<p>migrate 명령을 실행하기 전에, 해당 앱을 주석처리를 하거나, INSTALLED_APPS 에서 지워줍니다. </p>
<p>migrate 명령어는 오직 INSTALLED_APPS 에 등록된 앱들만 대상으로 migrations 를 실행합니다. </p>
</blockquote>
<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<ol>
<li>데이터베이스 설정은 settings.py 에 DATABASE 값에 해준다. </li>
<li><code>python manage.py migrate</code>를 실행해서 INSTALLED_APPS 에 등록된 앱의 동작에 필요한 데이터베이스 테이블들을 생성해준다. </li>
</ol>
<br>

<blockquote>
<p>migrate 명령어를 끝내고, runserver를 해보면</p>
<p>이제까지 보였던 17 unapplied migrations 이 있다는 메시지는 더 이상 출력되지 않습니다. </p>
</blockquote>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">April 12, 2020 - 08:50:41</span><br><span class="line">Django version 3.0.5, using settings <span class="string">'mysite.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>데이터베이스</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part1 - 4편</title>
    <url>/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="첫번째-뷰-작성하기"><a href="#첫번째-뷰-작성하기" class="headerlink" title="첫번째 뷰 작성하기"></a>첫번째 뷰 작성하기</h2><br>

<p>지난 시간에 polls 앱을 생성하였고, 이번 포스팅에는 첫번째 view 를 작성해 봅니다 </p>
<br>

<p>디렉토리 구조는 아래와 같고, <code>polls/view.py</code> 파일을 작성을 진행해봅니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="Django의-MTV-모델"><a href="#Django의-MTV-모델" class="headerlink" title="Django의 MTV 모델"></a>Django의 MTV 모델</h2><p><br><br><a id="more"></a></p>
<p>view 를 작성하기 전에, django 의 MTV 모델에 대해서 알아야 하는데. 간단하게 짚고 넘어가자면.. </p>
<br>

<p>Models, Templates, View 의 약자로 <br></p>
<br>

<ul>
<li>Models - 데이터베이스의 구조 설계 <br></li>
<li>Templates: 화면에 보이는 포맷 </li>
<li>Views: 전달된 요청을 처리하고 반환하는 로직 </li>
</ul>
<br>

<p>처음 접하면 생소하기도 하고, 헷갈리기도 해서. 몇가지 그림들을 가져와 봤습니다. </p>
<br>

<img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image1.png" class="">

<p><br><br></p>
<blockquote>
<p>사용자가 URL 을 통해서 View 에 요청을 하면 </p>
<p>View 는 요청을 처리하고, 사용자에게 결과물을 반환합니다</p>
<p>View 는 Model 을 통해서 데이터베이스에서 데이터를 가져올수도 있고, 저장할수도 있습니다</p>
<p>View 는 Templates 에 결과를 그려주기도 합니다.  </p>
<p>처리 결과를 Template 에 그려주고, 그 Template 을 사용자에게 다시 반환하는것도 View 가 할 역할입니다. </p>
</blockquote>
<p><br><br></p>
<img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image2.png" class=""> 

<p><br><br></p>
<br>

<blockquote>
<p>따라서, view 를 작성하려면, </p>
<p>요청을 받을 URL 도 있어야 하고 </p>
<p>사용할 Model 도 있어야 하고 </p>
<p>화면을 출력할 Template 도 있어야 합니다 </p>
<br>

<p>View 에는 요청을 받아서, 요청을 처리하고 값을 반환해주는 함수들이 필요합니다. </p>
</blockquote>
<p><br><br></p>
<h2 id="MTV-순서"><a href="#MTV-순서" class="headerlink" title="MTV 순서"></a>MTV 순서</h2><p><br><br></p>
<p>처음에 django 공부할때, 어떤거 부터 작성해야 하는지에 대해서 많이 헷갈렸었는데. 튜토리얼에서는 View 부터 작성하고 시작합니다. </p>
<br>

<p>어떤분들은, models 부터 시작하고, 어떤분들은 templates 부터 시작합니다. </p>
<p>어디서부터 시작하는지는 개인 취향에 맡겨야 할것 같습니다. 결과물만 좋다면,, 순서는 뭐 중요하지 않지요. </p>
<br>

<p>공식문서에 나와있는 순서들도 100% 맞는 순서가 아니지만, 참고 합니다. </p>
<br>

<p><strong>공식문서 튜토리얼에서 진행하는 순서는 View 부터 진행합니다</strong></p>
<br>

<h2 id="View-작성하기"><a href="#View-작성하기" class="headerlink" title="View 작성하기"></a>View 작성하기</h2><p><br><br></p>
<blockquote>
<p>튜토리얼에서, 첫번쨰 View 를 작성 진행하는 순서는 아래와 같습니다 </p>
</blockquote>
<br>

<p>1) <code>polls/views.py</code>에 view 작성 </p>
<p>2) 요청을 전달할 <code>polls/urls.py</code> 생성 및 작성 (이 url은 작성된 view 를 요청합니다) </p>
<p>3) 프로젝트 url 과 <code>polls/urls.py</code> 를 연결 </p>
<p><br><br></p>
<blockquote>
<p>url 을 통해서 사용자가 요청을 보내면, </p>
<p>view 는 요청을 처리하고. 사용자에게 값을 반환합니다. </p>
</blockquote>
<p><br><br></p>
<p>자 그럼, 첫번째 뷰를 작성해 봅니다. <code>polls/views.py</code>를 열고, 아래 파이썬 코드를 작성합니다.</p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world. You're at the polls index."</span>)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>이것이 django 에서 제일 간단한 view 입니다. 이 view 를 호출하기 위해서는 url 이 필요하겠죠? </p>
<p><br>따라서 url을 생성해 줍니다</p>
<p><br><br></p>
<h3 id="polls-urls-py-생성하기"><a href="#polls-urls-py-생성하기" class="headerlink" title="polls/urls.py 생성하기"></a>polls/urls.py 생성하기</h3><br>

<br>

<blockquote>
<p><code>polls/</code> 폴더에 <code>urls.py</code> 를 생성해 줍니다.</p>
<p>아래 디렉토리 구조는  <code>urls.py</code> 를 polls 폴더에 생성한 후의 구조 입니다.</p>
</blockquote>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    urls.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>polls/urls.py 에 아래 코드를 적어줍니다.</p>
</blockquote>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># polls/urls.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="루트-URLConf-설정"><a href="#루트-URLConf-설정" class="headerlink" title="루트 URLConf 설정"></a>루트 URLConf 설정</h3><p><br><br></p>
<p>루트 URLConf 에서,  <code>polls/urls.py</code> 를 연결해 줍니다. 여기서 얘기하는 루트 URLConf 는 <code>mysite/urls.py</code> 입니다.</p>
<p><br><br></p>
<blockquote>
<p>mysite/urls.py 를 열고, urlpatterns 에 </p>
<p>polls/urls.py 가 포함되게 해줍니다 </p>
</blockquote>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># mysite/urls.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin </span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'polls/'</span>, include(<span class="string">'polls.urls'</span>)),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="호출-순서"><a href="#호출-순서" class="headerlink" title="호출 순서"></a>호출 순서</h3><p><br><br></p>
<p>루트 URLConf 설정을 해주고, 잠시 작동 순서를 생각해봅니다. </p>
<p><br><br><strong>브라우저에서 <code>polls/</code> 로 접속해보면, 아래와 같은 동작 순서가 그려집니다.</strong> </p>
<br>

<ol>
<li>브라우저에서 <code>polls/</code> 로 접속 </li>
<li><code>polls/</code> 에서 <code>include()</code> 함수를 통해서 <code>polls/urls.py</code> 로 연결 </li>
<li><code>polls/urls.py</code> 는 <code>&#39;&#39;</code>로 접속했을때, 위에서 작성한 <code>polls/views.py</code> 에 있는 <code>index</code> 함수를 호출 (즉, <code>127.0.0.0:8000/polls/</code> 로 접속했을때 <code>index</code>함수가 호출됨) </li>
<li><code>polls/views.py</code> 에 있는 <code>index</code> 함수는 요청을 처리후 <code>HttpResponse</code> 로 값을 반환 </li>
<li>브라우저에 요청이 처리되고 반환값이 표시 </li>
</ol>
<br>

<h3 id="include-함수"><a href="#include-함수" class="headerlink" title="include()함수"></a><code>include()</code>함수</h3><p><br><br></p>
<p>튜토리얼에서는 <code>include()</code> 함수에 대해서 설명을 하고 있는데. <code>include()</code> 함수는 루트에 존재하는 urls.py 가 다른 url 설정들을 참조할수 있게 해줍니다. 언제든 Django가 <code>include()</code>를 만나면, 참조하는 다른 url 설정으로 남은 문자열들을 전달합니다. </p>
<br>

<p>튜토리얼에서는 <code>include()</code> 함수에 대해서 간단하게 설명하고 있는데.<br>Django 초심자라면, 이 시점에서 이 설명을 들으면 오히려 튜토리얼 진행을 할수 없을만큼 헷갈립니다.<br><br><br></p>
<blockquote>
<p>include() 함수는 다름 URL 패턴들을 포함할수 있게 합니다. </p>
<p>다른 url 패턴들을 포함하고 싶을때에는 언제나 include() 함수를 사용합니다 </p>
<p>admin.site.urls 는 예외입니다. </p>
</blockquote>
<p><br><br></p>
<h2 id="서버를-실행해서-확인하기"><a href="#서버를-실행해서-확인하기" class="headerlink" title="서버를 실행해서 확인하기"></a>서버를 실행해서 확인하기</h2><br>

<br>

<p><code>python manage.py runserver</code>를 실행하고, 브라우저를 엽니다<br></p>
<p>브라우저 주소창에 <code>127.0.0.1:8000</code> 이 표시되어 있고, page not found(404) 가 표시됩니다<br><br><br></p>
<img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image3.png" class=""> 

<p><br><br></p>
<p>페이지를 찾을수 없는 이유는, 루트에 있는 url 파일을 확인해 보면 알수 있습니다. <br></p>
<p>mysite/urls.py 파일을 참조하면, <strong>등록되어 있는  urls 는 총 2개로 <code>admin/</code> 과 <code>polls/</code> 2개 뿐입니다</strong><br></p>
<p><br>이 2가지 url 을 제외한 url 을 입력하면, 당연히 django 에서 url을 찾을수 없겟죠? ㅎㅎ </p>
<p><br><br></p>
<blockquote>
<p>127.0.0.1:8000/polls 혹은 </p>
<p>127.0.0.1:8000/admin 으로 접속하면 해당 페이지들을 찾을수 있을겁니다.  </p>
</blockquote>
<p><br><br><br></p>
<p><strong><code>127.0.0.1:8000/polls/</code>로 접속해 봅니다. polls/views.py 에 있는 Index 뷰가 정상적으로 화면에 메시지를 출력할것 입니다.</strong></p>
<br>

<br>

<img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image4.png" class=""> 

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>공식문서 튜토리얼에 첫번째 뷰 작성하기 부분 마지막에는 <code>path()</code> 함수에 대한 설명이 있는데.<br> 이부분은 아직 깊게 들어갈 필요가 없습니다. <br>이제까지 내용도 소화하기 힘든데, path() 까지 깊게 짚지 않고, 향후에 실력이 더 쌓이면 깊게 들어가 보겠습니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
        <tag>MTV</tag>
        <tag>View</tag>
        <tag>Model</tag>
        <tag>Template</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part1 - 3편</title>
    <url>/2020/04/12/Writing-your-first-Django-app-part1-3%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="Polls-app-생성하기"><a href="#Polls-app-생성하기" class="headerlink" title="Polls app 생성하기"></a>Polls app 생성하기</h2><br>

<br>

<p>이전 과정까지 프로젝트 환경 설정과 생성을 진행 하였습니다. 이제 개발을 시작해도 됩니다<br></p>
<br>

<p>Django에서 쓰는 각가의 어플리케이션은 특정한 규약을 따르는 파이썬 패키지로 이루어져 있습니다<br></p>
<p>django 는 자동으로 앱의 기본 디렉토리 구조를 생성하는 유틸리티를 가지고 있습니다<br></p>
<br>

<blockquote>
<p>따라서, 디렉토리를 생성하는데에 시간을 쓰기 보다는 </p>
<p>코드를 쓰는데에 더 집중할수 있습니다. </p>
</blockquote>
<br>

<a id="more"></a><br><br>

<h2 id="Projects-vs-Apps"><a href="#Projects-vs-Apps" class="headerlink" title="Projects vs Apps"></a>Projects vs Apps</h2><p><br><br></p>
<p>Django 에서 프로젝트와 어플리케이션의 다른점을 꼭 알고 가야합니다. </p>
<br>

<p>일단, 하나의 프로젝트는 여러개의 앱들을 가질수 있습니다.<br>하나의 앱은 어떠한 동작을 수행하기 위해서 만들어 집니다.<br><br><br></p>
<blockquote>
<p><strong>app(앱)</strong> </p>
<p>웹 어플리케이션으로 어떠한 동작을 수행합니다 </p>
<p>예) 웹블로그 시스템, 공공 기록을 가진 데이터베이스, 혹은 작은 투표앱 </p>
</blockquote>
<p><br><br></p>
<blockquote>
<p><strong>project(프로젝트)</strong></p>
<p>하나의 특정 웹사이트를 위한 설정들과 앱들의 모임입니다. </p>
<p>프로젝트는 여러개의 앱을 가질수 있습니다. </p>
<p>하나의 앱은 여러개의 프로젝트 안에 존재할수 있습니다. </p>
</blockquote>
<p><br><br></p>
<p>Apps(앱) 들은 파이썬 경로 어디에든 있을수 있습니다. 이 튜토리얼에서는 <code>manage.py</code> 파일이 존재하는 폴더에 우리의 투표앱을 생성할것 입니다. </p>
<br>

<p>그래서, 생성된 프로젝트 <code>mysite</code> 의 하위 모듈이 아닌, 루트 폴더 기준에서, 앱이 자체적으로 모듈로 불러서 쓸수 있게 만들겁니다.<br><br><br></p>
<h2 id="앱-생성하기"><a href="#앱-생성하기" class="headerlink" title="앱 생성하기"></a>앱 생성하기</h2><p><br><br></p>
<p><code>manage.py</code> 파일이 존재하는 폴더에서 아래 커맨드를 입력하여 앱을 생성합니다<br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python manage.py startapp polls</span><br></pre></td></tr></table></figure>

<br>

<p>앱 생성후에는 polls 폴더는 아래와 같은 구조여야 합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>앱을 생성하고 나서의 파이참 화면 내역입니다. 왼쪽 네비게이션에 디렉토리 생성 사항을 체크할수 있습니다. </p>
<br>

<img src="/2020/04/12/Writing-your-first-Django-app-part1-3%ED%8E%B8/image1.png" class="">

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>생성된 프로젝트 안에, 앱을 하나 생성해 주었습니다. </p>
<p>프로젝트 &gt; 앱, 이 개념을 잘 알아야 합니다. </p>
<br>

<p>다음 포스팅에는 첫번째 view 를 다루는 내용을 진행 합니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part1 - 2편</title>
    <url>/2020/04/12/Writing-your-first-Django-app-part1-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="개발-서버"><a href="#개발-서버" class="headerlink" title="개발 서버"></a>개발 서버</h2><br>

<p>지난 포스팅에서 Django 프로젝트를 생성하였습니다. </p>
<p><br>생성된 django 프로젝트가 동작을 하는지 확인해 보겠습니다. </p>
<p><br><code>mysite</code>폴더로 이동하고, <code>python manage.py runserver</code> 커멘드를 실행해줍니다. <a id="more"></a></p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-tutorial)  ~/django_tutorial/mysite (master)  ls</span><br><span class="line">manage.py  mysite</span><br><span class="line">(django-tutorial)  ~/django_tutorial/mysite  (master) python manage.py runserver</span><br><span class="line"></span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations <span class="keyword">for</span> app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run <span class="string">'python manage.py migrate'</span> to apply them.</span><br><span class="line"></span><br><span class="line">April 11, 2020 - 06:48:28</span><br><span class="line">Django version 3.0.5, using settings <span class="string">'mysite.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>17 unapplied migration(s) </p>
<p>17개의 적용되지 않은 마이그레이션이 있다는 메시지는 </p>
<p>일단 무시하고 넘어갑니다. 곧 이것에 대해서 다루게 될겁니다. </p>
</blockquote>
<br>

<p>Django 개발 서버를 시작하였습니다. 파이썬으로만 쓰여진 아주 가벼운 웹 서버 입니다. </p>
<p><br>이 웹서버는 Django 에 포함되어 있고, Apache 같은 프로덕션 서버를 설정할 필요 없이, 빠르게 개발할수 있게 만들어져 있습니다. <br></p>
<p>프로덕션 서버를 만들 준비가 되면, 그때가서 프로덕션 서버 설정을 하면 됩니다. </p>
<br>

<br>

<p>한가지 알아야 할 점은, 이 서버를 프로덕션 환경에서 사용하면 안된다는 점입니다. 개발서버는 오직 개발중에 사용될 의도로 만들어 졌습니다. </p>
<br>

<h2 id="웹서버-접속해보기"><a href="#웹서버-접속해보기" class="headerlink" title="웹서버 접속해보기"></a>웹서버 접속해보기</h2><br>

<p>서버가 실행중이니, 브라우저에서 웹서버에 접속해 봅니다 <code>http://127.0.0.1:8000</code></p>
<br>

<p>아래 이미지와 같이, 로켓 그림과 함께 congratulations! 가 표시된 페이지를 본다면, 잘 실행되고 있다는 겁니다. </p>
<br>

<img src="/2020/04/12/Writing-your-first-Django-app-part1-2%ED%8E%B8/image1.png" class="">

<br>

<br>

<blockquote>
<p>runserver 커맨드는 기본값으로 </p>
<p>내부 IP port 8000 에 개발서버를 시작합니다. <br></p>
<br>

<p>포트값을 바꾸고 싶으면, 커맨드라인에서 인자값을 바꿔줍니다. 예를들어 <br></p>
<p>python manage.py runserver 8080 <br></p>
<br>

<p>서버의 IP 를 바꾸고 싶다면, IP 값을 포트값과 같이 전달해 줍니다. 예를들어 <br><br>python manage.py runserver 0:8000 </p>
<p>0 은 0.0.0.0 의 약자입니다.</p>
</blockquote>
<br>

<h2 id="자동-runserver-리로딩"><a href="#자동-runserver-리로딩" class="headerlink" title="자동 runserver 리로딩"></a>자동 runserver 리로딩</h2><br>

<p>개발 서버는 각 요청마다 파이썬 코드를 자동으로 다시 불러오게 됩니다. </p>
<p><br>코드의 변경 사항의 결과를 보기위해서, 매번 서버를 다시 시작하지 않아도 됩니다. </p>
<p><br>그렇지만, 어떤 파일들을 추가할때는 자동으로 다시 불러오지 않습니다. 따라서 해당 상황에서는, 서버를 다시 재시작 시켜 주어야 합니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>개발 서버를 구동 시켜 보았습니다. </p>
<p><code>python manage.py runserver</code>를 실행시켜보면, 서버가 시작됩니다 </p>
<br>

<p>한번 서버를 실행 시키면, 에러가 없는 파이썬 코드를 수정할때마다 서버가 수정된 코드들을 다시 읽어 옵니다. </p>
<p><br>서버를 재시작 시킬 필요가 없지만. 특정 파일들을 추가할때에는 그렇지 않을 경우가 존재하기 때문에, 그런 상황에서는 서버를 다시 실행 시켜 줍니다. </p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part1 - 1편</title>
    <url>/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/</url>
    <content><![CDATA[<br>

<p>지난시간에 간단한 초기 설정을 마쳤습니다. </p>
<p>공식문서 튜토리얼 진행을 하면서 추가 설정을 같이 진행 합니다. </p>
<br>

<h2 id="초기설정-파이썬-인터프리터-설정"><a href="#초기설정-파이썬-인터프리터-설정" class="headerlink" title="초기설정: 파이썬 인터프리터 설정"></a>초기설정: 파이썬 인터프리터 설정</h2><br>

<p>파이참을 열고, 파이썬 인터프리터를 우리가 생성한 가상환경으로 설정을 해주어야 합니다. </p>
<br>

<blockquote>
<p>파이참에서 <code>FILE</code> 안에 <code>SETTINGS</code> 메뉴를 열어줍니다. </p>
<p><code>python interpreter</code> 설정을 해주어야 합니다. </p>
</blockquote>
<br>

<a id="more"></a><br>

<ol>
<li>맨 오른쪽에 조그마한 설정 아이콘을 클릭 </li>
<li>프로젝트 인터프리터 목록창이 나오는데, 우측에 조그맣게 있는 <code>+</code> 버튼을 눌러서 <code>Add Python Interpreter</code>창 실행 </li>
<li><code>Existing Envrionment</code>를 클릭하고, 이전 포스팅에서 생성한 가상환경 <code>django-tutorial</code>로 설정</li>
<li><code>OK</code> 버튼을 눌러서, 인터프리터 설정 완료 </li>
<li>파이참 재시작 </li>
</ol>
<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image1.png" class="">

<br>

<blockquote>
<p>가상 환경에 깔려 있는 패키지들이 표시됩니다 </p>
</blockquote>
<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image2.png" class=""> 

<br>

<br>

<h2 id="Creating-a-Project-프로젝트-생성하기"><a href="#Creating-a-Project-프로젝트-생성하기" class="headerlink" title="Creating a Project(프로젝트 생성하기)"></a>Creating a Project(프로젝트 생성하기)</h2><br>

<br>

<p>django를 처음 사용하는것이라면, 초기 설정을 잘해야 합니다. </p>
<p><br>예를들면, django 프로젝트에는, django 의 인스턴스를 생성하는 모든 설정들 (아래 참조) 를 자동 생성하는 코드들이 필요합니다.  </p>
<br>

<ul>
<li>Django 데이터베이스 설정 </li>
<li>Django 특화 옵션들 </li>
<li>어플리케이션 특화 옵션들 </li>
</ul>
<br>

<p>폴더 설정을 잘 마쳤으면, 다음 커맨드를 입력하여, 프로젝트를 자동 생성 합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>저는 지난시간에 파이참을 열어놓았기 때문에, 파이참에서 아래와 같이 커맨드를 입력해주었습니다. </p>
<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image3.png" class="">

<br>

<blockquote>
<p>아래와 같이 mysite 라는 폴더와 파일들이 자동 생성 되었습니다. </p>
</blockquote>
<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image4.png" class="">

<br>

<br>

<blockquote>
<p>참고로, </p>
<p>django 프로젝트 이름은 파이썬이나 Django 자체에서 쓰이는 </p>
<p>빌트인 이름들은 피해서 짓습니다. </p>
<p>예) 프로젝트명으로 django 를 사용하지 않습니다 (웹프레임워크 django와 이름 충돌) </p>
<p>예) 프로젝트명으로 test 라고 짓지 않습니다 (파이썬 빌트인 패키지과 충돌)</p>
</blockquote>
<br>

<br>

<h2 id="생성된-프로젝트-둘러보기"><a href="#생성된-프로젝트-둘러보기" class="headerlink" title="생성된 프로젝트 둘러보기"></a>생성된 프로젝트 둘러보기</h2><br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure>

<br>

<p>생성된 프로젝트를 둘러보니, mysite 라는 프로젝트가 생성되고.<br></p>
<p>위의 구조로, 폴더와 파일들이 생성된것을 확인 할수 있습니다. </p>
<br>

<h2 id="프로젝트-파일들"><a href="#프로젝트-파일들" class="headerlink" title="프로젝트 파일들"></a>프로젝트 파일들</h2><br>



<br>

<ul>
<li><p>바깥의 <code>mysite/</code>는 루트 디렉토리로 프로젝트의 컨테이너 입니다. 해당 폴더 이름은 django 로 지을수도 있고. 언제든 이름을 바꿔줄수 있습니다. <br></p>
</li>
<li><p><code>manage.py</code> 는 커맨드 라인 유틸리티로 django project 와 여러가지 방식으로 상호 작용 합니다. <br></p>
</li>
<li><p>안쪽의 <code>mysite/</code> 폴더는 프로젝트를 위한 실제 파이썬 패키지 입니다. 이 이름은 일반 파이썬 패키지명과 같은 방식으로, 폴더내의 어떤것이든 가져오기 위해 필요한 이름입니다. </p>
<br>

<p>예) mysite.urls,  mysite.asgi, mysite.settings<br> </p>
</li>
<li><p><code>mysite/__init__.py</code> 은 비어있는 파일로, 파이썬에게 해당 폴더가 파이썬 패키지라는것을 알려줍니다. 파이썬 초심자라면, 파이썬 문서패키지에 대해 더 읽어보기 섹션을 참조하길 바랍니다. <br></p>
</li>
<li><p><code>mysite/urls.py</code>는 django 프로젝트를 위한 url 선언들이 들어 있습니다. django 로 개발된 사이트의 목차 같은 역할을 합니다. <br></p>
</li>
<li><p><code>mystie/asgi.py</code> 는 <code>ASGI</code>가 호환되는 웹서버의 진입지점으로 django project  를 수행합니다.<br> </p>
</li>
<li><p><code>mysite/wsgi.py</code>는 <code>WSGI</code>가 호환되는 웹서버의 진입지점으로 django project 를 수행합니다.</p>
</li>
</ul>
<br>

<br>

<h2 id="초기설정-마무리"><a href="#초기설정-마무리" class="headerlink" title="초기설정 마무리"></a>초기설정 마무리</h2><br>

<br>

<p>프로젝트 생성이 완료 되었으니, 초반에 설치했던 <code>django-extension</code>를 프로젝트에 등록 해줍니다. </p>
<br>

<p><code>mysite/settings.py</code> 안에 <code>INSTALLED_APPS = []</code> 안쪽에<br><br></p>
<blockquote>
<p><code>django_extensions</code>를 추가해 줍니다.  </p>
</blockquote>
<br>

<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image5.png" class="">



<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>Django 프로젝트 생성을 완료하였습니다. 초기 설정은 아직 좀 더 남아 있기는 하지만, </p>
<p>이정도로 마치고 넘어가면서. 추가로 필요한 설정이 있으면, 그때마다 하겠습니다. </p>
<br>]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
      </tags>
  </entry>
  <entry>
    <title>Writing your first Django app, part1 - 초기설정</title>
    <url>/2020/04/11/Writing-your-first-Django-app-part1-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/</url>
    <content><![CDATA[<h2 id="장고-공식문서-튜토리얼-초기세팅"><a href="#장고-공식문서-튜토리얼-초기세팅" class="headerlink" title="장고 공식문서 튜토리얼 초기세팅"></a>장고 공식문서 튜토리얼 초기세팅</h2><br>

<br>

<p>공식문서에 나와있는 첫번째 앱 만들기 튜토리얼을 진행해봅니다. </p>
<br>

<p>이 튜토리얼을 통해서, 아주 기본적인 투표앱을 만드는 과정을 해보겠습니다. </p>
<br>

<br>

<p>투표앱은 두부분으로 이루어져있습니다. </p>
<br>

<p>1) 사람들이 투표소 (투표의 내역) 를 보고, 투표를 할수 있는 하나의 공용 사이트 </p>
<p>2) 투표소 (투표의 내역) 를 추가, 변경, 삭제할수 있는 관리자 사이트</p>
<br>

<a id="more"></a>

<br>

<p>Django가 이미 설치 되어있다고 가정하고 진행되는 튜토리얼 입니다. </p>
<p><br>아래 커맨드를 사용하여 어떤 버전의 django 가 설치되어 있는지 확인 할수 있습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -m django --version</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="튜토리얼-진행전-초기세팅-OS는-Ubuntu18-04"><a href="#튜토리얼-진행전-초기세팅-OS는-Ubuntu18-04" class="headerlink" title="튜토리얼 진행전 초기세팅 (OS는 Ubuntu18.04)"></a>튜토리얼 진행전 초기세팅 (OS는 Ubuntu18.04)</h2><br>

<br>

<h3 id="가상환경-설정"><a href="#가상환경-설정" class="headerlink" title="가상환경 설정"></a>가상환경 설정</h3><br>

<br>

<p>가상환경 설정을 진행 합니다. (가상환경 설정준비가 되어 있지 않다면, 아래 링크 참조)<br></p>
<p><a href="https://djangojeng-e.github.io/2020/04/10/가상환경-pyenv-virtualenv-4편/#more">https://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-4%ED%8E%B8/#more</a></p>
<p><br>저는 아래와 같은 커맨드들을 입력하여. 초기 설정을 진행합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 홈 디렉토리에서 django_tutorial 폴더 생성 </span></span><br><span class="line">mkdir django_tutorial </span><br><span class="line"></span><br><span class="line"><span class="comment"># 홈 디렉토리에서 django_tutorial 폴더로 이동 </span></span><br><span class="line"><span class="built_in">cd</span> django_tutorial </span><br><span class="line"></span><br><span class="line"><span class="comment"># 튜토리얼을 위한 가상환경 생성 (python 3.7.4로 생성) </span></span><br><span class="line">pyenv virtualenv 3.7.4 django_tutorial</span><br><span class="line">Looking <span class="keyword">in</span> links: /tmp/tmp9y92lrdq</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> /home/dhkang/.pyenv/versions/3.7.4/envs/django-tutorial/lib/python3.7/site-packages (40.8.0)</span><br><span class="line">Requirement already satisfied: pip <span class="keyword">in</span> /home/dhkang/.pyenv/versions/3.7.4/envs/django-tutorial/lib/python3.7/site-packages (19.0.3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 해당 폴더에 생성된 가상환경 적용 </span></span><br><span class="line">pyenv <span class="built_in">local</span> django_tutorial</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>폴더에 가상환경 적용 완료 (아래 스크린 캡쳐 참조) </p>
</blockquote>
<br>

<img src="/2020/04/11/Writing-your-first-Django-app-part1-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/image1.png" class="">



<br>

<h3 id="Django-설치"><a href="#Django-설치" class="headerlink" title="Django 설치"></a>Django 설치</h3><br>

<p><code>pip list</code>를 실행해서, 현재 설치된 패키지들을 검사합니다. django가 설치되어 있지 않습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip list </span><br><span class="line"></span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        19.0.3 </span><br><span class="line">setuptools 40.8.0 </span><br><span class="line">You are using pip version 19.0.3, however version 20.0.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>pip install django</code> 명령어를 실행해서, django 를 설치합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip install django </span><br><span class="line">Installing collected packages: pytz, asgiref, sqlparse, django</span><br><span class="line">Successfully installed asgiref-3.2.7 django-3.0.5 pytz-2019.3 sqlparse-0.3.1</span><br><span class="line">You are using pip version 19.0.3, however version 20.0.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>다시한번 <code>pip list</code>를 실행하면, django 가 설치되어 있는것을 확인 할수 있습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ pip list </span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">asgiref    3.2.7  </span><br><span class="line">Django     3.0.5  </span><br><span class="line">pip        19.0.3 </span><br><span class="line">pytz       2019.3 </span><br><span class="line">setuptools 40.8.0 </span><br><span class="line">sqlparse   0.3.1</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="Django-Extensions-설치"><a href="#Django-Extensions-설치" class="headerlink" title="Django Extensions 설치"></a>Django Extensions 설치</h3><br>

<p>튜토리얼 진행하면서, shell 을 사용할때가 나올텐데. Shell 대신, shell plus 를 사용하기 위해서 </p>
<p><br><code>django-extensions</code>를 설치해줍니다 <br></p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install django-extensions</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>django-extensions 를 사용하기 위해선, </p>
<p>추후에 django 프로젝트를 생성하고, </p>
<p><code>settings.py</code> 에 <code>INSTALLED_APPS</code> 에  등록 해주어야 합니다</p>
</blockquote>
<br>

<p><code>pip list</code>를 실행하면, <code>django-extensions</code>가 설치된것을 확인할수 있습니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-tutorial) ~/django_tutorial (master)  pip list</span><br><span class="line">Package           Version</span><br><span class="line">----------------- -------</span><br><span class="line">asgiref           3.2.7  </span><br><span class="line">Django            3.0.5  </span><br><span class="line">django-extensions 2.2.9  </span><br><span class="line">pip               19.0.3 </span><br><span class="line">pytz              2019.3 </span><br><span class="line">setuptools        40.8.0 </span><br><span class="line">six               1.14.0 </span><br><span class="line">sqlparse          0.3.1</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h3 id="Pycharm-실행"><a href="#Pycharm-실행" class="headerlink" title="Pycharm 실행"></a>Pycharm 실행</h3><p><br><br></p>
<p>파이참을 실행하는 커맨드는 각자 다를수 있는데.<br></p>
<p>저는 터미널에서 <code>pycharm-community .</code> 을 실행하면 실행이 됩니다. 해당 폴더에서 실행 합니다<br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-tutorial)  ~/django_tutorial (master) pycharm-community .</span><br></pre></td></tr></table></figure>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>간단한 초기설정을 마쳤습니다. </p>
<p>아직 초기 세팅이 다 끝난것은 아닙니다. 파이참 인터프리터 설정도 해주어야 하고, django-extensions 도 세팅을 해주어야 합니다. <br></p>
<p>다음 포스팅 시작할때, 추가 초기설정도 하고, <br>향후 진행하면서 필요한 설정은, 그때그때 진행 하겠습니다. </p>
<br>

<p>튜토리얼을 위한 깃헙 주소 : <a href="https://github.com/djangojeng-e/django_tutorial.git" target="_blank" rel="noopener">https://github.com/djangojeng-e/django_tutorial.git</a></p>
]]></content>
      <categories>
        <category>Django</category>
        <category>Tutorials</category>
      </categories>
      <tags>
        <tag>Django</tag>
        <tag>Tutorial</tag>
        <tag>공식문서</tag>
        <tag>투표앱</tag>
        <tag>polls</tag>
      </tags>
  </entry>
  <entry>
    <title>가상환경 pyenv, virtualenv - 4편</title>
    <url>/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-4%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-4편"><a href="#가상환경-설정-pyenv-virtualenv-4편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv - 4편"></a>가상환경 설정 - pyenv, virtualenv - 4편</h2><h2 id="pyenv-virtualenv를-사용해서-가상환경-사용"><a href="#pyenv-virtualenv를-사용해서-가상환경-사용" class="headerlink" title="pyenv-virtualenv를 사용해서 가상환경 사용"></a><code>pyenv-virtualenv</code>를 사용해서 가상환경 사용</h2><br>

<br>

<p>지난 포스팅에서 파이썬 3.8.0 을 설치하였습니다. </p>
<p>가상환경 생성 준비는 다 된것 같으니. 직접 가상환경을 생성하고 사용해 봅니다. </p>
<br>

<h2 id="파이썬-버전-확인"><a href="#파이썬-버전-확인" class="headerlink" title="파이썬 버전 확인"></a>파이썬 버전 확인</h2><br>

<p><code>pyenv versions</code>를 실행하여, 버전을 확인합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /home/ubuntu/.pyenv/version)</span><br><span class="line">  3.8.0</span><br></pre></td></tr></table></figure>

<br>

<p>현재 시스템에서 사용하고 있는 파이썬 버전이 표시됩니다. <code>3.8.0</code>을 설치하였는데. 아직 사용중이지 않습니다. </p>
<br>

<blockquote>
<p><code>*</code> 가 붙어 있는게 현재 사용하고 있는 버전의 파이썬입니다 </p>
</blockquote>
<br>

<a id="more"></a> 

<br>

<h2 id="시스템-전역에서-사용할-파이썬"><a href="#시스템-전역에서-사용할-파이썬" class="headerlink" title="시스템 전역에서 사용할 파이썬"></a>시스템 전역에서 사용할 파이썬</h2><br>

<br>

<p>3.8.0 을 사용하기 위해, 아래 명령어를 입력합니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv global 3.8.0</span><br></pre></td></tr></table></figure>

<br>

<p>실행하고, 버전을 확인해 보면,<br> <code>*</code>가 3.8.0 앞에 붙었습니다. 이제 전역에서 3.8.0 을 사용합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">* 3.8.0 (<span class="built_in">set</span> by /home/ubuntu/.pyenv/version)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="가상환경-생성"><a href="#가상환경-생성" class="headerlink" title="가상환경 생성"></a>가상환경 생성</h2><br>

<p>파이썬 3.8.0 으로 가상환경 하나를 생성해 보겠습니다. <br></p>
<p>가상 환경 이름은 <code>django-env</code>로 짓겠습니다. </p>
<br>

<p>해당 명령어 포맷은 <code>pyenv virtualenv 3.8.0 &lt;가상환경 이름&gt;</code> 입니다. 아래 커멘드를 참조. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv virtualenv 3.8.0 django-env</span><br></pre></td></tr></table></figure>

<br>

<p>커맨드 실행후에는 아래와 같은 메시지가 나옵니다. <br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Looking <span class="keyword">in</span> links: /tmp/tmpt74f1znk</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> /home/ubuntu/.pyenv/versions/3.8.0/envs/django-env/lib/python3.8/site-packages (41.2.0)</span><br><span class="line">Requirement already satisfied: pip <span class="keyword">in</span> /home/ubuntu/.pyenv/versions/3.8.0/envs/django-env/lib/python3.8/site-packages (19.2.3)</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>가상환경 <code>django-env</code>가 생성 완료 되었습니다. </p>
</blockquote>
<br>

<br>

<h2 id="특정-폴더에-가상환경-적용"><a href="#특정-폴더에-가상환경-적용" class="headerlink" title="특정 폴더에 가상환경 적용"></a>특정 폴더에 가상환경 적용</h2><br>

<br>

<p><code>django_tutorial</code> 이라는 폴더를 하나 생성해줍니다. </p>
<br>

<p>해당 폴더로 가서, 그 폴더에 가상환경을 적용해 봅니다. <br></p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ mkdir django_tutorial</span><br><span class="line"></span><br><span class="line">ubuntu@ip-172-31-47-234:~$ ls</span><br><span class="line">django_tutorial  main_projects</span><br><span class="line"></span><br><span class="line">ubuntu@ip-172-31-47-234:~$ <span class="built_in">cd</span> django_tutorial/</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>해당 폴더 안에서, 아래 명령어를 실행해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~/django_tutorial$ pyenv <span class="built_in">local</span> django-env</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>django-env</code> 환경이 폴더에 잘 적용되었는지 아닌지 확인 하려면, <br></p>
<p>아래와 같이 커맨드라인 맨 왼쪽에 <code>(django-env)</code> 가 표시되는지 확인 해 봅니다. <code>()</code>안에 가상환경 이름이 표시되어 있지 않으면, 제대로 적용이 되지 않은것 입니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-env) ubuntu@ip-172-31-47-234:~/django_tutorial</span><br></pre></td></tr></table></figure>

<br>

<p><code>pyenv versions</code> 명령어를 실행해서, 현재 폴더에서 사용하고 있는 환경을 확인 해 봅니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-env) ubuntu@ip-172-31-47-234:~/django_tutorial$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">  3.8.0</span><br><span class="line">  3.8.0/envs/django-env</span><br><span class="line">* django-env (<span class="built_in">set</span> by /home/ubuntu/django_tutorial/.python-version)</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p><code>*</code>가 django-env 앞에 붙어 있습니다. <br></p>
<p>해당폴더에 제대로 적용 된것을 확인 할수 있습니다. <br></p>
</blockquote>
<p><br><br></p>
<h2 id="가상환경에-설치된-패키지-목록-확인"><a href="#가상환경에-설치된-패키지-목록-확인" class="headerlink" title="가상환경에 설치된 패키지 목록 확인"></a>가상환경에 설치된 패키지 목록 확인</h2><p><br><br></p>
<p><code>pip list</code>를 실행해서 설치된 패키지들을 확인해 봅니다.</p>
<p><br>2개 밖에 설치가 안되어 있는데. 이제 해당 폴더에서 진행할 프로젝트의 필요에 따라 패키지를 설치해도. <br></p>
<br>

<blockquote>
<p>원래 시스템에 존재하던 파이썬에는 패키지가 설치되지 않습니다. <br><br></p>
<p>해당 폴더안에 있는 파이썬 환경에만 패키지가 설치 됩니다. </p>
</blockquote>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(django-env) ubuntu@ip-172-31-47-234:~/django_tutorial$ pip list</span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        19.2.3 </span><br><span class="line">setuptools 41.2.0 </span><br><span class="line">WARNING: You are using pip version 19.2.3, however version 20.0.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure>



<br>

<p>만약, 다른 프로젝트를 생성하고 싶으면, 그 프로젝트를 진행할 폴더를 생성 한다음, 가상환경을 적용후에 그 폴더안에서 프로젝트를 진행하면 됩니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>환경설정</category>
        <category>가상환경</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyenv</tag>
        <tag>virtualenv</tag>
        <tag>가상환경</tag>
      </tags>
  </entry>
  <entry>
    <title>가상환경 pyenv, virtualenv - 3편</title>
    <url>/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-3%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-3편"><a href="#가상환경-설정-pyenv-virtualenv-3편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv 3편"></a>가상환경 설정 - pyenv, virtualenv 3편</h2><br>

<blockquote>
<p>우분투가 새로 설치되었으면, </p>
<p>이 3편부터 진행 하면 됩니다. </p>
</blockquote>
<br>

<p>본격적으로 가상환경에 필요한 <code>pyenv</code>설치를 진행 합니다 </p>
<br>

<a id="more"></a>

<br>

<br>

<h2 id="설치-전-필요-패키지"><a href="#설치-전-필요-패키지" class="headerlink" title="설치 전 필요 패키지"></a>설치 전 필요 패키지</h2><br>

<p>설치에 앞서, 필요 패키지들을 설치 해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install git </span><br><span class="line">sudo apt install curl</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="pyenv-설치-진행"><a href="#pyenv-설치-진행" class="headerlink" title="pyenv 설치 진행"></a><code>pyenv</code> 설치 진행</h2><br>

<p><br>아래 깃허브 페이지 참조해서 진행 합니다. </p>
<p><a href="https://github.com/pyenv/pyenv-installer" target="_blank" rel="noopener">https://github.com/pyenv/pyenv-installer</a></p>
<br>

<br>

<blockquote>
<p>아래 커맨드를 사용해서 인스톨을 진행 합니다</p>
</blockquote>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure>

<br>

<p>설치 완료후, 아래와 같은 스크린을 보이면 됩니다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">remote: Total 10 (delta 1), reused 6 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (10/10), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">WARNING: seems you still have not added <span class="string">'pyenv'</span> to the load path.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load pyenv automatically by adding</span></span><br><span class="line"><span class="comment"># the following to ~/.bashrc:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/ubuntu/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>*<em>위 스크린의 마지막 부분 (아래 내용)을  *</em></p>
<p><strong>클립보드에 복사해 줍니다</strong> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Load pyenv automatically by adding</span></span><br><span class="line"><span class="comment"># the following to ~/.bashrc:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/ubuntu/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure>



<p><strong>정말 중요한 포인트 입니다.</strong></p>
</blockquote>
<br>

<br>

<h2 id="export-PATH를-bashrc에-등록"><a href="#export-PATH를-bashrc에-등록" class="headerlink" title="export PATH를 ~/.bashrc에 등록"></a><code>export PATH</code>를 <code>~/.bashrc</code>에 등록</h2><br>

<br>

<p>위에 복사해둔 내용을 <code>~/.bashrc</code> 파일의 마지막줄에 추가해 줘야 합니다. </p>
<br>

<blockquote>
<p>만약 위에 코드에서, </p>
<p><code># the follwoing to ~/.bashrc:</code> 부분에 <code>~/.bashrc</code> 부분이 다르게 나타나면 </p>
<p>그 경로가 바로 수정해줘야 하는 파일이 됩니다.  예) <code>~./zshrc</code> 등등 </p>
</blockquote>
<br>

<p>어쨋든 저는 <code>~/.bashrc</code>가 나와있기 때문에, <code>~/.bashrc</code>를 아래 명령어로 열어 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure>

<br>

<p>위에 복사해놓은 내용을, 파일 맨 아래에 붙여 넣습니다. </p>
<br>

<img src="/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-3%ED%8E%B8/image1.png" class=""><br>

<br>

<br>

<p>추가후에 파일을 세이브 한뒤에. 터미널을 다시 실행 시켜줍니다. </p>
<br>

<br>

<h2 id="pyenv-설치-확인하기"><a href="#pyenv-설치-확인하기" class="headerlink" title="pyenv 설치 확인하기"></a><code>pyenv</code> 설치 확인하기</h2><p><br><br></p>
<p><code>pyenv</code> 명령어를 실행해서, 아래와 같은 화면이 보이면, 일단 설치는 완료 된거 맞습니다.<br>명령어 목록들이 화면에 쭈욱 나옵니다. <br><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ pyenv</span><br><span class="line"></span><br><span class="line">pyenv 1.2.18</span><br><span class="line">Usage: pyenv &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Some useful pyenv commands are:</span><br><span class="line">   --version   Display the version of pyenv</span><br><span class="line">   virtualenv-prefix   Display real_prefix <span class="keyword">for</span> a Python virtualenv version</span><br><span class="line">   virtualenvs   List all Python virtualenvs found <span class="keyword">in</span> `<span class="variable">$PYENV_ROOT</span>/versions/*<span class="string">'.</span></span><br><span class="line"><span class="string">   whence      List all Python versions that contain the given executable</span></span><br><span class="line"><span class="string">   which       Display the full path to an executable</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">See `pyenv help &lt;command&gt;'</span> <span class="keyword">for</span> information on a specific <span class="built_in">command</span>.</span><br><span class="line">For full documentation, see: https://github.com/pyenv/pyenv<span class="comment">#readme</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="pyenv로-파이썬-설치하기"><a href="#pyenv로-파이썬-설치하기" class="headerlink" title="pyenv로 파이썬 설치하기"></a><code>pyenv</code>로 파이썬 설치하기</h2><br>

<br>

<h3 id="pyenv를-사용해서-파이썬-설치준비"><a href="#pyenv를-사용해서-파이썬-설치준비" class="headerlink" title="pyenv를 사용해서 파이썬 설치준비"></a><code>pyenv</code>를 사용해서 파이썬 설치준비</h3><br>

<br>

<p><code>pyenv</code> 를 사용해서 파이썬을 설치할수 있습니다. 우분투18.04 기준으로, <br></p>
<p>아래 명령어를 실행해서 설치전 필요 패키지들을 설치 합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \</span><br><span class="line">libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \</span><br><span class="line">xz-utils tk-dev libffi-dev liblzma-dev python-openssl git</span><br></pre></td></tr></table></figure>

<br>

<p>아래와 같은 화면이 보이면, 필요 패키지 설치가 된겁니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">or (x-terminal-emulator) <span class="keyword">in</span> auto mode</span><br><span class="line">Setting up tk (8.6.0+9) ...</span><br><span class="line">Setting up libgl1:amd64 (1.0.0-2ubuntu2.3) ...</span><br><span class="line">Setting up tk-dev:amd64 (8.6.0+9) ...</span><br><span class="line">Setting up x11-utils (7.7+3build1) ...</span><br><span class="line">Setting up libgl1-mesa-glx:amd64 (19.2.8-0ubuntu0~18.04.3) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.8.3-2ubuntu0.1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> mime-support (3.60ubuntu1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> ureadahead (0.100.0-21) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> install-info (6.5.0.dfsg.1-2) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> libc-bin (2.27-3ubuntu1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> systemd (237-3ubuntu10.39) ...</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="pyenv로-설치-가능한-파이썬-목록-확인"><a href="#pyenv로-설치-가능한-파이썬-목록-확인" class="headerlink" title="pyenv로 설치 가능한 파이썬 목록 확인"></a><code>pyenv</code>로 설치 가능한 파이썬 목록 확인</h3><br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure>

<br>

<p>아래와 같이 설치 가능한 버전 목록 출력 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">3.6.9</span><br><span class="line">3.6.10</span><br><span class="line">3.7.0</span><br><span class="line">3.7-dev</span><br><span class="line">3.7.1</span><br><span class="line">3.7.2</span><br><span class="line">3.7.3</span><br><span class="line">3.7.4</span><br><span class="line">3.7.5</span><br><span class="line">3.7.6</span><br><span class="line">3.7.7</span><br><span class="line">3.8.0</span><br></pre></td></tr></table></figure>

<br>

<br>

<blockquote>
<p>설치 가능한 파이썬 버전이 굉장히 많은데 </p>
<p>여기서 저는 3.8.0 을 설치해 보려 합니다. </p>
</blockquote>
<br>

<p>아래 명령어를 사용해서, 파이썬 3.8.0 을 설치해 줍니다 </p>
<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.8.0</span><br></pre></td></tr></table></figure>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Downloading Python-3.8.0.tar.xz...</span><br><span class="line">-&gt; https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tar.xz</span><br><span class="line">Installing Python-3.8.0...</span><br><span class="line">Installed Python-3.8.0 to /home/ubuntu/.pyenv/versions/3.8.0</span><br></pre></td></tr></table></figure>

<br>

<p>파이썬 3.8.0 의 설치가 완료 되었습니다.  </p>
<p><br><br></p>
<h3 id="pyenv로-시스템에-파이썬-목록-확인"><a href="#pyenv로-시스템에-파이썬-목록-확인" class="headerlink" title="pyenv로 시스템에 파이썬 목록 확인"></a><code>pyenv</code>로 시스템에 파이썬 목록 확인</h3><p><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure>

<br>

<p>아래와 같이 <code>*</code>가 붙은게 현재 사용중인 파이썬 입니다. 아직 <code>3.8.0</code>으로 설정이 안되어 있는데. <br></p>
<p>설정 진행을 할겁니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">* system (<span class="built_in">set</span> by /home/ubuntu/.pyenv/version)</span><br><span class="line">  3.8.0</span><br></pre></td></tr></table></figure>



<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p><code>pyenv</code>를 설치하고, 파이썬 3.8.0을 설치 하였습니다. </p>
<p>다음 포스팅에는 파이썬 3.8.0 을 전역 파이썬 환경으로 설정하고, 가상환경 관리를 다루겠습니다 </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>환경설정</category>
        <category>가상환경</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyenv</tag>
        <tag>virtualenv</tag>
        <tag>가상환경</tag>
        <tag>Ubuntu</tag>
        <tag>파이썬설치</tag>
        <tag>우분투</tag>
      </tags>
  </entry>
  <entry>
    <title>가상환경 pyenv, virtualenv - 2편</title>
    <url>/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-2편"><a href="#가상환경-설정-pyenv-virtualenv-2편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv 2편"></a>가상환경 설정 - pyenv, virtualenv 2편</h2><br>

<p>제 개인 컴퓨터에는 우분투가 설치되어 있고. 이미 파이썬과 가상환경 세팅이 완료가 되어 있기 때문에. </p>
<p><br>아주 처음부터 진행하기 위해서 AWS EC2를 새로 생성해서, 갓 설치된 우분투로 가상환경 설치를 진행 해보려 합니다.  </p>
<br>

<blockquote>
<p><strong>컴퓨터에 우분투를 새로 설치하였으면</strong> </p>
<p><strong>AWS로 접속 하지 않고 본인의 피씨 터미널에서 진행해야 합니다</strong> </p>
</blockquote>
<br>

<p>순전히, 새로운 우분투가 필요해서 AWS 에 접속해서 진행한것이지. 새로 우분투를 설치한 피씨가 있었으면, <br></p>
<p>제 피씨에서 진행 했을겁니다. </p>
<p><strong>컴퓨터에 새로 우분투를 설치하신분은 이 과정은 넘어갑니다</strong></p>
<a id="more"></a>

<br>

<br>

<h2 id="AWS-EC2-접속하기"><a href="#AWS-EC2-접속하기" class="headerlink" title="AWS EC2 접속하기"></a>AWS EC2 접속하기</h2><br>

<br>

<blockquote>
<p>AWS EC2 생성과, 키 설정에 대한 설명은 스킵하겠습니다. </p>
</blockquote>
<p><br>자신의 PC 터미널에 아래 명령어를 사용해서 본인의 인스턴스에 접속합니다.  </p>
<br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh -i ~&#x2F;.ssh&#x2F;12th.pem ubuntu@13.109.21.6</span><br></pre></td></tr></table></figure>

<br>

<img src="/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-2%ED%8E%B8/image1.png" class="">

<br>

<br>

<blockquote>
<p>접속이 잘 된것을 확인할수 있습니다. </p>
</blockquote>
<br>

<p><br><img src="/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-2%ED%8E%B8/image2.png" class=""></p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>AWS 에 생성한 우분투 인스턴스에 접속을 해보았습니다. </p>
<p><br>순전히 갓 설치된 우분투 시스템이 필요해서 생성후 만든 인스턴스이고.. <br></p>
<p>이 과정은 사실 가상환경 설정과는 무관합니다.</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>환경설정</category>
        <category>가상환경</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyenv</tag>
        <tag>virtualenv</tag>
        <tag>가상환경</tag>
        <tag>Ubuntu</tag>
      </tags>
  </entry>
  <entry>
    <title>가상환경 pyenv, virtualenv - 1편</title>
    <url>/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-1편"><a href="#가상환경-설정-pyenv-virtualenv-1편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv 1편"></a>가상환경 설정 - pyenv, virtualenv 1편</h2><br>

<br>

<blockquote>
<p>virtualenv, pyenv-virtualenv </p>
<p>pyenv 는 다중의 파이썬 버전을 쉽게 바꿔가며 사용할수 있게 해주는 도구 입니다. </p>
</blockquote>
<br>

<br>

<h2 id="Virtualenv"><a href="#Virtualenv" class="headerlink" title="Virtualenv"></a>Virtualenv</h2><br>

<br>

<blockquote>
<p>virtualenv 는 분리된 파이썬 환경을 </p>
<p>만들어 주는 도구 입니다.</p>
</blockquote>
<br>

<p><br><a id="more"></a></p>
<p>가상환경은 각 프로젝트마다 설치된 패키지들의 충돌을 막아주기 위해서 필요합니다. </p>
<p>파이썬에서 기본적으로 사용되는 패키지는 virtualenv 이고, pyenv 와 같이 사용해서 <br></p>
<br>

<p>여러개의 파이썬 버전 환경을 적용한 가상환경을 생성하여 사용할수 있습니다. </p>
<br>

<br>

<h2 id="가상환경은-왜-필요한가"><a href="#가상환경은-왜-필요한가" class="headerlink" title="가상환경은 왜 필요한가"></a>가상환경은 왜 필요한가</h2><br>

<br>

<p>우리의 시스템에 설치된 파이썬 환경은 1개 입니다. </p>
<p>그런데, 우리는 여러개의 프로젝트를 진행 해야 하는 상황이 옵니다. </p>
<br>

<blockquote>
<p>아래 상황을 생각해 봅니다 </p>
</blockquote>
<br>

<ul>
<li>프로젝트 A 는 페키지 1, 2, 3 이 필요합니다 </li>
<li>프로젝트 B 는 패키지 1, 2, 4, 5 가 필요합니다 </li>
<li>프로젝트 C는 패키지 1만 필요합니다. </li>
</ul>
<br>

<p>시스템에 존재하나 1개의 파이썬 환경으로 프로젝트 A, B, C 모두 다 진행할수 있지만, <br>각 프로젝트에 딸려있는 패키지들끼리 충돌할수도 있습니다. </p>
<br>

<p>그리고, 필요하지도 않은 패키지를 모두 시스템에 설치해야하는데.. 필요하지 않은 패키지를 설치할 이유가 있을까요? </p>
<br>

<br>

<p><strong>프로젝트 A 를 진행할 파이썬 환경 1개</strong></p>
<p><strong>프로젝트 B 를 진행할 파이썬 환경 1개</strong></p>
<p><strong>프로젝트 C 를 진행할 파이썬 환경 1개</strong></p>
<br>

<p>이렇게 3개의 환경을 가지고 있으면 좋겠는데.. 그렇다면 PC 가 3대 있어야 하는건가요? </p>
<br>

<br>

<h2 id="pyenv-virtualenv-사용해서-가상환경-설정"><a href="#pyenv-virtualenv-사용해서-가상환경-설정" class="headerlink" title="pyenv, virtualenv 사용해서 가상환경 설정"></a>pyenv, virtualenv 사용해서 가상환경 설정</h2><br>

<p><code>pyenv</code>와 <code>virtualenv</code> 같은 라이브러리를 사용하여, 가상환경을 생성후, 별도의 시스템 환경으로 각각의 프로젝트들을 진행할수 있습니다. </p>
<p><br><br></p>
<blockquote>
<p>시스템에 이미 설치되어 있는 파이썬과 </p>
<p>분리된 가상환경을 만들어서 </p>
<p>각각의 프로젝트를 진행 할수 있습니다. </p>
</blockquote>
<p><br><br></p>
<ul>
<li>가상환경 A - 프로젝트A에 필요한 패키지들만 설치후, 프로젝트 A 진행 </li>
<li>가상환경 B - 프로젝트B에 필요한 패키지들만 설치후, 프로젝트 B 진행 </li>
<li>가상환경 C - 프로젝트C에 필요한 패키지들만 설치후, 프로젝트 C 진행 </li>
</ul>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>가상환경이 필요한 이유에 대해서 아주 짧게 알아보았습니다. </p>
<p><br>다음 포스팅은 라이브러리 설치 및 가상환경 설정 에 대해서 진행 합니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>환경설정</category>
        <category>가상환경</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>pyenv</tag>
        <tag>virtualenv</tag>
        <tag>가상환경</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Variable Annotations</title>
    <url>/2020/04/10/PEP8-Variable-Annotations/</url>
    <content><![CDATA[<h2 id="변수-Annotations"><a href="#변수-Annotations" class="headerlink" title="변수 Annotations"></a>변수 Annotations</h2><br>

<br>

<p>PEP526 에서는, 변수 주석에 대해서 소개하고 있습니다.</p>
<p><br>변수 주석에 대한 스타일 권장사항은 함수 주석 스타일과 비슷합니다. </p>
<br>

<br>

<ul>
<li>모듈레벨에서 변수들, 클래스 그리고 인스턴스 변수들과 지역 변수들은 <code>:</code> 뒤에 1칸 띄워줍니다</li>
<li>콜론뒤에는 빈공간이 없어야 합니다 </li>
<li><code>=</code> 양쪽에 정확히 한칸씩 띄워줍니다</li>
</ul>
<p><br><a id="more"></a></p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">code : int </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    coords: Tuple[int, int]</span><br><span class="line">    label: str = <span class="string">'&lt;unknown&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line">code:int	<span class="comment"># 콜론 뒤에 띄어스기를 안해줬습니다 </span></span><br><span class="line">code : int	<span class="comment"># 콜론 앞에 띄어쓰기가 있습니다 </span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    result: int=<span class="number">0</span>	<span class="comment"># = 주변에 빈공간이 없습니다</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>PEP526이 python3.6 에서 적용되었다 하더라도, 변수 주석 syntax 는 모든 버전 파이썬에 <code>stub files</code> 에 적용 되기를 권장합니다.<br></p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>이것으로 PEP8에 소개된 스타일 가이드를 전부 훑어 보았습니다. </p>
<p><br>아직 남아있는 <code>function annotation</code> 과 <code>variable annotation</code>은 각각 PEP484 와 PEP526 을 참조하면 됩니다. </p>
<br>

<p>484와 526의 양이 좀 방대하기 때문에, 나중에 따로 포스팅을 할 예정입니다. </p>
<br>

<p>PEP8 관련 포스팅을 하면서, 이해가 안가는 부분이 아직 많습니다. </p>
<br>

<p>아직까지는, PEP8 에 나와있는 모든것을 고민하면서 코드를 쓸 단계가 아니라서 그런것 같습니다… 코딩 공부를 좀더 진행을 해보면서, PEP8 을 끊임없이 리뷰할것이고, 수정이 필요한 포스팅은 다시 수정 될것입니다.</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Annotations</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Function Annotations</title>
    <url>/2020/04/10/PEP8-Function-Annotations/</url>
    <content><![CDATA[<h2 id="함수-Annotations"><a href="#함수-Annotations" class="headerlink" title="함수 Annotations"></a>함수 Annotations</h2><br>

<br>

<blockquote>
<p><strong>Annotation</strong></p>
<p>어노테이션은 원래 주석이나 노트 라는 뜻인데, </p>
<p>파이썬에서 우리가 흔히 사용하는 일반 주석과는 역할이 좀 다릅니다. </p>
<br>

<p>어노테이션은 함수나 변수에 코드를 달아서, 일반 주석과는 다른 의미나 기능을 부여합니다. <br></p>
<br>

<p>함수나 변수에 일반 주석으로는 설명이 너무 길어지거나, 정확한 설명이 불가능할때, </p>
<p>그리고 특별한 의미를 부여하고 싶을때 Annotation 을 사용합니다. </p>
</blockquote>
<br>

<br>

<h2 id="Function-Annotations"><a href="#Function-Annotations" class="headerlink" title="Function Annotations"></a>Function Annotations</h2><br>

<p>이 번 포스팅은 function annotations 에 대한 포스팅 입니다. </p>
<br>

<p>Annotation 은 함수에 추가로 들어가는 주석입니다. </p>
<p>PEP484의 허용과 함께, 함수에 들어가는 주석 스타일이 바뀌고 있는 추세입니다 </p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>파이썬3 코드에서는, </p>
<p>향후 버전 호환성을 위해서 PEP484 의 syntax 를 사용하는걸 권장 합니다. </p>
</blockquote>
<br>

<br>

<h2 id="PEP484"><a href="#PEP484" class="headerlink" title="PEP484"></a>PEP484</h2><br>

<p>함수내에 주석 스타일 가이드는 PEP484에 나와있는 스타일 가이드가 권장 됩니다.</p>
<p><br>예를들면, 덩치가 큰 제3자 라이브러리를 마킹 하거나, PEP484 스타일의 <code>type</code>주석 등이 있습니다. PEP484에는 주석달기가 얼마나 쉬운지에 대한 리뷰 그리고 해당 스타일이 얼마나 코드의 이해성을 높이는지에 대한 관찰 사항들이 나와 있습니다. </p>
<br>

<p>파이썬 스탠다드 라이브러리는 주석을 받아들이는데에 보수적이어야 하지만, 주석의 사용은 새로운 코드와 큰 리펙토링에는 허용됩니다. </p>
<br>

<br>

<h2 id="Function-Annotation-과-다른-사용"><a href="#Function-Annotation-과-다른-사용" class="headerlink" title="Function Annotation 과 다른 사용"></a>Function Annotation 과 다른 사용</h2><br>

<br>

<blockquote>
<p>함수 주석과 다른 사용을 원하는 코드는, </p>
<p>일반 커멘트 형식을 갖습니다. </p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># type: ignore</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>린터와 타입 확인자는 선택 사항이고. 별도의 도구 입니다. 파이썬 인터프러터는 기본적으로 타입 확인에 의한 메시지를 발생 시키지 않고. 함수 주석이기 때문에 코드의 동작을 바꾸지 않습니다. </p>
<br>

<p>타입 확인을 원하지 않는 사용자는, 그것을 무시해도 괜찮습니다. 하지만, 3자 라이브러리 패키지는 타입 확인자를 실행하려 할수도 있습니다. 이점을 위해 <code>PEP484</code> 는 <code>stub</code> 파일들을 사용하는것을 권장 합니다.</p>
<br>

<br>

<p>이전 버전 호환성이 필요한 코드들은, 타입 주석을 일반 주석 형태로 추가 할수 있습니다. (PEP484 참조) </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>이번 토픽은 PEP484의 소개밖에 없습니다. </p>
<p>PEP484 를 좀 자세히 보려 했는데. 내용이 너무 방대해서, 나중에 따로 나누어서 포스팅 해야 할것 같습니다. </p>
<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Annotations</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 - 네이버 웹마스터 도구 등록</title>
    <url>/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/</url>
    <content><![CDATA[<h2 id="네이버-웹마스터-회원가입-서치어드바이저"><a href="#네이버-웹마스터-회원가입-서치어드바이저" class="headerlink" title="네이버 웹마스터 회원가입 (서치어드바이저)"></a>네이버 웹마스터 회원가입 (서치어드바이저)</h2><br>

<p>네이버 웹마스터툴 사이트에 접속해서. </p>
<p>회원가입 후 로그인을 진행 합니다. (기존 네이버 아이디가 있으면, 회원가입 할 필요는 없습니다~) </p>
<br>

<br>

<h2 id="사이트-등록"><a href="#사이트-등록" class="headerlink" title="사이트 등록"></a>사이트 등록</h2><br>

<br>

<p>웹마스터 도구에 <code>Search Advisor</code> 로 들어갑니다. </p>
<br>

<p>들어가면, 사이트를 등록하라고 나오는데. 아래 캡쳐 화면을 참조해주세요. </p>
<br>

<a id="more"></a>

<img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image1.png" class="">

<br>

<br>

<h2 id="사이트-소유확인-진행"><a href="#사이트-소유확인-진행" class="headerlink" title="사이트 소유확인 진행"></a>사이트 소유확인 진행</h2><br>

<br>

<p>사이트의 소유 확인을 진행합니다. </p>
<p><br>구글 서치 콘솔때 진행 했던 방식이랑 비슷비슷하네요 ㅎㅎ </p>
<br>

<br>

<img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image2.png" class="">



<p><br><br></p>
<blockquote>
<p>저는 HTML 태그를 블로그의 <code>&lt;head&gt;</code> 부분에 붙여서. 소유 확인을 진행 할것입니다. <br></p>
</blockquote>
<br>

<br>

<h2 id="HTML-태그를-lt-head-gt-섹션에-붙이기"><a href="#HTML-태그를-lt-head-gt-섹션에-붙이기" class="headerlink" title="HTML 태그를 &lt;head&gt;섹션에 붙이기"></a>HTML 태그를 <code>&lt;head&gt;</code>섹션에 붙이기</h2><br>

<br>

<p>처음에는 이게 정말 어려웠는데. 이제는 쉽습니다. </p>
<br>

<p>우선, 필자 기준으로 <code>blog/themes/hexo-theme-next/layout</code>블로그 폴더로 이동 합니다. </p>
<br>

<p>이 폴더에 있는 <code>_layout.swig</code>파일을 열어서, 네이버 사이트 소유확인 html 테그를 붙여 넣습니다. </p>
<br>

<p><code>blog/themes/hexo-theme-next/layout/_layout.swig</code> 파일 캡쳐 </p>
<br>

<blockquote>
<p><code>&lt;/head&gt;</code>태그가 있는곳 바로 위에 붙여 줍니다. </p>
</blockquote>
<br>

<img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image4.png" class="">

<br>

<br>

<p>파일 수정이 끝났으면, 잊지않고 <code>hexo generate</code> 그리고 <code>hexo deploy</code> 를 실행해서. <br></p>
<p>깃헙 페이지에 배포합니다. </p>
<blockquote>
<p>소유 확인 버튼을 눌러서 진행 해줍니다 </p>
</blockquote>
<br>

<br>

<img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image3.png" class="">

<br>

<br>

<p>금방 소유확인이 되는군요 ㅎㅎ </p>
<br>

<img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image5.png" class="">

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>다른거 보다가 문득 생각나서 한번 등록 해보았습니다. </p>
<p><br>네이버 웹마스터도 뭔가 더 기능이 있을거 같긴 한데.. 우선 등록만 이렇게 마쳐놓고.</p>
<p><br>나중에 더 알아보도록 하겠습니다. </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Hexo Blog</tag>
        <tag>Naver</tag>
        <tag>네이버 웹마스터</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Programming Recommendations - 4편</title>
    <url>/2020/04/09/PEP8-Programming-Recommendations-4%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="프로그래밍-권장사항들"><a href="#프로그래밍-권장사항들" class="headerlink" title="프로그래밍 권장사항들"></a>프로그래밍 권장사항들</h2><br>

<br>

<h2 id="불리언값의-비교는-연산자를-사용하지-않습니다"><a href="#불리언값의-비교는-연산자를-사용하지-않습니다" class="headerlink" title="불리언값의 비교는 == 연산자를 사용하지 않습니다"></a>불리언값의 비교는 <code>==</code> 연산자를 사용하지 않습니다</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">if</span> greetings:</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">if</span> greetings == <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 틀린예 </span></span><br><span class="line"><span class="keyword">if</span> greeting <span class="keyword">is</span> <span class="literal">True</span>:</span><br></pre></td></tr></table></figure>

<br>

<p><br><a id="more"></a></p>
<h2 id="try-finally-안에-흐름제어-구문"><a href="#try-finally-안에-흐름제어-구문" class="headerlink" title="try..finally 안에 흐름제어 구문"></a><code>try..finally</code> 안에 흐름제어 구문</h2><br>

<br>

<p><code>try..finally</code> 에서 <code>finally</code>부분안에는 <code>return/break/continue</code> 같은 흐름제어 구문의 사용은 권장되지 않습니다. </p>
<br>

<p><code>finally</code> 안에 <code>return/break/continue</code> 같은 구문을 사용하면, 암시적으로 활성화 된 예외를 취소시키기 때문에. finally 안에 흐름제어 구문의 사용은 권장 되지 않습니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 틀린예</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">42</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>PEP8에서 얘기하는 프로그래밍 권장 사항들에 대해서 알아보았습니다. </p>
<br>

<p>프로그래밍 전반에 걸친 다양한 권장사항이고. 깊은 컨셉입니다. </p>
<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>프로그램 권장사항들</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Programming Recommendations - 3편</title>
    <url>/2020/04/08/PEP8-Programming-Recommendations-3%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="프로그래밍-권장사항들-3편"><a href="#프로그래밍-권장사항들-3편" class="headerlink" title="프로그래밍 권장사항들 - 3편"></a>프로그래밍 권장사항들 - 3편</h2><br>

<blockquote>
<p>운영체체 에러를 잡아낼때에는, </p>
<p>파이썬 3.3 이후에서 소개된 명시적인 예외 상화관계를 사용합니다 <br></p>
</blockquote>
<br>

<br>

<h2 id="모든-try-except구문"><a href="#모든-try-except구문" class="headerlink" title="모든 try/except구문"></a>모든 <code>try/except</code>구문</h2><br>

<p>모든 <code>try/except</code>절에 대해 <code>try</code> 절을 필요한 최소의 코드 양으로 사용 제한을 합니다. 버그가 가려지는걸 피할수 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    value = collection[key]</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="keyword">return</span> key_not_found(key)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> handle_value(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 너무 광범위함 </span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">handle_value(collection[key])</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="comment"># Will also catch KeyError raised by handle_value()</span></span><br><span class="line">    <span class="keyword">return</span> key_not_found(key)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="특정-코드-섹션에-로컬-자원"><a href="#특정-코드-섹션에-로컬-자원" class="headerlink" title="특정 코드 섹션에 로컬 자원"></a>특정 코드 섹션에 로컬 자원</h2><br>

<p>자원이 특정 코드 섹션에 대해 로컬로 있을때에는 <code>with</code>문을 사용하여, 사용후 빠르고 안정적으로 정리되도록 합니다. <code>try/finally</code> 구문도 허용됩니다. </p>
<br>



<h2 id="Context-Manager"><a href="#Context-Manager" class="headerlink" title="Context Manager"></a>Context Manager</h2><br>

<p>자원을 확보하거나 해제 하는것이 아닌 경우의 컨텍스트 메니져는 분리된 함수 혹은 메써드를 통해서 호출 되어야 합니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">with</span> conn.begin_transaction():</span><br><span class="line">    do_stuff_in_transaction(conn)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">with</span> conn:</span><br><span class="line">    do_stuff_in_trnasaction(conn)</span><br></pre></td></tr></table></figure>

<br>

<p>후의 예시는, <code>__enter__</code> 및 <code>__exit__</code> 메서드가 트랜셕션 후 연결을 닫는 것 이외의 작업을 수행하고 있음을 나타내는 정보를 제공하지 않습니다. </p>
<p><br><br></p>
<p>이 경우에는 명시적인게 중요합니다. <br></p>
<br>



<h2 id="리턴-구문안에서는-일관성이-있어야-합니다"><a href="#리턴-구문안에서는-일관성이-있어야-합니다" class="headerlink" title="리턴 구문안에서는 일관성이 있어야 합니다"></a>리턴 구문안에서는 일관성이 있어야 합니다</h2><br>

<br>

<p>함수안에 모든 리턴 구문은 수식을 반환해야 합니다. 만약 어떤 리턴 구문이 수식을 반환할때. 어떠한 값이 없는 리턴 구문은 명시적으로, <code>return None</code> 이라고 해주어야 합니다. </p>
<br>

<p>그리고, 명시적인 리턴 구문은 함수의 마지막에 존재해야 합니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="문자열-모듈보다는-문자열-메써드-사용"><a href="#문자열-모듈보다는-문자열-메써드-사용" class="headerlink" title="문자열 모듈보다는 문자열 메써드 사용"></a>문자열 모듈보다는 문자열 메써드 사용</h2><br>

<p>문자열 메써드는 언제나 빠르고, 유니코드 문자와 함께 같은 API 를 공유합니다.</p>
<br>

<br>

<h2 id="startswith-와-endwith"><a href="#startswith-와-endwith" class="headerlink" title="startswith() 와  endwith()"></a><code>startswith()</code> 와  <code>endwith()</code></h2><br>

<br>

<p>접두사와 접미사를 확인하기 위해서는, 문자열 슬라이싱 보다 <code>startswith()</code>와 <code>endwith()</code> 를 사용합니다. </p>
<p><br><code>startswith()</code>와 <code>endswith()</code>가 더 깔끔하고 에러가 적습니다. </p>
<br>

<br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 좋은예 </span><br><span class="line">if foo.startswith(&#39;bar&#39;):</span><br><span class="line"></span><br><span class="line"># 나쁜예 </span><br><span class="line">if foo[:3] &#x3D;&#x3D; &#39;bar&#39;</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="객체-타입-비교는-isinstance-사용"><a href="#객체-타입-비교는-isinstance-사용" class="headerlink" title="객체 타입 비교는 isinstance() 사용"></a>객체 타입 비교는 <code>isinstance()</code> 사용</h2><br>

<br>

<p>객체 타입 비교를 할때는, 직접 타입 비교를 하기 보다는 <code>isinstance()</code>를 사용합니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">if</span> isinstance(obj, int);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">if</span> type(obj) <span class="keyword">is</span> type(<span class="number">1</span>):</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>객체가 문자열인지 아닌지 확인할때에는, 그것이 유니코드 문자열일수도 있다는것을 염두해 두세요. <br></p>
<p>파이썬2 에서는, <code>str</code>과 <code>unicode</code>는 같은 베이스 클래스, <code>basestring</code>을 가지고 있습니다. <br><br></p>
<p>따라서, 아래와 같이 쓸수 있습니다. <br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Python2 </span></span><br><span class="line"><span class="keyword">if</span> isinstance(obj, basestring)</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>파이썬3 에서는, <code>unicode</code>와 <code>basestring</code>은 존재하지 않습니다. <code>str</code>만 존재하고</p>
<p><code>bytes</code>객체는 더이상 문자열 종류가 아닙니다.  <br></p>
<br>

<h2 id="시퀀스들-문자열-리스트-튜플-빈-시퀀스는-False-를-반환합니다"><a href="#시퀀스들-문자열-리스트-튜플-빈-시퀀스는-False-를-반환합니다" class="headerlink" title="시퀀스들(문자열, 리스트, 튜플) 빈 시퀀스는 False 를 반환합니다"></a>시퀀스들(문자열, 리스트, 튜플) 빈 시퀀스는 False 를 반환합니다</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> seq:</span><br><span class="line"><span class="keyword">if</span> seq:</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">if</span> len(seq):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> len(seq):</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>프로그래밍 권장 사항들이 꽤 많네요. </p>
<p><br>나머지 권장 사항들은 다음 포스팅에 이어서 쓰겠습니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>프로그래밍 권장사항들</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Programming Recommendations - 2편</title>
    <url>/2020/04/08/PEP8-Programming-Recommendations-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="PEP8-프로그래밍-권장사항들-2편"><a href="#PEP8-프로그래밍-권장사항들-2편" class="headerlink" title="PEP8 프로그래밍 권장사항들 - 2편"></a>PEP8 프로그래밍 권장사항들 - 2편</h2><p><br><br></p>
<h2 id="BaseException이-아닌-Exception"><a href="#BaseException이-아닌-Exception" class="headerlink" title="BaseException이 아닌 Exception"></a>BaseException이 아닌 Exception</h2><br>

<blockquote>
<p>BaseException 이 아닌 </p>
<p>Exception 에서 예외를 파생 시킵니다. </p>
</blockquote>
<br>

<p>BaseException에서 직접 상속은 예외를 잡는것이 틀린일인 예외를 위해 있습니다. </p>
<br>

<p>예외를 잡아내는 코드가 필요한 곳과, 예외가 발생하는곳을 잘 구분해서. 예외의 상하관계를 디자인 합니다. </p>
<br>

<p>“문제가 발생했습니다” 라는 단순한 얘기보다. 프로그래밍적으로 “무엇이 잘못됬지?” 라는 질문을 답하도록 목표합니다. </p>
<br>

<br>

<p>예외가 오류인 경우 예외 클래스에 접미사 <code>Error</code>를 추가해야 합니다만, 클래스 이름 지정 규칙이 여기에 적용됩니다.  </p>
<br>

<br>

<a id="more"></a>

<br>

<h2 id="예외연계"><a href="#예외연계" class="headerlink" title="예외연계"></a>예외연계</h2><br>

<p>파이썬3 에서는 “raise X form Y” 라는 형태의 예외 연계를 적절하게 써줘야 합니다. 이렇게 하면, 본래의 <code>traceback</code>을 잃지 않고, 명시적으로 교체를 해줄수 있습니다. </p>
<br>

<p>내부 예외를 교체할때는 (파이썬2 에서는 <code>raise X</code>, 파이썬 3.3부터는 <code>raise X from None</code>), 연관이 있는 세부사항들이 새로운 예외로 전송되어야 합니다. 연관이 있는 세부사항들에 대한 예를 들자면, 속성명이나, 원조 예외의 메시지 등을 예로 들수 있습니다. </p>
<br>

<br>

<h2 id="raiseValueError-39-message-39"><a href="#raiseValueError-39-message-39" class="headerlink" title="raiseValueError(&#39;message&#39;)"></a><code>raiseValueError(&#39;message&#39;)</code></h2><br>

<p><code>raiseValueError(&#39;message&#39;)</code> 형태는 옛날 스타일로, 파이썬3에서는 허용되지 않습니다. </p>
<br>

<br>

<h2 id="예외를-잡아낼때는-bare-except-절의-사용을-피합니다"><a href="#예외를-잡아낼때는-bare-except-절의-사용을-피합니다" class="headerlink" title="예외를 잡아낼때는, bare except:절의 사용을 피합니다"></a>예외를 잡아낼때는, <code>bare except:</code>절의 사용을 피합니다</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">import</span> platform_speicific_module </span><br><span class="line"><span class="keyword">except</span> ImportError:</span><br><span class="line">    platform_specific_module = <span class="literal">None</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>bare except:</code>    절은 <code>SystemExit</code> 하고 <code>KeyboardInterrupt</code> 예외를 잡아낼것이고, <code>Ctrl + C</code> 로 방해하기 어렵고, 다른 문제들을 야기시킬수 있습니다. </p>
<br>

<p>만약 프로그램 에러 신호를 보내는 모든 예외들을 잡고 싶다면, <code>except Exception:</code>을 사용합니다. </p>
<br>

<p>가장 좋은 방법은 <code>bare except:</code>절의 사용을 두가지 경우로 제한하는겁니다. </p>
<br>

<ol>
<li>예외 처리기가 traceback을 인쇄하거나 기록하는 경우, 사용자는 최소한 오류가 발생했음을 알게 됩니다 </li>
<li>코드가 정리 작업을 수행해야 할때, 예외가 발생하면 예외가 위쪽으로도 영향을 미칠수 있습니다. <code>try, finally</code> 를 쓰는것이 이런것을 다룰때 좋습니다. </li>
</ol>
<br>

<br>

<h2 id="잡은-예외를-이름에-묶어두고-싶을때"><a href="#잡은-예외를-이름에-묶어두고-싶을때" class="headerlink" title="잡은 예외를 이름에 묶어두고 싶을때"></a>잡은 예외를 이름에 묶어두고 싶을때</h2><br>

<br>

<p>파이썬2.6 에 추가된 명시적인 이름 묶기 syntax 를 사용합니다 </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    process_data()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">    <span class="keyword">raise</span> DataProcessingFailedError(str(exc))</span><br></pre></td></tr></table></figure>



<br>

<p>이것은 파이썬 3에서만 지원됩니다. 오래된 스타일의 콤마가 들어가는 syntax 를 사용해서 혼란스러운 문제들은 피해야 합니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>프로그래밍 권장사항 내용이 길어지네요. </p>
<p>대부분의 경우에는 아직까지 이해가 잘 안가고. 원문을 읽어봐도 이해가 잘 안갑니다 ㅠㅠ </p>
<br>

<p>근데 이게, 아직 제가 프로그래밍 레벨이 낮아서 이해가 안가는거 같습니다. <br></p>
<p>나중엔 좀 더 이해가 빠르겟죠? ㅎ</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>프로그래밍 권장사항들</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Programming Recommendations - 1편</title>
    <url>/2020/04/08/PEP8-Programming-Recommendations-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="PEP8-Programming-Recommendations-1편"><a href="#PEP8-Programming-Recommendations-1편" class="headerlink" title="PEP8 Programming Recommendations - 1편"></a>PEP8 Programming Recommendations - 1편</h2><br>

<br>

<p><strong>프로그래밍 권장 사항들 - 1편입니다</strong></p>
<br>

<br>

<h2 id="다른-파이썬-라이브러리의-구현"><a href="#다른-파이썬-라이브러리의-구현" class="headerlink" title="다른 파이썬 라이브러리의 구현"></a>다른 파이썬 라이브러리의 구현<br></h2><p><br><br></p>
<p>코드는 다른 파이썬 구현에 불리하지 않은 방식으로 작성되어야 합니다. </p>
<p>다른 파이썬의 구현체들 (PyPy, Jython, IronPython, Cython, Pysco 등등) </p>
<br>

<p>예를들면, CPython에서 <code>a += b</code> 혹은 <code>a = a + b</code> 형태의 문자열 연결은 효율적인 구현체 이지만. <br></p>
<p>이 형태조차, CPython 에서도 특정 타입에만 통하고, 모든 구현에 나오지 않습니다. </p>
<br>

<p>따라서, CPython의 효율적인 내부 문자열 연결 구현에 너무 의존하는것은 좋지 않습니다<br></p>
<p><br><br></p>
<blockquote>
<p>퍼포먼스가 중요한 라이브러리에서는, <code>&#39;&#39;.join()</code> 형태가 대신 사용되어야 합니다 </p>
</blockquote>
<p><br><br></p>
<a id="more"></a>

<br>

<h2 id="Singletons-에-대한-비교"><a href="#Singletons-에-대한-비교" class="headerlink" title="Singletons 에 대한 비교 "></a>Singletons 에 대한 비교 <br></h2><br>

<p>None 같은 singletons에 대한 비교는 항상 <code>is</code> 혹은 <code>is not</code> 을 사용합니다. 절대 <code>=</code>를 사용하지 않습니다. </p>
<br>

<blockquote>
<p>파이썬에서 singletons 는 </p>
<p>창의적인 디자인 패턴으로, 같은 종류의 객체만 존재하고 </p>
<p>다른 코드에게 단일 엑세스 지점을 제공합니다. </p>
<br>

<p>singletons 는 전역 변수들과 같은 장점과 단점을 가지고 있습니다. </p>
<p>굉장히 유용하지만, 코드의 모듈화를 떨어트립니다. </p>
</blockquote>
<br>

<p>if 를 사용할때 if x 가 진짜 if x is not None 일것임을 알고 써야합니다<br><br> (예를들어, 하나의 변수 혹은 인자가 기본값이 None 으로 다른 값에 설정이 되어 있을때. 컨테이너 같은 값들은 이미 타입을 가지고 있을수 있습니다. 이럴경우, 정확한 불리언 값을 얻을수가 없게 됩니다. 따라서, 불리언으로 테스트 하면 False 가 나옵니다.  )</p>
<p><br><br></p>
<h2 id="is-not-연산자를-not-…-is-대신-사용합니다"><a href="#is-not-연산자를-not-…-is-대신-사용합니다" class="headerlink" title="is not 연산자를 not … is 대신 사용합니다."></a>is not 연산자를 not … is 대신 사용합니다.</h2><p><br><br></p>
<p>두가지 표현 모두 기능적으로 똑같지만, 전자가 더 가독서이 좋아서 선호됩니다.<br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">if</span> foo <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> foo <span class="keyword">is</span> <span class="literal">None</span>:</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="6가지-비교연산"><a href="#6가지-비교연산" class="headerlink" title="6가지 비교연산"></a>6가지 비교연산</h2><br>

<br>

<p>특정 비교연산을 하기 위해서 다른 코드를 의존하기 보다는, </p>
<p>6가지의 모든 연산을 구현하는게 좋습니다 </p>
<br>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__eq__</span><br><span class="line">__ne__</span><br><span class="line">__lt__</span><br><span class="line">__le__</span><br><span class="line">__gt__</span><br><span class="line">__ge__</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>funtools.total_ordering()</code>데코레이터는 현재 놓치고 있는 비교 방법을 생성하는 툴을 제공합니다<br></p>
<br>

<blockquote>
<p>PEP207을 참조하면, 파이썬 인터프리터에는 반사 규칙이 존재합니다<br></p>
</blockquote>
<p>반사규칙에 의해서, 인터프리터는 아래의 형태로 값을 바꿀수 있습니다. </p>
<br>

<p><code>y &gt; x</code>를 <code>x &lt; y</code> 로 </p>
<p><code>y &gt;= x</code> 를 <code>x &lt;= y</code> 로 </p>
<p><code>x == y</code> 그리고 <code>x != y</code>같은 인자들을 바꿀수 있습니다. </p>
<br>

<p><code>sort()</code>함수와 <code>min()</code> 연산들은 <code>&lt;</code>  을 사용하고, <code>max()</code>함수는 <code>&gt;</code>를 사용합니다. </p>
<p><br>그렇지만, 모든 6개의 연산을 사용하여, 최대한 혼란을 일으키지 않게 하는것이 제일 좋습니다. </p>
<br>

<br>

<h2 id="lambda-를-사용한-수식보다는-def구문을-사용합니다"><a href="#lambda-를-사용한-수식보다는-def구문을-사용합니다" class="headerlink" title="lambda 를 사용한 수식보다는 def구문을 사용합니다"></a><code>lambda</code> 를 사용한 수식보다는 <code>def</code>구문을 사용합니다</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(x)</span>:</span> <span class="keyword">return</span> <span class="number">2</span>*x</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line">f = <span class="keyword">lambda</span> x: <span class="number">2</span>*x</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..<br></h2><br>

<p>프로그래밍에 대한 권장 사항들인데. </p>
<p><br>컨셉이 상당히 깊게 느껴집니다. <br>위 내용을 모두 알아들을 만큼의 레벨까지 프로그래밍 공부가 완료되지 않았기 때문에. </p>
<br>

<p>어떤것은 이해가 전혀 가지 않기도 하고, 표현도 어색합니다<br></p>
<br>

<p>몇번이나 다짐하지만, 좀더 깊게 공부를 한 다음에 다시 봐야 할것 같습니다. </p>
<br>

<br>







<p><br><br><br><br><br><br><br><br><br><br><br></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>프로그래밍 권장사항들</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Naming Conventions - 4편</title>
    <url>/2020/04/07/PEP8-Naming-Conventions-4%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="파이썬-Naming-Convention-4편"><a href="#파이썬-Naming-Convention-4편" class="headerlink" title="파이썬 Naming Convention - 4편"></a>파이썬 Naming Convention - 4편</h2><br>

<br>

<h2 id="Public-and-Internal-Interface"><a href="#Public-and-Internal-Interface" class="headerlink" title="Public and Internal Interface"></a>Public and Internal Interface</h2><br>

<br>

<blockquote>
<p>이전 버전과 호환성을 보장하는것은 </p>
<p>오직 퍼블릭 인터페이스에만 적용됩니다. </p>
</blockquote>
<br>

<br>

<p>따라서, 사용자들은 퍼블릭 인터페이스와 내부 인터페이스를 잘 구분하는것이 중요합니다. </p>
<br>

<br>

<p><strong>public interface (공용 인터페이스)</strong>는 독립적인 소프트웨어 엔티티가 상호 작용하는 논리적 지점입니다. 엔티니는 단일 컴퓨터, 네트워크 또는 다양한 토폴로지에서 서로 상호 작용할수 있습니다. 상호 작용을 계속 하려면, 퍼블릭 이너페이스가 안정적이여야 하고, 향후 변경 및 개선 및 사용중단을 지원하도록 잘 설계되어야 합니다. </p>
<br>

<br>

<a id="more"></a>

<h2 id="문서화가-되어-있는-인터페이스"><a href="#문서화가-되어-있는-인터페이스" class="headerlink" title="문서화가 되어 있는 인터페이스"></a>문서화가 되어 있는 인터페이스</h2><br>

<br>

<p>보통 문서화가 되어 있는 인터페이스는 퍼블릭 인터페이스라고 봅니다. </p>
<br>

<p>만약, 문서에 명시적으로 인터페이스가 이전 버전과 호환성을 고려하지 않아도 되는 잠정적 혹은 내부 인터페이스라고 선언이 되어 있는 경우에는 퍼블릭 인터페이스라고 보지 않습니다. </p>
<br>

<br>

<p>모든 문서화 되지 않은 인터페이스들은 내부 인터페이스인것으로 추정합니다. </p>
<br>

<br>

<h2 id="all-속성"><a href="#all-속성" class="headerlink" title="__all__ 속성"></a><code>__all__</code> 속성</h2><br>

<br>

<p>모듈은 <code>__all__</code>을 사용하여, 명시적으로 퍼블릭 API 안에 이름을 선언합니다. </p>
<p><br><code>__all__</code>을 비어있는 리스트에 설정함으로써, 모듈이 퍼블릭 API 를 가지고 있지 않다고 표시합니다. </p>
<p><br>만약 어떤 네임공간의 사용이 내부적으로 사용으로 보일때는, 인터페이스도 internal interface로 간주합니다. </p>
<br>

<br>

<h2 id="Imported-Names"><a href="#Imported-Names" class="headerlink" title="Imported Names"></a>Imported Names</h2><br>

<br>

<p>가져온 이름들은 구현할때 세부 사항으로 간주되어야 합니다<br></p>
<p>다른 모듈들은 포함된 모듈의 API 에서 명시적으로 문서화 되어 있는 부분이 아닌 이상, </p>
<p>가져온 이름에 대한 간접 엑세스에 의존해서는 안됩니다. </p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>아직 public interface 와 internal interface  를 고려할만큼, 공부 수준이 높지 않아서. </p>
<p>Interface 관련 내용은 봐도 잘 모르겠군요. </p>
<br>

<p>나중에 수준이 좀 더 올르면, 그때 다시 볼 예정입니다.<br></p>
<br>

<br>

<br>

<p><br><br></p>
<br>

<br>

<br>

<br>

]]></content>
  </entry>
  <entry>
    <title>PEP8 Naming Conventions -3편</title>
    <url>/2020/04/07/PEP8-Naming-Conventions-3%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="파이썬-Naming-Convention-3-편"><a href="#파이썬-Naming-Convention-3-편" class="headerlink" title="파이썬 Naming Convention - 3 편"></a>파이썬 Naming Convention - 3 편</h2><br>

<br>

<h2 id="Presriptive-Naming-Convention-Cont"><a href="#Presriptive-Naming-Convention-Cont" class="headerlink" title="Presriptive: Naming Convention (Cont.)"></a>Presriptive: Naming Convention (Cont.)</h2><br>

<br>

<p>지난 포스팅에 이어, Prescriptive Naming Convention 을 이어갑니다 </p>
<br>

<br>

<h2 id="Desigining-for-Interface"><a href="#Desigining-for-Interface" class="headerlink" title="Desigining for Interface"></a>Desigining for Interface</h2><br>

<br>

<p>인터페이스를 위한 설계에 대한 내용입니다. </p>
<br>

<blockquote>
<p>언제나</p>
<p>클래스의 메써드와 인스턴스 변수들이</p>
<p>퍼블릭값일지 아닐지에 대한 결정을 해야합니다. </p>
</blockquote>
<br>

<p>결정하기가 쉽지 않다면, <code>non-public</code> 값을 선택 합니다. <br></p>
<p>나중에 <code>non-public</code>을 <code>public</code>으로 바꾸는게, <code>public</code>을 <code>non-public</code>으로 지정하는것보다 쉽습니다. </p>
<br>

<br>

<h2 id="Public-vs-Non-Public-Attributes"><a href="#Public-vs-Non-Public-Attributes" class="headerlink" title="Public vs Non-Public Attributes"></a>Public vs Non-Public Attributes</h2><br>

<br>

<p><strong><code>Public attributs</code> (퍼블릭 속성)</strong>은 대외적으로 여러분들과 관계없는 클라이언트들이 클래스를 사용할것이 예상될때 사용합니다.</p>
<br>

<p><strong><code>Non-ublic attributs</code> (논 퍼블릭 속성)</strong>은 제 3자에 의해서 사용되지 않을때 사용하는 속성들입니다. <code>non-public</code>속성들은 나중에 수정되거나 삭제될수 있고. 수정이나 삭제에가 되지 않는다는 보장은 없습니다. </p>
<br>

<br>

<a id="more"></a>



<blockquote>
<p>Public 의 반대말인 Private 이라는 단어는 쓰지 않습니다.</p>
<p>왜냐하면, 파이썬에서는 사실 어떤 속성도 private 속성을 가질수가 없습니다. </p>
</blockquote>
<br>

<br>

<p>public 과 non-public 외에 또다른 속성 카테고리는 서브클래스 API (주로 <code>protected</code> 보호된속성) 입니다.</p>
<br>

<br>

<p><strong>어떤 클래스들은 상속 혹은 확장 혹은 클래스의 동작이 수정되게끔 설계되어 있습니다</strong><br></p>
<p><strong>이런 클래스들을 설계할때는, 아래 사항들을 명시적으로 결정해야 합니다.</strong></p>
<br>

<ul>
<li>어떤 속성들을 public 으로 지정할지 </li>
<li>어떤 부분들이 서브클래스 API 가 될것인지 </li>
<li>어떤게 실질적으로 베이스 클래스로 사용될지 </li>
</ul>
<br>

<br>

<h2 id="파이써닉한-스타일-가이드라인"><a href="#파이써닉한-스타일-가이드라인" class="headerlink" title="파이써닉한 스타일 가이드라인"></a>파이써닉한 스타일 가이드라인</h2><p><br><br></p>
<p><strong>이런점을 염두에 두고, 파이써닉한 가이드라인은 아래와 같습니다</strong></p>
<br>

<br>

<ul>
<li>public attributes (퍼블릭 속성)들은 맨앞에 언더스코어를 가지면 안됩니다.</li>
<li>만일 public attribute 이름이 예약된 키워드와 충돌할때는, 속성이름 뒤에 하나의 언더스코어를 붙입니다. </li>
<li>단순한 퍼블릭 데이터 속성들은, 속성 이름을 노출하는게 제일 좋습니다</li>
<li>만일, 당신의 클래스가 서브클래스가 될 의도가 있고, 사용하지 않게 하고 싶은 속성들이 있다면, 이름을 지을때 언더스코어 2개를 앞에 붙이고, 뒤에는 붙여주지 않습니다 (name mangling 참조) </li>
</ul>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>아직까지는 subclass, public 혹은 private 속성들을 생각하게 될만큼 복잡한 코드를 다루지 않아서. <br></p>
<p>위의 가이드라인이 이해가 잘 가지 않습니다. </p>
<br>

<p>나중에 복잡한 클래스를 설계하게 되면, 그때 다시와서 봐야 할것 같네요.</p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Naming Conventions</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Naming Conventions - 2편</title>
    <url>/2020/04/07/PEP8-Naming-Conventions-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="파이썬-Naming-Convention-2편"><a href="#파이썬-Naming-Convention-2편" class="headerlink" title="파이썬 Naming Convention - 2편"></a>파이썬 Naming Convention - 2편</h2><br>

<br>

<p><strong>Prescriptive: Naming Conventions</strong><br><br><br></p>
<p>타이틀이 prescriptive: Naming Conventions 인데. Prescriptive 의 뜻은 규범 혹은 처방등의 의미로 쓰입니다.<br><br></p>
<p>이름짓기에 관한 처방 혹은 규범이라는 뜻이 되겠네요.<br><br></p>
<h2 id="Names-to-Avoid-피해야할-이름들"><a href="#Names-to-Avoid-피해야할-이름들" class="headerlink" title="Names to Avoid (피해야할 이름들)"></a>Names to Avoid (피해야할 이름들)</h2><br>

<p>절대로 피해야 할 변수명은, 아래와 같습니다.  </p>
<br>

<ul>
<li>소문자 엘<code>l</code></li>
<li>대문자 오 <code>O</code></li>
<li>대문자 아이 <code>I</code></li>
</ul>
<br>

<blockquote>
<p>l (엘), O(오), I(아이)<br></p>
<p>이 문자들은, 숫자 1과 0 하고 구분이 잘 안가기 때문에 사용하는것을 피해야 합니다.<br></p>
</blockquote>
<br>

<h2 id="ASCII-호환"><a href="#ASCII-호환" class="headerlink" title="ASCII 호환"></a>ASCII 호환</h2><br>

<p>파이썬 스탠다드 라이브러리에서 사용되는 식별자들은 ASCII 호환이 되어야 합니다. <br></p>
<p>이 부분은, PEP3131에 나와있습니다.<br><br></p>
<a id="more"></a><br><br>

<h2 id="Package-and-Module-Names-패키지와-모듈-이름"><a href="#Package-and-Module-Names-패키지와-모듈-이름" class="headerlink" title="Package and Module Names(패키지와 모듈 이름)"></a>Package and Module Names(패키지와 모듈 이름)</h2><br>

<p>모듈명은 짧아야 하고, 모든 문자가 소문자여야 합니다. </p>
<br>

<p>가독성이 향상될수 있을 경우, 모듈 이름에 언더스코어를 붙여도 됩니다.</p>
<br>

<p>파이썬 패키지 이름도 짧아야 하는건 마찬가지이고, 모든 문자가 소문자여야 하지만<br></p>
<p>패키지에는 언더스코어의 사용은 권장되지 않습니다. </p>
<p><br><br></p>
<p>C나 C++ 로 쓰여져 있는 확장 모듈이 파이썬 모듈과 같이 동작하여 고급의 인터페이스를 제공할때에는, <br></p>
<p>C / C++ 모듈 맨앞에 언더스코어를 붙입니다 (예, _socket)<br><br></p>
<br>

<h2 id="Class-Names-클래스명"><a href="#Class-Names-클래스명" class="headerlink" title="Class Names(클래스명)"></a>Class Names(클래스명)</h2><p><br><br></p>
<blockquote>
<p>클래스의 이름을 지을때는 보통 <code>CapWords</code> 원칙을 따릅니다</p>
</blockquote>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CapWords 의 예시 </span></span><br><span class="line"><span class="comment"># class 이름에서 각 용어의 첫문자만 대문자로 표시 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">StudentPackage</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmployeeBenefits</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">salary_remuneration</span><span class="params">()</span>:</span> </span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>인터페이스가 문서화되어 있고 클래스가 호출용도로만 사용될 경우에는, 함수명을 짓는 방법과 동일하게 사용되어도 괜찮습니다. <br><br><br></p>
<p>빌트인 (예, 내장함수, 내장클래스, 내장모듈) 이름들을 짓는데에는 별도의 규칙이 존재합니다.<br></p>
<p>대부분의 빌트인 이름들은, 하나의 단어로 되어 있습니다. <br>한가지 이상의 단어가 사용되는 예외가 생길때에는, 기본적으로 <code>CapWords</code> 규칙을 따릅니다. <br><br><br></p>
<h2 id="Type-Variable-Names-타입-변수-이름"><a href="#Type-Variable-Names-타입-변수-이름" class="headerlink" title="Type Variable Names (타입 변수 이름)"></a>Type Variable Names (타입 변수 이름)</h2><p><br><br></p>
<p>type variables (타입변수)의 이름은 PEP484에 소개되어 있습니다. </p>
<br>

<p>보통 CapWords 규칙을 사용하고, 짧은이름으로 짓는게 권장됩니다<br><br><br></p>
<p>covariant(공변) 과 contravariant(반변) 동작을 선언할때에는, 변수에 접미사를 붙이는게 권장됩니다. <br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> typing <span class="keyword">import</span> TypeVar </span><br><span class="line"></span><br><span class="line">VT_co = TypeVar(<span class="string">'VT_co'</span>, covariant=<span class="literal">True</span>)</span><br><span class="line">KT_contra = TypeVar(<span class="string">'KT_contra'</span>, contravariant=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="Exception-Names-예외-이름"><a href="#Exception-Names-예외-이름" class="headerlink" title="Exception Names (예외 이름)"></a>Exception Names (예외 이름)</h2><p><br><br></p>
<p>예외처리 상황에서, 예외사항은 하나의 클래스 형태가 됩니다. </p>
<p><br>따라서, 클래스명을 짓는 원칙이 여기에 적용됩니다. <code>예외명</code>뒤에 <code>Error</code> 라는 접미사를 예외명에 붙여야 합니다<br><br></p>
<h2 id="Global-Variable-Names-전역변수명"><a href="#Global-Variable-Names-전역변수명" class="headerlink" title="Global Variable Names (전역변수명)"></a>Global Variable Names (전역변수명)</h2><p><br><br></p>
<p>전역변수가 하나의 모듈 안에서만 사용된다고 가정할때, 전역 변수명을 짓는 방법은 함수명을 짓는것과 동일합니다<br></p>
<p><code>import</code> 함수를 사용하여 가져가야 하는 모듈들은 <code>__all__</code> 을 사용해서, 전역변수를 가져가는것을 막을수 있습니다. 혹은, 언더스코어를 접두사에 붙여서 전역변수가 공유값이 아니라는것을 표시할수 있습니다. <br><br><br></p>
<h2 id="Function-and-Variable-Names"><a href="#Function-and-Variable-Names" class="headerlink" title="Function and Variable Names"></a>Function and Variable Names</h2><p><br><br></p>
<p>함수명은 소문자로 되어 있어야 하고, 함수명에 쓰이는 단어들은 가독성의 향상을 위해 언더스코어로 분리되어 있어야 합니다. <br></p>
<br>

<p>변수명을 지을때도 함수명을 짓는것과 동일한 방식으로 짓습니다 <br><br></p>
<blockquote>
<p>함수이름은, </p>
<p>소문자로만 이루어져 있고, 가독성을 위해 각 단어들을 언더스코어로 분리합니다<br></p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">love_python</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 변수명 </span></span><br><span class="line"><span class="comment"># 소문자로만 이루어져 있고, 각 단어들을 _로 구분해 줍니다 </span></span><br><span class="line"></span><br><span class="line">top_student_number = <span class="number">1548</span></span><br></pre></td></tr></table></figure>

<br>

<p>함수명이나 변수명을 지을때 위 방식과 다르게 <code>mixedCase</code> 가 사용될수도 있습니다만, </p>
<br>

<p><code>mixedCase</code>사용은 해당 스타일이 이미 적용된 코드에서만 사용합니다 (예, threading.py) </p>
<br>

<br>

<h2 id="Method-Names-and-Instance-Variables"><a href="#Method-Names-and-Instance-Variables" class="headerlink" title="Method Names and Instance Variables"></a>Method Names and Instance Variables</h2><br>

<br>

<p>메써드 이름과 인스턴스 변수들도 함수명을 짓는 방식과 동일합니다. </p>
<p>소문자로 짓고, 각 단어들은 <code>_</code>로 분리해 줍니다. </p>
<br>

<p>퍼블릭 값이 아닌 메써드와 인스턴스 변수들은 맨앞에 언더스코어 하나를 붙여줍니다 </p>
<br>

<p>서브클래스들과 이름들이 충돌하는것을 피하기 위해서는, </p>
<br>

<p>파이썬의 <code>name mangling</code> 룰에 따라서, 맨앞에 두개의 언더스코어를 붙여줍니다. </p>
<br>

<br>

<h2 id="Constants-상수"><a href="#Constants-상수" class="headerlink" title="Constants (상수)"></a>Constants (상수)</h2><br>

<br>

<blockquote>
<p>constants (상수) 이름은, </p>
<p>모든 문자가 대문자로 되어 있고, 각 단어들은 언더스코어를 사용해 분리합니다.</p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Constants </span></span><br><span class="line"></span><br><span class="line">MAX_OVERFLOW = <span class="number">10</span> </span><br><span class="line">TOTAL = <span class="number">500</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>Naming Convention 의 내용이 좀 깁니다. <br></p>
 <br>

<blockquote>
<p>변수명, 함수명, 클래스명 들의 이름을 잘 짓는건 굉장히 중요합니다. </p>
<p>내가 정의한 이름들이 다른 사람들이 봤을때 </p>
<p>읽기 편하고 의도를 파악하기 쉽게 지어야 합니다. </p>
</blockquote>
<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Naming Convention</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Naming Conventions - 1편</title>
    <url>/2020/04/06/PEP8-Naming-Conventions-1%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="파이썬-Naming-Convention"><a href="#파이썬-Naming-Convention" class="headerlink" title="파이썬 Naming Convention"></a>파이썬 Naming Convention</h2><br>

<br>

<p>파이썬에서의 이름짓기 규칙은 조금 지저분합니다. 따라서, 우리는 이름짓기를 완벽하게 일반화하여 일관성있게 할수가 없습니다. </p>
<br>

<br>

<p><strong>그렇지만, PEP8 에서는 현재 권장되는 이름짓기 규칙과 naming standard 를 제시합니다</strong></p>
<br>

<br>

<blockquote>
<p>새로운 모듈과 패키지들은</p>
<p>PEP8에 나와있는 naming convention 대로 이름이 지어져야 합니다. </p>
<p>하지만</p>
<p>존재하고 있는 라이브러리들은 이미 다른 스타일들을 가지고 있기 때문에, </p>
<p>내부적으로 일관성을 정하여 이름을 사용합니다. </p>
</blockquote>
<br>

<a id="more"></a>

<br>

<h2 id="Overriding-Principle"><a href="#Overriding-Principle" class="headerlink" title="Overriding Principle"></a>Overriding Principle<br></h2><br>

<p>퍼블릭 API 에서 사용자에게 보이는 이름들은 실행과 이행에 따라 지어진 이름보다. 사용처에 따라서 이름을 지어줍니다. </p>
<br>

<h2 id="Descriptive-Naming-Styles"><a href="#Descriptive-Naming-Styles" class="headerlink" title="Descriptive: Naming Styles"></a>Descriptive: Naming Styles</h2><br>

<br>

<p>우리가 코드로 이름을 써줄때, 굉장히 많은 스타일들이 존재합니다. </p>
<p>함수, 변수, 클래스, 매써드들의 이름을 적을때 쓰이는 스타일들은 여러가지가 존재합니다 </p>
<br>

<p><strong>아래 테이블로 정리 해봤습니다</strong></p>
<br>

<br>

<table>
<thead>
<tr>
<th><strong>Naming Style</strong></th>
<th>비고</th>
</tr>
</thead>
<tbody><tr>
<td>b (single lowercase letter)</td>
<td>소문자 1글자</td>
</tr>
<tr>
<td>B (single Uppercase letter)</td>
<td>대문자 1글자</td>
</tr>
<tr>
<td>lowercase</td>
<td>소문자로만 이루어진 이름</td>
</tr>
<tr>
<td>lower_case_with_underscore</td>
<td>소문자와 언더스코어가 조합된 이름</td>
</tr>
<tr>
<td>UPPERCASE</td>
<td>대문자로만 이루어진 이름</td>
</tr>
<tr>
<td>UPPER_CASE_WITH_UNDERSCORES</td>
<td>대문자와 언더스코어로 조합된 이름</td>
</tr>
<tr>
<td>CapitalizedWords</td>
<td>단어의 첫글자들을 대문자로 표시하는 이름 (Carmel Case)</td>
</tr>
<tr>
<td>mixedCase</td>
<td>첫번째단어는 소문자로, 뒤에 오는 단어들은 대문자로 표시</td>
</tr>
<tr>
<td>Captialized_Words_With_Underscores</td>
<td>단어의 첫글자들만 대문자로 표시하고 언더스코어로 이어지는 이름 (못생김!)</td>
</tr>
</tbody></table>
<br>

<br>

<p>추가로, 파이썬에는 많이 존재 하진 않지만 짧고 고유한 prefix 를 소속 그룹과 관련하여 이름에 붙이는 방식도 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.start()</span><br><span class="line"><span class="comment"># os.start() 함수는 튜플을 반환하는데 </span></span><br><span class="line"><span class="comment"># 튜플에 들어있는 이름들이 prefix (접두사) 를 포함하고 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 예) st_mode, st_size, st_mtime</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>X11 라이브러리는 모든 퍼블릭 함수 앞에 <code>X</code>를 붙입니다. 파이썬에서는 보통 이런 스타일을 불필요하게 생각합니다. <br>왜냐하면, 모든 속성과 메써드들의 이름들은 객체와 함께 접두사가 붙고,<br>함수 이름은 모듈 이름으로 접두사가 붙기 때문입니다. </p>
<br>

<br>

<h2 id="언더스코어를-사용하는-특수한-형태"><a href="#언더스코어를-사용하는-특수한-형태" class="headerlink" title="언더스코어를 사용하는 특수한 형태"></a>언더스코어를 사용하는 특수한 형태</h2><br>

<br>

<table>
<thead>
<tr>
<th>Speical form</th>
<th>사용목적</th>
<th>예시</th>
</tr>
</thead>
<tbody><tr>
<td><code>_single_leading_underscore</code></td>
<td>내부적으로 사용</td>
<td><code>import *</code>을 실행시, <code>_</code>로 시작하는 객체는 가져오지 않습니다.</td>
</tr>
<tr>
<td><code>single_trailing_underscore_</code></td>
<td>파이썬 키워드와 겹치지 않기 위해 사용</td>
<td><code>Tkinter.Toplevel(master,class_&lt;br /&gt;=&#39;ClassName&#39;)</code></td>
</tr>
<tr>
<td><code>__double_leading_underscore</code></td>
<td>클래스 속성과 네임 멩글링</td>
<td>아래 <code>class Car</code> 예시 참조</td>
</tr>
<tr>
<td><code>__double_leading_and_trailing__</code></td>
<td>매직 메서드 혹은 속성</td>
<td><code>__init__</code>, <code>__import__</code> , <code>__file__</code></td>
</tr>
</tbody></table>
<br>

<blockquote>
<p>자세한 설명은 아래 코드를 참조</p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># _ 하나가 맨앞에 붙는 경우 </span></span><br><span class="line"><span class="comment"># 내부적으로 사용할때 사용</span></span><br><span class="line">_single_leading </span><br><span class="line"></span><br><span class="line"><span class="comment"># import * 를 하면, _로 시작하는 객체는 가져오지 않음. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># _ 하나가 맨뒤에 붙는 경우 </span></span><br><span class="line"><span class="comment"># 파이썬 키워드와 겹치는것을 피하기 위해 사용 </span></span><br><span class="line">single_trailing_underscore_ </span><br><span class="line"></span><br><span class="line">Tkinter.Toplevel(master, class_=<span class="string">'ClassName'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># __ 두개가 맨앞에 붙는 경우 </span></span><br><span class="line"><span class="comment"># 클래스 속성과 name mangling </span></span><br><span class="line"></span><br><span class="line">__double_leading_underscore</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__canDrive = <span class="literal">True</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">5</span></span><br><span class="line">car = Car() </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># __ 두개가 앞뒤로 붙는경우 </span></span><br><span class="line"><span class="comment"># 메직메써드로 사용자가 제어하는 이름공간안에 사용</span></span><br><span class="line">__double_leading_and_trailing_underscore__ </span><br><span class="line"></span><br><span class="line">__init__</span><br><span class="line">__import__</span><br><span class="line">__file__</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>아직까지는 이름 지을일이 많이 없고, 특수 케이스가 별로 없어서. </p>
<p><br>우선 이런게 있다는것을 잘 알고 넘어가면 되겠습니다. </p>
<br>]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Naming Conventions</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Comments</title>
    <url>/2020/04/05/PEP8-Comments/</url>
    <content><![CDATA[<h2 id="Comments-주석"><a href="#Comments-주석" class="headerlink" title="Comments (주석)"></a>Comments (주석)</h2><br>

<br>

<p>파이썬에서 주석에 관한 스타일 가이드 입니다. </p>
<br>

<blockquote>
<p>코드와 모순된 주석은 </p>
<p>주석이 없는것보다 나쁩니다 </p>
</blockquote>
<br>

<br>

<p>코드와 모순된 주석을 달바에는 아예 달지 않는게 낫다는 얘기지요 ㅎㅎ </p>
<br>

<br>

<p><strong>주석이 코드와 모순되지 않게 하기 위해서, <Br>코드가 바뀔때 주석도 같이 수정사항에 맞게 업데이트 해줘야 합니다.</strong> </p>
<br>

<p>주석에 쓰이는 문장은 완성된 문장이여야 하고, 소문자로 시작하는 식별자들을 제외하곤 첫번째 단어는 대문자로 써줍니다. </p>
<a id="more"></a>

<br>



<br>

<h2 id="Strunk-and-White-Rule"><a href="#Strunk-and-White-Rule" class="headerlink" title="Strunk and White Rule"></a>Strunk and White Rule</h2><br>

<br>

<blockquote>
<p>영문으로 코드를 작성할때는 Strunk and White 룰을 따릅니다.</p>
</blockquote>
<br>

<br>

<p><code>Strunk and White</code>는 영문으로 문장을 작성하시는분들이 많이 보시는건데. 아래 사이트 참고 부탁 드립니다. </p>
<br>

<p><a href="https://whatis.techtarget.com/definition/Strunks-rules" target="_blank" rel="noopener">https://whatis.techtarget.com/definition/Strunks-rules</a></p>
<br>

<br>

<blockquote>
<p>비영어권 국가에서 오신 파이썬 코더들도 </p>
<p>부디 주석을 영문으로 달아주세요. </p>
</blockquote>
<br>

<p>본인이 본인의 언어로 작성한 코드와 주석은, 대부분의 경우, <br></p>
<p>본인의 언어를 사용하지 않는 사람이 읽게 될 확률이 높습니다.  </p>
<p><br>예) 한국어로 작성된 코드와 주석은 보통, 영어를 사용하는 사람이 읽게 될 확률이 높습니다. </p>
<br>

<br>

<br>

<h2 id="Block-Comment"><a href="#Block-Comment" class="headerlink" title="Block Comment"></a>Block Comment</h2><br>

<br>

<p>보통 하나 혹은 하나 이상의 문단으로 완성된 문장들로 이루어져 있습니다. 각 문장들은 마침표로 끝납니다. </p>
<br>

<br>

<p>블록 커멘트는 특정 혹은 전체 코드에 적용될수 있습니다. </p>
<p>코드와 같은 레벨에 들여쓰기 되어 있습니다. </p>
<br>

<p>각 주석은 <code>#</code>으로 시작하고, 한칸 띄고 주석 내용이 시작합니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 이것은 주석입니다</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>블록 커멘트 안에 있는 문단들은 하나의 <code>#</code>을 포함하고 있는 빈줄로 분리가 됩니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># To Learn any language you must follow the below rules. </span></span><br><span class="line"><span class="comment"># 1. Know the basic syntax, data types, control structures and conditional statements.</span></span><br><span class="line"><span class="comment"># 2. Learn error handling and file I/O. </span></span><br><span class="line"><span class="comment"># 3. Read about advanced data structures. </span></span><br><span class="line"><span class="comment"># 4. Write functions and follow OOPs concepts. </span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To Learn Python, LEVEL 0: The Beginnings. </span></span><br><span class="line"><span class="comment"># 1. Variables. </span></span><br><span class="line"><span class="comment"># 2. Data Types. </span></span><br><span class="line"><span class="comment"># 3. Operations. </span></span><br><span class="line"><span class="comment"># 4. Conditionals.</span></span><br><span class="line"><span class="comment"># 5. Functions. </span></span><br><span class="line"><span class="comment"># 6. Step1: Learn the concepts of OOP. </span></span><br><span class="line"><span class="comment"># 7. Step2: Learn about Python's Classes and Objects. </span></span><br><span class="line"><span class="comment"># 8. Step3: Solve Python problems using OOP.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="Inline-Comment"><a href="#Inline-Comment" class="headerlink" title="Inline Comment"></a>Inline Comment</h2><p><br><br></p>
<p>인라인 주석은 드물게 사용합니다. <br><br></p>
<blockquote>
<p>인라인 커멘트는 코드와 같은 줄에 달아주는 주석입니다. </p>
<p>주석을 달을 코드와 최소 2 빈공간 이상 분리되어 있어야 합니다. </p>
</blockquote>
<p><br><br></p>
<p><code>#</code> 을 써주고, 한칸 띄고 시작합니다. </p>
<br>

<br>

<p>너무 명확한 코드에는 인라인 주석을 다는것이 불필요 합니다.<br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 너무 명확한 것을 주석으로 다는 예 </span></span><br><span class="line">x = x + <span class="number">1</span>		<span class="comment"># Increment X </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 인라인 커멘트가 유용하게 쓰이는 예 </span></span><br><span class="line"><span class="comment"># 위의 increment 코드가 어떤 목적으로 사용하는지에 대한 주석 </span></span><br><span class="line"></span><br><span class="line">x = x + <span class="number">1</span> 	<span class="comment"># Compensate for border</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="Document-string-Docstring"><a href="#Document-string-Docstring" class="headerlink" title="Document string (Docstring)"></a>Document string (Docstring)</h2><p><br><br></p>
<p>좋은 <code>docstring</code>을 작성하는 방법은 PEP257 을 참조하시면 됩니다<br><br><br></p>
<p>함수에 주석을 달고 싶을때 쓰는 Document String 혹은 줄여서 docstring 에 대한 내용은 아래와 같습니다<br><br></p>
<ul>
<li>모든 퍼블릭 모듈, 함수, 클래스 그리고 메써드들에는 <code>docstring</code>을 달아줍니다.</li>
<li>퍼블릭 메서드에는 docstring을 달아줄 필요가 없을지 모르지만, 메서드가 무엇을 하는지에 대한 주석은 달아야 합니다. (해당 주석은 def 줄 다음줄에 달아줍니다)</li>
</ul>
<br>

<br>

<p>PEP257은 좋은 docstring 의 관용적인 사용법을 다루고 있습니다.<br></p>
<br>

<blockquote>
<p>다수의 문장이 들어간 docstring 이 끝나는 줄에는 <code>&quot;&quot;&quot;</code>만 넣어줍니다.<br></p>
<p>하나의 문장만 들어간 docstring 은 docstring 의 끝에 <code>&quot;&quot;&quot;</code>를 같은줄에 넣어줍니다.<br></p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 다수의 문장으로 이루어진 docstring </span></span><br><span class="line"><span class="string">"""Return a foobang</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Optional plots says to fronbicate the bizbaz first.</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 하나의 문장으로 이루어진 docstring </span></span><br><span class="line"><span class="string">"""This calculates the sum """</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>주석에 관한것을 알아보았습니다.<br></p>
<p>저는 사실 인라인으로 주석을 다는것을 좋아했는데.. 이점은 좀 피해야 겠네요;;; </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Comments</tag>
        <tag>주석</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 When to Use Trailing Commas</title>
    <url>/2020/04/05/PEP8-When-to-Use-Trailing-Commas/</url>
    <content><![CDATA[<h2 id="언제-콤마를-뒤에-붙여야-하는가"><a href="#언제-콤마를-뒤에-붙여야-하는가" class="headerlink" title="언제 콤마를 뒤에 붙여야 하는가"></a>언제 콤마를 뒤에 붙여야 하는가</h2><br>

<br>

<p>이번 포스팅은 언제 코드끝에 콤마를 붙여야 하는가에 대한 내용입니다. </p>
<br>

<br>

<blockquote>
<p>튜플처럼 의무화 되어 있는 콤마를 제외하고는 </p>
<p>보통은 끝에 콤마를 붙이는것은 선택 사항입니다. </p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line">FILES = (<span class="string">'setup.cfg'</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="comment"># 괄호가 없는데 뒤에 콤마를 붙이는 경우 </span></span><br><span class="line">FILES = <span class="string">'setup.cfg'</span>,</span><br></pre></td></tr></table></figure>

<br>

<p>콤마는 버전관리 시스템이 사용될때도 도움이 됩니다. </p>
<p><br>그리고, 값들이 리스트 안에 들어가 있는데, 그 안에 인자나 가져올 아이템이 나중에 확장될지 모를때 도움이 됩니다. </p>
<br>

<p><strong>코드를 보면서 이해하자면</strong></p>
<br>

<a id="more"></a>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="comment"># 각각의 값이나 파일들 뒤에 콤마를 붙이고 다음줄로 넘어갑니다 </span></span><br><span class="line"><span class="comment"># 더이상 값이 없을때는, 바로 괄호를 닫지 않고. 다음줄에서 닫습니다. </span></span><br><span class="line"></span><br><span class="line">FILES = [</span><br><span class="line">    <span class="string">'setup.cfg'</span>,</span><br><span class="line">    <span class="string">'tox.ini'</span>,</span><br><span class="line">	]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나중에 값이나 파일이 추가될때는</span></span><br><span class="line"><span class="comment"># 다음줄에 값을 넣고 뒤에 콤마를 붙여줍니다. </span></span><br><span class="line"><span class="comment"># 그리고 다음줄에 괄호를 닫아줍니다. </span></span><br><span class="line"></span><br><span class="line">initialize(FILES,</span><br><span class="line">          error=<span class="literal">True</span>,</span><br><span class="line">          )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="comment"># 줄바꿈을 한뒤에 콤마를 넣지 않고. 끝에 나오는 콤마까지 합쳐서 한줄에 넣은 경우 </span></span><br><span class="line"></span><br><span class="line">FILES = [<span class="string">'setup.cfg'</span>, <span class="string">'tox.ini'</span>,]</span><br><span class="line">initalize(FILES, error=<span class="literal">True</span>,)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>콤마를 잘 붙이면, </p>
<p><br>인자나, 가져오는 파일들을 구분할때 시각적으로 많은 도움이 될것 같습니다. </p>
<br>

<br>

<p>들어가는 값이 너무 많아질때는 각각의 줄로 나누고 콤마를 붙여줍니다. </p>
<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Commas</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Whitespace in Expressions and Statements - 2편</title>
    <url>/2020/04/05/PEP8-Whitespace-in-Expressions-and-Statements-2%ED%8E%B8/</url>
    <content><![CDATA[<h2 id="수식과-구문안에서-빈공간-기타-권장-사항들"><a href="#수식과-구문안에서-빈공간-기타-권장-사항들" class="headerlink" title="수식과 구문안에서 빈공간 - 기타 권장 사항들"></a>수식과 구문안에서 빈공간 - 기타 권장 사항들</h2><br>

<br>

<p>수식과 구문 안에 공백들에 대한 기타 권장 사항들입니다. <br></p>
<br>

<br>

<h2 id="뒤에오는-빈공간은-언제나-피해야-합니다"><a href="#뒤에오는-빈공간은-언제나-피해야-합니다" class="headerlink" title="뒤에오는 빈공간은 언제나 피해야 합니다"></a>뒤에오는 빈공간은 언제나 피해야 합니다</h2><br>

<br>

<p>공백들은 보이지 않기 때문에 혼란 스러울수 있습니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 빈공간 후에 \ 를 사용 </span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"I'm the best"</span>  \)</span><br><span class="line">print(<span class="string">"I'm the best</span></span><br><span class="line"><span class="string">      \")</span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string"># 빈공간이 계속되는 줄로 세어지지 않을때, </span></span><br><span class="line"><span class="string"># 아래 print 문에서 두번째줄은 계속되는 줄로 세어지지 않습니다. </span></span><br><span class="line"><span class="string"># 이어지는 줄이 아닌데도 괜히 사용하면, 시각적으로나 논리적으로 혼란만 초래합니다. </span></span><br><span class="line"><span class="string">      </span></span><br><span class="line"><span class="string">print("</span>I<span class="string">'m the best"</span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">     </span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="Binary-Operator-양쪽-사이드"><a href="#Binary-Operator-양쪽-사이드" class="headerlink" title="Binary Operator 양쪽 사이드"></a>Binary Operator 양쪽 사이드</h2><br>

<br>

<p>이항 연산자 양쪽 사이드에는 항상 하나의 공백을 넣어줍니다. </p>
<p><br><a id="more"></a></p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 연산자 앞뒤로 빈공간이 있는걸 확인 할수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> a = b: </span><br><span class="line"><span class="keyword">if</span> a == b: </span><br><span class="line"><span class="keyword">if</span> a &gt; b: </span><br><span class="line"><span class="keyword">if</span> a &lt; b: </span><br><span class="line"><span class="keyword">if</span> a != b: </span><br><span class="line"><span class="keyword">if</span> a &lt;= b: </span><br><span class="line"><span class="keyword">if</span> a &gt;= b:</span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">in</span> b: </span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">not</span> b: </span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> b:</span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">is</span> <span class="keyword">not</span> b: </span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">and</span> b: </span><br><span class="line"><span class="keyword">if</span> a <span class="keyword">or</span> b:</span><br><span class="line">a += b </span><br><span class="line">a -= b</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="우선순위가-다른-연산이-사용되는-경우"><a href="#우선순위가-다른-연산이-사용되는-경우" class="headerlink" title="우선순위가 다른 연산이 사용되는 경우"></a>우선순위가 다른 연산이 사용되는 경우</h2><br>

<br>

<p>우선순위가 낮은 연산에 공백을 추가해 줍니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line">i = i + <span class="number">1</span> </span><br><span class="line">submitted += <span class="number">1</span> </span><br><span class="line">x = x*<span class="number">2</span> - <span class="number">1</span>  	</span><br><span class="line"></span><br><span class="line"><span class="comment"># x*2 가 우선순위가 더 높은 연산이므로 공백을 추가해주지 않습니다. </span></span><br><span class="line"><span class="comment"># 하지만 - 연산에는 앞뒤로 공백을 추가해 줍니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hypot2 = x*x + y*y </span><br><span class="line">c = (a+b) * (a-b)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 곱하기와 더하기가 같이 존재할때 곱셈이 덧셈보다 우선순위가 높습니다. 따라서, *에는 공백을 안줍니다. </span></span><br><span class="line"><span class="comment"># () 안에 있는 연산이 우선순위가 더 높습니다. 따라서 괄호안에 있는 + - 에는 공백을 안줍니다.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 연산자 뒤에 공백이 하나도 없습니다. </span></span><br><span class="line">i=i+<span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 연산자 주변에 공백이 양쪽에 적용되지 않았습니다. </span></span><br><span class="line">submitted +=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 우선순위가 높은 연산에 공백을 잘못 적용했습니다. </span></span><br><span class="line"></span><br><span class="line">x = x * <span class="number">2</span> - <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">hypot2 = x * x + y * y </span><br><span class="line">c = ( a + b ) * ( a - b )</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="함수의-annotation"><a href="#함수의-annotation" class="headerlink" title="함수의 annotation"></a>함수의 annotation</h2><br>

<br>

<p>함수의 annotation 에서는 콜론에 대한 보통 방식을 따르고</p>
<p><code>-&gt;</code> 주위에 빈공간을 넣어줍니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(input: AnyStr)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">()</span> -&gt; PosInt:</span> </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">(input:AnyStr)</span>:</span> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">munge</span><span class="params">()</span>-&gt;PosInt:</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="키워드-인자-주위의-공백"><a href="#키워드-인자-주위의-공백" class="headerlink" title="키워드 인자 주위의 공백"></a>키워드 인자 주위의 공백</h2><br>

<br>

<p>키워드 인자를 표시할때 사용되는 <code>=</code> 주위에 공백을 넣지 않습니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag=<span class="number">0.0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> magic(r=real, i=imag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">complex</span><span class="params">(real, imag = <span class="number">0.0</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> magic(r = real, i = imag)</span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>그렇지만, 기본값을 가지는 인자 annotation 을 합칠때에는 </p>
<p><code>=</code>주위에 공백을 넣어줍니다.</p>
</blockquote>
<br>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 좋은예 </span><br><span class="line">def munge(sep: AnyStr &#x3D; None): ...  </span><br><span class="line">def munge(input: AnyStr, sep: AnyStr &#x3D; None, limit&#x3D;1000): ... </span><br><span class="line"></span><br><span class="line"># 나쁜예 </span><br><span class="line">def munge(input: AnyStr&#x3D;None): ... </span><br><span class="line">def munge(input: AnyStr, limit &#x3D; 1000): ...</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="같은줄에-여러개의-statement"><a href="#같은줄에-여러개의-statement" class="headerlink" title="같은줄에 여러개의 statement"></a>같은줄에 여러개의 statement</h2><br>

<br>

<p>같은줄에 여러개의 statement 를 가지는것은 권장 되지 않습니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>:</span><br><span class="line">    do_blah_thing()</span><br><span class="line">do_one()</span><br><span class="line">do_two()</span><br><span class="line">do_three()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>:do_blah_thing()</span><br><span class="line">do_one(); do_two(); do_three()</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="조건이-많은-구문에서-if-for-while"><a href="#조건이-많은-구문에서-if-for-while" class="headerlink" title="조건이 많은 구문에서 if/for/while"></a>조건이 많은 구문에서 if/for/while</h2><br>

<br>

<p>이따금씩,  if/for/while 을 같은줄에 넣는것은 괜찮습니다. 하지만, 절대로 조항이 많은 구문에서는 그렇게 쓰면 안됩니다. </p>
<br>

<p>또한, 긴줄을 지나치게 접는것도 피해야합니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="number">1</span>st: total += x </span><br><span class="line"><span class="keyword">while</span> t&lt; <span class="number">10</span>: t = delay() </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 위 나쁜예를 고치면, 아래와 같이 고쳐집니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>:</span><br><span class="line">    do_blah_thing()</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="number">1</span>st:</span><br><span class="line">    total += x </span><br><span class="line"><span class="keyword">while</span> t &lt; <span class="number">10</span>:</span><br><span class="line">    t = delay()</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="PEP에서-권장하지-않는-코드"><a href="#PEP에서-권장하지-않는-코드" class="headerlink" title="PEP에서 권장하지 않는 코드"></a>PEP에서 권장하지 않는 코드</h2><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 틀린예 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: do_blah_thing() </span><br><span class="line"><span class="keyword">else</span>: do_non_blah_thing() </span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>: something() </span><br><span class="line"><span class="keyword">finally</span>: cleanup() </span><br><span class="line"></span><br><span class="line">do_one(); do_two(); do_three(long, argument, list, like, this) </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> foo == <span class="string">'blah'</span>: one(); two(); three()</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>공백에 대한 기타 권장사항들을 알아보았습니다. </p>
<p>공백을 권장사항에 따라 적절하게 적용해서, 더 깔끔하게 코드를 써봅시다~ </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>공백</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Whitespace in Expressions and Statements - PET PEEVES</title>
    <url>/2020/04/05/PEP8-Whitespace-in-Expressions-and-Statements-PET-PEEVES/</url>
    <content><![CDATA[<p><br><br></p>
<h2 id="수식과-구문안에서-빈공간"><a href="#수식과-구문안에서-빈공간" class="headerlink" title="수식과 구문안에서 빈공간"></a>수식과 구문안에서 빈공간</h2><br>

<br>

<p>이번토픽은 PEP8에서 다루는 공백에 대한 포스트입니다. </p>
<br>

<br>

<p>포스팅을 시작하기 전에, 프로그래밍언어 안에서 쓰이는 <code>expressions</code> 이라는 단어와 <code>Statements</code>에 대한 뜻을 먼저 알고 시작하겠습니다. </p>
<br>

<h2 id="Expressions-와-Statements"><a href="#Expressions-와-Statements" class="headerlink" title="Expressions 와 Statements"></a>Expressions 와 Statements</h2><br>

<p>영어에서는 <code>expressions</code>은 표현, <code>statements</code>는 진술서 라는 의미로 쓰이는게 많은데. </p>
<p><br><br></p>
<p><strong>프로그래밍 세계에서 의미하는 바는 조금 다른것 같아. 아래와 같이 요약합니다.</strong></p>
<br>

<br>

<blockquote>
<p><strong>Expressions</strong></p>
<p>수식, 연산식 </p>
<p>예) 1 + 1 = 0 혹은 a = 3 </p>
</blockquote>
<br>

<br>

<blockquote>
<p><strong>Statements</strong></p>
<p>실행 가능한 (executable) 코드 조각. </p>
<p>보통 여러개의 expressions 로 이루어져 있습니다. <br></p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 함수안에 실행 가능한 구문이 Statements 입니다. </span></span><br><span class="line"><span class="comment"># 여러개의 Expressions 로 이루어져 있는걸 확인 할수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addition</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span> </span><br><span class="line">    b = <span class="number">2</span> </span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure>

<a id="more"></a> <br>

<br>

<br>

<h2 id="PET-PEEVES"><a href="#PET-PEEVES" class="headerlink" title="PET PEEVES"></a>PET PEEVES</h2><br>

<br>

<p>PET PEEVES의 뜻도 짚어보고 넘어갑니다. </p>
<p>PET PEEVES 는 특별히 짜증나게 느끼는것들을 얘기하는데. 예를 들면 아래와 같습니다. </p>
<br>

<br>

<blockquote>
<p>우리 어머니의 PET PEEVE 는 내가 방청소를 안하는겁니다..<br></p>
<p>여자친구의 PET PEEVE 는 내가 연락을 잘 안하는겁니다.. <br></p>
<p>제 PET PEEVE 는 약속시간에 늦는겁니다. </p>
</blockquote>
<br>

<p>어머니를 짜증나게 하는것은 내가 방청소를 안하는것이고, 여자친구가 짜증나 하는거는 내가 연락을 잘 안하는것이고. 저를 짜증나게 하는것은 약속시간을 지키지 않는것입니다. </p>
<br>

<br>

<p>PEP8 에서는 짜증나는것들은 피하면서 코드를 쓰라고, 이번 타이틀을 이렇게 적은것 같습니다 ㅎㅎ </p>
<br>

<br>

<h2 id="과도하거나-적절하지-못한-공백은-피해야-합니다"><a href="#과도하거나-적절하지-못한-공백은-피해야-합니다" class="headerlink" title="과도하거나 적절하지 못한 공백은 피해야 합니다"></a>과도하거나 적절하지 못한 공백은 피해야 합니다</h2><br>

<br>

<p>PEP8 에서는 아래 상황들에 대해서 다룹니다. 예를들면서 넘어가겠습니다. </p>
<br>

<br>

<h3 id="소괄호-중괄호-대괄호-바로-안쪽"><a href="#소괄호-중괄호-대괄호-바로-안쪽" class="headerlink" title="소괄호, 중괄호, 대괄호 바로 안쪽"></a>소괄호, 중괄호, 대괄호 바로 안쪽</h3><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="comment"># 괄호가 시작하고 바로 띄어쓰기가 나오고, </span></span><br><span class="line"><span class="comment"># 괄호가 닫히기 전에 띄어쓰기가 한번 더 되었습니다</span></span><br><span class="line"><span class="comment"># 너무 과도한 공백 사용의 예 </span></span><br><span class="line"></span><br><span class="line">spam( ham [ <span class="number">1</span> ], &#123; eggs: <span class="number">2</span> &#125; )</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="뒤에-붙는-콤마와-괄호가-닫히는-사이-공간"><a href="#뒤에-붙는-콤마와-괄호가-닫히는-사이-공간" class="headerlink" title="뒤에 붙는 콤마와 괄호가 닫히는 사이 공간"></a>뒤에 붙는 콤마와 괄호가 닫히는 사이 공간</h3><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">foo = (<span class="number">0</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="comment"># 0 과 닫히는 괄호 사이에 의미없는 띄어쓰기가 있습니다. </span></span><br><span class="line"></span><br><span class="line">bar = (<span class="number">0</span>, )</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="콤마-세미콜론-콜론-바로-전-공간"><a href="#콤마-세미콜론-콜론-바로-전-공간" class="headerlink" title="콤마, 세미콜론, 콜론 바로 전 공간"></a>콤마, 세미콜론, 콜론 바로 전 공간</h3><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span>: <span class="keyword">print</span> x, y; x, y = y, x </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예</span></span><br><span class="line"><span class="comment"># 콜론, 세미콜론, 콤마 전후에 너무 많은 공백이 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span> : <span class="keyword">print</span> x , y ; x , y = y , x</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="슬라이싱에-사용되는-콜론은-이항-연산자-역할을-합니다"><a href="#슬라이싱에-사용되는-콜론은-이항-연산자-역할을-합니다" class="headerlink" title="슬라이싱에 사용되는 콜론은 이항 연산자 역할을 합니다"></a>슬라이싱에 사용되는 콜론은 이항 연산자 역할을 합니다</h3><br>

<br>

<p>논리적 연산자 역할을 하는 콜론이 사용될때 (슬라이싱)에 대한 공백 가이드 라인 입니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">ham[<span class="number">1</span>:<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span>:<span class="number">3</span>], ham[:<span class="number">9</span>:<span class="number">3</span>], ham[<span class="number">1</span>::<span class="number">3</span>], ham[<span class="number">1</span>:<span class="number">9</span>:]</span><br><span class="line">ham[lower:upper], ham[lower:uper:], ham[lower::step]</span><br><span class="line">ham[lower+offset : upper+offset]</span><br><span class="line">ham[: upper_fn(x) : step_fn(x), ham[:: step_fn(x)]]</span><br><span class="line">ham[lower + offset : upper + offset]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 콜론을 사이에 두고 양쪽에 같은 공백이 적용 되어 있지 않습니다. </span></span><br><span class="line"></span><br><span class="line">ham[lower + offset:upper + offset]    <span class="comment"># 수정 예시 ham[lower+offset : upper+offset]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 슬리이싱이라 콜론 사이에 공백을 넣을 필요가 없는 경우 </span></span><br><span class="line"></span><br><span class="line">ham[<span class="number">1</span>: <span class="number">9</span>], ham[<span class="number">1</span> :<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span> :<span class="number">3</span>]	 </span><br><span class="line"><span class="comment"># 수정 예시 ham[1:9], ham[1:9:3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># extended slicing, :: 가 나오는 경우 공백 없이 써줘야 합니다.</span></span><br><span class="line"></span><br><span class="line">ham[lower : : upper]				  </span><br><span class="line"><span class="comment"># 수정 예시 ham[lower::upper]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 콜론이 이항 연산자와 같은 역할을 하므로, 공백이 없어야 합니다. </span></span><br><span class="line"></span><br><span class="line">ham[ : upper] 						</span><br><span class="line"><span class="comment"># 수정 예시 ham[:upper]</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="함수를-호출할때-인자가-들어가는-바로-앞자리"><a href="#함수를-호출할때-인자가-들어가는-바로-앞자리" class="headerlink" title="함수를 호출할때 인자가 들어가는 바로 앞자리"></a>함수를 호출할때 인자가 들어가는 바로 앞자리</h3><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">spam(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line">spam (<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="인덱스와-슬라이싱을-하는-괄호-바로-앞자리"><a href="#인덱스와-슬라이싱을-하는-괄호-바로-앞자리" class="headerlink" title="인덱스와 슬라이싱을 하는 괄호 바로 앞자리"></a>인덱스와 슬라이싱을 하는 괄호 바로 앞자리</h3><br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line">dct[<span class="string">'key'</span>] = <span class="number">1</span>st[index]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line">dct [<span class="string">'key'</span>] = <span class="number">1</span>st [index]</span><br></pre></td></tr></table></figure>

<br>

<br>

<h3 id="변수-할당시-다른줄과-줄을-맞추기-위한-공백"><a href="#변수-할당시-다른줄과-줄을-맞추기-위한-공백" class="headerlink" title="변수 할당시 다른줄과 줄을 맞추기 위한 공백"></a>변수 할당시 다른줄과 줄을 맞추기 위한 공백</h3><br>

<p>변수를 할당하거나 선언할때, 연산자 주변에 다른 줄에 있는 연산기호와 줄을 맞추기 위해서 </p>
<p>공백을 너무 많이 주면 안됩니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span> </span><br><span class="line">y = <span class="number">2</span> </span><br><span class="line">long_variable = <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line">x 			  = <span class="number">1</span> </span><br><span class="line">y			  = <span class="number">2</span> </span><br><span class="line">long_variable = <span class="number">3</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>너무 과도하거나 불필요하거나 적절하지 못한 공백의 사용은, 코드의 가독성을 떨어트리는것 같습니다. </p>
<br>

<p>적절한 곳에 공백을 두어서 코드의 가독성을 높이고. </p>
<br>

<p>논리적으로나 시각적으로나 더 간결한 코드를 작성하면 좋겠습니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>PET PEEVES</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - String Quotes</title>
    <url>/2020/04/05/PEP8-Code-Layout-String-Quotes/</url>
    <content><![CDATA[<h1 id="String-Quotes-문자열-따옴표"><a href="#String-Quotes-문자열-따옴표" class="headerlink" title="String Quotes (문자열 따옴표)"></a>String Quotes (문자열 따옴표)</h1><br>

<br>

<blockquote>
<p>파이썬에서는, </p>
<p>문자열을 사용할때 작은따옴표와 큰따옴표는 똑같습니다. </p>
</blockquote>
<br>

<p>PEP8 에서는, 따옴표의 사용에 대한 어떠한 권장 사항이 없습니다. </p>
<p><br>단지 하나의 룰을 정하고, 그것을 일관되게 사용하길 바랍니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">string = <span class="string">"This is string"</span> 	<span class="comment"># 큰 따옴표를 사용한 경우 </span></span><br><span class="line">string = <span class="string">'This is string'</span>	<span class="comment"># 작은 따옴표를 사용한 경우 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 두가지 방식은 같음</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..<br></h2><br>

<p>저는 보통 작은 따옴표 <code>&#39;</code>를 사용합니다.. <code>shift</code>키를 안눌러도 되서 그런가 봅니다. </p>
<br>

<p>여러분들은 어떠신가요? <br></p>
<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>문자열</tag>
        <tag>따옴표</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Module Level Dunder Names</title>
    <url>/2020/04/05/PEP8-Code-Layout-Module-Level-Dunder-Names/</url>
    <content><![CDATA[<h1 id="Module-내에-Dunder-Names"><a href="#Module-내에-Dunder-Names" class="headerlink" title="Module 내에 Dunder Names"></a>Module 내에 Dunder Names</h1><br>

<br>

<p><strong>모듈 레벨에서 Dunder Names</strong><br></p>
<br>

<br>

<p>모듈 레벨에서 <code>__all__</code>, <code>__author__</code>, <code>__version__</code> 같은 “dunders” 는 모듈 docstring 뒤에 그리고 <code>__future__</code>를 제외한 모든 import 구문 앞에 붙입니다. <br></p>
<br>

<br>

<blockquote>
<p>dunders </p>
<p><br>언더스코어 _ 두개가 붙는 메소드로 </p>
<p><strong>Double UNDERscore</strong> Method 를 줄여서 </p>
<p>Dunder 메소드라고 부릅니다. </p>
</blockquote>
<br>

<p><br><a id="more"></a></p>
<p>파이썬에서는, 아래 사항들을 의무화 합니다<br></p>
<br>

<blockquote>
<p><code>__future__</code> imports 는 docstring 을 제외한 어떤 코드보다 앞에 나와야 합니다.<br></p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""This is the example module. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This module does stuff </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> barry_as_FLUFL<span class="comment"># __future__ imports 가 docstring 다음에 위치합니다.</span></span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">__version__ = <span class="string">'0.1'</span></span><br><span class="line">__author__ = <span class="string">'Cardinal Biggles'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __future__를 제외한 Dunders 는 다른 일반 imports 구문 앞에 나옵니다.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>__ 가 붙는 imports 구문에 대한 순서를 알아보았습니다.<br></p>
<br>

<p>Docstring 이 우선으로 오고, </p>
<p><code>__future__</code>가 두번째로 오고<br></p>
<p><code>__future__</code>를 제외한 기타 다른 Dunders (e.g.<code>__all__, __version__, __author__ 등등</code>) 는 세번째로 옵니다. </p>
<p>그리고, 나머지 보통 라이브러리 imports (e.g. import os, import sys) 가 그 뒤에 온다고 정리하면 될것 같습니다. </p>
<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

<br>

]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Dunder</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Imports</title>
    <url>/2020/04/05/PEP8-Code-Layout-Imports/</url>
    <content><![CDATA[<h1 id="PEP8-Code-Layout-Imports-가져오기"><a href="#PEP8-Code-Layout-Imports-가져오기" class="headerlink" title="PEP8 Code Layout - Imports (가져오기)"></a>PEP8 Code Layout - Imports (가져오기)</h1><br>

<br>

<p>PEP8 코드 레이아웃, <code>imports</code>편 입니다. </p>
<br>

<p><code>imports</code> 는 해당 파일에 다른 함수나 모듈을 불러올때 사용하는 명령어 입니다. </p>
<p><br>표준 라이브러리 기능이나, 다른 모듈에 있는 함수, 클래스 혹은 메써드들을 가져올때 사용합니다. </p>
<br>

<blockquote>
<p>PEP8에 따르면, Imports 는 보통 별도의 줄로 되어 있어야 합니다. <br></p>
</blockquote>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br></pre></td></tr></table></figure>



<br>

<p>하지만, 아래의 경우도 괜찮습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예</span></span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br></pre></td></tr></table></figure>

<br>

<a id="more"></a>

<blockquote>
<br>

<p>가져오기는 언제나 파일의 맨 위에 위치해야 하고, <br></p>
<p>모듈 주석이나 docstring 바로 뒤에 와야 합니다. <br></p>
<p>그리고 모듈 글로벌값들과 상수들 전에 와야 합니다. <br></p>
<br>
</blockquote>
<br>

<p><strong>가져오기는 아래 순서의 그룹으로 나뉩니다</strong><br></p>
<br>

<ol>
<li>스탠다드 라이브러리 imports</li>
<li>연관된 3자 모듈 / 라이브러리 imports</li>
<li>로컬 어플리케이션 / 라이브러리 imports<br></li>
</ol>
<p><br><br></p>
<p>이 그룹들 사이에는 빈줄을 넣어줘서 가져옵니다<br></p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 파이썬 스탠다드 라이브러리 </span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"></span><br><span class="line"><span class="comment"># 파이썬 3자 모듈/라이브러리 </span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api </span><br><span class="line"></span><br><span class="line"><span class="comment"># 로컬 어플리케이션 </span></span><br><span class="line"><span class="keyword">from</span> local_module <span class="keyword">import</span> local_class </span><br><span class="line"><span class="keyword">from</span> local_package <span class="keyword">import</span> local_function</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>추천되는 import 방식은, 절대값의 imports  입니다.<br></p>
<br>

<p>절대 경로로 가져오면, </p>
<p>a) 코드에서 가독성이 높아집니다, b) 만약 import system 이 잘못 설정이 되어 있더라도 적어도 에러 메시지가 더 좋게 표시됩니다. </p>
<br>

<br>

<p><strong>명시적인 상대경로로 import 를 하는것도 허용됩니다.</strong><br></p>
<p>특히, 절대 경로로 import 하는것이 불필요한 복잡한 패키지 레이아웃에서는 </p>
<p>명시적인 상대경로로 import 를 해도 됩니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 절대값 import </span></span><br><span class="line"><span class="keyword">import</span> mypkg.sibling </span><br><span class="line"><span class="keyword">from</span> mypkg <span class="keyword">import</span> sibling </span><br><span class="line"><span class="keyword">from</span> mypkg.sibling <span class="keyword">import</span> example </span><br><span class="line"></span><br><span class="line"><span class="comment"># 명시적인 상대 import </span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> sibling </span><br><span class="line"><span class="keyword">from</span> .sibling <span class="keyword">import</span> example</span><br></pre></td></tr></table></figure>

<br>

<br>

<p>스탠다드 라이브러리 코드는 복잡한 패키지 레이아웃을 피해야 합니다. </p>
<p><br>언제나 절대 경로의 import 를 하는것이 좋고, 명시적이지 않는 상대 import 는 절대 사용되면 안됩니다. </p>
<br>

<p><br><strong>클래스를 포함하고 있는 모듈에서 클래스를 가져올땐, 보통 클래스명을 써줍니다</strong><br></p>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> myclass <span class="keyword">import</span> MyClass </span><br><span class="line"><span class="keyword">from</span> foo.bar.yourclass <span class="keyword">import</span> YourClass </span><br><span class="line"></span><br><span class="line"><span class="comment"># 만약 클래스명이 로컬 이름과 충돌한다면, 명시적으로 스펠링을 해줍니다. </span></span><br><span class="line"><span class="keyword">import</span> myclass </span><br><span class="line"><span class="keyword">import</span> foo.bar.yourclass </span><br><span class="line"></span><br><span class="line"><span class="comment"># 그리고, 아래를 사용합니다 </span></span><br><span class="line">myclass.MyClass </span><br><span class="line">foo.bar.yourclass.Yourclass</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>Whildcard 와일드카드 가져오기를 사용하는것은 피해야 합니다. </p>
<p><code>from &lt;module&gt; import *</code><br></p>
</blockquote>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Wildcard Imports 예시, * 은 모듈에 포함된 모든것을 의미 </span></span><br><span class="line"><span class="keyword">from</span> Flask <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure>



<br>

<br>

<p><code>*</code>를 사용하므로써, 모듈에 포함된 모든 클래스와 함수 그리고 메써드들을 불러옵니다. </p>
<p>이럴경우, 어떤 이름들이 네임공간에 있는지 헷갈리게 되고, 자동화툴이나 에디터가 헷갈릴수 있습니다. <br></p>
<br>



<p>와일드카드 가져오기는 보통 내부 인터페이스를 퍼블릭 API  로 재발행 할때 사용합니다. <br></p>
<br>

<p>이 때를 제외하고는, 기본적으로 사용을 피해야 합니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p>
<p>클래스를 포함하고 있는 클래스 모듈을 가져올때 쓰는 스펠링이 이해가 잘 가지 않습니다. <br></p>
<p>이 부분은 조금 더 시간을 들여서 더 많은 코드를 접해본다음 이해가 갈것 같습니다. <br></p>
<br>

<p>이해를 마친뒤에 업데이트 할 예정입니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python,PEP8,Imports</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Source File Encoding</title>
    <url>/2020/04/05/PEP8-Code-Layout-Source-File-Encoding/</url>
    <content><![CDATA[<h1 id="Source-File-Encoding-소스파일-인코딩"><a href="#Source-File-Encoding-소스파일-인코딩" class="headerlink" title="Source File Encoding (소스파일 인코딩)"></a>Source File Encoding (소스파일 인코딩)</h1><br>

<br>

<p>이번 토픽은 소스파일 인코딩 입니다. </p>
<br>

<br>

<p>파이썬 배포에 사용되는 코드는 항상 UTF-8 을 사용해야 합니다. </p>
<p>파이썬2 에서는 ASCII </p>
<br>

<p><a href="https://namu.wiki/w/UTF-8" target="_blank" rel="noopener">https://namu.wiki/w/UTF-8</a></p>
<br>

<blockquote>
<p>UTF-8 은 가장 많이 사용되는 가변길이 유니코드 인코딩이다.</p>
<p>GO 언어를 만든 켄 톰슨과 롭 파이크가 만들었다 </p>
</blockquote>
<br>

<br>

<p>[<a href="https://namu.wiki/w/%EC%95%84%EC%8A%A4%ED%82%A4%20%EC%BD%94%EB%93%9C?from=ASCII]" target="_blank" rel="noopener">https://namu.wiki/w/%EC%95%84%EC%8A%A4%ED%82%A4%20%EC%BD%94%EB%93%9C?from=ASCII]</a>(<a href="https://namu.wiki/w/아스키" target="_blank" rel="noopener">https://namu.wiki/w/아스키</a> 코드?from=ASCII)</p>
<br>

<blockquote>
<p>ASCII 코드는 미국 ANSI 에서 표준화한 정보 교환용 7비트 부호체계 </p>
<p>2 바이트 이상의 코드를 표현할수 없기 때문에. </p>
<p>국제 표준에서는 유니코드로 넘어감.</p>
</blockquote>
<br>

<br>

<p>PEP8에 따르면, 파이썬2에서 ASCII 를 사용하는 파일들이나 혹은 파이썬3에서 UTF-8을 사용하는 파일들 모두 </p>
<p>인코딩 선언이 되어 있지 않아야 합니다. </p>
<br>

<a id="more"></a>

<br>

<blockquote>
<p>*<em>참고로 *</em></p>
<p>encoding 선언이 되어 있지 않으면, </p>
<p>기본 인코딩은 UTF-8 입니다. </p>
<p>from Python3 공식문서 </p>
</blockquote>
<br>

<br>

<p>파이썬 표준 라이브러리에서는, 기본 인코딩이 아닌 문자는 아래의 경우만 사용합니다<br></p>
<br>

<p>a) 테스트 목적<br></p>
<p>b) comment 나 docstring 에서 게시자의 이름이 non-ASCII  문자를 포함하고 있을때 </p>
<br>

<br>

<p><strong>PEP에서는 특별히 Non-ASCII 문자가 포함되어 있는 경우가 아니면</strong><br></p>
<p>아래의 escapes 를 사용하여 문자열에 있는 non-ASCII 데이터를 표현하는 방식을 선호합니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">\x 	<span class="comment"># Character with hex value e.g. \xhh</span></span><br><span class="line">\u 	<span class="comment"># Unicode Character with 16-bit hex value xxx e.g. u'\u004D'</span></span><br><span class="line">\U	<span class="comment"># Unicode Character with 32-bit hex value xxxxxxxx e.g. u'\U0000004D'</span></span><br><span class="line">\N	<span class="comment"># Character named name in the Unicode database e.g. \N&#123;name&#125;</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>PEP3131 에 파이썬 3.0 과 그 이후 버전에 대한 원칙이 나와 있습니다.<br></p>
<br>

<br>

<p>PEP8 에서 정리하는 바는 다음과 같습니다 <br></p>
<br>

<p>1) 파이썬의 표준 라이브러리 안에 있는 모든 식별자는 ASCII-Only 식별자여야 하고. 가능하면 영문으로 씁니다.<br></p>
<p>2) 추가로 문자열과 주석들도 ASCII  형식으로 되어 있어야만 합니다. 이부분에 대한 예외는 아래와 같습니다. <br></p>
<p>  a) ASCII 방식이 아닌것을 테스트 하고자 할때. <br></p>
<p>  b) 게시자의 이름이 라틴 알파벳으로 되어 있지 않은 경우, Non-ASCII로 표현 되어도 됩니다. </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>저는 아직도 ASCII 와 UTF-8 인코딩 방식에 대해서 깊게 알지 못합니다. </p>
<p>두가지의 인코딩 방식에 대해서 정확하게 이해해야지만, PEP8 에서 이야기 하는 부분을 정확하게 이해할것 같습니다. </p>
<br>



]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Source File Encoding</tag>
        <tag>UTF-8</tag>
        <tag>ASCII</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Blank Lines</title>
    <url>/2020/04/05/PEP8-Code-Layout-Blank-Lines/</url>
    <content><![CDATA[<h1 id="PEP8-Code-Layout-Blank-Lines-빈줄"><a href="#PEP8-Code-Layout-Blank-Lines-빈줄" class="headerlink" title="PEP8 Code Layout - Blank Lines (빈줄)"></a>PEP8 Code Layout - Blank Lines (빈줄)</h1><br>

<br>

<p>이번 토픽은, PEP8 에서 권장하는 코드내에 빈줄 공간들에 대해서 다룹니다. </p>
<br>

<br>

<blockquote>
<p> <strong>가장 상위의 함수와 클래스 정의는 2줄의 빈줄로 공간을 둡니다</strong> <br></p>
</blockquote>
<p><br><br></p>
<p>이것이 의미하는 바는 아래의 예제를 보면 알수 있습니다. </p>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 가장 상위의 함수와 클래스들 사이의 2줄 공간 </span></span><br><span class="line"><span class="comment"># 가장 상위의 클래스 두개끼리는 2줄의 빈공간이 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJenge</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJenge2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 가장 상위의 함수 두개끼리는 2줄의 빈공간을 둡니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Djangojeng</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Djangojeng</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<br>

<blockquote>
<p>클래스 내의 메써드 정의는 1줄로 공간을 둡니다.<br></p>
</blockquote>
<a id="more"></a>

<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 클래스 내의 메써드 정의는 1줄 공간을 둡니다. </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJenge1</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_python</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_python2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJeng2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_django</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_django2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>위 예시를 보면, 가장 상위에 위치하는 클래스들 끼리는 2줄 빈공간이 존재하고. <br></p>
<p>클래스 안에 있는 메서드 들 끼리는 1줄 빈공간들이 존재합니다.</p>
<p><br><br></p>
<blockquote>
<p>함수내에 빈줄은 드물게 사용해야 합니다.</p>
<p>함수내에 빈줄은 논리적 부분을 표시하기 위해서 사용 가능합니다. </p>
</blockquote>
<p><br><br></p>
<p>예를들면, </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 함수내에 논리적인 부분을 표시하기 위해서 빈줄을 함수내에서 사용합니다. </span></span><br><span class="line"><span class="comment"># 아주 드물게 사용해야 합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(j)</span>:</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, j):</span><br><span class="line">        c = c + <span class="number">1</span> </span><br><span class="line">    </span><br><span class="line">    print(c)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># for 문과 print 문 사이에 하나의 빈줄이 존재합니다.</span></span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>



<p>PEP8 안에 빈줄 (Blank Lines)에 관한 내용은 유용한 내용인데도 불구하고 <br></p>
<p>예시가 빈약해서 이해하기 힘들었습니다. <br></p>
<p><br><br></p>
<p>최대한 맞는 예시를 들으려 했지만 부족할수 있습니다. </p>
<br>

<p>하지만, 걱정 안하셔도 됩니다. </p>
<br>

<blockquote>
<p>Pycharm을 사용하면 자동으로 PEP8에 맞는 스타일을 가이드 해줍니다 </p>
<p>코드를 작성할때 이따금씩 노란색 밑줄이 쳐질때가 있는데, PEP8에 어긋날때 표시가 됩니다. </p>
<p>잘 유의해서 확인하고, PEP8 가이드라인에 맞게 코드를 작성하면 됩니다! </p>
</blockquote>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Blank Lines</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Should a Line Break Before or After a Binary Operator?</title>
    <url>/2020/04/04/PEP8-Code-Layout-Should-a-Line-Break-Before-or-After-a-Binary-Operator/</url>
    <content><![CDATA[<h1 id="이항연산자-전후-줄바꿈"><a href="#이항연산자-전후-줄바꿈" class="headerlink" title="이항연산자 전후 줄바꿈"></a>이항연산자 전후 줄바꿈</h1><br>

<br>

<p>이항 연산자 전에 줄바꿈을 해야할까요 아니면 후에 줄바꿈을 해줘야 할까요? </p>
<br>

<blockquote>
<p>줄바꿈은 연산기호 전에 되어야 하는가? </p>
<p>아니면</p>
<p>줄바꿈은 연산기호 후에 되어야 하는가? </p>
</blockquote>
<br>

<br>

<p><strong>몇십년동안, 줄바꿈은 연산기호 후에 해주는것이 권장 되어 왔습니다.</strong></p>
<br>

<p>하지만, 줄바꿈을 연산기호 후에 해주면, 두가지 이유로 가독성을 떨어트립니다. </p>
<p><br><br> </p>
<p>1) 연산기호들이 스크린에 세로줄로 흐트러지고, 이전줄에 있는 피연산자들(opernand) 과 떨어지게 됩니다. </p>
<p>2) 시각적으로 어떤것들이 더해지고, 빼줘야 하는것인지 파악하는데에 시간을 들여야 합니다. </p>
<br>

<br>

<p><strong>연산기호들이 피연산자들과 멀리 떨어져 있는 경우의 예를 들어봅니다</strong></p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 연산기호들이 이전줄의 피연산자들과 떨어져 있는 경우의 코드 </span></span><br><span class="line"></span><br><span class="line">income = (gross_wages +</span><br><span class="line">         taxable_interest +</span><br><span class="line">         (dividends - qualified_dividends) -</span><br><span class="line">         ira_deduction - </span><br><span class="line">         student_loan_interest)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 줄바꿈이 연산기호인 + 혹은 - 이후에 이루어진것을 확인 할수 있습니다. </span></span><br><span class="line"><span class="comment"># 코드를 읽어가면서 어떤것을 더해주고 빼주어야 하는지 눈으로 더 확인 해봐야 하는 상황이 옵니다.</span></span><br></pre></td></tr></table></figure>



<br>

<p>위 상황에서 가독성이 떨어지기 때문에, 수학자들과 퍼블리셔들은 반대의 관례를 따르기 시작합니다.</p>
<br>



<br>

<blockquote>
<p>문단안에 있는 공식들은 </p>
<p>언제나 연산기호 뒤에 줄바꿈을 하지만 </p>
<p>잘 진열된 공식들은 언제나 연산기호 전에 줄바꿈을 합니다 </p>
<p>Donald Knuth in “Computers and Typesetting series”</p>
</blockquote>
<br>

<br>

<p>수학적 전통을 따르면, 결과적으로 더 읽기 편한 코드가 나옵니다. 아래 예시 코드를 참조합니다. </p>
<br>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 코드에서 줄바꿈을 연산기호 전에 하면</span></span><br><span class="line"><span class="comment"># 연산기호들과 피연산자들을 매칭 시키기 쉬운 코드가 됩니다. </span></span><br><span class="line"><span class="comment"># PEP8 에서 나온 좋은 예시는 아래와 같습니다. </span></span><br><span class="line"></span><br><span class="line">income = (gross_wages</span><br><span class="line">         + taxable_interest</span><br><span class="line">         + (dividends - qualified_dividens)</span><br><span class="line">         - ira_deduction</span><br><span class="line">         - student_loan_interest)</span><br></pre></td></tr></table></figure>



<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>파이썬 코드에서는, 줄바꿈을 연산기호 전이나 연산기호 후에 하는 두가지 방법이 모두 허용됩니다. <br></p>
<p>어떤 방법이던, 해당 지역의 관례와 맞는다면, 두가지 방식은 다 괜찮습니다.<br></p>
<br>

<p><strong>저는 개인적으로, 연산기호 전에 줄바꿈을 해주는것이 가독성에 좋다고 생각합니다.</strong></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>PEP8</tag>
        <tag>Binary Operator</tag>
        <tag>이항연산자</tag>
        <tag>줄바꿈</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Maximum Line Length</title>
    <url>/2020/04/04/PEP8-Code-Layout-Maximum-Line-Length/</url>
    <content><![CDATA[<h1 id="Maximum-Line-Length"><a href="#Maximum-Line-Length" class="headerlink" title="Maximum Line Length"></a>Maximum Line Length</h1><br>

<blockquote>
<p><code>Maximum Line Length</code> 는 한줄의 최대 길이를 의미 합니다. </p>
</blockquote>
<br>

<br>

<h2 id="모든-줄은-79자로-제한-합니다"><a href="#모든-줄은-79자로-제한-합니다" class="headerlink" title="모든 줄은 79자로 제한 합니다"></a>모든 줄은 79자로 제한 합니다</h2><br>

<p>네. PEP8 에서는, 파이썬 코드를 작성할때. 한줄의 최대 길이를 79자로 제한합니다. </p>
<br>

<br>

<p><strong>다만! <code>docstring</code>혹은 <code>comments</code> 즉 주석들은, 72자로 제한합니다.</strong> </p>
<br>

<br>

<blockquote>
<p>모든 팀원들이 동의한다는 전제하에, </p>
<p>특별히 코드의 긴 줄이 유지 되어야 하는 상황이거나 하면 </p>
<p>최대 길이는 99자까지 늘릴수 있습니다. </p>
</blockquote>
<br>

<h2 id="한줄이-너무-긴-코드-줄-바꾸기"><a href="#한줄이-너무-긴-코드-줄-바꾸기" class="headerlink" title="한줄이 너무 긴 코드 줄 바꾸기"></a>한줄이 너무 긴 코드 줄 바꾸기</h2><br>

<blockquote>
<p>PEP8 에서 선호하는 긴줄 처리는, </p>
<p>계속되는 줄의 경계를 소괄호, 중괄호, 대괄호 안에 넣고 사용하는것입니다. </p>
<p>이 방법이 \ 를 사용하는 방법보다 선호됩니다. </p>
</blockquote>
<br>

<p>제가 생각하는 예시들은 아래와 같습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 한줄이 너무 긴 코드 </span></span><br><span class="line"><span class="keyword">if</span>(this_is_one_thing <span class="keyword">or</span> that_is_another_thing <span class="keyword">or</span> everything_is_good_thing <span class="keyword">or</span> you_are_the best):</span><br><span class="line">    </span><br><span class="line"><span class="comment"># \ 백슬레쉬를 사용하지 않고, 괄호안에서 줄을 바꿔서, 한줄을 다음줄로 나눕니다. </span></span><br><span class="line"><span class="comment"># 물론 들여쓰기는 잘해주어야 하겠죠? </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(this_is_one_thing <span class="keyword">or</span></span><br><span class="line">   that-is_another_thing <span class="keyword">or</span></span><br><span class="line">   everything_is_good_thing <span class="keyword">or</span></span><br><span class="line">   you_are_the_best):</span><br></pre></td></tr></table></figure>

<br>

<p>위 방법이 선호되는것 같으나, 여전히 <code>\</code>백슬레쉬의 사용하는 방법도 괜찮습니다! </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># \ 를 사용하여 줄을 나눈 경우, \를 사용하지 않았으면, 한줄이 너무 길어 졌을것 같습니다. </span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/some/file/you/want/to/read'</span>) <span class="keyword">as</span> file_1, \</span><br><span class="line">     open(<span class="string">'/path/to/some/file/being/written'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file_2:)</span><br><span class="line">     file_2.write(file_1.read())</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>1) PEP8 에서는 한줄의 최대길이를 79자로 제한합니다. </p>
<p>2) docstring 이나 comments 같은 주석들은 72자로 제한합니다.</p>
<p>3) 한줄이 너무 길어질것 같으면, <code>\</code>나 괄호안의 문장을 다음줄로 이어갑니다 (들여쓰기는 적절히 해야하는게 필수) </p>
<br>

<p>한줄 한줄이 너무 길어서 스크린이 꽉꽉 차있으면, 일하러 가서 매일 아래와 같은 스크린을 보게 될것입니다. <br></p>
<img src="/2020/04/04/PEP8-Code-Layout-Maximum-Line-Length/image1.jpeg" class="">



<p><br><br></p>
<p>그리고, 누가 그러시던데, 한줄의 길이가 79자가 된 이유중에 하나가. <br></p>
<p>옛날 컴퓨터의 모니터 크기 때문이라고 합니다. 지금 나오는 모니터 크기와는 다르게.<br></p>
<p><br> 옛날 모니터들은 가로폭이 굉장히 좁아서. 화면에 꽉차는 양이 79자 정도 였다 합니다.  <br></p>
<p>아래 사진을 보면,,, 충분히 그럴수도 있었겟네요? ㅎㅎ <br></p>
<br>



<img src="/2020/04/04/PEP8-Code-Layout-Maximum-Line-Length/image2.jpg" class="">



]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python,PEP8,Maximum Line Length,최대줄길이</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Tabs or Spaces?</title>
    <url>/2020/04/04/PEP8-Code-Layout-Tabs-or-Spaces/</url>
    <content><![CDATA[<h1 id="PEP8-Code-Layout-Tab-혹은-Spaces"><a href="#PEP8-Code-Layout-Tab-혹은-Spaces" class="headerlink" title="PEP8 Code Layout - Tab 혹은 Spaces?"></a>PEP8 Code Layout - Tab 혹은 Spaces?</h1><br>

<blockquote>
<p>파이썬에서는 Tab 대신 Spaces(빈공간)을 사용하는것을 선호합니다. </p>
</blockquote>
<br>



<p>탭을 사용하는 경우는, 이미 코드가 <code>tab</code>으로 들여쓰기가 되어 있는 경우, </p>
<p><br>코드와 일관되게 <code>tab</code>을 사용합니다. </p>
<br>

<blockquote>
<p>Python3 에는 <code>tab</code>과 <code>spaces</code> 혼용 사용을 허락하지 않습니다. </p>
</blockquote>
<br>

<p><code>tab</code>과  <code>spaces</code>의 혼용으로 들여쓰기가 되어진 Python2 버전의 코드는 특별히 spaces를 사용해서 전환되어야 합니다. </p>
<br>

<p><br>Python2 커맨드 라인 인터프리터로 <code>-t</code>옵션을 사용하면, </p>
<p><code>tabs</code>와 <code>spaces</code>의 혼용된 코드에 대해서 경고를 줍니다. </p>
<br>

<p><code>--t</code>옵션을 사용하면, 이 경고들이 에러가 됩니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>파이썬</tag>
        <tag>PEP8</tag>
        <tag>Hanging indent</tag>
        <tag>들여쓰기</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 Code Layout - Indentation</title>
    <url>/2020/04/04/PEP8-Code-Layout-Indentation/</url>
    <content><![CDATA[<h1 id="PEP8-Code-Layout-Indentation-들여쓰기"><a href="#PEP8-Code-Layout-Indentation-들여쓰기" class="headerlink" title="PEP8 Code Layout - Indentation (들여쓰기)"></a>PEP8 Code Layout - Indentation (들여쓰기)</h1><br>

<h2 id="Indentation"><a href="#Indentation" class="headerlink" title="Indentation"></a>Indentation</h2><br>

<p>파이썬에서, 들여쓰기는 문법으로 의무화 되어 있습니다. <br></p>
<p>PEP8에서는 들여쓰기에 대한 코딩 스타일을 다루고 있습니다. </p>
<br>

<br>

<blockquote>
<p>들여쓰기는 4칸을 사용합니다.</p>
</blockquote>
<br>

<p>Continuation lines, 즉 이어지는 줄들은 세로로 정렬이 되어야 하는데. <br></p>
<p>1) 파이썬에서 암시적으로 이어지는 줄들을 소괄호, 중괄호, 대괄호 안에 묶거나, </p>
<p>2) hanging indent 를 사용하여 정렬합니다. </p>
<br>

<blockquote>
<p>hanging indent 를 직역하면, 매달려 있는 들여쓰기로. </p>
<p>문단의 첫번째 줄을 제외한 모든 라인이 들여쓰기가 되어 있는 스타일 입니다. </p>
</blockquote>
<br>

<p><strong>hanging indent 의 예를 들어봅니다</strong></p>
<br>

<a id="more"></a>

<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">djangojenge = djangojenge(django, python,</span><br><span class="line">	pep8, programming)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 첫번째줄은 들여쓰기가 되어 있지 않은데 </span></span><br><span class="line"><span class="comment"># 두번째줄은 들여쓰기가 되어 있습니다. 이것을 매달려있는 들여쓰기. 즉 hanging indent 라고 합니다.</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>hanging indent</code>를 사용할때는, 아래 두가지 사항을 골려하면서 사용합니다. </p>
<br>

<ol>
<li>첫번째 줄에는 arguments (전달인자) 가 없어야 합니다. </li>
<li>이어지는 줄이라는것을 표시하기 위해 추가적인 들여쓰기가 사용되어야합니다</li>
</ol>
<br>

<br>

<h2 id="좋은예"><a href="#좋은예" class="headerlink" title="좋은예"></a>좋은예</h2><p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 좋은예: </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 열리는 구분자와 정렬</span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(var_one, var_two, </span><br><span class="line">                         var_three, var_four)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4칸을 추가로 주어 전달인자들을 다른 로직과 구분 </span></span><br><span class="line"><span class="comment"># 추가 들여쓰기로 arguments 부분과, print 부분이 구분됩니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">		var_one, var_two, var_three,</span></span></span><br><span class="line"><span class="function"><span class="params">		var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># Hanging indents 한칸을 더 추가 합니다 </span></span><br><span class="line"><span class="comment"># 첫번째 예랑 같은데, hanging indent 로 한칸씩 추가 되어. 좀더 깔끔해 보입니다. </span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(</span><br><span class="line">	var_one, var_two,</span><br><span class="line">	var_three, var_four)</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="나쁜예"><a href="#나쁜예" class="headerlink" title="나쁜예"></a>나쁜예</h2><br>

<br>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 나쁜예: </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 첫번째 전달인자들이 세로로 정렬이 되지 않은 경우</span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">      var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 추가적인 들여쓰기가 필요한 경우</span></span><br><span class="line"><span class="comment"># 추가적인 들여쓰기가 없을경우, 전달인자들과 print() 와 구분이 안갑니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">	var_one, var_two, var_three,</span></span></span><br><span class="line"><span class="function"><span class="params">	var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br></pre></td></tr></table></figure>



<br>

<br>

<h2 id="선택-사항"><a href="#선택-사항" class="headerlink" title="선택 사항"></a>선택 사항</h2><br>

<br>

<p>이어지는 줄에서의 4-칸 스페이스 룰은 선택 사항입니다. 4칸 보다 더 쓸수도, 덜 쓸수도 있습니다. </p>
<br>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hanging indents 는 4칸 외에 공간으로 들여쓰기가 가능합니다 </span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(</span><br><span class="line">  var_one, var_two, </span><br><span class="line">  var_three, var_four)</span><br></pre></td></tr></table></figure>

<br>

<h2 id="조건문이-너무-길어질때"><a href="#조건문이-너무-길어질때" class="headerlink" title="조건문이 너무 길어질때"></a>조건문이 너무 길어질때</h2><br>

<p><strong><code>if</code>구문의 조건 부분이 너무 길어져서 다수의 줄이 된다면,</strong> </p>
<br>

<blockquote>
<p><code>if</code> 다음에 한칸을 띄고 괄호를 열어줍니다.</p>
<p>if ():</p>
<p>이렇게 쓰면, 자연스럽게 다음줄부터 4칸 들여쓰기가 됩니다</p>
</blockquote>
<p><br><br></p>
<p>조건부분이 너무 길고, 밑에 실행 가능한 함수등과 구분짓고 싶을때 아래와 같이 써줍니다. </p>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 추가 들여쓰기가 없음</span></span><br><span class="line"><span class="comment"># do_something() 부분이 자연스럽게 들여쓰기가 됩니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span> </span><br><span class="line">   that_is_another_thing):</span><br><span class="line">   do_something()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 주석을 달아줘서 조건 부분과 함수 부분을 구분합니다 </span></span><br><span class="line"><span class="comment"># 주석과 코드의 색깔을 표시해주는 에디터가 많기 때문에 구분이 가능합니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span> </span><br><span class="line">   that_is_another_thing):</span><br><span class="line">   <span class="comment"># Since both conditions are true, we can frobncate.</span></span><br><span class="line">   do_something()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 조건문이 이어지는 줄에 추가로 들여쓰기를 넣어줍니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing</span><br><span class="line">   		<span class="keyword">and</span> that_is_another_thing): </span><br><span class="line">    do_something()</span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="여러-줄에서-닫히는-소괄호-중괄호-대괄호"><a href="#여러-줄에서-닫히는-소괄호-중괄호-대괄호" class="headerlink" title="여러 줄에서 닫히는 소괄호/중괄호/대괄호"></a>여러 줄에서 닫히는 소괄호/중괄호/대괄호</h2><br>

<p>맨마지막 줄 다음줄에 닫는 괄호를 넣어줍니다. 괄호를 따로 들여쓰기를 해주어야 되겠죠? ㅎㅎ<br></p>
<br>

<p><strong>코드를 보면서 이해합니다.</strong> </p>
<p><br><br></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 마지막 줄의 ] 는 추가로 들여쓰기가 되었습니다.</span></span><br><span class="line"></span><br><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">	]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 마지막 줄의 ) 는 추가로 들여쓰기가 되었습니다. </span></span><br><span class="line"></span><br><span class="line">result = some_function_that_takes_arguments(</span><br><span class="line">	<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line">	<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">	)</span><br></pre></td></tr></table></figure>

<br>

<p><strong>혹은, 닫히는 소괄호/중괄호/대괄호 들은 첫번째 줄의 시작점에 두어도 괜찮습니다. (밑에 코드 참조)</strong></p>
<br>

<br>



<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 마지막 줄의 ] 는 추가로 들여쓰기가 되었습니다.</span></span><br><span class="line"></span><br><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 마지막 줄의 ) 는 추가로 들여쓰기가 되었습니다. </span></span><br><span class="line"></span><br><span class="line">result = some_function_that_takes_arguments(</span><br><span class="line">	<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line">	<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>PEP에서 들여쓰기 부분이 가장 초입인데. 뭔가 가장 헷갈렸습니다. <br></p>
<p>표현들이 좀 이상해서 더 애먹은것 같습니다.  세번째 쯤 보니까 이제 좀 이해가 가는듯 합니다. </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>code layout</tag>
        <tag>indentation</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 - A Foolish Consistency is the Hobgoblin of Little Minds</title>
    <url>/2020/04/04/PEP8-A-Foolish-Consistency-is-the-Hobgoblin-of-Little-Minds/</url>
    <content><![CDATA[<h1 id="PEP8-A-foolish-consistency-is-the-Hobgoblin-of-Little-Minds"><a href="#PEP8-A-foolish-consistency-is-the-Hobgoblin-of-Little-Minds" class="headerlink" title="PEP8 - A foolish consistency is the Hobgoblin of Little Minds"></a>PEP8 - A foolish consistency is the Hobgoblin of Little Minds</h1><br>

<p>PEP8 스타일 가이드라인의 두번째 토픽입니다. </p>
<p><br> 타이틀을 직역해보면, <br></p>
<blockquote>
<p>어리석은 일관성은 </p>
<p>소심한 홉고블린이다? </p>
</blockquote>
<br>

<p>서양에서는, 홉고블린이 사악하고, 아둔한 그런데 또 피지컬은 또 없는 그런 요괴로 취급됩니다. </p>
<br>

<p><strong>다시 말해서, 잘못된 코딩 스타일 일관성은 고블린 취급받기 쉽단 얘기겠죠?</strong> </p>
<p><br><br></p>
<blockquote>
<p>코드는 쓰이는것보다 읽히는 일이 많다.</p>
<p>by 파이썬 창시자 귀도 반 로썸</p>
</blockquote>
<br>

<p>코드는 쓰이는것보다 읽힐때가 훨씬 많습니다. <br></p>
<p>PEP8에 제시되는 가이드라인은 코드의 가독성 향상과,  파이썬 코드 전반에 걸쳐서 일관성을 만들어 가는것입니다.</p>
<a id="more"></a>

<br>

<br>

<h2 id="Consistency-일관성"><a href="#Consistency-일관성" class="headerlink" title="Consistency (일관성)"></a>Consistency (일관성)</h2><br>

<p>PEP8 스타일 가이드는 일관성에 대한 것입니다. <br></p>
<p>PEP8에 나와있는 스타일 가이드와 일관되게 따르는것은 중요합니다. </p>
<br>

<blockquote>
<p>하지만! </p>
<p>프로젝트내에 스타일 가이드와 일관되게 코드를 짜는것이 더욱 중요합니다.  </p>
</blockquote>
<br>

<p>각각의 프로젝트 마다, 코딩 스타일이 다르고. PEP8 은 프로젝트 마다의 코딩 스타일을 존중합니다. <br></p>
<p>PEP8은 가이드라인을 제시할뿐이지. 그 가이드라인을 의무화 하지는 않습니다. </p>
<br>

<p>따라서, 프로젝트내에 일관된 코드가 있다면, 더 좋은 코딩 스타일이 존재한다면,<br></p>
<p><br>그 프로젝트 내의 코딩 스타일과 일관되게 코드를 작성하는것이 좋습니다. </p>
<br>



<h2 id="일관되지-않을때를-알아야-합니다"><a href="#일관되지-않을때를-알아야-합니다" class="headerlink" title="일관되지 않을때를 알아야 합니다"></a>일관되지 않을때를 알아야 합니다</h2><br>

<p>위에서 언급하였듯이, PEP8 의 스타일 가이드가 프로젝트에 잘 적용 될수 없을때는.<br> 본인의 판단하에, 다른 예시들을 보고 어떤게 제일 좋게 보이는 스타일을 선택하면 됩니다.</p>
<br>

<blockquote>
<p>PEP를 따르기 위해서, 뒤로 퇴보하지는 않아야 합니다. </p>
</blockquote>
<br>

<br>

<p><strong>가이드라인을 무시할수 있는 사유들</strong></p>
<br>

<br>

<p>1) PEP를 적용했을때에 가독성이 더 떨어지는 경우 </p>
<p>2) 이미 PEP가 적용되지 않은 코드가 주변에 너무 많이 존재할때 (예, 너무 과거에 쓰여진 코드들)</p>
<p>3) 해당 코드가 이미 PEP8이 소개되기 이전인데, 해당 코드를 바꿀 이유가 별로 없을때 </p>
<p>4) 해당 코드가 파이썬의 이전버전과 호환하기 위해 필요한데, 가이드라인에 제시되어 있는 기능을 지원하지 않을때 </p>
<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>정리하자면, PEP8 은 가이드라인일 뿐이고. <br> 본인이나 팀의 판단에 따라서. 프로젝트에 적용할지 안할지를 정하면 될것 같습니다. </p>
<br>

<p>개인적으로 저는 따르는게 좋다고 생각합니다. <br></p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>파이썬</tag>
        <tag>PEP8</tag>
      </tags>
  </entry>
  <entry>
    <title>PEP8 - Introduction</title>
    <url>/2020/04/04/PEP8-Introduction/</url>
    <content><![CDATA[<h1 id="PEP8-Introduction"><a href="#PEP8-Introduction" class="headerlink" title="PEP8 - Introduction"></a>PEP8 - Introduction</h1><br>

<br>



<h2 id="PEP8-소개"><a href="#PEP8-소개" class="headerlink" title="PEP8 소개"></a>PEP8 소개</h2><br>

<br>

<p><strong>파이썬 코딩 스타일 가이드라인 PEP 에 대해서 포스팅 하고자 합니다. <br></strong></p>
<br>

<blockquote>
<p>PEP는</p>
<p>Python Enhancement Proposal 의 약자로 </p>
<p>파이썬 코딩 스타일 가이드라인을 담고 있습니다. </p>
</blockquote>
<p><br><br></p>
<p><a href="https://www.python.org/dev/peps/pep-0008/#introduction" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0008/#introduction</a></p>
<a id="more"></a> 



<p>위 웹사이트에 자세한 가이드라인이 나와 있으며, 파이썬 코딩에서 관례를 다루고 있습니다. <br></p>
<br>

<p>해당 문서는, 파이썬의 창시자인 귀도 반 로섬의 오리지널 파이썬 스타일 가이드 에세이를 <br>기본적으로 받아들이고 있고<br> 베리의 스타일 가이드의 내용을 추가해서 제작되었습니다.</p>
<br>

<p>파이썬 코딩 스타일 가이드는 시간이 지나면서 점차 진화합니다. </p>
<p><br><strong>언어가 변화함에 따라서 추가적인 관례와<br> 너무 노후한 스타일들이 확인 되고. 그에 맞춰서 가이드라인도 진화 하겟죠?</strong> </p>
<p><br><br></p>
<p>각각의 프로젝트들은 그들만의 고유한 코딩 스타일 가이드라인이 존재합니다. </p>
<p><br><br></p>
<blockquote>
<p>PEP8의 가이드라인과, 프로젝트의 코딩 스타일 가이드라인이 충돌할 경우, </p>
<p>프로젝트에 특화된 코딩 스타일을 우선 따르는것을 원칙으로 합니다. </p>
</blockquote>
<p>​    <br></p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>PEP8 이 굉장히 중요하다 합니다. 모두가 기본이 되는 파이썬 코딩 스타일을 가지고 있으면, <br></p>
<p>남이 쓴 코드도 이해하기 더 쉬워질겁니다. <br></p>
<p>PEP8 관련 포스팅을 이제부터 시작합니다~ </p>
]]></content>
      <categories>
        <category>Python</category>
        <category>PEP8</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>파이썬</tag>
        <tag>PEP8</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 - About 페이지 만들기</title>
    <url>/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/</url>
    <content><![CDATA[<h2 id="About-페이지-만들기"><a href="#About-페이지-만들기" class="headerlink" title="About 페이지 만들기"></a>About 페이지 만들기</h2><br>

<p>개인 블로그라면, <br> 적어도 간단하게 본인이나 블로그를 소개하는 About 페이지 하나는 있어야 할것 같아서. <br></p>
<br>

<p><code>About</code> 페이지를 하나 만들어서 적용해 보려 합니다. </p>
<br>

<p>페이지에 생성후, 디테일을 한번 수정해 보겠습니다. </p>
<br>

<h2 id="About-페이지-생성하기"><a href="#About-페이지-생성하기" class="headerlink" title="About 페이지 생성하기"></a>About 페이지 생성하기</h2><br>

<p><code>blog</code> 폴더에서, 아래 명령어를 실행하여, <code>about</code>페이지를 생성합니다. </p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure>



<br>

<a id="more"></a>

<br>

<p>생성후에는, <code>blog/source/about/</code>폴더에 <code>index.md</code>가 생성 되어 있습니다. </p>
<p><br><br></p>
<h2 id="blog-source-about-index-md파일-수정"><a href="#blog-source-about-index-md파일-수정" class="headerlink" title="blog/source/about/index.md파일 수정"></a><code>blog/source/about/index.md</code>파일 수정</h2><br>

<p><code>categories</code>나 <code>tags</code> 페이지를 만들었을때와 비슷하게 진행 해봅니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2020-03-30 20:33:44</span><br><span class="line"><span class="built_in">type</span>: about</span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<br>

<br>



<h2 id="Themes-config-yml-파일에서-메뉴-활성화-하기"><a href="#Themes-config-yml-파일에서-메뉴-활성화-하기" class="headerlink" title="Themes _config.yml 파일에서 메뉴 활성화 하기"></a>Themes _config.yml 파일에서 메뉴 활성화 하기</h2><br>

<br>

<p><code>blog/themes/hexo-theme-next/_config.yml</code>파일을 열어서, <br></p>
<p><code>menu</code>부분에, <code>about</code>부분을 활성화 시켜줍니다. <br></p>
<p>uncomment 처리만 해주면 되겟죠? ㅎㅎ  </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<p>그런데.. 여기까지 하고 <code>hexo runserver</code> 로 로컬에 들어가서, about 페이지를 확인해 보니, </p>
<br>

<p><strong>사이드 메뉴에는 about 메뉴가 뜨는데, 클릭하면, 빈 페이지가 표시됩니다.</strong></p>
<br>



<img src="/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/image1.png" class="">

<br>

<blockquote>
<p>어디에 내용을 채워줘야 빈페이지가 표시 되지 않을까요? </p>
</blockquote>
<p><br><br></p>
<h2 id="index-md-파일에-내용-추가하기"><a href="#index-md-파일에-내용-추가하기" class="headerlink" title="index.md 파일에 내용 추가하기"></a>index.md 파일에 내용 추가하기</h2><br>

<p><code>blog/source/about/index.md</code> 파일에, about 페이지에 들어갈 내용을 추가합니다.</p>
<br>



<img src="/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/image2.png" class="">

<br>

<br>



<blockquote>
<p> <code>index.md</code> 파일에 내용을 추가하면, </p>
<p>about 페이지에 내용이 추가 되어 표시됩니다! </p>
</blockquote>
<p><br><br></p>
<img src="/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/image3.png" class="">

<br>

<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p><code>about</code>페이지를 생성 하였고, 내용도 추가 하였습니다. <br></p>
<p>추가된 내용은 잘 표시가 되는것 같으니, 내용을 더 채워 줘야 겠습니다~ </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>about,custom_page</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 - 블로그내에 검색 기능 추가</title>
    <url>/2020/03/26/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%82%B4%EC%97%90-%EA%B2%80%EC%83%89-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80/</url>
    <content><![CDATA[<h1 id="블로그내-검색기능-추가"><a href="#블로그내-검색기능-추가" class="headerlink" title="블로그내 검색기능 추가"></a>블로그내 검색기능 추가</h1><br>

<p>블로그내에 검색기능을 추가하려 합니다. <br></p>
<p>카테고리나, 태그로 검색해도 괜찮지만, 포스트들을 검색할수 있는 기능이 있으면 좋을것 같습니다 </p>
<br>

<br>

<h2 id="hexo-generator-searchdb-설치하기"><a href="#hexo-generator-searchdb-설치하기" class="headerlink" title="hexo-generator-searchdb 설치하기"></a>hexo-generator-searchdb 설치하기</h2><br>

<p><code>search data generator</code>플러그인을 설치 해줍니다. </p>
<p><br>해당 플러그인은 여러분의 포스트의 필요한 데이터를 포함하고 있는 <code>검색 인덱스 파일</code>을 생성하는데 사용하고. <br></p>
<p>이 파일들을을 이용해서, 블로그내에 로컬 서치 엔진 으로 사용합니다. </p>
<br>

<p><br><a id="more"></a></p>
<p>우선, 아래 명령어를 실앻해서 플러그인을 설치해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<br>



<h2 id="config-yml-수정하기"><a href="#config-yml-수정하기" class="headerlink" title="_config.yml 수정하기"></a>_config.yml 수정하기</h2><br>

<p>위 과정에서 플러그인을 정상적으로 설치했으면, <code>blog/_config.yml</code>파일을 열어줍니다. </p>
<br>

<p>파일을 연뒤에, 밑에 코드를 맨 아래에 추가해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search </span></span><br><span class="line"><span class="comment"># search </span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: <span class="literal">true</span></span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure>



<br>

<br>

<h2 id="테마폴더내에-config-yml-수정하기"><a href="#테마폴더내에-config-yml-수정하기" class="headerlink" title="테마폴더내에 _config.yml 수정하기"></a>테마폴더내에 _config.yml 수정하기</h2><br>

<br>

<p><code>blog/themes/hexo-next-theme/_config.yml</code>파일을 열어줍니다. </p>
<br>

<br>

<p><code>local_search</code>부분을 아래와 같이 수정해 줍니다. </p>
<p><code>enable</code>값을 <code>true</code>로 변경해줍니다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: manual</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure>

<br>



<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<br>

<p>블로그에 검색기능이 잘 반영된것 같습니다. hexo 라고 검색하니까. </p>
<p>잘 작동합니다. </p>
<br>

<img src="/2020/03/26/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%82%B4%EC%97%90-%EA%B2%80%EC%83%89-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80/image1.png" class="">]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>검색기능,hexo-generator-searchdb</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 - SEO 세팅하기</title>
    <url>/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/</url>
    <content><![CDATA[<h1 id="NeXT-Theme-검색엔진-최적화"><a href="#NeXT-Theme-검색엔진-최적화" class="headerlink" title="NeXT Theme 검색엔진 최적화"></a>NeXT Theme 검색엔진 최적화</h1><h2 id="검색엔진-최적화-SEO-시작"><a href="#검색엔진-최적화-SEO-시작" class="headerlink" title="검색엔진 최적화 (SEO) 시작"></a>검색엔진 최적화 (SEO) 시작</h2><br>

<p>블로그이든, 홈페이지든, 쇼핑몰이든, 어떠한 서비스 이든, 만들어 놓기만 하고, <br></p>
<p>사람들이 검색해서 찾지 못한다면, 사용자들이 사용할수 없겠죠? ㅎㅎ <br></p>
<p><br><br></p>
<blockquote>
<p><strong>사용자들이 웹에 검색해서 원하는 컨텐츠들을 우리 블로그에서 찾을수 있도록 하기 위해서,</strong> </p>
<br>

<p>우리는 모두  블로그나, 웹사이트 혹은 어떠한 웹서비스를 검색엔진에 최적화를 시켜놓아야 합니다. <br><br></p>
</blockquote>
<p><br>점점 저의 블로그도 뼈대를 갖춰 가고 있으니, 사람들이 필요한 정보를 검색해서 찾을수 있게. <br></p>
<p>돈을 들여서 검색광고를 하면, 더 많은 사용자들에게 찾아지겠지만, 이 블로그는 어디까지나 공부가 목적이니. <br></p>
<br>

<p>비용을 전혀 들이지 않고 검색이 잘 나올수 있게.  SEO 세팅을 좀 해보겠습니다 ㅎㅎ </p>
<br>

<br>

<p><strong>SEO (Search Engine Optimization)</strong>  과정을 알아봅니다. </p>
<br>

<br>

<a id="more"></a> 

<br>

<h2 id="Config-파일에-SEO-Settings"><a href="#Config-파일에-SEO-Settings" class="headerlink" title="Config 파일에 SEO Settings"></a>Config 파일에 SEO Settings</h2><br>

<br>

<p><code>blog/themes/hexo-theme-next/_config.yml</code>을 열어줍니다. </p>
<br>

<br>

<p>NeXT 테마는 기본적인 SEO  설정을 할수 있게끔 만들어 주고 있습니다. <br></p>
<br>

<p>저는, 아래와 같이 설정해주었습니다. </p>
<br>

<br>

<p>*<em>사실은,,, canonical: true 부분은 기본값이 아닌데, 다른 블로그 참조해서 갖다가 붙여놨습니다; *</em></p>
<p>잘 동작하는지 안하는지 잘 모르겠으나. 일단 따라해 봅니다. </p>
<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># SEO Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable Baidu transformation on mobile devices.</span></span><br><span class="line">disable_baidu_transformation: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a canonical link tag in your hexo, you could use it for your SEO of blog. </span></span><br><span class="line"><span class="comment"># https://support.google.com/webmasters/anser/139066</span></span><br><span class="line"><span class="comment"># Remember to set up your URL in Hexo '_config.yml' (e.g. url: http://yourdomain.com) </span></span><br><span class="line">canonical: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change headers hierarchy on site-subtitle (will be main site description) and on all post / page titles for better SEO-optimization.</span></span><br><span class="line">seo: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If true, site-subtitle will be added to index page.</span></span><br><span class="line"><span class="comment"># Remember to set up your site-subtitle in Hexo `_config.yml` (e.g. subtitle: Subtitle)</span></span><br><span class="line">index_with_subtitle: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></span><br><span class="line">exturl: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters</span></span><br><span class="line">google_site_verification:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmaster</span></span><br><span class="line">bing_site_verification:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Yandex Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://webmaster.yandex.ru</span></span><br><span class="line">yandex_site_verification:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line">baidu_site_verification:</span><br></pre></td></tr></table></figure>

<br>

<p>표준 링크를 생성해주는 <code>canonical</code>과 검색엔진 최적화를 위한 <code>seo</code>기능을 활성화 되었고.<br></p>
<br>

<p><code>exturl</code>기능은 외부 링크들이 크롤러에 수집되지 않게 하는 기능을 합니다. <br><br></p>
<h2 id="hexo-generator-feed-설치하기"><a href="#hexo-generator-feed-설치하기" class="headerlink" title="hexo-generator-feed 설치하기"></a>hexo-generator-feed 설치하기</h2><br>

<p>아래 명령어를 실행해서, 플러그인을 설치합니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>blog/_config.yml</code>파일에 아래 내용을 추가합니다. </p>
<p>피드 종류를 정할 수 있습니다만, 저는 제가 보았던 블로그를 참조하여. <code>rss2</code>로 설정해 주었습니다. </p>
<br>

<blockquote>
<p>네이버를 사용하려 하면, rss2 가 더 유리 하다 합니다 </p>
</blockquote>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: rss2     <span class="comment">#피드의 종류(atom/rss2)</span></span><br><span class="line">  path: rss2.xml  <span class="comment">#피드가 생성될 경로</span></span><br><span class="line">  <span class="built_in">limit</span>: 20      <span class="comment">#최신 포스트의 개수(0 또는 false 설정시 모든 포스트)</span></span><br></pre></td></tr></table></figure>

<br>

<h2 id="hexo-generator-seo-friendly-sitemap-설치하기"><a href="#hexo-generator-seo-friendly-sitemap-설치하기" class="headerlink" title="hexo-generator-seo-friendly-sitemap 설치하기"></a>hexo-generator-seo-friendly-sitemap 설치하기</h2><br>

<p>아래 명령어를 실행하여, 플러그인을 설치해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure>



<br>

<p>설치가 끝났으면, <code>blog/_config.yml</code>파일에 아래 내용을 추가해줍니다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml   <span class="comment">#생성될 경로</span></span><br><span class="line">  tag: <span class="literal">false</span>          <span class="comment">#sitemap에 tag 포함 여부</span></span><br><span class="line">  category: <span class="literal">false</span>     <span class="comment">#sitemap에 category 포함 여부</span></span><br></pre></td></tr></table></figure>

<br>

<br>

<h2 id="hexo-generator-robottxt-설치하기"><a href="#hexo-generator-robottxt-설치하기" class="headerlink" title="hexo-generator-robottxt 설치하기"></a>hexo-generator-robottxt 설치하기</h2><br>



<p><code>robots.txt</code>파일을 사이트에 생성해줍니다. 이 파일 생성도, 자동으로 생성해주는 plugin을 설치해서 생성해 줍니다. 참 쉽습니다. </p>
<br>

<p>참고로, <code>robots.txt</code> 파일은 <code>서치엔진</code>이나 <code>크로울러</code>들에게 어떤 페이지나 파일들을 요청할수 있는지 혹은 없는지에 대한 정보를 줍니다. </p>
<br>

<p>아래 커맨드를 입력하여, 플러그인을 설치해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-robotstxt --save</span><br></pre></td></tr></table></figure>

<br>

<br>

<p><code>blog/_config.yml</code> 파일을 열어서, 맨 밑에다가 아래 내용을 추가 해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Robots.txt</span></span><br><span class="line">robotstxt:</span><br><span class="line">  useragent: <span class="string">"*"</span>    <span class="comment"># 적용시킬 검색엔진</span></span><br><span class="line">  allow:            <span class="comment"># 허용할 페이지</span></span><br><span class="line">    - /</span><br><span class="line">  sitemap: https://djangojeng-e.github.io/sitemap.xml</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>이 robots.txt 내용을 추가해주면, Github Banner 의 위치가 </p>
<p>깨져버립니다. 이 부분은 추후에 해결해 보려 합니다. </p>
</blockquote>
<br>

<br>

<h2 id="구글-웹마스터-인증하기"><a href="#구글-웹마스터-인증하기" class="headerlink" title="구글 웹마스터 인증하기"></a>구글 웹마스터 인증하기</h2><p>구글 웹마스터에 접속해서, 오른쪽 메뉴에 자신의 블로그 사이트 URL  을 입력합니다. </p>
<br>

<br>

<p>입력하면, 아래와 같이, 소유권을 인증 하라고 나오는데. </p>
<p>저는, head 태그 안에, <code>&lt;meta name=&quot;google-site-verification&quot; content=&lt;content&gt;</code> 코드를 넣어주고 소유권을 인증 해보려 합니다. </p>
<br>



<img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image1.png" class="">

<br>

<p><code>blog/themes/hexo-theme-next/layout/_layout.swig</code> 파일을 열어서, </p>
<p><code>&lt;head&gt;</code>부분에, 구글에서 생성된 메타 테그를 추가해 줍니다. </p>
<img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image2.png" class="">

<br>



<br>

<br>

<p>Generate 하고 Deploy 해줍시다. </p>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate </span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>



<br>

<p>다시 구글로 돌아가서, <code>verify</code> 버튼을 누르면, 소유권이 인증 됩니다. <br></p>
<br>

<img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image3.png" class="">



<br>

<br>

<p><code>Properties</code> 확인하기로 들어가면, 구글 메인 메뉴가 나오고. </p>
<p><code>&lt;br&gt; 사이드바에 있는 sitemap</code> 메뉴를 클릭하고, 사이트맵 두개를 추가해 줍니다. </p>
<br>

<p>저 같은 경우는, 아래와 같이 입력해주니까. 등록이 되었습니다. </p>
<br>



<p><code>https://&lt;username&gt;.github.io/sitemap</code> </p>
<p><code>https://&lt;username&gt;/github.io/rss</code> </p>
<br>

<img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image4.png" class="">





<p><br><br></p>
<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><code>SEO</code> 기본 설정을 다 마친듯 합니다. <br></p>
<p>근데.. 무언가 굉장히 찝찝하네요. 잘 모르겠어요 뭐가 된건지 안된건지.. </p>
<br>

<p>일단 넘어가도록 하고, 나중에 뭐가 이루어 진건지 안 이루어 진건지 확인 해봐야겠네요. </p>
<p><br><br></p>
<p><strong>그것보다 더 큰 문제는,  SEO 설정을 진행 했더니.. 깃헙 베너가 깨져서 나옵니다. <br></strong></p>
<p><strong>해당 에러는 천천히 어떻게 고치는지 알아내려 합니다….</strong></p>
<p>3월 23일에, 에러를 찾아 냈습니다. _config.yml 파일에 <code>exturl</code>파일 설정을 <code>false</code>로 바꾸니까 잘 됩니다! </p>
<br>

]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>SEO</tag>
      </tags>
  </entry>
  <entry>
    <title>Google 에드센스 시작하기 - 1</title>
    <url>/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/</url>
    <content><![CDATA[<h1 id="Google-에드센스-시작하기-1"><a href="#Google-에드센스-시작하기-1" class="headerlink" title="Google 에드센스 시작하기 - 1"></a>Google 에드센스 시작하기 - 1</h1><p><br><br></p>
<h2 id="Google-에드센스-계정-Sign-Up"><a href="#Google-에드센스-계정-Sign-Up" class="headerlink" title="Google 에드센스 계정 Sign Up"></a>Google 에드센스 계정 Sign Up</h2><br>



<p><a href="https://www.google.com/adsense/signup/new/lead" target="_blank" rel="noopener">https://www.google.com/adsense/signup/new/lead</a> 에 접속해서. </p>
<br>

<p>에드 센스를 시작합니다. </p>
<br> 

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image1.png" class="">




<br>



<h2 id="Google-Adsense-Signup-진행"><a href="#Google-Adsense-Signup-진행" class="headerlink" title="Google Adsense Signup 진행"></a>Google Adsense Signup 진행</h2><a id="more"></a>

<br>

<blockquote>
<br>



<p>사이트 URL 과 이메일 주소를 입력해 줍니다. </p>
<br>
</blockquote>
<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image2.png" class="">

<!-- more -->

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image3.png" class="">




<br>

<blockquote>
<p>진행 하다보면, 지역 설정을 하고. </p>
<p>약관에 동의 후에. 다음 단계로 넘어가는 단계가 오는데. </p>
<p>아래와 같이 다음 단계로 넘어갑니다. </p>
</blockquote>
<br>

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image4.png" class="">



<p><br><br></p>
<p><code>CREATE ACCOUNT</code> 버튼을 눌러서 다음 단계로 진행합니다. </p>
<p><br><br></p>
<p>다음 단계로 넘어가면,  <code>AdSense Code</code>가 나오고. <br></p>
<p>이 코드를 블로그의 <code>&lt;head&gt;&lt;/head&gt;</code> 사이에 넣어줘야 한다 합니다. </p>
<p><br><br></p>
<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image5.png" class="">



<br>

<p>아래와 같이 에드센스 코드를 카피해 놓고. 블로그 사이트의 <code>&lt;head&gt;</code>태그 안에 넣어주는 작업을 해야 한답니다. </p>
<br>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script data-ad-client=<span class="string">"ca-pub-9284986247336734"</span> <span class="keyword">async</span> src=<span class="string">"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>



<br>

<p>일반 블로그도 아니고, 깃헙 블로그라서, <code>index.html</code>이 어디에 있는지.. 전혀 감이 안와서;;; </p>
<br>

<p><strong>해당 코드를 어디에 붙여야 되는지 몰랐는데.</strong> <br></p>
<p><strong><code>&lt;head&gt;</code>태그에 넣어주기 위해서, 아래 과정으로 넘어갑니다.</strong></p>
<br>

<h3 id="layout-swig-파일을-찾기"><a href="#layout-swig-파일을-찾기" class="headerlink" title="_layout.swig 파일을 찾기"></a><code>_layout.swig</code> 파일을 찾기</h3><p><br><br></p>
<p>에드센스 코드를 블로그에 추가해 주기 위해서,<code>hexo-theme-next/layout/_layout.swig</code> 파일을 엽니다. </p>
<br>

<h2 id="에드센스-코드는-lt-head-gt-태그-안에-넣어주기"><a href="#에드센스-코드는-lt-head-gt-태그-안에-넣어주기" class="headerlink" title="에드센스 코드는 &lt;head&gt;태그 안에 넣어주기"></a>에드센스 코드는 <code>&lt;head&gt;</code>태그 안에 넣어주기</h2><br>

<p>저는, <code>&lt;head&gt;</code> 밑에,   밑에 붙여 놔줬습니다;;; </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &#123;&#123; partial(<span class="string">'_partials/head/head.swig'</span>, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  </span><br><span class="line">  &lt;script data-ad-client=<span class="string">"ca-pub-9284986247336734"</span> async src=<span class="string">"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<p>웹페이지를 생성하고, 구글 코드가 있는지 확인 합니다. </p>
<p><br><br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo g </span><br><span class="line"></span><br><span class="line">hexo d </span><br><span class="line"></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure>

<p><br><br></p>
<blockquote>
<p>브라우저로 접속해서 view source code  기능을 이용해서 소스를 보면. </p>
<p>해당 스크립트가 <head>  영역안에 있는걸 확인 할수 있습니다. </p>
</blockquote>
<br>

<br>

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image6.png" class="">



<br>

<br>

<blockquote>
<p>사이트 소스에 구글 에드센스 스크립트 코드를 붙여놨으니, </p>
<p>구글 에스센스 Home 에, <code>코드를 내 사이트에 붙여 놨습니다</code> 라는곳에 체크 박스에 체크를 하고 </p>
<p>완료 버튼을 누릅니다 </p>
</blockquote>
<br>

<br>

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image7.png" class="">



<br>

<br>



<p><strong>구글에서 코드를 찾았다는 메시지가 아래와 같이 나오고.</strong> </p>
<br>

<p>계정 활성화를 이제 시작할수 있다고 나옵니다. 보통 하루 이내에 완료 되지만, </p>
<p>어떤때는 하루보다 오래 걸린다네요. 다 완료되면, 이메일로 알려준다 하네요. </p>
<br>





<p><br><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image8.png" class=""></p>
<p><br><br></p>
<blockquote>
<p><strong><code>GOT IT</code> 을 꾹 눌러줍니다</strong> </p>
</blockquote>
<br>

<h2 id="Google-Adsense-리뷰-기다리기"><a href="#Google-Adsense-리뷰-기다리기" class="headerlink" title="Google Adsense 리뷰 기다리기"></a>Google Adsense 리뷰 기다리기</h2><br> 

<p>위의 과정을  다 마치면, 사이트를 리뷰 하겠다는 메시지가 뜹니다. </p>
<p>며칠 걸릴수도 있고, 2주까지 걸릴수 있다네요 ㅎㄷㄷ </p>
<br>

<br>

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image9.png" class="">

<br>







<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br>

<p>구글 에드센스 추가하기를 다룬 블로그는 많은데. 아래의 이유로.. 애를 좀 먹었습니다;; </p>
<br>

<ul>
<li>테마가 <code>NeXT</code>가 아닌경우 </li>
<li>위 세팅을 하나도 안해놨는데, 광고 생성 페이지 부터 시작하는 블로그 </li>
<li>구글 화면 캡쳐 거의 없음</li>
<li>기타 이유  </li>
</ul>
<br>

<p><strong>한 2주 승인 걸린다 하니, 에드센스 승인이 날때까지 기다렸다가 다음 포스팅 진행 하겠습니다.</strong> </p>
<br>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Adsense</tag>
        <tag>Advertisement</tag>
      </tags>
  </entry>
  <entry>
    <title>Google 에드센스 시작하기 - 2</title>
    <url>/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/</url>
    <content><![CDATA[<h1 id="Google-에드센스-승인전-수정사항"><a href="#Google-에드센스-승인전-수정사항" class="headerlink" title="Google 에드센스 승인전 수정사항"></a>Google 에드센스 승인전 수정사항</h1><br>

<p>지난 포스팅을 마치면서, 구글 리뷰가 한 2주 정도 걸릴것 같았는데. <br></p>
<p>아직 사이트 검토중인데, </p>
<br>

<p>이메일이 하나 날라왔습니다. <code>계정 승인에 앞서 수정이 필요한 사항이 있음</code> 이라는 타이틀로 말이죠  <br></p>
<br>

<p><img src="/home/dhkang/.config/Typora/typora-user-images/image-20200403072425033.png" alt="image-20200403072425033"></p>
<p><br><br><br></p>
<h2 id="Google-에드센스-계정-승인-실패"><a href="#Google-에드센스-계정-승인-실패" class="headerlink" title="Google 에드센스 계정 승인 실패"></a>Google 에드센스 계정 승인 실패</h2><br>

<br>

<p>이메일을 열어보니, 에드센스 정책을 위반했다고.. 승인이 되지 않았다네요;; </p>
<a id="more"></a>

<p><br><br></p>
<blockquote>
<p> 가치 있는 인벤토리: 콘텐츠 없음 </p>
</blockquote>
<br>

<p>위 사유로 인해 승인이 되지 않았다고 합니다. </p>
<p><br><br></p>
<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/image1.png" class="">

<br>

<br>



<p>아무래도, 포스팅이 너무 없어서 에드센스 승인이 나지 않은것 같은데.. <br></p>
<p>여기저기 찾아보니까. 포스팅은 한 20개 이상 정도는 있어줘야 승인이 난다 하네요. </p>
<p><br><br></p>
<blockquote>
<p><strong>포스트를 더 해보고, 에드센스 신청을 해야될것 같습니다.</strong> </p>
</blockquote>
<br>



<h2 id="수정사항-가이드라인"><a href="#수정사항-가이드라인" class="headerlink" title="수정사항 가이드라인"></a>수정사항 가이드라인</h2><br>



<p>자세한 내용은 메일에 써져 있듯이, 아래 링크들을 따라 확인해보면 된답니다;;; </p>
<br>

<ul>
<li><p>고품질 사이트를 만들기 위한 정책 도움말 1부</p>
<p><a href="https://adsense.googleblog.com/2012/09/tips-for-creating-high-quality-sites.html" target="_blank" rel="noopener">https://adsense.googleblog.com/2012/09/tips-for-creating-high-quality-sites.html</a></p>
</li>
<li><p>고품질 사이트를 만들기 위한 정책 도움말 2부 </p>
<p><a href="https://adsense.googleblog.com/2012/04/tips-for-creating-high-quality-sites.html" target="_blank" rel="noopener">https://adsense.googleblog.com/2012/04/tips-for-creating-high-quality-sites.html</a></p>
</li>
<li><p>웹마스터 품질 가이드라인 </p>
<p><a href="https://support.google.com/adsense/answer/1348737" target="_blank" rel="noopener">https://support.google.com/adsense/answer/1348737</a></p>
</li>
<li><p>애드센스 프로그램 정책 </p>
<p><a href="https://support.google.com/adsense/answer/48182?utm_source=crs&amp;utm_medium=email&amp;utm_campaign=notification" target="_blank" rel="noopener">https://support.google.com/adsense/answer/48182?utm_source=crs&amp;utm_medium=email&amp;utm_campaign=notification</a></p>
</li>
</ul>
<p><br><br></p>
<p><strong>추가로, 콘텐츠 정책 이나 고객센터를 방문해서 알아봅니다.</strong></p>
<br>

<p>저같은 경우는, 콘텐츠 불충분 일거 같습니다;; </p>
<br>

<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/image3.png" class="">





<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br> 

<p>구글에 이것저것 가이드라인이 많이 나와 있는데. <br><br></p>
<p>차근차근 읽어보면서 진행 해볼까 합니다. </p>
<p><br><br></p>
<blockquote>
<br>

<p>*<em>일단, 컨텐츠를 많이 늘려야 하는것 같으니까 ㅎㅎ *</em></p>
<p><br><strong>조금 더 포스팅을 많이 해보고, 다시 승인 요청 해볼까 합니다.</strong> </p>
</blockquote>
<p><br><br></p>
<img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/image2.png" class="">]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Google</tag>
        <tag>Adsense</tag>
        <tag>Advertisement</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 포스트에 이미지 사용 - 데모</title>
    <url>/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9-%EB%8D%B0%EB%AA%A8/</url>
    <content><![CDATA[<br> 

<p>이미지 사용1 </p>
<br>

<img src="/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9-%EB%8D%B0%EB%AA%A8/terminal_capture.png" class="">

<p><br><br></p>
<p>이미지 사용2 </p>
<br>

<br>

<img src="/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9-%EB%8D%B0%EB%AA%A8/terminal_capture2.png" class="">]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Demo</tag>
        <tag>Image</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 - 포스트에 이미지 사용</title>
    <url>/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9/</url>
    <content><![CDATA[<h1 id="포스트에-이미지-삽입하기"><a href="#포스트에-이미지-삽입하기" class="headerlink" title="포스트에 이미지 삽입하기"></a>포스트에 이미지 삽입하기</h1><br> 

<p>그동안 포스팅을 하면서, 큰 실수를 하고 있었는데. <br></p>
<p>여태껏 포스트에 올린 스크린 캡쳐라던지, 이미지들은 모두 반영이 되질 않았습니다. <br> <br></p>
<p>현재 저는  <code>typora</code>라는 마크다운 프로그램을 사용하고 있는데. </p>
<br>

<br>

<p>이미지를 그냥 <code>drag and drop</code>하면 포스트에 바로 반영되는것 같아 보여서, 그냥 넘어갔었는데. <br></p>
<p><strong>블로그 올라간거 보니까. 이미지가 모두 안올라 갔었습니다.</strong> <br></p>
<br>

<p>이점을 해결 하기 위해서, 오늘 포스팅을 합니다. </p>
<a id="more"></a>

<br>

<h2 id="config-yml-파일-수정하기"><a href="#config-yml-파일-수정하기" class="headerlink" title="_config.yml 파일 수정하기"></a>_config.yml 파일 수정하기</h2><br>

<p>블로그 폴더의 <code>_config.yml</code> 파일을 수정합니다. </p>
<p><br> 아래, post_asset_folder 값을  <code>true</code>로 바꾸어 줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure>



<br>

<p>이 값이 <code>true</code>로 설정되면, 포스트 마다 포스트 제목과 같은 asset 디렉토리가 생깁니다. </p>
<br>



<h2 id="포스트에-이미지-삽입하기-1"><a href="#포스트에-이미지-삽입하기-1" class="headerlink" title="포스트에 이미지 삽입하기"></a>포스트에 이미지 삽입하기</h2><br> 



<p><code>Hexo-블로그-포스트에-이미지-사용-데모</code> 라는 타이틀을 가진 포스트를 생성해봅니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"Hexo-블로그-포스트에-이미지-사용-데모"</span></span><br></pre></td></tr></table></figure>

<p><br> <br></p>
<p><code>blog/source/_post</code>폴더에 들어가면, <br>새로 생성된 포스트의 제목과 같은 이름의 폴더가 생성된걸 확인할수 있습니다. <br></p>
<br>

<br>

<p><code>blog/source/_post/Hexo-블로그-포스트에-이미지-사용-데모</code> 폴더에, <br></p>
<p><code>terminal_capture.png</code> 와 <code>terminal_capture2.png</code>파일을 넣어주었습니다. </p>
<br>

<p><strong>해당 파일들을 해당 포스트에서 사용하려면</strong>,</p>
<p><br><br></p>
<blockquote>
<p> 이미지 참조를 올바르게 해야 합니다. </p>
<p> hexo 블로그-포스트에-이미지-사용-데모 페이지에서, </p>
<p>아래 참조문을 사용해줍니다. </p>
</blockquote>
<br>

<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&#123;% asset_img terminal_capture.png %&#125;</span><br><span class="line">&#123;% asset_img terminal_capture2.png %&#125;</span><br></pre></td></tr></table></figure>





<br>



<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br> 위와 같은 방법으로, 포스트에 이미지를 넣어보고 확인해봅니다. </p>
<p>다음 데모 페이지를 확인 해봅니다. </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Posts</tag>
        <tag>Images</tag>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 블로그 Scaffolds 수정</title>
    <url>/2020/03/18/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-Scaffolds-%EC%88%98%EC%A0%95/</url>
    <content><![CDATA[<h1 id="Scaffolds-수정"><a href="#Scaffolds-수정" class="headerlink" title="Scaffolds 수정"></a>Scaffolds 수정</h1><br>

<br>

<p><code>hexo new &quot;&lt;포스트제목&gt;&quot;</code> 을 입력해서 새로운 포스트를 생성하고. </p>
<p><br>새 포스트를 생성할때 마다, 상단에,</p>
 <br>

<p>아래 세부 정보를 입력하는게 귀찮았었습니다.<br> </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 블로그 Scaffolds 수정 </span><br><span class="line">categories:</span><br><span class="line">  - Hexo Blog </span><br><span class="line">tags: </span><br><span class="line">  - Scaffolds </span><br><span class="line">date: 2020-03-10 21:00:33</span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<br> 

<p>포스트를 생성할때마다, 상단 정보 입력 필드를 기본값으로 지정하고 싶다면, <br></p>
<p><code>scaffolds</code>폴더에 있는 <code>post.md</code>파일을 수정해주면 됩니다. <br> </p>
<br>

<p><code>scaffolds</code>폴더 안에 파일을 수정해 주면, <br><br></p>
<p><strong>포스트가 생성 될때마다 상단에 자동으로 쓰여집니다</strong> </p>
<a id="more"></a>



<br>

<h2 id="Scaffolds-post-md-수정-하기"><a href="#Scaffolds-post-md-수정-하기" class="headerlink" title="Scaffolds/post.md 수정 하기"></a>Scaffolds/post.md 수정 하기</h2><br>

<p>블로그 폴더에서 <code>scaffolds</code>폴더로 이동 합니다. <br> </p>
<p><code>scaffolds</code>폴더 안에, <code>post.md</code> 라는 파일이 존재하는데. 이것을 아래와 같이 수정해 줍니다. </p>
<p><br> 수정해 주면, 앞으로 <code>post</code>를 생성할때마다, 아래 내용이 새로운 포스트 상단에 위치 하고. <br></p>
<p>우리는 디테일만 바꿔주면 됩니다. </p>
<br>

<p>일단 저는, 아래와 같이 수정해 줬습니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">  -</span><br><span class="line">tags:</span><br><span class="line">  - </span><br><span class="line">---</span><br></pre></td></tr></table></figure>





<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br> 블로그 폴더에 가서 포스트를 하나 생성합니다. <br></p>
<p><code>hexo new &quot;Hexo-블로그-Scaffolds-수정&quot;</code></p>
<br>

<p>포스트를 생성하고, 해당 포스트 파일을 열었을때, 상단에 <code>scaffolds/post.md</code> 에 있는 내용이 나오면. <br></p>
<p>성공적으로 반영 된것입니다. </p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">title: Hexo 블로그 Scaffolds 수정</span><br><span class="line">categories:</span><br><span class="line">  - null</span><br><span class="line">tags:</span><br><span class="line">  - null</span><br><span class="line">date: 2020-03-18 21:00:33</span><br><span class="line"></span><br><span class="line"><span class="comment"># 저의 경우는, 아래와 같이 categories 값과 tags 값을 바꾸어 주었습니다. </span></span><br><span class="line"></span><br><span class="line">title: Hexo 블로그 Scaffolds 수정</span><br><span class="line">categories:</span><br><span class="line">  - Hexo Blog</span><br><span class="line">tags:</span><br><span class="line">  - Scaffolds</span><br><span class="line">date: 2020-03-18 21:00:33</span><br></pre></td></tr></table></figure>

<br>

<p>참고로, <code>categories</code> 와 <code>tags</code>는 <code>null</code> 값으로 지정 되어 있는데. <br></p>
<p>본인이 사용할 값을 입력해 주면 됩니다. </p>
<hr>
<br>

<p>새로운 포스트를 이렇게 써보고, <code>hexo server</code>를 실행하고 포스트가 잘 생성되는지 확인해 보러 갑니다. </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Scaffolds</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NeXT 테마 - 블로그 방문자, 조회수</title>
    <url>/2020/03/17/Hexo-NeXT-%ED%85%8C%EB%A7%88-%EB%B0%A9%EB%AC%B8%EC%9E%90-%EC%A1%B0%ED%9A%8C%EC%88%98/</url>
    <content><![CDATA[<h1 id="블로그-방문자-및-조회수-표시"><a href="#블로그-방문자-및-조회수-표시" class="headerlink" title="블로그 방문자 및 조회수 표시"></a>블로그 방문자 및 조회수 표시</h1><br>

<p>블로그를 운영하다보면, </p>
<br>

<p>내 블로그에 몇명이나 방문 했는지, 포스트의 조회수는 어떤지 궁금해 질때가 있을겁니다. </p>
<p><br> 블로그 방문자 및 조회수를 알면, 내가 쓴글에 대한 피드백도 받을수 있고, 더 중요한 토픽을 알게되어서. </p>
<p>블로그의 퀄리티의 발전에 큰 도움이 될것이라 생각합니다. </p>
<br>

<p>따라서, 블로그 방문자 및 조회수를 세는것을 NeXT 테마에 적용 해보도록 하겠습니다. </p>
<a id="more"></a>
<p><br> <br> </p>
<h2 id="1-Busuanzi-설정하기"><a href="#1-Busuanzi-설정하기" class="headerlink" title="1. Busuanzi 설정하기"></a>1. Busuanzi 설정하기</h2><br>

<p>테마의  <code>_config</code>파일을 열어봅니다. <br></p>
<p>필자의 경우 <code>blog/themes/hexo-next-theme/_config.yml</code></p>
<br>

<p><code>busuanzi_count</code> 섹션으로 가서 <code>enable</code> 값을 <code>true</code>로 설정해줍니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Show Views / Visitors of the website / page with busuanzi.</span></span><br><span class="line"><span class="comment"># Get more information on http://ibruce.info/2015/04/04/busuanzi</span></span><br><span class="line">busuanzi_count:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  total_visitors: <span class="literal">true</span></span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: <span class="literal">true</span></span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  post_views: <span class="literal">true</span></span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure>

<p><br> 해당 기능의 사이트를 방문해 보면, <a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">http://ibruce.info/2015/04/04/busuanzi/</a> </p>
<p><br>온통 중국어로 되어 있어서..</p>
<p><br> 잘 모르겠지만. 구글 번역기를 돌려서 대충 내용을 파악해 보면, <br></p>
<p>아래의 <code>script</code>와 <code>span</code> 코드들이 사용된다는것을 파악할수 있다. 찍는것이지요;;; </p>
<br>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span> = <span class="string">"// busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;</span> </span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/ <span class="attr">script</span>&gt;</span></span></span></span><br><span class="line">    </span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">"busuanzi_container_site_pv"</span>&gt;</span> </span></span></span><br><span class="line"><span class="actionscript">    Total traffic of <span class="keyword">this</span> site </span></span><br><span class="line"><span class="handlebars"><span class="xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span> = <span class="string">"busuanzi_value_site_pv"</span>&gt;</span> </span></span></span><br><span class="line"><span class="handlebars"><span class="xml">    <span class="tag">&lt;/ <span class="attr">span</span>&gt;</span> times </span></span></span><br><span class="line"><span class="handlebars"><span class="xml"><span class="tag">&lt;/ <span class="attr">span</span>&gt;</span></span></span></span><br></pre></td></tr></table></figure>



<br> 

<h2 id="블로그에-적용하기"><a href="#블로그에-적용하기" class="headerlink" title="블로그에 적용하기"></a>블로그에 적용하기</h2><br>

<p>정말 여기까지 알아내야 하나 하면서, 여기저기 찾아보니까.. </p>
<br>

<p><code>theme/layout/_partials</code>의 <code>footer.swig</code>파일에 내용을 추가해 주면 된다 합니다. <br></p>
<p>우선, 아래와 내용을, 파일 제일 하단에 추가해 줍니다.</p>
<br>

<p><strong>Javascript</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;%- <span class="keyword">if</span> theme.busuanzi.enabled %&#125;</span><br><span class="line">&lt;script <span class="keyword">async</span> src = <span class="string">"//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js"</span>&gt;&lt;<span class="regexp">/script &gt;</span></span><br><span class="line"><span class="regexp">&#123;% endif %&#125;</span></span><br></pre></td></tr></table></figure>



<br>

<p><strong>Span</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;% if theme.busuanzi.enabled %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_pv"</span>&gt;</span></span><br><span class="line"> 총 조회 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_pv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 회</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span> |</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_container_site_uv"</span>&gt;</span></span><br><span class="line"> 총 방문자 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"busuanzi_value_site_uv"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 명</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<br>

<p>footer.swig 파일에 위 내용을 추가 해줬으면, 확인을 해보러 갑니다. </p>
<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p>블로그의 가장 하단으로 가서. 조회수와 방문자 수가 표시되는지 확인 해봅니다. </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>블로그 카운트</tag>
        <tag>조회자수</tag>
        <tag>statistics</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NeXT 테마 - 포스트에 Read More 버튼 추가</title>
    <url>/2020/03/17/Hexo-NeXT-%ED%85%8C%EB%A7%88-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-Read-More-%EB%B2%84%ED%8A%BC-%EC%B6%94%EA%B0%80/</url>
    <content><![CDATA[<h1 id="Read-More-버튼-추가하기"><a href="#Read-More-버튼-추가하기" class="headerlink" title="Read More 버튼 추가하기"></a>Read More 버튼 추가하기</h1><p>포스트가 너무 길어지면, 블로그에 접속했을때. </p>
<p>너무 많은 양이 보여지는것 같아서 불편 했었는데. </p>
<br>



<p>특정 영역까지만 포스트를 보여주고, <code>Read More</code> 혹은  <code>더 읽어보기</code>버튼을 눌르면 전체 포스트 내용이 나오게 하여서. </p>
<br> 

<p>조금 더, 깔끔하게 포스트들이 나오게 하겠습니다. </p>
<a id="more"></a>

<br>

<h2 id="lt-more-gt-추가하기"><a href="#lt-more-gt-추가하기" class="headerlink" title="&lt;!-- more --&gt; 추가하기"></a><code>&lt;!-- more --&gt;</code> 추가하기</h2><br>

<p>방법은 아주 간단합니다. 보여주고 싶은 영역 까지 지정한 후에. </p>
<p>그곳에 <code>&lt;!-- more --&gt;</code> 만 입력해주면 됩니다. </p>
<br>

<p>예를들면, 아래 캡쳐 이미지에서 보면, “이번엔 잘 되었으면 좋겠습니다 ^^;” 영역 밑에, </p>
<p><code>&lt;!-- more --&gt;</code> 를 입력해 놨습니다. 이렇게 해놓으면, 해당 포스트는 블로그에 디스플레이 될때. </p>
<p><br>![Screenshot from 2020-03-15 10-56-01](/home/dhkang/Pictures/Screenshot from 2020-03-15 10-56-01.png)</p>
<p>![Screenshot from 2020-03-15 10-56-01](/home/dhkang/Pictures/Screenshot from 2020-03-15 10-56-01.png)</p>
<p><br><br> <code>이번엔 잘 되었으면 좋겠습니다 ^^;</code> 부분까지만 보여지고. <br>포스트의 나머지 부분은 <code>더 읽어보기</code>를 클릭해야 볼수 있습니다. </p>
<p>![Screenshot from 2020-03-15 11-02-09](/home/dhkang/Pictures/Screenshot from 2020-03-15 11-02-09.png)</p>
<p>![Screenshot from 2020-03-15 11-02-09](/home/dhkang/Pictures/Screenshot from 2020-03-15 11-02-09.png)</p>
<p><br>포스트가 너무 길경우, 이렇게 쓰면 더 깔끔하게 보여지겟네요.</p>
<br>



<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a>마치며</h2><br> 

<p>이상하게 tag만 입력하면, <code>hexo runserver</code>를 입력하였을때, </p>
<p>태그 인식도 안되고. 아래와 같은 에러가 납니다. </p>
<br>

<p>일단 동작은,,, 되는데.. 찝찝하니.. 에러 처리를 하는 방법을 계속 알아봐야 겠습니다 ;;;  </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">YAMLException: can not <span class="built_in">read</span> a block mapping entry; a multiline key may not be an implicit key at line 5, column 1:</span><br></pre></td></tr></table></figure>



<p>여기까지가, 포스트에<code>Read More</code> 버튼 추가하기, <code>더 읽어보기</code> 버튼 추가 설정이었습니다. </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>Read More</tag>
        <tag>Posts</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NeXT 테마 - Disqus 댓글 설정하기</title>
    <url>/2020/03/17/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-Disqus-%EC%84%B8%ED%8C%85/</url>
    <content><![CDATA[<h1 id="Disqus-세팅하기"><a href="#Disqus-세팅하기" class="headerlink" title="Disqus 세팅하기"></a>Disqus 세팅하기</h1><br>

<br>

<p><strong>Disqus란?</strong> </p>
<br>

<p>Disqus는 네트워크 커뮤니티 플랫폼으로. 댓글 시스템을 지원합니다. (추가로 여러 기능들을 제공하기도 합니다. 예를들면, social network 연동, 뛰어난 admin 등). </p>
<br>

<p><strong>Hexo 블로그에 Disqus를 연동하면, 블로그 내에서 댓글 시스템을 사용할수 있겟죠? ㅎㅎ</strong> </p>
<a id="more"></a>
<br>

<p>아주 기본적인 기능만 사용하는 Basic 플랜을 사용한다면, 공짜로 사용할수 있습니다. </p>
<br>



<h2 id="Disqus-가입"><a href="#Disqus-가입" class="headerlink" title="Disqus 가입"></a>Disqus 가입</h2><p><a href="https://disqus.com/" target="_blank" rel="noopener">https://disqus.com/</a> 에 접속합니다. </p>
<p>![](/home/dhkang/Pictures/Screenshot from 2020-03-16 21-09-11.png)</p>
<p><br><br></p>
<p><code>GET STARTED</code>버튼을 눌러서, 가입 진행을 합니다. </p>
<br>

<br>



<p>![Screenshot from 2020-03-16 21-11-59](/home/dhkang/Pictures/Screenshot from 2020-03-16 21-11-59.png)</p>
<br>

<p><code>I want to install Disqus on my Site</code> 옵션을 클릭하고. </p>
<p>가입 진행을 합니다. 프로필에 적당한 정보를 입력해주고. 회원 가입을 완료 합니다. </p>
<br>

<p>저는 이전에 만들었던 사이트가 있었어서, 새로운 사이트를 추가 해주었습니다. </p>
<br>

<p>![Screenshot from 2020-03-16 21-32-21](/home/dhkang/Pictures/Screenshot from 2020-03-16 21-32-21.png)</p>
<br>

<p>사이트를 추가 하고나면, 플랜을 설정하는 페이지가 나오는데. <br></p>
<p>상단에 노출되는 메뉴들을 다 유료이니, 밑으로 내려가서 Basic Plan <code>Subscribe Now</code> 버튼을 눌러줍니다. </p>
<br>



<p>![Screenshot from 2020-03-16 21-33-19](/home/dhkang/Pictures/Screenshot from 2020-03-16 21-33-19.png)</p>
<p><br> <br> </p>
<p><code>subscribe now</code> 버튼을 누르면, 다음 페이지에 어떤 플랫폼을 사용할지 선택하는 메뉴가 있습니다. <br><br></p>
<p> <code>hexo</code>는 옵션에 없기 때문에, 맨 밑에 있는<br> <code>I don&#39;t see my platform listed, install manually with Universal Code</code> 옵션을 선택합니다. </p>
<br>

<br>



<p>![Screenshot from 2020-03-16 21-55-36](/home/dhkang/Pictures/Screenshot from 2020-03-16 21-55-36.png)</p>
<p><br><br></p>
<p>Installation 가이드가 나오는데,, 다 넘어가고, 맨밑에 <code>Configure</code> 버튼을 누르고 진행합니다. </p>
<br>

<p>![Screenshot from 2020-03-16 22-16-14](/home/dhkang/Pictures/Screenshot from 2020-03-16 22-16-14.png)</p>
<br>

<p>새로운 창으로 넘어가고, 몇가지 필드들을 추가해 줘야 하는 부분이 나옵니다. <br></p>
<p><code>Website URL</code>에 블로그 주소를 풀로 적어줍니다. <code>http://djnagojeng-e.github.io</code>로 적어줬습니다. <br><br></p>
<p>![Screenshot from 2020-03-16 22-19-26](/home/dhkang/Pictures/Screenshot from 2020-03-16 22-19-26.png)</p>
<br>

<br>

<blockquote>
<p>다 적어 놨으면, <code>Complete Setup</code>버튼을 눌러서 설정 완료를 해줍니다. </p>
</blockquote>
<br>



<p>셋업이 완료되었다는 페이지가 뜹니다. <br></p>
<p>![Screenshot from 2020-03-16 22-29-12](/home/dhkang/Pictures/Screenshot from 2020-03-16 22-29-12.png)</p>
<br>

<h2 id="설정된-Disqus를-블로그에-적용하기"><a href="#설정된-Disqus를-블로그에-적용하기" class="headerlink" title="설정된 Disqus를 블로그에 적용하기"></a>설정된 Disqus를 블로그에 적용하기</h2><br> 



<p><code>테마 next/ _config.yml</code> 파일을 열어서, <code>Disqus</code> 항목을 설정해 줍니다. </p>
<br>

<p><code>shortname</code>은, 웹사이트 생성시 입력했던<code>website name 을 입력합니다.</code></p>
<p>저는 <code>djangojeng-e</code>로 입력합니다. </p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># Disqus</span></span><br><span class="line">disqus:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  shortname: djangojeng<span class="_">-e</span></span><br><span class="line">  count: <span class="literal">true</span></span><br><span class="line">  lazylaod: <span class="literal">false</span></span><br><span class="line">  <span class="comment">#post_meta_order: 0</span></span><br></pre></td></tr></table></figure>







<p>윗 부분 수정을 완료했으면, 저장하고 나옵니다. </p>
<h2 id="적용-후-deploy-하기"><a href="#적용-후-deploy-하기" class="headerlink" title="적용 후 deploy 하기"></a>적용 후 deploy 하기</h2><br>

<p>블로그의 루트 디렉토리로 가서 , 아래 명령어들을 차례대로 입력해 줍니다. </p>
<br> 

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo generate </span><br><span class="line"></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>



<br>

<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p>각 포스트의 하단에, 댓글을 달고 지울수 있는, <code>Disqus</code>영역이 나오고. </p>
<p>댓글을 달고 지울수 있습니다. 한번 확인 하러 갑니다 ㅎㅎ </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>disqus</tag>
        <tag>comments</tag>
      </tags>
  </entry>
  <entry>
    <title>NeXT Theme - Categories and Tags</title>
    <url>/2020/03/15/NeXT-Theme-Categories-and-Tags/</url>
    <content><![CDATA[<p>카테고리와 태그 설정 테스트 페이지.</p>
<h3 id="Custom-Page-Support"><a href="#Custom-Page-Support" class="headerlink" title="Custom Page Support"></a>Custom Page Support</h3><p>Next allows users to add custom pages in menu.</p>
<div class="tabs" id="adding-custom-page"><ul class="nav-tabs"><li class="tab active"><a href="#adding-custom-page-1">Adding New Page →</a></li><li class="tab"><a href="#adding-custom-page-2">Setting Front-matter Values →</a></li></ul><div class="tab-content"><div class="tab-pane active" id="adding-custom-page-1"><p>In your terminal emulator, change to Hexo site dir. Use <code>hexo new page custom_name</code> to create a new <code>custom_name</code> page:</p>
<pre><code>$ cd your-hexo-site
$ hexo new page custom_name</code></pre></div><div class="tab-pane" id="adding-custom-page-2"><p>Front-matter is a block of YAML or JSON at the beginning of the file that is used to configure settings for your writings. Settings Front-matter values and more detailed can be found in <a href="https://hexo.io/docs/front-matter" target="_blank" rel="noopener">Front-matter</a>. You can also add contents in <code>custom_name/index.md</code> if you like.</p></div></div></div>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo NeXT 테마 - 카테고리와 테그</title>
    <url>/2020/03/15/Hexo-NeXT-%ED%85%8C%EB%A7%88-%EC%B9%B4%ED%85%8C%EA%B3%A0%EB%A6%AC%EC%99%80-%ED%85%8C%EA%B7%B8/</url>
    <content><![CDATA[<p>블로그에 NeXT 테마 적용이 완료되었으니, </p>
<p>Categories 와 Tags 설정을 해주고 싶습니다. 이전에 시도 했을때는, 제대로 적용이 안되었는데. </p>
<br>

<p>이번엔 잘 되었으면 좋겠습니다 ^^; </p>
<a id="more"></a>
<br>

<h2 id="메뉴-수정하기"><a href="#메뉴-수정하기" class="headerlink" title="메뉴 수정하기"></a>메뉴 수정하기</h2><br>

<blockquote>
<p>우선 테마의 _config 파일을 엽니다. </p>
<p>필자의 경우, blog/themes/hexo-theme-next</p>
<p>by 장고쟁이</p>
</blockquote>
<p>아래 <br>menu 부분에, <strong>tags 와 categories 부분을 uncomment 처리 해줍니다.</strong> </p>
<p>앞 부분에 # 만 없애면 되겟죠? ㅎㅎ</p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">menu:  </span><br><span class="line">home: / || home  </span><br><span class="line"><span class="comment"># about: /about/ || user  </span></span><br><span class="line">tags: /tags/ || tags  </span><br><span class="line">categories: /categories/ || th  </span><br><span class="line">archives: /archives/ || archive  </span><br><span class="line"><span class="comment"># schedule: /schedule/ || calendar  </span></span><br><span class="line"><span class="comment"># sitemap: /sitemap.xml || sitemap  </span></span><br><span class="line"><span class="comment"># commonweal: /404/ || heartbeat</span></span><br></pre></td></tr></table></figure>



<br>

<p><strong>메뉴에 categories 와 tag 를 보이게 했습니다.</strong> </p>
<p><strong>이제, categories 와 tag 페이지 설정을 해주러 갑니다.</strong> </p>
<br>

<hr>
<hr>
<h2 id="Categories-페이지-추가"><a href="#Categories-페이지-추가" class="headerlink" title="Categories 페이지 추가"></a><strong>Categories 페이지 추가</strong></h2><hr>
<p>다음 명령어를 입력하여, 카테고리 페이지를 추가 해 줍니다. </p>
<br>



<p>hexo new page categories <br></p>
<hr>
<p><strong>추가된 파일은 /source/categories/index.md 에 생성 됩니다.</strong> </p>
<p><strong>해당 index.md 파일을 아래와 같이 수정해 줍니다.</strong> </p>
<hr>
<p><strong>※ 맨 위 — 와 맨 아래 — 를 꼭 맞게 작성해야 합니다. 이게 포맷입니다.</strong> </p>
<p>****<br></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title:Categories</span><br><span class="line">date:2020-03-15 09:28:47</span><br><span class="line"><span class="built_in">type</span>:<span class="string">"categories"</span></span><br><span class="line">comments:<span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>

<br>

<h2 id="Tags-페이지-추가"><a href="#Tags-페이지-추가" class="headerlink" title="Tags 페이지 추가"></a><strong>Tags 페이지 추가</strong></h2><br>



<p>카테고리 생성할때와 비슷하게, tags 페이지를 생성합니다 </p>
<br>

<p>hexo new page tags</p>
<br> 

<hr>
<p><strong>추가된 파일은 /source/categories/index.md 에 생성 됩니다.</strong> </p>
<p><strong>해당 index.md 파일을 아래와 같이 수정해 줍니다.</strong> </p>
<hr>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title:Tags</span><br><span class="line">date:2020-03-15 09:28:47</span><br><span class="line"><span class="built_in">type</span>:<span class="string">"tags"</span></span><br><span class="line">comments:<span class="literal">false</span></span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<br>



<h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며"></a><strong>마치며</strong></h2><br>

<p>카테고리와 태그 세팅이 된것 같습니다. </p>
<p>앞으로 포스트 작성시, 상단 내용에 <strong>categories</strong> 와 <strong>tags</strong> 항목을 추가하고 작성 해보면 됩니다.</p>
<br>



<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">---</span><br><span class="line">title: NeXT Theme - Categories and Tags</span><br><span class="line">date: &#123;&#123;date&#125;&#125;</span><br><span class="line">categories: [Hexo Blog]</span><br><span class="line">tags: [hexo]</span><br><span class="line"></span><br><span class="line">---</span><br></pre></td></tr></table></figure>



<br>



<p>계속 에러가 났었는데. 이번에는 잘 되네요;; </p>
<br>





<p>​                                <a href="https://blog.naver.com/PostView.nhn?blogId=headfat1218&Redirect=View&logNo=221854430054&categoryNo=9&isAfterWrite=true&isMrblogPost=false&isHappyBeanLeverage=true&contentLength=28744#" target="_blank" rel="noopener">                                     <img src="https://postfiles.pstatic.net/MjAyMDAzMTVfMTM2/MDAxNTg0MjM0MTYzNzg5.f2wNFiebhXxB7HTWFdjIwZdgKZYb_ZPuFhL3z0SSsfkg.KQn8qlK4ekf1Keo3EACPy8i5I97kHXSXcJs4MYvkrOEg.PNG.headfat1218/Screenshot_from_2020-03-15_10-02-16.png?type=w773" alt="img">                                 </a>                        </p>
<br>

<p>앞으로 hexo 블로그를 카테고리와 테그를 구분해서 다양하게 작성할수 있을것 같습니다. 화이팅~ </p>
]]></content>
      <categories>
        <category>Hexo Blog</category>
      </categories>
      <tags>
        <tag>categories</tag>
        <tag>tags</tag>
      </tags>
  </entry>
  <entry>
    <title>My First Post</title>
    <url>/2020/03/14/My-First-Post/</url>
    <content><![CDATA[<h1 id="깃헙-페이지-배포하기"><a href="#깃헙-페이지-배포하기" class="headerlink" title="깃헙 페이지 배포하기"></a>깃헙 페이지 배포하기</h1><br>

<p>hexo도 설치 되었고 </p>
<p>로컬 컴퓨터에서 동작도 되고. 테마도 적용 된것 같으니. </p>
<br>

<p>첫번째 포스트로 깃헙에 배포 하는걸 진행 하고 싶습니다. </p>
<p>참고로, 포스트를 작성하려면, 블로그 폴더에서 아래 명령어를 실행 하면 됩니다. 이 페이지 title 명은 “My First Post” 이니, 이걸 명령어에 포함 시킵니다. </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">"My First Post"</span></span><br></pre></td></tr></table></figure>



<p>명령어를 실행 하면, 해당 파일은 <code>source/_posts/</code>에 생성 됩니다. </p>
<br> 

<h2 id="1-Github-페이지-생성하기"><a href="#1-Github-페이지-생성하기" class="headerlink" title="1. Github 페이지 생성하기"></a>1. Github 페이지 생성하기</h2><br> 

<p>깃헙에 가서, 블로그 페이지로 쓰일 <code>repository</code> 를 생성합니다. </p>
<br>

<p>repository 이름은 반드시 <code>&lt;username&gt;.github.io</code> 가 되어야 합니다. </p>
<p>저는 장고쟁이니까 <code>djangojeng-e.github.io</code>로 생성 하였습니다. </p>
<br>



<p><strong>Initalize with Readme.md 옵션을 선택하고 생성 완료 해주세요</strong></p>
<br>



<p>생성이 완료되면, 브라우저에 ‘djangojeng-e.github’ 을 입력해서. 잘 동작 하는지 확인 합니다. </p>
<p>![Screenshot from 2020-03-14 21-47-32](/home/dhkang/Pictures/Screenshot from 2020-03-14 21-47-32.png)</p>
<h2 id="2-Config-파일에-깃헙-주소-등록하기"><a href="#2-Config-파일에-깃헙-주소-등록하기" class="headerlink" title="2. Config 파일에 깃헙 주소 등록하기"></a>2. Config 파일에 깃헙 주소 등록하기</h2><br>

<p>블로그폴더 최상단으로 이동하여서 <code>_config.yml</code>을 수정합니다. </p>
<br>

<p>저는 장고쟁이이니까. <code>url</code>에 <a href="http://djangojeng-e.github.io">http://djangojeng-e.github.io</a> 라고 설정해 주었습니다 ㅎㅎ </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line">url: http://djangojeng-e.github.io</span><br><span class="line">root: /</span><br><span class="line">permalink: :year/:month/:day/:title/</span><br><span class="line">permalink_defaults:</span><br><span class="line">pretty_urls:</span><br><span class="line">  trailing_index: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing 'index.html' from permalinks</span></span><br><span class="line">  trailing_html: <span class="literal">true</span> <span class="comment"># Set to false to remove trailing '.html' from permalinks</span></span><br></pre></td></tr></table></figure>

<br>

<p><code>deployment</code>부분도 수정해 줍니다 </p>
<br>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: https://github.com/djangojeng<span class="_">-e</span>/djangojeng-e.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>

<br>



<h2 id="3-정적파일-생성후-배포하기"><a href="#3-정적파일-생성후-배포하기" class="headerlink" title="3. 정적파일 생성후 배포하기"></a>3. 정적파일 생성후 배포하기</h2><p><code>hexo generate</code> 명령어를 실행하면, 정적파일들을 만들어 냅니다. </p>
<br> 

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure>

<br>

<p><strong>정적파일이 다 생성되었으면, 배포를 진행 합니다.</strong></p>
<br>

<p>배포를 진행하기전에, hexo 와 git 을 연결해줄수 있는 플러그인 하나를 설치 해야 합니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install --save hexo-deployer-git</span><br></pre></td></tr></table></figure>

<br>

<p>설치를 마친 뒤에, <code>hexo deploy</code> 명령어를 실행하여, 배포 합니다. </p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>

<br>

<p><code>https://djangojeng-e.github.io</code>를 브라우저에 입력하고, 확인해 보면. </p>
<p>브라우저에서 블로그가 잘 작동 합니다!</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/03/14/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
</search>
