<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Tue, 03 Nov 2020 08:35:01 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Python 기초 12편 - Regular Expression (정규표현식 1)</title>
      <link>http://djangojeng-e.github.io/2020/11/03/Python-%EA%B8%B0%EC%B4%88-12%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-1/</link>
      <guid>http://djangojeng-e.github.io/2020/11/03/Python-%EA%B8%B0%EC%B4%88-12%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-1/</guid>
      <pubDate>Tue, 03 Nov 2020 08:30:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Regular-Expression&quot;&gt;&lt;a href=&quot;#Regular-Expression&quot; class=&quot;headerlink&quot; title=&quot;Regular Expression&quot;&gt;&lt;/a&gt;Regular Expression&lt;/h2&gt;&lt;br&gt;



&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><br><blockquote><p><strong>정규표현식이란?</strong> </p><p>특정 문자열이 주어진 표현식과 매치가 되는지 확인해 줍니다. </p><p>특정 텍스트에서 검색할 문자열 혹은 패턴을 나타내는 기호 및 문자 입니다. </p></blockquote><br><p>정규 표현식을 사용하면, 정규 표현식에 쓰여진 문자나 패턴이 검색할 문자열 안에 있는지 없는지 확인 할수 있습니다.  </p><br><h2 id="re-내장-모듈"><a href="#re-내장-모듈" class="headerlink" title="re 내장 모듈"></a>re 내장 모듈</h2><br><p>정규 표현식을 사용하기 위해서는,  re 라는 내장 모듈을 불러와주고, 사용해주면 됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><br><p><strong>re 모듈의 함수들을 정리하면 아래와 같습니다.</strong></p><br><table><thead><tr><th><strong>함수</strong></th><th><strong>동작 함수동작</strong></th></tr></thead><tbody><tr><td>re.findall</td><td>지정된 문자열과 매칭되는 부분을 리스트로 반환합니다</td></tr><tr><td>re.search</td><td>문자열 안에 매치가 있으면, 메치 객체를 반환합니다</td></tr><tr><td>re.split</td><td>각 매치에서 일치할때마다 분열된 문자열 리스트를 반환합니다</td></tr><tr><td>re.sub</td><td>문자열과 매치되는 하나 혹은 여러개의 것들을 교체 합니다</td></tr></tbody></table><br><p>정규 표현식은 아무리 여러번 봐도, 쉽게 머리에 들어오지 않고. 매번 까먹기만 하기 때문에. </p><p><br>특별히 더더더욱이 많은 공부를 해야하는것 같습니다. W3School 예시를 따라하면서 정리합니다. </p><br><h3 id="Metacharacters-특수문자"><a href="#Metacharacters-특수문자" class="headerlink" title="Metacharacters (특수문자)"></a>Metacharacters (특수문자)</h3><br><table><thead><tr><th><strong>문자</strong></th><th><strong>비고</strong></th><th><strong>예시</strong></th></tr></thead><tbody><tr><td>[]</td><td>문자의 집합</td><td>“[a-m]”</td></tr><tr><td>\</td><td>특정 순서를 표시</td><td>“\d”</td></tr><tr><td>.</td><td>새줄의 문자를 제외한, 아무 문자</td><td>‘he..o”</td></tr><tr><td>^</td><td>으로 시작</td><td>“^hello”</td></tr><tr><td>$</td><td>으로 끝</td><td>“world$”</td></tr><tr><td>*</td><td>0번 혹은 그 이상 발생</td><td>“aix*”</td></tr><tr><td>+</td><td>1번 혹은 그 이상 발생</td><td>“aix+”</td></tr><tr><td>{}</td><td>지정된 숫자만큼 발생</td><td>“al{2}”</td></tr><tr><td>|</td><td>양쪽 혹은</td><td>“falls|stays”</td></tr></tbody></table><hr><br><p>정규표현식은 매우 중요한 토픽으로, 다음 포스팅부터 예시를 좀 찾아보면서 정리해 보려 합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/03/Python-%EA%B8%B0%EC%B4%88-12%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 11편 - break, continue문</title>
      <link>http://djangojeng-e.github.io/2020/11/02/Python-%EA%B8%B0%EC%B4%88-11%ED%8E%B8-break-continue%EB%AC%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/11/02/Python-%EA%B8%B0%EC%B4%88-11%ED%8E%B8-break-continue%EB%AC%B8/</guid>
      <pubDate>Sun, 01 Nov 2020 23:29:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Python-기초-break-continue&quot;&gt;&lt;a href=&quot;#Python-기초-break-continue&quot; class=&quot;headerlink&quot; title=&quot;Python 기초 - break, continue&quot;&gt;&lt;/a&gt;Python 기초 -
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-기초-break-continue"><a href="#Python-기초-break-continue" class="headerlink" title="Python 기초 - break, continue"></a>Python 기초 - break, continue</h2><br><p><strong>break 문</strong></p><br><p>break 문은 for 혹은 while 반복문을 빠져나가기 위해 사용됩니다. </p><p><br>break 문의 목적은, 반복문의 실행을 바로 멈추고, 프로그램의 흐름이 반복문 이후로 넘어가게 하는것입니다. </p><br><blockquote><p>for 반복문 혹은 while 반복문 안에서, </p><p>break 코드를 만나면, 해당 반복문은 바로 종료가 됩니다. </p></blockquote><br><h3 id="for-반복문에서-break-의-예시"><a href="#for-반복문에서-break-의-예시" class="headerlink" title="for 반복문에서 break 의 예시"></a>for 반복문에서 break 의 예시</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for loop 안의 break 문 </span></span><br><span class="line">numbers = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">num_sum = <span class="number">0</span> </span><br><span class="line">count = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> numbers:</span><br><span class="line">    num_sum = num_sum + x </span><br><span class="line">    count = count + <span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line">        </span><br><span class="line">print(<span class="string">'처음 &#123;&#125;번째 숫자의 합계는, &#123;&#125; 입니다.'</span>.format(count, num_sum))</span><br></pre></td></tr></table></figure><br><h3 id="while-반복문에서-break-의-예시"><a href="#while-반복문에서-break-의-예시" class="headerlink" title="while 반복문에서 break 의 예시"></a>while 반복문에서 break 의 예시</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># while loop 안의 break 문 </span></span><br><span class="line">num_sum = <span class="number">0</span> </span><br><span class="line">count = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span>(count &lt; <span class="number">10</span>):</span><br><span class="line">num_sum = num_sum + count </span><br><span class="line">    count = count + <span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line">print(<span class="string">'처음 &#123;&#125; 번째 숫자의 합계는 &#123;&#125; 입니다'</span>.format(count, num_sum))</span><br></pre></td></tr></table></figure><br><h3 id="continue-문"><a href="#continue-문" class="headerlink" title="continue 문"></a>continue 문</h3><br><p>continue 문은 while 혹은 for 반복문 안에서, 남아있는 구문들을 실행시키지 않고. 반복문의 위로 올라가게 해줍니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># continue 문 </span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="number">3</span> <span class="keyword">or</span> x==<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">continue</span> </span><br><span class="line">        <span class="comment"># x 가 3 혹은 6이면, continue 문 밑에 있는 print(x) 를 실행시키지 않고, </span></span><br><span class="line">        <span class="comment"># 넘어가게 된다. </span></span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/02/Python-%EA%B8%B0%EC%B4%88-11%ED%8E%B8-break-continue%EB%AC%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 10편 - While 반복문</title>
      <link>http://djangojeng-e.github.io/2020/11/01/Python-%EA%B8%B0%EC%B4%88-10%ED%8E%B8-While-%EB%B0%98%EB%B3%B5%EB%AC%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/11/01/Python-%EA%B8%B0%EC%B4%88-10%ED%8E%B8-While-%EB%B0%98%EB%B3%B5%EB%AC%B8/</guid>
      <pubDate>Sun, 01 Nov 2020 02:07:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Python-기초-while문&quot;&gt;&lt;a href=&quot;#Python-기초-while문&quot; class=&quot;headerlink&quot; title=&quot;Python 기초 - while문&quot;&gt;&lt;/a&gt;Python 기초 - while문&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-기초-while문"><a href="#Python-기초-while문" class="headerlink" title="Python 기초 - while문"></a>Python 기초 - while문</h2><br><h3 id="While-반복문"><a href="#While-반복문" class="headerlink" title="While 반복문"></a>While 반복문</h3><br><p>반복문들은 반복적으로 프로그램 구문의 코드 블럭들을 실행 시키기 위해 사용됩니다. </p><p><br>파이썬에서 기본 반복문 구조는 while 반복문 입니다. </p><br><p>아래는 while 문의 문법 구조 입니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (expression):</span><br><span class="line">    statement_1 </span><br><span class="line">    statement_2</span><br></pre></td></tr></table></figure><br><blockquote><p>위 while 문의 기본 문법에서 보다시피, </p><p>while 문은, while(expression): 부분에 expression 이 True 가 되는동안, </p><p>statement_1 과 statement_2 를 실행 합니다. </p><br><p>expression 부분이 false 가 되지 않는한, 반복문은 코드 실행을 멈추지 않습니다!</p><p>이렇게 실행을 멈추지 않는 반복을 무한 루프라고 부릅니다. </p></blockquote><br><p>expression 안에 있는 조건은, 각 반복이 시작될때마다 확인이 되고, 이 조건이 False 가 되면, while 반복이 끝나고, 더이상 코드가 실행되지 않습니다. </p><br><p>아래 예시는, x 가 &lt; 5 인 동안에, x 를 출력합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x 가 5 보다 작을동안 </span></span><br><span class="line"><span class="comment"># x 를 출력 </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (x &lt; <span class="number">5</span>):</span><br><span class="line">    print(x)</span><br><span class="line">    x = x + <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래는 아무것도 실행 되지 않습니다. </span></span><br><span class="line"><span class="comment"># 반복문이 시작될때부터, 조건이 False 가 됩니다 </span></span><br><span class="line"><span class="comment"># 10 은 5보다 크지 않습니다. </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span> </span><br><span class="line"><span class="keyword">while</span>(x &lt; <span class="number">5</span>):</span><br><span class="line">    print(x)</span><br><span class="line">    x = x + <span class="number">1</span></span><br></pre></td></tr></table></figure><br><h3 id="while-과-else-문"><a href="#while-과-else-문" class="headerlink" title="while 과 else 문"></a>while 과 else 문</h3><br><p>while 과 if 문 사이에는 구조적으로 비슷한점이 존재합니다. </p><p><br>둘다 조건이 true 일때 실행되는 코드 블럭들을 가지고 있고, 차이점이라고 하면, if 문에서는 코드 블럭이 한번만  실행되지만, while 문에 있는 코드 블럭은 반복적으로 실행된다는 차이점이 존재합니다. </p><br><p>문법은 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (expression):</span><br><span class="line">    statement_1</span><br><span class="line">    statement_2</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_3</span><br><span class="line">    statement_4</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><br><p>while 반복문은 반복적으로 조건을 테스트 하고, 조건이 True 이면, 첫번째 코드 블럭을 조건이 true 인 동안에 반복적으로 실행 시킵니다. </p><br><blockquote><p>else 밑에 있는 코드블럭들은, </p><p>조건이 False 가 될때에만 실행됩니다. </p></blockquote><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># while... else </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span> </span><br><span class="line">s = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> (x &lt; <span class="number">10</span>):</span><br><span class="line">    s = s + x </span><br><span class="line">    x = x + <span class="number">1</span> </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"첫번째 9숫자의 합은 : "</span>, s)</span><br></pre></td></tr></table></figure><br><h4 id="if-else-break-와-사용되는-while-반복문의-예시"><a href="#if-else-break-와-사용되는-while-반복문의-예시" class="headerlink" title="if-else, break 와 사용되는 while 반복문의 예시"></a>if-else, break 와 사용되는 while 반복문의 예시</h4><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if-else 그리고 break 문을 사용한 while 반복문 </span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (x &lt; <span class="number">10</span>):</span><br><span class="line">    s = s + x</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'첫번째 9숫자의 합은 : '</span>, s)</span><br><span class="line">print(<span class="string">' 첫번째 '</span>, x, <span class="string">'의 합은 : '</span>, s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 여기서는 else 가 실행되지 않습니다 </span></span><br><span class="line"><span class="comment"># while 반복문이, x 값이 5가 될때 종료되었기 때문에, </span></span><br><span class="line"><span class="comment"># while 문에 붙어 있는 else 밑의 코드는 실행되지 않고, while 문을 빠져나갑니다. </span></span><br><span class="line"><span class="comment"># 따라서, while 문 밖에 있는 print 함수가 실행됩니다.</span></span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/01/Python-%EA%B8%B0%EC%B4%88-10%ED%8E%B8-While-%EB%B0%98%EB%B3%B5%EB%AC%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 9편 - for 반복문</title>
      <link>http://djangojeng-e.github.io/2020/10/31/Python-%EA%B8%B0%EC%B4%88-9%ED%8E%B8-for-%EB%B0%98%EB%B3%B5%EB%AC%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/10/31/Python-%EA%B8%B0%EC%B4%88-9%ED%8E%B8-for-%EB%B0%98%EB%B3%B5%EB%AC%B8/</guid>
      <pubDate>Sat, 31 Oct 2020 07:16:51 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;For-반복문&quot;&gt;&lt;a href=&quot;#For-반복문&quot; class=&quot;headerlink&quot; title=&quot;For 반복문&quot;&gt;&lt;/a&gt;For 반복문&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;대부분의 다른 프로그래밍 언어들과 비슷하게, 파이썬도 for 반복문을 가지고 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;하지만, C 혹은, Pascal 같은 언어들과는 조금 차이점이 존재합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬에서 for 반복문은, 리스트, 문자열, 튜플 등과 같이 순서가 있는 자료들의 요소들을 순회할때 사용됩니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;또한, for 반복문은 range() 내장 함수를 사용하여, 다른 컨테이너로부터 요소들을 접근하기 위해 사용되기도 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;기본 구조는 아래와 같습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 변수명 &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sequence형자료: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statement1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statement2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;Parameter &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;변수명&lt;/td&gt;
&lt;td&gt;for 반복문을 순회할때마다, 새로운값을 가지는 변수명을 가르킵니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sequence&lt;/td&gt;
&lt;td&gt;리스트, 문자열, 튜플 등과 같이 순서가 있는 자료형&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;statement1 statement2&lt;/td&gt;
&lt;td&gt;순회중 각 요소마다, 실행할 코드 블럭들&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;

&lt;h2 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h2&gt;&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# for 반복문 예시 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;color_list = [&lt;span class=&quot;string&quot;&gt;&#39;Red&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Blue&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Green&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Black&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; color_list:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(c)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;위의 예시에서 color_list 는 sequence 형 (즉, 순서가 존재하는, 순회 가능한) 자료로, 몇가지 색깔 이름을 가지고 있는 리스트 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;for 반복문이 실행되면, 아래와 같은 작업을 실행합니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;첫번째 요소인 ‘Red’ 가 변수명 c 에 할당이 됩니다. 그리고, print(c) 를 실행 하여, ‘Red’를 출력합니다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;두번째 요소인 ‘Blue’가 변수명 c 에 할당이 됩니다. 그리고 print(c) 를 실행 하여, ‘Blue’ 를 출력합니다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;세번째 요소인 ‘Green’이 변수명 c 에 할당이 됩니다. 그리고 print(c) 를 실행하여, ‘Green’을 출력합니다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;네번째 요소인 ‘Black’’이 변수명 c에 할당이 됩니다. 그리고 print(c)를 실행하여, ‘Black’을 출력합니다.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;h2 id=&quot;for-반복문과-range-함수&quot;&gt;&lt;a href=&quot;#for-반복문과-range-함수&quot; class=&quot;headerlink&quot; title=&quot;for 반복문과 range() 함수&quot;&gt;&lt;/a&gt;for 반복문과 range() 함수&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;range()&lt;/code&gt; 함수는 연속적인 정수들의 리스트를 반환합니다. &lt;code&gt;range()&lt;/code&gt; 함수는, 한개, 두개 혹은 3개의 파라미터를 가지고 있고. 이중 마지막 파라미터 2개는 옵션입니다. for loop 에 꽤나 보편적으로 사용되는 함수 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;예를들면, &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# range(4) 는 0 부터 4 이전의 숫자로 된 리스트를 반환합니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 따라서, 아래 코드는 for a in [0, 1, 2, 3]: 과 같은 효과를 가집니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# range 의 시작지점과 끝 지점을 정할수 있습니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;range의 시작지점과 끝 지점을 정할수 있습니다&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 아래 range 는, 2 부터 시작하고, 7의 바로 이전 숫자인 6에서 끝납니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;파라미터의 마지막값을 지정합니다&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 기본값으로, 시작지점부터 끝지점까지 1씩 증가하는 요소들을 리스트에 넣어 리스트를 반환하지만, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 파라미터의 마지막값을 지정하여, 지정한 숫자만큼 증가하는 요소들을 리스트에 넣어 생성할수 있습니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;tuple-list-dictionary-순회&quot;&gt;&lt;a href=&quot;#tuple-list-dictionary-순회&quot; class=&quot;headerlink&quot; title=&quot;tuple, list, dictionary 순회&quot;&gt;&lt;/a&gt;tuple, list, dictionary 순회&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;for 반복문은 sequence 가 존재하는 자료인, tuple, list, dictionary 들을 순회하여 반복작업을 수행 할수 있습니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="For-반복문"><a href="#For-반복문" class="headerlink" title="For 반복문"></a>For 반복문</h2><br><p>대부분의 다른 프로그래밍 언어들과 비슷하게, 파이썬도 for 반복문을 가지고 있습니다. </p><br><p>하지만, C 혹은, Pascal 같은 언어들과는 조금 차이점이 존재합니다. </p><br><p>파이썬에서 for 반복문은, 리스트, 문자열, 튜플 등과 같이 순서가 있는 자료들의 요소들을 순회할때 사용됩니다. </p><p><br>또한, for 반복문은 range() 내장 함수를 사용하여, 다른 컨테이너로부터 요소들을 접근하기 위해 사용되기도 합니다. </p><br><p>기본 구조는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수명 <span class="keyword">in</span> sequence형자료: </span><br><span class="line">    statement1 </span><br><span class="line">    statement2 </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><br><p>Parameter </p><br><table><thead><tr><th><strong>Name</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>변수명</td><td>for 반복문을 순회할때마다, 새로운값을 가지는 변수명을 가르킵니다</td></tr><tr><td>sequence</td><td>리스트, 문자열, 튜플 등과 같이 순서가 있는 자료형</td></tr><tr><td>statement1 statement2</td><td>순회중 각 요소마다, 실행할 코드 블럭들</td></tr></tbody></table><br><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 반복문 예시 </span></span><br><span class="line">color_list = [<span class="string">'Red'</span>, <span class="string">'Blue'</span>, <span class="string">'Green'</span>, <span class="string">'Black'</span>]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> color_list:</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure><br><p>위의 예시에서 color_list 는 sequence 형 (즉, 순서가 존재하는, 순회 가능한) 자료로, 몇가지 색깔 이름을 가지고 있는 리스트 입니다. </p><br><blockquote><p>for 반복문이 실행되면, 아래와 같은 작업을 실행합니다 </p></blockquote><br><ol><li><p>첫번째 요소인 ‘Red’ 가 변수명 c 에 할당이 됩니다. 그리고, print(c) 를 실행 하여, ‘Red’를 출력합니다. </p></li><li><p>두번째 요소인 ‘Blue’가 변수명 c 에 할당이 됩니다. 그리고 print(c) 를 실행 하여, ‘Blue’ 를 출력합니다. </p></li><li><p>세번째 요소인 ‘Green’이 변수명 c 에 할당이 됩니다. 그리고 print(c) 를 실행하여, ‘Green’을 출력합니다. </p></li><li><p>네번째 요소인 ‘Black’’이 변수명 c에 할당이 됩니다. 그리고 print(c)를 실행하여, ‘Black’을 출력합니다.  </p></li></ol><br><h2 id="for-반복문과-range-함수"><a href="#for-반복문과-range-함수" class="headerlink" title="for 반복문과 range() 함수"></a>for 반복문과 range() 함수</h2><br><p><code>range()</code> 함수는 연속적인 정수들의 리스트를 반환합니다. <code>range()</code> 함수는, 한개, 두개 혹은 3개의 파라미터를 가지고 있고. 이중 마지막 파라미터 2개는 옵션입니다. for loop 에 꽤나 보편적으로 사용되는 함수 입니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># range(4) 는 0 부터 4 이전의 숫자로 된 리스트를 반환합니다. </span></span><br><span class="line"><span class="comment"># 따라서, 아래 코드는 for a in [0, 1, 2, 3]: 과 같은 효과를 가집니다. </span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    print(a)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    print(a)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># range 의 시작지점과 끝 지점을 정할수 있습니다 </span></span><br><span class="line">print(<span class="string">"range의 시작지점과 끝 지점을 정할수 있습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 range 는, 2 부터 시작하고, 7의 바로 이전 숫자인 6에서 끝납니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">7</span>):</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"파라미터의 마지막값을 지정합니다"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 기본값으로, 시작지점부터 끝지점까지 1씩 증가하는 요소들을 리스트에 넣어 리스트를 반환하지만, </span></span><br><span class="line"><span class="comment"># 파라미터의 마지막값을 지정하여, 지정한 숫자만큼 증가하는 요소들을 리스트에 넣어 생성할수 있습니다. </span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">19</span>, <span class="number">5</span>):</span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure><br><br><h2 id="tuple-list-dictionary-순회"><a href="#tuple-list-dictionary-순회" class="headerlink" title="tuple, list, dictionary 순회"></a>tuple, list, dictionary 순회</h2><br><p>for 반복문은 sequence 가 존재하는 자료인, tuple, list, dictionary 들을 순회하여 반복작업을 수행 할수 있습니다. </p><br><a id="more"></a><h3 id="튜플-순회하기"><a href="#튜플-순회하기" class="headerlink" title="튜플 순회하기"></a>튜플 순회하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 반복문을 사용하여 tuple 순회하기 </span></span><br><span class="line"><span class="comment"># numbers 튜플을 생성 </span></span><br><span class="line">numbers = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>) </span><br><span class="line">count_odd = <span class="number">0</span> </span><br><span class="line">count_even = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span>:</span><br><span class="line">        count_odd += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count_even += <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">"짝수의 갯수 :"</span>, count_even)</span><br><span class="line">print(<span class="string">"홀수의 갯수 :"</span>, count_odd)</span><br></pre></td></tr></table></figure><br><p>위의 예시에서, numbers 튜플을 순회하며, 각 요소들을 x 라는 변수에 할당을 하고. </p><p><br>각 순회마다, x 가 짝수인지 홀수인지 구분하여, 짝수의 갯수와 홀수의 갯수를 세어 냅니다. </p><br><h3 id="리스트를-순회하기"><a href="#리스트를-순회하기" class="headerlink" title="리스트를 순회하기"></a>리스트를 순회하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 반복문을 사용하여 list 순회하기 </span></span><br><span class="line"><span class="comment"># datalist 리스트를 생성 </span></span><br><span class="line"><span class="comment"># 다른 타입들을 가지고 있는 요소를 가진 리스트를 순회하며, print 를 할수 있습니다. </span></span><br><span class="line"></span><br><span class="line">datalist = [<span class="number">1452</span>, <span class="number">11.23</span>, <span class="number">1</span>+<span class="number">2j</span>, <span class="literal">True</span>, <span class="string">'django'</span>, (<span class="number">0</span>, <span class="number">-1</span>), [<span class="number">5</span>, <span class="number">12</span>],</span><br><span class="line">&#123;<span class="string">"class"</span>: <span class="string">'V'</span>, <span class="string">"section"</span>: <span class="string">'A'</span>&#125;] </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> datalist:</span><br><span class="line">    print(item, <span class="string">"의 타입은"</span>, type(item), <span class="string">"입니다"</span>)</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"><span class="number">1452</span> 의 타입은 &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt; 입니다</span></span><br><span class="line"><span class="class">11.23 의 타입은 &lt;<span class="title">class</span> '<span class="title">float</span>'&gt; 입니다</span></span><br><span class="line"><span class="class"><span class="params">(<span class="number">1</span>+<span class="number">2j</span>)</span> 의 타입은 &lt;<span class="title">class</span> '<span class="title">complex</span>'&gt; 입니다</span></span><br><span class="line"><span class="class"><span class="title">True</span> 의 타입은 &lt;<span class="title">class</span> '<span class="title">bool</span>'&gt; 입니다</span></span><br><span class="line"><span class="class"><span class="title">django</span> 의 타입은 &lt;<span class="title">class</span> '<span class="title">str</span>'&gt; 입니다</span></span><br><span class="line"><span class="class"><span class="params">(<span class="number">0</span>, <span class="number">-1</span>)</span> 의 타입은 &lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt; 입니다</span></span><br><span class="line">[5, 12] 의 타입은 &lt;class 'list'&gt; 입니다</span><br><span class="line">&#123;<span class="string">'class'</span>: <span class="string">'V'</span>, <span class="string">'section'</span>: <span class="string">'A'</span>&#125; 의 타입은 &lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt; 입니다</span></span><br></pre></td></tr></table></figure><br><h3 id="사전-순회하기"><a href="#사전-순회하기" class="headerlink" title="사전 순회하기"></a>사전 순회하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 반복문을 사용하여, dictionary 순회하기 </span></span><br><span class="line"><span class="comment"># key 와 value 로 이루어진 사전을 생성 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">color = &#123;<span class="string">"c1"</span>: <span class="string">"Red"</span>, <span class="string">"c2"</span>: <span class="string">"Green"</span>, <span class="string">"c3"</span>: <span class="string">"Orange"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> color:</span><br><span class="line">    print(key)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"color.keys() 를 사용하여 key 값만 순회 "</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># key 값만 순회 </span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> color.keys():</span><br><span class="line">    print(key)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"color.values() 를 사용하여 value 값만 순회"</span>)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> color.values():</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/31/Python-%EA%B8%B0%EC%B4%88-9%ED%8E%B8-for-%EB%B0%98%EB%B3%B5%EB%AC%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 8편 - if elif else</title>
      <link>http://djangojeng-e.github.io/2020/10/30/Python-%EA%B8%B0%EC%B4%88-8%ED%8E%B8-if-elif-else/</link>
      <guid>http://djangojeng-e.github.io/2020/10/30/Python-%EA%B8%B0%EC%B4%88-8%ED%8E%B8-if-elif-else/</guid>
      <pubDate>Thu, 29 Oct 2020 23:46:58 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-기초-if-elif-else&quot;&gt;&lt;a href=&quot;#Python-기초-if-elif-else&quot; class=&quot;headerlink&quot; title=&quot;Python 기초 - if, elif, else&quot;&gt;&lt;/a&gt;Python 기초 - if, elif, else&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;if, elif, else 문은 조건적으로 구문 혹은 코드블럭을 실행 시킬때 사용됩니다. &lt;/p&gt;
&lt;p&gt;조건들은, True 혹은 False 가 될수 있고, 해당 조건이 True 일때 하나의 코드 블럭을 실행 시킵니다. &lt;/p&gt;
&lt;p&gt;조건이 False 라면, 코드 블럭을 실행 시키지 않거나, 다른 코드들을 실행 시킬수 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-기초-if-elif-else"><a href="#Python-기초-if-elif-else" class="headerlink" title="Python 기초 - if, elif, else"></a>Python 기초 - if, elif, else</h2><br><blockquote><p><code>if</code>, <code>elif</code>, <code>else</code></p><p>if, elif, else 문은 조건적으로 구문 혹은 코드블럭을 실행 시킬때 사용됩니다. </p><p>조건들은, True 혹은 False 가 될수 있고, 해당 조건이 True 일때 하나의 코드 블럭을 실행 시킵니다. </p><p>조건이 False 라면, 코드 블럭을 실행 시키지 않거나, 다른 코드들을 실행 시킬수 있습니다. </p></blockquote><br><a id="more"></a><h2 id="if-문"><a href="#if-문" class="headerlink" title="if 문"></a>if 문</h2><br><p>파이썬에서 if 문은 다른 프로그래밍 언어에서 존재하는 if 와 같습니다. </p><p><br>if 는 논리적 수식의 값을 바탕으로 하는 조건에 따라서, 구문의 조각들을 실행 시킵니다. 논리적 연산을 통해 나오는 조건의 값은 보통 True 혹은 False 이고, 이 값에 따라서, 코드 블럭을 실행 시킵니다. </p><br><p>if 문의 일반 형태는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    statement_1 </span><br><span class="line">    statement_2 </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><br><p>위의 예시에서, expression 은 조건을 지정하는 수식으로, 불리언식을 기반으로 합니다. </p><p><br>불리언식이 평가되고, true 혹은 fasle 값을 만들어 낼때, 수식이 true 인경우 들여쓰기된 모든 구문들이 실행 됩니다. 이 구문을 블럭이라고 부릅니다. </p><br><h2 id="if-else-문"><a href="#if-else-문" class="headerlink" title="if ..else 문"></a>if ..else 문</h2><br><p>파이썬에서 if.. else 문은, 두개의 블럭들을 가지고 있습니다. </p><p><br>하나는 if 문 을 따르고, 하나는 else 문 을 따릅니다. 아래 문법 구조를 참조합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    statement_1</span><br><span class="line">    statement_2 </span><br><span class="line">    ... </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_3</span><br><span class="line">    statement_4</span><br></pre></td></tr></table></figure><br><p>위의 상황에서, 만약 expression 이 True 로 평가되면, if 문 안에 있는 코드 블럭들이 실행되고. </p><p><br>expression 이 false 로 평가되면, else 문 안에 있는 코드 블럭들이 실행됩니다. </p><br><p>아래 예시를 참조해 봅시다. 프로그램은 ‘값은 10 입니다’ 라는 두번째 문장을 실행 시킵니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> </span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">10</span>):</span><br><span class="line">    print(<span class="string">'값은 10보다 큽니다'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'값은 10입니다'</span>)</span><br></pre></td></tr></table></figure><br><h2 id="if-elif-else-문"><a href="#if-elif-else-문" class="headerlink" title="if elif ..else 문"></a>if elif ..else 문</h2><br><p>때때로, 조건이 몇가지 있는 상황들이 발생합니다. 이런 상황을 다루기 위해서, 파이썬에서는 elif 문을 if 문과 else 문 사이에 추가하여, 조건을 추가하는것을 허용합니다. </p><br><p>아래 예시를 들어봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">1</span> + <span class="number">2j</span> </span><br><span class="line"><span class="keyword">if</span> (type(b) == int):</span><br><span class="line">    print(<span class="string">"b 는 정수 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == float):</span><br><span class="line">    print(<span class="string">"b 는 실수 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == complex):</span><br><span class="line">    print(<span class="string">"b 는 복소수 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == bool):</span><br><span class="line">    print(<span class="string">"b 는 불리언 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == str):</span><br><span class="line">    print(<span class="string">"b 는 문자열 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == tuple):</span><br><span class="line">    print(<span class="string">"b 는 튜플 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == dict):</span><br><span class="line">    print(<span class="string">"b 는 사전 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == list):</span><br><span class="line">    print(<span class="string">"b 는 리스트 입니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"b 의 타입은 모르는 타입입니다"</span>)</span><br></pre></td></tr></table></figure><br><p>복소수인 b 라는, 복소수가 다른 데이터 형태 인지 아닌지에 대한 조건에 따라서, 문자열을 출력합니다. elif 를 통해서 많은 조건들을 추가하였습니다. </p><br><h2 id="if-else-문의-중첩"><a href="#if-else-문의-중첩" class="headerlink" title="if ..else 문의 중첩"></a>if ..else 문의 중첩</h2><br><p>보통의 경우, if-else 문의 중첩은 우리가 하나 이상의 조건을 확인하고 싶을때 사용됩니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">35</span></span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">11</span>):</span><br><span class="line">    print(<span class="string">"놀이기구에 탈수 있는 나이 입니다"</span>)</span><br><span class="line">    <span class="keyword">if</span> (age &lt;= <span class="number">20</span> <span class="keyword">or</span> age &gt;= <span class="number">60</span>):</span><br><span class="line">        print(<span class="string">"청소년과 노약자의 사용료는 12,000원 입니다"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"일반 사용료는 18,000원 입니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"11세 미만인 나이이므로, 놀이기구 사용을 할수 없습니다"</span>)</span><br></pre></td></tr></table></figure><br><p>테스트해볼 조건 안에, 또다시 테스트해볼 조건이 있는것으로. 위 예시에서는, 나이가 11세 이상인 조건을 전제로, 조건을 하나 더 추가하였습니다. </p><br><p>20세 이하 혹은 60세 이상 청소년 혹은 노약자에는 사용료를 받습니다. </p><br><p>그 외의 나이대에 속하는 사용자는, 18000 원으로 일반 가격을 지불해야 합니다. </p><br><p>11세가 되지 않는다면, 11세 미만이므로, 놀이기구를 사용할수 없다는 메시지가 출력됩니다. </p><br><h2 id="if-else-문의-사용"><a href="#if-else-문의-사용" class="headerlink" title="if ..else 문의 사용"></a>if ..else 문의 사용</h2><br><h3 id="if-문-안에-연산자-사용하기"><a href="#if-문-안에-연산자-사용하기" class="headerlink" title="if 문 안에 연산자 사용하기"></a>if 문 안에 연산자 사용하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if 문 안에 and 연산자 사용하기 </span></span><br><span class="line">x = <span class="literal">False</span> </span><br><span class="line">y = <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># x 와 y 둘다 True 일때, x and y 는 True 로 평가됩니다. </span></span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">and</span> y):</span><br><span class="line">    print(<span class="string">'x 와 y 둘다 True 입니다'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'x 는 False 혹은 y 가 False 입니다. 그렇지 않다면 x 와 y 둘다 False 입니다'</span>)</span><br></pre></td></tr></table></figure><br><h3 id="in-연산자를-if-문에-사용하기"><a href="#in-연산자를-if-문에-사용하기" class="headerlink" title="in 연산자를 if 문에 사용하기"></a>in 연산자를 if 문에 사용하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in 연산자를 if 문에 사용하기 </span></span><br><span class="line"><span class="comment"># 문자열 생성 </span></span><br><span class="line">s = <span class="string">'Django'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 리스트 생성 </span></span><br><span class="line">frameworks = [<span class="string">'Django'</span>, <span class="string">'Flask'</span>, <span class="string">'Tornado'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># s 가 frameworks 안에 있는지 in 연산자를 사용하여 확인할수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s <span class="keyword">in</span> frameworks:</span><br><span class="line">    print(s + <span class="string">' Framework'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 혹은, if 문을 or 연산자를 사용하여 사용할수도 있습니다. </span></span><br><span class="line"><span class="keyword">if</span> s == <span class="string">'Django'</span> <span class="keyword">or</span> s == <span class="string">'Flask'</span> <span class="keyword">or</span> s == <span class="string">'Tornado'</span>:</span><br><span class="line">    print(s + <span class="string">' Framework'</span>)</span><br></pre></td></tr></table></figure><br><h3 id="if-else-를-한줄로-작성하기"><a href="#if-else-를-한줄로-작성하기" class="headerlink" title="if-else 를 한줄로 작성하기"></a>if-else 를 한줄로 작성하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if-else 를 한줄로 작성하기 </span></span><br><span class="line"><span class="comment"># 정수를 하나 생성하기 </span></span><br><span class="line">n = <span class="number">150</span> </span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n 이 500 보다 크면, n 은 7로 곱해집니다 </span></span><br><span class="line"><span class="comment"># 그렇지 않다면, 7 로 나누어집니다. </span></span><br><span class="line">result = n * <span class="number">7</span> <span class="keyword">if</span> n &gt; <span class="number">500</span> <span class="keyword">else</span> n / <span class="number">7</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><br><h3 id="not-연산자를-사용한-if-문"><a href="#not-연산자를-사용한-if-문" class="headerlink" title="not 연산자를 사용한 if 문"></a>not 연산자를 사용한 if 문</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># not 을 사용하여 논리 값을 반대로 바꿀수 있습니다. </span></span><br><span class="line"><span class="comment"># 정수를 하나 생성하기 </span></span><br><span class="line">x = <span class="number">20</span> </span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># not 연산자는, 조건값을 반대로 만듭니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> x == <span class="number">50</span>:   <span class="comment"># x == 50 은 False 를 만들지만, 앞에 not 이 붙어 있기 때문에, if 는 True 가 됩니다 </span></span><br><span class="line">    print(<span class="string">"값은 50과 다릅니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"x의 값은 50과 같습니다"</span>)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/30/Python-%EA%B8%B0%EC%B4%88-8%ED%8E%B8-if-elif-else/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 7편 - Operators (연산자)</title>
      <link>http://djangojeng-e.github.io/2020/10/29/Python-%EA%B8%B0%EC%B4%88-7%ED%8E%B8-Operators-%EC%97%B0%EC%82%B0%EC%9E%90/</link>
      <guid>http://djangojeng-e.github.io/2020/10/29/Python-%EA%B8%B0%EC%B4%88-7%ED%8E%B8-Operators-%EC%97%B0%EC%82%B0%EC%9E%90/</guid>
      <pubDate>Thu, 29 Oct 2020 02:57:26 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-기초-연산자-Operators&quot;&gt;&lt;a href=&quot;#Python-기초-연산자-Operators&quot; class=&quot;headerlink&quot; title=&quot;Python 기초 - 연산자 (Operators)&quot;&gt;&lt;/a&gt;Python 기초 - 연산자 (Operators)&lt;/h2&gt;&lt;br&gt;



&lt;br&gt;

&lt;h3 id=&quot;Operators-and-Opernands-연산자와-피연산자&quot;&gt;&lt;a href=&quot;#Operators-and-Opernands-연산자와-피연산자&quot; class=&quot;headerlink&quot; title=&quot;Operators and Opernands (연산자와 피연산자)&quot;&gt;&lt;/a&gt;Operators and Opernands (연산자와 피연산자)&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;컴퓨터 프로그래밍 언어에서 연산자 (operators) 들은 특별한 기호들로, 계산 조건 매칭 등을 표현합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;연산자 (operators) 들이 사용하는 값들은 피연산자 (opernands)  라고 불리웁니다. &lt;/p&gt;
&lt;br&gt;



&lt;blockquote&gt;
&lt;p&gt;c = a + b 에서, &lt;/p&gt;
&lt;p&gt;연산자는 +, 피 연산자들은 a 와 b 입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;파이썬은 아래 연산자들을 지원합니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;연산자명&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;연산&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Operators commands&lt;/td&gt;
&lt;td&gt;연산자 명령&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arithmetic Operators&lt;/td&gt;
&lt;td&gt;산수 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Comparison Operators&lt;/td&gt;
&lt;td&gt;비교 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical Operators&lt;/td&gt;
&lt;td&gt;논리 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assignment Operators&lt;/td&gt;
&lt;td&gt;할당 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bitwise Operators&lt;/td&gt;
&lt;td&gt;비트 단위 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-기초-연산자-Operators"><a href="#Python-기초-연산자-Operators" class="headerlink" title="Python 기초 - 연산자 (Operators)"></a>Python 기초 - 연산자 (Operators)</h2><br><br><h3 id="Operators-and-Opernands-연산자와-피연산자"><a href="#Operators-and-Opernands-연산자와-피연산자" class="headerlink" title="Operators and Opernands (연산자와 피연산자)"></a>Operators and Opernands (연산자와 피연산자)</h3><br><p>컴퓨터 프로그래밍 언어에서 연산자 (operators) 들은 특별한 기호들로, 계산 조건 매칭 등을 표현합니다. </p><p><br>연산자 (operators) 들이 사용하는 값들은 피연산자 (opernands)  라고 불리웁니다. </p><br><blockquote><p>c = a + b 에서, </p><p>연산자는 +, 피 연산자들은 a 와 b 입니다. </p></blockquote><br><p>파이썬은 아래 연산자들을 지원합니다. </p><br><table><thead><tr><th><strong>연산자명</strong></th><th><strong>연산</strong></th></tr></thead><tbody><tr><td>Operators commands</td><td>연산자 명령</td></tr><tr><td>Arithmetic Operators</td><td>산수 연산자</td></tr><tr><td>Comparison Operators</td><td>비교 연산자</td></tr><tr><td>Logical Operators</td><td>논리 연산자</td></tr><tr><td>Assignment Operators</td><td>할당 연산자</td></tr><tr><td>Bitwise Operators</td><td>비트 단위 연산자</td></tr></tbody></table><br><a id="more"></a><h2 id="Operator-Commands"><a href="#Operator-Commands" class="headerlink" title="Operator : Commands"></a>Operator : Commands</h2><br><p>연산자의 기능들을 제공하는 함수들의 모듈입니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Operator: commands </span></span><br><span class="line"><span class="comment"># Operator 명령어들 예시는 아래와 같습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, sub, mul, truediv, floordiv, mod</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> eq, ne, lt, gt, ge </span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> and_, or_, not_ </span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter, attrgetter, methodcaller</span><br><span class="line"><span class="keyword">import</span> operator <span class="keyword">as</span> op</span><br></pre></td></tr></table></figure><br><h2 id="Arithmetic-Operators-산수-연산자"><a href="#Arithmetic-Operators-산수-연산자" class="headerlink" title="Arithmetic Operators (산수 연산자)"></a>Arithmetic Operators (산수 연산자)</h2><br><table><thead><tr><th><strong>연산자</strong></th><th><strong>이름</strong></th><th><strong>예시</strong></th><th><strong>결과</strong></th></tr></thead><tbody><tr><td>+</td><td>더하기</td><td>x + y</td><td>x 와 y 의 합계</td></tr><tr><td>-</td><td>빼기</td><td>x - y</td><td>x 와 y 의 차이</td></tr><tr><td>*</td><td>곱하기</td><td>x * y</td><td>x 와 y 의 곱셈</td></tr><tr><td>/</td><td>나누기</td><td>x / y</td><td>x 와 y 의 나눗셈의 몫</td></tr><tr><td>%</td><td>나머지 구하기</td><td>x % y</td><td>x 를 y 로 나누고 남은 나머지의 값</td></tr><tr><td>**</td><td>지수연산</td><td>x ** y</td><td>x 의 y 승</td></tr><tr><td>//</td><td>몫 구하기</td><td>x // y</td><td>x 를 y 로 나누어 나온 몫의 소숫점을 제외한 값</td></tr></tbody></table><br><p>산술 연산자의 예시를 들어보면, 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Arithmetic Operators </span></span><br><span class="line"><span class="comment"># 산술 연산자 </span></span><br><span class="line">x = <span class="number">14</span> </span><br><span class="line">y = <span class="number">5</span> </span><br><span class="line"></span><br><span class="line">print(x + y)   <span class="comment"># 합계 </span></span><br><span class="line">print(x - y)   <span class="comment"># 뺄셈 </span></span><br><span class="line">print(x * y)   <span class="comment"># 곱셈 </span></span><br><span class="line">print(x / y)   <span class="comment"># 나누기 </span></span><br><span class="line">print(x % y)   <span class="comment"># 나누기 이후에 나머지 값 </span></span><br><span class="line">print(x ** y)  <span class="comment"># x의 y 승 </span></span><br><span class="line">print(x // y)  <span class="comment"># 나누어서 나온 몫의 소숫점을 제외한 부분</span></span><br></pre></td></tr></table></figure><br><h2 id="Comparison-Operators-비교-연산자"><a href="#Comparison-Operators-비교-연산자" class="headerlink" title="Comparison Operators (비교 연산자)"></a>Comparison Operators (비교 연산자)</h2><br><table><thead><tr><th><strong>연산자</strong></th><th><strong>이름</strong></th><th><strong>예시</strong></th><th><strong>결과</strong></th></tr></thead><tbody><tr><td>==</td><td>Equal</td><td>x == y</td><td>x 가 정확히 y 와 같을때 True</td></tr><tr><td>!=</td><td>Not Equal</td><td>x != y</td><td>x 가 y 와 같지 않을때 True</td></tr><tr><td>&gt;</td><td>Greater than</td><td>x &gt; y</td><td>x 가 y 보다 큰 값일때 True</td></tr><tr><td>&lt;</td><td>Less than</td><td>x &lt; y</td><td>x 가 y 보다 작은값일때 True</td></tr><tr><td>&gt;=</td><td>Greater than or equal to</td><td>x &gt;= y</td><td>x 가 y 보다 크거나 같을때 True</td></tr><tr><td>&lt;=</td><td>Less than or equal to</td><td>x &lt;= y</td><td>x 가 y 보다 작거나 같을때 True</td></tr></tbody></table><br><p>예시를 들면, 아래와 같습니다. 연산의 결과값이 나오게 될겁니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comparison Operators </span></span><br><span class="line"><span class="comment"># 비교 연산자 </span></span><br><span class="line">x = <span class="number">12</span> </span><br><span class="line">y = <span class="number">18</span> </span><br><span class="line"></span><br><span class="line">print(x == y)</span><br><span class="line">print(x != y)</span><br><span class="line">print(x &gt; y)</span><br><span class="line">print(x &lt; y)</span><br><span class="line">print(x &gt;= y)</span><br><span class="line">print(x &lt;= y)</span><br></pre></td></tr></table></figure><br><h2 id="Logical-Operators-논리-연산자"><a href="#Logical-Operators-논리-연산자" class="headerlink" title="Logical Operators (논리 연산자)"></a>Logical Operators (논리 연산자)</h2><br><table><thead><tr><th><strong>연산자</strong></th><th><strong>예시</strong></th><th><strong>결과</strong></th></tr></thead><tbody><tr><td>and</td><td>(x and y)</td><td>x 와 y 둘다 True 이면, True</td></tr><tr><td>or</td><td>(x or y)</td><td>x 와 y 둘중에 하나가 True 이면, True</td></tr><tr><td>not</td><td>(x not y)</td><td>만약 조건이 True 라면, not 연산자는 False 로 만듭니다.</td></tr></tbody></table><br><p>예를들면, 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Logical Operators </span></span><br><span class="line">x = <span class="number">12</span> </span><br><span class="line">y = <span class="number">18</span> </span><br><span class="line"></span><br><span class="line">print(x &gt; <span class="number">10</span> <span class="keyword">and</span> y &gt; <span class="number">10</span>)</span><br><span class="line">print(x &gt; <span class="number">14</span> <span class="keyword">or</span> y &gt; <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y 둘다 10보다 커서, 조건은 충족되어 True 여야 하나, not 이 붙어서 False 를 반환합니다. </span></span><br><span class="line"></span><br><span class="line">print(<span class="keyword">not</span>(x &gt; <span class="number">10</span> <span class="keyword">and</span> y &gt; <span class="number">10</span>))</span><br></pre></td></tr></table></figure><br><h2 id="Assignment-Operators-할당-연산자"><a href="#Assignment-Operators-할당-연산자" class="headerlink" title="Assignment Operators (할당 연산자)"></a>Assignment Operators (할당 연산자)</h2><br><table><thead><tr><th><strong>연산자</strong></th><th><strong>줄임</strong></th><th><strong>표현식</strong></th><th><strong>비고</strong></th></tr></thead><tbody><tr><td>+=</td><td>x += y</td><td>x = x + y</td><td>x 와 y 두값을 더하고, 더한값을 왼쪽의 x 에 할당</td></tr><tr><td>-=</td><td>x -= y</td><td>x = x - y</td><td>x 와 y 두값을 빼고, 뺀값을 왼쪽의 x 에 할당</td></tr><tr><td>*=</td><td>x *= y</td><td>x = x * y</td><td>x 와 y 두값을 곱하고, 곱한값을 왼쪽의 x 에 할당</td></tr><tr><td>/=</td><td>x /= y</td><td>x = x / y</td><td>x 를 y 로 나누고, 나눈값을, 왼쪽의 x 에 할당</td></tr><tr><td>%=</td><td>x %= y</td><td>x = x % y</td><td>x 를 y 로 나눈 나머지값을, 왼쪽의 x 에 할당</td></tr><tr><td>**=</td><td>x **= y</td><td>x = x ** y</td><td>x 를 y 승만큼 곱한다음, 왼쪽의 x 에 할당</td></tr><tr><td>//=</td><td>x //= y</td><td>x = x // y</td><td>x 를 y 로 나눈 몫(소수점 제외)을, 왼졲에 x 에 할당</td></tr></tbody></table><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Assignment Operators </span></span><br><span class="line"><span class="comment"># 할당 연산자</span></span><br><span class="line"><span class="comment"># 할당 연산을 할때마다, x 에 새로운 값이 할당되어 집니다. </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">12</span> </span><br><span class="line">y = <span class="number">18</span> </span><br><span class="line"></span><br><span class="line">x += y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x -= y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x *= y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x /= y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x %= y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x **= y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x //= y</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br><h2 id="Bitwise-Operators-비트-연산자"><a href="#Bitwise-Operators-비트-연산자" class="headerlink" title="Bitwise Operators (비트 연산자)"></a>Bitwise Operators (비트 연산자)</h2><br><p>비트 연산은 별로 다룰일이 없기때문에, operators 만 보고 넘어갑니다. </p><br><table><thead><tr><th>연산자</th><th>줄임</th><th>표현식</th><th>비고</th></tr></thead><tbody><tr><td>&amp;</td><td>And</td><td>x &amp; y</td><td></td></tr><tr><td>|</td><td>Or</td><td>x | y</td><td></td></tr><tr><td>^</td><td>Xor</td><td>x ^ y</td><td></td></tr><tr><td>~</td><td>Not</td><td>~x</td><td></td></tr><tr><td>&lt;&lt;</td><td>Shift Left</td><td>x &lt;&lt; y</td><td></td></tr><tr><td>&gt;&gt;</td><td>Shift right</td><td>x &gt;&gt; y</td><td></td></tr></tbody></table>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/29/Python-%EA%B8%B0%EC%B4%88-7%ED%8E%B8-Operators-%EC%97%B0%EC%82%B0%EC%9E%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python-기초-6편-Data-Type-튜플-리스트-사전</title>
      <link>http://djangojeng-e.github.io/2020/10/28/Python-%EA%B8%B0%EC%B4%88-6%ED%8E%B8-Data-Type-%ED%8A%9C%ED%94%8C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%82%AC%EC%A0%84/</link>
      <guid>http://djangojeng-e.github.io/2020/10/28/Python-%EA%B8%B0%EC%B4%88-6%ED%8E%B8-Data-Type-%ED%8A%9C%ED%94%8C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%82%AC%EC%A0%84/</guid>
      <pubDate>Wed, 28 Oct 2020 07:29:37 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-Data-Type&quot;&gt;&lt;a href=&quot;#Python-Data-Type&quot; class=&quot;headerlink&quot; title=&quot;Python Data Type&quot;&gt;&lt;/a&gt;Python Data Type&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;데이터 타입 &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;데이터 타입은, 값의 종류를 결정하고, 어떤식으로 값이 사용될지에 대해 결정합니다. 파이썬에 모든 데이터 값들은, 연관되어 있는 객체 클래스로 캡슐화 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬 데이터 타입들은, 아래와 같은 종류들이 존재합니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;데이터 타입&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;비고&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;숫자형 (Numbers)&lt;/td&gt;
&lt;td&gt;숫자로 생성된 객체로, immutable 합니다. 3가지 수의 타입이 존재합니다. 1. 정수 (integer)2. 실수 (float)3. 복소수 (complex)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;불리언 (Boolean)&lt;/td&gt;
&lt;td&gt;파이썬에서 가장 간단한 내장 타입으로, True 와 False 를 표현합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;문자열 (string)&lt;/td&gt;
&lt;td&gt;파이썬에서, 문자열 객체는 왼쪽에서부터 오른쪽으로 방향으로 순서가 있는 객체 입니다. 이를, sequence 라고 표현합니다. 문자열은, ‘ 혹은 “ 으로 감싸지는 데이터 입니다. 문자열은 immutable 합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;튜플 (Tuples)&lt;/td&gt;
&lt;td&gt;튜플은 () 안에 , 로 분리된 값들 입니다튜플은 immutable 하고, 여러 데이터 타입을 가지고 있을수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;리스트 (Lists)&lt;/td&gt;
&lt;td&gt;리스트는 [] 안에 , 로 분리된 값들 입니다. 아무런 원소도 가지고 있지 않은 리스트를 빈 리스트라고 부릅니다. 리스트는 mutable 합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;집합 (Sets)&lt;/td&gt;
&lt;td&gt;집합은 순서가 없는 고유한 원소들의 집합입니다. 기본 사용은, 교집합, 합집합, 차집합, 합집합 같은 집합 이론을 다루거나, 혹은, 중복된 것들을 없애기 위해 사용할수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;사전 (Dictionaries)&lt;/td&gt;
&lt;td&gt;파이썬 사전은, 리스트같이 순서가 없는 객체들의 집합의 컨테이너 입니다. 객체는 {} 로 감싸져 있고. key : value 형태로, 한 쌍으로 존재합니다. 각 객체 혹은 값은, key 값으로 접근이 가능하고, key 값들은 사전안에서 고유합니다. key 가 인덱싱을 할때 사용되므로, 이 key 는 immutable 타입이여야 합니다 (문자열, 숫자 혹은 튜플).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;하나의 값을 가지고 있는 타입으로, 내장 예약어 None 으로 접근이 가능합니다. 값이 없는것을 여러 상황에서 강조하기 위해서 사용됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;

&lt;p&gt;지난 포스팅에서는, 문자열까지 알아보았고. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이번 포스팅에서는, 튜플, 리스트, 집합, 사전, None 까지 알아봅니다 &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Data-Type"><a href="#Python-Data-Type" class="headerlink" title="Python Data Type"></a>Python Data Type</h2><br><p>데이터 타입 </p><br><p>데이터 타입은, 값의 종류를 결정하고, 어떤식으로 값이 사용될지에 대해 결정합니다. 파이썬에 모든 데이터 값들은, 연관되어 있는 객체 클래스로 캡슐화 됩니다. </p><br><p>파이썬 데이터 타입들은, 아래와 같은 종류들이 존재합니다. </p><br><table><thead><tr><th><strong>데이터 타입</strong></th><th><strong>비고</strong></th></tr></thead><tbody><tr><td>숫자형 (Numbers)</td><td>숫자로 생성된 객체로, immutable 합니다. 3가지 수의 타입이 존재합니다. 1. 정수 (integer)2. 실수 (float)3. 복소수 (complex)</td></tr><tr><td>불리언 (Boolean)</td><td>파이썬에서 가장 간단한 내장 타입으로, True 와 False 를 표현합니다.</td></tr><tr><td>문자열 (string)</td><td>파이썬에서, 문자열 객체는 왼쪽에서부터 오른쪽으로 방향으로 순서가 있는 객체 입니다. 이를, sequence 라고 표현합니다. 문자열은, ‘ 혹은 “ 으로 감싸지는 데이터 입니다. 문자열은 immutable 합니다</td></tr><tr><td>튜플 (Tuples)</td><td>튜플은 () 안에 , 로 분리된 값들 입니다튜플은 immutable 하고, 여러 데이터 타입을 가지고 있을수 있습니다.</td></tr><tr><td>리스트 (Lists)</td><td>리스트는 [] 안에 , 로 분리된 값들 입니다. 아무런 원소도 가지고 있지 않은 리스트를 빈 리스트라고 부릅니다. 리스트는 mutable 합니다</td></tr><tr><td>집합 (Sets)</td><td>집합은 순서가 없는 고유한 원소들의 집합입니다. 기본 사용은, 교집합, 합집합, 차집합, 합집합 같은 집합 이론을 다루거나, 혹은, 중복된 것들을 없애기 위해 사용할수 있습니다.</td></tr><tr><td>사전 (Dictionaries)</td><td>파이썬 사전은, 리스트같이 순서가 없는 객체들의 집합의 컨테이너 입니다. 객체는 {} 로 감싸져 있고. key : value 형태로, 한 쌍으로 존재합니다. 각 객체 혹은 값은, key 값으로 접근이 가능하고, key 값들은 사전안에서 고유합니다. key 가 인덱싱을 할때 사용되므로, 이 key 는 immutable 타입이여야 합니다 (문자열, 숫자 혹은 튜플).</td></tr><tr><td>None</td><td>하나의 값을 가지고 있는 타입으로, 내장 예약어 None 으로 접근이 가능합니다. 값이 없는것을 여러 상황에서 강조하기 위해서 사용됩니다.</td></tr></tbody></table><br><p>지난 포스팅에서는, 문자열까지 알아보았고. </p><p><br>이번 포스팅에서는, 튜플, 리스트, 집합, 사전, None 까지 알아봅니다 </p><br><a id="more"></a><br><h2 id="Tuples-튜플"><a href="#Tuples-튜플" class="headerlink" title="Tuples (튜플)"></a>Tuples (튜플)</h2><br><p>튜플은,  <code>,</code> 로 분리된 값 (항목 혹은 요소)를 <code>()</code> 안에 가지고 있는 자료형 입니다.</p><p>튜플은 immutable 합니다. (한번 생성되면, 그 안의 값을 바꿀수가 없습니다.)<br> 그리고, 튜플은, 여러 데이터 타입을 가질수 있습니다. </p><br><h3 id="튜플-생성하기"><a href="#튜플-생성하기" class="headerlink" title="튜플 생성하기"></a>튜플 생성하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 튜플 생성하기 </span></span><br><span class="line"><span class="comment"># 정수, 실수, 문자열을 가진 튜플을 생성 </span></span><br><span class="line"><span class="comment"># () 안에 데이터를 , 로 분리하고 변수에 할당하면 생성됩니다. </span></span><br><span class="line"></span><br><span class="line">tup = (<span class="number">0</span>, <span class="number">-1</span>, <span class="number">12</span>, <span class="number">2123.44</span>, <span class="number">100</span>, <span class="string">'Django'</span>)</span><br><span class="line">print(tup)</span><br><span class="line">print(type(tup))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열 3개, 숫자 1개로 이루어진 튜플 생성 </span></span><br><span class="line"></span><br><span class="line">tup2 = (<span class="string">'python'</span>, <span class="string">'Django'</span>, <span class="number">200</span>, <span class="string">'GoLang'</span>)</span><br><span class="line">print(tup2)</span><br><span class="line">print(type(tup2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># () 를 사용하지 않고 생성하는 방법 </span></span><br><span class="line">tup3 = <span class="string">"Django"</span>, <span class="string">"Python"</span>, <span class="string">"JavaScript"</span></span><br><span class="line">print(tup3)</span><br><span class="line">print(type(tup3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 비어있는 튜플을 생성하기 </span></span><br><span class="line">empty_tup = () </span><br><span class="line">print(empty_tup)</span><br><span class="line">print(type(empty_tup))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1개의 데이터만 가진 튜플 생성하기 </span></span><br><span class="line">single_tup = (<span class="number">100</span>)</span><br><span class="line">print(single_tup)</span><br><span class="line">print(type(single_tup))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 값이 한개일때, 요소의 끝에 , 를 붙여줘야 1개의 값을 가진 튜플이 생성됩니다. </span></span><br><span class="line">single_tup = (<span class="number">100</span>,)</span><br><span class="line">print(single_tup)</span><br><span class="line">print(type(single_tup))</span><br></pre></td></tr></table></figure><br><h3 id="튜플-인덱싱-하기"><a href="#튜플-인덱싱-하기" class="headerlink" title="튜플 인덱싱 하기"></a>튜플 인덱싱 하기</h3><br><p>문자열이랑 비슷하게도, 튜플 요소들도 인덱스를 통해 접근할수 있습니다. 예를들면, <code>tup=(&#39;d&#39;, &#39;j&#39;, &#39;a&#39;, &#39;n&#39;, &#39;g&#39;, &#39;o&#39;)</code> 라는 튜플을 생성하였을때 생성되는 인덱스는 아래와 같습니다. </p><br><table><thead><tr><th><strong>데이터</strong></th><th>D</th><th>j</th><th>a</th><th>n</th><th>g</th><th>o</th></tr></thead><tbody><tr><td>인덱스(왼쪽)</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>인덱스(오른쪽)</td><td>-6</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><br><p>이러한 인덱스를 통해서, 각 요소에 접근을 해보기 위해, 아래 예시를 참조합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>)</span><br><span class="line"></span><br><span class="line">print(tup[<span class="number">0</span>])</span><br><span class="line">print(tup[<span class="number">1</span>])</span><br><span class="line">print(tup[<span class="number">2</span>])</span><br><span class="line">print(tup[<span class="number">3</span>])</span><br><span class="line">print(tup[<span class="number">4</span>])</span><br><span class="line">print(tup[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(tup[<span class="number">-1</span>])</span><br><span class="line">print(tup[<span class="number">-2</span>])</span><br><span class="line">print(tup[<span class="number">-3</span>])</span><br><span class="line">print(tup[<span class="number">-4</span>])</span><br><span class="line">print(tup[<span class="number">-5</span>])</span><br><span class="line">print(tup[<span class="number">-6</span>])</span><br></pre></td></tr></table></figure><br><blockquote><p>Tuple 은 immutable 합니다. </p><p>튜플 안에 항목이나 요소들의 값은 바뀌거나 수정될수 없습니다. </p></blockquote><br><p>튜플 안에 있는 값을 바꾸려고 하면, 아래와 같이 에러가 납니다.</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple 은 immutable 합니다. </span></span><br><span class="line"><span class="comment"># 값을 바꿀수 없습니다. 값을 바꾸려 하면, 에러가 납니다. </span></span><br><span class="line"></span><br><span class="line">tup = (<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>)</span><br><span class="line">tup[<span class="number">1</span>] = <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-13</span><span class="number">-253</span>c803b15bb&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">3</span> </span><br><span class="line">      <span class="number">4</span> tup = (<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>)</span><br><span class="line">----&gt; 5 tup[1] = 'b'</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><br><p>또한, 인덱스 범위를 넘어가는 요소를 접근하려 하면, index error 가 발생 합니다. </p><br><h3 id="튜플-슬라이싱-하기"><a href="#튜플-슬라이싱-하기" class="headerlink" title="튜플 슬라이싱 하기"></a>튜플 슬라이싱 하기</h3><br><p>문자열과 같은 시퀀스와 비슷하게, 튜플도 슬라이스가 가능합니다. </p><br><p>튜플을 슬라이싱 하면, 새로운 튜플을 생성하지만, 기존 값을 변경하지는 않습니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 튜플 슬라이싱 하기 </span></span><br><span class="line"></span><br><span class="line">tup = (<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>)</span><br><span class="line"></span><br><span class="line">print(tup[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">print(tup[<span class="number">2</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><br><h3 id="튜플에서-같은-연산자-사용하기"><a href="#튜플에서-같은-연산자-사용하기" class="headerlink" title="튜플에서 +, * 같은 연산자 사용하기"></a>튜플에서 <code>+</code>, <code>*</code> 같은 연산자 사용하기</h3><br><p><code>+</code> 연산자를 사용하여, 튜플들을 합친, 새로운 튜플을 생성하고, <code>*</code> 연산자를 사용하여, 하나의 튜플을 반복할수 있습니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># +, * 연산자 사용하기 </span></span><br><span class="line"></span><br><span class="line">tup = (<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>)</span><br><span class="line"></span><br><span class="line">tup1 = (<span class="string">'p'</span>, <span class="string">'y'</span>, <span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>)</span><br><span class="line"></span><br><span class="line">add_tuples = tup + tup1  <span class="comment"># tup 과 tup1 을 합친 새로운 튜플을 생성합니다. </span></span><br><span class="line">print(add_tuples)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tup 을 *을 사용하여 반복합니다 </span></span><br><span class="line">print(tup * <span class="number">4</span>)</span><br></pre></td></tr></table></figure><br><br><h2 id="Lists-리스트"><a href="#Lists-리스트" class="headerlink" title="Lists (리스트)"></a>Lists (리스트)</h2><br><p>리스트는, <code>,</code> 로 분리된 값을 <code>[]</code> 안에 가지고 있는 자료형 입니다. 튜플과 비슷하게, 리스트 안의 요소들은 같은 데이터 타입을 가질 필요는 없습니다. </p><br><h3 id="리스트-생성하기"><a href="#리스트-생성하기" class="headerlink" title="리스트 생성하기"></a>리스트 생성하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트 생성하기 </span></span><br><span class="line"><span class="comment"># , 로 분리된 값들을 [] 안에 넣어주면 생성됩니다. </span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list2 = [<span class="string">'django'</span>, <span class="string">'python'</span>, <span class="string">'javascript'</span>, <span class="string">'GoLang'</span>]</span><br><span class="line">list3 = [<span class="number">12</span>, <span class="string">'developer'</span>, <span class="number">32.33</span>]</span><br><span class="line"></span><br><span class="line">print(list1)</span><br><span class="line">print(list2)</span><br><span class="line">print(list3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 비어 있는 리스트를 생성</span></span><br><span class="line"><span class="comment"># [] 안에 아무 값도 넣어주지 않으면 비어있는 리스트가 생성됩니다 </span></span><br><span class="line">empty_list = []</span><br><span class="line">print(empty_list)</span><br></pre></td></tr></table></figure><br><br><h3 id="리스트-인덱싱-하기"><a href="#리스트-인덱싱-하기" class="headerlink" title="리스트 인덱싱 하기"></a>리스트 인덱싱 하기</h3><br><p>문자열과 비슷하게, 리스트도 순회 가능한, 그리고 인덱싱이 가능한 자료형입니다. 리스트 인덱스도 왼쪽에서 오른쪽으로 갈때 0으로부터 시작하고, 오른쪽에서 왼쪽으로 갈때는, -1 로 시작합니다. </p><br><p>예를들면, </p><br><p><code>list1 = [&#39;d&#39;, &#39;j&#39;, &#39;a&#39;, &#39;n&#39;, &#39;g&#39;, &#39;o&#39;]</code> 라는 리스트를 생성하였을때에 인덱스는 아래와 같습니다. </p><br><table><thead><tr><th><strong>데이터</strong></th><th>D</th><th>j</th><th>a</th><th>n</th><th>g</th><th>o</th></tr></thead><tbody><tr><td>인덱스(왼쪽)</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>인덱스(오른쪽)</td><td>-6</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트 슬라이싱 하기 </span></span><br><span class="line"></span><br><span class="line">list1 = [<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>]</span><br><span class="line">print(list1[<span class="number">0</span>])</span><br><span class="line">print(list1[<span class="number">1</span>])</span><br><span class="line">print(list1[<span class="number">2</span>])</span><br><span class="line">print(list1[<span class="number">3</span>])</span><br><span class="line">print(list1[<span class="number">4</span>])</span><br><span class="line">print(list1[<span class="number">5</span>])</span><br><span class="line">print()</span><br><span class="line">print(list1[<span class="number">-1</span>])</span><br><span class="line">print(list1[<span class="number">-2</span>])</span><br><span class="line">print(list1[<span class="number">-3</span>])</span><br><span class="line">print(list1[<span class="number">-4</span>])</span><br><span class="line">print(list1[<span class="number">-5</span>])</span><br><span class="line">print(list1[<span class="number">-6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열이나 튜플과 비슷하게, 인덱스값을 벗어난 요소를 접근하려 하면 </span></span><br><span class="line"><span class="comment"># 에러가 발생합니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(list1[<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IndexError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-22</span><span class="number">-3034</span>fc2e792a&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 print(list1[6])</span><br><span class="line"></span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><br><h3 id="리스트-슬라이싱-하기"><a href="#리스트-슬라이싱-하기" class="headerlink" title="리스트 슬라이싱 하기"></a>리스트 슬라이싱 하기</h3><br><p>다른 시퀀스형 자료와 비슷하게, 리스트도 슬라이싱이 가능합니다. 튜플이나 문자열을 슬라이싱 하는 방법과 같다고 볼수 있습니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트 슬라이싱 </span></span><br><span class="line"></span><br><span class="line">list1 = [<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>]</span><br><span class="line">print(list1[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">print(list1[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line">print(list1[<span class="number">1</span>:<span class="number">-2</span>])</span><br></pre></td></tr></table></figure><br><blockquote><p>리스트는 튜플과 다르게,  mutable 객체 입니다! </p><p>리스트는 생성후에, 값을 변경할수 있습니다. </p></blockquote><br><h3 id="리스트의-값-바꿔보기"><a href="#리스트의-값-바꿔보기" class="headerlink" title="리스트의 값 바꿔보기"></a>리스트의 값 바꿔보기</h3><br><p>리스트의 값을 바꿔보는 예시는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트는 mutable 합니다 </span></span><br><span class="line"></span><br><span class="line">list1 = [<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>]</span><br><span class="line"></span><br><span class="line">list1[<span class="number">1</span>] = <span class="string">'b'</span> <span class="comment"># 인덱스 1에 해당하는 값을 'b'로 바꿈 </span></span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">list1[<span class="number">5</span>] = <span class="string">'u'</span> <span class="comment"># 인덱스 5에 해당하는 값을 'u' 로 바꿈 </span></span><br><span class="line"></span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><br><h3 id="리스트에-와-연산자-사용하기"><a href="#리스트에-와-연산자-사용하기" class="headerlink" title="리스트에 + 와 * 연산자 사용하기"></a>리스트에 <code>+</code> 와 <code>*</code> 연산자 사용하기</h3><br><p>두개의 리스트를 합친 새로운 리스트를 생성하는 <code>+</code> 연산자와, 하나의 리스트를 여러번 반복하는 <code>*</code>를 사용할수 있습니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>]</span><br><span class="line">list2 = [<span class="number">12</span>, <span class="string">'developer'</span>, <span class="number">32.33</span>]</span><br><span class="line">list3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">list_sum = list1 + list2 <span class="comment"># + 연산자를 사용하여, list1 과 list2 를 합친 새로운 리스트를 생성 </span></span><br><span class="line">print(list_sum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># * 연산자를 사용하여, list3 을 4번 반복 </span></span><br><span class="line">print(list3 * <span class="number">4</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Sets-집합"><a href="#Sets-집합" class="headerlink" title="Sets (집합)"></a>Sets (집합)</h2><br><p>집합은, 순서가 없는 고유한 요소들의 집합입니다. 기본 사용은 보통, 수학에서 이야기하는 집합 이론 (합집합, 교집합, 차집합, 합집합 같은 수학적 연산) 들을 다룰때 사용합니다.<br></p><p>혹은, 중복된 요소들을 제거할때에도 사용됩니다. </p><br><p>예시를 들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 중복된 값을 가진 리스트를 생성 </span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">s1 = set(a)  <span class="comment"># a를 집합으로 선언 </span></span><br><span class="line">s2 = set(b)  <span class="comment"># b를 집합으로 선언 </span></span><br><span class="line"></span><br><span class="line">print(s1)</span><br><span class="line">print(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 차집합 </span></span><br><span class="line">print(s1 - s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s1 혹은 s2 에 있는 숫자들 </span></span><br><span class="line">print(s1 | s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s1 그리고 s2 에 있는 숫자들 </span></span><br><span class="line">print(s1 &amp; s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s1 과 s2 에 있지만, 양쪽에 없는 숫자들 </span></span><br><span class="line">print(s1 ^ s2)</span><br></pre></td></tr></table></figure><br><h2 id="Dictionaries-사전"><a href="#Dictionaries-사전" class="headerlink" title="Dictionaries (사전)"></a>Dictionaries (사전)</h2><br><p>파이썬 사전은 순서가 없는 객체들의 집합을 <code>{}</code> 안에 가지고 있는 자료형입니다. </p><p><br>특이한 점은, 사전 안에는, key:value 형태로, 값들이 한쌍으로 이루어져 있다는 점입니다. </p><br><p>이 key 값들은 고유해야 하고,사전을 인덱싱 할때에는, 이 key 값들이 사용됩니다. 간단한 사전을 만들어서 예시를 들어보면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사전 생성하기 </span></span><br><span class="line"><span class="comment"># &#123;&#125; 안에, key:value 형태로 이루어진 자료를 , 로 구분하여 넣어주면 생성됩니다. </span></span><br><span class="line">web_framework = &#123;<span class="string">'python'</span>: <span class="string">'django'</span>, <span class="string">'Java'</span>: <span class="string">'spring'</span>, <span class="string">'JavaScript'</span>: <span class="string">'nodejs'</span>&#125;</span><br><span class="line">print(web_framework)</span><br><span class="line">print(type(web_framework))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사전의 데이터를 key 값을 사용해서 접근하기 </span></span><br><span class="line"></span><br><span class="line">print(web_framework[<span class="string">'python'</span>])</span><br><span class="line">print(web_framework[<span class="string">'Java'</span>])</span><br><span class="line">print(web_framework[<span class="string">'JavaScript'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사전에 데이터를 추가하기 </span></span><br><span class="line">web_framework[<span class="string">'php'</span>] = <span class="string">'Laravel'</span></span><br><span class="line"></span><br><span class="line">print(web_framework)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사전에 데이터를 삭제하기 </span></span><br><span class="line"><span class="keyword">del</span> web_framework[<span class="string">'php'</span>]</span><br><span class="line"></span><br><span class="line">print(web_framework)</span><br></pre></td></tr></table></figure><br><h2 id="None"><a href="#None" class="headerlink" title="None"></a>None</h2><br><p>이 데이터 형태는 오직 하나의 값만 가지고 있습니다. </p><p><br>내장되어 있는 이름 None 을 통해서 값에 접근할수 있습니다. None 은 여러 상황에서, 값이 없다는것을 강조하기 위해 사용 됩니다. 예를들면, 아무것도 반환하지 않는 함수에서 반환 됩니다. </p><br><p>None 의 불리언 값은 False 를 가집니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># None </span></span><br><span class="line"></span><br><span class="line">print(<span class="literal">None</span>)</span><br><span class="line">print(type(<span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아무값도 반환하지 않는 함수는 None 을 반환합니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">print(fun())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># None 의 불리언값은 False 입니다. </span></span><br><span class="line">print(bool(<span class="literal">None</span>))</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/28/Python-%EA%B8%B0%EC%B4%88-6%ED%8E%B8-Data-Type-%ED%8A%9C%ED%94%8C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%82%AC%EC%A0%84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 5편 - Data Type (숫자, 문자열, 불리언)</title>
      <link>http://djangojeng-e.github.io/2020/10/27/Python-%EA%B8%B0%EC%B4%88-5%ED%8E%B8-Data-Type-%EC%88%AB%EC%9E%90-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B6%88%EB%A6%AC%EC%96%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/10/27/Python-%EA%B8%B0%EC%B4%88-5%ED%8E%B8-Data-Type-%EC%88%AB%EC%9E%90-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B6%88%EB%A6%AC%EC%96%B8/</guid>
      <pubDate>Tue, 27 Oct 2020 00:50:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Data-Type&quot;&gt;&lt;a href=&quot;#Data-Type&quot; class=&quot;headerlink&quot; title=&quot;Data Type&quot;&gt;&lt;/a&gt;Data Type&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;데이터 타입&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;데이터 타입은, 값의 종류와 어떤식으로 값이 사용될지에 대해 결정합니다. &lt;/p&gt;
&lt;p&gt;파이썬에 모든 데이터 값들은, 연관되어 있는 객체 클래스로 캡슐화 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;파이썬에서 모든것은 객체 입니다. &lt;/p&gt;
&lt;p&gt;각 객체는 하나의 정체성을 가지고, 하나의 타입을 가지고, 하나의 값을 가집니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;c++ 나 Java 같은 다른 객체 지향 언어처럼, 파이썬에도 몇가지 데이터 타입이 내장되어 있습니다. &lt;/p&gt;
&lt;p&gt;C언어나, Java 로 작성된 확장 모듈을 사용하면, 추가 데이터 타입을 정의할수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬에서 변수의 타입을 정하기 위해서는, &lt;code&gt;type()&lt;/code&gt; 함수를 사용할수 있습니다. 객체의 값은 바뀔수도 이습니다. &lt;/p&gt;
&lt;br&gt;

&lt;h3 id=&quot;mutable-vs-immutable&quot;&gt;&lt;a href=&quot;#mutable-vs-immutable&quot; class=&quot;headerlink&quot; title=&quot;mutable vs immutable&quot;&gt;&lt;/a&gt;mutable vs immutable&lt;/h3&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;mutable (가변) 객체&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;값이 바뀔수 있는 객체들을, mutable (가변) 객체라고 부르고, &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;strong&gt;immutable (불변) 객체&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;값이 바뀔수 없는 객체들을 immutable (불가변) 객체라고 부릅니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;



&lt;br&gt;

&lt;h2 id=&quot;파이썬-데이터-종류&quot;&gt;&lt;a href=&quot;#파이썬-데이터-종류&quot; class=&quot;headerlink&quot; title=&quot;파이썬 데이터 종류&quot;&gt;&lt;/a&gt;파이썬 데이터 종류&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬에는, 아래와 같은 데이터 종류들이 존재합니다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;숫자형 (Numbers)&lt;/li&gt;
&lt;li&gt;불리언 (Boolean)&lt;/li&gt;
&lt;li&gt;문자열 (string)&lt;/li&gt;
&lt;li&gt;튜플 (Tuple)&lt;/li&gt;
&lt;li&gt;리스트 (List)&lt;/li&gt;
&lt;li&gt;집합 (Sets)&lt;/li&gt;
&lt;li&gt;사전 (Dictionary)&lt;/li&gt;
&lt;li&gt;None &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h2><br><blockquote><p><strong>데이터 타입</strong></p><p>데이터 타입은, 값의 종류와 어떤식으로 값이 사용될지에 대해 결정합니다. </p><p>파이썬에 모든 데이터 값들은, 연관되어 있는 객체 클래스로 캡슐화 됩니다. </p></blockquote><br><blockquote><p>파이썬에서 모든것은 객체 입니다. </p><p>각 객체는 하나의 정체성을 가지고, 하나의 타입을 가지고, 하나의 값을 가집니다. </p></blockquote><br><p>c++ 나 Java 같은 다른 객체 지향 언어처럼, 파이썬에도 몇가지 데이터 타입이 내장되어 있습니다. </p><p>C언어나, Java 로 작성된 확장 모듈을 사용하면, 추가 데이터 타입을 정의할수 있습니다. </p><br><p>파이썬에서 변수의 타입을 정하기 위해서는, <code>type()</code> 함수를 사용할수 있습니다. 객체의 값은 바뀔수도 이습니다. </p><br><h3 id="mutable-vs-immutable"><a href="#mutable-vs-immutable" class="headerlink" title="mutable vs immutable"></a>mutable vs immutable</h3><br><blockquote><p><strong>mutable (가변) 객체</strong></p><p>값이 바뀔수 있는 객체들을, mutable (가변) 객체라고 부르고, </p><br><p><strong>immutable (불변) 객체</strong></p><p>값이 바뀔수 없는 객체들을 immutable (불가변) 객체라고 부릅니다. </p></blockquote><br><br><h2 id="파이썬-데이터-종류"><a href="#파이썬-데이터-종류" class="headerlink" title="파이썬 데이터 종류"></a>파이썬 데이터 종류</h2><br><p>파이썬에는, 아래와 같은 데이터 종류들이 존재합니다. <br></p><br><ol><li>숫자형 (Numbers)</li><li>불리언 (Boolean)</li><li>문자열 (string)</li><li>튜플 (Tuple)</li><li>리스트 (List)</li><li>집합 (Sets)</li><li>사전 (Dictionary)</li><li>None </li></ol><br><a id="more"></a><p>﻿</p><table><thead><tr><th><strong>데이터 타입</strong></th><th><strong>비고</strong></th></tr></thead><tbody><tr><td>숫자형 (Numbers)</td><td>숫자로 생성된 객체로, immutable 합니다.3가지 수의 타입이 존재합니다.1. 정수 (integer)2. 실수 (float)3. 복소수 (complex)</td></tr><tr><td>불리언 (Boolean)</td><td>파이썬에서 가장 간단한 내장 타입으로, True 와 False 를 표현합니다.</td></tr><tr><td>문자열 (string)</td><td>파이썬에서, 문자열 객체는 왼쪽에서부터 오른쪽으로 방향으로 순서가 있는 객체 입니다. 이를, sequence 라고 표현합니다.문자열은, ‘ 혹은 “ 으로 감싸지는 데이터 입니다.문자열은 immutable 합니다</td></tr><tr><td>튜플 (Tuples)</td><td>튜플은 () 안에 , 로 분리된 값들 입니다튜플은 immutable 하고, 여러 데이터 타입을 가지고 있을수 있습니다.</td></tr><tr><td>리스트 (Lists)</td><td>리스트는 [] 안에 , 로 분리된 값들 입니다.아무런 원소도 가지고 있지 않은 리스트를 빈 리스트라고 부릅니다.리스트는 mutable 합니다</td></tr><tr><td>집합 (Sets)</td><td>집합은 순서가 없는 고유한 원소들의 집합입니다.기본 사용은, 교집합, 합집합, 차집합, 합집합 같은 집합 이론을 다루거나,혹은, 중복된 것들을 없애기 위해 사용할수 있습니다.</td></tr><tr><td>사전 (Dictionaries)</td><td>파이썬 사전은, 리스트같이 순서가 없는 객체들의 집합의 컨테이너 입니다.객체는 {} 로 감싸져 있고. key : value 형태로, 한 쌍으로 존재합니다.각 객체 혹은 값은, key 값으로 접근이 가능하고, key 값들은 사전안에서 고유합니다. key 가 인덱싱을 할때 사용되므로, 이 key 는 immutable 타입이여야 합니다 (문자열, 숫자 혹은 튜플).</td></tr><tr><td>None</td><td>하나의 값을 가지고 있는 타입으로, 내장 예약어 None 으로 접근이 가능합니다. 값이 없는것을 여러 상황에서 강조하기 위해서 사용됩니다.</td></tr></tbody></table><br><br><h2 id="Numbers-숫자"><a href="#Numbers-숫자" class="headerlink" title="Numbers (숫자)"></a>Numbers (숫자)</h2><br><p>숫자 데이터 타입은, 숫자로 생성됩니다. 숫자형 객체들은 immutable 합니다. </p><p><br>immutable 객체는 값과 함께 생성되었을때에, 값은 바뀔수 없다는것을 의미합니다. </p><br><p>파이썬에는, 3가지 다른 형태의 숫자형이 존재합니다. </p><br><ol><li>integers (정수) - 분수 부분이 존재하지 않는, 음수와 양수 입니다 </li><li>floating point (실수) - 분수 부분이 존재하는 음수와 양수로, 분수 부분은 소숫점으로 나타납니다 </li><li>complex (복소수)</li></ol><br><h3 id="정수에-대한-예시"><a href="#정수에-대한-예시" class="headerlink" title="정수에 대한 예시"></a>정수에 대한 예시</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자형, 정수, integers </span></span><br><span class="line">a = <span class="number">1218</span></span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line"></span><br><span class="line">b = <span class="number">-4212</span></span><br><span class="line">print(type(b))</span><br><span class="line"></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line">print(type(c))</span><br></pre></td></tr></table></figure><br><h3 id="실수에-대한-예시"><a href="#실수에-대한-예시" class="headerlink" title="실수에 대한 예시"></a>실수에 대한 예시</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자형, 실수, float </span></span><br><span class="line"></span><br><span class="line">g = <span class="number">1.05</span> </span><br><span class="line">print(type(g))</span><br><span class="line"></span><br><span class="line">h = <span class="number">-11.23</span> </span><br><span class="line">print(type(h))</span><br><span class="line"></span><br><span class="line">i = <span class="number">-0.34</span> </span><br><span class="line"></span><br><span class="line">print(i)</span><br><span class="line">print(type(i))</span><br><span class="line"></span><br><span class="line">j = <span class="number">2.12e-10</span></span><br><span class="line"></span><br><span class="line">print(j)</span><br><span class="line">print(type(j))</span><br><span class="line"></span><br><span class="line">k = <span class="number">5E220</span></span><br><span class="line">print(k)</span><br><span class="line">print(type(k))</span><br></pre></td></tr></table></figure><br><h3 id="정수와-실수-숫자-데이터의-연산"><a href="#정수와-실수-숫자-데이터의-연산" class="headerlink" title="정수와 실수 숫자 데이터의 연산"></a>정수와 실수 숫자 데이터의 연산</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자형 데이터의 연산 예시 </span></span><br><span class="line"><span class="comment"># 실수와 정수 </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">8</span> </span><br><span class="line">y = <span class="number">7</span> </span><br><span class="line"></span><br><span class="line">print(x + y)</span><br><span class="line">print(x - y)</span><br><span class="line">print(x / y)</span><br><span class="line">print(x * y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 지수 exponentials </span></span><br><span class="line">x = <span class="number">4</span> ** <span class="number">3</span> </span><br><span class="line">y = <span class="number">3</span> ** <span class="number">4</span> </span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나누기 division </span></span><br><span class="line"><span class="comment"># // </span></span><br><span class="line">print(<span class="number">12</span> / <span class="number">3</span>)</span><br><span class="line">print(<span class="number">64</span> // <span class="number">4</span>)</span><br><span class="line">print(<span class="number">15</span> // <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나머지값 remainder </span></span><br><span class="line"><span class="comment"># % </span></span><br><span class="line">print(<span class="number">15</span>%<span class="number">4</span>)</span><br></pre></td></tr></table></figure><br><br><h3 id="복소수-Complex-Number"><a href="#복소수-Complex-Number" class="headerlink" title="복소수 (Complex Number)"></a>복소수 (Complex Number)</h3><br><p>수학적으로, 하나의 복소수 (주로 공학에서 사용되는 수)는 하나의 숫자가 A + Bi 의 형태로 되어 있고, A 는 real 파트, Bi 는 imaginery 파트를 의미 합니다.<br><br></p><blockquote><p>파이썬은 이런 복소수들에 대한 것도 지원합니다 </p><p>아래 두가지 형태를 사용하거나, </p><ul><li>(real + imagJ)</li><li>(real + imagj)</li></ul><p>혹은, 내장 함수인, complex(x, y) 를 사용하여 지정할수 있습니다 </p></blockquote><br><p>복소수의 예시 </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 복소수 complex </span></span><br><span class="line"></span><br><span class="line">x = complex(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">print(type(x))</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">z = <span class="number">1</span> + <span class="number">2j</span> </span><br><span class="line">print(z)</span><br><span class="line">print(type(z))</span><br><span class="line"></span><br><span class="line">z = <span class="number">1</span> + <span class="number">3J</span> </span><br><span class="line">print(z)</span><br><span class="line">print(type(z))</span><br></pre></td></tr></table></figure><br><h2 id="Boolean-bool"><a href="#Boolean-bool" class="headerlink" title="Boolean (bool)"></a>Boolean (bool)</h2><br><p>파이썬에서 가장 간단한 내장 타입으로, True 와 False (참과 거짓) 을 표현하는 데이터 형식입니다. 불리언의 예시는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="literal">True</span> </span><br><span class="line">print(type(x))</span><br><span class="line"></span><br><span class="line">y = <span class="literal">False</span></span><br><span class="line">print(type(y))</span><br></pre></td></tr></table></figure><br><h2 id="Strings-문자열"><a href="#Strings-문자열" class="headerlink" title="Strings (문자열)"></a>Strings (문자열)</h2><br><p>파이썬에서 문자열 객체는 하나의 sequence, 왼쪽에서부터 오른쪽 방향으로 순서가 있는 문자들입니다. </p><p>‘’ 혹은, “” 으로 감싸지는 문자 데이터이고, immutable 합니다. </p><br><p>문자열을 선언하는것은 굉장히 간단합니다. 아래 예시를 들어봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "" 쌍따옴표로 감싸진 문자열 txt </span></span><br><span class="line">txt1 = <span class="string">"Django"</span></span><br><span class="line">print(txt1)</span><br><span class="line">print(type(txt1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># '' 외따옴표로 감싸진 문자열 txt </span></span><br><span class="line">txt1 = <span class="string">'Django'</span></span><br><span class="line">print(txt1)</span><br><span class="line">print(type(txt1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># '''''' 혹은 """""" 로 감싸진 문자열 </span></span><br><span class="line"><span class="comment"># ' 3개 혹은 " 3개를 사용해서 감싸면, 다수의 줄을 가지는 문자열을 선언할수 있다. </span></span><br><span class="line">txt1 = <span class="string">'''Django'''</span></span><br><span class="line">print(txt1)</span><br><span class="line">print(type(txt1))</span><br><span class="line"></span><br><span class="line">txt1 = <span class="string">"""Django"""</span></span><br><span class="line">print(txt1)</span><br><span class="line">print(type(txt1))</span><br></pre></td></tr></table></figure><br><p>예시에서 볼수 있듯이, ‘’, “”, “”””””, ‘’’’’’ 는 모두 같은 효과를 냅니다. </p><br><p>또한, ‘,”‘ 혼용은 에러를 일으킵니다. 아래에는, 따옴표를 잘못 사용하여 나타나는 에러의 예시들입니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># " 로 시작하여, ' 로 끝납니다. </span></span><br><span class="line"><span class="comment"># 이는 에러를 발생 시킵니다. </span></span><br><span class="line"></span><br><span class="line">txt = <span class="string">"Django' </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># "</span><span class="string">" 안에 또다른 "</span> 를 가질수 없습니다 </span><br><span class="line"><span class="comment"># 이는 에러를 일으킵니다. </span></span><br><span class="line">txt = <span class="string">"Django day"</span>s great<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># '' 안에 또다른 '' 를 가질수 없습니다 </span></span><br><span class="line"><span class="string"># 이는 에러를 일으킵니다. </span></span><br><span class="line"><span class="string">txt = 'Django day's great'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># "</span><span class="string">" 안에 따옴표를 사용하려면 ' 를 사용하여 중복사용을 피해야 합니다. </span></span><br><span class="line"><span class="string">txt = "</span>Django<span class="string">'s day is great!"</span></span><br><span class="line"><span class="string">print(txt)</span></span><br><span class="line"><span class="string">print(type(txt))</span></span><br></pre></td></tr></table></figure><br><h4 id="문자열에서-특수-문자들"><a href="#문자열에서-특수-문자들" class="headerlink" title="문자열에서 특수 문자들"></a>문자열에서 특수 문자들</h4><br><blockquote><p>백슬레쉬 문자를 사용하여, 특수 문자를 사용할수도 있습니다. </p></blockquote><br><p>﻿</p><ol><li><p><code>\n</code> - 새로운줄</p></li><li><p><code>\t</code> - 탭</p></li><li><p><code>\\</code> - 백슬레쉬</p></li><li><p><code>\&#39;</code> - 외따옴표</p></li><li><p><code>\&quot;</code> - 쌍따옴표</p></li></ol><p>﻿</p><br><h4 id="문자열-인덱싱과-문자열-요소들"><a href="#문자열-인덱싱과-문자열-요소들" class="headerlink" title="문자열 인덱싱과 문자열 요소들"></a>문자열 인덱싱과 문자열 요소들</h4><br><p>문자열은, 문자들의 배열이고, 하나의 배열 요소는 인덱싱을 사용하여 접근 가능합니다. </p><br><blockquote><p>인덱스는 왼쪽에서 0 으로부터 시작하고 </p><p>오른쪽에서 -1 으로부터 시작합니다 </p></blockquote><br><p><code>text = &quot;Django&quot;</code> 라는 문자열이 있다고 가정하고, 이 문자열의 인덱스 번호들은 아래와 같이 표현될수 있습니다. </p><br><p>﻿</p><table><thead><tr><th><strong>문자</strong></th><th>D</th><th>j</th><th>a</th><th>n</th><th>g</th><th>o</th></tr></thead><tbody><tr><td>인덱스(왼쪽)</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>인덱스(오른쪽)</td><td>-6</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><p>﻿</p><br><p>위 테이블을 가지고 예시를 들어보면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 인덱싱 값을 사용하여, 문자열의 요소들을 접근할수 있습니다. </span></span><br><span class="line"></span><br><span class="line">text = <span class="string">'Django'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 왼쪽에서부터 시작했을경우 </span></span><br><span class="line">print(text[<span class="number">0</span>])</span><br><span class="line">print(text[<span class="number">1</span>])</span><br><span class="line">print(text[<span class="number">2</span>])</span><br><span class="line">print(text[<span class="number">3</span>])</span><br><span class="line">print(text[<span class="number">4</span>])</span><br><span class="line">print(text[<span class="number">5</span>])</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 오른쪽에서부터 시작할경우 </span></span><br><span class="line">print(text[<span class="number">-1</span>])</span><br><span class="line">print(text[<span class="number">-2</span>])</span><br><span class="line">print(text[<span class="number">-3</span>])</span><br><span class="line">print(text[<span class="number">-4</span>])</span><br><span class="line">print(text[<span class="number">-5</span>])</span><br><span class="line">print(text[<span class="number">-6</span>])</span><br></pre></td></tr></table></figure><br><blockquote><p>하지만, 인덱스 값을 벗어나서 접근하려 하면, 에러가 발생 합니다! </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 에러가 발생하는 케이스 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -7 번째 인덱스는 존재하지 않으므로, 에러를 발생 시킵니다 </span></span><br><span class="line">text = <span class="string">"Django"</span></span><br><span class="line">print(text[<span class="number">-7</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 번째 이후의 인덱스는 존재하지 않으므로, 에러를 발생 시킵니다 </span></span><br><span class="line">text = <span class="string">"Django"</span></span><br><span class="line">print(text[<span class="number">6</span>])</span><br></pre></td></tr></table></figure><br><br><h4 id="문자열은-immutable-불변"><a href="#문자열은-immutable-불변" class="headerlink" title="문자열은 immutable (불변)"></a>문자열은 immutable (불변)</h4><br><blockquote><p>문자열들은 immutable 합니다 </p><p>문자열의 요소들의 값은 변경될수 없습니다. 문자열 값들은 변경이 불가능 합니다 </p></blockquote><br><p>예시를 들자면, 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 문자열이 한번 생성되면, 문자열의 문자의 값은 바꿀수가 없습니다.</span></span><br><span class="line"><span class="comment"># immutable </span></span><br><span class="line"></span><br><span class="line">text = <span class="string">"Django"</span></span><br><span class="line">text[<span class="number">0</span>]</span><br><span class="line">text[<span class="number">0</span>] = <span class="string">"Z"</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-35</span><span class="number">-4320</span>dce556f8&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">1</span> text = <span class="string">"Django"</span></span><br><span class="line">      <span class="number">2</span> text[<span class="number">0</span>]</span><br><span class="line">----&gt; 3 text[0] = "Z"</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'str'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><br><h4 id="문자열에서-in-연산자"><a href="#문자열에서-in-연산자" class="headerlink" title="문자열에서 in 연산자"></a>문자열에서 <code>in</code> 연산자</h4><br><p>in 연산자는, 해당 문자가, 문자열 안에 존재하는지 확인할수 있게 해줍니다. 이 연산자는, 결과값으로 불리언 값을 반환합니다 (True 혹은 False)</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'Django'</span></span><br><span class="line">is_z_in = <span class="string">'z'</span> <span class="keyword">in</span> text </span><br><span class="line">print(is_z_in)        <span class="comment"># 'z' 는 Django 안에 존재하지 않으므로, False 를 반환</span></span><br><span class="line"></span><br><span class="line">is_D_in = <span class="string">'D'</span> <span class="keyword">in</span> text</span><br><span class="line">print(is_D_in)        <span class="comment"># 'D' 는 Django 안에 존재하므로, True 를 반환  </span></span><br><span class="line"></span><br><span class="line">is_word_in = <span class="string">'jango'</span> <span class="keyword">in</span> text </span><br><span class="line">print(is_word_in)    <span class="comment"># 'jango'는 Django 안에 존재하므로, True 를 반환</span></span><br></pre></td></tr></table></figure><br><h4 id="문자열-슬라이싱"><a href="#문자열-슬라이싱" class="headerlink" title="문자열 슬라이싱"></a>문자열 슬라이싱</h4><br><p>문자열로부터 문자들을, 빼고 잘라내는것을 슬라이싱 이라고 부릅니다. 두개의 인덱스 번호가 <code>:</code> 으로 분리가 되어져 사용됩니다. </p><br><blockquote><p>슬라이스 2:5 가 의미 하는 바는, </p><p>문자열의 2번째, 3번째, 4번째 요소를 잘라내는 것입니다 (5번째는 포함되지 않습니다)</p></blockquote><br><p>﻿</p><table><thead><tr><th><strong>문자</strong></th><th>D</th><th>j</th><th>a</th><th>n</th><th>g</th><th>o</th></tr></thead><tbody><tr><td>인덱스(왼쪽)</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>인덱스(오른쪽)</td><td>-6</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><br><p>문자열 슬라이싱 예시는 아래와 같습니다. <br></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"Django"</span></span><br><span class="line"></span><br><span class="line">print(text[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment"># 0, 1, 2 인덱스에 해당하는 문자들을 출력</span></span><br><span class="line">print(text[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment"># 2, 3, 4 인덱스에 해당하는 문자들을 출력 </span></span><br><span class="line"></span><br><span class="line">print(text[<span class="number">-4</span>:<span class="number">-1</span>])  <span class="comment"># -4, -3, -2 인덱스에 해당하는 문자들을 출력 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># text[-4:-1] 는 -1에서 1을 뺀 -2 인덱스까지 잘라냅니다</span></span><br></pre></td></tr></table></figure><br><h4 id="형태-변환"><a href="#형태-변환" class="headerlink" title="형태 변환"></a>형태 변환</h4><br><p>데이터 타입의 형태 변환은 가능합니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 문자열을 실수로 전환 </span></span><br><span class="line">print(float(<span class="string">"4.3"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열을 정수로 변환 </span></span><br><span class="line">print(int(<span class="string">"1218"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 실수를 정수로 변환 </span></span><br><span class="line">print(int(<span class="number">12.184</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># boolean 을 숫자로 표현, true 는 1, false 는 0 을 갖습니다. </span></span><br><span class="line">print(int(<span class="literal">True</span>))</span><br><span class="line">print(int(<span class="literal">False</span>))</span><br><span class="line">print(float(<span class="literal">True</span>))</span><br><span class="line">print(float(<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># boolean 을 문자로 표현 </span></span><br><span class="line">print(str(<span class="literal">True</span>))</span><br><span class="line">print(str(<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 숫자, 문자, 실수를 불리언으로 표현 </span></span><br><span class="line"><span class="comment"># 값이 있으면 True, 0 이거나 없으면 False 를 반환 </span></span><br><span class="line">print(bool())</span><br><span class="line">print(bool(<span class="number">0</span>))</span><br><span class="line">print(bool(<span class="string">'Hello world'</span>))</span><br><span class="line">print(bool(<span class="number">12.18</span>))</span><br></pre></td></tr></table></figure><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/27/Python-%EA%B8%B0%EC%B4%88-5%ED%8E%B8-Data-Type-%EC%88%AB%EC%9E%90-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B6%88%EB%A6%AC%EC%96%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 4편 - variables (변수)</title>
      <link>http://djangojeng-e.github.io/2020/10/26/Python-%EA%B8%B0%EC%B4%88-4%ED%8E%B8-variables-%EB%B3%80%EC%88%98/</link>
      <guid>http://djangojeng-e.github.io/2020/10/26/Python-%EA%B8%B0%EC%B4%88-4%ED%8E%B8-variables-%EB%B3%80%EC%88%98/</guid>
      <pubDate>Mon, 26 Oct 2020 08:33:06 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-Variables&quot;&gt;&lt;a href=&quot;#Python-Variables&quot; class=&quot;headerlink&quot; title=&quot;Python - Variables&quot;&gt;&lt;/a&gt;Python - Variables&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;변수와-값-Variables-and-Value&quot;&gt;&lt;a href=&quot;#변수와-값-Variables-and-Value&quot; class=&quot;headerlink&quot; title=&quot;변수와 값 (Variables and Value)&quot;&gt;&lt;/a&gt;변수와 값 (Variables and Value)&lt;/h3&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;변수 (Variables) 는, &lt;/p&gt;
&lt;p&gt;프로그래머가 값 (Value) 을 저장할수 있는 메모리 공간 입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;값은, 문자열 혹은 숫자열 혹은 기타 다른것들이 될수 있습니다 예) “django”, 118, 25.45 etc &lt;/li&gt;
&lt;li&gt;변수는 처음 할당 될때 생성됩니다 &lt;/li&gt;
&lt;li&gt;변수들은 참조되기 전에 할당이 되어 있어야 합니다. 할당 되지 않아 있는 변수를 참조하려 하면, 에러가 납니다&lt;/li&gt;
&lt;li&gt;변수안에 저장된 값은, 접근이 가능 하고, 혹은 나중에 업데이트 될수 있습니다 &lt;/li&gt;
&lt;li&gt;변수의 타입 (즉, 문자열, 정수, 실수 등)들은 파이썬에 의해 지정됩니다 &lt;/li&gt;
&lt;li&gt;파이썬 인터프리터는 변수의 데이터 타입을 기준으로 메모리를 할당 합니다. &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;h2 id=&quot;파이썬-변수-이름-규칙&quot;&gt;&lt;a href=&quot;#파이썬-변수-이름-규칙&quot; class=&quot;headerlink&quot; title=&quot;파이썬 변수 이름 규칙&quot;&gt;&lt;/a&gt;파이썬 변수 이름 규칙&lt;/h2&gt;&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;글자 (a-z, A-Z) 혹은 &lt;code&gt;_&lt;/code&gt; 언더스코어 로 시작 할수 있습니다 &lt;/li&gt;
&lt;li&gt;다른 문자들, 글자, 숫자 혹은 언더스코어가 될수 있습니다 &lt;/li&gt;
&lt;li&gt;파이썬 변수 이름은, 숫자로 시작하지 않습니다. &lt;/li&gt;
&lt;li&gt;대문자 소문자를 구분 합니다 &lt;/li&gt;
&lt;li&gt;적절한 길이로 이루어질수 있습니다 &lt;/li&gt;
&lt;li&gt;&lt;em&gt;변수명으로 사용될수 없는, 예약어들이 존재 합니다. 파이썬이 다른것들을 위해서 사용하는 내장 함수나 예약어들은 변수명으로 사용할수 없습니다&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;예약어의 예시는 아래와 같습니다. 모든 예약어들은 변수명으로 사용될수 없습니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;False&lt;/th&gt;
&lt;th&gt;class&lt;/th&gt;
&lt;th&gt;finally&lt;/th&gt;
&lt;th&gt;is&lt;/th&gt;
&lt;th&gt;return&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;continue&lt;/td&gt;
&lt;td&gt;for&lt;/td&gt;
&lt;td&gt;lambda&lt;/td&gt;
&lt;td&gt;try&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;def&lt;/td&gt;
&lt;td&gt;from&lt;/td&gt;
&lt;td&gt;nonlocal&lt;/td&gt;
&lt;td&gt;while&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td&gt;del&lt;/td&gt;
&lt;td&gt;global&lt;/td&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;td&gt;with&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;as&lt;/td&gt;
&lt;td&gt;el&lt;/td&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td&gt;yield&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assert&lt;/td&gt;
&lt;td&gt;else&lt;/td&gt;
&lt;td&gt;import&lt;/td&gt;
&lt;td&gt;pass&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;break&lt;/td&gt;
&lt;td&gt;except&lt;/td&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;raise&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;좋은-변수명&quot;&gt;&lt;a href=&quot;#좋은-변수명&quot; class=&quot;headerlink&quot; title=&quot;좋은 변수명&quot;&gt;&lt;/a&gt;좋은 변수명&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;프로그래머가 변수명을 잘 짓는 능력은 정말정말 중요합니다. 좋은 변수명을 짓기 위해서 참고할 룰은 몇가지 있지만, 가장 근본적으로 공통된 룰은 아래와 같습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Variables"><a href="#Python-Variables" class="headerlink" title="Python - Variables"></a>Python - Variables</h2><br><h3 id="변수와-값-Variables-and-Value"><a href="#변수와-값-Variables-and-Value" class="headerlink" title="변수와 값 (Variables and Value)"></a>변수와 값 (Variables and Value)</h3><br><blockquote><p>변수 (Variables) 는, </p><p>프로그래머가 값 (Value) 을 저장할수 있는 메모리 공간 입니다. </p></blockquote><br><ul><li>값은, 문자열 혹은 숫자열 혹은 기타 다른것들이 될수 있습니다 예) “django”, 118, 25.45 etc </li><li>변수는 처음 할당 될때 생성됩니다 </li><li>변수들은 참조되기 전에 할당이 되어 있어야 합니다. 할당 되지 않아 있는 변수를 참조하려 하면, 에러가 납니다</li><li>변수안에 저장된 값은, 접근이 가능 하고, 혹은 나중에 업데이트 될수 있습니다 </li><li>변수의 타입 (즉, 문자열, 정수, 실수 등)들은 파이썬에 의해 지정됩니다 </li><li>파이썬 인터프리터는 변수의 데이터 타입을 기준으로 메모리를 할당 합니다. </li></ul><br><h2 id="파이썬-변수-이름-규칙"><a href="#파이썬-변수-이름-규칙" class="headerlink" title="파이썬 변수 이름 규칙"></a>파이썬 변수 이름 규칙</h2><br><ul><li>글자 (a-z, A-Z) 혹은 <code>_</code> 언더스코어 로 시작 할수 있습니다 </li><li>다른 문자들, 글자, 숫자 혹은 언더스코어가 될수 있습니다 </li><li>파이썬 변수 이름은, 숫자로 시작하지 않습니다. </li><li>대문자 소문자를 구분 합니다 </li><li>적절한 길이로 이루어질수 있습니다 </li><li><em>변수명으로 사용될수 없는, 예약어들이 존재 합니다. 파이썬이 다른것들을 위해서 사용하는 내장 함수나 예약어들은 변수명으로 사용할수 없습니다</em></li></ul><br><p>예약어의 예시는 아래와 같습니다. 모든 예약어들은 변수명으로 사용될수 없습니다. </p><br><table><thead><tr><th>False</th><th>class</th><th>finally</th><th>is</th><th>return</th></tr></thead><tbody><tr><td>None</td><td>continue</td><td>for</td><td>lambda</td><td>try</td></tr><tr><td>True</td><td>def</td><td>from</td><td>nonlocal</td><td>while</td></tr><tr><td>and</td><td>del</td><td>global</td><td>not</td><td>with</td></tr><tr><td>as</td><td>el</td><td>if</td><td>or</td><td>yield</td></tr><tr><td>assert</td><td>else</td><td>import</td><td>pass</td><td></td></tr><tr><td>break</td><td>except</td><td>in</td><td>raise</td><td></td></tr></tbody></table><br><br><h2 id="좋은-변수명"><a href="#좋은-변수명" class="headerlink" title="좋은 변수명"></a>좋은 변수명</h2><br><p>프로그래머가 변수명을 잘 짓는 능력은 정말정말 중요합니다. 좋은 변수명을 짓기 위해서 참고할 룰은 몇가지 있지만, 가장 근본적으로 공통된 룰은 아래와 같습니다. </p><p><br><a id="more"></a></p><ul><li>아주 짧은 변수명보다는, 짧고 간결하지만 의미를 포함하고 있는 이름이 좋습니다 </li><li>의미 있는 이름을 만들기 위해서, 너무 긴 이름을 짓는것은 좋지 않습니다 </li><li>변수명을 지을때에는, 일관성 있게 지어야 합니다 </li><li>특수한 경우를 위해서, 변수명 앞에, <code>_</code> 를 붙여 줍니다 </li></ul><br><blockquote><p>변수를 생성할때에는, 할당을 통해서 변수에 값을 할당하고, 생성할수 있습니다. </p><p>예를들면, 아래와 같은 형식으로 생성합니다. </p><p><code>변수명 = 수식 혹은 값</code></p></blockquote><br><blockquote><p><code>=</code> 연산자는, 오른쪽에 있는 값을, 왼쪽에 있는 변수명에 할당 합니다. </p><p>예를들면, </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">item = <span class="string">"computer"</span>    <span class="comment"># "computer" 라는 문자열을, item 이라는 변수에 할당 했습니다. </span></span><br><span class="line">item_qty = <span class="number">10</span>        <span class="comment"># 10 이라는 정수를, item_qty 라는 변수에 할당 했습니다. </span></span><br><span class="line">item_value = <span class="number">949.99</span>  <span class="comment"># 949.99 라는 실수를, item_value 라는 변수에 할당 했습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 위의 할당된 변수들은 할당과 동시에 생성되었습니다. </span></span><br><span class="line"><span class="comment"># 이렇게 값이 할당되고 생성된 변수들은, 아래와 같이 다른 함수를 사용하여 참조되고, 호출되어 </span></span><br><span class="line"><span class="comment"># 값이 불려와 질수 있습니다 </span></span><br><span class="line"></span><br><span class="line">print(item_qty) </span><br><span class="line">print(item_value)</span><br></pre></td></tr></table></figure><br><br><blockquote><p>변수를 생성할때, </p><p>값은 오른쪽에, 변수명은 왼쪽에 두어야 합니다. </p><p>변수명은 숫자가 될수 없습니다. 그렇지 않으면, 문법 에러를 발생 시킵니다. </p><p>아래 예시는, 에러가 발생 합니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span> </span><br><span class="line"><span class="number">12</span> = a</span><br></pre></td></tr></table></figure><br><br><h2 id="나쁜-변수명"><a href="#나쁜-변수명" class="headerlink" title="나쁜 변수명"></a>나쁜 변수명</h2><br><ul><li>변수가 어디에 쓰일지 추정도 할수 없게, 너무 짧은 변수명 </li><li>변수가 어디에 쓰일지 추정할수 없을만큼, 너무 의미가 없는 변수명 </li><li>너무 많은 의미를 부여하여, 너무 길게 지어진 변수명 </li><li>기타 등등 (개인적으로, 가독성을 떨어트리는 변수명 싫습니다!)</li></ul><br><br><blockquote><p>프로그래머들은, </p><p>많은 시간을 좋은 변수명을 짓기 위해서 소비합니다. </p><p>변수명은, 다른 프로그래머들이 보았을때에도 의미가 명확하고, 효과적인 변수명이어야 합니다. </p><br><p>이는, 다른 프로그래머들이 작성한 코드를 많이 보고 참조하거나. </p><p>많은 연습이 필요한 영역으로, 본인만 이해할수 있는 변수명 보다는, 코딩을 모르는 초보들도 알기 쉬운 </p><p>변수명으로 선택하는것이 좋습니다. </p><br><p>변수명을 짓는것을 잘 하면, 함수명과 클래스명을 지을때도 응용해서 잘 지을수 있습니다. </p></blockquote><br><h2 id="다수-할당"><a href="#다수-할당" class="headerlink" title="다수 할당"></a>다수 할당</h2><br><p>기본 할당문은, 하나의 변수와 하나의 값을 가지고 작동했습니다. 하지만, 다수의 변수에 하나의 값을 동시에 할당 할수도 있습니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = y = z = <span class="number">1</span> </span><br><span class="line">print(x) </span><br><span class="line">print(y)</span><br><span class="line">print(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y, z 변수는 모두 1로 할당이 됩니다 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래에는, 다른 값들을, 다른 변수들에 동시에 할당해보는 예시 입니다. </span></span><br><span class="line">x, y, z = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"abcd"</span> </span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure><br><p>새로운 값을 변수에 할당하는것으로, 같은 변수명을 재사용 할수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">100</span> </span><br><span class="line">print(x) </span><br><span class="line"></span><br><span class="line"><span class="comment"># x 에 'Django' 라는 문자열을 새로운 값으로 할당 합니다 </span></span><br><span class="line">x = <span class="string">'Django'</span> </span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br><h2 id="변수-바꾸기"><a href="#변수-바꾸기" class="headerlink" title="변수 바꾸기"></a>변수 바꾸기</h2><br><p>파이썬 변수값 바꾸기는 한줄로 가능하고, 이는 파이썬에서 모든 객체들에 적용됩니다. </p><p><br>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span> </span><br><span class="line">y = <span class="number">20</span> </span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">x, y = y, x  <span class="comment"># 변수의 값을 바꿉니다 </span></span><br><span class="line">print(x) </span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><br><h2 id="Local-변수와-Global-변수"><a href="#Local-변수와-Global-변수" class="headerlink" title="Local 변수와 Global 변수"></a>Local 변수와 Global 변수</h2><br><blockquote><p>Local 변수는 지역 변수라고도 하는데, </p><p>특정 코드 영역안에서 사용되는 변수들입니다. </p><br><p>Global 변수는 전역 변수라고도 하는데, </p><p>프로그램 전체 영역에서 사용되는 변수들입니다. </p></blockquote><br><p>파이썬에서, 함수안에서만 참조되는 변수들은 암시적으로 global 변수 입니다. </p><p><br>만약, 하나의 변수가 명확하게 함수안에서 값이 할당 되어 있다면, 이는 local 변수로, 함수내의 변수로 사용됩니다. 아래 예시를 통해 차이점을 알아봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">language1 = <span class="string">"Python"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    language1 = <span class="string">"PHP"</span></span><br><span class="line">    print(<span class="string">"func1 안에서 language1 = "</span>, language1)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"func2 안에서 language1 = "</span>, language1)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">func1()   <span class="comment"># 함수안에 정의된 로컬 변수,language1 의 값을 사용 </span></span><br><span class="line">func2()   <span class="comment"># 함수안에 저의된 로컬 변수가 없기 때문에, language1 이라는 global 변수를 사용</span></span><br></pre></td></tr></table></figure><br><p>함수안에서, 특별한 값을 local 변수로 지정하고, 이를 global  변수로 만들수도 있습니다. global 을 변수명 앞에 붙여서 사용할수 있습니다. </p><br><p>로컬 변수 (local variables) 와 전역 변수 (global variables) 의 개념은 매우 중요합니다. 꼭 구글을 통해서 더 찾아보도록 합니다. 하지만, 현대 프로그래밍에서는, global 변수의 사용을 권장하고 있지 않습니다. </p><br><p>global 변수를 너무 많이 사용하면, global 변수의 변경사항이 프로그램 전반에 걸쳐 영향을 주기 때문입니다. <br></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/26/Python-%EA%B8%B0%EC%B4%88-4%ED%8E%B8-variables-%EB%B3%80%EC%88%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 3편 - print 함수</title>
      <link>http://djangojeng-e.github.io/2020/10/25/Python-%EA%B8%B0%EC%B4%88-3%ED%8E%B8-print-%ED%95%A8%EC%88%98/</link>
      <guid>http://djangojeng-e.github.io/2020/10/25/Python-%EA%B8%B0%EC%B4%88-3%ED%8E%B8-print-%ED%95%A8%EC%88%98/</guid>
      <pubDate>Sun, 25 Oct 2020 01:21:55 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-print&quot;&gt;&lt;a href=&quot;#Python-print&quot; class=&quot;headerlink&quot; title=&quot;Python - print()&quot;&gt;&lt;/a&gt;Python - &lt;code&gt;print()&lt;/code&gt;&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;print-함수&quot;&gt;&lt;a href=&quot;#print-함수&quot; class=&quot;headerlink&quot; title=&quot;print 함수&quot;&gt;&lt;/a&gt;print 함수&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;print 문은 &lt;code&gt;print()&lt;/code&gt; 함수로 대체 되었습니다. 키워드 인자들은, 이전 프린트문의 특수 문법들을 대체 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;print문은 아래와 같은 방식으로 사용될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good Morning&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good&quot;&lt;/span&gt;, &amp;lt;문자열을 가지고 있는 변수&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good&quot;&lt;/span&gt;, &amp;lt;문자열을 가지고 있는 변수&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good %s&quot;&lt;/span&gt; % &amp;lt;문자열을 가지고 있는 변수&amp;gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 예) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# a 는 abc 라는 문자열을 가지고 있는 변수 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;good&#39;&lt;/span&gt;, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;good&#39;&lt;/span&gt; + a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;good %S&#39;&lt;/span&gt; % a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;h3 id=&quot;문자열-포매팅&quot;&gt;&lt;a href=&quot;#문자열-포매팅&quot; class=&quot;headerlink&quot; title=&quot;문자열 포매팅&quot;&gt;&lt;/a&gt;문자열 포매팅&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;추가적으로 문자열 포매팅이 중요한데. 문자열에 출력될 변수를, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt; 에 넣어서 출력할수도 있습니다&lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;text = &lt;span class=&quot;string&quot;&gt;&#39;django_bro&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Hey! %s&quot;&lt;/span&gt;, text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;f&#39;Hey! &lt;span class=&quot;subst&quot;&gt;&amp;#123;text&amp;#125;&lt;/span&gt;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Hey! &amp;#123;&amp;#125;&#39;&lt;/span&gt;.format(text))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;파이썬에서 문자열은, &lt;/p&gt;
&lt;p&gt;외따옴표, 쌍따옴표, 혹은 따옴표 3개로 감싸서 문자열로 사용할수 있습니다.&lt;/p&gt;
&lt;p&gt;문자열을 표현하기 위해서 사용되는 따옴표의 종류는 어떤것을 사용해도 상관이 없습니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-print"><a href="#Python-print" class="headerlink" title="Python - print()"></a>Python - <code>print()</code></h2><br><br><h2 id="print-함수"><a href="#print-함수" class="headerlink" title="print 함수"></a>print 함수</h2><br><p>print 문은 <code>print()</code> 함수로 대체 되었습니다. 키워드 인자들은, 이전 프린트문의 특수 문법들을 대체 합니다. </p><br><p>print문은 아래와 같은 방식으로 사용될수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Good Morning"</span>)</span><br><span class="line">print(<span class="string">"Good"</span>, &lt;문자열을 가지고 있는 변수&gt;)</span><br><span class="line">print(<span class="string">"Good"</span>, &lt;문자열을 가지고 있는 변수&gt;)</span><br><span class="line">print(<span class="string">"Good %s"</span> % &lt;문자열을 가지고 있는 변수&gt; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 예) </span></span><br><span class="line">a = <span class="string">'abc'</span></span><br><span class="line"><span class="comment"># a 는 abc 라는 문자열을 가지고 있는 변수 </span></span><br><span class="line">print(<span class="string">'good'</span>, a)</span><br><span class="line">print(<span class="string">'good'</span> + a)</span><br><span class="line">print(<span class="string">'good %S'</span> % a)</span><br></pre></td></tr></table></figure><br><h3 id="문자열-포매팅"><a href="#문자열-포매팅" class="headerlink" title="문자열 포매팅"></a>문자열 포매팅</h3><br><p>추가적으로 문자열 포매팅이 중요한데. 문자열에 출력될 변수를, <code>%</code>, <code>{}</code> 에 넣어서 출력할수도 있습니다</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'django_bro'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Hey! %s"</span>, text)</span><br><span class="line">print(<span class="string">f'Hey! <span class="subst">&#123;text&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">'Hey! &#123;&#125;'</span>.format(text))</span><br></pre></td></tr></table></figure><br><br><blockquote><p>파이썬에서 문자열은, </p><p>외따옴표, 쌍따옴표, 혹은 따옴표 3개로 감싸서 문자열로 사용할수 있습니다.</p><p>문자열을 표현하기 위해서 사용되는 따옴표의 종류는 어떤것을 사용해도 상관이 없습니다.  </p></blockquote><br><a id="more"></a><p>하지만, 보통 아래와 같은 방식으로 사용합니다. </p><br><table><thead><tr><th>따옴표</th><th>표현 문자열</th></tr></thead><tbody><tr><td>‘</td><td>하나의 단어 혹은 하나의 문자를 선언하기 위해 사용</td></tr><tr><td>“</td><td>하나의 줄을 선언하기 위해 사용</td></tr><tr><td>‘’’ 혹은 “””</td><td>파라그래프 / 문단 / 다수의 줄을 선언하기 위해 사용</td></tr></tbody></table><br><p>아래 코드들이 출력하는것은 모두 같습니다. 따옴표 사용의 차이는 없지만, 따옴표 안에 같은 따옴표가 있으면 에러가 발생 합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 외 따옴표 사용 </span></span><br><span class="line">print(<span class="string">'파이썬은 매우 간단합니다!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 쌍 따옴표 사용 </span></span><br><span class="line">print(<span class="string">"파이썬은 매우 간단합니다!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 외따옴표 3개 사용 </span></span><br><span class="line">print(<span class="string">'''파이썬은 매우 간단합니다!'''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 쌍따옴표 3개 사용 </span></span><br><span class="line">print(<span class="string">"""파이썬은 매우 간단합니다!"""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 에러가 나는 경우, invalid syntax  </span></span><br><span class="line"><span class="comment"># 외 따옴표 안에 외 따옴표가 다시 사용되었음 </span></span><br><span class="line">print(<span class="string">'파이썬은 '</span>매우<span class="string">' 간단합니다!'</span>)   </span><br><span class="line">      </span><br><span class="line"><span class="comment"># 에러가 나는 경우2, invalid syntax</span></span><br><span class="line"><span class="comment"># 쌍따옴표 안에 쌍 따옴표가 다시 사용됨, 에러를 발생 </span></span><br><span class="line">print(<span class="string">"파이썬은 "</span>매우<span class="string">" 간단합니다!"</span>)</span><br></pre></td></tr></table></figure><br><br><h2 id="변수-사용"><a href="#변수-사용" class="headerlink" title="변수 사용"></a>변수 사용</h2><br><p>문자열들은 변수에 할당되고, print 문은 사용될때에 호출되어 사용될수 있습니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Wel'</span></span><br><span class="line">print(str1, <span class="string">'come'</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Welcome'</span></span><br><span class="line">str2 = <span class="string">'Python'</span></span><br><span class="line">print(str1, str2)</span><br></pre></td></tr></table></figure><br><h2 id="String-Concatenation-문자열-합치기"><a href="#String-Concatenation-문자열-합치기" class="headerlink" title="String Concatenation (문자열 합치기)"></a>String Concatenation (문자열 합치기)</h2><br><p>string concatenation 은 두개의 문자열을 더하는것입니다. 문자열을 <code>+</code> 를 사용해서 다해주면, 문자열 사이에 공백이 없습니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Python'</span></span><br><span class="line">str2 = <span class="string">':'</span></span><br><span class="line">print(<span class="string">'Welcome'</span> + str1 + str2)</span><br><span class="line"><span class="comment"># () 안에 있는 모든 문자열들이 합쳐져서 출력될겁니다.</span></span><br></pre></td></tr></table></figure><br><h2 id="문자열로-사용하기"><a href="#문자열로-사용하기" class="headerlink" title="문자열로 사용하기"></a>문자열로 사용하기</h2><br><p><code>%</code> 는 문자열을 포함하고 있는 변수를 참조할때 사용됩니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">' Python'</span></span><br><span class="line">print(<span class="string">"Welcome %s"</span> % str1)</span><br></pre></td></tr></table></figure><br><blockquote><p>다른 데이터 타입들도 사용할수 있습니다 </p></blockquote><br><table><thead><tr><th>문자</th><th>데이터타입</th></tr></thead><tbody><tr><td>%d</td><td>정수</td></tr><tr><td>%e</td><td>지수</td></tr><tr><td>%f</td><td>실수</td></tr><tr><td>%o</td><td>Octal 8진수</td></tr><tr><td>%x</td><td>Hexadecimal 16진수</td></tr></tbody></table><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정수를 사용하는 경우 </span></span><br><span class="line">print(<span class="string">"Actual Number = %d"</span> % <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 지수를 사용 </span></span><br><span class="line">print(<span class="string">"Exponential equivalent of the number = %e"</span> %<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 실수를 사용 </span></span><br><span class="line">print(<span class="string">'Float of the number = %f'</span> %<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8진수 사용 </span></span><br><span class="line">print(<span class="string">"Octal Equivalent of the number = %o"</span> %<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 16진수 사용 </span></span><br><span class="line">print(<span class="string">"Octal equivalent of the number = %x"</span> %<span class="number">15</span>)</span><br></pre></td></tr></table></figure><br><h3 id="다수의-변수들을-사용"><a href="#다수의-변수들을-사용" class="headerlink" title="다수의 변수들을 사용"></a>다수의 변수들을 사용</h3><br><p>다수의 변수들을 참조할때에는 괄호가 사용됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'World'</span></span><br><span class="line">str2 = <span class="string">':'</span></span><br><span class="line">print(<span class="string">"Python %s %s"</span> % (str1, str2))</span><br></pre></td></tr></table></figure><br><h3 id="프린트-문의-다른-예시들"><a href="#프린트-문의-다른-예시들" class="headerlink" title="프린트 문의 다른 예시들"></a>프린트 문의 다른 예시들</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %는 %d 타입 단어를 위해 사용된다 </span></span><br><span class="line">print(<span class="string">"Welcome to %%Python %s"</span> %<span class="string">'language'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \n 은 줄바꿈을 위해서 사용됩니다 </span></span><br><span class="line">print(<span class="string">"Sunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 어떤 단어를 여러번 출력하고 싶을때 </span></span><br><span class="line">print(<span class="string">'django'</span> * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \t 는 tab키를 위해 사용됩니다 </span></span><br><span class="line">print(<span class="string">"""</span></span><br><span class="line"><span class="string">Language:</span></span><br><span class="line"><span class="string">\t1 Python</span></span><br><span class="line"><span class="string">\t2 Java\n\t3 JavaScript"""</span>)</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="Precision-width-and-Field-width"><a href="#Precision-width-and-Field-width" class="headerlink" title="Precision width and Field width"></a>Precision width and Field width</h3><br><p>Field Width 는 숫자 전체의 넓이 이고, precision 은 우측을 향한 넓이 입니다. </p><p><br>요구 사항에 따라 이는 조정 될수 있습니다. </p><br><p>기본 precision width 는 6 으로 설정 되어 있습니다. <br></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># precision width and field width </span></span><br><span class="line"><span class="comment"># 6 번째 소숫점 까지 반환 됩니다 </span></span><br><span class="line"><span class="comment"># 이 소숫점 자리수를 지정하기 위해서는, </span></span><br><span class="line"><span class="comment"># %(fieldwidth).(precisionwidth)f 가 사용됩니다. </span></span><br><span class="line">print(<span class="string">"%f"</span> % <span class="number">5.1234567890</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 소수점 5자리까지만 반환 하고 싶을 경우</span></span><br><span class="line">print(<span class="string">"%.5f"</span> %<span class="number">5.1234567890</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 만약 field width 가 필요 이상으로 지정되어 있을경우, </span></span><br><span class="line"><span class="comment"># 데이터 오른쪽은 특정 값쪽으로 스스로 조정 됩니다 </span></span><br><span class="line">print(<span class="string">"%9.5f"</span> %<span class="number">5.1234567890</span>)</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 0 을 추가하여, padding 값을 0으로 만들수 있습니다. </span></span><br><span class="line">print(<span class="string">"%015.5f"</span> % <span class="number">5.1234567890</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 올바른 정렬을 위해, 필드 너비에 공백을 비워 두어 음수를 사용할때에 </span></span><br><span class="line"><span class="comment"># 적절한 정렬이 유지 됩니다 </span></span><br><span class="line">print(<span class="string">"% 9f"</span> % <span class="number">5.1234567890</span>)</span><br><span class="line">print(<span class="string">"% 9f"</span> % <span class="number">5.1234567890</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/25/Python-%EA%B8%B0%EC%B4%88-3%ED%8E%B8-print-%ED%95%A8%EC%88%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 2편 - Syntax</title>
      <link>http://djangojeng-e.github.io/2020/10/24/Python-%EA%B8%B0%EC%B4%88-2%ED%8E%B8-Syntax/</link>
      <guid>http://djangojeng-e.github.io/2020/10/24/Python-%EA%B8%B0%EC%B4%88-2%ED%8E%B8-Syntax/</guid>
      <pubDate>Sat, 24 Oct 2020 07:28:14 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-Syntax-문법-구문&quot;&gt;&lt;a href=&quot;#Python-Syntax-문법-구문&quot; class=&quot;headerlink&quot; title=&quot;Python Syntax (문법, 구문)&quot;&gt;&lt;/a&gt;Python Syntax (문법, 구문)&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;파이썬 프로그램은, parser 로 읽어집니다 &lt;/p&gt;
&lt;p&gt;파이썬은 매우 읽기 편한 언어가 되기 위해서 디자인 되었습니다. &lt;/p&gt;
&lt;p&gt;파이썬 프로그래밍 언어의 문법은, 어떻게 파이썬 프로그래밍이 작성되어야 할지에 대한 규칙을 다룹니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;Python-Line-Structure-줄구조&quot;&gt;&lt;a href=&quot;#Python-Line-Structure-줄구조&quot; class=&quot;headerlink&quot; title=&quot;Python Line Structure (줄구조)&quot;&gt;&lt;/a&gt;Python Line Structure (줄구조)&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬 프로그램은 여러개의 논리적 줄들로 나누어져 있고, 각 논리적 줄은, NEWLINE 토큰에 의해서 종료 됩니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;논리적 줄은, 하나 혹은 그 이상의 줄들로 부터 생성 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;하나의 줄은, 공백, 탭, 주석같은 formfeed 로 이루어질수 있고, 비어있는 줄은 인터프리터가 무시합니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;이 세줄은 물리적 / 논리적 줄들 입니다.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;파이썬에서-주석-comments&quot;&gt;&lt;a href=&quot;#파이썬에서-주석-comments&quot; class=&quot;headerlink&quot; title=&quot;파이썬에서 주석 (comments)&quot;&gt;&lt;/a&gt;파이썬에서 주석 (comments)&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬에서 주석은, 문자열로 치지 않는 # 으로 시작하고, 물리적으로 한줄의 끝에서 끝납니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;# 뒤의 모든 케릭터들은 주석의 부분이고, 파이썬 인터프리터는 이들을 실행하지 않고 무시합니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;아래 예시를 들어봅니다. 참고로, 파이썬에서 다수의 줄 혹은 블럭으로 된 주석은 존재하지 않습니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# x 의 초기값은 1 입니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(&lt;span class=&quot;string&quot;&gt;&#39;두번째 줄은 주석입니다&#39;&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;# 문자열을 출력합니다 (이것도 주석입니다!)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Syntax-문법-구문"><a href="#Python-Syntax-문법-구문" class="headerlink" title="Python Syntax (문법, 구문)"></a>Python Syntax (문법, 구문)</h2><br><blockquote><p>파이썬 프로그램은, parser 로 읽어집니다 </p><p>파이썬은 매우 읽기 편한 언어가 되기 위해서 디자인 되었습니다. </p><p>파이썬 프로그래밍 언어의 문법은, 어떻게 파이썬 프로그래밍이 작성되어야 할지에 대한 규칙을 다룹니다 </p></blockquote><br><br><h2 id="Python-Line-Structure-줄구조"><a href="#Python-Line-Structure-줄구조" class="headerlink" title="Python Line Structure (줄구조)"></a>Python Line Structure (줄구조)</h2><br><p>파이썬 프로그램은 여러개의 논리적 줄들로 나누어져 있고, 각 논리적 줄은, NEWLINE 토큰에 의해서 종료 됩니다. </p><p><br>논리적 줄은, 하나 혹은 그 이상의 줄들로 부터 생성 됩니다. </p><br><p>하나의 줄은, 공백, 탭, 주석같은 formfeed 로 이루어질수 있고, 비어있는 줄은 인터프리터가 무시합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'이 세줄은 물리적 / 논리적 줄들 입니다.'</span>)</span><br></pre></td></tr></table></figure><br><br><h2 id="파이썬에서-주석-comments"><a href="#파이썬에서-주석-comments" class="headerlink" title="파이썬에서 주석 (comments)"></a>파이썬에서 주석 (comments)</h2><br><p>파이썬에서 주석은, 문자열로 치지 않는 # 으로 시작하고, 물리적으로 한줄의 끝에서 끝납니다. </p><p><br># 뒤의 모든 케릭터들은 주석의 부분이고, 파이썬 인터프리터는 이들을 실행하지 않고 무시합니다. </p><br><br><p>아래 예시를 들어봅니다. 참고로, 파이썬에서 다수의 줄 혹은 블럭으로 된 주석은 존재하지 않습니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> </span><br><span class="line"><span class="comment"># x 의 초기값은 1 입니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">print(<span class="string">'두번째 줄은 주석입니다'</span>)   <span class="comment"># 문자열을 출력합니다 (이것도 주석입니다!)</span></span><br></pre></td></tr></table></figure><br><a id="more"></a> <h2 id="두개의-줄-합치기"><a href="#두개의-줄-합치기" class="headerlink" title="두개의 줄 합치기"></a>두개의 줄 합치기</h2><br><p>만약 하나의 줄에 상대적으로 긴 코드를 작성하고 싶으면, <code>\</code> 백슬래쉬를 사용하여, 논리적 줄을 두개 혹은 다수의 줄로 나눌수 있습니다. 따라서, 한줄이 <code>\</code> 로 끝나고, 문자열의 부분 혹은 주석이 아니라면, 다음줄로 이어지는 줄로 볼수 있습니다. </p><br><p>예시를 들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">u = <span class="number">0</span></span><br><span class="line">v = <span class="number">1</span> </span><br><span class="line">w = <span class="number">2</span> </span><br><span class="line">x = <span class="number">3</span> </span><br><span class="line">y = <span class="number">4</span> </span><br><span class="line">z = <span class="number">5</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> u == <span class="number">0</span> <span class="keyword">and</span> v &gt; <span class="number">0</span> \ </span><br><span class="line">    <span class="keyword">and</span> w &gt; <span class="number">1</span> <span class="keyword">and</span> x &gt;<span class="number">2</span> \ </span><br><span class="line">    <span class="keyword">and</span> y &gt; <span class="number">3</span> <span class="keyword">and</span> z &gt; <span class="number">4</span>:</span><br><span class="line">        print(<span class="string">"이것이 줄들을 합치는 예시입니다"</span>)</span><br></pre></td></tr></table></figure><br><h2 id="다수의-statements-한줄에-작성하기"><a href="#다수의-statements-한줄에-작성하기" class="headerlink" title="다수의 statements 한줄에 작성하기"></a>다수의 statements 한줄에 작성하기</h2><br><p>두개의 다른 statements 를 세미콜론 <code>;</code> 을 두개의 줄 사이에 사용하여 이어줄수 있습니다. </p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(&#39;statement 1 &#39;)</span><br><span class="line">print(&#39;statement 2 &#39;)</span><br><span class="line"></span><br><span class="line"># ; 세미콜론을 두개의 줄 사이에 사용하여, 아래처럼 합쳐놓을수 있습니다. </span><br><span class="line"></span><br><span class="line">print(&#39;statement 1 &#39;);print(&#39;statement 2 &#39;)</span><br></pre></td></tr></table></figure><br><br><h2 id="들여쓰기"><a href="#들여쓰기" class="headerlink" title="들여쓰기"></a>들여쓰기</h2><br><p>파이썬은 C 나 C++ 에서 ({}) 처럼, 클래스, 함수 혹은 제어문 프로그램 블럭을 정의하기 위해서 공백을 사용합니다. </p><p><br>들여쓰기에서 공백의 수는 (스페이스 와 탭 ) 정해지지 않았습니다. 하지만, 블럭안에 모든 statement 들은 같은 양의 들여쓰기가 되어 있어야 합니다. </p><br><blockquote><p>들여쓰기는 보통 4칸의 공백으로 되어야 합니다 </p></blockquote><br><p>아래 예시에서는, statement 들이 들여쓰기가 되어 있지 않습니다. 이는 문법 에러를 발생시킵니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">print(<span class="string">'이 statement 는 들여쓰기가 안되었습니다'</span>)</span><br><span class="line">print(<span class="string">'이 statement 는 들여쓰기가 안되었습니다'</span>)</span><br></pre></td></tr></table></figure><br><p>아래 예시에서는, 4칸 들여쓰기를 해주었습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'이 줄은, 4칸 들여쓰기가 되어 있습니다'</span>)</span><br><span class="line">    print(<span class="string">'에러를 발생시키지 않습니다 '</span>)</span><br></pre></td></tr></table></figure><br><br><h2 id="파이썬-코딩-스타일"><a href="#파이썬-코딩-스타일" class="headerlink" title="파이썬 코딩 스타일"></a>파이썬 코딩 스타일</h2><br><ul><li><p>들여쓰기 마다, 4칸의 공백을 사용합니다 </p></li><li><p>공백과 tab 을 혼용하여 사용하지 않습니다 </p></li><li><p>한줄의 최대 길이는, 79 케릭터입니다. 이는 작은 디스플레이를 가진 사용자들을 도와줍니다 </p></li><li><p>가장 상위의 함수와 클래스 정의들 사이에는 두칸의 빈줄들을 사용하여, 구분을 해줍니다. 함수와 클래스 내부의 메서드 정의들과 큰 단위의 코드 블럭들 사이에는 한칸의 빈줄을 사용하여 구분해 줍니다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 가장 최 상위에 있는 A 와 B 클래스 끼리는 두칸의 빈줄들을 사용하여 구분을 해줍니다 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">abc</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fge</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 클래스 C 내부에 있는 abc 와 fge 함수끼리는 한칸의 빈줄을 사용하여 구분 해줍니다. </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><br><ul><li>가능하다면, 주석은 인라인으로 처리합니다 </li><li>exrpression 과 statement 주변에 공백을 사용합니다 </li></ul><br><h2 id="파이썬-예약어"><a href="#파이썬-예약어" class="headerlink" title="파이썬 예약어"></a>파이썬 예약어</h2><br><p>아래 식별자들은 파이썬 안에서 예약된 단어들입니다. 이 단어들은, 일반적인 식별자로 사용될수 없습니다. (예, 변수명, 클래스명, 함수명 등등 )</p><br><table><thead><tr><th>False</th><th>class</th><th>finally</th><th>is</th><th>return</th></tr></thead><tbody><tr><td>None</td><td>continue</td><td>for</td><td>lambda</td><td>try</td></tr><tr><td>True</td><td>def</td><td>from</td><td>nonlocal</td><td>while</td></tr><tr><td>and</td><td>del</td><td>global</td><td>not</td><td>with</td></tr><tr><td>as</td><td>el</td><td>if</td><td>or</td><td>yield</td></tr><tr><td>assert</td><td>else</td><td>import</td><td>pass</td><td></td></tr><tr><td>break</td><td>except</td><td>in</td><td>raise</td><td></td></tr></tbody></table><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/24/Python-%EA%B8%B0%EC%B4%88-2%ED%8E%B8-Syntax/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 1 편 - 기본 사항들</title>
      <link>http://djangojeng-e.github.io/2020/10/23/Python-%EA%B8%B0%EC%B4%88-1-%ED%8E%B8-%EA%B8%B0%EB%B3%B8-%EC%82%AC%ED%95%AD%EB%93%A4/</link>
      <guid>http://djangojeng-e.github.io/2020/10/23/Python-%EA%B8%B0%EC%B4%88-1-%ED%8E%B8-%EA%B8%B0%EB%B3%B8-%EC%82%AC%ED%95%AD%EB%93%A4/</guid>
      <pubDate>Fri, 23 Oct 2020 09:57:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;What-is-Python&quot;&gt;&lt;a href=&quot;#What-is-Python&quot; class=&quot;headerlink&quot; title=&quot;What is Python?&quot;&gt;&lt;/a&gt;What is Python?&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Python-이-무엇인가요&quot;&gt;&lt;a href=&quot;#Python-이-무엇인가요&quot; class=&quot;headerlink&quot; title=&quot;Python 이 무엇인가요?&quot;&gt;&lt;/a&gt;Python 이 무엇인가요?&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;파이썬은 오픈소스로 개발된 객체 지향 프로그래밍 언어로, 고등 레벨의 강력한 프로그래밍 언어 입니다. Guido Van Rossum 에 의해서 1990년대 초반에 개발되었고, Monty Python 을 따라서 이름 지어졌습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬은, 많은 unix 계열에서 실행되고, Mac 과 Windows 2000 대 이후 버전에서도 실행 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬은, &lt;a href=&quot;http://www.python.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.python.org&lt;/a&gt; 에서 다운로드 가능합니다. &lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Python-프로그램은&quot;&gt;&lt;a href=&quot;#Python-프로그램은&quot; class=&quot;headerlink&quot; title=&quot;Python 프로그램은&quot;&gt;&lt;/a&gt;Python 프로그램은&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬 프로그램들은 모듈들로 이루어져 있습니다. 하나의 &lt;code&gt;모듈&lt;/code&gt;은 &lt;code&gt;statement&lt;/code&gt; 들을 포함하고 있고, &lt;code&gt;statement&lt;/code&gt; 는 &lt;code&gt;expressions&lt;/code&gt; 을 가지고 있습니다.  &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;Module &amp;gt; Statements &amp;gt; Expressions&lt;/code&gt; &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬에서뿐만 아니라, 자주자주 나오는 컨셉인, &lt;code&gt;statements&lt;/code&gt; 와 &lt;code&gt;expressions&lt;/code&gt; 에 대해서 알아보자면, &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Expressions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;수식, 연산식 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Statements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;실행 가능한 (executable) 코드 조각, 무엇인가를 실행하는 코드의 조각 이라고 보면 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;스택오버플로우에서 검색해 보면, 아래 예시가 나옵니다 &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="What-is-Python"><a href="#What-is-Python" class="headerlink" title="What is Python?"></a>What is Python?</h2><br><h3 id="Python-이-무엇인가요"><a href="#Python-이-무엇인가요" class="headerlink" title="Python 이 무엇인가요?"></a>Python 이 무엇인가요?</h3><br><p>파이썬은 오픈소스로 개발된 객체 지향 프로그래밍 언어로, 고등 레벨의 강력한 프로그래밍 언어 입니다. Guido Van Rossum 에 의해서 1990년대 초반에 개발되었고, Monty Python 을 따라서 이름 지어졌습니다. </p><br><p>파이썬은, 많은 unix 계열에서 실행되고, Mac 과 Windows 2000 대 이후 버전에서도 실행 됩니다. </p><br><p>파이썬은, <a href="http://www.python.org" target="_blank" rel="noopener">http://www.python.org</a> 에서 다운로드 가능합니다. </p><br><h2 id="Python-프로그램은"><a href="#Python-프로그램은" class="headerlink" title="Python 프로그램은"></a>Python 프로그램은</h2><br><p>파이썬 프로그램들은 모듈들로 이루어져 있습니다. 하나의 <code>모듈</code>은 <code>statement</code> 들을 포함하고 있고, <code>statement</code> 는 <code>expressions</code> 을 가지고 있습니다.  </p><br><p><code>Module &gt; Statements &gt; Expressions</code> </p><br><p>파이썬에서뿐만 아니라, 자주자주 나오는 컨셉인, <code>statements</code> 와 <code>expressions</code> 에 대해서 알아보자면, </p><br><blockquote><p><strong>Expressions</strong></p><p>수식, 연산식 </p></blockquote><br><blockquote><p><strong>Statements</strong></p><p>실행 가능한 (executable) 코드 조각, 무엇인가를 실행하는 코드의 조각 이라고 보면 됩니다. </p></blockquote><br><p>스택오버플로우에서 검색해 보면, 아래 예시가 나옵니다 </p><br><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x + <span class="number">2</span>   <span class="comment"># Expression </span></span><br><span class="line">x = <span class="number">1</span>   <span class="comment"># Statement </span></span><br><span class="line"></span><br><span class="line">y = x + <span class="number">1</span>  <span class="comment"># Statement </span></span><br><span class="line"></span><br><span class="line">print(y)   <span class="comment"># Statement</span></span><br></pre></td></tr></table></figure><br><p>위 예시를 통해서 유추해 보면, expression  은 단순히 어떠한 값을 계산하는 수식이고. 어떠한 동작도 하지 않고, 해당 값을 표현하는 코드 입니다. </p><br><p>하지만, <code>statement</code> 는 이러한 <code>expression</code> 으로 표현된 값들을 가지고, 어떠한 행동을 취하는 코드입니다. 위의 예시에서 보면,</p><br><ul><li><code>x=1</code> 은, x 라는 변수에, 1 이라는 값을 할당 합니다 </li><li><code>y = x + 1</code> 은, <code>x + 1</code> 로 표현된 값을, <code>y</code> 라는 변수에 할당합니다 </li><li><code>print(y)</code> 는, y 의 값을 출력하는 동작을 합니다.  </li></ul><br><p>따라서, 위 3개의 예시는 모두 어떠한 동작을 하는 statement 입니다. 반면에, expression 은 값을 표현하는 단위로만 사용됩니다. statement 는 여러개의 expression 을 가지고 있을수 있고, 이것들을 가지고 어떠한 작업을 수행하는데 사용합니다. </p><br><h2 id="Python-의-특징"><a href="#Python-의-특징" class="headerlink" title="Python 의 특징"></a>Python 의 특징</h2><br><ol><li>Open Source (무료)</li><li>배우기 쉽다 (다른 프로그래밍 언어에 비해서 쉬울수 있다)</li><li>고등 수준의 언어이다 </li><li>범용성이 넓다 </li><li>객체 지향 언어 </li><li>상호 작용이 가능 </li><li>Interpreted 언어 이다 </li></ol><br><h2 id="Python-의-역사"><a href="#Python-의-역사" class="headerlink" title="Python 의 역사"></a>Python 의 역사</h2><br><p>파이썬이라는 이름은, “Monty Python’s Flying Circus” 먼티 파이썬의 플라잉 서커스 라는, 1969년부터 1974년 까지 Monty Python 이라는 코메디 그룹에 의해서 방영된 영국 스케치 코미디 시리즈에서 따온 이름입니다 <br></p><p>파이썬은 1990년대초, Guido Van Rossum 에 의해서, 네덜란드 국립 수학 컴퓨터 사이언스 리서치 기관에서 개발 되었습니다. </p><br><p>파이썬은, ABC 라는 언어의 후계자로써 만들어 졌고, 1991년도에 대중들에게 배포 되었습니다. <br></p><p>시간이 흐르면서, 많은 사용자 커뮤니티들이 언어 개발에 기여를 하였음에도 불구하고, Guido 는 파이썬의 기본 작성자로 남아 있습니다.<br></p><p>1991년도와 2001년도 사이에 여러번의 버전 배포가 있었고, 거의 모든 파이썬 배포판은 오픈 소스 입니다.<br></p><br><h2 id="Python-의-주-사용처"><a href="#Python-의-주-사용처" class="headerlink" title="Python 의 주 사용처"></a>Python 의 주 사용처</h2><br><ul><li>시스템 유틸리티 (시스템 어드민 도구, 커맨드 라인 프로그램들)</li><li>웹 개발 </li><li>GUI (Graphical User Interfaces)</li><li>인터넷 스크립팅 </li><li>임베디드 스크립팅 </li><li>데이터베이스 엑세스 및 프로그래밍 </li><li>게임 프로그래밍 </li><li>빠른 프로토타이핑과 개발 </li><li>프로그램 배포 </li></ul><br><h2 id="Python-을-사용하는-단체들"><a href="#Python-을-사용하는-단체들" class="headerlink" title="Python 을 사용하는 단체들"></a>Python 을 사용하는 단체들</h2><br><table><thead><tr><th><strong>분야</strong></th><th><strong>단체</strong></th></tr></thead><tbody><tr><td>웹개발</td><td>Yahoo maps, Yahoo Group, Google, Zope Corporation, Ultraseek, Linux Weekly News, Mojam.com, Shopzilla</td></tr><tr><td>게임</td><td>Battlefield2, Crystal space, Star Trek Bridge Commander, Civilization 4, QuArk(Quake Army Knife)</td></tr><tr><td>그래픽</td><td>Industrial Light &amp; Magic, Walt Disney Feature Animation, HKS, RoboFog, Caligari Corporation, Blender 3D, Jasc Software</td></tr><tr><td>금융</td><td>Altis Investment Management, ABN AMRO Bank, Treasury Systems</td></tr><tr><td>과학</td><td>National Weather Service, Radar Remote Sensing Group, Applied Maths, Biosoft, The National Research Council of Canada, AlphaGene, Inc. NASA, etc</td></tr><tr><td>전자 자동화 디자인</td><td>Ciranova, Productivity Design Tools, Object Domain, Red Hat</td></tr><tr><td>교육</td><td>University of Califonia, Irvine, New Zealand Digital Library, IT Certification Exam preparation, School Tool</td></tr><tr><td>비지니스 소프트웨어</td><td>Raven Bear Systems Corporation, Thawte Consulting, IBM, WuBook etc</td></tr></tbody></table><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/23/Python-%EA%B8%B0%EC%B4%88-1-%ED%8E%B8-%EA%B8%B0%EB%B3%B8-%EC%82%AC%ED%95%AD%EB%93%A4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>파이썬 라이브러리 (library) 와 모듈 (module)</title>
      <link>http://djangojeng-e.github.io/2020/10/22/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-library-%EC%99%80-%EB%AA%A8%EB%93%88-module/</link>
      <guid>http://djangojeng-e.github.io/2020/10/22/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-library-%EC%99%80-%EB%AA%A8%EB%93%88-module/</guid>
      <pubDate>Wed, 21 Oct 2020 23:49:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Python-Library-and-Modules&quot;&gt;&lt;a href=&quot;#Python-Library-and-Modules&quot; class=&quot;headerlink&quot; title=&quot;Python Library and Modules&quot;&gt;&lt;/a&gt;Python L
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Library-and-Modules"><a href="#Python-Library-and-Modules" class="headerlink" title="Python Library and Modules"></a>Python Library and Modules</h2><br><h3 id="파이썬-라이브러리-Library-와-모듈-Module"><a href="#파이썬-라이브러리-Library-와-모듈-Module" class="headerlink" title="파이썬 라이브러리 (Library) 와 모듈 (Module)"></a>파이썬 라이브러리 (Library) 와 모듈 (Module)</h3><br><h3 id="Python-Library-and-Modules-1"><a href="#Python-Library-and-Modules-1" class="headerlink" title="Python Library and Modules"></a>Python Library and Modules</h3><br><p>파이썬에는, 라이브러리 (Library) 혹은 모듈 (Module) 이라는것들이 존재합니다 </p><br><p>파이썬 공부한지도 제법 시간이 오래되었지만, 라이브러리와 모듈에 대해서 설명 하라고 하면 바로 대답이 나오질 않습니다.. 짧게나마 라이브러리와 모듈에 대해서 정리하고 넘어갑니다. </p><br><br><blockquote><p><strong>파이썬에서 라이브러리 (Library) 란?</strong></p><br><p>파이썬 라이브러리는 코드를 작성할 필요없이 많은 동작을 수행할수 있게 해주는 함수와 메서드의 집합입니다. 우리는, 마치 도서관 (library) 에서 책을 꺼내어 보듯이, </p><br><p>프로그래밍을 하면서, 파이썬 라이브러리를 꺼내어 사용할수 있습니다. 여러 파일로 이루어져 있을수 있고, 함수 메서드 속성들이 하나의 패키지로 모여져 있습니다. </p><br><p>어떤 파이썬 라이브러리에는, </p><p>이미 우리가 수행하고자 하는 기능과 동작들이 이미 정의되어 모여져 있기 때문에, </p><p>이를 가져다 쓰기만 하면 됩니다. </p><br><p>예를들면, 파이썬 이미지 라이브러리 (PIL)은, 파이썬에서 이미지 수정을 위한 파이썬 주요 라이브러리 입니다. Numpy 는 숫자 연산을 위한 강력한 라이브러리 입니다. </p></blockquote><br><br><h2 id="파이썬에서-모듈-Module-란"><a href="#파이썬에서-모듈-Module-란" class="headerlink" title="파이썬에서 모듈 (Module) 란?"></a>파이썬에서 모듈 (Module) 란?</h2><br><blockquote><p><strong>파이썬에서 모듈 (Module) 이란?</strong></p><br><p>파이썬 모듈은, </p><p>파이썬 객체로, 여러분들이 묶고 참조 할수 있는 속성들을 가지고 있는 파이썬 객체 입니다. </p><br><p>간단하게 이야기 해서, 모듈은 파이썬으로 이루어져 있는 하나의 파일 입니다. </p><p>하나의 모듈은 함수들 클래스들 그리고 변수들을 정의할수 있습니다. </p><br><p>하나의 모듈은, 실행 가능한 코드도 포함하고 있을수 있습니다. </p></blockquote><br><br><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><br><p>요약하자면, 라이브러리는, 변수나 함수 클래스등을 미리 만들어서 모아 놓은 것입니다. </p><p><br>기본 파이썬에서는 없었거나, 사용하기 편한 기능의 함수와 클래스들을 제공하고, 이를 가져다가 쓸수 있게 만들어 놓은것입니다. </p><br><p><code>import</code> 를 사용하여, 가져와서 사용할수 있고. 보통 구글을 찾아보면, 정말 많은 라이브러리가 존재하는데. 각 라이브러리의 사용법 또한 정말 많이 검색이 되니, 개발자 입장에서는 언제든지 찾아서 끌어다가 사용할수 있습니다.  </p><br><p>예를들어, numpy 같은 경우, 데이터 분석 분야에서 많이 사용되는 라이브러리로, 수적 계산 작업등에 널리 사용되는 라이브러리 입니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/22/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-library-%EC%99%80-%EB%AA%A8%EB%93%88-module/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 9편 - as_table()</title>
      <link>http://djangojeng-e.github.io/2020/10/21/Form-API-9%ED%8E%B8-as-table/</link>
      <guid>http://djangojeng-e.github.io/2020/10/21/Form-API-9%ED%8E%B8-as-table/</guid>
      <pubDate>Wed, 21 Oct 2020 04:44:27 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;HTML-로-폼-출력하기-as-table&quot;&gt;&lt;a href=&quot;#HTML-로-폼-출력하기-as-table&quot; class=&quot;headerlink&quot; title=&quot;HTML 로 폼 출력하기 - as_table()&quot;&gt;&lt;/a&gt;HTML 로 폼 출력하기 - 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="HTML-로-폼-출력하기-as-table"><a href="#HTML-로-폼-출력하기-as-table" class="headerlink" title="HTML 로 폼 출력하기 - as_table()"></a>HTML 로 폼 출력하기 - <code>as_table()</code></h2><br><h3 id="as-table"><a href="#as-table" class="headerlink" title="as_table()"></a><code>as_table()</code></h3><br><blockquote><p>마지막으로, as_table() 은 폼을 <code>&lt;table&gt;</code> HTML 로 출력합니다. </p><p>이는 print 와 같습니다. </p><p>사실 우리는 하나의 폼 객체를 print 할때에, 기본 백앤드 동작으로 as_table() 메서드를 호출합니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [5]: f = ContactForm()                                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [6]: f.as_table()                                                                                                                                                      </span><br><span class="line">Out[6]: '&lt;tr&gt;&lt;th&gt;&lt;label for="id_subject"&gt;Subject:&lt;/label&gt;</span><br><span class="line">&lt;/th&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="subject" maxlength="100" required id="id_subject"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;\n&lt;tr&gt;&lt;th&gt;&lt;label for="id_message"&gt;Message:&lt;/label&gt;&lt;/th&gt;</span><br><span class="line">&lt;td&gt;&lt;textarea name="message" cols="40" rows="10" required id="id_message"&gt;\n</span><br><span class="line">&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">\n&lt;tr&gt;&lt;th&gt;&lt;label for="id_sender"&gt;Sender:&lt;/label&gt;&lt;/th&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="email" name="sender" required id="id_sender"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;\n&lt;tr&gt;&lt;th&gt;&lt;label for="id_cc_myself"&gt;Cc myself:&lt;/label&gt;&lt;/th&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="checkbox" name="cc_myself" id="id_cc_myself"&gt;&lt;/td&gt;&lt;/tr&gt;'</span><br></pre></td></tr></table></figure><br><p><code>&lt;tr&gt; 과 &lt;td&gt;</code> 테그들은 생성되지만, <code>&lt;table&gt;</code>태그는 생성되지 않습니다. 이는, 사용자가 직접 추가해 주어야 합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/21/Form-API-9%ED%8E%B8-as-table/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 8편 - Form.as_ul()</title>
      <link>http://djangojeng-e.github.io/2020/10/20/Form-API-8%ED%8E%B8-Form-as-ul/</link>
      <guid>http://djangojeng-e.github.io/2020/10/20/Form-API-8%ED%8E%B8-Form-as-ul/</guid>
      <pubDate>Mon, 19 Oct 2020 23:46:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Form-as-ul&quot;&gt;&lt;a href=&quot;#Form-as-ul&quot; class=&quot;headerlink&quot; title=&quot;Form.as_ul()&quot;&gt;&lt;/a&gt;Form.as_ul()&lt;/h2&gt;&lt;br&gt;



&lt;p&gt;&lt;code&gt;as_ul()&lt;/code&gt;은 폼을 &lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Form-as-ul"><a href="#Form-as-ul" class="headerlink" title="Form.as_ul()"></a>Form.as_ul()</h2><br><p><code>as_ul()</code>은 폼을 <code>&lt;li&gt;</code> 태그로 렌더링 해줍니다. 각 <code>&lt;li&gt;</code> 태그는 하나의 필드를 포함하고 있습니다. </p><p><br>이는, <code>&lt;ul&gt;</code> 혹은 <code>&lt;/ul&gt;</code> 을 포함하고 있지 않습니다. </p><p><br>따라서, 여러분들은 유연하게 <code>&lt;ul&gt;</code>에 어떤 HTML 속성이든지 지정해줄수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [4]: f.as_ul()                                                                                                                                                         </span><br><span class="line">Out[4]: '&lt;li&gt;&lt;label for="id_subject"&gt;Subject:&lt;/label&gt; </span><br><span class="line">&lt;input type="text" name="subject" maxlength="100" required id="id_subject"&gt;&lt;/li&gt;</span><br><span class="line">\n&lt;li&gt;&lt;label for="id_message"&gt;Message:&lt;/label&gt; </span><br><span class="line">&lt;textarea name="message" cols="40" rows="10" required id="id_message"&gt;\n</span><br><span class="line">&lt;/textarea&gt;&lt;/li&gt;\n</span><br><span class="line">&lt;li&gt;&lt;label for="id_sender"&gt;Sender:&lt;/label&gt; </span><br><span class="line">&lt;input type="email" name="sender" required id="id_sender"&gt;&lt;/li&gt;</span><br><span class="line">\n&lt;li&gt;&lt;label for="id_cc_myself"&gt;Cc myself:&lt;/label&gt;</span><br><span class="line">&lt;input type="checkbox" name="cc_myself" id="id_cc_myself"&gt;&lt;/li&gt;'</span><br></pre></td></tr></table></figure><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/20/Form-API-8%ED%8E%B8-Form-as-ul/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 7편 - HTML 로 폼 출력하기 - as_p()</title>
      <link>http://djangojeng-e.github.io/2020/10/20/Form-API-7%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0-as-p/</link>
      <guid>http://djangojeng-e.github.io/2020/10/20/Form-API-7%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0-as-p/</guid>
      <pubDate>Mon, 19 Oct 2020 23:40:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Form-as-p&quot;&gt;&lt;a href=&quot;#Form-as-p&quot; class=&quot;headerlink&quot; title=&quot;Form.as_p()&quot;&gt;&lt;/a&gt;Form.as_p()&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;as_p() 는 form 을 &lt;co
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Form-as-p"><a href="#Form-as-p" class="headerlink" title="Form.as_p()"></a>Form.as_p()</h2><br><blockquote><p>as_p() 는 form 을 <code>&lt;p&gt;</code> 태그들로 렌더링 해줍니다. </p><p>각 <code>&lt;p&gt;</code> 태그는 하나의 필드를 가지고 있습니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm() </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 폼 인스턴스를 생성 한뒤에 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> f.as_p() 를 호출하면, </span></span><br><span class="line"></span><br><span class="line">f.as_p()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 폼의 각 필드들이 &lt;p&gt;태그로 감싸져서 렌더링 되는것을 확인할수 있습니다 </span></span><br><span class="line"></span><br><span class="line">In [2]: f = ContactForm()                                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [3]: f.as_p()                                                                                                                                                          </span><br><span class="line">Out[3]: '&lt;p&gt;&lt;label for="id_subject"&gt;Subject:&lt;/label&gt; </span><br><span class="line">&lt;input type="text" name="subject" maxlength="100" required id="id_subject"&gt;&lt;/p&gt;</span><br><span class="line">\n&lt;p&gt;&lt;label for="id_message"&gt;Message:&lt;/label&gt; </span><br><span class="line">&lt;textarea name="message" cols="40" rows="10" required id="id_message"&gt;\n&lt;/textarea&gt;&lt;/p&gt;</span><br><span class="line">\n&lt;p&gt;&lt;label for="id_sender"&gt;Sender:&lt;/label&gt; </span><br><span class="line">&lt;input type="email" name="sender" required id="id_sender"&gt;&lt;/p&gt;</span><br><span class="line">\n&lt;p&gt;&lt;label for="id_cc_myself"&gt;Cc myself:&lt;/label&gt; </span><br><span class="line">&lt;input type="checkbox" name="cc_myself" id="id_cc_myself"&gt;&lt;/p&gt;'</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/20/Form-API-7%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0-as-p/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 6편 - HTML 로 폼 출력하기</title>
      <link>http://djangojeng-e.github.io/2020/10/19/Form-API-6%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/19/Form-API-6%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Mon, 19 Oct 2020 11:52:31 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Outputting-forms-as-HTML&quot;&gt;&lt;a href=&quot;#Outputting-forms-as-HTML&quot; class=&quot;headerlink&quot; title=&quot;Outputting forms as HTML&quot;&gt;&lt;/a&gt;Outputting forms as HTML&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;폼 객체의 두번째 작업은, 스스로 HTML 태그로 렌더를 해주는것입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;forms.py 가 아래와 같이 작성 되어 있고. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; forms &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContactForm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forms.Form)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subject = forms.CharField(max_length=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message = forms.CharField(widget=forms.Textarea)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sender = forms.EmailField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc_myself = forms.BooleanField(required=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;shell 에서 아래와 같이 폼을 프린트 해보면, &lt;/p&gt;
&lt;p&gt;폼이 저절로 HTML 로 렌더되는것을 확인할수 있습니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;



&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from classviewsforms.forms import ContactForm &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = ContactForm() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Outputting-forms-as-HTML"><a href="#Outputting-forms-as-HTML" class="headerlink" title="Outputting forms as HTML"></a>Outputting forms as HTML</h2><br><p>폼 객체의 두번째 작업은, 스스로 HTML 태그로 렌더를 해주는것입니다. </p><br><p>forms.py 가 아래와 같이 작성 되어 있고. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    subject = forms.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    message = forms.CharField(widget=forms.Textarea)</span><br><span class="line">    sender = forms.EmailField()</span><br><span class="line">    cc_myself = forms.BooleanField(required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>shell 에서 아래와 같이 폼을 프린트 해보면, </p><p>폼이 저절로 HTML 로 렌더되는것을 확인할수 있습니다</p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from classviewsforms.forms import ContactForm </span><br><span class="line"></span><br><span class="line">f = ContactForm() </span><br><span class="line"></span><br><span class="line">print(f)</span><br></pre></td></tr></table></figure><br><a id="more"></a><p>만약 폼이 데이터를 가지고 있으면, HTML 로 출력 될때, HTML 태그는 데이터를 적절하게 포함하고 있습니다. </p><br><p>예를들어, 필드가 <code>&lt;input type=&quot;text&quot;&gt;</code> 라고 표시가 되어 있으면, 데이터는 value 속성에 있을것입니다. </p><p><br>만약 필드가 <code>&lt;input type=&quot;checkbox&quot;&gt;</code>로 표시되어 있으면, 적절한 경우, checked 를 포함하고 있을겁니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">In [4]: data = &#123;'subject': 'hello', </span></span><br><span class="line"><span class="xml">   ...:         'message': 'Hi there', </span></span><br><span class="line"><span class="xml">   ...:         'sender': 'foo@example.com', </span></span><br><span class="line"><span class="xml">   ...:         'cc_myself': True&#125;                                                                </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [5]: f = ContactForm(data)                                                                     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [6]: print(f)                                                                                  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_subject"</span>&gt;</span>Subject:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">value</span>=<span class="string">"hello"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">required</span> <span class="attr">id</span>=<span class="string">"id_subject"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_message"</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">cols</span>=<span class="string">"40"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">required</span> <span class="attr">id</span>=<span class="string">"id_message"</span>&gt;</span></span></span><br><span class="line"><span class="xml">Hi there<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_sender"</span>&gt;</span>Sender:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"sender"</span> <span class="attr">value</span>=<span class="string">"foo@example.com"</span> <span class="attr">required</span> <span class="attr">id</span>=<span class="string">"id_sender"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_cc_myself"</span>&gt;</span>Cc myself:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"cc_myself"</span> <span class="attr">id</span>=<span class="string">"id_cc_myself"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><p>이런 기본 출력 방식은, 각 필드들에 <code>&lt;tr&gt;</code> 을 가지고 있는, 그리고 두개의 컬럼으로 되어 있는 HTML 테이블이 됩니다. 아래 사항들을 짚고 넘어갑니다.  </p><br><ul><li>유연성을 위해서, 폼의 기본 출력값은 <code>&lt;table&gt;&lt;/table&gt;</code> 태그를 가지고 있지 않습니다 </li><li><code>&lt;form&gt;&lt;/form&gt;</code> 태그도 가지고 있지 않습니다 </li><li><code>&lt;input type=&quot;submit&quot;&gt;</code> 태그도 가지고 있지 않습니다. </li></ul><br><blockquote><p>위에 있는 태그들이 기본 출력에 포함되지 않습니다. </p><p>따라서, HTML 템플릿에 위 3개의 테그는 여러분들이 필요에 의해서 추가해 주어야 할 테그들 입니다 <br></p><p>추가적으로, POST 폼을 사용하기전에 csrf_token 을 사용하는것도 잊지 않아야 합니다! </p></blockquote><br><ul><li>각 필드 타입은, 기본 HTML 태그를 가지고 있습니다. 예를들어 , </li></ul><ul><li><p>CharField 는 <code>&lt;input type=&quot;text&quot;&gt;</code></p></li><li><p>EmailField 는 <code>&lt;input type=&quot;email&quot;&gt;</code></p></li><li><p>BooleanField(null=False) 는 <code>&lt;input type=&quot;checkbox&quot;&gt;</code> </p></li></ul><pre><code>이 태그들은 기본값일 뿐입니다. 우리는 widget 을 사용하여, 어떤 HTML 을 사용할것인지 지정할수 있습니다. </code></pre><br><ul><li>각 테그를 위한 HTML 이름은, ContactForm 클래스 안 속성이름을 직접 가져옵니다 </li><li>각 필드를 위한 label. 예) Subject, Message, Cc myself 들은 필드명의 언더스코어를 공백으로 전환하고, 첫번째 글자를 대문자해서 생겨납니다. 이것도 그저 기본값일 뿐입니다. 우리는 이 label 도 수동으로 지정할수 있습니다 </li><li>각 텍스트 레이블은 <code>&lt;label&gt;</code> HTML 태그안에 감싸져 있습니다. 이는 필드의 id 를 가르키고 있습니다. id 는 필드명앞에 id 를 붙여서 생성됩니다. id 속성과 <code>&lt;label&gt;</code> 태그들은 기본값으로 출력값에 포함되어 있습니다만. 이 동작도 변경할수 있습니다. </li><li>출력되는 HTML 은 HTML5 문법을 사용합니다. </li></ul><br><p>print 를 사용하여 form 을 출력했을때, <code>&lt;table&gt;</code> 이 기본 출력 스타일 일지라도, 다른 출력 스타일들이 존재할수 있습니다. 각 스타일은 폼 객체의 메서드로 존재하고. 각 렌더링 메서드는 문자열을 반환합니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/19/Form-API-6%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 5편 -Clean 데이터에 접근하기</title>
      <link>http://djangojeng-e.github.io/2020/10/18/Form-API-5%ED%8E%B8-Clean-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/18/Form-API-5%ED%8E%B8-Clean-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 18 Oct 2020 07:42:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Accessing-“clean”-data&quot;&gt;&lt;a href=&quot;#Accessing-“clean”-data&quot; class=&quot;headerlink&quot; title=&quot;Accessing “clean” data&quot;&gt;&lt;/a&gt;Accessing “clean” data&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Form-cleaned-data&quot;&gt;&lt;a href=&quot;#Form-cleaned-data&quot; class=&quot;headerlink&quot; title=&quot;Form.cleaned_data&quot;&gt;&lt;/a&gt;Form.cleaned_data&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;폼안에 각 필드들은, 데이터 검증뿐만 아니라, “cleaning” (정화) 하는 역할도 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;cleaning &lt;/p&gt;
&lt;p&gt;유효하고 일관적인 포맷으로 정형화 시킵니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;이는 아주 좋은 기능입니다. 왜냐하면, 특정 필드가 여러 방법으로 입력되고, 일관적인 아웃풋을 만들어 내기 때문입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;예를들어, DateField 는 입력값을 python 의 datetime.date 객체로 정형화 시킵니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;‘1994-07-15’ 같이, 문자열 형태, datetime.date 객체 혹은 다른 포맷들이든 상관없이. 유효하기만 하면, DateField 는 언제나 datetime.date 객체로 정형화 시킵니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;폼 인스턴스를 데이터와 함께 생성하고, 검증하였으면, &lt;/p&gt;
&lt;p&gt;폼의 cleaned_data 속성에 접근하여, 깔끔한 데이터에 엑세스 할수 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [1]: data = &amp;#123;&#39;subject&#39;: &#39;hello&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;message&#39;: &#39;Hi there&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;sender&#39;: &#39;foo@example.com&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;cc_myself&#39;: True&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [4]: f = ContactForm(data)                                                                                                                                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [5]: f.is_valid()                                                                                                                                                      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[5]: True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [6]: f.cleaned_data                                                                                                                                                    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[6]: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&#39;subject&#39;: &#39;hello&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &#39;message&#39;: &#39;Hi there&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &#39;sender&#39;: &#39;foo@example.com&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &#39;cc_myself&#39;: True&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;여기서 꼭 알아야 할 부분은, cleaned_data 는 사전형태로. 깨끗한 데이터를 가지고 있습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Accessing-“clean”-data"><a href="#Accessing-“clean”-data" class="headerlink" title="Accessing “clean” data"></a>Accessing “clean” data</h2><br><h3 id="Form-cleaned-data"><a href="#Form-cleaned-data" class="headerlink" title="Form.cleaned_data"></a>Form.cleaned_data</h3><br><p>폼안에 각 필드들은, 데이터 검증뿐만 아니라, “cleaning” (정화) 하는 역할도 합니다. </p><br><blockquote><p>cleaning </p><p>유효하고 일관적인 포맷으로 정형화 시킵니다 </p></blockquote><br><p>이는 아주 좋은 기능입니다. 왜냐하면, 특정 필드가 여러 방법으로 입력되고, 일관적인 아웃풋을 만들어 내기 때문입니다. </p><br><p>예를들어, DateField 는 입력값을 python 의 datetime.date 객체로 정형화 시킵니다. </p><br><p>‘1994-07-15’ 같이, 문자열 형태, datetime.date 객체 혹은 다른 포맷들이든 상관없이. 유효하기만 하면, DateField 는 언제나 datetime.date 객체로 정형화 시킵니다. </p><br><blockquote><p>폼 인스턴스를 데이터와 함께 생성하고, 검증하였으면, </p><p>폼의 cleaned_data 속성에 접근하여, 깔끔한 데이터에 엑세스 할수 있습니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [1]: data = &#123;'subject': 'hello', </span><br><span class="line">   ...:         'message': 'Hi there', </span><br><span class="line">   ...:         'sender': 'foo@example.com', </span><br><span class="line">   ...:         'cc_myself': True&#125;     </span><br><span class="line"></span><br><span class="line">In [4]: f = ContactForm(data)                                                                                                                                             </span><br><span class="line"></span><br><span class="line">In [5]: f.is_valid()                                                                                                                                                      </span><br><span class="line">Out[5]: True</span><br><span class="line"></span><br><span class="line">In [6]: f.cleaned_data                                                                                                                                                    </span><br><span class="line">Out[6]: </span><br><span class="line">&#123;'subject': 'hello',</span><br><span class="line"> 'message': 'Hi there',</span><br><span class="line"> 'sender': 'foo@example.com',</span><br><span class="line"> 'cc_myself': True&#125;</span><br></pre></td></tr></table></figure><br><p>여기서 꼭 알아야 할 부분은, cleaned_data 는 사전형태로. 깨끗한 데이터를 가지고 있습니다. </p><p><br><a id="more"></a></p><p>CharField 혹은 EmailField 같은 텍스트 기반 필드들은, 언제나 입력값을 문자열로 정화 시킨다는것을 숙지해야 합니다. 우리는 인코딩 시에 이것에 대한것을 나중에 다룰겁니다. </p><br><p>만약, 여러분들의 데이터가 검증되지 않는다면, cleaned_data 사전은 오직 유효한 필드들만 가지게 됩니다. </p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [7]: data &#x3D; &#123;&#39;subject&#39;: &#39;&#39;, </span><br><span class="line">   ...:         &#39;message&#39;: &#39;Hi there&#39;, </span><br><span class="line">   ...:         &#39;sender&#39;: &#39;invalid email address&#39;, </span><br><span class="line">   ...:         &#39;cc_myself&#39;: True&#125;                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [8]: f &#x3D; ContactForm(data)                                                                                                                                        </span><br><span class="line"></span><br><span class="line">In [9]: f.is_valid()                                                                                                                                                 </span><br><span class="line">Out[9]: False</span><br><span class="line"></span><br><span class="line">In [10]: f.cleaned_data                                                                                                                                              </span><br><span class="line">Out[10]: &#123;&#39;message&#39;: &#39;Hi there&#39;, &#39;cc_myself&#39;: True&#125;</span><br></pre></td></tr></table></figure><br><blockquote><p>폼을 정의할때, 추가적인 데이터를 전달한다 하더라도, </p><p>cleaned_data 는 언제나 폼에 정의된 필드들에 대해서만 key 값들을 가질겁니다. </p></blockquote><br><p>아래 예시에서는, ContactForm 생성자에, 여러가지 추가적인 필드를 전달하지만, cleaned_data 는 오직 폼의 필드들만 포함하는것을 확인 할수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [11]: data = &#123;'subject': 'hello', </span><br><span class="line">    ...:         'message': 'Hi there', </span><br><span class="line">    ...:         'sender': 'foo@example.com', </span><br><span class="line">    ...:         'extra_field_1': 'foo', </span><br><span class="line">    ...:         'extra_field_2': 'bar', </span><br><span class="line">    ...:         'extra_field_3': 'baz'&#125;                                                                                                                             </span><br><span class="line"></span><br><span class="line">In [12]: f = ContactForm(data)                                                                                                                                       </span><br><span class="line"></span><br><span class="line">In [13]: f.is_valid()                                                                                                                                                </span><br><span class="line">Out[13]: True</span><br><span class="line"></span><br><span class="line">In [14]: f.cleaned_data                                                                                                                                              </span><br><span class="line">Out[14]: </span><br><span class="line">&#123;'subject': 'hello',</span><br><span class="line"> 'message': 'Hi there',</span><br><span class="line"> 'sender': 'foo@example.com',</span><br><span class="line"> 'cc_myself': False&#125;</span><br></pre></td></tr></table></figure><br><br><blockquote><p>폼이 유효할때, </p><p>데이터가 어떤 옵션 필드들에 대한 값을 포함하고 있지 않더라도, </p><p>cleaned_data  는 폼의 모든 필드들에 대한 key 와 value 들을 포함합니다. </p></blockquote><br><p>아래 예시에서, 데이터 사전은, nick_name 필드에 대한 값을 포함하고 있지 않습니다. </p><p><br>하지만, cleaned_data 는 이 필드에 대한 값을 비어 있는 값으로 포함하고 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n [1]: from forms_more_on_fields.forms import OptionalPersonForm                                                                                                    </span><br><span class="line"></span><br><span class="line">In [2]: data = &#123;'first_name': 'John', 'last_name': 'Lennon'&#125;    </span><br><span class="line"></span><br><span class="line">In [4]: f = OptionalPersonForm(data)                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [5]: f.is_valid()                                                                                                                                                 </span><br><span class="line">Out[5]: True</span><br><span class="line"></span><br><span class="line">In [6]: f.cleaned_data                                                                                                                                               </span><br><span class="line">Out[6]: &#123;'first_name': 'John', 'last_name': 'Lennon', 'nick_name': ''&#125;</span><br></pre></td></tr></table></figure><br><p>위의 예시에서 보다싶이, nick_name 을 위한 cleaned_data 값은 빈 문자열로 지정 됩니다. 왜냐하면, nick_name 은 CharField 이고, CharField 는 빈값을 비어있는 문자열로 다루기 때문입니다. </p><br><p>각 필드 타입은, 필드의 빈 값이 무엇인지 알고 있습니다. 예를들면, DateField 는 비어있는 문자열 대신에 None 을 값으로 가집니다. </p><br><p>이 상황에 대한 각 필드의 동작에 대한 자세한 정보는, Built-in Field classes 안에 있는 ‘Empty Value’ 노트를 확인하면 됩니다. </p><br><p>여러분들은 특정 폼 필드들에 (필드명을 기반으로 한) 대한 검증작업을 실행 하기 위해서 코드를 작성합니다. 혹은, 폼 전체의 검증을 수행하기 위해서 작성합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/18/Form-API-5%ED%8E%B8-Clean-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 4편 - 폼 데이터 변경사항 체크하기</title>
      <link>http://djangojeng-e.github.io/2020/10/17/Form-API-4%ED%8E%B8-%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/17/Form-API-4%ED%8E%B8-%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 16 Oct 2020 22:47:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Checking-which-form-data-has-been-changed&quot;&gt;&lt;a href=&quot;#Checking-which-form-data-has-been-changed&quot; class=&quot;headerlink&quot; title=&quot;Checking w
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Checking-which-form-data-has-been-changed"><a href="#Checking-which-form-data-has-been-changed" class="headerlink" title="Checking which form data has been changed"></a>Checking which form data has been changed</h2><br><h3 id="폼-데이터-변경사항을-체크하기-위해서는-has-changed-메서드를-사용하면-됩니다"><a href="#폼-데이터-변경사항을-체크하기-위해서는-has-changed-메서드를-사용하면-됩니다" class="headerlink" title="폼 데이터 변경사항을 체크하기 위해서는 has_changed() 메서드를 사용하면 됩니다."></a>폼 데이터 변경사항을 체크하기 위해서는 <code>has_changed()</code> 메서드를 사용하면 됩니다.</h3><br><p>초기값에서부터 폼 데이터가 변경 되었는지 아니었는지 확인할 필요가 있을떄 체크 합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [2]: from forms_more_on_fields.forms import ContactForm  </span><br><span class="line"></span><br><span class="line">In [7]: data = &#123;'subject': 'hello', </span><br><span class="line">   ...:         'message': 'Hi there', </span><br><span class="line">   ...:         'sender': 'foo@example.com', </span><br><span class="line">   ...:         'cc_myself': True&#125;                                                                                 </span><br><span class="line"></span><br><span class="line">In [8]: f = ContactForm(data, initial=data)                                                                        </span><br><span class="line"></span><br><span class="line">In [9]: f.has_changed()                                                                                            </span><br><span class="line">Out[9]: False</span><br></pre></td></tr></table></figure><br><p>폼이 제출 되었을때, 우리는 다시 폼을 만들고 오리지널 데이터를 제공하여 비교가 이루어 질수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f = ContactForm(request.POST, initial=data)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f.has_changed()</span></span><br></pre></td></tr></table></figure><br><p>만약, request_POST 에서 온 data 가 initial 에 있는 데이터와 다르다면, has_changed() 는 True 를 반환할겁니다. 그렇지 않다면, False 를 반환합니다. </p><br><p>이 결과는, 폼안에 있는 각 필드에, has_changed() 를 호출함으로 계산됩니다. </p><br><h3 id="Form-changed-data"><a href="#Form-changed-data" class="headerlink" title="Form.changed_data"></a>Form.changed_data</h3><br><p>changed_data 속성은 initial 에 제공되었던 데이터와 다른 데이터들이, 폼을 통해 (보통 request.POST를 통해서) 온 데이터들과 다를때, 폼의 bound data 안에 있는 필드들의 이름을 가진 리스트를 반환합니다.  </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f = ContactForm(request.POST, initial=data)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">if</span> f.has_changed():</span></span><br><span class="line">...     print("The following fields changed: %s" % ", ".join(f.changed_data))</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f.changed_data</span></span><br><span class="line">['subject', 'message']</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/17/Form-API-4%ED%8E%B8-%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 3편 - Dynamic Initial Values</title>
      <link>http://djangojeng-e.github.io/2020/10/16/Form-API-3%ED%8E%B8-Dynamic-Initial-Values/</link>
      <guid>http://djangojeng-e.github.io/2020/10/16/Form-API-3%ED%8E%B8-Dynamic-Initial-Values/</guid>
      <pubDate>Fri, 16 Oct 2020 00:13:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Dynamic-initial-values&quot;&gt;&lt;a href=&quot;#Dynamic-initial-values&quot; class=&quot;headerlink&quot; title=&quot;Dynamic initial values&quot;&gt;&lt;/a&gt;Dynamic initial valu
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Dynamic-initial-values"><a href="#Dynamic-initial-values" class="headerlink" title="Dynamic initial values"></a>Dynamic initial values</h2><br><h3 id="Form-initial"><a href="#Form-initial" class="headerlink" title="Form.initial"></a>Form.initial</h3><br><p>initial 을 사용하여, 실행시에 폼필드의 초기값을 지정할수 있습니다. </p><p><br>예를들면, 여러분들은 현재 세션의 username 을 username 필드에 채워놓고 싶을지도 모릅니다<br></p><p>이런 동작을 구현하기 위해서, initial 인자를 Form 에 써줍니다. </p><br><p>이 인자가 주어질때는, 필드명이 초기값에 매핑되는 사전 형태여야 합니다. </p><br><p>오직 여러분들이 초기값을 지정하고 싶은 필드에만 포함합니다.<br> 폼안에 모든 필드에 쓰는것은 불필요한 일입니다.<br><br></p><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm(initial=&#123;<span class="string">'subject'</span>: <span class="string">'Hi there!'</span>&#125;)</span><br></pre></td></tr></table></figure><br><p>이 값들은 오직 unbound 폼에만 표시되고, 만약 특정 값이 주어지지 않을때에 fallback 값으로 사용되지 않습니다. </p><br><p>만약 필드가 initial 을 정의하고, initial 폼을 인스턴스화 할때 포함하면, 두번째가 먼저 택해집니다. 아래 예시에는, initial 이 필드에서 주어졌고, 폼 인스턴스에도 주어졌습니다. 두번째가 우선시 됩니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django import forms </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">class CommentForm(forms.Form):</span></span><br><span class="line"><span class="xml">name = forms.CharField(initial='class')</span></span><br><span class="line"><span class="xml">url = forms.URLField()</span></span><br><span class="line"><span class="xml">    comment = forms.CharField()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">In [1]: from forms_more_on_fields.forms import CommentForm                                                                                                                </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [2]: f = CommentForm(initial=&#123;'name': 'instance'&#125;, auto_id=False)                                                                                                      </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [3]: print(f)                                                                                                                                                          </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"instance"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Url:<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Comment:<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"comment"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><blockquote><p>Initial 값이 정해져 있어도, </p><p>폼의 인스턴스를 생성할때 initial 을 지정해주면, 인스턴스 생성할때 지정한 initial 값이 해당 필드에 지정이 됩니다. </p></blockquote><br><h3 id="Form-get-initial-for-field-field-field-name"><a href="#Form-get-initial-for-field-field-field-name" class="headerlink" title="Form.get_initial_for_field(field, field_name)"></a><code>Form.get_initial_for_field(field, field_name)</code></h3><br><p>get_initial_for_field() 를 사용하여, 폼 필드의 초기 데이터를 조회할수 있습니다. 이는 Form.initial 과 Field.initial 로 부터, 데이터를 조회하고, 그 순서대로 호출 가능한 초기값들을 평가합니다 .</p><p><br><br></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/16/Form-API-3%ED%8E%B8-Dynamic-Initial-Values/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
