<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Sun, 02 Aug 2020 12:43:07 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Django Models 6편 - Fields (verbose field names)</title>
      <link>http://djangojeng-e.github.io/2020/08/02/Django-Models-6%ED%8E%B8-Fields-verbose-field-names/</link>
      <guid>http://djangojeng-e.github.io/2020/08/02/Django-Models-6%ED%8E%B8-Fields-verbose-field-names/</guid>
      <pubDate>Sun, 02 Aug 2020 12:22:43 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Models-Fields-verbose-field-names&quot;&gt;&lt;a href=&quot;#Models-Fields-verbose-field-names&quot; class=&quot;headerlink&quot; title=&quot;Models - Fields (verbose field names)&quot;&gt;&lt;/a&gt;Models - Fields (verbose field names)&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;ForeignKey&lt;/code&gt;, &lt;code&gt;ManyToManyField&lt;/code&gt; 그리고 &lt;code&gt;OneToOneField&lt;/code&gt; 들을 제외한, 각 필드 타입은 선택적으로 첫번째 위치인자로, &lt;code&gt;verbose name&lt;/code&gt; 을 받습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;verbose name&lt;/code&gt; 이 주어지지 않았을때는, Django 는 자동으로 field 의 속성명의 언더스코어를 공백으로 전환하여 verbose name 을 생성합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;verbose name 은 &lt;/p&gt;
&lt;p&gt;사용자가 사용하는 자세한 이름을 의미합니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;verbose name&lt;/code&gt; 을 지정하지 않으면, 어드민에 표시되는 이름이 이상하다는것을 느낄수 있을겁니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Models-Fields-verbose-field-names"><a href="#Models-Fields-verbose-field-names" class="headerlink" title="Models - Fields (verbose field names)"></a>Models - Fields (verbose field names)</h2><br><p><code>ForeignKey</code>, <code>ManyToManyField</code> 그리고 <code>OneToOneField</code> 들을 제외한, 각 필드 타입은 선택적으로 첫번째 위치인자로, <code>verbose name</code> 을 받습니다. </p><br><p><code>verbose name</code> 이 주어지지 않았을때는, Django 는 자동으로 field 의 속성명의 언더스코어를 공백으로 전환하여 verbose name 을 생성합니다. </p><br><blockquote><p>verbose name 은 </p><p>사용자가 사용하는 자세한 이름을 의미합니다 </p></blockquote><br><p><code>verbose name</code> 을 지정하지 않으면, 어드민에 표시되는 이름이 이상하다는것을 느낄수 있을겁니다. </p><br><a id="more"></a><br><blockquote><p>아래 예시에서, verbose name 은 “person’s first name” 입니다 </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first_name = models.CharField(<span class="string">"person's first name"</span>, max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>아래 예시에서는, verbose name 이 “first name” 입니다.</p><p>필드 타입의 첫번째 인자로, verbose name 이 명시되지 않았기 때문에, </p><p>필드명 first_name 에서, 언더스코어를 공백으로 전환하여 verbose name 을 표시합니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>verbose_name 을 정의한 모델의 예시입니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Members</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'이름'</span>)</span><br><span class="line">    nick_name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">"닉네임"</span>)</span><br><span class="line">    birth_date = models.DateField(verbose_name=<span class="string">"생년월일"</span>, null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>위 Members 모델에서는, name, nick_name, birth_date 이 각각 한글로 표시된 verbose_name 들을 어드민에 표시할것입니다.  </p><br><h2 id="외래키-모델들"><a href="#외래키-모델들" class="headerlink" title="외래키 모델들"></a>외래키 모델들</h2><br><p>아직 살펴보지는 않았지만, <code>ForeignKey</code>, <code>ManyToManyField</code> 그리고 <code>OneToOneField</code> 들은 첫번째 인자로 모델 클래스가 옵니다. </p><blockquote><p>따라서, <code>verbose_name</code>을 키워드 인자로 사용해줍니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">poll = models.ForeignKey(Poll, on_delete=models.CASCADE, verbose_name=<span class="string">"the related poll"</span>)</span><br><span class="line"><span class="comment"># poll 은 ForeignKey (외래키) 로 Poll 이라는 클래스를 첫번째 인자로 받음 </span></span><br><span class="line"><span class="comment"># verbose_name 은 키워드 인자로 넣어줌 </span></span><br><span class="line"></span><br><span class="line">sites = models.ManyToManyField(Site, verbose_name=<span class="string">"list of sites"</span>)</span><br><span class="line"><span class="comment"># sites 는 ManyToManyField 로 Site 라는 클래스를 첫번째 인자로 받음 </span></span><br><span class="line"><span class="comment"># verbose_name 은 키워드 인자로 넣어줌 </span></span><br><span class="line"></span><br><span class="line">place = models.OneToOneField(Place, on_delete=models.CASCADE, verbose_name=<span class="string">'related place'</span>)</span><br><span class="line"><span class="comment"># place 는 OneToOneField 로 Place 라는 클래스를 첫번째 인자로 받음 </span></span><br><span class="line"><span class="comment"># verbose_name 은 키워드 인자로 넣어줌</span></span><br></pre></td></tr></table></figure><br><p>위의 예시에서는, 단지 <code>ForeignKey</code>, <code>ManyToManyField</code>  그리고 <code>OneToOneField</code> 를 사용할때에, verbose_name 이 어떻게 키워드 인자로 들어가는지에 대한 코딩 스타일만 보여주고 있습니다. </p><br><blockquote><p>관례적으로, </p><p>verbose_name 의 첫번째 글자는 대문자로 써주지 않습니다. </p><p>Django 가 필요할때 자동으로 첫번째 글자를 대문자화 해줍니다. </p></blockquote><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>verbose_name 에 대해서 알아보았습니다.<br>verbose_name 을 사용하면, 어떤것이 달라지는지 완벽한 예시가 있으면 좋았을텐데, <br><br></p><p>현재까지는, verbose_name 을 사용할경우, 해당 필드가 어드민에 표시되는 바가 달라지게 된다는점을 알고 넘어가면 될것 같습니다. </p><br><p>지난 포스팅에서 Runner 모델을 작성했었는데, 아래와 같이, <br></p><p>name 필드에 verbose_name 을 추가해주었습니다. “러너 이름” </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runner</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    MedalType = models.TextChoices(<span class="string">'MedalType'</span>, <span class="string">'GOLD SILVER BRONZE'</span>)</span><br><span class="line">    name = models.CharField(<span class="string">"러너이름"</span>, max_length=<span class="number">60</span>)</span><br><span class="line">    medal = models.CharField(blank=<span class="literal">True</span>, choices=MedalType.choices, max_length=<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name + <span class="string">" "</span> + self.medal</span><br></pre></td></tr></table></figure><br><p>위와같이 verbose_name 을 모델 필드에 추가하면, 아래처럼 어드민에 “러너이름” 이라고 표시가 됩니다. </p><br><img src="/2020/08/02/Django-Models-6%ED%8E%B8-Fields-verbose-field-names/image1.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/02/Django-Models-6%ED%8E%B8-Fields-verbose-field-names/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 5편 - Fields (Automatic primary key fields)</title>
      <link>http://djangojeng-e.github.io/2020/08/02/Django-Models-5%ED%8E%B8-Fields-Automatic-primary-key-fields/</link>
      <guid>http://djangojeng-e.github.io/2020/08/02/Django-Models-5%ED%8E%B8-Fields-Automatic-primary-key-fields/</guid>
      <pubDate>Sun, 02 Aug 2020 10:22:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Models-Fields-Automatic-primary-key&quot;&gt;&lt;a href=&quot;#Models-Fields-Automatic-primary-key&quot; class=&quot;headerlink&quot; title=&quot;Models - Fields(Automa
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Models-Fields-Automatic-primary-key"><a href="#Models-Fields-Automatic-primary-key" class="headerlink" title="Models - Fields(Automatic primary key)"></a>Models - Fields(Automatic primary key)</h2><br><p>기본값으로, Django 는 각 모델에 다음과 같은 field 를 부여 합니다. </p><p>아래 필드는, 해당 모델에 명시적으로 정의해 놓지 않아도, 자동으로 적용이 되어 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>이는, 자동으로 증가하는 primary key 입니다. </p><br><p>만약 사용자 정의의 primary key  를 명시하고 싶으면, primary_key 로 사용하고 싶은 필드에, <code>primary_key=True</code> 를 명시해주면 됩니다. </p><br><p>만약, 여러분들이 명시적으로, 어떠한 필드에 <code>primary_key = True</code> 를 설정한것을 보면, django 는 자동으로 id 컬럼을 추가하지 않을것입니다. </p><br><p>각 모델은, 정확히 하나의 필드가 primary_key = True 를 가질것을 요구합니다 (두개 이상의 필드가 primary_key=True  를 가질수는 없다는 이야기 입니다) </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/02/Django-Models-5%ED%8E%B8-Fields-Automatic-primary-key-fields/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 4편 - Fields (Field Options)</title>
      <link>http://djangojeng-e.github.io/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/</link>
      <guid>http://djangojeng-e.github.io/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/</guid>
      <pubDate>Sun, 02 Aug 2020 01:53:03 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Field-Options&quot;&gt;&lt;a href=&quot;#Field-Options&quot; class=&quot;headerlink&quot; title=&quot;Field Options&quot;&gt;&lt;/a&gt;Field Options&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;각각의 필드들은, 해당 필드에 특화된 독립 변수들을 갖습니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;예를들면, &lt;/p&gt;
&lt;p&gt;CharField 와 CharField 의 서브클래스들은, &lt;/p&gt;
&lt;p&gt;max_length 같은, 데이터를 저장하기 위해서 길이를 정의하는 독립된 변수들을 갖게 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;또한, 모든 필드 타입들에 유효한, 공통 독립 변수들도 존재합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;모든 변수들은, 선택적으로 사용할수 있고, reference 문서에 완벽하게 설명이 되어 있지만. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;strong&gt;가장 공통적으로 많이 사용되는것들을 정리하고 넘어갑니다.&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Field-Options"><a href="#Field-Options" class="headerlink" title="Field Options"></a>Field Options</h2><br><p>각각의 필드들은, 해당 필드에 특화된 독립 변수들을 갖습니다. </p><br><blockquote><p>예를들면, </p><p>CharField 와 CharField 의 서브클래스들은, </p><p>max_length 같은, 데이터를 저장하기 위해서 길이를 정의하는 독립된 변수들을 갖게 됩니다. </p></blockquote><br><p>또한, 모든 필드 타입들에 유효한, 공통 독립 변수들도 존재합니다. </p><p><br>모든 변수들은, 선택적으로 사용할수 있고, reference 문서에 완벽하게 설명이 되어 있지만. </p><p><br><strong>가장 공통적으로 많이 사용되는것들을 정리하고 넘어갑니다.</strong> <br></p><br><a id="more"></a> <br><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><br><p><code>null=True</code> 일 경우에, Django 는 빈값을 NULL 로 데이터베이스에 저장합니다. </p><p>기본값은 False 입니다. </p><br><h3 id="blank"><a href="#blank" class="headerlink" title="blank"></a>blank</h3><br><p><code>blank=True</code> 일 경우에, 필드는 비어있는 값이 허용됩니다. 기본값은 False 입니다. </p><br><br><h2 id="NULL-vs-Blank"><a href="#NULL-vs-Blank" class="headerlink" title="NULL vs Blank?"></a>NULL vs Blank?</h2><br><blockquote><p>blank 와 null 은 다르다는것을 숙지해야 합니다. </p><p>null 은 순수하게 데이터베이스 측면에서 생각하는 값이고, </p><p>blank 는 검증 혹은 유효성 검사 측면에서 바라보는것입니다. </p><br><p>null 은 필드의 값이 NULL (정보없음) 으로 저장되는것을 허용하고, </p><p>blank 는 필드가 폼(입력 양식) 에서 비어있는 채로 저장되는것을 허용합니다. </p><br><p>blank = false 이면, 해당 필드가 비어있는채로 저장되는것을 허용하지 않습니다. </p><p>비슷하게도, null=false 일 경우에, 필드의 값이 NULL (정보없음) 으로 저장되는것을 허용하지 않습니다. </p></blockquote><br><h3 id="choices"><a href="#choices" class="headerlink" title="choices"></a>choices</h3><br><p>2개로된 튜플은, 필드의 선택값으로 사용할수 있습니다. </p><p><br>튜플이 주어지면, 기본 양식 폼 위젯은 문자열 필드 대신에 select box 가 될것이고, 튜플에 들어있는 선택들로, 선택이 제한됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">YEAR_IN_SCHOOL_CHOICES = [</span><br><span class="line">    (<span class="string">'FR'</span>, <span class="string">'Freshman'</span>), </span><br><span class="line">    (<span class="string">'SO'</span>, <span class="string">'Sophomore'</span>), </span><br><span class="line">    (<span class="string">'JR'</span>, <span class="string">'Junior'</span>), </span><br><span class="line">    (<span class="string">'SR'</span>, <span class="string">'Senior'</span>), </span><br><span class="line">    (<span class="string">'GR'</span>, <span class="string">'Graduate'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p>여기서 알아야 할게, </p><br><blockquote><p>Choices 의 순서가 바뀔대마다, 새로운 migration  이 생겨납니다. </p></blockquote><br><blockquote><p>또한, </p><p>튜플의 첫번째 값은, 데이터베이스에 저장되는 값이고, </p><p>튜플의 두번째 값은, 필드의 입력양식 위젯에 표시됩니다. 즉, 이 모델을 가지고 폼 (입력양식) 을 만들었을때, 입력양식 위젯에 표시되는것은, 튜플의 두번째 값이고. </p><p>실제 사용자가 이 입력양식을 통해서 값을 입력하여 데이터베이스에 저장할시에는, 튜플의 첫번째 값으로 저장이 됩니다. </p></blockquote><br><br><p>모델 인스턴스가 주어졌을때, Choices 를 가진 필드의 표시값은, get_shirt_size_display() 메서드를 사용해서 접근할수 있습니다. 아래 예시를 통해서 알아봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    SHIRT_SIZES = (</span><br><span class="line">    (<span class="string">'S'</span>, <span class="string">'Small'</span>),</span><br><span class="line">        (<span class="string">'M'</span>, <span class="string">'Medium'</span>),</span><br><span class="line">        (<span class="string">'L'</span>, <span class="string">'Large'</span>),</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">60</span>)</span><br><span class="line">    shirt_size = models.CharField(max_length=<span class="number">1</span>, choices=SHIRT_SIZES)</span><br></pre></td></tr></table></figure><br><h4 id="choices-값의-표시"><a href="#choices-값의-표시" class="headerlink" title="choices 값의 표시"></a>choices 값의 표시</h4><p><br><br></p><ul><li>shirt_size 가 데이터베이스에 저장될때에는, 튜플의 첫번째 값들인, S, M, L 로 저장이 되고 </li><li>shirt_size 가 폼에 표시될때는, Small, Medium, Large 로 표시가 됩니다 </li><li>이렇게 데이터베이스 외의 위치에서 표시되는 값들은, get_shirt_size_display() 로 호출할수 있습니다. </li></ul><br><br><blockquote><p>실제로 model 을 작성해서 테스트 해봅니다 </p><p>shell 에 접속하여, 아래 코드를 입력합니다. </p></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 에 접속 </span></span><br><span class="line">python manage.py shell </span><br><span class="line"></span><br><span class="line"><span class="comment"># shell 접속후에 실습 </span></span><br><span class="line"></span><br><span class="line">In [1]: p = Person(name=<span class="string">"Superman"</span>, shirt_size=<span class="string">"L"</span>)                                   </span><br><span class="line"></span><br><span class="line">In [2]: <span class="comment"># Person의 name이 Superman, 셔츠 사이즈가 L 인 인스턴스 생성                                                                                                      </span></span><br><span class="line"></span><br><span class="line">In [3]: p.save()                                                                                                                                                          </span><br><span class="line"></span><br><span class="line">In [4]: <span class="comment">#  p.save() 를 호출하여, p 를 데이터베이스에 저장                                                                                                                 </span></span><br><span class="line"></span><br><span class="line">In [5]: p.shirt_size                                                                                                                                                      </span><br><span class="line">Out[5]: <span class="string">'L'</span></span><br><span class="line"></span><br><span class="line">In [6]: p.get_shirt_size_display()                                                                                                                                        </span><br><span class="line">Out[6]: <span class="string">'Large'</span></span><br><span class="line"></span><br><span class="line">In [7]: <span class="comment"># p의 shirt_size의 display 값을 표시</span></span><br></pre></td></tr></table></figure><br><p>어드민에서 SHIRT_SIZE 는  Large 라고 표시됩니다.</p><br><img src="/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/image1.png" class=""><br><p>하지만, 정작 DB 에는, L 로 저장되어 있는것을 확인 할수 있습니다. </p><br><img src="/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/image2.png" class=""><br><br><h4 id="간단하게-choices-정의하기"><a href="#간단하게-choices-정의하기" class="headerlink" title="간단하게 choices 정의하기"></a>간단하게 choices 정의하기</h4><br><p>enumeration 클래스들을 사용해서 간단한 방법으로 choices 들을 정의할수 있습니다 </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">class Runner(models.Model);</span><br><span class="line">MedalType = models.TextChoices(<span class="string">'MedalType'</span>, <span class="string">'GOLD SILVER BRONZE'</span>)</span><br><span class="line"><span class="comment"># 튜플에서 두번째 값인, 'GOLD SILVER BRONZE' 가 선택할수 있는값이 됨 </span></span><br><span class="line">name = models.CharField(max_length=<span class="number">60</span>)</span><br><span class="line">medal = models.CharField(blank=<span class="literal">True</span>, choices=MedalType.choices, max_length=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>Runner 를 추가할때, GOLD SILVER BRONZE 셋중 하나를 선택해서 추가할수 있습니다. </p></blockquote><br><img src="/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/image3.png" class=""><p><br><br></p><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><br><p>필드의 기본값을 지정합니다. 기본값은 특정 값일수도 있고, 호출 가능한 객체일수도 있습니다. </p><p>호출 가능한 객체라면, 새로운 객체가 생성될때마다, 호출이 됩니다.<br></p><p>예) </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line">class Djangojeng_e(models.Model);</span><br><span class="line"><span class="comment"># 이름이 장고쟁이인 객체만 생성할수 있음 </span></span><br><span class="line">name = models.CharFied(max_length=<span class="number">20</span>, default=<span class="string">'장고쟁이'</span>)</span><br></pre></td></tr></table></figure><br><h3 id="help-text"><a href="#help-text" class="headerlink" title="help_text"></a>help_text</h3><br><p>추가적인 help 텍스트가 입력양식 위젯과 함께 표시가 됩니다. 필드가 입력양식에서 사용되지 않더라도. </p><p><br>문서화 할때에 유용합니다 <br><br></p><h3 id="primary-key"><a href="#primary-key" class="headerlink" title="primary_key"></a>primary_key</h3><br><p><code>primary_key = True</code> 일때, 해당 필드는 모델의 primary key 가 됩니다. </p><br><p>모델안에 어떻나 필드도 primary_key = True 라고 명시하지 않은 경우에는, django가 자동적으로 IntegerField 를 추가하여, primary key 를 지니게 합니다. 딸사ㅓ, primary_key = True 라고 어떠한 필드에도 설정해줄 필요는 없습니다. 하지만, 기본 primary-key 동작을 오버라이드 하고 싶으면, 명시적으로 설정해 주면 됩니다.  <br><br></p><p>primary key 필드는 read-only 입니다.<br>만약, 이미 존재하는 객체의 primary key 값을 바꾸고 저장하면, 새로운 객체가 기존의 객체와 같이 생성이 됩니다. 예를들면, <br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 이름이 primary_key 값으로 되어있음</span></span><br></pre></td></tr></table></figure><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. name 이 '사과' 인 객체를 생성 </span></span><br><span class="line">fruit = Fruit.objects.create(name=<span class="string">'사과'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. name 을 '배' 로 바꾸어줌 </span></span><br><span class="line">fruit.name = <span class="string">'배'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 바뀐 name 을 데이터베이스에 저장 </span></span><br><span class="line">fruit.save() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 값 list 를 조회 </span></span><br><span class="line">Fruit.objects.values_list(<span class="string">'nam'</span>, flat=<span class="literal">True</span>)</span><br><span class="line">Out[<span class="number">4</span>]: &lt;QuerySet [<span class="string">'사과'</span>, <span class="string">'배'</span>]&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: Fruit.objects.all()                               <span class="comment"># 모든 객체 조회                                                                                                                 </span></span><br><span class="line">Out[<span class="number">5</span>]: &lt;QuerySet [&lt;Fruit: 사과&gt;, &lt;Fruit: 배&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># primary key 값인 name 을 바꾸고 저장했기 때문에, 새로운 객체인 '배' 가 생겨난것을 확인</span></span><br></pre></td></tr></table></figure><br><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><br><p>만일 True 일 경우, 해당 필드는 테이블 전체에서 고유한 값이여야 합니다. </p><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>공통된 필드 옵션에 대한 짧은 설명이었습니다. 더 많은 디테일들은, common model field option reference 문서에서 확인할수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 3편 - Fields (Field Types)</title>
      <link>http://djangojeng-e.github.io/2020/08/01/Django-Models-3%ED%8E%B8-Fields-Field-Types/</link>
      <guid>http://djangojeng-e.github.io/2020/08/01/Django-Models-3%ED%8E%B8-Fields-Field-Types/</guid>
      <pubDate>Sat, 01 Aug 2020 05:57:06 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Fields&quot;&gt;&lt;a href=&quot;#Fields&quot; class=&quot;headerlink&quot; title=&quot;Fields&quot;&gt;&lt;/a&gt;Fields&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;모델에서 가장 중요하고, 가장 요구되는 사항중 하나는. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;모델에서 정의하는 데이터베이스 필드들의 리스트 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;필드는 클래스 속성으로 정의되어 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;주의사항, &lt;/p&gt;
&lt;p&gt;필드명은, clean, save, delete 와 같은 model API 와 충돌할수 있는 이름으로 지으면 안됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h2><br><p>모델에서 가장 중요하고, 가장 요구되는 사항중 하나는. </p><p><br>모델에서 정의하는 데이터베이스 필드들의 리스트 입니다. </p><br><p>필드는 클래스 속성으로 정의되어 있습니다. </p><br><blockquote><p>주의사항, </p><p>필드명은, clean, save, delete 와 같은 model API 와 충돌할수 있는 이름으로 지으면 안됩니다. </p></blockquote><br><a id="more"></a> <br><p>예시 코드는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Musician</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">50</span>)  <span class="comment"># Musician class 의 속성 </span></span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    instrument = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Album</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    artist = models.ForiengKey(Musician, on_delete=models.CASCADE)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    release_date = models.DateField()</span><br><span class="line">    num_stars = models.IntegerField()</span><br></pre></td></tr></table></figure><br><br><h2 id="Field-Types"><a href="#Field-Types" class="headerlink" title="Field Types"></a>Field Types</h2><br><p>각 모델안에 필드들은 적절한 필드클래스의 인스턴스여야 합니다. </p><br><p>Django 는 필드 클래스에 정의되어 있는 type 들을 사용해서 여러가자 사항들을 결정합니다. </p><br><ul><li>INTEGER, VARCHAR, TEXT 같은 컬럼 타입을 결정하여, 데이터베이스가 어떤 종류의 데이터를 저장할건지 결정합니다 </li><li>폼 필드를 출력할때 어떤 기본  HTML 위젯을 사용할지 결정합니다 </li><li>DJango 의 어드민과 자동 생성되는 폼에서 사용할 최소한의 검증사항들을 결정합니다. </li></ul><br><p>Django 는 여러개의 내장 필드 타입들을 지원합니다. 필드타입의 리스트를 확인하고 싶다면,  model field reference 문서를 확인하면 됩니다. Django 의 내장 필드타입으로 충분하지 않다면, 본인 스스로 커스텀 필드를 작성할수도 있습니다. wrting custom model fields 문서를 참조하면 됩니다. </p><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>Django 에서 모델을 작성할때, models.py 안에 작성하는 클래스는 데이터베이스 테이블이 되고. </p><p><br>클래스 안의 속성들을 통해서 필드명과 데이터 타입을 정의할수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/01/Django-Models-3%ED%8E%B8-Fields-Field-Types/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 2편 - using models </title>
      <link>http://djangojeng-e.github.io/2020/07/31/Django-Models-2%ED%8E%B8-using-models/</link>
      <guid>http://djangojeng-e.github.io/2020/07/31/Django-Models-2%ED%8E%B8-using-models/</guid>
      <pubDate>Thu, 30 Jul 2020 22:54:42 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Using-models-모델-사용하기&quot;&gt;&lt;a href=&quot;#Using-models-모델-사용하기&quot; class=&quot;headerlink&quot; title=&quot;Using models (모델 사용하기)&quot;&gt;&lt;/a&gt;Using models (모델 사용하기)&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;앱-등록하기&quot;&gt;&lt;a href=&quot;#앱-등록하기&quot; class=&quot;headerlink&quot; title=&quot;앱 등록하기&quot;&gt;&lt;/a&gt;앱 등록하기&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;모델을 정의 한 후에 우리는, Django 에게 이 모델을 사용할것이라고 얘기해주어야 합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;Django 에게 이 모델을 사용할것이라고 알려주기 위해서는, &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;settings.py 에 있는 INSTALLED_APPS 에 해당 모듈명을 추가해 주어야 합니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;예를들어, &lt;code&gt;python manage.py startapp usemodel&lt;/code&gt; 명령어를 통해, usemodel 이라는 앱을 생성하였다고 가정하면, settings.py 파일에 INSTALLED_APPS 안에, 생성된 모델이 아래와 같이 등록 되어 있어야 합니다.  &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INSTALLED_APPS = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;usemodel&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Using-models-모델-사용하기"><a href="#Using-models-모델-사용하기" class="headerlink" title="Using models (모델 사용하기)"></a>Using models (모델 사용하기)</h2><br><h3 id="앱-등록하기"><a href="#앱-등록하기" class="headerlink" title="앱 등록하기"></a>앱 등록하기</h3><br><p>모델을 정의 한 후에 우리는, Django 에게 이 모델을 사용할것이라고 얘기해주어야 합니다. </p><p><br>Django 에게 이 모델을 사용할것이라고 알려주기 위해서는, </p><br><blockquote><p>settings.py 에 있는 INSTALLED_APPS 에 해당 모듈명을 추가해 주어야 합니다 </p></blockquote><br><p>예를들어, <code>python manage.py startapp usemodel</code> 명령어를 통해, usemodel 이라는 앱을 생성하였다고 가정하면, settings.py 파일에 INSTALLED_APPS 안에, 생성된 모델이 아래와 같이 등록 되어 있어야 합니다.  </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    <span class="string">'usemodel'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><br><a id="more"></a><br><h3 id="makemigrations"><a href="#makemigrations" class="headerlink" title="makemigrations"></a>makemigrations</h3><br><p>INSTALLED_APPS 에 새로운 앱을 추가해 주고, 해당 앱에 대한 모델을 작성해 주었으면, </p><p>데이터베이스에 적용을 해주어야 합니다. 하지만, 적용전에 <code>python manage.py makemigrations</code> 명령어를 통해서, 데이터베이스 적용 전에 migrations 파일을 만들어 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure><br><blockquote><p>해당 앱의 모델을 아직 작성하지 않아도, 위의 makemigrations 명령어는 정상으로 실행됩니다. </p><p>왜냐하면, 새로운 모델이 생성되었기 때문입니다. </p><p>이렇게 앱과 모델을 등록한다음에는, 앱의 모델을 변경할때마다, </p><p>makemigrations 와 migrate 명령어를 실행하여, 데이터베이스에 변경사항을 적용 해주어야 합니다. </p></blockquote><br><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><br><p>makemigrations 명령어를 실행 시켜 주었으면, <code>migrate</code> 명령어를 통해서, 데이터 베이스에 실제 적용을 합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><br><br><h2 id="모델을-사용하는-순서"><a href="#모델을-사용하는-순서" class="headerlink" title="모델을 사용하는 순서"></a>모델을 사용하는 순서</h2><br><ol><li>앱생성 </li><li>앱을 settings.py 에 등록 </li><li><code>python manage.py makemigrations</code></li><li><code>python manage.py migrate</code></li></ol>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/31/Django-Models-2%ED%8E%B8-using-models/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 1편 - Quick Example</title>
      <link>http://djangojeng-e.github.io/2020/07/30/Django-Models-1%ED%8E%B8-Quick-Example/</link>
      <guid>http://djangojeng-e.github.io/2020/07/30/Django-Models-1%ED%8E%B8-Quick-Example/</guid>
      <pubDate>Thu, 30 Jul 2020 11:39:34 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Models-Quick-example&quot;&gt;&lt;a href=&quot;#Models-Quick-example&quot; class=&quot;headerlink&quot; title=&quot;Models - Quick example&quot;&gt;&lt;/a&gt;Models - Quick example&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;Django 공식문서에 나와있는, models 에 대한 부분을 둘러봅니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;공식 문서에는 완벽한 번역본이 존재하지 않고, 설명이 너무 불충분해서, 초반에 공부할때에 많은 어려움이 있었습니다. &lt;/p&gt;
&lt;p&gt;물론,, 지금도 쉽지는 않지만.. 어쨋든, Django models 에 대한 포스팅을 시작합니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Models (모델)&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;모델은 당신의 데이터에 대한 정보를 가지고 있고, 당신의 데이터에 대한 정의를 내리는 하나의 소스 입니다.&lt;/p&gt;
&lt;p&gt;모델은 당신에게 필요하고 저장하고자 하는 필드들과 동작들에 대한 정보를 포함하고 있습니다&lt;/p&gt;
&lt;p&gt;각 모델들은, 보통 하나의 데이터 베이스 테이블로 매핑 됩니다.﻿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Models-Quick-example"><a href="#Models-Quick-example" class="headerlink" title="Models - Quick example"></a>Models - Quick example</h2><br><p>Django 공식문서에 나와있는, models 에 대한 부분을 둘러봅니다. </p><p><br>공식 문서에는 완벽한 번역본이 존재하지 않고, 설명이 너무 불충분해서, 초반에 공부할때에 많은 어려움이 있었습니다. </p><p>물론,, 지금도 쉽지는 않지만.. 어쨋든, Django models 에 대한 포스팅을 시작합니다. </p><br><br><blockquote><p><strong>Models (모델)</strong> </p><p>모델은 당신의 데이터에 대한 정보를 가지고 있고, 당신의 데이터에 대한 정의를 내리는 하나의 소스 입니다.</p><p>모델은 당신에게 필요하고 저장하고자 하는 필드들과 동작들에 대한 정보를 포함하고 있습니다</p><p>각 모델들은, 보통 하나의 데이터 베이스 테이블로 매핑 됩니다.﻿</p></blockquote><br><a id="more"></a><br><h2 id="기본-사항들"><a href="#기본-사항들" class="headerlink" title="기본 사항들"></a>기본 사항들</h2><br><ol><li>각 모델은 Python 클래스 이고, <code>django.db.models.Model</code> 의 서브 클래스 이다 </li><li>각 모델의 속성들은 데이터베이스 필드를 표현 합니다 </li><li>이 모든 정보들을 가지고, Django 는 자동으로 생성된 database-access API 를 제공합니다. </li></ol><br><br><h2 id="빠른-예제"><a href="#빠른-예제" class="headerlink" title="빠른 예제"></a>빠른 예제</h2><br><p>아래 예제는, first_name, last_name 정보를 가지는 Person 모델을 정의 합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Person(models.Model);</span><br><span class="line">first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><br><p>first_name 과 last_name 은 모델의 필드들입니다. 각 필드들은, 클래스의 속성들로 표현되어 있습니다. </p><br><p>그리고, 각 속성들은 database 컬럼들과 메칭 됩니다. </p><br><blockquote><p>처음에 공부할때, 데이터베이스의 Column 그리고 Field 에 대해서 잘 몰라서 </p><p>이해가 안갔었는데,  아래 그림을 가져와서 참고 합니다. </p></blockquote><br><img src="/2020/07/30/Django-Models-1%ED%8E%B8-Quick-Example/image1.png" class=""><br><ul><li>위의 모델에서  class Person 이라는 클래스는 데이터베이스 테이블명이 됩니다 </li><li>first_name 은 해당 테이블의 필드명이 되고, 최대 길이는 30자 입니다 </li><li>last_name 은 해당 테이블의 필드명이 되고, 최대 길이는 30자 입니다   </li></ul><br><blockquote><p>위의 Person 모델은 아래와 같은 데이터베이스 테이블을 생성합니다. </p></blockquote><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myapp_person (</span><br><span class="line">    <span class="string">"id"</span> <span class="built_in">serial</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="string">"first_name"</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">"last_name"</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><h2 id="기술적인-노트"><a href="#기술적인-노트" class="headerlink" title="기술적인 노트"></a>기술적인 노트</h2><br><ul><li>테이블의 이름은, myapp_person 으로 지정되어 있는데, 이것은 자동적으로 메타데이터에서 따옵니다. 하지만, 이 이름은 오버라이드 될수 있습니다 </li><li>id 필드는 자동으로 추가됩니다. 이 동작 방식도 수정될수는 있습니다 </li><li>이번 예제에서 사용된 CREATE TABLE SQL 구문은, PostgreSQL 구문을 사용한 형식입니다. 하지만, django 는 데이터베이스 백앤드를 당신의 settings.py 파일에 명시되어 있는 데이터베이스에 맞추어 사용합니다. </li></ul>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/30/Django-Models-1%ED%8E%B8-Quick-Example/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 33편 - Docker로 배포 (nginx 와 gunicorn)</title>
      <link>http://djangojeng-e.github.io/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/</link>
      <guid>http://djangojeng-e.github.io/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/</guid>
      <pubDate>Wed, 29 Jul 2020 05:16:23 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Docker로-배포-nginx-gunicorn&quot;&gt;&lt;a href=&quot;#Docker로-배포-nginx-gunicorn&quot; class=&quot;headerlink&quot; title=&quot;Docker로 배포 (nginx, gunicorn)&quot;&gt;&lt;/a&gt;Docker로 배포 (nginx, gunicorn)&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;연습 차원에서, Docker 에 nginx 와 gunicorn 을 적용하여 배포 연습을 진행 해 봅니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이전 포스팅하고는 조금 다른 방식으로 쓰는 예제를 찾아서, 이 프로젝트에 적용해 보려 합니다. 아래 내용대로 진행해보았지만, 배포 결과는 실패했습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이 포스팅에서는, 그냥 배포 시도 과정만을 담고 있습니다. &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Docker로-배포-nginx-gunicorn"><a href="#Docker로-배포-nginx-gunicorn" class="headerlink" title="Docker로 배포 (nginx, gunicorn)"></a>Docker로 배포 (nginx, gunicorn)</h2><br><p>연습 차원에서, Docker 에 nginx 와 gunicorn 을 적용하여 배포 연습을 진행 해 봅니다. </p><p><br>이전 포스팅하고는 조금 다른 방식으로 쓰는 예제를 찾아서, 이 프로젝트에 적용해 보려 합니다. 아래 내용대로 진행해보았지만, 배포 결과는 실패했습니다. </p><p><br>이 포스팅에서는, 그냥 배포 시도 과정만을 담고 있습니다. </p><a id="more"></a><br><h2 id="Docker-Compose-설치하기"><a href="#Docker-Compose-설치하기" class="headerlink" title="Docker Compose 설치하기"></a>Docker Compose 설치하기</h2><br><p>터미널에서 아래 명령어를 실행하여, Docker compose  를 설치해 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><br><p>바이너리에 실행 권한을 적용합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><br><p>정상적으로 설치가 되었는지, 아래 버전 확인 명령어를 통해서 확인 합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version </span><br><span class="line">docker-compose version 1.25.5, build 8a1c60f6</span><br></pre></td></tr></table></figure><br><br><h2 id="gunicorn-설치하기"><a href="#gunicorn-설치하기" class="headerlink" title="gunicorn 설치하기"></a>gunicorn 설치하기</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><br><br><h2 id="requirements-txt-파일-업데이트"><a href="#requirements-txt-파일-업데이트" class="headerlink" title="requirements.txt  파일 업데이트"></a>requirements.txt  파일 업데이트</h2><br><p>프로젝트 폴더에서 터미널 명령어를 통해, requirements.txt 파일을 업데이트 해줍니다 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><br><h2 id="settings-py-파일-수정"><a href="#settings-py-파일-수정" class="headerlink" title="settings.py 파일 수정"></a>settings.py 파일 수정</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">'web'</span>]</span><br></pre></td></tr></table></figure><br><h2 id="Dockerfile-재작성"><a href="#Dockerfile-재작성" class="headerlink" title="Dockerfile 재작성"></a>Dockerfile 재작성</h2><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /todo </span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /todo </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r /todo/requirements.txt</span></span><br></pre></td></tr></table></figure><br><ol><li><code>FROM python:3.8-slim</code> - 파이썬 3.8-slim 을 베이스 이미지로 사용합니다 </li><li><code>COPY . /todo</code> - 컨테이너 안에 /todo 디렉토리 안으로, 로컬에서의 현재 위치에 있는 모든 파일 및 디렉토리를 복사합니다 </li><li><code>WORKDIR /todo</code> - ~/todo 디렉토리로, 워킹 디렉토리를 변경합니다 </li><li><code>RUN pip install -r /todo/requirements.txt</code> - 프로젝트에 필요한 파이썬 패키지들을 설치합니다. </li></ol><br><h2 id="docker-compose-yml-작성"><a href="#docker-compose-yml-작성" class="headerlink" title="docker-compose.yml 작성"></a>docker-compose.yml 작성</h2><br><p>docker-compose 를 사용하여, Dockerfile 빌드 준비를 합니다. </p><p><br>프로젝트 폴더 내에, docker-compose.yml 파일을 생성해 주고, 아래와 같이 작성해 줍니다. </p><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">.</span> </span><br><span class="line">  <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> </span><br><span class="line"><span class="attr">command:</span> <span class="string">python</span> <span class="string">manage.py</span> <span class="string">runserver</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8000</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">.:todo</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"8000:8000"</span></span><br></pre></td></tr></table></figure><br><ol><li>version - docker compose 정의 파일의 버전 </li><li>services - 서비스 정의 </li><li>web - 서비스 명 </li><li>build - 빌드 지정 </li><li>context - Dockerfile 이 있는 디렉토리의 경로 </li><li>dockerfile - 도커파일명 </li><li>command - 컨테이너 안에서 작동하는 명령 지정, 베이스 이미지에 지정되어 있을 경우 덮어씁니다 </li><li>volumes - 컨테이너에 볼륨을 마운트 합니다 </li><li>ports - 컨테이너가 공개하는 포트는 ports 로 지정, <code>&lt;호스트 머신의 포트번호&gt;:&lt;컨테이너의 포트번호&gt;</code><br></li></ol><br><h2 id="docker-compose-명령어로-이미지를-빌드하여-실행"><a href="#docker-compose-명령어로-이미지를-빌드하여-실행" class="headerlink" title="docker-compose 명령어로 이미지를 빌드하여 실행"></a>docker-compose 명령어로 이미지를 빌드하여 실행</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -- build</span><br></pre></td></tr></table></figure><br><p>위 명령어를 실행한뒤에, 터미널에는, Attaching to todolist_web_1 이라고 표시 되는데. 이때, 웹 브라우저에서 django 어플리케이션이 정상적으로 실행 되는지 확인 합니다. </p><br><img src="/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/image1.png" class=""><br><p>우선, django 어플리케이션은 브라우저에서 동작하는것을 확인할수 있습니다. </p><br><img src="/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/image2.png" class=""><p><br><br></p><h2 id="nginx-gunicorn-django"><a href="#nginx-gunicorn-django" class="headerlink" title="nginx, gunicorn, django"></a>nginx, gunicorn, django</h2><br><p>nginx 와  gunicorn 을 사용하여 django 배포 작업을 해줍니다. <br></p><p>위의 docker-compose.yml 파일을 아래와 같이 수정해 줍니다. </p><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/todo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/nginx:/etc/nginx.conf.d</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">web</span> </span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> </span><br><span class="line">    <span class="attr">command:</span> <span class="string">gunicorn</span> <span class="string">todolist.wsgi:application</span> <span class="string">==</span> <span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8000</span> </span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/todo</span> </span><br><span class="line">    <span class="attr">expose:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8000"</span></span><br></pre></td></tr></table></figure><br><ol><li><p>version - docker compose 정의 파일의 버전 </p></li><li><p>services - 서비스 정의 </p></li><li><p>nginx - 서비스명 </p></li><li><p>image - 도커이미지 (d2hub 에서 최신버전) </p></li><li><p>ports - &lt;호스트 머신 번호&gt;:&lt;컨테이너의 포트 번호&gt; </p></li><li><p>volumes - 컨테이너에 볼륨을 마운트 할때 사용, &lt;호스트의 디렉토리 경로&gt;:&lt;컨테이너의 디렉토리 경로&gt; </p></li><li><p>depends_on</p><ul><li><p>서비스의 의존 관계 정의 </p></li><li><p>nginx 컨테이너 시작전, web 컨테이너 시작 </p></li><li><p>depends_on 으로 컨테이너 시작 순서를 제어 </p></li><li><p>컨테이너 상 어플리케이션이 이용 가능해질때까지 기다리고, 제어 하지 않음 </p></li></ul></li></ol><ol start="8"><li><p>web - 서비스명 </p></li><li><p>build - 빌드지정 </p></li><li><p>context - Dockerfile이 있는 디렉토리의 경로 </p></li><li><p>dockerfile - 도커파일 명 </p></li><li><p>command </p><ul><li><p>컨테이너 안에서 작동하는 명령어 지정 </p></li><li><p>gunicorn 으로 django 서버를 실행 시킴 </p></li></ul></li></ol><ol start="13"><li>volumens - 현재 디렉토리 전부를 컨테이너 /todo 에 마운트 </li><li>ports <ul><li>컨테이너 포트 번호만 지정 </li><li>호스트 머신의 포트는 랜덤한 값으로 설정 </li><li>호스트 머신에서 직접 접근하지 않고 웹서버 기능을 갖고 있는 컨테이너를 경유해서 접근 </li></ul></li></ol><br><h2 id="nginx-conf-파일-생성"><a href="#nginx-conf-파일-생성" class="headerlink" title="nginx.conf 파일 생성"></a>nginx.conf 파일 생성</h2><br><p>todolist/config/nginx/nginx.conf 파일을 생성해 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream web &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  server web:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  location /static/ &#123;</span><br><span class="line">      <span class="built_in">alias</span> /todo/static;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">      proxy_pass http://web/;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h2 id="docker-compose-명령어로-이미지-빌드후-실행"><a href="#docker-compose-명령어로-이미지-빌드후-실행" class="headerlink" title="docker-compose 명령어로 이미지 빌드후 실행"></a>docker-compose 명령어로 이미지 빌드후 실행</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>django 어플리케이션을 배포하는일은 매우 어렵고 비효율적입니다. </p><p>이렇게 복잡하게 할거면, 왜 만들었는지도 의심 스럽네요;;; 위 작업을 다 마쳤지만, 실제 배포랑은 완전 거리가 멀고. 되지도 않았습니다. </p><p>다른 배포 방법을 찾아봅시다! </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 32편 - .dockerignore 파일</title>
      <link>http://djangojeng-e.github.io/2020/07/28/TodoList-32%ED%8E%B8-dockerignore-%ED%8C%8C%EC%9D%BC/</link>
      <guid>http://djangojeng-e.github.io/2020/07/28/TodoList-32%ED%8E%B8-dockerignore-%ED%8C%8C%EC%9D%BC/</guid>
      <pubDate>Tue, 28 Jul 2020 05:29:32 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;dockerignore-파일&quot;&gt;&lt;a href=&quot;#dockerignore-파일&quot; class=&quot;headerlink&quot; title=&quot;dockerignore 파일&quot;&gt;&lt;/a&gt;dockerignore 파일&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;현재까지 배포를 위해 진행한 스텝입니다 &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;AWS EC2 생성 &lt;/li&gt;
&lt;li&gt;AWS RDS 생성 - PostgreSQL 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 생성 및 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 정적 이미지와 CSS 파일 적용 &lt;/li&gt;
&lt;li&gt;Docker 설치 &lt;/li&gt;
&lt;li&gt;Dockerfile 작성 후 이미지 생성 &lt;/li&gt;
&lt;li&gt;생성된 이미지를 DockerHub 에 Push &lt;/li&gt;
&lt;li&gt;Docker 를 이용하여 EC2 에 배포하기 (.dockerigrnoe파일) &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;p&gt;지난 포스팅까지, Docker 를 이용하여, EC2 에 배포하는것 까지 진행 하였고. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;EC2 에 잘 배포가 되는것까지 확인 하였습니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;하지만, Docker 를 사용하여, &lt;/p&gt;
&lt;p&gt;EC2 에 배포할때에, .dockerignore 파일에 대해서 &lt;/p&gt;
&lt;p&gt;신경 써야 한다는 점을 잊지 말아야 합니다 &lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="dockerignore-파일"><a href="#dockerignore-파일" class="headerlink" title="dockerignore 파일"></a>dockerignore 파일</h2><br><p>현재까지 배포를 위해 진행한 스텝입니다 </p><br><ol><li>AWS EC2 생성 </li><li>AWS RDS 생성 - PostgreSQL 적용 </li><li>AWS S3 생성 및 적용 </li><li>AWS S3 정적 이미지와 CSS 파일 적용 </li><li>Docker 설치 </li><li>Dockerfile 작성 후 이미지 생성 </li><li>생성된 이미지를 DockerHub 에 Push </li><li>Docker 를 이용하여 EC2 에 배포하기 (.dockerigrnoe파일) </li></ol><br><p>지난 포스팅까지, Docker 를 이용하여, EC2 에 배포하는것 까지 진행 하였고. <br></p><p>EC2 에 잘 배포가 되는것까지 확인 하였습니다. </p><br><blockquote><p>하지만, Docker 를 사용하여, </p><p>EC2 에 배포할때에, .dockerignore 파일에 대해서 </p><p>신경 써야 한다는 점을 잊지 말아야 합니다 </p></blockquote><a id="more"></a> <br><h2 id="dockerignore-파일이란"><a href="#dockerignore-파일이란" class="headerlink" title=".dockerignore 파일이란?"></a>.dockerignore 파일이란?</h2><br><br><p><code>.gitignore</code> 파일과 비슷하게, <code>.dockerignore</code> 파일은 하나의 도구로써, <br></p><p>정말로 필요한 Docker 빌드 내용을 정의 하는데에 사용됩니다. </p><br><p>이 파일을 사용함으로써, 어떤 폴더와 파일들이 도커를 빌드할때에 무시되고, 예외처리가 될지 기준을 정합니다<br></p><p>마치, git 에 무언가를 작업하여 올릴때, gitignore 에 올리지 말아야 할 파일과 디렉토리를 정하는것 처럼 말입니다. <br></p><p><code>.dockerignore</code> 파일에 포함된 파일들과 폴더들은, <br>빌드내용에 포함되지 않게 되어서 도커 서버에 업로드가 되지 않을것입니다. </p><br><h2 id="왜-신경을-써야-하나요"><a href="#왜-신경을-써야-하나요" class="headerlink" title="왜 신경을 써야 하나요?"></a>왜 신경을 써야 하나요?</h2><br><p>실제로, 요즘 컴퓨터들은 빠르고, 네트워크도 꽤나 안정적이고 빠른데다가 저장소를 사용하는것도 많이 저렴해 졌습니다. 그렇다면, </p><blockquote><p><code>.dockerignore</code>를 사용하여, 파일들과 폴더들을 업로드 하지 않는 이유가. </p><p>용량때문만은 아닐것입니다.  </p></blockquote><br><p>어째서 .dockerignore 를 사용해야 하는지에 대해서 몇가지 예를 들어 봅니다. </p><br><br><h3 id="도커-이미지-사이즈"><a href="#도커-이미지-사이즈" class="headerlink" title="도커 이미지 사이즈"></a>도커 이미지 사이즈</h3><br><p>요즘 컴퓨터들이 아무리 빠르고, 네트워크도 안정적이고, 저장소가 저렴해졌다고 해도, </p><p><br>도커 이미지의 용량에 대해서 신경쓰지 않아도 된다는 이야기는 아닙니다. 여전히 용량은 중요한 포인트 이고, 어떤 상황에서는, 하나의 도커 이미지를 여러개의 서버에 올려서 사용해야 할때도 있습니다. </p><br><p>이런 상황에서는, 이미지 사이즈와 이미지 생성 시간이 중요해 집니다. </p><br><p>예를들면, 5 MB 짜리 도커 이미지를 100개의 서버에 배포하는것이, 700MB 짜리 도커 이미지를 100개의 서버에 배포하는것보다 훨씬 빠르고 저렴할것입니다. </p><br><p>따라서, .dockerignore 를 사용하여, 용량관리를 해보는것도 나쁘지 않은 생각입니다. </p><br><h3 id="의도하지-않은-비밀값-노출"><a href="#의도하지-않은-비밀값-노출" class="headerlink" title="의도하지 않은 비밀값 노출"></a>의도하지 않은 비밀값 노출</h3><br><p>빌드 내용을 제어하지 않는다면, </p><p><br>의도치 않게 우리의 코드, 커밋 내역 그리고 비밀값들 (키와 인증키 등등) 이 노출 될수 있습니다. </p><br><p><code>ADD .</code> 혹은 <code>COPY .</code> 커맨드를 사용하여 파일들을 도커 이미지 안에 복사를 한다면, 우리는 의도하지 않게 소스 파일들을 포함하고, 모든 깃 내역과, 비밀값들 (.aws, env, 혹은 개인정보 키같은 값들), 캐시, 그리고 기타 파일들을 도커 빌드 내용에 넣어, 결국에 도커 이미지 안에 의도치 않게 넣을수 있습니다. </p><br><p>DockerHub 에 존재하는 도커 이미지중에 여러개의 이미지들은, 어플리케이션 소스 코드, 비밀번호, 키값들 그리고 인증값들을 노출하고 있습니다. <code>.git</code> 폴더를 도커 이미지안에 실수로라도 복사하는것은 특히나 좋지 않습니다. </p><br><p>따라서, <code>.dockerignore</code> 를 사용하여, 이런 비밀값들이나 민감한 정보 관리를 할수 있습니다. </p><p><br><code>.git folder</code>를 <code>.dockerignore</code>  파일에 항상 표시해두는것이 좋습니다. </p><br><h3 id="Cache-무효"><a href="#Cache-무효" class="headerlink" title="Cache 무효"></a>Cache 무효</h3><br><p>어플리케이션의 전체 코드베이스를 이미지에 넣는 방식은 대체로 아래 명령어를 사용하는것이 일반적입니다. </p><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> . /user/src/app</span></span><br></pre></td></tr></table></figure><br><p>이런 경우에는, 전체 빌드 내용을 이미지에 복사하게 됩니다. </p><p><br>그리고 한가지 더 중요한점은, 각 Dockerfile 명령어는 새로운 레이어를 생성한다는 점입니다. </p><br><p>따라서, 포함된 파일들에 대한 수정 사항들은, <code>COPY . /opt/myapp</code> 레이어와 새로운 이미지 레이어가 다음 빌드에 생성되게 될때, 빌드 캐시를 무효화 합니다 (빌드를 훨씬 더 느리게 한다는 이야기 입니다) </p><br><br><p>만약 우리의 작업 폴더들이 매우 빈번히 업데이트가 되는 파일들을 가지고 있다면, (로그, 테스트 결과, 깃내역, 임시 캐시파일등등), 우리는 이 레이어를 매번 dockr build 를 실행할때마다 생성하게 될것입니다. </p><br><p>따라서, 빌드 내용을 맞게 관리 하지 않는다면, 빌드들은 캐시를 맞는 방법으로 사용할수가 없어서, 매우 느려질겁니다. </p><br><br><h3 id="dockerignore-문법"><a href="#dockerignore-문법" class="headerlink" title=".dockerignore 문법"></a>.dockerignore 문법</h3><br><p>이제 우리는 어째서 도커 빌드 내용을 제어해야만 하고, 이것이 어떻게 이루어지는지 살펴 보았습니다. </p><br><blockquote><p>.dockerignore 파일은, </p><p>깃툴에서 사용되는, .girignore  파일과 비슷합니다. </p></blockquote><br><p>깃헙에서 사용되는 <code>.gitignore</code> 파일들과 비슷하게, 도커 빌드 내용을 생성할때 무시되어야 할 파일들과 폴더들을 특정 패턴을 통해 설정할수 있습니다. </p><br><blockquote><p><code>.dockerignore</code> 파일 문법이, <code>.gitignore</code>  파일과 비슷한 문법이다 하더라도, </p><p>그것들이 똑같지는 않습니다! </p></blockquote><br><p>예시) </p><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .git 과 .cache 폴더를 무시 </span></span><br><span class="line">.git </span><br><span class="line">.cache </span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore all *.class files in all folders, including build root</span></span><br><span class="line"><span class="comment"># 모든 폴더안에 있는 모든, *.class 파일들을 무시   </span></span><br><span class="line">**/*.class </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 모든 마크다운 파일들 (md) 파일들을 무시, </span></span><br><span class="line"><span class="comment"># 모든 README*.md 파일 무시 </span></span><br><span class="line">*.md </span><br><span class="line">IREADME*.md</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="Dockerfile-을-dockerignore-에-포함되어야-하나요"><a href="#Dockerfile-을-dockerignore-에-포함되어야-하나요" class="headerlink" title="Dockerfile 을 .dockerignore 에 포함되어야 하나요?"></a>Dockerfile 을 .dockerignore 에 포함되어야 하나요?</h3><br><p>이 질문에 대한 명확한 답은 존재하지 않습니다. </p><p><br>대부분 개인 취향에 달려 있긴 하지만. <code>.dockerfile</code> 을 <code>Dockerfile</code> 안에 포함하는것이 권장 됩니다<br></p><p>그리고, 그전에, Dockerfile 이 어떠한 민감한 정보도 갖고 있지 않도록 합니다. </p><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p><code>.dockerignore</code> 파일을 도커 이미지들을 생성하는 모든 프로젝트에 사용해야 합니다. </p><p><br><code>.dockerignore</code>는 도커 이미지들을 작고, 빠르고, 안전하게 만들어 줍니다.<br>또한, 로컬 개발에서 도커 캐시를 도와주기도 합니다. </p><br><p>최소한, git 폴더는 .dockerignore 파일에 포함되어야만 합니다. 그리고 아래 프로젝트 특화 추가 파일들도 추가해주어야 합니다. </p><br><ul><li>빌드로그 </li><li>스크립트 / 결과 테스트 </li><li>임시 파일들 </li><li>캐싱 </li><li>로컬 비밀값들 </li><li>docker-compose.yml 같은 로컬 개발 파일들 </li></ul>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/28/TodoList-32%ED%8E%B8-dockerignore-%ED%8C%8C%EC%9D%BC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 31편 - Docker를 이용하여 EC2에 배포</title>
      <link>http://djangojeng-e.github.io/2020/07/27/TodoList-31%ED%8E%B8-Docker%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC/</link>
      <guid>http://djangojeng-e.github.io/2020/07/27/TodoList-31%ED%8E%B8-Docker%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC/</guid>
      <pubDate>Mon, 27 Jul 2020 11:06:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;현재까지 배포를 위해 진행한 순서는, &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AWS EC2 생성 &lt;/li&gt;
&lt;li&gt;AWS RDS 생성 - PostgreSQL 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 생성 및 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 정적 이미지와 CSS파일 적용 &lt;/li&gt;
&lt;li&gt;Docker 설치 &lt;/li&gt;
&lt;li&gt;Dockerfile 작성후 이미지 생성 &lt;/li&gt;
&lt;li&gt;생성된 이미지를 DockerHub 에 Push &lt;/li&gt;
&lt;li&gt;Docker 를 이용하여 EC2 배포하기 &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;지난 포스팅에서, 로컬에서 생성한 Docker 를 실행하여, 서버가 잘 작동하는것을 확인 하였습니다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이제 EC2 에다가, 생성하였던 Docker 를 이용하여, 서버를 실행 시켜 보는 작업을 진행합니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;EC2에 배포를 하려면, &lt;/p&gt;
&lt;p&gt;EC2에 접속하여, EC2 터미널에서 생성한 Docker 를 실행시키면 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>현재까지 배포를 위해 진행한 순서는, </p><ol><li>AWS EC2 생성 </li><li>AWS RDS 생성 - PostgreSQL 적용 </li><li>AWS S3 생성 및 적용 </li><li>AWS S3 정적 이미지와 CSS파일 적용 </li><li>Docker 설치 </li><li>Dockerfile 작성후 이미지 생성 </li><li>생성된 이미지를 DockerHub 에 Push </li><li>Docker 를 이용하여 EC2 배포하기 </li></ol><br><br><p>지난 포스팅에서, 로컬에서 생성한 Docker 를 실행하여, 서버가 잘 작동하는것을 확인 하였습니다. <br></p><p>이제 EC2 에다가, 생성하였던 Docker 를 이용하여, 서버를 실행 시켜 보는 작업을 진행합니다. </p><br><br><blockquote><p>EC2에 배포를 하려면, </p><p>EC2에 접속하여, EC2 터미널에서 생성한 Docker 를 실행시키면 됩니다. </p></blockquote><br><a id="more"></a> <br><p>정확히 이야기하면, 아래 단계들을 거쳐야 하는데. </p><p><br>이 단계들을 명령어화 하여 진행해 보면 됩니다. </p><br><ol><li>EC2에 접속, 서버 초기 설정을 해줍 </li><li>로컬에서 pip freeze &gt; requirements.txt 를 실행, requirements.txt 를 갱신 </li><li>로컬에서 Dokerfile 을 이용하여, Docker 이미지 빌드 </li><li>로컬에서 Docker image tag 지정 </li><li>로컬에서 DockerHub 로 docker push </li><li>EC2 에서, DockerHub 에  push 된 이미지 pull </li><li>EC2 에서, pull 한 Docker 이미지를 실행하기 </li></ol><br><blockquote><p>이전 포스팅에서 생성한 Docker 이미지는, </p><p>자동으로 python manage.py runserver 를 실행해 주므로. </p><p>Docker 이미지를 실행 시키는것만으로도 runserver 를 실행한 상태로 유지해 줍니다. </p></blockquote><br><h2 id="1-EC2에-접속-서버-초기-설정"><a href="#1-EC2에-접속-서버-초기-설정" class="headerlink" title="1. EC2에 접속, 서버 초기 설정"></a>1. EC2에 접속, 서버 초기 설정</h2><br><p>터미널에서, EC2 에 접속합니다. 접속하여서, 기본 세팅을 해줍니다. <br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/newtodolist.pem ubuntu@52.79.175.188</span><br><span class="line">*** System restart required ***</span><br><span class="line">Last login: Sat May 23 13:06:22 2020 from 49.194.199.4</span><br><span class="line">ubuntu@ip-172-31-35-66:~$ sudo apt update &amp;&amp; sudo DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y &amp;&amp; apt -y autoremove</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 도 설치해 줍니다. </span></span><br><span class="line">ubuntu@ip-172-31-35-66:~$ sudo apt -y install docker.io</span><br></pre></td></tr></table></figure><br><h2 id="2-로컬-컴퓨터-터미널에서-requiremnts-txt-갱신"><a href="#2-로컬-컴퓨터-터미널에서-requiremnts-txt-갱신" class="headerlink" title="2. 로컬 컴퓨터 터미널에서 requiremnts.txt 갱신"></a>2. 로컬 컴퓨터 터미널에서 requiremnts.txt 갱신</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/mini_projects   master ●  </span><br><span class="line"><span class="string">"<span class="variable">$HOME</span>"</span>/.pyenv/versions/3.8.0/envs/to-do-list/bin/pip freeze &gt; <span class="string">"<span class="variable">$HOME</span>"</span>/mini_projects/todolist/requirements.txt</span><br></pre></td></tr></table></figure><br><h2 id="3-로컬에서-Dockerfile-을-이용-Docker-이미지-빌드"><a href="#3-로컬에서-Dockerfile-을-이용-Docker-이미지-빌드" class="headerlink" title="3. 로컬에서 Dockerfile 을 이용, Docker  이미지 빌드"></a>3. 로컬에서 Dockerfile 을 이용, Docker  이미지 빌드</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t todolist ~/mini_projects/todolist</span><br></pre></td></tr></table></figure><br><p>todolist 라는 이미지를,  ~/mini_projects/todolist 경로에 있는 Dockerfile 을 이용하여 생성. </p><br><h2 id="4-로컬에서-docker-image-tag-지정"><a href="#4-로컬에서-docker-image-tag-지정" class="headerlink" title="4. 로컬에서 docker image tag 지정"></a>4. 로컬에서 docker image tag 지정</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag todolist:latest headfat1218/todolist:latest</span><br></pre></td></tr></table></figure><br><p>todolist:latest 를 테그로 지정 </p><br><h2 id="5-로컬에서-DockerHub-로-docker-push"><a href="#5-로컬에서-DockerHub-로-docker-push" class="headerlink" title="5. 로컬에서 DockerHub 로 docker push"></a>5. 로컬에서 DockerHub 로 docker push</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push headfat1218/todolist:latest</span><br></pre></td></tr></table></figure><br><p>headfat1218/todolist:latest 로 테그된 이미지를 DockerHub 로 푸쉬 <br><br></p><h2 id="6-EC2-에서-DockerHub-에-push-된-이미지-pull"><a href="#6-EC2-에서-DockerHub-에-push-된-이미지-pull" class="headerlink" title="6. EC2 에서, DockerHub 에 push 된 이미지  pull"></a>6. EC2 에서, DockerHub 에 push 된 이미지  pull</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-35-66:~$ sudo docker pull headfat1218/todolist:latest</span><br></pre></td></tr></table></figure><br><h2 id="7-EC2-에서-Pull-한-이미지를-실행하기"><a href="#7-EC2-에서-Pull-한-이미지를-실행하기" class="headerlink" title="7. EC2 에서, Pull 한 이미지를 실행하기"></a>7. EC2 에서, Pull 한 이미지를 실행하기</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --rm -it -p 80:8000 --name todolist headfat1218/todolist:latest</span><br></pre></td></tr></table></figure><br><p>이미지를 실행하면, 이미지가 빌드된 대로, </p><br><p><code>python manage.py makemigrations</code>를 알아서 해주고 </p><p><code>python manage.py migrate</code> 도 알아서 해주고,<br></p><br><p><code>python manage.py runserver</code> 도 알아서 해줍니다.<br><br></p><img src="/2020/07/27/TodoList-31%ED%8E%B8-Docker%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC/image1.png" class=""><br><br><blockquote><p>이제, EC2 인스턴스에서 RUNSERVER 를 실행하고 있으니까 </p><p>브라우저에서, 해당 EC2 인스턴스의 퍼블릭 IP 로 접속해 봅니다. </p><p>퍼블릭 IP 로 접속을 하면, 브라우저에서, 현재까지 개발한 Django 프로젝트가 돌아가는것을 확인할수 있을겁니다. </p></blockquote>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/27/TodoList-31%ED%8E%B8-Docker%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 30편 - 생성된 이미지 DockerHub 에 푸쉬</title>
      <link>http://djangojeng-e.github.io/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/</link>
      <guid>http://djangojeng-e.github.io/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/</guid>
      <pubDate>Fri, 24 Jul 2020 04:36:15 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;DockerHub-에-이미지-푸쉬&quot;&gt;&lt;a href=&quot;#DockerHub-에-이미지-푸쉬&quot; class=&quot;headerlink&quot; title=&quot;DockerHub 에 이미지 푸쉬&quot;&gt;&lt;/a&gt;DockerHub 에 이미지 푸쉬&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;현재까지 진행한 순서대로 정리하면, &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;AWS EC2 생성 &lt;/li&gt;
&lt;li&gt;AWS RDS 생성 - PostgreSQL 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 생성 및 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 정적 이미지와 CSS 파일 적용 &lt;/li&gt;
&lt;li&gt;Docker 설치 &lt;/li&gt;
&lt;li&gt;Dockerfile 작성 후 이미지 생성 &lt;/li&gt;
&lt;li&gt;생성된 이미지를 DockerHub 에 push &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;h2 id=&quot;이미지-저장소&quot;&gt;&lt;a href=&quot;#이미지-저장소&quot; class=&quot;headerlink&quot; title=&quot;이미지 저장소&quot;&gt;&lt;/a&gt;이미지 저장소&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;도커는 빌드한 이미지를 서버에 배포하기 위한 파일을 도커 레지스트리, 즉, Docker registery 라는 저장소를 사용해 복사합니다. 빌드가 완료된 이미지를 레지스트리에 푸쉬 (push) 하고, 다른 서버에서 (pull) 하여 사용하는 구조로 되어 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;살짝, git 과 비슷한 느낌입니다. &lt;/p&gt;
&lt;br&gt;

&lt;img src=&quot;/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image1.png&quot; class=&quot;&quot;&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="DockerHub-에-이미지-푸쉬"><a href="#DockerHub-에-이미지-푸쉬" class="headerlink" title="DockerHub 에 이미지 푸쉬"></a>DockerHub 에 이미지 푸쉬</h2><br><p>현재까지 진행한 순서대로 정리하면, </p><br><ol><li>AWS EC2 생성 </li><li>AWS RDS 생성 - PostgreSQL 적용 </li><li>AWS S3 생성 및 적용 </li><li>AWS S3 정적 이미지와 CSS 파일 적용 </li><li>Docker 설치 </li><li>Dockerfile 작성 후 이미지 생성 </li><li>생성된 이미지를 DockerHub 에 push </li></ol><br><h2 id="이미지-저장소"><a href="#이미지-저장소" class="headerlink" title="이미지 저장소"></a>이미지 저장소</h2><br><p>도커는 빌드한 이미지를 서버에 배포하기 위한 파일을 도커 레지스트리, 즉, Docker registery 라는 저장소를 사용해 복사합니다. 빌드가 완료된 이미지를 레지스트리에 푸쉬 (push) 하고, 다른 서버에서 (pull) 하여 사용하는 구조로 되어 있습니다. </p><br><p>살짝, git 과 비슷한 느낌입니다. </p><br><img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image1.png" class=""><a id="more"></a> <br><h2 id="Docker-Hub"><a href="#Docker-Hub" class="headerlink" title="Docker Hub"></a>Docker Hub</h2><br><p>도커 허브는, 도커에서 제공하는 이미지 저장소 입니다. <br></p><p>ubuntu, centos, debian 등의 베이스 이미지와, ruby, golang, java, python 등의 공식 이미지가 저장되어 있습니다. </p><br><p>회원 가입 이후에, 대용량 이미지를 무료로 저장할수 있고, 다운로드 트래픽도 무료 입니다. <br><br></p><p>하지만, 모든 이미지는 공개되어 누구나 접근 가능하고, 비공개로 설정하려면 유료 서비스를 이용해야 합니다.<br></p><p>도커 헙 페이지에 접속하여, 회원가입을 마칩니다. <br>회원가입을 다 마치면, 로그인을 하여, 사용 준비를 할수 있습니다.<br></p><br><img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image2.png" class=""><br><h2 id="Docker-Hub-로그인"><a href="#Docker-Hub-로그인" class="headerlink" title="Docker Hub 로그인"></a>Docker Hub 로그인</h2><br><p>계정을 생성해주었으면, 터미널에서 아래 명령어를 실행하여, </p><p><br>도커 허브 계정을 사용할수 있게 로그인 합니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker login</span><br></pre></td></tr></table></figure><br><p>아래와 같은 메시지가 뜨고, 성공적으로 로그인이 되는걸 확인할수 있습니다. </p><p><br>로그아웃 하기 전까지, 로그인 정보가 유지됩니다.<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/<span class="comment">#credentials-store</span></span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><br><h2 id="Docker-Hub-Push"><a href="#Docker-Hub-Push" class="headerlink" title="Docker Hub Push"></a>Docker Hub Push</h2><br><p>지난 포스팅에서, Dockerfile 을 이용하여, docker image 를 생성해 주었었습니다. </p><br><p><code>docker images</code>명령어를 실행하여, 이미지 목록을 확인해 보면, 지난 시간에 생성해 주었었던, <br></p><p><code>todolist:latest</code> 이미지가 있는것을 확인 할수 있습니다. </p><br><img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image3.png" class=""><br><p>이제 이 이미지를, DockerHub 에 전송해 보도록 하겠습니다. </p><br><blockquote><p>우선, tag 명령어를 사용하여, </p><p>업로드할 이미지의 이름을 지정해 줍니다. </p></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag todolist:latest headfat1218/todolist:latest</span><br></pre></td></tr></table></figure><br><blockquote><p>이미지를 지정해주었으면, 이제 push 명령어를 사용하여, </p><p>push 를 진행 합니다. </p></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push headfat1218/todolist:latest</span><br></pre></td></tr></table></figure><br><p>명령어를 실행하면, 아래와 같이 진행이 되고 </p><br><img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image4.png" class=""><br><img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image5.png" class=""><br><blockquote><p>push 가 완료 된 후에, DockerHub 페이지로 가보면, </p><p>repository 에 전송 되어 있는것을 확인 할수 있습니다. </p></blockquote><br><img src="/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/image6.png" class=""><br><h2 id="이미지를-푸쉬-하는-이유"><a href="#이미지를-푸쉬-하는-이유" class="headerlink" title="이미지를 푸쉬 하는 이유"></a>이미지를 푸쉬 하는 이유</h2><br><p>DockerHub 에 업로드 된 이미지는, 어디서든 pull 받아서 사용할수 있습니다. </p><p><br>아래 명령어를 예로 들어보면, DockerHub repository 저장소, headfat1218/todolist:latest 를 다운 받아와서 사용하겠다는 명령어 입니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:8000 --name todolist headfat1218/todolist:latest</span><br></pre></td></tr></table></figure><br><p>터미널에서, 위 명령어를 실행한뒤에, 브라우저에 접속해서 127.0.0.1:8000 으로 접속하면, </p><p><br>프로젝트가 잘 작동합니다. <br></p><p>로컬에서는 배포가 잘 이루어 지는것 같아 보이는데… 그 다음 스텝은 무엇이 될까요…? ㅠㅠ</p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/24/TodoList-30%ED%8E%B8-%EC%83%9D%EC%84%B1%EB%90%9C-%EC%9D%B4%EB%AF%B8%EC%A7%80-DockerHub-%EC%97%90-%ED%91%B8%EC%89%AC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 29편 - Dockerfile 작성후 이미지 생성</title>
      <link>http://djangojeng-e.github.io/2020/07/21/TodoList-29%ED%8E%B8-Dockerfile-%EC%9E%91%EC%84%B1%ED%9B%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1/</link>
      <guid>http://djangojeng-e.github.io/2020/07/21/TodoList-29%ED%8E%B8-Dockerfile-%EC%9E%91%EC%84%B1%ED%9B%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1/</guid>
      <pubDate>Tue, 21 Jul 2020 12:40:17 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Dockerfile-작성&quot;&gt;&lt;a href=&quot;#Dockerfile-작성&quot; class=&quot;headerlink&quot; title=&quot;Dockerfile 작성&quot;&gt;&lt;/a&gt;Dockerfile 작성&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;배포를 위해 현재까지 진행한 단계는, 아래와 같습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;각 단계마다 매우 꼬이고 있어서, 순서를 좀 정리 해봅니다.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AWS EC2 생성 &lt;/li&gt;
&lt;li&gt;AWS RDS 생성 - PostgreSQL 을 Django 프로젝트에 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 생성 및 Django 프로젝트에 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 정적 이미지와 CSS 파일 적용 &lt;/li&gt;
&lt;li&gt;Docker 설치 &lt;/li&gt;
&lt;li&gt;Dockerfile 작성 후 이미지 생성 &lt;/li&gt;
&lt;li&gt;DockerHub Push &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Dockerfile 이란?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Dockerfile 은 Docker 이미지를 생성하기 위해 필요한 명령어를 가지고 있는 파일로, &lt;/p&gt;
&lt;p&gt;이 파일이 있는 디렉토리에서, Docker 이미지를 만들수 있습니다. &lt;/p&gt;
&lt;p&gt;Dockerfile 에 나열되어 있는 명령어들을 자동으로 실행하여, 이미지를 빌드할때 해당 이미지에 필요한 &lt;/p&gt;
&lt;p&gt;파일과 설정값들을 정할수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;확장자 없이도 동작하고, &lt;/p&gt;
&lt;p&gt;&lt;code&gt;RUN&lt;/code&gt;, &lt;code&gt;COPY&lt;/code&gt;, &lt;code&gt;WORKDIR&lt;/code&gt; 과 같은, Dockerfile 언어로 작성할수 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Dockerfile-작성"><a href="#Dockerfile-작성" class="headerlink" title="Dockerfile 작성"></a>Dockerfile 작성</h2><br><p>배포를 위해 현재까지 진행한 단계는, 아래와 같습니다. </p><p><br>각 단계마다 매우 꼬이고 있어서, 순서를 좀 정리 해봅니다.<br><br></p><ol><li>AWS EC2 생성 </li><li>AWS RDS 생성 - PostgreSQL 을 Django 프로젝트에 적용 </li><li>AWS S3 생성 및 Django 프로젝트에 적용 </li><li>AWS S3 정적 이미지와 CSS 파일 적용 </li><li>Docker 설치 </li><li>Dockerfile 작성 후 이미지 생성 </li><li>DockerHub Push </li></ol><br><blockquote><p><strong>Dockerfile 이란?</strong></p><p>Dockerfile 은 Docker 이미지를 생성하기 위해 필요한 명령어를 가지고 있는 파일로, </p><p>이 파일이 있는 디렉토리에서, Docker 이미지를 만들수 있습니다. </p><p>Dockerfile 에 나열되어 있는 명령어들을 자동으로 실행하여, 이미지를 빌드할때 해당 이미지에 필요한 </p><p>파일과 설정값들을 정할수 있습니다. </p><br><p>확장자 없이도 동작하고, </p><p><code>RUN</code>, <code>COPY</code>, <code>WORKDIR</code> 과 같은, Dockerfile 언어로 작성할수 있습니다. </p></blockquote><br><a id="more"></a><br><br><p>잘 작성된 Dockerfile 을 사용하여, 이미지를 생성할수 있고, 이미지는 컨테이너 실행에 필요한 파일들과 설정값들을 포함하고 있습니다. </p><br><p><strong>일단 dockerfile 과 start 파일을 작성해 보려 합니다. 작성을 마친뒤에는, 작성된 Dockerfile 을 사용하여, 이미지를 생성해 볼겁니다.<br></strong></p><br><h2 id="프로젝트-구조-확인하기"><a href="#프로젝트-구조-확인하기" class="headerlink" title="프로젝트 구조 확인하기"></a>프로젝트 구조 확인하기</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── config</span><br><span class="line">│   ├── asgi.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── Dockerfile     <span class="comment"># 확장자가 없는 Dockerfile 파일 </span></span><br><span class="line">├── manage.py</span><br><span class="line">├── requirements.txt</span><br><span class="line">├── secrets.json</span><br><span class="line">├── start          <span class="comment"># 확장자가 없는 start 파일 </span></span><br><span class="line">├── static</span><br><span class="line">└── todo</span><br></pre></td></tr></table></figure><br><p>확장자가 없는, <code>Dockerfile</code> 과 <code>start</code>  파일을 생성해 줍니다 </p><br><h2 id="Dockerfile-파일과-start-파일"><a href="#Dockerfile-파일과-start-파일" class="headerlink" title="Dockerfile 파일과 start 파일"></a>Dockerfile 파일과 start 파일</h2><br><p><strong>컨테이너 실행에 필요한 이미지는 아래 사항들을 바탕으로 작성되어야 합니다</strong></p><br><ul><li><p>기본 이미지는 Python 3.8 을 베이스로 합니다 </p></li><li><p>이 이미지는, 로컬에 존재하는 todolist 프로젝트 파일들을 복사해서 가지고 있습니다 </p></li><li><p>이미지 안에, todo/requirements.txt 를 가지고 있기 때문에, <code>pip install -r /todo/requirements.txt</code>를 실행하여, 필요 패키지들을 설치 합니다 <br></p><br> </li><li><p>이 이미지를 사용하여 실행되는 컨테이너는, runserver 를 실행 시킵니다 (runserver 명령어를 실행하기 이전에 공통된 명령어들, <code>python manage.py makemigrations</code>, <code>python manage.py migrate</code> 그리고 <code>python manage.py runserver</code> 같은 명령어들은, todo/start 파일에 담겨져 잇어서, 해당 이미지는 이 start 파일을 실행시켜서 서버를 시작합니다.) </p></li></ul><br><blockquote><p>todolist/Dockerfile 을 아래와 같이 작성 </p></blockquote><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 기본설정 </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update \ </span></span><br><span class="line">&amp;&amp; apt-get install -y --no-install-recommends \</span><br><span class="line">postgresql-client \</span><br><span class="line">&amp;&amp; rm -rf /var/lib/apt/lists/* </span><br><span class="line"></span><br><span class="line"><span class="comment"># Django 프로젝트 파일들을 이미지로 복사 </span></span><br><span class="line"><span class="comment"># 이미지 안에서도 todolist/ 폴더로 복사되게 지정 </span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /todolist </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 이미지에 복사된 requirements.txt 를 사용하여 패키지 설치 </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r /todolist/requirements.txt </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># start 파일을 실행할수 있게 파일 설정 </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> chmod 755 /todolist/start </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 워킹 디렉토리를 /todolist 로 설정 </span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /todolist </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 8000 포트를 expose </span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8000</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># app/start 파일을 실행 </span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">"/todolist/start"</span>]</span></span><br></pre></td></tr></table></figure><p><br><br></p><blockquote><p>todolist/start 파일을 아래와 같이 작성 </p><ul><li>참고 : start  파일은 확장자가 없음 </li></ul></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash </span></span><br><span class="line"></span><br><span class="line">python manage.py makemigrations </span><br><span class="line">python manage.py migrate </span><br><span class="line"></span><br><span class="line">python manage.py runserver 0.0.0.0:8000</span><br></pre></td></tr></table></figure><br><h2 id="Dockerfile-로-이미지-생성하기"><a href="#Dockerfile-로-이미지-생성하기" class="headerlink" title="Dockerfile 로 이미지 생성하기"></a>Dockerfile 로 이미지 생성하기</h2><br><p>Dockerfile 과 start 파일을 작성해 주었으니, </p><p><br>이 파일들을 이용하여, 이미지를 하나 생성해 볼수 있습니다. </p><br><p>프로젝트 폴더인, todolist/폴더로 이동하여, 아래 명령어를 사용합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t todolist .</span><br></pre></td></tr></table></figure><br><p><code>-t</code> : 생성될 이미지의 이름을 지정 </p><br><p><code>.</code>: Dockerfile 과 프로젝트 파일들이 있는 경로를 표시, Dockerfile 이 있는 위치이므로, 현재경로인 <code>.</code> 을 입력 </p><br><blockquote><p>docker images 명령어를 사용하여, </p><p>todolist:latest 와 Base 이미지인, python 3.8 이 있는것을 확인 할수 있습니다. </p><p>영상참고 </p></blockquote><br><p><a href="https://blog.naver.com/headfat1218/221975245936" target="_blank" rel="noopener">https://blog.naver.com/headfat1218/221975245936</a></p><br><br><h2 id="Docker-실행-시키기"><a href="#Docker-실행-시키기" class="headerlink" title="Docker 실행 시키기"></a>Docker 실행 시키기</h2><br><p>이미지가 생성되었으니, Docker 를 로컬에서 실행 시켜 보려 합니다.</p><p><br>8000번 포트를 열어 주기 때문에, <code>-p 8000:8000</code> 옵션을 넣어줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8000:8000 --name todolist todolist:latest</span><br></pre></td></tr></table></figure><br><table><thead><tr><th><strong>옵션</strong></th><th><strong>descriptions</strong></th></tr></thead><tbody><tr><td>-d</td><td>백그라운드 실행</td></tr><tr><td>-p 8000:8000</td><td>호스트와 컨테이너 포트를 매핑</td></tr><tr><td>–name todolist</td><td>컨테이너의 이름을 todolist 로 지정</td></tr><tr><td>todolist:latest</td><td>이미지의 이름과 버전을 지정</td></tr></tbody></table><br><img src="/2020/07/21/TodoList-29%ED%8E%B8-Dockerfile-%EC%9E%91%EC%84%B1%ED%9B%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1/image1.png" class=""><br><p><code>todolist:latest</code> 이미지를 사용하여, 컨테이너를 하나 실행 시켜 주었습니다. </p><p><br>이 컨테이너는, 백그라운드로 실행이 되고, dockerfile 에서 지정해준대로, runserver 를 구동하고 있습니다<br></p><p>브라우저로, 서버에 접속해 봅니다 (<a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a>)<br><br></p><p>로컬에서는 잘 작동하는것을 확인 할수 있습니다. </p><br><img src="/2020/07/21/TodoList-29%ED%8E%B8-Dockerfile-%EC%9E%91%EC%84%B1%ED%9B%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1/image2.png" class=""><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>배포가 제일 어려운것 같습니다. 틀린 순서일지도 모르지만, </p><p><br>지나온 순서를 다시 리마인드 합니다. <br></p><br><ol><li><p>AWS EC2 생성 </p></li><li><p>AWS RDS 생성 - PostgreSQL 적용 </p></li><li><p>AWS S3 생성 및 적용 </p></li><li><p>AWS S3 정적 이미지와 CSS 파일 적용 </p></li><li><p>Docker 설치 </p></li><li><p><strong>Dockerfile 작성 후 이미지 생성</strong> </p></li><li><p>DockerHub Push  </p></li></ol>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/21/TodoList-29%ED%8E%B8-Dockerfile-%EC%9E%91%EC%84%B1%ED%9B%84-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%83%9D%EC%84%B1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 28편 - Docker 컨테이너 생성 연습</title>
      <link>http://djangojeng-e.github.io/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/</link>
      <guid>http://djangojeng-e.github.io/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/</guid>
      <pubDate>Tue, 07 Jul 2020 10:52:47 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Docker-컨테이너-연습&quot;&gt;&lt;a href=&quot;#Docker-컨테이너-연습&quot; class=&quot;headerlink&quot; title=&quot;Docker 컨테이너 연습&quot;&gt;&lt;/a&gt;Docker 컨테이너 연습&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;이 포스팅은 Docker 컨테이너를 실행해보는 개인적인 과정을 담고 있습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;a href=&quot;https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html&lt;/a&gt; 에 있는 내용을 기반으로 따라한 과정과 정리 내용입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;도커에 대해 자세하게 알고 싶다면, 위 블로그를 참조하시면 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;Docker-설치-확인&quot;&gt;&lt;a href=&quot;#Docker-설치-확인&quot; class=&quot;headerlink&quot; title=&quot;Docker 설치 확인&quot;&gt;&lt;/a&gt;Docker 설치 확인&lt;/h2&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Docker-컨테이너-연습"><a href="#Docker-컨테이너-연습" class="headerlink" title="Docker 컨테이너 연습"></a>Docker 컨테이너 연습</h2><br><p>이 포스팅은 Docker 컨테이너를 실행해보는 개인적인 과정을 담고 있습니다. </p><p><br><a href="https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html" target="_blank" rel="noopener">https://subicura.com/2017/01/19/docker-guide-for-beginners-2.html</a> 에 있는 내용을 기반으로 따라한 과정과 정리 내용입니다. </p><br><p>도커에 대해 자세하게 알고 싶다면, 위 블로그를 참조하시면 됩니다. </p><br><br><h2 id="Docker-설치-확인"><a href="#Docker-설치-확인" class="headerlink" title="Docker 설치 확인"></a>Docker 설치 확인</h2><a id="more"></a><br><br><p>이전 포스팅에서 도커 설치를 진행 했었는데, 잘 설치되었는지 확인해 봅니다. </p><p><br>터미널에서, <code>docker version</code> 명령어를 실행해 봅니다.  </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><br><img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image1.png" class=""><br><p>정상적인 설치가 완료 된것으로 보입니다. </p><p><br>버전 정보는 Client 와 서버로 나누어져 있습니다. </p><p>이는, 클라이언트와 서버 역할을 할수 있다는것을 의미 합니다. </p><br><h2 id="컨테이너-실행-하기"><a href="#컨테이너-실행-하기" class="headerlink" title="컨테이너 실행 하기"></a>컨테이너 실행 하기</h2><br><p>도커를 실행하는 명령어의 구조는 아래와 같습니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]</span><br></pre></td></tr></table></figure><br><p>자주 사용하는 옵션들은, 아래와 같습니다. </p><br><table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td>-d</td><td>detached mode 흔히 말하는 백그라운드 모드</td></tr><tr><td>-p</td><td>호스트와 컨테이너의 포트를 연결 (포워딩)</td></tr><tr><td>-v</td><td>호스트와 컨테이너의 디렉토리를 연결 (마운트)</td></tr><tr><td>-e</td><td>컨터이너 내에서 사용할 환경변수 설정</td></tr><tr><td>-name</td><td>컨테이너 이름 설정</td></tr><tr><td>-rm</td><td>프로세스 종료시 컨테이너 자동 제거</td></tr><tr><td>-it</td><td>-i 와 -t 를 동시에 사용한 것으로 터미널 입력을 위한 옵션</td></tr><tr><td>-link</td><td>컨터이너 연결 [컨테이너명:별칭]</td></tr></tbody></table><br><br><h2 id="컨테이너-생성하기"><a href="#컨테이너-생성하기" class="headerlink" title="컨테이너 생성하기"></a>컨테이너 생성하기</h2><br><p>터미널에서 아래 명령어를 실행하여, 컨테이너를 생성해 봅니다 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run ubuntu:18.04</span><br></pre></td></tr></table></figure><br><img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image2.png" class=""><br><p><code>docker run ubuntu:18.04</code> 를 실행하면, </p><p><br>ubuntu:18.04 를 로컬에서 찾을수가 없으니, 다운로드를 한 뒤에 컨테이너를 생성하고 시작합니다. </p><p><br><br></p><p>중요한점은, 컨테이너는 생성되었지만, 바로 종료가 된다는 점인데. </p><p><br>컨테이너는 잘 생성되어 실행 되었지만, 명령어가 전달되지 않았기 때문에, <br>생성되자마자 바로 종료가 됩니다. 컨테이너는 프로세스이기 때문에, 실행중인 프로세스가 없으면 컨테이너는 종료됩니다.<br><br></p><h2 id="컨테이너-생성후-bin-bash-실행"><a href="#컨테이너-생성후-bin-bash-실행" class="headerlink" title="컨테이너 생성후 bin/bash/ 실행"></a>컨테이너 생성후 bin/bash/ 실행</h2><br><p>위와 같은 명령어지만, 몇가지 옵션을 추가하여 컨테이너를 실행 해 볼수 있습니다. <br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --rm -it ubuntu:18.04 /bin/bash</span><br></pre></td></tr></table></figure><br><img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image3.png" class=""><br><p><code>--rm</code>  프로세스가 종료되면, 컨테이너가 자동으로 삭제되도록 하는 옵션 </p><br><p><code>--it</code> 컨테이너 내부에 들어가기 위한 bash 쉘을 실행하고, 키보드 입력을 할수 있게 해줌 </p><br><blockquote><p>bash 쉘을 <code>exit</code> 명령어를 사용하여 종료하면, 컨테이너도 같이 종료가 됩니다 (<code>--rm</code> 옵션으로 인해서..) </p></blockquote><br><br><h2 id="Redis-Container"><a href="#Redis-Container" class="headerlink" title="Redis Container"></a>Redis Container</h2><br><p>redis 는 메모리기반의 다양한 기능을 가진 스토리지로, <br></p><p>6379 포트로 통신하여, telnet 명령어로 테스트해볼수 있습니다 <br></p><br><p>일단 아래 명령어를 실행하여, detached mode 로 redis 컨테이너를 실행해줍니다 <br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker runi -d -p 1234:6379 redis</span><br></pre></td></tr></table></figure><br><p>-d 와 -p 옵션을 추가하여, 컨테이너의 포트를 호스트 포트로 연결해 줍니다. </p><p><br>-d 가 없으면, 프로세스가 foreground 로 실행되어, 아무키도 입력할수 없습니다. </p><br><img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image4.png" class=""><br><p>redis 에 접속하여 새로운 키를 저장하고 불러와 보았습니다. </p><p><br>호스트의 포트만 다르게 하며느 하나의 서버에 여러개의 redis 서버를 띄우는것도 간단합니다. </p><br><br><h2 id="MySQL-5-7-Container-생성"><a href="#MySQL-5-7-Container-생성" class="headerlink" title="MySQL 5.7 Container 생성"></a>MySQL 5.7 Container 생성</h2><br><p>MySQL 서버 컨테이너를 생성 후 실행해봅니다. </p><p><br>여기에 들어가는 옵션들이 중요한데. </p><br><table><thead><tr><th>옵션</th><th>설명</th></tr></thead><tbody><tr><td>-d</td><td>detached mode 흔히 말하는 백그라운드 모드</td></tr><tr><td>-p</td><td>호스트와 컨테이너의 포트를 연결 (포워딩)</td></tr><tr><td>-e</td><td>환경변수 설정</td></tr><tr><td>–name</td><td>읽기 어려운 ID 대신, 쉬운 이름을 부여</td></tr></tbody></table><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 3306:3306 \</span><br><span class="line">-e MYSQL_ALLOW_EMPTY_PASSWORD=<span class="literal">true</span> \</span><br><span class="line">--name mysql \</span><br><span class="line">mysql:5.7</span><br></pre></td></tr></table></figure><br><img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image5.png" class=""><br><p>해당 시스템에는, mysql이 설치가 되질 않아서, mysql에는 접속이 되지 않습니다;;; <br><br></p><h2 id="tensorflow-컨테이너"><a href="#tensorflow-컨테이너" class="headerlink" title="tensorflow 컨테이너"></a>tensorflow 컨테이너</h2><br><p>머신러닝을 할수 있는 툴, tensorflow 를 만들어 실행해 봅니다 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 8888:8888 -p 6006:6006 teamlab/pydata-tensorflow:0.1</span><br></pre></td></tr></table></figure><br><h2 id="도커-기본-명령어-컨테이너-목록-확인"><a href="#도커-기본-명령어-컨테이너-목록-확인" class="headerlink" title="도커 기본 명령어 - 컨테이너 목록 확인"></a>도커 기본 명령어 - 컨테이너 목록 확인</h2><br><p><code>ps</code> 는 실행중인 컨테이너 목록을 보여줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 컨테이너 목록 확인 </span></span><br><span class="line">docker ps [options]</span><br><span class="line"></span><br><span class="line">docker ps</span><br></pre></td></tr></table></figure><br><img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image6.png" class=""><br><p>혹은, <code>-a</code> 옵션을 주어도 됩니다 <br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><br><img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image7.png" class=""><br><h2 id="도커-기본-명령어-컨테이너-중지"><a href="#도커-기본-명령어-컨테이너-중지" class="headerlink" title="도커 기본 명령어 - 컨테이너 중지"></a>도커 기본 명령어 - 컨테이너 중지</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop [options] CONTAINER [CONTAINER...]</span><br></pre></td></tr></table></figure><br><p>생성되어 있던 tensorflow 를 중지해봅니다<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker ps  <span class="comment"># get container ID</span></span><br><span class="line">docker stop TENSORFLOW_CONTAINER_ID </span><br><span class="line">docker ps -a</span><br></pre></td></tr></table></figure><br><img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image8.png" class=""><br><h2 id="도커-기본-명령어-컨테이너-제거"><a href="#도커-기본-명령어-컨테이너-제거" class="headerlink" title="도커 기본 명령어 - 컨테이너 제거"></a>도커 기본 명령어 - 컨테이너 제거</h2><br><p>종료된 컨테이너를 완전하게 제거하는 명령어는 아래와 같습니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm [options] CONTAINER [CONTAINER..]</span><br></pre></td></tr></table></figure><br><p>종료된 ubuntu 컨테이너와 tensorflow 컨테이너를 삭제해봅니다 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker ps -a   <span class="comment"># get container ID </span></span><br><span class="line">docker rm <span class="comment">#ubuntu_CONTAINER_ID #TENSORFLOW_CONTAINER_ID </span></span><br><span class="line"></span><br><span class="line">docker ps -a  <span class="comment"># 위 컨테이너들이 존재하는지 확인</span></span><br></pre></td></tr></table></figure><br><br><h2 id="도커-기본-명령어-이미지-제거"><a href="#도커-기본-명령어-이미지-제거" class="headerlink" title="도커 기본 명령어 - 이미지 제거"></a>도커 기본 명령어 - 이미지 제거</h2><br><p>이미지 목록 확인 하기 (images)<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker images</span><br></pre></td></tr></table></figure><br><img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image9.png" class=""><br><p>컨테이너가 실행중인 이미지는 삭제되지 않지만, 아래 명령어를 사용해서, tensorflow 를 제거해봅니다 <br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hello-world                     latest              fce289e99eb9        16 months ago       1.84kB</span><br><span class="line">teamlab/pydata-tensorflow       0.1                 7bdf5d7e0191        3 years ago         3.08GB</span><br><span class="line"> dhkang  ~ $ docker rm 7bdf5d7e0191</span><br></pre></td></tr></table></figure><br><img src="/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/image10.png" class=""><br><p>이미지가 삭제 됩니다</p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/07/TodoList-28%ED%8E%B8-Docker-%EC%BB%A8%ED%85%8C%EC%9D%B4%EB%84%88-%EC%83%9D%EC%84%B1-%EC%97%B0%EC%8A%B5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 27편 - Docker 리뷰</title>
      <link>http://djangojeng-e.github.io/2020/07/06/TodoList-27%ED%8E%B8-Docker-%EB%A6%AC%EB%B7%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/07/06/TodoList-27%ED%8E%B8-Docker-%EB%A6%AC%EB%B7%B0/</guid>
      <pubDate>Mon, 06 Jul 2020 11:07:38 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Docker-리뷰&quot;&gt;&lt;a href=&quot;#Docker-리뷰&quot; class=&quot;headerlink&quot; title=&quot;Docker 리뷰&quot;&gt;&lt;/a&gt;Docker 리뷰&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;도커란?&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;컨테이너 기반의 오픈소스 가상화 플랫폼으로, &lt;/p&gt;
&lt;p&gt;컨테이너는 다양한 프로그램, 실행환경을 추상화 하고. 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해줍니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Docker-리뷰"><a href="#Docker-리뷰" class="headerlink" title="Docker 리뷰"></a>Docker 리뷰</h2><br><blockquote><p><strong>도커란?</strong> </p><p>컨테이너 기반의 오픈소스 가상화 플랫폼으로, </p><p>컨테이너는 다양한 프로그램, 실행환경을 추상화 하고. 동일한 인터페이스를 제공하여 프로그램의 배포 및 관리를 단순하게 해줍니다. </p></blockquote><br><a id="more"></a><h3 id="컨테이너-Container"><a href="#컨테이너-Container" class="headerlink" title="컨테이너 (Container)"></a>컨테이너 (Container)</h3><br><p>격리된 공간에서 프로세스가 동작하는 기술로, 가상화 기술이지만 기존 가상화 기술과는 약간의 차이가 있습니다. </p><p><br>추가적인 OS를 설치하여 가상화 하는 방법 대신에, 프로세스를 격리 하는 방식을 사용합니다 </p><p><br>리눅스 컨테이너를 사용하여, 단순히 프로세스를 격리시켜서 가볍고 빠르게 동작하게 할수 있습니다. </p><p><br>CPU 나 메모리는 딱 프로세스가 필요한 만큼만 추가로 사용하고, 성능적으로도 손실이 별로 없습니다. </p><br><h3 id="이미지-image"><a href="#이미지-image" class="headerlink" title="이미지 (image)"></a>이미지 (image)</h3><br><p><strong>이미지는 컨테이너 실행에 필요한 파일과 설정값들을 포함하고 있는것으로.</strong> </p><p><br>상태값을 가지게 되며, immutable 합니다 (즉, 한번 선언되면 수정될수는 없음). 같은 이미지를 가지고 여러개의 컨테이너를 생성할수 있고, 컨테이너의 상태가 바뀌거나 컨테이너가 삭제 되더라도, 이미지는 변하지 않고, 그대로 남습니다. </p><br><p>새로운 서버가 추가되면, 미리 만들어 놓은 이미지를 다운받고 컨테이너를 생성만 하면 됩니다. </p><br><p>한 서버에 여러개의 컨테이너를 실행할수 있고, 수십, 수백, 수천대의 컨테이너 실행도 괜찮습니다. </p><br><blockquote><p><strong>Docker Image (도커 이미지)는</strong> </p><p>Docker Hub 와 Docker Registry 저장소를 직접 만들어 관리할수 있습니다 </p></blockquote>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/06/TodoList-27%ED%8E%B8-Docker-%EB%A6%AC%EB%B7%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 26편 - Docker 설치 (Ubuntu18.04) 기준</title>
      <link>http://djangojeng-e.github.io/2020/07/05/TodoList-26%ED%8E%B8-Docker-%EC%84%A4%EC%B9%98-Ubuntu18-04-%EA%B8%B0%EC%A4%80/</link>
      <guid>http://djangojeng-e.github.io/2020/07/05/TodoList-26%ED%8E%B8-Docker-%EC%84%A4%EC%B9%98-Ubuntu18-04-%EA%B8%B0%EC%A4%80/</guid>
      <pubDate>Sun, 05 Jul 2020 08:59:54 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Docker-설치-ubuntu18-04&quot;&gt;&lt;a href=&quot;#Docker-설치-ubuntu18-04&quot; class=&quot;headerlink&quot; title=&quot;Docker 설치 (ubuntu18.04)&quot;&gt;&lt;/a&gt;Docker 설치 (ubuntu18.04)&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Docker 란?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux 컨테이너라는 커널 컨테이너 기술을 이용하여 만든 컨테이너 기술 중 하나.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;운영체제를 가상화 하지 않는 컨테이너 기술이라, 가상머신에 비해 가볍다 &lt;/li&gt;
&lt;li&gt;VM 을 포함하여, 한대의 서버에 여러개의 서비스를 구동하기 좋다 &lt;/li&gt;
&lt;li&gt;가상머신 (VM) 과는 달리, 기존 리눅스 자원 (디스크, 네트워크) 들을 그대로 활용할수 있어서, 여러 서비스들을 한 서버에 돌기기가 좋은 편이다. &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;구글과 아마존에서도 도커를 지원하고 있기 떄문에, 많은 사용자들이 작성해둔 소프트웨어 패키지/이미지들이 많아서, 사용성과 접근성이 좋다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;다시 한번 정리하면, 도커란,&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;컴퓨터안에 다른 공간들과 분리된, 컨테이너 라는 가상의 공간을 만들어 주는 프로그램으로, &lt;/p&gt;
&lt;p&gt;리눅스 기반으로 되어 있다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;컨테이너를 통해, 여러 환경들을 관리할수 있고, 같은 세팅을 공유하는 일도, &lt;/p&gt;
&lt;p&gt;이미지 파일 하나만 공유한다면, 쉽게 작업할수 있다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Docker-설치-ubuntu18-04"><a href="#Docker-설치-ubuntu18-04" class="headerlink" title="Docker 설치 (ubuntu18.04)"></a>Docker 설치 (ubuntu18.04)</h2><p><br><br></p><blockquote><p><strong>Docker 란?</strong></p><p>Linux 컨테이너라는 커널 컨테이너 기술을 이용하여 만든 컨테이너 기술 중 하나.</p><ul><li>운영체제를 가상화 하지 않는 컨테이너 기술이라, 가상머신에 비해 가볍다 </li><li>VM 을 포함하여, 한대의 서버에 여러개의 서비스를 구동하기 좋다 </li><li>가상머신 (VM) 과는 달리, 기존 리눅스 자원 (디스크, 네트워크) 들을 그대로 활용할수 있어서, 여러 서비스들을 한 서버에 돌기기가 좋은 편이다. </li></ul><br><p>구글과 아마존에서도 도커를 지원하고 있기 떄문에, 많은 사용자들이 작성해둔 소프트웨어 패키지/이미지들이 많아서, 사용성과 접근성이 좋다. </p><br><p><code>다시 한번 정리하면, 도커란,</code> </p><p>컴퓨터안에 다른 공간들과 분리된, 컨테이너 라는 가상의 공간을 만들어 주는 프로그램으로, </p><p>리눅스 기반으로 되어 있다. </p><br><p>컨테이너를 통해, 여러 환경들을 관리할수 있고, 같은 세팅을 공유하는 일도, </p><p>이미지 파일 하나만 공유한다면, 쉽게 작업할수 있다. </p></blockquote><br><a id="more"></a><br><h2 id="Docker-설치하기-Ubuntu18-04"><a href="#Docker-설치하기-Ubuntu18-04" class="headerlink" title="Docker 설치하기 (Ubuntu18.04)"></a>Docker 설치하기 (Ubuntu18.04)</h2><br><p>이전 도커의 버전들은, <code>docker</code>, <code>docker.io</code> 혹은 <code>docker-engine</code>으로 불리웁니다. </p><p><br>만약 이들이 설치되어 있다면, 언인스톨 해주어야 합니다. 터미널에서 아래 명령어를 실행해줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker.io containerd runc</span><br></pre></td></tr></table></figure><br><br><h3 id="Repository-셋업하기"><a href="#Repository-셋업하기" class="headerlink" title="Repository 셋업하기"></a>Repository 셋업하기</h3><br><br><ol><li><p>apt 패키지 인덱스를 업데이트 해주고, apt 가 HTTPS 를 통해 저장소를 사용할수 있게 해줍니다 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line"></span><br><span class="line">$ sudo apt-get install \</span><br><span class="line">    apt-transport-https \</span><br><span class="line">    ca-certificates \</span><br><span class="line">    curl \</span><br><span class="line">    gnupg-agent \</span><br><span class="line">    software-properties-common</span><br></pre></td></tr></table></figure><br></li><li><p>도커의 공식 GPG 키를 추가해 줍니다 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><br></li><li><p>아래 명령어를 실행하여, 안정적인 저장소를 설정 합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository \</span><br><span class="line">   <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu \</span></span><br><span class="line"><span class="string">   <span class="variable">$(lsb_release -cs)</span> \</span></span><br><span class="line"><span class="string">   stable"</span></span><br></pre></td></tr></table></figure><br></li></ol><h3 id="Docker-Engine-인스톨-하기"><a href="#Docker-Engine-인스톨-하기" class="headerlink" title="Docker Engine 인스톨 하기"></a>Docker Engine 인스톨 하기</h3><br><p>apt 패키지 인덱스를 업데이트 해주고, 가장 최근의 도커 엔진을 설치해 줍니다 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo apt-get install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><br><blockquote><p>도커 엔진이 알맞게 설치 되었는지 확인 하기 위해, </p><p>hello-world 이미지를 실행 시켜 봅니다 </p></blockquote><br><p>이 커멘드를 실행 시키면, 테스트 이미지를 다운 받아서, 컨테이너 안에 실행 시킵니다. </p><p><br>컨테이너가 실행되면, 정보 메시지를 출력하고 종료됩니다. </p><br><img src="/2020/07/05/TodoList-26%ED%8E%B8-Docker-%EC%84%A4%EC%B9%98-Ubuntu18-04-%EA%B8%B0%EC%A4%80/image1.png" class=""><br><p>Docker 설치가 완료 되었습니다! </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/05/TodoList-26%ED%8E%B8-Docker-%EC%84%A4%EC%B9%98-Ubuntu18-04-%EA%B8%B0%EC%A4%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 25편 - AWS S3 정적 이미지와 CSS 파일 적용</title>
      <link>http://djangojeng-e.github.io/2020/06/16/TodoList-25%ED%8E%B8-AWS-S3-%EC%A0%95%EC%A0%81-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-CSS-%ED%8C%8C%EC%9D%BC-%EC%A0%81%EC%9A%A9/</link>
      <guid>http://djangojeng-e.github.io/2020/06/16/TodoList-25%ED%8E%B8-AWS-S3-%EC%A0%95%EC%A0%81-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-CSS-%ED%8C%8C%EC%9D%BC-%EC%A0%81%EC%9A%A9/</guid>
      <pubDate>Mon, 15 Jun 2020 15:14:43 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;AWS-S3-정적-이미지와-CSS-파일-적용&quot;&gt;&lt;a href=&quot;#AWS-S3-정적-이미지와-CSS-파일-적용&quot; class=&quot;headerlink&quot; title=&quot;AWS S3 정적 이미지와 CSS 파일 적용&quot;&gt;&lt;/a&gt;AWS S3 정적 이미지와 CSS 파일 적용&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;이전 포스팅에서, &lt;/p&gt;
&lt;p&gt;S3 를 사용해 보았는데, 그전까지 잘 보이던 CSS 와 이미지 파일들이 보이지 않았습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이미지와 CSS가 적용되지 않은 사이트를 보게되니, 살짝 당황 했었습니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;아래 두가지 사유로 인해서, 적용이 되지 않는다는것을 알아냈습니다. &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;경로&lt;/li&gt;
&lt;li&gt;권한 (엑세스 설정) &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="AWS-S3-정적-이미지와-CSS-파일-적용"><a href="#AWS-S3-정적-이미지와-CSS-파일-적용" class="headerlink" title="AWS S3 정적 이미지와 CSS 파일 적용"></a>AWS S3 정적 이미지와 CSS 파일 적용</h2><br><p>이전 포스팅에서, </p><p>S3 를 사용해 보았는데, 그전까지 잘 보이던 CSS 와 이미지 파일들이 보이지 않았습니다. </p><br><p>이미지와 CSS가 적용되지 않은 사이트를 보게되니, 살짝 당황 했었습니다. </p><br><br><p>아래 두가지 사유로 인해서, 적용이 되지 않는다는것을 알아냈습니다. </p><br><ol><li>경로</li><li>권한 (엑세스 설정) </li></ol><br><a id="more"></a> <br><h2 id="경로-settings-py-파일에-S3관련-세팅-재확인"><a href="#경로-settings-py-파일에-S3관련-세팅-재확인" class="headerlink" title="경로 (settings.py 파일에 S3관련 세팅 재확인)"></a>경로 (settings.py 파일에 S3관련 세팅 재확인)</h2><br><p>정적파일이 있는 URL 을 잘 찾을수 있도록, 경로를 다시 한번 확인해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django-storages</span></span><br><span class="line"><span class="comment"># django FIleStorage로 S3Boto3Storage (AWS S3) 사용 </span></span><br><span class="line">SECRETS = json.load(open(os.path.join(BASE_DIR, <span class="string">'secrets.json'</span>), <span class="string">'rt'</span>))</span><br><span class="line">DEFAULT_FILE_STORAGE = <span class="string">'storages.backends.s3boto3.S3BotoStorage'</span></span><br><span class="line">AWS_ACCESS_KEY_ID = SECRETS[<span class="string">'AWS_ACCESS_KEY_ID'</span>]</span><br><span class="line">AWS_SECRET_ACCESS_KEY = SECRETS[<span class="string">'AWS_SECRET_ACCESS_KEY'</span>]</span><br><span class="line">AWS_STORAGE_BUCKET_NAME = <span class="string">'todolist-djangojenge'</span></span><br><span class="line">AWS_S3_REGION_NAME = <span class="string">'ap-northeast-2'</span></span><br><span class="line">AWS_S3_CUSTOM_DOMAIN = <span class="string">'%s.s3.%s.amazonaws.com'</span> % (AWS_STORAGE_BUCKET_NAME, AWS_S3_REGION_NAME)</span><br><span class="line">AWS_AUTO_CREATE_BUCKET = <span class="literal">True</span></span><br><span class="line">AWS_DEFAULT_ACL = <span class="string">'public-read'</span></span><br><span class="line">AWS_S3_OBJECT_PARAMETERS = &#123;<span class="string">'CacheControl'</span>: <span class="string">'max-age=86400'</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/howto/static-files/</span></span><br><span class="line">PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">STATIC_ROOT = os.path.join(PROJECT_DIR, <span class="string">'static'</span>)</span><br><span class="line">AWS_LOCATION = <span class="string">'static'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 필자의 경우, 아래 STATIC_URL 이 'https://%s/' %(AWS_S3_CUSTOM_DOMAIN) 으로만 되어 있었음</span></span><br><span class="line"><span class="comment"># S3에 있는 정적파일들의 Full 주소는, 아래 조합과 같음. </span></span><br><span class="line">STATIC_URL = <span class="string">'https://%s/%s/'</span> % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION) </span><br><span class="line"></span><br><span class="line">STATICFILES_STORAGE = <span class="string">'storages.backends.s3boto3.S3Boto3Storage'</span></span><br><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">'static'</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># MEDIA_ROOT 설정 </span></span><br><span class="line"><span class="comment"># user-uploaded static files 의 기본 경로 </span></span><br><span class="line">MEDIA_ROOT = os.path.join(BASE_DIR, <span class="string">'.media'</span>)</span><br><span class="line">MEDIA_URL = <span class="string">'/media/'</span></span><br></pre></td></tr></table></figure><br><p>참고로, secrets.json 파일은, 프로젝트 폴더 내에 존재하는 json 파일로, </p><p><br>이 파일에 AWS_ACCESS_KEY 값과, AWS_SECRET_ACCESS_KEY 값이 json 형태로 저장되어 있습니다. </p><p><br>이를, json.loads 를 사용하여, settings.py 파일에 적용해 줍니다. </p><br><h2 id="권한-엑세스-설정"><a href="#권한-엑세스-설정" class="headerlink" title="권한 (엑세스 설정)"></a>권한 (엑세스 설정)</h2><br><blockquote><p>기본적으로, S3 버킷은, private 으로 설정이 되어 있어서, </p><p>그냥 정적파일을 읽어 오려 하면, 안 읽어 집니다. </p></blockquote><br><p>따라서, S3 버킷 접근 속성을, Public 으로 바꾸어줘야. </p><p><br>서버를 실행 시켰을때, 정적파일들을 읽을수 있게 되어, 이 파일들을 이용해서 화면에 렌더해줄수 있습니다. </p><p><br>아래 사이트에 아주 자세히 나와 있어서, 참조하고 권한을 고쳐주면 됩니다. </p><br><p><a href="https://www.simplified.guide/aws/create-public-s3-bucket" target="_blank" rel="noopener">https://www.simplified.guide/aws/create-public-s3-bucket</a></p><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>S3 적용후에, 정적파일들이 적용 되지 않아서 당황했었지만, <br></p><p>다행히, 에러를 해결할수 있었습니다. 이제 정적파일들과 미디어 파일들은, 로컬 위치가 아닌, S3에서 불러 옵니다. <br></p><p>S3 에서 불러와도 로컬에서 불러온것처럼, 잘 적용되고 표시되는것을 확인할수 있었습니다. </p><br><img src="/2020/06/16/TodoList-25%ED%8E%B8-AWS-S3-%EC%A0%95%EC%A0%81-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-CSS-%ED%8C%8C%EC%9D%BC-%EC%A0%81%EC%9A%A9/image1.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/06/16/TodoList-25%ED%8E%B8-AWS-S3-%EC%A0%95%EC%A0%81-%EC%9D%B4%EB%AF%B8%EC%A7%80%EC%99%80-CSS-%ED%8C%8C%EC%9D%BC-%EC%A0%81%EC%9A%A9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 24편 - AWS S3 적용하기</title>
      <link>http://djangojeng-e.github.io/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 12 Jun 2020 05:29:41 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Amazon-S3-적용하기&quot;&gt;&lt;a href=&quot;#Amazon-S3-적용하기&quot; class=&quot;headerlink&quot; title=&quot;Amazon S3 적용하기&quot;&gt;&lt;/a&gt;Amazon S3 적용하기&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;Amazon S3 란? &lt;/p&gt;
&lt;p&gt;Amazon S3 는 인터넷상 어디서나 원하는 양의 데이터를 저장하고 검색할수 있도록 구축된, &lt;/p&gt;
&lt;p&gt;객체 스토리지 입니다. 안정성이 매우 뛰어나고, 가용성이 높으며, &lt;/p&gt;
&lt;p&gt;무제한으로 확장 가능한 데이터 스토리지 인프라를 매우 저렴한 비용으로 제공하는, &lt;/p&gt;
&lt;p&gt;간단한 스토리지 서비스 입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Amazon-S3-적용하기"><a href="#Amazon-S3-적용하기" class="headerlink" title="Amazon S3 적용하기"></a>Amazon S3 적용하기</h2><br><blockquote><p>Amazon S3 란? </p><p>Amazon S3 는 인터넷상 어디서나 원하는 양의 데이터를 저장하고 검색할수 있도록 구축된, </p><p>객체 스토리지 입니다. 안정성이 매우 뛰어나고, 가용성이 높으며, </p><p>무제한으로 확장 가능한 데이터 스토리지 인프라를 매우 저렴한 비용으로 제공하는, </p><p>간단한 스토리지 서비스 입니다. </p></blockquote><br><a id="more"></a> <br><h2 id="Amazon-S3로-무엇을-할수-있나요"><a href="#Amazon-S3로-무엇을-할수-있나요" class="headerlink" title="Amazon S3로 무엇을 할수 있나요?"></a>Amazon S3로 무엇을 할수 있나요?</h2><br><blockquote><p>스토리지를 이용하여, 간편한 웹 서비스 인터페이스를 사용할수 있습니다. </p><p>인터넷 스토리지를 이용한 어플리케이션을 쉽게 개발할수 있습니다. </p><p>원하는 형식의 데이터를 원하는 만큼 저장하고, 동일한 데이터를 수백만번 읽거나 비상 재해 복구 용도로만 사용하고, 간단한 FTP 어플리케이션 또는, Amazon.com 소매 웹사이트와 같은 복잡한 웹 어플리케이션을 구축할수 있습니다. </p><br><p>Amazon S3 를 사용하는 개발자는 데이터 저장 방법에 대한 고민을 하기 보다, </p><p>좀더 혁신적인 것들에 집중할수 있습니다. </p></blockquote><br><br><h2 id="AWS-S3-생성하기"><a href="#AWS-S3-생성하기" class="headerlink" title="AWS S3 생성하기"></a>AWS S3 생성하기</h2><br><p>우선, S3 를 생성하기 위해서, AWS S3 Management 콘솔에 접속합니다. </p><br><img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image1.png" class=""><br><p>버킷 만들기를 클릭합니다</p><br><img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image2.png" class=""><br><p>버킷 이름을 정하고, 버킷 만들기 버튼을 눌러서 버킷을 생성해 줍니다. </p><br><br><h2 id="필요한-패키지-설치"><a href="#필요한-패키지-설치" class="headerlink" title="필요한 패키지 설치"></a>필요한 패키지 설치</h2><br><br><p>터미널에서, 아래 명령어를 실행해서, <code>django-storages</code> 와 <code>boto3</code> 를 설치해 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install django-storages</span><br><span class="line">pip install boto3</span><br></pre></td></tr></table></figure><br><p>그리고 나서, settings.py 에 INSTALLED_APPS 에 storage 를 등록해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">    </span><br><span class="line">    <span class="string">'todo'</span>,</span><br><span class="line">    <span class="string">'django_extensions'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># storages 설정 </span></span><br><span class="line">    <span class="string">'storages'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Bulma CSS Framework </span></span><br><span class="line">    <span class="string">'bulma'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Allauth를 위한 Apps </span></span><br><span class="line">    <span class="string">'django.contrib.sites'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'allauth'</span>,</span><br><span class="line">    <span class="string">'allauth.account'</span>,</span><br><span class="line">    <span class="string">'allauth.socialaccount'</span>, </span><br><span class="line"></span><br><span class="line">    <span class="comment"># ... 소셜로그인을 할 제공자 리스트를 아래에 포함 </span></span><br><span class="line">    <span class="string">'allauth.socialaccount.providers.naver'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><br><h2 id="settings-py-에-S3-기본설정"><a href="#settings-py-에-S3-기본설정" class="headerlink" title="settings.py 에 S3 기본설정"></a>settings.py 에 S3 기본설정</h2><br><p>생성된 버킷을 사용하기 위한 패키지들을 모두 설치했으면, S3를 Django 에서 사용하기 위해서,</p><p><br>settings.py 파일에, 아래 내용을 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django-storages </span></span><br><span class="line"><span class="comment"># Django의 FilesStorage로 S3Boto3Storage (AWS S3) </span></span><br><span class="line">DEFAULT_FILE_STORAGE = <span class="string">'storages.backends.s3boto3.S3Boto3Storage'</span></span><br><span class="line">AWS_ACCESS_KEY_ID = <span class="string">''</span></span><br><span class="line">AWS_SECRET_ACCESS_KEY = <span class="string">''</span></span><br><span class="line">AWS_STORAGE_BUCKET_NAME = <span class="string">'todolist-djangojenge'</span></span><br><span class="line">AWS_S3_CUSTOM_DOMAIN = <span class="string">'%s.s3.amazonaws.com'</span> % AWS_STORAGE_BUCKET_NAME</span><br><span class="line">AWS_AUTO_CREATE_BUCKET = <span class="literal">True</span></span><br><span class="line">AWS_S3_REGION_NAME = <span class="string">'ap-northeast-2'</span></span><br><span class="line">AWS_DEFAULT_ACL = <span class="literal">None</span></span><br></pre></td></tr></table></figure><br><p>여기서 중요한 값들은,  아래 두가지 AWS 관련 값들입니다. </p><br><ol><li>AWS_ACCESS_KEY_ID </li><li>AWS_SECRET_ACCESS_KEY </li></ol><br><p>이 값들을 받아오기 위한 과정을 아래에 설명합니다. </p><br><h2 id="AWS-IAM-에서-ACCESS-KEY-값들-받아오기"><a href="#AWS-IAM-에서-ACCESS-KEY-값들-받아오기" class="headerlink" title="AWS IAM 에서 ACCESS_KEY 값들 받아오기"></a>AWS IAM 에서 ACCESS_KEY 값들 받아오기</h2><br><p>AWS_ACCESS_KEY_ID 와 AWS_SECRET_ACCESS_KEY 를 가져오기 위해서는, </p><p><br>AWS IAM 서비스에 접속을 해줍니다. </p><br><img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image3.png" class=""><br><br><blockquote><p>IAM (Idnetity and Access Management (IAM)) 에서, </p><p>사용자 추가를 해줍니다. </p></blockquote><br><img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image4.png" class=""><br><p>사용자 추가 버튼을 누르면, 아래와 같이. 세부정보 설정 페이지가 나오고, </p><p><br>사용자 이름을 쓴 다음, 엑세스 유형을 프로그래밍 방식 엑세스로 선택 합니다. </p><br><img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image5.png" class=""><p><br>****</p><p><strong>다음 버튼을 누르면, 권한 설정 페이지로 넘어갑니다.</strong> </p><p><br>아래와 같이, <strong>기존 정책 직접연결 탭을 누르고</strong> , 정책 필터에 AmazonS3FullAccess 를 검색하여, </p><p>정책이름을 클릭합니다. AmazonS3FullAccess 에 표시를 하고, 다음으로 넘어갑니다. </p><br><br><img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image6.png" class=""><br><p>다음은 태그를 설정하는 페이지인데, 그다지 중요하지 않습니다. </p><p><br>그냥 다음으로 넘어갑니다.<br></p><br><img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image7.png" class=""><br><p>검토 사항을 체크하고, 사용자 만들기를 클릭합니다.</p><br><img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image8.png" class=""><br><p>사용자 만들기를 클릭하면, 아래 화면 엑세스키 ID 와 비밀엑세스 키 밑에, <br></p><p>각각의 값들이 표시 되어서 나옵니다. </p><br><blockquote><p>ACCESS_KEY_ID 와 SECRET_ACCESS_KEY 를 여기에서 잘 복사해 둡니다. </p></blockquote><br><img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image9.png" class=""><br><br><blockquote><p>이제 이 값들을, </p><p>settings.py 파일에 AWS_ACCESS_KEY_ID 값과 AWS_SECRET_ACCESS_KEY 값에 넣어줍니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django-storages </span></span><br><span class="line"><span class="comment"># Django의 FilesStorage로 S3Boto3Storage (AWS S3) </span></span><br><span class="line">DEFAULT_FILE_STORAGE = <span class="string">'storages.backends.s3boto3.S3Boto3Storage'</span></span><br><span class="line">AWS_ACCESS_KEY_ID = <span class="string">''</span>         <span class="comment"># ACCESS_KEY_ID 입력 </span></span><br><span class="line">AWS_SECRET_ACCESS_KEY = <span class="string">''</span>     <span class="comment"># SECRET_ACCESS_KEY 입력 </span></span><br><span class="line">AWS_STORAGE_BUCKET_NAME = <span class="string">'todolist-djangojenge'</span></span><br><span class="line">AWS_S3_CUSTOM_DOMAIN = <span class="string">'%s.s3.amazonaws.com'</span> % AWS_STORAGE_BUCKET_NAME</span><br><span class="line">AWS_AUTO_CREATE_BUCKET = <span class="literal">True</span></span><br><span class="line">AWS_S3_REGION_NAME = <span class="string">'ap-northeast-2'</span></span><br><span class="line">AWS_DEFAULT_ACL = <span class="literal">None</span></span><br></pre></td></tr></table></figure><br><h2 id="정적파일-경로-설정"><a href="#정적파일-경로-설정" class="headerlink" title="정적파일 경로 설정"></a>정적파일 경로 설정</h2><p><br><br></p><p>settings.py 파일에 STATIC 관련 내용을 아래와 같이 바꿔줍니다.<br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Static files (CSS, JavaScript, Images)</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/howto/static-files/</span></span><br><span class="line">PROJECT_DIR = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">STATIC_ROOT = os.path.join(PROJECT_DIR, <span class="string">'static'</span>)</span><br><span class="line">AWS_LOCATION = <span class="string">'static'</span></span><br><span class="line">STATIC_URL = <span class="string">'https://%s/%s/'</span> % (AWS_S3_CUSTOM_DOMAIN, AWS_LOCATION)</span><br><span class="line">STATICFILES_STORAGE = <span class="string">'storages.backends.s3boto3.S3Boto3Storage'</span></span><br><span class="line">STATICFILES_DIRS = [os.path.join(BASE_DIR, <span class="string">'static'</span>)]</span><br></pre></td></tr></table></figure><br><p>위와 같이 STATIC 관련 내용을 설정해주었으면, 아래 명령어를 실행하여, staticfiles 들을 모아줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py collectstatic</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ python manage.py collectstatic </span><br><span class="line">You have requested to collect static files at the destination</span><br><span class="line">location as specified <span class="keyword">in</span> your settings.</span><br><span class="line"></span><br><span class="line">This will overwrite existing files!</span><br><span class="line">Are you sure you want to <span class="keyword">do</span> this?</span><br><span class="line"></span><br><span class="line">Type <span class="string">'yes'</span> to <span class="built_in">continue</span>, or <span class="string">'no'</span> to cancel: yes</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/sass/package.json'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/sass/package-lock.json'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/sass/style.sass'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/css/style.css.map'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/css/style.min.css'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line">Found another file with the destination path <span class="string">'bulma/css/style.css'</span>. It will be ignored since only the first encountered file is collected. If this is not what you want, make sure every static file has a unique path.</span><br><span class="line"></span><br><span class="line">144 static files copied.</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>S3에 로그인해서 들어가보면, static 하고 todo 폴더가 생성되어 있는것을 확인 할수 있었습니다. </p><p><br>정적파일과, 미디어 파일을 관리하는 폴더입니다.<br><br></p><img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image10.png" class=""><br><p>그런데, 문제가 하나 생깁니다.. 정적파일을 모으고 서버를 실행시켜도. </p><p><br>정적파일들이 적용되지 않는것을 확인할수 있습니다. <br></p><br><img src="/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/image11.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/06/12/TodoList-24%ED%8E%B8-AWS-S3-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 23편 - AWS RDS 사용하기</title>
      <link>http://djangojeng-e.github.io/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Wed, 10 Jun 2020 14:23:22 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;AWS-RDS-사용하기&quot;&gt;&lt;a href=&quot;#AWS-RDS-사용하기&quot; class=&quot;headerlink&quot; title=&quot;AWS RDS 사용하기&quot;&gt;&lt;/a&gt;AWS RDS 사용하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅에서, 데이터베이스 인스턴스 생성하기 버튼을 눌러 RDS 인스턴스 생성을 하였습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이제, 사용 가능한 RDS 인스턴스가 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;img src=&quot;/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/image1.png&quot; class=&quot;&quot;&gt; 

&lt;br&gt;

&lt;p&gt;이 인스턴스를 클릭하면, 엔드포인트가 생성 되어 있는것을 확인 할수 있는데. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이 앤드포인트를 Django에서 데이터베이스 설정할때 사용할것 입니다. &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="AWS-RDS-사용하기"><a href="#AWS-RDS-사용하기" class="headerlink" title="AWS RDS 사용하기"></a>AWS RDS 사용하기</h2><br><p>지난 포스팅에서, 데이터베이스 인스턴스 생성하기 버튼을 눌러 RDS 인스턴스 생성을 하였습니다. </p><br><p>이제, 사용 가능한 RDS 인스턴스가 있습니다. </p><br><img src="/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/image1.png" class=""> <br><p>이 인스턴스를 클릭하면, 엔드포인트가 생성 되어 있는것을 확인 할수 있는데. </p><p><br>이 앤드포인트를 Django에서 데이터베이스 설정할때 사용할것 입니다. </p><a id="more"></a> <br><h2 id="settings-py-파일에-DATABASES"><a href="#settings-py-파일에-DATABASES" class="headerlink" title="settings.py 파일에 DATABASES"></a>settings.py 파일에 DATABASES</h2><br><p>settings.py 파일의 DATABASES 설정으로 가서, 아래와 같이 DATABASES 설정을 해줍니다. </p><br> <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'todolist'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'djangojenge'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'django12!'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'todolist-django.r2tcewdefdf1.ap-northeast-2.rds.amazonaws.com'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">5432</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><blockquote><p>위 DATABASES 설정에서, </p><p>‘NAME’ 과 ‘PASSWORD’는 아직 정해지지 않았습니다. </p><p>NAME  과 PASSWORD 는 직접 설정해 주어야 합니다. </p></blockquote><br><br><h2 id="RDS-보안그룹-생성하기"><a href="#RDS-보안그룹-생성하기" class="headerlink" title="RDS 보안그룹 생성하기"></a>RDS 보안그룹 생성하기</h2><br><p>EC2 Management Console 로 가서, </p><p><br>네트워크 및 보안탭에 가장 첫번째 메뉴인, 보안그룹을 클릭하여</p><p><br>아래와 같이 보안그룹을 하나 생성 해줍니다. </p><br><br><img src="/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/image2.png" class=""><br><p>이 보안 그룹을, RDS 인스턴스에 적용해 줍니다. </p><p><br>RDS 인스턴스 수정 버튼을 눌러서, 네트워크 및 보안 섹션에, 아래와 같이 EC2 에서 생성한 보안그룹을 정하고, </p><p><br>퍼블릭 엑세스 가능성을 ‘예’ 로 표시합니다. </p><br><br><img src="/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/image3.png" class=""><br><img src="/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/image4.png" class=""><br><p>보안그룹이 활성이라고 하는 상태가 보이면 적용이 된것입니다. </p><br><br><h2 id="postgres-계정-설정"><a href="#postgres-계정-설정" class="headerlink" title="postgres 계정 설정"></a>postgres 계정 설정</h2><p><br><br></p><p>위의 설정을 다 마쳤으면, 터미널에서, psql 명령어를 사용하여, postgres 계정 설정을 진행합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">psql --host=todolist-django.ctskq7umc1ur.ap-northeast-2.rds.amazonaws.com --username=todo-list123456 --dbname=postgres</span><br><span class="line">Password <span class="keyword">for</span> user todo-list123456:</span><br></pre></td></tr></table></figure><br><p>여기서 사용되는 username 과 password 는 RDS를 처음 생성할때 입력했던, </p><p><br>username 과 password 입니다. 알맞는 username 과 password 를 입력하면, </p><p><br>아래와 같이 postgres 에 접속이 됩니다. </p><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">psql (10.12 (Ubuntu 10.12-0ubuntu0.18.04.1), server 11.6)</span><br><span class="line">WARNING: psql major version 10, server major version 11.</span><br><span class="line">         Some psql features might not work.</span><br><span class="line">SSL connection (protocol: TLSv1.2, cipher: ECDHE-RSA-AES256-GCM-SHA384, bits: 256, compression: off)</span><br><span class="line">Type <span class="string">"help"</span> <span class="keyword">for</span> <span class="built_in">help</span>.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 명령어를 실행하여, 데이터베이스를 생성 해줍니다. </span></span><br><span class="line"></span><br><span class="line">postgres=&gt; CREATE DATABASE todolist OWNER=todolist1234 TEMPLATE template0 LC_COLLATE <span class="string">'C'</span>;</span><br><span class="line">​</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="settings-py-파일에-DATABASES-값-수정"><a href="#settings-py-파일에-DATABASES-값-수정" class="headerlink" title="settings.py 파일에 DATABASES 값 수정"></a>settings.py 파일에 DATABASES 값 수정</h2><br><p>settings.py 파일에 DATABASES 값을 고쳐 줍니다 <br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.postgresql'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: <span class="string">'todolist'</span>,</span><br><span class="line">        <span class="string">'USER'</span>: <span class="string">'todolist1234'</span>,</span><br><span class="line">        <span class="string">'PASSWORD'</span>: <span class="string">'&lt;데이터베이스 생성할때 사용한 패스워드&gt;'</span>,</span><br><span class="line">        <span class="string">'HOST'</span>: <span class="string">'&lt;데이터베이스 앤드포인트 주소&gt;'</span>,</span><br><span class="line">        <span class="string">'PORT'</span>: <span class="number">5432</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="pyscopg2-설치하기"><a href="#pyscopg2-설치하기" class="headerlink" title="pyscopg2 설치하기"></a>pyscopg2 설치하기</h2><br><p>settings.py 파일에 DATABASES 설정을 마쳤으니, 서버를 시작해보면<br></p><p>psycopg2 를 설치해야 한다는 메시지가 나옵니다. 설치를 진행 해 줍시다. <br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install psycopg2-binary</span><br></pre></td></tr></table></figure><br><p>설치뒤에, 서버를 실행해 보면, 아래와 같은 화면이 나옵니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 29 unapplied migration(s). Your project may not work properly until you apply the migrations <span class="keyword">for</span> app(s): account, admin, auth, contenttypes, sessions, sites, socialaccount, todo.</span><br><span class="line">Run <span class="string">'python manage.py migrate'</span> to apply them.</span><br><span class="line"></span><br><span class="line">May 20, 2020 - 14:09:47</span><br><span class="line">Django version 3.0.6, using settings <span class="string">'config.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><p><br><br></p><p>python manage.py migrate 를 실행하여, migrate 를 해줍니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><br><p>migrate 를 해준뒤에, 서버를 실행 시키고, 브라우저로 접속해 보면, </p><p><br>이제까지 개발한 main 페이지가 나옵니다</p><br><img src="/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/image5.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/06/10/TodoList-23%ED%8E%B8-AWS-RDS-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 22편 - AWS RDS 생성하기</title>
      <link>http://djangojeng-e.github.io/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 09 Jun 2020 10:39:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;AWS-RDS-생성하기&quot;&gt;&lt;a href=&quot;#AWS-RDS-생성하기&quot; class=&quot;headerlink&quot; title=&quot;AWS RDS 생성하기&quot;&gt;&lt;/a&gt;AWS RDS 생성하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅에서는, 진행한건 아래와 같습니다. &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;AWS EC2 생성&lt;/li&gt;
&lt;li&gt;EC2 인스턴스에 프로젝트 폴더 업로드 &lt;/li&gt;
&lt;li&gt;EC2 인스턴스 안에서 서버 실행 &lt;/li&gt;
&lt;li&gt;브라우저로 EC2 접속 &lt;/li&gt;
&lt;li&gt;프로젝트 동작 확인  &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;p&gt;하지만, 문제가 하나 있었습니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;static 파일을 읽어오지 못해서, 이미지와 CSS 적용이 되질 않았었습니다. &lt;/p&gt;
&lt;p&gt;일단 이 부분에 대해서는, 나중에 찾아가면서 해결해 보도록 하고, &lt;/p&gt;
&lt;p&gt;데이터 베이스를 기본 데이터베이스인 Sqlite3 대신에, 다른 DB 를 적용 해 보려 합니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="AWS-RDS-생성하기"><a href="#AWS-RDS-생성하기" class="headerlink" title="AWS RDS 생성하기"></a>AWS RDS 생성하기</h2><br><p>지난 포스팅에서는, 진행한건 아래와 같습니다. </p><br><ol><li>AWS EC2 생성</li><li>EC2 인스턴스에 프로젝트 폴더 업로드 </li><li>EC2 인스턴스 안에서 서버 실행 </li><li>브라우저로 EC2 접속 </li><li>프로젝트 동작 확인  </li></ol><br><p>하지만, 문제가 하나 있었습니다. </p><br><blockquote><p>static 파일을 읽어오지 못해서, 이미지와 CSS 적용이 되질 않았었습니다. </p><p>일단 이 부분에 대해서는, 나중에 찾아가면서 해결해 보도록 하고, </p><p>데이터 베이스를 기본 데이터베이스인 Sqlite3 대신에, 다른 DB 를 적용 해 보려 합니다. </p></blockquote><br><a id="more"></a><br><h2 id="AWS-RDS-사이트-접속"><a href="#AWS-RDS-사이트-접속" class="headerlink" title="AWS RDS 사이트 접속"></a>AWS RDS 사이트 접속</h2><br><p><a href="https://ap-northeast-2.console.aws.amazon.com/rds/home?region=ap-northeast-2#databases:" target="_blank" rel="noopener">https://ap-northeast-2.console.aws.amazon.com/rds/</a></p><br><p>AWS에 접속하여, RDS 인스턴스 생성 과정으로 넘어갑니다. </p><p>데이터베이스 인스턴스 창으로 가서, 우측 상단에 데이터베이스 생성 버튼을 눌러줍니다. </p><br><img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image1.png" class=""><br><img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image2.png" class=""><br><p>PostgreSQL 로 설정해 주고, 프리티어를 선택합니다. </p><br><img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image3.png" class=""> <br><p>DB 계정 정보, 인스턴스 식별자, 사용자 이름, 암호를 설정해 줍니다. </p><br><img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image4.png" class=""> <br><p>쭈욱 내리면서, 바꿀 내용이 있는지 확인해 봅니다. 딱히 바꿀것은 없습니다. </p><br><img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image5.png" class=""><br><img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image6.png" class=""><br><p>손댈곳은 없는것 같고, 데이터베이스 생성 버튼을 눌러서, 생성 진행을 해줍니다. </p><br><img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image7.png" class=""><br><p>생성 버튼을 누르면, 아래와 같이 생성중 이라고 표시가 됩니다. </p><br><p>생성이 완료 된 후에 사용 시작 하면 됩니다. </p><br><img src="/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/image8.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/06/09/TodoList-22%ED%8E%B8-AWS-RDS-%EC%83%9D%EC%84%B1%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 21편 - AWS EC2에 배포 시작</title>
      <link>http://djangojeng-e.github.io/2020/06/08/TodoList-21%ED%8E%B8-AWS-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC-%EC%8B%9C%EC%9E%91/</link>
      <guid>http://djangojeng-e.github.io/2020/06/08/TodoList-21%ED%8E%B8-AWS-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC-%EC%8B%9C%EC%9E%91/</guid>
      <pubDate>Mon, 08 Jun 2020 13:06:28 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;AWS-EC2에-배포-시작&quot;&gt;&lt;a href=&quot;#AWS-EC2에-배포-시작&quot; class=&quot;headerlink&quot; title=&quot;AWS EC2에 배포 시작&quot;&gt;&lt;/a&gt;AWS EC2에 배포 시작&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅에서, &lt;/p&gt;
&lt;p&gt;&lt;br&gt;EC2 인스턴스에 연결도 진행하였고, 프로젝트 폴더도 해당 인스턴스에 업로드도 가능했습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이제 기본 배포 진행을 해보려 합니다. 우선 EC2 인스턴스에 접속해서, 기본 우분투 세팅을 해줍니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ubuntu@ip-172-31-32-46:~$ sudo apt update &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ubuntu@ip-172-31-32-46:~$ sudo apt install python3-pip vim&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="AWS-EC2에-배포-시작"><a href="#AWS-EC2에-배포-시작" class="headerlink" title="AWS EC2에 배포 시작"></a>AWS EC2에 배포 시작</h2><br><p>지난 포스팅에서, </p><p><br>EC2 인스턴스에 연결도 진행하였고, 프로젝트 폴더도 해당 인스턴스에 업로드도 가능했습니다. </p><br><p>이제 기본 배포 진행을 해보려 합니다. 우선 EC2 인스턴스에 접속해서, 기본 우분투 세팅을 해줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-32-46:~$ sudo apt update </span><br><span class="line">ubuntu@ip-172-31-32-46:~$ sudo apt install python3-pip vim</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><h2 id="관련-패키지들-설치"><a href="#관련-패키지들-설치" class="headerlink" title="관련 패키지들 설치"></a>관련 패키지들 설치</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install python3-pip vim</span><br></pre></td></tr></table></figure><br><p>python3, pip, vim 을 설치해줍니다. </p><br><h2 id="nginx-설치-및-세팅"><a href="#nginx-설치-및-세팅" class="headerlink" title="nginx 설치 및 세팅"></a>nginx 설치 및 세팅</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install nginx</span><br></pre></td></tr></table></figure><br><blockquote><p>nginx 란? </p><p>2002년부터 러시아의 프로그래머 이고르 시쇼브(Игорь Сысоев)가 Apache HTTPd를 코딩하다 Apache의 C10K 문제[1]를 보고, 이를 극복하기 위해서 네이티브 Win32 환경에도 돌아갈 무설치 웹 서버 데몬 프로그램에 대한 개발을 시작하여 2004년 스푸트니크 1호 발사일에 발표한 <strong>오픈 소스 웹 서버 프로그램</strong>. 현재 이고르 시쇼브와 그가 설립한 회사인 NGINX, Inc.가 이 프로젝트를 운영 중에 있다.[2] 목표는 가벼우면서도 강력한 프로그램이라고 한다. HTTP와 리버스 프록시, IMAP/POP3 등의 서버 구동이 가능하다. Java 서블릿은 대개 Apache의 톰캣을 연동해서 구동하고, PHP의 경우 PHP-FPM(FastCGI Process Manager)을 연동해서 구동한다. </p></blockquote><br><p>nginx 설치가 완료되었으면, 환경 설정을 위해서, sudo su 를 사용. 루트로 들어가준다 </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/sites-available/ 폴더에 접속해본다 </span><br><span class="line"></span><br><span class="line">접속한 후에, ls 를 실행하여, 폴더안에 무엇이 있는지 확인 해보면, </span><br><span class="line">default 라는 항목만 존재하는것을 확인 할수 있다. </span><br><span class="line"></span><br><span class="line">ubuntu@ip-172-31-32-46:~$ sudo su</span><br><span class="line">root@ip-172-31-32-46:/home/ubuntu# cd /etc/nginx/sites-available/</span><br><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available# ls</span><br><span class="line">default</span><br><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available# mv default default.bak</span><br><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available# ls</span><br><span class="line">default.bak</span><br><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available# vim default</span><br></pre></td></tr></table></figure><br><br><p>default 파일을 vim 을 통해서, 아래와 같은 내용을 추가후 저장 종료 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">upstream django&#123;</span><br><span class="line">    server 127.0.0.1:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  listen 80;</span><br><span class="line">  proxy_set_header X-Forwarded-Photo <span class="variable">$scheme</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment"># gunicorn app</span></span><br><span class="line">  location / &#123;</span><br><span class="line">    proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;</span><br><span class="line">    proxy_set_header X-Url-Scheme <span class="variable">$scheme</span>;</span><br><span class="line">    proxy_set_header X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">    proxy_set_header Host <span class="variable">$http_host</span>;</span><br><span class="line"></span><br><span class="line">    proxy_redirect off;</span><br><span class="line"></span><br><span class="line">    proxy_pass http://django;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /static/ &#123;</span><br><span class="line">  autoindex on;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">location /media/ &#123;</span><br><span class="line">  autoindex on;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>service nginx restart 명령어 실행 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available<span class="comment"># service nginx restart</span></span><br></pre></td></tr></table></figure><br><br><p>EC2 에서 일반 우분투 터미널로 복귀 </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@ip-172-31-32-46:/etc/nginx/sites-available<span class="comment"># exit</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line">ubuntu@ip-172-31-32-46:~$ ls</span><br><span class="line">ubuntu@ip-172-31-32-46:~$</span><br></pre></td></tr></table></figure><br><br><h2 id="업로드된-프로젝트로-이동"><a href="#업로드된-프로젝트로-이동" class="headerlink" title="업로드된 프로젝트로 이동"></a>업로드된 프로젝트로 이동</h2><br><p>지난 포스팅에서 프로젝트 폴더를 EC2 에 업로드 해주었었는데.</p><p><br>해당 폴더로 EC2에서 들어가 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-32-46:~$ ls</span><br><span class="line">todolist</span><br><span class="line">ubuntu@ip-172-31-32-46:~$ <span class="built_in">cd</span> todolist</span><br><span class="line">ubuntu@ip-172-31-32-46:~/todolist$ ls</span><br><span class="line">config      deploy.sh  requirements.txt  static     todo</span><br><span class="line">db.sqlite3  manage.py  secrets.json      templates</span><br></pre></td></tr></table></figure><br><p>pip3 install -r requirements.txt 명령어를 실행하여, 패키지를 설치해줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-32-46:~/todolist$ pip3 install -r requirements.txt </span><br><span class="line"></span><br><span class="line"><span class="comment"># 실행후, makemigrations, migrate 를 해줍니다. </span></span><br><span class="line">ubuntu@ip-172-31-32-46:~$ python3 manage.py makemigrations </span><br><span class="line">ubuntu@ip-172-31-32-46:~$ python3 manage.py migrate</span><br></pre></td></tr></table></figure><br><h2 id="settings-py-파일-수정"><a href="#settings-py-파일-수정" class="headerlink" title="settings.py 파일 수정"></a>settings.py 파일 수정</h2><br><p>settings.py 파일안에, ALLOWED_HOSTS 에, EC2 주소를 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = [</span><br><span class="line">    <span class="string">'localhost'</span>,</span><br><span class="line">    <span class="string">'127.0.0.1'</span>,</span><br><span class="line">    <span class="string">'15.164.97.104'</span>,]  <span class="comment"># EC2 주소</span></span><br></pre></td></tr></table></figure><br><br><h2 id="EC2에서-서버-실행-작동-테스트"><a href="#EC2에서-서버-실행-작동-테스트" class="headerlink" title="EC2에서 서버 실행 작동 테스트"></a>EC2에서 서버 실행 작동 테스트</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-32-46:~$ python3 manage.py runserver</span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">May 20, 2020 - 02:11:11</span><br><span class="line">Django version 3.0.6, using settings <span class="string">'config.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><br><p>서버를 실행 시켜 놓은 상태로, 브라우저에 접속해서, EC2 IP 주소를 입력해 보면<br><br>투두리스트가 뜨긴 뜨는데.. CSS와 이미지 적용이 전혀 되지 않은 내용이 브라우저에 표시가 되는걸 확인할수 있었습니다. <br><br></p><img src="/2020/06/08/TodoList-21%ED%8E%B8-AWS-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC-%EC%8B%9C%EC%9E%91/image1.png" class=""><br><p>일단 잘 작동하는것은 확인 하였으니, 서버를 종료 시켜 줍니다.<br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>Django 에서 가장 큰 어려움은, 배포인것 같습니다. <br></p><p>특히, 위의 nginx 는 사용하지 않아도 서버를 실행시키면, 배포가 완료 되긴 하는데;;; 왜 사용하는지도 잘 모르겠고. <br></p><p>nginx 에 대한 설명과 자료들도 굉장히 빈약합니다. 무엇보다 초심자를 위한 설명은 없는듯 합니다;;;  </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/06/08/TodoList-21%ED%8E%B8-AWS-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC-%EC%8B%9C%EC%9E%91/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 20편 - AWS EC2 인스턴스에 접속, 파일 전송</title>
      <link>http://djangojeng-e.github.io/2020/06/05/TodoList-20%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%91%EC%86%8D-%ED%8C%8C%EC%9D%BC-%EC%A0%84%EC%86%A1/</link>
      <guid>http://djangojeng-e.github.io/2020/06/05/TodoList-20%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%91%EC%86%8D-%ED%8C%8C%EC%9D%BC-%EC%A0%84%EC%86%A1/</guid>
      <pubDate>Thu, 04 Jun 2020 23:57:57 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;AWS-EC2-접속-파일전송&quot;&gt;&lt;a href=&quot;#AWS-EC2-접속-파일전송&quot; class=&quot;headerlink&quot; title=&quot;AWS EC2 접속, 파일전송&quot;&gt;&lt;/a&gt;AWS EC2 접속, 파일전송&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅에서, AWS EC2 인스턴스를 생성 하였으니, &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이제 해당 인스턴스에 자유롭게 접속도 하고, 작업한 프로젝트도 업로드 해보려 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;해당 인스턴스에 접속하는 명령어는 아래와 같습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ssh -i &amp;lt;newtodolist.pem 이 다운로드 되있는 경로&amp;gt; ubuntu@&amp;lt;해당인스턴스public IP&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 에시는 아래와 같음. pem 파일의 경로를 잘 설정해주는것이 중요! &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh ~i ~/home/pemkeys/newkeys/newtodolist.pem ubuntu@12.111.87.111&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;p&gt;해당 인스턴스에 프로젝트 폴더를 전송하여, 배포 작업을 시작할것 입니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="AWS-EC2-접속-파일전송"><a href="#AWS-EC2-접속-파일전송" class="headerlink" title="AWS EC2 접속, 파일전송"></a>AWS EC2 접속, 파일전송</h2><br><p>지난 포스팅에서, AWS EC2 인스턴스를 생성 하였으니, </p><p><br>이제 해당 인스턴스에 자유롭게 접속도 하고, 작업한 프로젝트도 업로드 해보려 합니다. </p><br><p>해당 인스턴스에 접속하는 명령어는 아래와 같습니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ssh -i &lt;newtodolist.pem 이 다운로드 되있는 경로&gt; ubuntu@&lt;해당인스턴스public IP&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 에시는 아래와 같음. pem 파일의 경로를 잘 설정해주는것이 중요! </span></span><br><span class="line">ssh ~i ~/home/pemkeys/newkeys/newtodolist.pem ubuntu@12.111.87.111</span><br></pre></td></tr></table></figure><br><br><p>해당 인스턴스에 프로젝트 폴더를 전송하여, 배포 작업을 시작할것 입니다. </p><br><a id="more"></a> <br><h2 id="EC2-에-파일전송-하기"><a href="#EC2-에-파일전송-하기" class="headerlink" title="EC2 에 파일전송 하기"></a>EC2 에 파일전송 하기</h2><br><p>터미널에서 scp 명령어를 사용하여,<br> 생성한 인스턴스에 TodoList 프로젝트 폴더를 업로드 해봅니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -i ~/downloads/keys/newtodolist.pem -r ~/projects/todolist ubuntu@15.164.97.104:/home/ubuntu/</span><br></pre></td></tr></table></figure><br><br><blockquote><p><a href="mailto:ubuntu@15.164.87.452">ubuntu@15.164.87.452</a>, 뒤에 </p><p><code>:</code>을 꼭 붙여주어야 합니다. </p></blockquote><br><p>ssh 명령어를 실행하여, EC2 로 접속해 보면, </p><p><br>파일이 업로드 되어 있는것을 확인 할수 있습니다. </p><br><br><img src="/2020/06/05/TodoList-20%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%91%EC%86%8D-%ED%8C%8C%EC%9D%BC-%EC%A0%84%EC%86%A1/image1.png" class=""> <br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/06/05/TodoList-20%ED%8E%B8-AWS-EC2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4%EC%97%90-%EC%A0%91%EC%86%8D-%ED%8C%8C%EC%9D%BC-%EC%A0%84%EC%86%A1/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
