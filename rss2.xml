<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Tue, 29 Dec 2020 06:34:31 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>DRF-Tutorial-35편- Router 사용하기</title>
      <link>http://djangojeng-e.github.io/2020/12/29/DRF-Tutorial-35%ED%8E%B8-Router-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/29/DRF-Tutorial-35%ED%8E%B8-Router-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 29 Dec 2020 06:16:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Using-Routers&quot;&gt;&lt;a href=&quot;#Using-Routers&quot; class=&quot;headerlink&quot; title=&quot;Using Routers&quot;&gt;&lt;/a&gt;Using Routers&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;우리는 View 클래스들 대신에 Vi
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Using-Routers"><a href="#Using-Routers" class="headerlink" title="Using Routers"></a>Using Routers</h2><br><p>우리는 View 클래스들 대신에 ViewSet 클래스들을 사용하고 있기 때문에, 우리는 사실 우리 스스로 URL Conf 를 딪인해줄 필요가 없습니다. <br></p><br><p>관례적으로, 리소스들을 views 와 urls 에 묶어주는것은 Router 를 사용함으로써 자동으로 다루어 지게 할수 있습니다. 우리가 해야할것은, 적절한 뷰 세트들을 router 에 등록해 주는것입니다. </p><br><p>snippets/urls.py 파일을 아래와 같이 수정해 줍시다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include </span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter </span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views </span><br><span class="line"></span><br><span class="line"><span class="comment"># create a router and register our viewsets with it </span></span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'snippets'</span>, views.SnippetViewSet)</span><br><span class="line">router.register(<span class="string">r'users'</span>, views.UserViewSet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The API URLs are now determined automatically by the router </span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, include(router.urls)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p>뷰셋들을 라우터와 등록해주는것은 urlpattern 을 제공해주는것과 비슷합니다. </p><br><p>우리는 두개의 인자를 포함해 줍니다 - 뷰를 위한 URL prefix 와 뷰셋 그자체. </p><br><p>우리가 사용하는 DefaultRour 클래스는 자동으로 API root 뷰를 생성해줍니다. 따라서, 우리는 api_root 메서드를 우리 view 모듈에서 지워줄수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/29/DRF-Tutorial-35%ED%8E%B8-Router-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-34편- URLs에 명시적으로 ViewSets 묶어주기</title>
      <link>http://djangojeng-e.github.io/2020/12/28/DRF-Tutorial-34%ED%8E%B8-URLs%EC%97%90-%EB%AA%85%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-ViewSets-%EB%AC%B6%EC%96%B4%EC%A3%BC%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/28/DRF-Tutorial-34%ED%8E%B8-URLs%EC%97%90-%EB%AA%85%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-ViewSets-%EB%AC%B6%EC%96%B4%EC%A3%BC%EA%B8%B0/</guid>
      <pubDate>Mon, 28 Dec 2020 00:48:54 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Binding-ViewSets-to-URLs-explicitly&quot;&gt;&lt;a href=&quot;#Binding-ViewSets-to-URLs-explicitly&quot; class=&quot;headerlink&quot; title=&quot;Binding ViewSets to UR
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Binding-ViewSets-to-URLs-explicitly"><a href="#Binding-ViewSets-to-URLs-explicitly" class="headerlink" title="Binding ViewSets to URLs explicitly"></a>Binding ViewSets to URLs explicitly</h2><br><p>handler 메서드들은 URL Conf 를 정의할때에만 동작들에 묶여집니다. </p><br><p>무슨일이 일어나는지 보기 위해, 명시적으로 ViewSets 로 부터, View 의 세트를 생성해 줍니다. </p><br><p><code>snippets/urls.py</code> 파일안에, 우리의 ViewSet 클래스들을 묶어줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.views <span class="keyword">import</span> SnippetViewSet, UserViewSet, api_root </span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers </span><br><span class="line"></span><br><span class="line">snippet_list = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>: <span class="string">'list'</span>,</span><br><span class="line">    <span class="string">'post'</span>: <span class="string">'create'</span></span><br><span class="line">&#125;)</span><br><span class="line">snippet_detail = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>:<span class="string">' retrieve'</span>,</span><br><span class="line">    <span class="string">'put'</span>: <span class="string">'update'</span>,</span><br><span class="line">    <span class="string">'patch'</span>: <span class="string">'partial_update'</span>,</span><br><span class="line">    <span class="string">'delete'</span>: <span class="string">'destroy'</span></span><br><span class="line">&#125;)</span><br><span class="line">snippet_highlight = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>: <span class="string">'highlight'</span></span><br><span class="line">&#125;, renderer_classes=[renderers.StaticHTMLRenderer])</span><br><span class="line"></span><br><span class="line">user_list = UserViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>: <span class="string">'list'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">user_detail = UserViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>: <span class="string">'retrieve'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><p>우리가 어떻게 다수의 뷰들을 각 ViewSet 클래스로부터 생성하고 있는지 알아야 합니다. </p><br><p>http메서드들을 각 뷰에 요구되는 엑션들을 묶어주는식으로 이 작업을 하고 있다는것을 인지하고 있어야 합니다. </p><br><p>이제 우리는 우리의 리소스들을 뷰들에 묶어주었습니다. 우리는 이전처럼, 뷰들을 URL Conf 와 함께 등록 해줄수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = format_suffix_patterns([</span><br><span class="line">    path(<span class="string">''</span>, api_root),</span><br><span class="line">    path(<span class="string">'snippets/'</span>, snippet_list, name=<span class="string">'snippet_list'</span>),</span><br><span class="line">    path(<span class="string">'snippets/&lt;int:pk&gt;/'</span>, snippet_detail, name=<span class="string">'snippet-detail'</span>),</span><br><span class="line">    path(<span class="string">'snippets/&lt;int:pk&gt;/higlight'</span>, snippet_highlight, name=<span class="string">'snippet-highlight'</span>),</span><br><span class="line">    path(<span class="string">'users/'</span>, user_list, name=<span class="string">'user-list'</span>), </span><br><span class="line">    path(<span class="string">'users/&lt;int:pk&gt;/'</span>, user_detail, name=<span class="string">'user-detail'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/28/DRF-Tutorial-34%ED%8E%B8-URLs%EC%97%90-%EB%AA%85%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-ViewSets-%EB%AC%B6%EC%96%B4%EC%A3%BC%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-33편- ViewSets를 사용하기 위해 코드 다시 짜기</title>
      <link>http://djangojeng-e.github.io/2020/12/26/DRF-Tutorial-33%ED%8E%B8-ViewSets%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%BD%94%EB%93%9C-%EB%8B%A4%EC%8B%9C-%EC%A7%9C%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/26/DRF-Tutorial-33%ED%8E%B8-ViewSets%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%BD%94%EB%93%9C-%EB%8B%A4%EC%8B%9C-%EC%A7%9C%EA%B8%B0/</guid>
      <pubDate>Fri, 25 Dec 2020 22:35:29 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Refactoring-to-use-ViewSets&quot;&gt;&lt;a href=&quot;#Refactoring-to-use-ViewSets&quot; class=&quot;headerlink&quot; title=&quot;Refactoring to use ViewSets&quot;&gt;&lt;/a&gt;Refac
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Refactoring-to-use-ViewSets"><a href="#Refactoring-to-use-ViewSets" class="headerlink" title="Refactoring to use ViewSets"></a>Refactoring to use ViewSets</h2><br><p>현재 views 를 viewsets 를 사용하기 위해서, 코드를 다시 refactor 해봅시다. </p><br><p>우선, 우리의 UserList 와 UserDetail 뷰들을 하나의 UserViewSet 으로 리펙터 해줍니다. 우리는 이 두개의 뷰들을 삭제하고, 하나의 클래스로 대체할수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span><span class="params">(viewsets.ReadOnlyModelViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    This viewset automatically provides 'list' and 'detail' actions</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serailizer_class = UserSerializer</span><br></pre></td></tr></table></figure><br><p>우리는 여기에 <code>ReadOnlyModelViewSet</code> 클래스를 사용하여, 자동으로 기본동작인 read-only 를 주었습니다. </p><br><p>우리는 여전히 queryset 과 serializer_class 속성들을 우리가 일반 뷰들을 사용할때처럼 정확하게 명시해 주었습니다. 하지만, 우리는 더이상 같은 정보를 두개의 별도 클래스들에 주지 않아도 됩니다.</p><br><h2 id="SnippetList-SnippetDetail-SnippetHighlight"><a href="#SnippetList-SnippetDetail-SnippetHighlight" class="headerlink" title="SnippetList, SnippetDetail, SnippetHighlight"></a>SnippetList, SnippetDetail, SnippetHighlight</h2><br><p>다음은, 우리는 <code>SnippetList</code>, <code>SnippetDetail</code> 그리고 <code>SnippetHighlight</code> 뷰 클래스들을 교체 해줄겁니다. 우리는 이 세개의 뷰들을 삭제하고, 하나의 클래스로 대체해줍니다.<br></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action </span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    This viewset automatically provides 'list', 'create', 'retrieve', 'update' and 'destroy' actions</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Additionally, we also provide an extra 'hihghlight' action.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = [permissions.IsAuthenticateOrReadOnly, IsOwnerOrReadOnly]</span><br><span class="line"><span class="meta">    @action(detail=True, rendere_classes[renderers.StaticHTMLRenderer])</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">highlight</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        snippet = self.get_objects()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        serializer.save(owner=self.request.user)</span><br></pre></td></tr></table></figure><br><p>이번에 우리는 <code>ModelViewSet</code> 클래스를 사용해서, 완벽하게 기본 읽기와 작성 동작들을 설정해주었습니다. </p><br><p>또한 <code>@action</code> 데코레이터를 사용하여, highlight 라는 커스텀 엑션을 생성해 주었다는것도 숙지해야 합니다. 이 데코레이터는 <code>create/update/delete</code> 스타일에 맞지 않는 커스텀 앤드포인트들을 추가할때 사용됩니다. </p><br><p><code>@action</code> 데코레이터를 사용하는 커스텀 엑션들은 기본적으로 GET 요청들에 반응합니다. </p><br><p>만일 우리가 POST 요청에 반응하는 엑션을 원한다면, 우리는  methods 인자를 사용할수 있습니다. </p><br><p>커스텀 엑션의 URL 들은 기본적으로, 해당 메서드 이름에 따라 결정됩니다. 만약, 우리가 URL 이 생성되는 방식을 바꾸고 싶으면, url_path 를 데코레이터의 키워드 인자로 포함할수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/26/DRF-Tutorial-33%ED%8E%B8-ViewSets%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%BD%94%EB%93%9C-%EB%8B%A4%EC%8B%9C-%EC%A7%9C%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-32편- ViewSets &amp; Routers</title>
      <link>http://djangojeng-e.github.io/2020/12/25/DRF-Tutorial-32%ED%8E%B8-ViewSets-Routers/</link>
      <guid>http://djangojeng-e.github.io/2020/12/25/DRF-Tutorial-32%ED%8E%B8-ViewSets-Routers/</guid>
      <pubDate>Fri, 25 Dec 2020 02:13:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;ViewSets-amp-Routers&quot;&gt;&lt;a href=&quot;#ViewSets-amp-Routers&quot; class=&quot;headerlink&quot; title=&quot;ViewSets &amp;amp; Routers&quot;&gt;&lt;/a&gt;ViewSets &amp;amp; Routers&lt;/
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="ViewSets-amp-Routers"><a href="#ViewSets-amp-Routers" class="headerlink" title="ViewSets &amp; Routers"></a>ViewSets &amp; Routers</h2><br><p>REST FRAMEWORK 는 ViewSets 를 다루기 위한 추상화된것을 포함하고 있습니다. </p><br><p>이는, 개발자들에게 API 의 상태와 상호작용들을 모델링하는데에 집중할수 있게 해주고. URL 빌드업이 자동으로 이루어지게 해줍니다. </p><br><p>ViewSet 클래스들은, View 클래스들과 거의 같습니다. </p><br><p>get 혹은, put 같은 메서드 대신에, read 혹은 update 같은 동작을 제공한다는점만 제외하고 말이죠. </p><br><p>하나의 ViewSet클래스는 메서드 핸들러에 마지막 순간에 bound 됩니다. </p><br><p>보통, Router 를 사용하여, set of views 로 인스턴스화 되었을때, bound 됩니다. </p><br><p>Router 클래스는, URL conf 를 정의하는데에 있는 복잡함을 다루어 줍니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/25/DRF-Tutorial-32%ED%8E%B8-ViewSets-Routers/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-31편- API 브라우징</title>
      <link>http://djangojeng-e.github.io/2020/12/24/DRF-Tutorial-31%ED%8E%B8-API-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95/</link>
      <guid>http://djangojeng-e.github.io/2020/12/24/DRF-Tutorial-31%ED%8E%B8-API-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95/</guid>
      <pubDate>Thu, 24 Dec 2020 07:22:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Browsing-the-API&quot;&gt;&lt;a href=&quot;#Browsing-the-API&quot; class=&quot;headerlink&quot; title=&quot;Browsing the API&quot;&gt;&lt;/a&gt;Browsing the API&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;브라우저를 열어
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Browsing-the-API"><a href="#Browsing-the-API" class="headerlink" title="Browsing the API"></a>Browsing the API</h2><br><p>브라우저를 열어서 브라우저블 API 로 가보면, 이제 우리는 API 사이를 간단하게 링크를 따라가는것만으로도 작업할수 있습니다. </p><br><img src="/2020/12/24/DRF-Tutorial-31%ED%8E%B8-API-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95/image1.png" class=""><br><p>또한, 스니펫 인스턴스에는, highlight 라는 링크를 볼수 있을것이고, 이는 HTML 형태로 스니펫을 하이라이트 해줍니다. </p><br><p>Tutorial Part 6 에서는, 어떻게 <code>ViewSets</code> 과 <code>Routers</code>를 사용하여 코드의 양을 줄일수 있는지 둘러볼것입니다.</p><br><img src="/2020/12/24/DRF-Tutorial-31%ED%8E%B8-API-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95/image2.png" class=""><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/24/DRF-Tutorial-31%ED%8E%B8-API-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-30편- API를 하이퍼링크 해주기</title>
      <link>http://djangojeng-e.github.io/2020/12/23/DRF-Tutorial-30%ED%8E%B8-API%EB%A5%BC-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC-%ED%95%B4%EC%A3%BC%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/23/DRF-Tutorial-30%ED%8E%B8-API%EB%A5%BC-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC-%ED%95%B4%EC%A3%BC%EA%B8%B0/</guid>
      <pubDate>Wed, 23 Dec 2020 06:28:53 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Hyperlinking-our-API&quot;&gt;&lt;a href=&quot;#Hyperlinking-our-API&quot; class=&quot;headerlink&quot; title=&quot;Hyperlinking our API&quot;&gt;&lt;/a&gt;Hyperlinking our API&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;각 요소들의 관계를 다루는것은 우리의 웹 API 디자인에서 조금 더 어려운 부분입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;관계를 표현하기 위해서 선택할수 있는 여러가지 다른 방법들이 존재합니다.&lt;/p&gt;
&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;primary key 사용하기 &lt;/li&gt;
&lt;li&gt;entities 간 하이퍼링크 해주기 &lt;/li&gt;
&lt;li&gt;고유한 slug 필드를 관계된 entity 에 사용해주기 &lt;/li&gt;
&lt;li&gt;관계된 entity 의 기본 문자열 표현 사용하기 &lt;/li&gt;
&lt;li&gt;부모 표현 안에 관계된 entity 네스팅 해주기 &lt;/li&gt;
&lt;li&gt;기타 다른 사용자 정의 표현 &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;REST Frmaework 은 이 모든 스타일들을 지원합니다. 그리고, 순방향 혹은 역방향 관계들에 적용할수 있습니다. 혹은, generic foreign key 와 같은 커스텀 메니저에도 적용될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이번에 우리는, entity 간에 하이퍼링크를 해주는 스타일을 사용해 볼겁니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이를 하기 위해서는, 기존에 존재하던 &lt;code&gt;ModelSerializer&lt;/code&gt; 대신에, 우리의 serializer 를 수정하여 &lt;code&gt;HyperlinkedModelSerializer&lt;/code&gt; 를 확장해야 합니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Hyperlinking-our-API"><a href="#Hyperlinking-our-API" class="headerlink" title="Hyperlinking our API"></a>Hyperlinking our API</h2><br><p>각 요소들의 관계를 다루는것은 우리의 웹 API 디자인에서 조금 더 어려운 부분입니다. </p><br><p>관계를 표현하기 위해서 선택할수 있는 여러가지 다른 방법들이 존재합니다.</p><br><ul><li>primary key 사용하기 </li><li>entities 간 하이퍼링크 해주기 </li><li>고유한 slug 필드를 관계된 entity 에 사용해주기 </li><li>관계된 entity 의 기본 문자열 표현 사용하기 </li><li>부모 표현 안에 관계된 entity 네스팅 해주기 </li><li>기타 다른 사용자 정의 표현 </li></ul><br><p>REST Frmaework 은 이 모든 스타일들을 지원합니다. 그리고, 순방향 혹은 역방향 관계들에 적용할수 있습니다. 혹은, generic foreign key 와 같은 커스텀 메니저에도 적용될수 있습니다. </p><br><p>이번에 우리는, entity 간에 하이퍼링크를 해주는 스타일을 사용해 볼겁니다. </p><br><p>이를 하기 위해서는, 기존에 존재하던 <code>ModelSerializer</code> 대신에, 우리의 serializer 를 수정하여 <code>HyperlinkedModelSerializer</code> 를 확장해야 합니다. </p><br><a id="more"></a><br><blockquote><p><code>HyperlinkedModelSerializer</code> 는 <code>ModelSerializer</code> 와 차이점이 있습니다. </p><br><ol><li>기본값으로 id 필드를 포함하지 않습니다 </li><li>HyperlinkedIdentityfield 를 사용하여, url 필드를 포함합니다 </li><li>관계들은 <code>HyperlinkedRelatedField</code> 를 <code>PrimaryKeyRelatedFiedl</code> 대신 사용합니다. </li></ol></blockquote><br><p>우리는 이미 쉽게 존재하는 serializers 를 재작성하여 hyperlinking 을 사용하도록 만들수 있습니다. </p><br><p><code>snippets/serializer.py</code> 파일을 열고, 아래를 추가해줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class="line">    owner = serializers.ReadOnlyFied(source=<span class="string">'owner.username'</span>)</span><br><span class="line">    highlight = serializers.HyperlinkedIdentityField(view_name=<span class="string">'snippet-highlight'</span>, format=<span class="string">'html'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = [<span class="string">'url'</span>, <span class="string">'id'</span>, <span class="string">'highlight'</span>, <span class="string">'owner'</span>, <span class="string">'title'</span>, </span><br><span class="line">                <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>]</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class="line">    snippets = serializers.HyperlinkedRelatedField(many=<span class="literal">True</span>, view_name=<span class="string">'snippet-detail'</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">'url'</span>, <span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'snippets'</span>]</span><br></pre></td></tr></table></figure><br><p>우리가 새로운 highlight 필드를 추가했다는것을 알고 있어야 합니다. 이필드는 snippet-detail 대신에 snippet-highlight URL 패턴을 가르키는것을 제외하고는, url 필드와 같은 타입의 필드 입니다. </p><br><p>우리는 <code>.json</code> 같은, 접미사 url 을 포함하였기 때문에, highlight 필드에 접미사로된 하이퍼링크들은 <code>.html</code> 접미사를 사용하도록 명시해 줍니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/23/DRF-Tutorial-30%ED%8E%B8-API%EB%A5%BC-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC-%ED%95%B4%EC%A3%BC%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-29편- 하이라이트된 스니펫에 앤드포인트 생성</title>
      <link>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%ED%95%98%EC%9D%B4%EB%9D%BC%EC%9D%B4%ED%8A%B8%EB%90%9C-%EC%8A%A4%EB%8B%88%ED%8E%AB%EC%97%90-%EC%95%A4%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%83%9D%EC%84%B1/</link>
      <guid>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%ED%95%98%EC%9D%B4%EB%9D%BC%EC%9D%B4%ED%8A%B8%EB%90%9C-%EC%8A%A4%EB%8B%88%ED%8E%AB%EC%97%90-%EC%95%A4%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%83%9D%EC%84%B1/</guid>
      <pubDate>Tue, 15 Dec 2020 07:25:57 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Creating-an-endpoint-for-the-highlighted-snippets&quot;&gt;&lt;a href=&quot;#Creating-an-endpoint-for-the-highlighted-snippets&quot; class=&quot;headerlink&quot; title=&quot;Creating an endpoint for the highlighted snippets&quot;&gt;&lt;/a&gt;Creating an endpoint for the highlighted snippets&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;우리의 API 코드가 코드 하이라이팅에 앤드포인트를 가지고 있지 않습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;우리는 JSON 을 사용하지 않고, HTML 로 표시합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;REST FRAMEWORK 에서는, 두가지 스타일의 HTML 렌더러가 제공됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;템플릿을 사용하여, HTML 을 렌더 &lt;/li&gt;
&lt;li&gt;미리 렌더가 된 HTML 을 다루는것 &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;p&gt;2번째 방식이, 우리가 앤드포인트를 위해 사용하고 싶은것 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;코드 하이라이트 뷰를 생성할때 염두해 두어야 할 또다른 한가지는, 우리가 사용할수 있는 강력한 generic 뷰가 존재하지 않는다는 점입니다. 우리는 객체 인스턴스를 반환하지 않지만, 객체 인스턴스의 속성을 대신 리턴해 줄겁니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;generic 뷰를 사용하는 대신에, 우리는 인스턴스를 표현하기 위한 베이스 클래스를 사용하고, 우리만의 &lt;code&gt;.get()&lt;/code&gt; 메서드를 사용할겁니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;snippets/views.py&lt;/code&gt; 파일을 열고, 아래를 추가해 줍니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Creating-an-endpoint-for-the-highlighted-snippets"><a href="#Creating-an-endpoint-for-the-highlighted-snippets" class="headerlink" title="Creating an endpoint for the highlighted snippets"></a>Creating an endpoint for the highlighted snippets</h2><br><p>우리의 API 코드가 코드 하이라이팅에 앤드포인트를 가지고 있지 않습니다. </p><br><p>우리는 JSON 을 사용하지 않고, HTML 로 표시합니다. </p><br><p>REST FRAMEWORK 에서는, 두가지 스타일의 HTML 렌더러가 제공됩니다. </p><br><ol><li>템플릿을 사용하여, HTML 을 렌더 </li><li>미리 렌더가 된 HTML 을 다루는것 </li></ol><br><p>2번째 방식이, 우리가 앤드포인트를 위해 사용하고 싶은것 입니다. </p><br><p>코드 하이라이트 뷰를 생성할때 염두해 두어야 할 또다른 한가지는, 우리가 사용할수 있는 강력한 generic 뷰가 존재하지 않는다는 점입니다. 우리는 객체 인스턴스를 반환하지 않지만, 객체 인스턴스의 속성을 대신 리턴해 줄겁니다. </p><br><p>generic 뷰를 사용하는 대신에, 우리는 인스턴스를 표현하기 위한 베이스 클래스를 사용하고, 우리만의 <code>.get()</code> 메서드를 사용할겁니다. </p><br><p><code>snippets/views.py</code> 파일을 열고, 아래를 추가해 줍니다. </p><p><br><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnipeptHighlight</span><span class="params">(generics.GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    renderer_classes = [renderes.StaticHTMLRenderer]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        snippet = self.get_object()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br></pre></td></tr></table></figure><br><p>평소와 같이 우리는 우리가 생성한 새로운 뷰들을 URLConf 에 추가해 주어야 합니다. </p><br><p>새로운 API root 를 <code>snippets/urls.py</code> 파일안에 urlpatterns 에 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">''</span>, views.api_root),</span><br></pre></td></tr></table></figure><br><p>그리고 나서, 스니펫 하이라이트들을 url 패턴에 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'snippets/&lt;int:pk&gt;/highlight/'</span>, views.SnippetHighlight.as_view()),</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%ED%95%98%EC%9D%B4%EB%9D%BC%EC%9D%B4%ED%8A%B8%EB%90%9C-%EC%8A%A4%EB%8B%88%ED%8E%AB%EC%97%90-%EC%95%A4%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%83%9D%EC%84%B1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-29편- 객체 레벨 권한</title>
      <link>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%EA%B0%9D%EC%B2%B4-%EB%A0%88%EB%B2%A8-%EA%B6%8C%ED%95%9C/</link>
      <guid>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%EA%B0%9D%EC%B2%B4-%EB%A0%88%EB%B2%A8-%EA%B6%8C%ED%95%9C/</guid>
      <pubDate>Tue, 15 Dec 2020 07:23:34 GMT</pubDate>
      <description>
      
      </description>
      
      
      <comments>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%EA%B0%9D%EC%B2%B4-%EB%A0%88%EB%B2%A8-%EA%B6%8C%ED%95%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-28편- 관계와 하이퍼링크된 APIs</title>
      <link>http://djangojeng-e.github.io/2020/12/14/DRF-Tutorial-28%ED%8E%B8-%EA%B4%80%EA%B3%84%EC%99%80-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC%EB%90%9C-APIs/</link>
      <guid>http://djangojeng-e.github.io/2020/12/14/DRF-Tutorial-28%ED%8E%B8-%EA%B4%80%EA%B3%84%EC%99%80-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC%EB%90%9C-APIs/</guid>
      <pubDate>Mon, 14 Dec 2020 07:51:33 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Relationships-amp-Hyperlinked-APIs&quot;&gt;&lt;a href=&quot;#Relationships-amp-Hyperlinked-APIs&quot; class=&quot;headerlink&quot; title=&quot;Relationships &amp;amp; Hype
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Relationships-amp-Hyperlinked-APIs"><a href="#Relationships-amp-Hyperlinked-APIs" class="headerlink" title="Relationships &amp; Hyperlinked APIs"></a>Relationships &amp; Hyperlinked APIs</h2><br><p>현재 우리의 API 안에 있는 관계들은 primary key 를 사용하여 표현되어 있습니다. </p><br><p>이번 튜토리얼에서 우리는 우리의 API 의 결속력을 찾기 쉽게 향상 시킬겁니다. 이는 관계들을 하이퍼링크로 잇는 것을 사용하여 이룰수 있습니다. </p><br><h2 id="Creating-an-endpoint-for-the-root-of-our-API"><a href="#Creating-an-endpoint-for-the-root-of-our-API" class="headerlink" title="Creating an endpoint for the root of our API"></a>Creating an endpoint for the root of our API</h2><br><p>지금 현재 우리는 snippets 와 users 에 앤드포인트들을 가지고 있습니다. 하지만, 우리는 우리의 API 에 하나의 진입점을 가지고 있지 않습니다. 하나를 생성하기 위해, 우리는 일반 함수형 뷰와 @api_view 데코레이터를 사용할것 입니다. </p><br><p><code>snippets/views.py</code> 파일을 열고, 아래 내용을 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view </span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse </span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_root</span><span class="params">(request, format=None)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Response(&#123;</span><br><span class="line">        <span class="string">'users'</span>: reverse(<span class="string">'user-list'</span>m request=request, format=format),</span><br><span class="line">        <span class="string">'snippets'</span>: reverse(<span class="string">'snippet-list'</span>, request=request, format=format)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><br><p>여기에서 두가지를 알고 넘어가야 합니다. </p><br><ol><li>우리는 REST FRMAEWORK 의 reverse 함수를 사용하여, 완벽한 URL 을 반환합니다 </li><li>URL 패턴들은 쉬운 이름으로 정의가 되고, 나중에 snippets/urls.py 에 선언될것 입니다. </li></ol><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/14/DRF-Tutorial-28%ED%8E%B8-%EA%B4%80%EA%B3%84%EC%99%80-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC%EB%90%9C-APIs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-27편- 브라우저블 API에 로그인 추가하기</title>
      <link>http://djangojeng-e.github.io/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 13 Dec 2020 06:17:42 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Adding-login-to-the-Browable-API&quot;&gt;&lt;a href=&quot;#Adding-login-to-the-Browable-API&quot; class=&quot;headerlink&quot; title=&quot;Adding login to the Browable
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Adding-login-to-the-Browable-API"><a href="#Adding-login-to-the-Browable-API" class="headerlink" title="Adding login to the Browable API"></a>Adding login to the Browable API</h2><br><p>지금 브라우저를 열어서 브라우저로 API 로 가보면, 더이상 여러분들은 새로운 코드 스니펫을 생성할수 없다는것을 발견할것입니다. </p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image1.png" class=""><br><p>새로운 코드 스니펫을 생성하기 위해서는, 사용자로써 로그인을 해야 합니다. </p><br><p>브라우저로 API 를 사용하기 위해서, 로그인 뷰를 추가해줄수 있습니다. </p><br><p>이는, 프로젝트 레벨의 URLConf 를 수정함으로써 해줄수 있습니다. urls.py 파일을 아래와 같이 수정해 줍니다. </p><br><p>urls.py 를 아래와 같이 수정 </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include </span><br><span class="line"></span><br><span class="line">urlpatterns += [</span><br><span class="line">    path(<span class="string">'api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p><code>api-auth</code> 부분은 우리가 사용하고 싶은 어떤 URL 이름을 써도 괜찮습니다. </p><br><p>이제 브라우저를 다시 열고 새로고침을 하면, Login 링크가 페이지의 오른쪽 상단에 보일것입니다. </p><br><p>여러분들이 이전에 생성한 사용자 디테일로 로그인을 하면, 이제 다시 코드 스니펫을 생성할수 있을것입니다. </p><br><p><strong>화면 오른쪽 상단에 Login 링크 확인</strong></p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image2.png" class=""><br><p><strong>이전 포스팅에서 생성한 사용자로 로그인 진행</strong></p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image3.png" class=""><br><p>로그인 진행후 화면에는, 새로운 코드를 생성할수 있는 필드가 나옴 </p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image4.png" class=""><br><p>몇가지 코드 스니펫들을 생성 하였으면, ‘/users/‘ 엔드포인트로 이동하고, </p><p>각 사용자에 연결된 snippet ids 의 리스트가 표시되는것을 확인합니다, 각 사용자의 snippets 필드 안에 있습니다. </p><br><p><strong>사용자 1의 디테일</strong></p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image5.png" class=""><br><p><strong>사용자 2의 디테일</strong></p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image6.png" class=""><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-26편- API로 인증하기</title>
      <link>http://djangojeng-e.github.io/2020/12/06/DRF-Tutorial-26%ED%8E%B8-API%EB%A1%9C-%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/06/DRF-Tutorial-26%ED%8E%B8-API%EB%A1%9C-%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 06 Dec 2020 09:00:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Authenticating-with-the-API&quot;&gt;&lt;a href=&quot;#Authenticating-with-the-API&quot; class=&quot;headerlink&quot; title=&quot;Authenticating with the API&quot;&gt;&lt;/a&gt;Authe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Authenticating-with-the-API"><a href="#Authenticating-with-the-API" class="headerlink" title="Authenticating with the API"></a>Authenticating with the API</h2><br><p>우리는 이제 API 에 몇가지 권한 설정들을 가지고 있기 때문에, </p><p>우리가 어떠한 스니펫을 수정하고 싶을때에 우리의 요청들을 인증할 필요가 있습니다. </p><br><p>우리는 그 어떠한 authentication 클래스들을 설정해 주지 않았고, 그렇기 때문에 현재는 SessionAuthentication 과 BasicAuthentication 같은 기본값들만 적용 되어 있는 상태 입니다. </p><br><p>웹브라우저를 통해서 API 와 상호 작용할때에, 우리는 로그인 할수 있고. 브라우저 세션은 해당 요청들에 대한 필요한 인증 기능을 제공합니다. </p><br><p>하지만, 만약 우리가 API 를 프로그래밍적으로 이용할때에는, 명시적으로 인증서를 각 요청마다 제공해줘야 합니다. </p><br><p><strong>만약, 터미널에서 인증 없이 snippet 을 생성하고자 한다면 에러가 날것입니다</strong></p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http POST http://127.0.0.1:8000/snippets/ code="print(123)"</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "detail": "Authentication credentials were not provided."</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>그렇지만, 사용자의 username 과 password 를 포함한 요청을 보내면, 성공적인 결과를 얻을수 있습니다.</p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http -a admin:password123 POST http://127.0.0.1:8000/snippets/ code="print(789)"</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "id": 1,</span><br><span class="line">    "owner": "admin",</span><br><span class="line">    "title": "foo",</span><br><span class="line">    "code": "print(789)",</span><br><span class="line">    "linenos": false,</span><br><span class="line">    "language": "python",</span><br><span class="line">    "style": "friendly"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><blockquote><p>정리</p></blockquote><br><p>이제 우리는, 우리의 웹 API 에 추가로 사용자들의 앤드포인트들에 그리고 그들이 생성한 코드 스니펫에 대한 적당한 권한 설정들을 가지고 있습니다. </p><br><p>Part5 에서는, 어떻게 모든것들이 묶여서 하이라이트된 코드 스니펫들을 HTML endpoint 로 생성할수 있고, 우리의 API 시스템내에 존재하는 관계들을 하이퍼링크들을 사용하여 우리의 API 의 단결성을 향상시킬수 있는지 알아볼겁니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/06/DRF-Tutorial-26%ED%8E%B8-API%EB%A1%9C-%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-25편- 객체단에서의 권한</title>
      <link>http://djangojeng-e.github.io/2020/12/05/DRF-Tutorial-25%ED%8E%B8-%EA%B0%9D%EC%B2%B4%EB%8B%A8%EC%97%90%EC%84%9C%EC%9D%98-%EA%B6%8C%ED%95%9C/</link>
      <guid>http://djangojeng-e.github.io/2020/12/05/DRF-Tutorial-25%ED%8E%B8-%EA%B0%9D%EC%B2%B4%EB%8B%A8%EC%97%90%EC%84%9C%EC%9D%98-%EA%B6%8C%ED%95%9C/</guid>
      <pubDate>Sat, 05 Dec 2020 05:02:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Object-Level-Permissions&quot;&gt;&lt;a href=&quot;#Object-Level-Permissions&quot; class=&quot;headerlink&quot; title=&quot;Object Level Permissions&quot;&gt;&lt;/a&gt;Object Level P
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Object-Level-Permissions"><a href="#Object-Level-Permissions" class="headerlink" title="Object Level Permissions"></a>Object Level Permissions</h2><br><p>실제로 우리는, 모든 코드 스니펫들이 누구에게나 보여지지만 오직 해당 스니펫을 생성한 사용자만 업데이트 혹은 삭제를 할수 있게 만들고 싶습니다. </p><br><p>이것을 하기 위해서는, 커스텀 권한을 생성할 필요가 있습니다. </p><br><p><code>permissions.py</code> 라는 파일을, snippet 앱 안에 생성해 줍니다. <code>snippets/permissions.py</code> 파일에, 아래 내용을 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerOrReadOnly</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Custom permission to only allow owners of an object to edit it </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permissions</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="comment"># Read permissions are allowed to any request </span></span><br><span class="line">        <span class="comment"># 읽기 권한은 어떤 요청에도 허용됨 </span></span><br><span class="line">        <span class="comment"># So we'll always allow GET, HEAD or OPTIONS requests </span></span><br><span class="line">        <span class="comment"># 따라서, 우리는 언제나 GET, HEAD 혹은 OPTIONS 요청들을 허용함 </span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> permissions.SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Write permissions are only allowed to the owner of the snippet </span></span><br><span class="line">        <span class="comment"># 해당 snippet 의 owner 만 작성 권한이 허용됨 </span></span><br><span class="line">        <span class="keyword">return</span> obj.owner == request.user</span><br></pre></td></tr></table></figure><br><p>이제 이 커스텀 권한을 우리의 스니펫 인스턴스 앤드포인트에 추가해줍니다. SnippetDetail 뷰 클래스 안에 있는 permission_classes 속성에 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">permission_classes = [permissions.IsAuthenticatedOrReadOnly,</span><br><span class="line">  IsOwnerOrReadOnly]</span><br></pre></td></tr></table></figure><br><p>우리가 작성한 <code>IsOwnerOrReadOnly</code> 클래스를 가져오는것을 까먹으면 안됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br></pre></td></tr></table></figure><br><p>이제, 브라우저를 다시 열어보면, 코드 스니펫을 생성한 사용자가 로그인 하였을때, <code>DELETE</code> 와 <code>PUT</code> 액션들이 스니펫 인스턴스의 앤드포인트에만 나타나는것을 확인 할수 있습니다. </p><br><img src="/2020/12/05/DRF-Tutorial-25%ED%8E%B8-%EA%B0%9D%EC%B2%B4%EB%8B%A8%EC%97%90%EC%84%9C%EC%9D%98-%EA%B6%8C%ED%95%9C/image1.png" class=""><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/05/DRF-Tutorial-25%ED%8E%B8-%EA%B0%9D%EC%B2%B4%EB%8B%A8%EC%97%90%EC%84%9C%EC%9D%98-%EA%B6%8C%ED%95%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-24편- 브라우저블 API 에 로그인 추가하기</title>
      <link>http://djangojeng-e.github.io/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 04 Dec 2020 07:19:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Adding-login-to-the-browsable-API&quot;&gt;&lt;a href=&quot;#Adding-login-to-the-browsable-API&quot; class=&quot;headerlink&quot; title=&quot;Adding login to the browsa
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Adding-login-to-the-browsable-API"><a href="#Adding-login-to-the-browsable-API" class="headerlink" title="Adding login to the browsable API"></a>Adding login to the browsable API</h2><br><p>지금 브러우저를 열어서 브라우저로 API 로 접근을 해보면, 더이상 새로운 코드 스니펫을 생성할수 없다는것을 발견할수 있습니다. </p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image1.png" class=""><br><p>새로운 코드 스니펫을 생성하기 위해서는, 사용자로써 로그인을 해야 합니다. </p><br><p>브라우저로 API 를 사용하기 위해서, 로그인 뷰를 추가해 줄수 있습니다. </p><p>이는, 프로젝트 레벨의 URLConf 를 수정함으로써 해줄수 있습니다. urls.py 파일을 아래와 같이 수정해 줍니다. </p><br><p><code>snippets/urls.py</code> 파일말고, 프로젝트 urls.py 파일을 아래와 같이 수정해 줍시다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include</span><br><span class="line"></span><br><span class="line">urlpatterns += [</span><br><span class="line">path(<span class="string">'api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p>api-auth/ 부분은 우리가 사용하고 싶은 어떤 URL 이름을 써도 괜찮습니다</p><br><p>이제 브라우저를 다시 열고 새로고침을 하면, login 링크가 페이지의 오른쪽 상단에 볼수 있을겁니다.</p><br><p>여러분들이 이전에 생성한 사용자 디테일로 로그인을 하면, 다시 코드 스니펫을 생성할수 있을것입니다. </p><br><p>*<em>화면 오른쪽 상단에 Login 링크 확인 *</em></p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image2.png" class=""><br><p><strong>이전 포스팅에서 생성한 사용자로 로그인 진행</strong></p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image3.png" class=""><br><p><strong>로그인 진행후 화면에는, 새로운 코드를 생성할수 있는 필드가 나옵니다</strong></p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image4.png" class=""><br><p>몇가지 코드 스니펫들을 생성하였으면 <code>/users/</code> 앤드포인트로 이동하고, </p><p><br>각 사용자에 연결된 snippet id 의 리스트가 표시되는것을 확인할수 있습니다. 각 사용자의 snippets 필드 안에 있습니다.</p><br><p>아래는, 사용자 1 의 디테일 </p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image5.png" class=""><br><p>사용자 2의 디테일</p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image6.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-23편- 뷰에 필요한 권한 추가하기</title>
      <link>http://djangojeng-e.github.io/2020/12/03/DRF-Tutorial-23%ED%8E%B8-%EB%B7%B0%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B6%8C%ED%95%9C-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/03/DRF-Tutorial-23%ED%8E%B8-%EB%B7%B0%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B6%8C%ED%95%9C-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 03 Dec 2020 08:42:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Adding-required-permissions-to-views&quot;&gt;&lt;a href=&quot;#Adding-required-permissions-to-views&quot; class=&quot;headerlink&quot; title=&quot;Adding required perm
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Adding-required-permissions-to-views"><a href="#Adding-required-permissions-to-views" class="headerlink" title="Adding required permissions to views"></a>Adding required permissions to views</h2><br><p>이제 코드 스니펫들은 사용자와 연결이 되어 있습니다. </p><br><p>우리는 오직 인증된 사용자들만 스니펫들을 생성하고, 업데이트 하고 삭제할수 있게 만들고 싶습니다. </p><br><p>REST FRAMEWORK 은 우리가 사용할수 있는 몇가지 권한 클래스들을 가지고 있습니다. 이를 사용하여, 해당 뷰를 누가 접근할수 있는지에 대한 제약을 줄수 있습니다. </p><br><p>이번 경우에, <code>IsAuthenticatedOrReadOnly</code> 를 볼수 있습니다. 이 클래스는, 오직 인증이된 요청들만 읽고-쓸수 있는 접근을 할수 있게 해줍니다. 그리고, 인증이 되지 않은 요청들은 오직 읽기전용 접근만 허용됩니다. </p><br><blockquote><p><strong>IsAuthenticatedOrReadOnly</strong></p><p>오직 인증된 요청들만 읽고-쓸수 있는 접근을 가능하게 해줍니다. </p><p>인증이 되지 않은 요청들은 오직 읽기전용 접근만 허용됩니다.</p></blockquote><br><p><code>snippets/views.py</code> 파일에, 아래와 같이 <code>permissions</code> 를 불러와 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br></pre></td></tr></table></figure><br><p>그리고 나서, <code>snippets/views.py</code>  파일 안에 있는 <code>SnippetList</code> 와 <code>SnippetDetail</code> 클래스들에 아래 속성을 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permission_class = [permissions.IsAuthenticatedOrReadOnly]</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/03/DRF-Tutorial-23%ED%8E%B8-%EB%B7%B0%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B6%8C%ED%95%9C-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-22편- Serializer 업데이트 해주기</title>
      <link>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-22%ED%8E%B8-Serializer-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%B4%EC%A3%BC%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-22%ED%8E%B8-Serializer-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%B4%EC%A3%BC%EA%B8%B0/</guid>
      <pubDate>Wed, 02 Dec 2020 08:28:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Serializer-업데이트-해주기&quot;&gt;&lt;a href=&quot;#Serializer-업데이트-해주기&quot; class=&quot;headerlink&quot; title=&quot;Serializer 업데이트 해주기&quot;&gt;&lt;/a&gt;Serializer 업데이트 해주기&lt;/h2&gt;&lt;br&gt;

        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Serializer-업데이트-해주기"><a href="#Serializer-업데이트-해주기" class="headerlink" title="Serializer 업데이트 해주기"></a>Serializer 업데이트 해주기</h2><br><p>이제 snippets 는 해당 snippets 를 생성한 user 와 연계되어 있습니다. </p><br><p><code>snippets/serializers.py</code> 에 <code>SnippetSerializer</code> 를 업데이트 하여, 이를 반영하도록 해줍니다. </p><br><p>아래 코드를, <code>snippets/serializers.py</code> 파일에 추가 해줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    owner = serializers.ReadOnlyField(source=<span class="string">'owner.username'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet </span><br><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>, <span class="string">'owner'</span>]</span><br></pre></td></tr></table></figure><br><blockquote><p>owner 를 Meta 클래스안에 fields 리스트에 확실하게 추가해 주는걸 잊지 않습니다. </p></blockquote><br><p>이 필드는 꽤나 재미있는 일을 합니다. source 인자는 어떤 속성이 필드를 채우기 위해 사용되는지 제어합니다. 그리고, 직렬화된 인스턴스에 속성을 가르킬수도 있습니다. </p><br><p>또한, 위에 보이는데로, <code>owner.username</code> 같이 점을 찍은 표현 (dot-notation) 을 인자로 받아서, django 의 템플릿 언어와 같이 주어진 속성들을 파악 합니다. </p><br><p>우리가 추가한 필드는 타이핑이 되지 않는 ReadOnlyField 클래스로, CharField, BooleanField 등과 같은 다른 타이핑된 필드들과는 대조됩니다. 타이핑 되지 않은 ReadOnlyField 는 언제나 읽기 전용이고, 직렬화된 표현으로 사용될것 입니다. </p><br><p>하지만, 이것들이 역직렬화되었을때는, 모델 인스턴스들을 업데이트 할때 사용되지 않을것입니다. 우리는, <code>CharField(read_only=True)</code> 도 이곳에 사용할수도 있었습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-22%ED%8E%B8-Serializer-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%B4%EC%A3%BC%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 21편 - Snippets 와 User 를 연계하기</title>
      <link>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-21%ED%8E%B8-Snippets-%EC%99%80-User-%EB%A5%BC-%EC%97%B0%EA%B3%84%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-21%ED%8E%B8-Snippets-%EC%99%80-User-%EB%A5%BC-%EC%97%B0%EA%B3%84%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Wed, 02 Dec 2020 08:21:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Associating-Snippets-with-Users&quot;&gt;&lt;a href=&quot;#Associating-Snippets-with-Users&quot; class=&quot;headerlink&quot; title=&quot;Associating Snippets with User
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Associating-Snippets-with-Users"><a href="#Associating-Snippets-with-Users" class="headerlink" title="Associating Snippets with Users"></a>Associating Snippets with Users</h2><br><p>지금 우리가 코드 스니펫을 생성했다면, 스니펫을 생성한 사용자와 스니펫 인스턴스가 연계되는길은 없습니다. 사용자는 직렬화된 형태를 전달받지 않습니다. 하지만, 들어오는 요청의 속성으로 있습니다. </p><br><p>이것을 해결하기 위해, snippet 뷰에 <code>.perform_create()</code> 메서드를 오버라이딩 해줍니다. 이는, 어떻게 인스턴스 저장이 관리되고, 들어오는 요청 혹은 요청된 URL 안에 숨겨져 있는 정보를 다룰수 있게 해줍니다. </p><br><p>SnippetList 뷰 클래스에, 아래 메서드를 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        serializer.save(owner=self.request.user)</span><br></pre></td></tr></table></figure><br><p>우리의 serializer 의 create() 메서드는, 이제 추가적인 owner필드를 요청으로부터 유효한 데이터와 함께 전달 받습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-21%ED%8E%B8-Snippets-%EC%99%80-User-%EB%A5%BC-%EC%97%B0%EA%B3%84%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 20편 - 유저모델을 위한 엔드포인트 추가하기</title>
      <link>http://djangojeng-e.github.io/2020/12/01/DRF-Tutorial-20%ED%8E%B8-%EC%9C%A0%EC%A0%80%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/01/DRF-Tutorial-20%ED%8E%B8-%EC%9C%A0%EC%A0%80%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 01 Dec 2020 09:09:56 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Adding-information-to-our-model&quot;&gt;&lt;a href=&quot;#Adding-information-to-our-model&quot; class=&quot;headerlink&quot; title=&quot;Adding information to our model&quot;&gt;&lt;/a&gt;Adding information to our model&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Endpoint 란?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;어떠한 소프트웨어나 제품의 최종목적지인 사용자를 가리킴 &lt;/p&gt;
&lt;p&gt;사전적 의미로는, 연결의 한쪽 끝에 있는 엔티티 (주체)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;이제 우리는 작업을 같이 할 몇몇의 사용자가 있습니다. 우리의 API 에 이 사용자들이 표시되게 하는것이 나을것 같습니다. 새로운 serializer 를 생성하는것은 쉽습니다. &lt;code&gt;snippets/serializers.py&lt;/code&gt; 파일안에, 아래 내용을 추가해 줍니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; User &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserSerializer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(serializer.ModelSerializer)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    snippets = serializers.PrimaryKeyRelatedField(many=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;, queryset=Snippet.objects.all())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Meta&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        model = User&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fields = [&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;snippets&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;&lt;strong&gt;Snippets 들은 User 모델에서 역방향 관계에 있기 때문에&lt;/strong&gt; &lt;code&gt;ModelSerializer&lt;/code&gt; 클래스를 사용할때에 기본값으로 포함되어 있지 않을것입니다. 따라서, 우리는 명시적으로, 필드를 추가해 주어야 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;Snippet Class 에 ForiegnKey 를 사용하여 User 모델에 연결되어 있기 때문에, &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;하나의 Snippet 객체에서 연결되어 있는 User 객체를 조회할때는 순방향 (Forward) 라고 하고, &lt;/p&gt;
&lt;p&gt;하나의 User 객체에서, 연결되어 있는 Snippet 객체를 조회할때는, 역방향 (Backward or Reverse) 라고 합니다. 따라서, snippets 는 User 모델에서 역방향 관계에 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Adding-information-to-our-model"><a href="#Adding-information-to-our-model" class="headerlink" title="Adding information to our model"></a>Adding information to our model</h2><br><blockquote><p><strong>Endpoint 란?</strong></p><p>어떠한 소프트웨어나 제품의 최종목적지인 사용자를 가리킴 </p><p>사전적 의미로는, 연결의 한쪽 끝에 있는 엔티티 (주체)</p></blockquote><br><p>이제 우리는 작업을 같이 할 몇몇의 사용자가 있습니다. 우리의 API 에 이 사용자들이 표시되게 하는것이 나을것 같습니다. 새로운 serializer 를 생성하는것은 쉽습니다. <code>snippets/serializers.py</code> 파일안에, 아래 내용을 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializer.ModelSerializer)</span>:</span></span><br><span class="line">    snippets = serializers.PrimaryKeyRelatedField(many=<span class="literal">True</span>, queryset=Snippet.objects.all())</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'snippets'</span>]</span><br></pre></td></tr></table></figure><br><p><strong>Snippets 들은 User 모델에서 역방향 관계에 있기 때문에</strong> <code>ModelSerializer</code> 클래스를 사용할때에 기본값으로 포함되어 있지 않을것입니다. 따라서, 우리는 명시적으로, 필드를 추가해 주어야 합니다. </p><br><blockquote><p>Snippet Class 에 ForiegnKey 를 사용하여 User 모델에 연결되어 있기 때문에, </p><br><p>하나의 Snippet 객체에서 연결되어 있는 User 객체를 조회할때는 순방향 (Forward) 라고 하고, </p><p>하나의 User 객체에서, 연결되어 있는 Snippet 객체를 조회할때는, 역방향 (Backward or Reverse) 라고 합니다. 따라서, snippets 는 User 모델에서 역방향 관계에 있습니다. </p></blockquote><br><a id="more"></a><br><p>또한 우리는 몇가지 views 를 views.py 파일에 추가해 줄것입니다. 읽기 전용 형태로 사용자들에게 표시되게 하고 싶습니다. 따라서 <code>ListAPIView</code> 와 <code>RetrieveView</code> 제너릭 클래스기반 뷰를 사용할것입니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserList</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serializer_class = UserSerializer </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDetail</span><span class="params">(generics.RetireveAPIView)</span>:</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serialzier_class = UserSerializer</span><br></pre></td></tr></table></figure><br><blockquote><p><code>views.py</code> 파일에서 <code>UserSerializer</code> 클래스를 불러오는것을 잊지 말아야 합니다! </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> UserSerializer</span><br></pre></td></tr></table></figure><br><p>마지막으로, 우리는 이 뷰들을 API 안에 추가해줄 필요가 있습니다. <code>URLConf</code> 에서 참조하도록 합시다.</p><br><p><code>snippets/urls.py</code> 파일에 아래 패턴들을 추가해줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'users/'</span>, views.UserList.as_view()), </span><br><span class="line">path(<span class="string">'users/&lt;int:pk&gt;/'</span>, views.UserDetail.as_view()),</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/01/DRF-Tutorial-20%ED%8E%B8-%EC%9C%A0%EC%A0%80%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 19편 - 모델에 정보 추가하기</title>
      <link>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-19%ED%8E%B8-%EB%AA%A8%EB%8D%B8%EC%97%90-%EC%A0%95%EB%B3%B4-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-19%ED%8E%B8-%EB%AA%A8%EB%8D%B8%EC%97%90-%EC%A0%95%EB%B3%B4-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Mon, 30 Nov 2020 08:44:54 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Adding-information-to-our-model&quot;&gt;&lt;a href=&quot;#Adding-information-to-our-model&quot; class=&quot;headerlink&quot; title=&quot;Adding information to our mode
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Adding-information-to-our-model"><a href="#Adding-information-to-our-model" class="headerlink" title="Adding information to our model"></a>Adding information to our model</h2><br><p>우리는, 우리의 Snippet 모델 클래스에, 몇가지 수정사항을 만들겁니다. </p><br><p>우선, 몇가지 필드들을 추가 합시다. 추가할 필드중 하나는, 누가 코드 스니펫을 생성했는가를 표시하기 위해서 사용될것입니다. 또다른 필드는, 하이라이트 된 코드의 HTML 을 저장하는데에 쓰입니다. </p><br><ol><li>스니펫 생성자 owner 필드 </li><li>하이라이트 된 코드의 HTML 텍스트 </li></ol><br><p>아래 두가지 필드들을 <code>snippets/models.py</code> 에 있는 Snippet 모델에 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">owner = models.ForeignKey(<span class="string">'auth.User'</span>, related_name=<span class="string">'snippets'</span>,  on_delete=models.CASCADE)</span><br><span class="line">highlighted = models.TextField()</span><br></pre></td></tr></table></figure><br><p>모델이 저장될때, 또한가지 확실시 해야 하는것은, 코드를 하이라이트 해주는 라이브러리인 <code>pygments</code> 를 사용하여 highlighted 필드를 채워주는것입니다. </p><br><p>몇가지 불러오기를 해줄 필요가 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_lexer_by_name </span><br><span class="line"><span class="keyword">from</span> pygments.formatters.html <span class="keyword">import</span> HtmlFormatter </span><br><span class="line"><span class="keyword">from</span> pygments <span class="keyword">import</span> highlight</span><br></pre></td></tr></table></figure><br><p>그리고 이제, 우리는 <code>.save()</code> 메서드를 우리의 모델 클래스에 추가해줄수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Use the 'pygments' library to create a highlighted HTML representation of the   code snippet.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    lexer = get_lexer_by_name(self.language)</span><br><span class="line">    linenos = <span class="string">'table'</span> <span class="keyword">if</span> self.linenos <span class="keyword">else</span> <span class="literal">False</span> </span><br><span class="line">    options = &#123;<span class="string">'title'</span>: self.title&#125; <span class="keyword">if</span> self.title <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">    formatter = HtmlFormatter(style=self.style, linenos=linenos, full=<span class="literal">True</span>,  **options)</span><br><span class="line">    self.highlighted = highlight(self.code, lexer, formatter)</span><br><span class="line">    super(Snippet, self).save(*args, **kwargs)</span><br></pre></td></tr></table></figure><br><p>이것이 모두 완료가 되면, 우리는 우리의 데이터베이스 테이블들을 업데이트 해줄 필요가 있을것입니다. </p><br><p>이를 해주기 위해서, 일번적으로 우리는 database migration 을 생성해 줍니다. 하지만, 이번 튜토리얼의 목적을 위해, database 를 삭제하고 다시 시작합시다. </p><br><p>터미널에서 아래 명령어를 실행 합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -f db.sqlite3 </span><br><span class="line">rm -f snipepts/migrations </span><br><span class="line">python manage.py makemigraitons snippets </span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><br><p>또한 여러분들은 API 테스팅 사용을 위한, 여러명의 다른 사용자들을 생성하고 싶을지 모릅니다. </p><br><p>이를 위해 가장 빠른 방법은 <code>createsuperuser</code> 커맨드를 사용하는것입니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-19%ED%8E%B8-%EB%AA%A8%EB%8D%B8%EC%97%90-%EC%A0%95%EB%B3%B4-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 18편 - 인증과 권한</title>
      <link>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-18%ED%8E%B8-%EC%9D%B8%EC%A6%9D%EA%B3%BC-%EA%B6%8C%ED%95%9C/</link>
      <guid>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-18%ED%8E%B8-%EC%9D%B8%EC%A6%9D%EA%B3%BC-%EA%B6%8C%ED%95%9C/</guid>
      <pubDate>Mon, 30 Nov 2020 08:41:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Authentication-amp-Permissions&quot;&gt;&lt;a href=&quot;#Authentication-amp-Permissions&quot; class=&quot;headerlink&quot; title=&quot;Authentication &amp;amp; Permissions
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Authentication-amp-Permissions"><a href="#Authentication-amp-Permissions" class="headerlink" title="Authentication &amp; Permissions"></a>Authentication &amp; Permissions</h2><br><p>현재 우리의 API 는 누가 code snippets  을 수정을 하든 삭제를 하든지 어떠한 제약도 가지고 있지 않습니다. 우리는 아래의 사항들에 대해 확실시 하기 위해, 조금더 고도의 동작을 만들어 놓고싶습니다. </p><br><ul><li>코드 스니펫들은 언제나 생성자와 연관되어야함 </li><li>오직 인증된 사용자들만 스니펫을 생성할수 있음 </li><li>오직 스니펫을 생성한 생성자만, 스니펫을 업데이트 혹은 삭제할수 있음 </li><li>인증 되지 않은 사용자들은 읽기전용 엑세스만 가져야만 함 </li></ul><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-18%ED%8E%B8-%EC%9D%B8%EC%A6%9D%EA%B3%BC-%EA%B6%8C%ED%95%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 17편 - generic 클래스뷰 사용하기</title>
      <link>http://djangojeng-e.github.io/2020/11/29/DRF-Tutorial-17%ED%8E%B8-generic-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B7%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/11/29/DRF-Tutorial-17%ED%8E%B8-generic-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B7%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 29 Nov 2020 03:13:17 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Generic-클래스뷰-사용하기&quot;&gt;&lt;a href=&quot;#Generic-클래스뷰-사용하기&quot; class=&quot;headerlink&quot; title=&quot;Generic 클래스뷰 사용하기&quot;&gt;&lt;/a&gt;Generic 클래스뷰 사용하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;mixi
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Generic-클래스뷰-사용하기"><a href="#Generic-클래스뷰-사용하기" class="headerlink" title="Generic 클래스뷰 사용하기"></a>Generic 클래스뷰 사용하기</h2><br><p>mixin 클래스들을 사용하여서 우리의 뷰들은 그전보다 조금은 적은 양의 코드를 사용하도록 작성했었습니다. 하지만, 한단계 더 줄일수 있습니다. </p><br><p><code>REST FRAMEWORK</code> 은 이미 mixin 되어 있는 <code>generic</code> 뷰들을 제공하여, 우리가 우리의 <code>views.py</code> 를 조금 더 줄이는데 사용할수 있게 해줍니다. </p><br><p><code>snippets/views.py</code> 파일을 아래와 같이 수정해 줄수 있습니다. 조금 더 적은 양의 코드가 사용됩니다! </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet </span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer </span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetDetail</span><span class="params">(generics.RetrieveUpdateDestroyAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    seriazlizer_class = SnippetSerializer</span><br></pre></td></tr></table></figure><br><p>와~ 엄청나게 간결해 집니다. 다음 튜토리얼에서는, API 에 대한 인증과 권한에 대해서 둘러볼것입니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/29/DRF-Tutorial-17%ED%8E%B8-generic-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B7%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
