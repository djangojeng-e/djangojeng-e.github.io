<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Fri, 24 Apr 2020 11:43:12 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Writing your first Django app, part2 - 6편</title>
      <link>http://djangojeng-e.github.io/2020/04/24/Writing-your-first-Django-app-part2-6%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/24/Writing-your-first-Django-app-part2-6%ED%8E%B8/</guid>
      <pubDate>Fri, 24 Apr 2020 11:30:29 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;API-가지고-놀기-3편&quot;&gt;&lt;a href=&quot;#API-가지고-놀기-3편&quot; class=&quot;headerlink&quot; title=&quot;API 가지고 놀기 - 3편&quot;&gt;&lt;/a&gt;API 가지고 놀기 - 3편&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 시간에 이어서, API 실험을 이어서 합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;[1] 부터 [6] 까지는, 지난 포스팅에서 진행한 내용 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [1]: Question.objects.all()                                                                                                                                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[1]: &amp;lt;QuerySet [&amp;lt;Question: What&#39;s up?&amp;gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [2]: Question.objects.filter(id=1)                                                                                                                                     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[2]: &amp;lt;QuerySet [&amp;lt;Question: What&#39;s up?&amp;gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [3]: Question.objects.filter(question_text__startswith=&#39;What&#39;)                                                                                                         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[3]: &amp;lt;QuerySet [&amp;lt;Question: What&#39;s up?&amp;gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [4]: from django.utils import timezone                                                                                                                                 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [5]: current_year = timezone.now().year                                                                                                                                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [6]: Question.objects.get(pub_date__year=current_year)                                                                                                                 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[6]: &amp;lt;Question: What&#39;s up?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="API-가지고-놀기-3편"><a href="#API-가지고-놀기-3편" class="headerlink" title="API 가지고 놀기 - 3편"></a>API 가지고 놀기 - 3편</h2><br><p>지난 시간에 이어서, API 실험을 이어서 합니다. </p><p><br>[1] 부터 [6] 까지는, 지난 포스팅에서 진행한 내용 입니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [1]: Question.objects.all()                                                                                                                                            </span><br><span class="line">Out[1]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [2]: Question.objects.filter(id=1)                                                                                                                                     </span><br><span class="line">Out[2]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [3]: Question.objects.filter(question_text__startswith='What')                                                                                                         </span><br><span class="line">Out[3]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [4]: from django.utils import timezone                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [5]: current_year = timezone.now().year                                                                                                                                </span><br><span class="line"></span><br><span class="line">In [6]: Question.objects.get(pub_date__year=current_year)                                                                                                                 </span><br><span class="line">Out[6]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure><br><br><a id="more"></a><h2 id="없는-데이터-요청하기"><a href="#없는-데이터-요청하기" class="headerlink" title="없는 데이터 요청하기"></a>없는 데이터 요청하기</h2><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> id가 2번인 값을 조회했습니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Question은 한개밖에 없으니까, 2번은 존재하지 않습니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 따라서 아래와 같은 에러가 표시됩니다. </span></span><br><span class="line"></span><br><span class="line">In [7]: Question.objects.get(id=2)                                                                                                                                        </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">DoesNotExist                              Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-7-75091ca84516&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 Question.objects.get(id=2)</span></span><br></pre></td></tr></table></figure><br><br><h2 id="pk로-데이터-찾기"><a href="#pk로-데이터-찾기" class="headerlink" title="pk로 데이터 찾기"></a>pk로 데이터 찾기</h2><br><br><p>primary key 로 데이터를 조회하는것은 일반적인 일입니다. 따라서, Django  는 primary-key 단축키를 제공합니다. 아래 코드는 <code>Question.objects.get(id=1)</code> 과 동일합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [8]: Question.objects.get(pk=1)                                                                                                                                        </span><br><span class="line">Out[8]: &lt;Question: What's up?&gt;</span><br><span class="line"></span><br><span class="line">In [9]: Question.objects.get(id=1)                                                                                                                                        </span><br><span class="line">Out[9]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure><br><br><h2 id="Custom-메서드-동작-확인"><a href="#Custom-메서드-동작-확인" class="headerlink" title="Custom 메서드 동작 확인"></a>Custom 메서드 동작 확인</h2><br><br><p>Question 에 was_plubished_recently() 라는 메서드를 추가해 줬었습니다. </p><p>이게 잘 작동하는지 확인 해 봅니다. True 를 반환 한다면, 잘 작동하는것으로 볼수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [12]: q = Question.objects.get(pk=1)                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [13]: q.was_published_recently()                                                                                                                                       </span><br><span class="line">Out[13]: True</span><br></pre></td></tr></table></figure><br><br><h2 id="Choice-로-조회하기"><a href="#Choice-로-조회하기" class="headerlink" title="Choice 로 조회하기"></a>Choice 로 조회하기</h2><br><br><p>DATABASE API를 통해서, 하나의 Question 에 여러개의 Choice 를 등록할수 있습니다. </p><p>몇개의 Choice 를 하나의 Question 에 등록하는 과정을 진행 합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> q에 pk값이 1인 Question 을 할당합니다 </span></span><br><span class="line">In [1]: q = Question.objects.get(pk=1)                                                                                                                                    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q.choice_set.all() 을 하면, 해당 Question 에 달려있는 Choice 들이 검색됩니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 비어있는 쿼리셋이 출력됩니다. 아직, 해당 Question 에는 어떠한 Choice 도 등록한적 없기 때문입니다. </span></span><br><span class="line">In [2]: q.choice_set.all()                                                                                                                                                </span><br><span class="line">Out[2]: &lt;QuerySet []&gt;</span><br></pre></td></tr></table></figure><br><br><blockquote><p>Question 과 Choice 는 ForeignKey 로 연결되어 있습니다. </p><p>One-To-Many 관계로 이어져 있습니다. </p><p>하나의 Question - 다수의 Choice 관계 입니다. </p><p>하나의 Question 을 q 에 할당했고, </p><p>q 에 달려있는 Choice 는, q.choice_set.all() 로 검색이 가능합니다. </p></blockquote><br><h2 id="Choice-등록하기"><a href="#Choice-등록하기" class="headerlink" title="Choice 등록하기"></a>Choice 등록하기</h2><br><br><p>What’s up Question 에 3개의 Choice 를 등록해 봅니다 </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [3]: q                                                                                                                                                                 </span><br><span class="line">Out[3]: &lt;Question: What's up?&gt;</span><br><span class="line"></span><br><span class="line">In [4]: q.choice_set.create(choice_text='Not Much', votes=0)                                                                                                              </span><br><span class="line">Out[4]: &lt;Choice: Not Much&gt;</span><br><span class="line"></span><br><span class="line">In [5]: q.choice_set.create(choice_text='The Sky', votes=0)                                                                                                               </span><br><span class="line">Out[5]: &lt;Choice: The Sky&gt;</span><br><span class="line"></span><br><span class="line">In [6]: c = q.choice_set.create(choice_text='Just Hacking again', votes=0)</span><br></pre></td></tr></table></figure><br><br><h2 id="Choice-객체에서-Question-객체-조회"><a href="#Choice-객체에서-Question-객체-조회" class="headerlink" title="Choice 객체에서 Question 객체 조회"></a>Choice 객체에서 Question 객체 조회</h2><p><br><br></p><blockquote><p>q가 가진 모든 Choice 조회 </p><p>q.choice_set.all() </p><p>q가 가진 모든 choice 의 갯수 조회 </p><p>q.choice_set.count() </p></blockquote><p><br><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Choice 객체 에서 관계된 Question 객체를 조회할수 있는 API 가 있습니다 </span></span><br><span class="line">In [7]: c.question                                                                                                                                                        </span><br><span class="line">Out[7]: &lt;Question: What's up?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 반대로, Question 객체에서 Choice 객체를 조회할수 있습니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> What<span class="string">'s up Question 인 q 에 달려있는 모든 Choice 를 볼수 있습니다 </span></span></span><br><span class="line">In [8]: q.choice_set.all()                                                                                                                                                </span><br><span class="line">Out[8]: &lt;QuerySet [&lt;Choice: Not Much&gt;, &lt;Choice: The Sky&gt;, &lt;Choice: Just Hacking again&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 에 달려있는 Choice 의 갯수를 볼수 있습니다 </span></span><br><span class="line">In [9]: q.choice_set.count()                                                                                                                                              </span><br><span class="line">Out[9]: 3</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="의-사용"><a href="#의-사용" class="headerlink" title="__의 사용"></a><code>__</code>의 사용</h2><br><p>API는 자동으로 필요한만큼의 관계들을 따라갑니다. 두개의 언더스코어를 사용해서 관계를 분리 시킬수 있습니다. <br>몇개의 관계로 나누어도 상관 없습니다<br><br></p><p>Choice 중 question 의 <code>pub__date</code>가 이번년 인것을 찾으려면, 아래와 같이 써줍니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [10]: from django.utils import timezone                                                                                                                                </span><br><span class="line"></span><br><span class="line">In [11]: current_year = timezone.now().year                                                                                                                               </span><br><span class="line"></span><br><span class="line">In [12]: Choice.objects.filter(question__pub_date__year=current_year)                                                                                                     </span><br><span class="line">Out[12]: &lt;QuerySet [&lt;Choice: Not Much&gt;, &lt;Choice: The Sky&gt;, &lt;Choice: Just Hacking again&gt;]&gt;</span><br></pre></td></tr></table></figure><br><br><h2 id="Choice-하나-삭제하기"><a href="#Choice-하나-삭제하기" class="headerlink" title="Choice 하나 삭제하기"></a>Choice 하나 삭제하기</h2><br><p>delete() 함수를 사용해서, 하나의 choice 를 삭제합니다 </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> q 에 달린 choice 중에 <span class="string">'Just hacking'</span> 으로 시작하는것을 조회 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> c 에 할당 </span></span><br><span class="line">In [13]: c = q.choice_set.filter(choice_text__startswith='Just hacking')                                                                                                  </span><br><span class="line"></span><br><span class="line">In [14]: c                                                                                                                                                                </span><br><span class="line">Out[14]: &lt;QuerySet [&lt;Choice: Just Hacking again&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> delete() 메써드를 사용해서, c 를 삭제 </span></span><br><span class="line">In [15]: c.delete()                                                                                                                                                       </span><br><span class="line">Out[15]: (1, &#123;'polls.Choice': 1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 삭제후, q에 달려 있는 choice 조회 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3개였던것이 2개만 출력됩니다</span></span><br><span class="line">In [16]: q.choice_set.all()                                                                                                                                               </span><br><span class="line">Out[16]: &lt;QuerySet [&lt;Choice: Not Much&gt;, &lt;Choice: The Sky&gt;]&gt;</span><br></pre></td></tr></table></figure><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>이 Queryset 하고 API 부분이, 매우 중요한 부분입니다. </p><p>더 많은 정보는, 장고 공식문서에 <strong>Accessing related objects</strong> 를 참조하시면 됩니다. </p><p>또한, <code>__</code> 사용에 대해서는, <strong>Field lookups</strong> 와 <strong>Database API reference</strong> 를 참조하시면 됩니다.  </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/24/Writing-your-first-Django-app-part2-6%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 5편</title>
      <link>http://djangojeng-e.github.io/2020/04/17/Writing-your-first-Django-app-part2-5%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/17/Writing-your-first-Django-app-part2-5%ED%8E%B8/</guid>
      <pubDate>Fri, 17 Apr 2020 11:33:45 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;API-가지고-놀기-2편&quot;&gt;&lt;a href=&quot;#API-가지고-놀기-2편&quot; class=&quot;headerlink&quot; title=&quot;API 가지고 놀기 - 2편&quot;&gt;&lt;/a&gt;API 가지고 놀기 - 2편&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅에서, 쿼리셋을 조회 했더니, 아래와 같이 알수 없는 쿼리셋이 반환되서 나왔습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [14]: Question.objects.all() Out[14]: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;QuerySet [&amp;lt;Question: Question object (1)&amp;gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;Question object (1) 이라고만 표시되어 쿼리셋이 조회가 됩니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이렇게 조회가 되면, 이게 무슨 질문인지, 언제 생성된 질문인지 알수가 없어지게 되서. 전혀 유용하지 않은 정보가 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이번 포스팅에서 이것을 어떻게 유용한 형태로 표시할것인지에 대한 과정을 진행 합니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="API-가지고-놀기-2편"><a href="#API-가지고-놀기-2편" class="headerlink" title="API 가지고 놀기 - 2편"></a>API 가지고 놀기 - 2편</h2><br><p>지난 포스팅에서, 쿼리셋을 조회 했더니, 아래와 같이 알수 없는 쿼리셋이 반환되서 나왔습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [14]: Question.objects.all() Out[14]: </span><br><span class="line"></span><br><span class="line">&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span><br></pre></td></tr></table></figure><br><p>Question object (1) 이라고만 표시되어 쿼리셋이 조회가 됩니다. </p><p><br>이렇게 조회가 되면, 이게 무슨 질문인지, 언제 생성된 질문인지 알수가 없어지게 되서. 전혀 유용하지 않은 정보가 됩니다. </p><br><p>이번 포스팅에서 이것을 어떻게 유용한 형태로 표시할것인지에 대한 과정을 진행 합니다. </p><br><a id="more"></a> <br><br><h2 id="모델-수정하기-str-추가"><a href="#모델-수정하기-str-추가" class="headerlink" title="모델 수정하기 __str__ 추가"></a>모델 수정하기 <code>__str__</code> 추가</h2><br><br><p>우선, 문제를 해결하기 위해서 polls/models.py 를 수정해 줍니다. <br></p><p><code>__str__()</code> 메써드를 Question 과 Choice 클래스에 추가를 해줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure><br><br><p><code>__str__</code> 메써드를 추가해주는것은 중요합니다. 인터렉티브 명령어에 대응할때에만 중요한것 뿐만 아니라,<br> Django 에서 자동으로 생성되는 관리자 페이지에서 표시되는 객체 내역들을 위해서도 중요합니다. </p><br><blockquote><p><code>__str__</code> 을 추가 해주고 나서, 객체를 조회해 봅니다 </p><p>python manage.py shell_plus 로 접속해서. 아래와 같이 조회해줍니다 </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [1]: Question.objects.all()                                                                                                                                            </span><br><span class="line">Out[1]: &lt;QuerySet [&lt;Question: 나 지금 뭐하고 있지?&gt;]&gt;</span><br></pre></td></tr></table></figure><br><p>이전 포스팅에서 생성한 질문의 값을 제대로 반영한 데이터가 표시됩니다. </p><br><br><h2 id="Custom-메써드-추가하기"><a href="#Custom-메써드-추가하기" class="headerlink" title="Custom 메써드 추가하기"></a>Custom 메써드 추가하기</h2><br><p>커스텀 메서드도 (사용자 정의) Question 클래스에 추가해 봅니다 </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><br><p>import datetime 과 from django.utils import timezone을 가져오는것을 잊지 않습니다. </p><p>모델을 저장을 하고 shell_plus 로 접속해 봅니다. </p><br><p>python manage.py shell_plus </p><br><p>일단, 지난 포스팅에 튜토리얼과 상관없는 질문을 등록했었습니다. 튜토리얼에서는 “What’s up?” 이라고 썼었는데. 제가 ‘나 지금 뭐하고 있지?’ 라고 임의로 바꿨었습니다. <br></p><br><p>연습도 할겸, 다시 튜토리얼과 같은 질문으로 바꿔보겠습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Question 중에서 id 값이 1번인것을 q에 저장 </span></span><br><span class="line">In [1]: q = Question.objects.get(id=1)                                                                                                                                    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 를 출력하면, 나 지금 뭐하고 있지? 가 출력됩니다  </span></span><br><span class="line">In [2]: q                                                                                                                                                                 </span><br><span class="line">Out[2]: &lt;Question: 나 지금 뭐하고 있지?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 에 존재하는 question_text 를 <span class="string">"What's up?"</span> 으로 바꾸어 줍니다. </span></span><br><span class="line">In [3]: q.question_text = "What's up?"                                                                                                                                    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> save() 함수를 호출해서 데이터베이스에 저장합니다.</span></span><br><span class="line">In [4]: q.save()                                                                                                                                                          </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q를 출력하면, 바뀐 question_text 를 가진 <span class="string">"What's up?"</span> 이 출력됩니다. </span></span><br><span class="line">In [5]: q                                                                                                                                                                 </span><br><span class="line">Out[5]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure><br><br><h2 id="DATABASE-API-실험하기"><a href="#DATABASE-API-실험하기" class="headerlink" title="DATABASE API 실험하기"></a>DATABASE API 실험하기</h2><p><br><br></p><p>모델을 저장하고, 질문값을 다 바꾸었으면, 이제부터 DATABASE API 실험에 들어갑니다 .</p><br><h3 id="str-동작-확인"><a href="#str-동작-확인" class="headerlink" title="__str__ 동작 확인"></a><code>__str__</code> 동작 확인</h3><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> __str__() 메써드가 잘 작동하는지 확인 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 이제 Question 이 알아볼수 있는 질문 <span class="string">'What'</span>s up?<span class="string">' 으로 표시됩니다.</span></span></span><br><span class="line"></span><br><span class="line">In [1]: Question.objects.all()                                                                                                                                            </span><br><span class="line">Out[1]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br></pre></td></tr></table></figure><br><h3 id="키워드-인자로-조회"><a href="#키워드-인자로-조회" class="headerlink" title="키워드 인자로 조회"></a>키워드 인자로 조회</h3><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Django 는 다양한 키워드 인수로 동작하는 lookup API 를 제공합니다</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (id=1) 은 id 가 1번인것을 조회해서 보여줍니다 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"What's up?"</span> 이 첫번째 질문이니, <span class="string">"What's up?"</span> 이 나옵니다 </span></span><br><span class="line"></span><br><span class="line">In [2]: Question.objects.filter(id=1)                                                                                                                                     </span><br><span class="line">Out[2]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> __startswith 는 무엇으로 시작하는지에 대한 필터 입니다 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> question_text__startswith=<span class="string">'What'</span> 은 question_text 중에 <span class="string">'What'</span> 으로 시작하는것을 조회해서 보여줍니다 </span></span><br><span class="line"></span><br><span class="line">In [3]: Question.objects.filter(question_text__startswith='What')                                                                                                         </span><br><span class="line">Out[3]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 이번년도에 등록된 질문에 대해서 조회합니다 ([4] - [6])</span></span><br><span class="line"></span><br><span class="line">In [4]: from django.utils import timezone                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [5]: current_year = timezone.now().year     # current_year 에 timezone.now().year 를 사용, 이번년을 저장                                                                                                                           </span><br><span class="line"></span><br><span class="line">In [6]: Question.objects.get(pub_date__year=current_year)  # Question중 pub_date 이 이번년도와 같은것을 조회                                                                                                                 </span><br><span class="line">Out[6]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><p>포스팅은 나누는것도 길어지는것도 별로 안좋아하지만.. </p><p><br>너무 길어질것 같아서, 다시 나누어 포스팅 하려 합니다<br> 다음 포스팅에 이어 합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/17/Writing-your-first-Django-app-part2-5%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 4편</title>
      <link>http://djangojeng-e.github.io/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/</guid>
      <pubDate>Wed, 15 Apr 2020 15:42:04 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;API-가지고-놀기&quot;&gt;&lt;a href=&quot;#API-가지고-놀기&quot; class=&quot;headerlink&quot; title=&quot;API 가지고 놀기&quot;&gt;&lt;/a&gt;API 가지고 놀기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬에 있는 인터렉티브한 쉘에 진입해서 DJango 가 제공하는 기본 데이터베이스 API 를 가지고 놀아봅니다. &lt;/p&gt;
&lt;p&gt;Python shell 에 진입하기 위해서는 아래 커맨드를 사용합니다.  &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python manage.py shell&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;p&gt;일반 shell 에 접속해서 할수도 있지만, 저는 shell_plus 를 사용해서 진행해 봤습니다. &lt;/p&gt;
&lt;p&gt;shell_plus 를 사용하기 위해서는 django-extensions 를 설치하고, settings.py 에 INSTALLED_APPS 에 등록 해줘야 합니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="API-가지고-놀기"><a href="#API-가지고-놀기" class="headerlink" title="API 가지고 놀기"></a>API 가지고 놀기</h2><br><p>파이썬에 있는 인터렉티브한 쉘에 진입해서 DJango 가 제공하는 기본 데이터베이스 API 를 가지고 놀아봅니다. </p><p>Python shell 에 진입하기 위해서는 아래 커맨드를 사용합니다.  </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><br><br><p>일반 shell 에 접속해서 할수도 있지만, 저는 shell_plus 를 사용해서 진행해 봤습니다. </p><p>shell_plus 를 사용하기 위해서는 django-extensions 를 설치하고, settings.py 에 INSTALLED_APPS 에 등록 해줘야 합니다. </p><br><a id="more"></a><br><h2 id="Shell-plus-사용하기"><a href="#Shell-plus-사용하기" class="headerlink" title="Shell_plus 사용하기"></a>Shell_plus 사용하기</h2><br><br><p>django-extensions를 설치하고, settings.py 에 INSTALLED_APPS에 등록해주고, notebook도 설치해줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django-extensions 설치 </span></span><br><span class="line">pip install django-extensions </span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite/settings.py INSTALLED_APPS 에 등록 </span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'django_extensions'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 그리고, notebook 도 설치해줍니다 </span></span><br><span class="line"><span class="comment"># jupyter notebook 으로 Django shell_plus를 실행 시킬수 있지만, Django 3.0 부터 지원이 안되는것 같습니다. </span></span><br><span class="line"></span><br><span class="line">pip install notebook</span><br><span class="line"></span><br><span class="line"><span class="comment"># 설치와 세팅을 마쳤으면, 아래 명령어로 Shell_plus 로 진입합니다 </span></span><br><span class="line">python manage.py shell_plus</span><br></pre></td></tr></table></figure><br><br><p>아래 그림처럼 ln [1]: 이 화면에 나오면 됩니다. </p><br><img src="/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/image1.png" class=""><br><p>shell_plus 에 진입했으면, database API 를 알아봅시다. </p><br><br><h2 id="DATABASE-API"><a href="#DATABASE-API" class="headerlink" title="DATABASE API"></a>DATABASE API</h2><br><br><blockquote><p>여기서 얘기하는 DATABASE API 란 </p><p>Django 가 제공하는 기능으로, 데이터베이스 추출 API 입니다. </p><p>사용자는 데이터베이스 객체를 생성하고, 읽어오고, 업데이트 하고 삭제할수 있습니다. </p></blockquote><br><br><h2 id="모델-다시-보기"><a href="#모델-다시-보기" class="headerlink" title="모델 다시 보기"></a>모델 다시 보기</h2><br><br><p>첫번째로, 우리가 작성한 모델을 봐야 합니다. polls/models.py 에는 이미 작성된 모델들 Question, Choice 모델이 있습니다. 이걸 사용해서 데이터베이스 API 사용을 실습합니다. <br></p><p>작성한 모델을 다시 정리하자면, </p><br><br><table><thead><tr><th>모델명</th><th>필드 이름</th><th>데이터 타입</th></tr></thead><tbody><tr><td>Question</td><td>question_text</td><td>Charfield</td></tr><tr><td>Question</td><td>pub_date</td><td>DateTimeField</td></tr><tr><td>Choice</td><td>question</td><td>ForeignKey</td></tr><tr><td>Choice</td><td>choice_text</td><td>CharField</td></tr><tr><td>Choice</td><td>votes</td><td>IntegerField</td></tr></tbody></table><br><p>튜토리얼에서 진행하는 실습을 shell_plus 에 입력하면서 진행 해봅니다. </p><br><br><h2 id="objects-all-조회"><a href="#objects-all-조회" class="headerlink" title="objects.all() 조회"></a>objects.all() 조회</h2><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> polls.models <span class="keyword">import</span> Choice, Question     <span class="comment"># 작성한 모델을 불러오기 </span></span><br><span class="line"></span><br><span class="line">Quesiton.objects.all()                       <span class="comment"># Question의 모든 객체를 조회하는 명령어</span></span><br></pre></td></tr></table></figure><br><br><p>튜토리얼에서는, 다짜고짜 objects.all() 명령어를 실행 시켜서, 질문들이 없다는것만 보여주는데.. objects.all() 이 어떻게 생겨 나는것인지 짚고 넘어갑니다. </p><br><p>위에 테이블을 보면, 분명히 Question 은 모델명입니다. Question.objects.all() 을 사용해서 Question 의 모든 객체를 조회하는 것입니다. objects.all() 명령어는, 모델에 붙어 있는 모든 객체를 조회하고 쿼리셋을 반환합니다. </p><br><p>Choice 도 모델명인데, Choice.objects.all() 을 사용하면 어떨까요? 물론, Choice 에 있는 모든 객체를 조회하는 명령어가 됩니다. </p><br><blockquote><p>현재 우리는, 어떠한 Question도, 어떠한 Choice 도 데이터베이스에 집어 넣지 않았기 때문에 </p><p>objects.all() 명령어를 사용하면, 비어 있는 쿼리셋이 반환됩니다</p><p>아래 shell_plus 화면 참고  <br></p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [1]: from polls.models import Choice, Question                                                                                                       </span><br><span class="line"></span><br><span class="line">In [2]: Question.objects.all()                                                                                                                          </span><br><span class="line">Out[2]: &lt;QuerySet []&gt;</span><br><span class="line"></span><br><span class="line">In [3]: Choice.objects.all()                                                                                                                            </span><br><span class="line">Out[3]: &lt;QuerySet []&gt;</span><br></pre></td></tr></table></figure><br><h2 id="새로운-Question-생성하기"><a href="#새로운-Question-생성하기" class="headerlink" title="새로운 Question 생성하기"></a>새로운 Question 생성하기</h2><p><br><br></p><p>위에서 Question.objects.all() 로 모든 Question 들을 조회해보면, 비어 있는 쿼리셋이 나옵니다. Question 하나를 추가해 보겠습니다. Question 하나를 추가하기 위해서는,<br>모델에 나와 있는 두가지 필드들이 채워져야 합니다 (question_text 와 pub_date). 이중, pub_date 는 데이터 타입이 시간이기 때문에, 시간을 넣어줘야 합니다. <br></p><p>Django 는 time zone 을 지원하기 때문에, timezone.now() 를 사용하면 pub_date 에 들어갈 시간을 넣을수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [4]: from django.utils import timezone                                                                                                               </span><br><span class="line"></span><br><span class="line">In [5]: q = Question(question_text="What's new?", pub_date=timezone.now())                                                                              </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 객체를 데이터베이스에 저장합니다. save() 를 명시적으로 호출해서 저장합니다. </span></span><br><span class="line">In [6]: q.save()   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 가 데이터베이스에 저장 되었으니, 자동으로 id 값을 가집니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 첫번째 데이터이니, id 값은 자동으로 1 이 됩니다. </span></span><br><span class="line"></span><br><span class="line">In [7]: q.id                                                                                                                                            </span><br><span class="line">Out[7]: 1</span><br></pre></td></tr></table></figure><br><p>q 라는 변수에 <code>Question(question_text=&quot;what&#39;s new?&quot;, pub_date=timezone.now())</code> 객체 를 넣어주고. 그 객체 q를 저장 하였습니다. 이렇게 하면, 데이터베이스에 하나의 질문이 생성 됩니다. </p><br><br><h2 id="생성된-데이터-접근하기"><a href="#생성된-데이터-접근하기" class="headerlink" title="생성된 데이터 접근하기"></a>생성된 데이터 접근하기</h2><br><br><p>데이터가 하나 생성되었으니, 생성된 데이트를 접근할수도 있습니다. <br></p><p>위에서, q 라는 객체로 데이터베이스에 저장을 하였으니, 파이썬 속성을 사용하여, 필드 값에 접근 할수 있습니다. <br></p><br><p>위에서 q 는 Question(question_text=”What’s new?”, pub_date=timezone.now()) 였습니다. </p><br><p>q.question_text 에 접근하면, “What’s new?” 라는 텍스트를 반환합니다. <br></p><p>q.pub_date 에 접근하면, timezone.now() 의 값이 반환되겟죠? </p><br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [9]: q.question_text                                                                                                                                 </span><br><span class="line">Out[9]: "What's new?"</span><br><span class="line"></span><br><span class="line">In [10]: q.pub_date                                                                                                                                     </span><br><span class="line">Out[10]: datetime.datetime(2020, 4, 13, 6, 58, 8, 963804, tzinfo=&lt;UTC&gt;)</span><br></pre></td></tr></table></figure><br><br><h2 id="생성된-데이터-값-바꾸기"><a href="#생성된-데이터-값-바꾸기" class="headerlink" title="생성된 데이터 값 바꾸기"></a>생성된 데이터 값 바꾸기</h2><br><br><p>속성값을 바꾸고, save() 를 호출함으로써, 데이터베이스에 저장된 값을 바꿀수도 있습니다. <br><br></p><p>위에서, “What’s new?” 라고 저장되었던 첫번째 질문을, “나 지금 뭐하고 있지?” 라는 질문으로 바꿔봅니다. (튜토리얼에서는 “What’s up? 이라고 바꾸는데.. 너무 비슷한 질문이라 헷갈립니다)</p><br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> q.question_text 값을 바꾸어줌 </span></span><br><span class="line">In [11]: q.question_text = "나 지금 뭐하고 있지?"                                                                                                       </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 바뀐 q 값을 데이터베이스에 저장 </span></span><br><span class="line">In [12]: q.save()                                                                                                                                       </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 다시 q.question_text 에 접근 </span></span><br><span class="line">In [13]: q.question_text                                                                                                                                </span><br><span class="line">Out[13]: '나 지금 뭐하고 있지?'</span><br></pre></td></tr></table></figure><br><h2 id="objects-all-로-다시-조회"><a href="#objects-all-로-다시-조회" class="headerlink" title="objects.all()로 다시 조회"></a>objects.all()로 다시 조회</h2><p><br><br></p><p>objects.all() 을 사용하면 데이터베이스에 있는 모든 question 들을 출력해 줄겁니다. <br></p><p>이제까지 quesiton 한개를 데이터베이스에 저장해놓았으니, 1개가 출력됩니다. </p><p><br><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [14]: Question.objects.all()                                                                                                                         </span><br><span class="line">Out[14]: &lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span><br></pre></td></tr></table></figure><p><br><br></p><p>그런데, 이상하네요? 위에서 생성한 question 의 정보는 없고. <br> &lt;Quetion: Question object(1)&gt; 만 출력되어 나옵니다. 이러면, 이게 무슨 질문인지, <br>언제 생성된 질문인지 알수가 없어지게 됩니다. </p><p><br><br></p><p>데이터베이스가 이런식으로 조회가 된다면, 전혀 도움이 되지 않기때문에. <br>다음 포스팅에서 이것을 어떻게 유용한 형태로 출력할것인지 해결할겁니다. </p><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><p>처음에 튜토리얼 진행하면서, 이 부분이 저언혀 이해가 안갔었습니다. <br></p><p>너무 생소했었습니다. 중요한 부분이라 생각하고, 파트를 나누어서 포스팅하기로 했습니다. <br></p><br><p>다음 포스팅에서 이어서 진행합니다. 아래는, shell_plus 전체 캡쳐 화면 입니다. </p><br><img src="/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/image2.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 3편</title>
      <link>http://djangojeng-e.github.io/2020/04/15/Writing-your-first-Django-app-part2-3%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/15/Writing-your-first-Django-app-part2-3%ED%8E%B8/</guid>
      <pubDate>Wed, 15 Apr 2020 11:44:28 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;모델-활성화-하기&quot;&gt;&lt;a href=&quot;#모델-활성화-하기&quot; class=&quot;headerlink&quot; title=&quot;모델 활성화 하기&quot;&gt;&lt;/a&gt;모델 활성화 하기&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;모델에 적혀있는 작은 코드들은 Django 에게 많은 정보를 줍니다. 모델에 있는 코드로, Django 는 아래 작업을 수행할수 있습니다.&lt;/p&gt;
&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;이 앱을 위한 데이터베이스 스키마 생성 (CREATE TABLE 구문) &lt;/li&gt;
&lt;li&gt;Question 과 Choice 객체를 접근할수 있는 파이썬 데이터베이스 엑세스 API 생성 &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;&lt;strong&gt;하지만 우선, 프로젝트에 우리의 polls 앱이 설치 되었다는것을 알려 줘야 합니다&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="모델-활성화-하기"><a href="#모델-활성화-하기" class="headerlink" title="모델 활성화 하기"></a>모델 활성화 하기</h2><br><br><p>모델에 적혀있는 작은 코드들은 Django 에게 많은 정보를 줍니다. 모델에 있는 코드로, Django 는 아래 작업을 수행할수 있습니다.</p><br><ul><li>이 앱을 위한 데이터베이스 스키마 생성 (CREATE TABLE 구문) </li><li>Question 과 Choice 객체를 접근할수 있는 파이썬 데이터베이스 엑세스 API 생성 </li></ul><br><p><strong>하지만 우선, 프로젝트에 우리의 polls 앱이 설치 되었다는것을 알려 줘야 합니다</strong></p><br><a id="more"></a><br><blockquote><p>철학 </p><p>Django 앱들은 뺏다꼇다 플러그인 이 가능합니다. </p><p>앱들은 여러개의 프로젝트에서 사용될수 있고, 배포도 될수 있습니다 </p></blockquote><br><br><h2 id="INSTALLED-APPS-에-등록하기"><a href="#INSTALLED-APPS-에-등록하기" class="headerlink" title="INSTALLED_APPS 에 등록하기"></a>INSTALLED_APPS 에 등록하기</h2><br><br><p>앱을 프로젝트에 포함 시키기 위해서, <code>mysite/settings.py</code> 에 있는 <code>INSTALLED_APPS</code> 설정안에, 앱의 설정 클래스 참조값을 추가해 줍니다. 앱의 설정 클래스는 <code>PollsConfig</code> 라는 이름으로, <code>polls/apps.py</code> 파일 안에 존재합니다. 따라서 이 경로를 참조하기 위해서 <code>polls.apps.PollsConfig</code> 라고 쓰고 사용합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls 앱 안에, apps.py 에 있는 PollsConfig </span></span><br><span class="line"><span class="comment"># . 으로 이어서 참조값을 만듭니다. </span></span><br><span class="line"><span class="comment"># 이값을 mysite/settings.py 파일에 등록해 줍니다. </span></span><br><span class="line"></span><br><span class="line">polls.apps.PollsConfig</span><br></pre></td></tr></table></figure><br><blockquote><p>mysite/settings.py 파일을 열어서. 위의 <code>.</code>으로 연결된 경로, </p><p><code>polls.apps.PollsConfig</code>를 INSTALLED_APPS 설정에 추가해 줍니다. </p></blockquote><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite/settings.py </span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>,    <span class="comment"># 추가된 항목 </span></span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><blockquote><p>참고로, <code>polls.apps.PollsConfig</code> 라고 쓰기 귀찮으면, </p><p>그냥 앱의 이름인 <code>polls</code> 라고만 써주어도 됩니다. </p><p><code>&#39;&#39;</code> 안에 넣어주는것을 잊지 않습니다. </p></blockquote><br><h2 id="makemigrations-하기"><a href="#makemigrations-하기" class="headerlink" title="makemigrations 하기"></a>makemigrations 하기</h2><br><br><p>이제 Django 프로젝트에 polls 앱을 포함시켰습니다. </p><p><br>INSTALLED_APPS 에  polls 앱을 잘 등록하였으면, 아래 명령어를 실행 합니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations polls </span><br><span class="line"><span class="comment"># 아래와같은 메시지가 표시되어야 합니다 </span></span><br><span class="line">Migrations <span class="keyword">for</span> <span class="string">'polls'</span>:</span><br><span class="line">  polls/migrations/<span class="number">0001</span>_initial.py</span><br><span class="line">    - Create model Question</span><br><span class="line">    - Create model Choice</span><br></pre></td></tr></table></figure><br><p><code>polls/migrations/0001_inital.py</code> 파일이 잘 생성되었는지 확인 합니다. </p><br><br><blockquote><p>만약 makemigrations 가 제대로 실행되지 않는다면, </p><p>polls/models.py 에 오타가 있을수도 있고, mysite/settings.py 에 제대로 앱이 등록 되지 않았을수 있습니다. </p></blockquote><br><br><p><code>makemigrations</code> 명령어를 실행시키므로써, 모델에 변경사항이 있다는것을 Django 에게 얘기 해줍니다.</p><p>(여기서 변경사항은, 이전 포스팅에서 새로 작성한 모델입니다) 그리고 변경 사항들은 <code>migration</code> 형태로 저장됩니다. </p><br><p>migrations는 Django가 변경된 모델 사항들을 저장하는 방법입니다 (즉, 데이터베이스 스키마). migrations는 디스크에 파일 형태로 저장됩니다. 방금 생성한 첫번째 migration 을 읽고 싶으면, 읽을수 있습니다. 이 파일은 <code>polls/migrations/0001_inital.py</code> 파일 입니다. </p><br><p>하지만, Django 가 이 파일을 하나씩 만들때마다 우리는 이 파일들을 하나씩 다 읽을 필요가 없습니다. 이 파일들은 수동으로 Django가 무언가를 변경시키는것을 비틀기 위해서 사람이 수정할수 있는 형식으로 디자인 되었습니다. </p><br><blockquote><p>migrate 하기 </p><p>migrations 와 데이터베이스 스키마를 자동으로 실행시킬수 있는 커맨드가 존재합니다 </p><p>바로, migrate 입니다 </p></blockquote><br><br><h2 id="sqlmigrate-명령어"><a href="#sqlmigrate-명령어" class="headerlink" title="sqlmigrate 명령어"></a>sqlmigrate 명령어</h2><br><br><p>튜토리얼에서는, <code>sqlmigrate</code> 명령어를 소개합니다만, 데이터베이스 구문을 모르면, 이해하기 힘듭니다. 초심자들은,, 일단 이부분을 깊게 들어가지 않는것을 권장 합니다 </p><br><p>일단, 튜토리얼에서 얘기하는 sqlmigrate 명령어를 간단하게 짚고 넘어갑니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">python manage.py sqlmigrate polls <span class="number">0001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 실행하면, 아래와 비슷한 형식의 결과를 볼수 있을겁니다. </span></span><br><span class="line"></span><br><span class="line">BEGIN;</span><br><span class="line">--</span><br><span class="line">-- Create model Question</span><br><span class="line">--</span><br><span class="line">CREATE TABLE <span class="string">"polls_question"</span> (</span><br><span class="line">    <span class="string">"id"</span> serial NOT NULL PRIMARY KEY,</span><br><span class="line">    <span class="string">"question_text"</span> varchar(<span class="number">200</span>) NOT NULL,</span><br><span class="line">    <span class="string">"pub_date"</span> timestamp <span class="keyword">with</span> time zone NOT NULL</span><br><span class="line">);</span><br><span class="line">--</span><br><span class="line">-- Create model Choice</span><br><span class="line">--</span><br><span class="line">CREATE TABLE <span class="string">"polls_choice"</span> (</span><br><span class="line">    <span class="string">"id"</span> serial NOT NULL PRIMARY KEY,</span><br><span class="line">    <span class="string">"choice_text"</span> varchar(<span class="number">200</span>) NOT NULL,</span><br><span class="line">    <span class="string">"votes"</span> integer NOT NULL,</span><br><span class="line">    <span class="string">"question_id"</span> integer NOT NULL</span><br><span class="line">);</span><br><span class="line">ALTER TABLE <span class="string">"polls_choice"</span></span><br><span class="line">  ADD CONSTRAINT <span class="string">"polls_choice_question_id_c5b4b260_fk_polls_question_id"</span></span><br><span class="line">    FOREIGN KEY (<span class="string">"question_id"</span>)</span><br><span class="line">    REFERENCES <span class="string">"polls_question"</span> (<span class="string">"id"</span>)</span><br><span class="line">    DEFERRABLE INITIALLY DEFERRED;</span><br><span class="line">CREATE INDEX <span class="string">"polls_choice_question_id_c5b4b260"</span> ON <span class="string">"polls_choice"</span> (<span class="string">"question_id"</span>);</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><br><p>아래 사항들을 숙지해 둡니다 <br></p><br><ul><li>정확한 출력 값은 어떤 데이터베이스를 사용하느냐에 따라서 바뀝니다. 위의 예시는 <code>PostgreSQL</code>을 위해 생성되었습니다. </li><li>테이블명은 자동으로 생성되는데 앱의 이름 (polls) 과 소문자의 모델 이름 (즉, question 과 choice) 들을 합쳐서 지어 집니다 </li><li>외래키 필드 이름에는 Django의 규칙으로 <code>_id</code> 를 붙여줍니다 </li><li>외래키 관계는 명시적으로 <code>FOREIGN KEY</code> 제약으로 만들어집니다. <code>DEFFERABLE</code> 부분에 대해서는 걱정 안해도 됩니다. PostgreSQL 에게 트랜젝션이 끝날때까지 외래키를 실행 시키지 않는 역할을 합니다. </li><li>프로젝트가 사용하는 데이터베이스에 맞춤 설정이 되어 있습니다. 예를들면, ﻿(auto_increment(MySQL), serial(PostgreSQL), integer primary key autoincrement(SQLite) 들이 자동으로 처리됩니다</li><li>﻿sqlmigrate 캐먼드는 사실 데이터베이스를 위한 migration을 실행 시키지 않습니다. 대신, Django가 생각하는 데이터베이스 요구사항을 화면에 출력해서 사용자가 볼수 있게 해줍니다. Django 가 무엇을 할것인지 혹은 데이터베이스 관리자가 변경을 위해 SQL script 를 필요로 할때 유용하게 쓰입니다.</li></ul><p><br><br></p><h2 id="migrate-실행-하기"><a href="#migrate-실행-하기" class="headerlink" title="migrate 실행 하기"></a>migrate 실행 하기</h2><p><br><br></p><p>이제 진짜 migrate 를 실행 해 봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, polls, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying polls<span class="number">.0001</span>_initial... OK</span><br></pre></td></tr></table></figure><p><br><br></p><blockquote><p>migrate 커맨드는 적용되지 않은, 모든 migrations  들을 가지고 </p><p>데이터베이스에 적용합니다 </p><p>데이터베이스 스키마와 모든 변경사항들을 동기화 시켜 줍니다</p></blockquote><p><br><br></p><p>migrations 는 매우 강력한 기능입니다. migrations 는 개발 기간동안 데이터베이스 혹은 테이블을 삭제하지 않고도 모델을 수정 할수 있게 해줍니다. 데이터의 손실없이 실시간으로 데이터베이스를 업그레이드 하는데에 특화 되어 있습니다. </p><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><h3 id="숙지하고-있어야할-스텝들"><a href="#숙지하고-있어야할-스텝들" class="headerlink" title="숙지하고 있어야할 스텝들"></a>숙지하고 있어야할 스텝들</h3><br><ol><li>App 생성 </li><li>settings.py 에 INSTALLED_APPS 에 App 등록</li><li>해당 App 의 모델 생성 혹은 수정 </li><li>python manage.py makemigrations 실행 </li><li>python manage.py migrate 실행  </li></ol><br><p>커맨드가 이렇게 분리되어 있는 이유는, migrations 를 버전 관리 시스템에 커밋하고 앱과 함께 배달하기 위해서 입니다. 개발을 쉽게 해주는것 뿐만 아니라, 다른 개발자들이 사용할수 있고, 프로덕션 환경에서 사용할수 있게 해줍니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/15/Writing-your-first-Django-app-part2-3%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 2편</title>
      <link>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-2%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-2%ED%8E%B8/</guid>
      <pubDate>Mon, 13 Apr 2020 12:42:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;모델-작성하기&quot;&gt;&lt;a href=&quot;#모델-작성하기&quot; class=&quot;headerlink&quot; title=&quot;모델 작성하기&quot;&gt;&lt;/a&gt;모델 작성하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅에서 데이터베이스 설정을 마쳤습니다. 튜토리얼에서 진행하는 기본 데이터베이스인 SQLite 를 사용하고, 기본앱들에 대한 migrate 를 완료해서, 필요한 데이터베이스 테이블들을 생성해 주었습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이번 파트는, 모델을 작성해 봅니다. 데이터베이스 레이아웃과 추가적인 메타데이터를 정의 합니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="모델-작성하기"><a href="#모델-작성하기" class="headerlink" title="모델 작성하기"></a>모델 작성하기</h2><br><p>지난 포스팅에서 데이터베이스 설정을 마쳤습니다. 튜토리얼에서 진행하는 기본 데이터베이스인 SQLite 를 사용하고, 기본앱들에 대한 migrate 를 완료해서, 필요한 데이터베이스 테이블들을 생성해 주었습니다. </p><br><p>이번 파트는, 모델을 작성해 봅니다. 데이터베이스 레이아웃과 추가적인 메타데이터를 정의 합니다. </p><br><a id="more"></a><blockquote><p>모델은 하나의 데이터에 대한 확실한 사실적 정의를 내립니다. </p><p>모델은 필요한 저장할 데이터의 필드들과 동작들의 정보를 가지고 있습니다. </p><p>Django 는 DRY 원칙을 따릅니다 (Don’t Repeat Yourself) </p><br><p>목표하는것은 데이터 모델을 한곳에 정의하고, 그곳에서 자동으로 도출해 내는겁니다. </p><br><p>Ruby on Rails 와는 다르게, 여기서는 migrations 를 포함합니다. </p><p>예를들면, migrations 는 전적으로 모델파일에서 추출되고, </p><br><p>Django 는 본질적으로 데이터베이스 스키마를 현재 모델에 업데이트 할수 있게 내역을 기록합니다. </p></blockquote><p><br><br></p><h2 id="모델-클래스-작성하기"><a href="#모델-클래스-작성하기" class="headerlink" title="모델 클래스 작성하기"></a>모델 클래스 작성하기</h2><p><br><br></p><p>투표앱 튜토리얼에서는, 2개의 모델을 작성합니다. </p><p><br><br></p><ul><li>Question - 질문과 발행날짜 정보를 가지고 있는 투표 질문 </li><li>Choice - 질문에 대한 선택문들과 투표집계 정보를 가지고 있습니다 </li></ul><p><br>각각의 Choice 들은 하나의 Question과 연관되어 있습니다. </p><br><blockquote><p>해당 컨셉은 파이썬 클래스들로 표현됩니다. </p><p>polls/models.py 파일을 열고, 아래와 같이 작성해 줍니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  question = models.ForeignKey(Question, on_delete=models.CASCADE) </span><br><span class="line">  choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">  votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br><p>여기서, 각가의 모델들은 <code>django.db.models.Model</code>을 상속받는 서브클래스들로 표현됩니다. </p><p><br>각 모델은 몇개의 클래스 변수들을 가지고 있는데,</p><br><blockquote><p>각 클래스 변수들은 모델안의 데이터베이스 필드들을 표현합니다 </p></blockquote><br><br><h2 id="필드-정보"><a href="#필드-정보" class="headerlink" title="필드 정보"></a>필드 정보</h2><br><br><p>각 필드들은 필드클래스의 인스턴스들로 표현됩니다. </p><br><p>예) 케릭터필드를 위한 CharField, 날짜시간필드를 위한 DateTimeField </p><br><p>이 필드 정보들은 각 필드들이 가지는 데이터 타입이 어떤것인지 Django 에게 말해줍니다. </p><p><br>각 필드 인스턴스들의 이름들 (예, question_text 혹은 pub_date)은 필드들의 기계친화적 이름들입니다. </p><p><br>이 필드 이름들을 파이썬 코드에서 사용할수 있고, 데이터베이스에서 컬럼명으로 사용됩니다.  사람이 읽기 편한 형태의 이름으로 필드를 만들기 위해서 선택적으로 첫번째 위치인자를 필드명으로 사용할수 있습니다. </p><br><p>보통 Django의 내부 설명 용도로 쓰이는, 문서를 2배로 늘려버립니다. 만약, 필드가 제공되지 않으면, Django는 기계친화적인 이름을 우선 사용합니다. </p><br><p>튜토리얼에서는, Question.pub_date 만 인간이 읽기 좋은 형태의 이름을 정의합니다. 그외에 다른 필드들은, 기계친화적 이름이라도 사람이 읽기 충분합니다. </p><br><br><h2 id="Field-클래스들의-필수-인수"><a href="#Field-클래스들의-필수-인수" class="headerlink" title="Field 클래스들의 필수 인수"></a>Field 클래스들의 필수 인수</h2><br><br><p>어떤 필드 클래스들은 필수적으로 인수를 가져야 합니다. </p><p><br>예를들어, CharField 는 최대 길이값인 max_length 인수를 가져야 하고, 데이터베이스 스키마에 사용될 뿐만 아니라 검증에도 사용됩니다.</p><br><br><p>필드는 여러가지 선택적 인수들을 가질수도 있습니다. 튜토리얼에서는 votes 의 기본값을 0으로 세팅해주었습니다. </p><br><br><h2 id="데이터베이스-관계의-정의"><a href="#데이터베이스-관계의-정의" class="headerlink" title="데이터베이스 관계의 정의"></a>데이터베이스 관계의 정의</h2><br><br><p>마지막으로, 튜토리얼의 데이터베이스 모델에서는 관계가 정의 되어 있습니다. </p><p><br>ForeignKey를 사용해서 Question 과 Choice 의 관계가 정의되어 있습니다. Django 는 모든 공통적인 데이터베이스 관계들을 지원합니다. 예) <code>many-to-one</code>, <code>many-to-many</code>, <code>one-to-one</code></p><br><blockquote><p>튜토리얼에 나온 Question 과 Choice 는, </p><p>일 대 다수의 관계인 </p><p>one-to-many (many-to-one) 의 관계를 가지고 있습니다. </p></blockquote><br><br><p>하나의 질문에, 여러가지 선택지가 있다는 얘기 입니다. </p><br><p>2020년 4월 현재에 진행되고 있는, 제 21대 국회의원 선거를 예로 들면.<br></p><p>‘우리 지역에서 누가 국회의원이 되어야 하나?’ 라는 질문에, 여러 후보들이 존재합니다.<br><br></p><p>하나의 질문에 여러가지 선택이 있는겁니다.  <br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>아주 간단한 모델을 작성해 보았습니다.</p><p><br>다음 포스팅에는 모델의 활성화를 진행해 볼겁니다.<br></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-2%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 1편</title>
      <link>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-1%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-1%ED%8E%B8/</guid>
      <pubDate>Mon, 13 Apr 2020 08:01:44 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;데이터베이스-셋업&quot;&gt;&lt;a href=&quot;#데이터베이스-셋업&quot; class=&quot;headerlink&quot; title=&quot;데이터베이스 셋업&quot;&gt;&lt;/a&gt;데이터베이스 셋업&lt;/h2&gt;&lt;p&gt;첫번째 장고앱 만들기 part2 에 대한 포스팅 시작입니다. &lt;/p&gt;
&lt;p&gt;튜토리얼은 part1 에서 이어지고, part2 에서는 데이터베이스 셋업과 첫번째 모델 생성 그리고 Django의 자동 생성 어드민 사이트에 대해 소개 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;데이터베이스-셋업하기&quot;&gt;&lt;a href=&quot;#데이터베이스-셋업하기&quot; class=&quot;headerlink&quot; title=&quot;데이터베이스 셋업하기&quot;&gt;&lt;/a&gt;데이터베이스 셋업하기&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;&lt;code&gt;mysite/settings.py&lt;/code&gt; 파일을 열어줍니다. settings.py 는 Django 설정들을 대표하는 모듈레벨의 변수들을 가지고 있는 일반 파이썬 모듈입니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;기본값으로 설정되어 있는 데이터베이스는 SQLite 입니다.  &lt;br&gt;만약 데이터베이스 초심자 혹은 그냥 Django 를 시도해 보고 싶은거라면, SQLite 가 가장 쉬운 데이터베이스 사용 선택지 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;SQLite 는 파이썬에 포함되어 있습니다 &lt;/p&gt;
&lt;p&gt;따라서, 별도로 데이터베이스를 지원하기 위한 설치과정은 없습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="데이터베이스-셋업"><a href="#데이터베이스-셋업" class="headerlink" title="데이터베이스 셋업"></a>데이터베이스 셋업</h2><p>첫번째 장고앱 만들기 part2 에 대한 포스팅 시작입니다. </p><p>튜토리얼은 part1 에서 이어지고, part2 에서는 데이터베이스 셋업과 첫번째 모델 생성 그리고 Django의 자동 생성 어드민 사이트에 대해 소개 합니다. </p><br><br><h2 id="데이터베이스-셋업하기"><a href="#데이터베이스-셋업하기" class="headerlink" title="데이터베이스 셋업하기"></a>데이터베이스 셋업하기</h2><br><br><p><code>mysite/settings.py</code> 파일을 열어줍니다. settings.py 는 Django 설정들을 대표하는 모듈레벨의 변수들을 가지고 있는 일반 파이썬 모듈입니다. </p><p><br><br></p><p>기본값으로 설정되어 있는 데이터베이스는 SQLite 입니다.  <br>만약 데이터베이스 초심자 혹은 그냥 Django 를 시도해 보고 싶은거라면, SQLite 가 가장 쉬운 데이터베이스 사용 선택지 입니다. </p><br><blockquote><p>SQLite 는 파이썬에 포함되어 있습니다 </p><p>따라서, 별도로 데이터베이스를 지원하기 위한 설치과정은 없습니다. </p></blockquote><br><a id="more"></a><br><p>그렇지만, 첫번째 실전 프로젝트를 진행할때에는, PostgreSQL 같은 좀더 확장성이 있고 고도의 데이터베이스를 사용하고 싶어질지 모릅니다. </p><br><blockquote><p>mysite/settings.py 파일을 열면, </p><p>아래와 같이 데이터베이스를 설정을 하는 부분이 있습니다. </p></blockquote><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h2 id="데이터베이스-ENGINE-값"><a href="#데이터베이스-ENGINE-값" class="headerlink" title="데이터베이스 ENGINE 값"></a>데이터베이스 ENGINE 값</h2><br><br><ul><li>사용하고 싶은 데이터베이스 설정에 따라 <code>ENGINE</code> 값을 바꿔줄수 있습니다. <br></li></ul><table><thead><tr><th><strong>ENGINE 값</strong></th><th><strong>데이터베이스</strong></th></tr></thead><tbody><tr><td>‘django.db.backends.sqlite3’</td><td>SQLite</td></tr><tr><td>‘django.db.backends.postgresql’</td><td>PostgreSQL</td></tr><tr><td>‘django.db.backends.mysql’</td><td>MySQL</td></tr><tr><td>‘django.db.backends.oracle’</td><td>Oracle</td></tr></tbody></table><br><ul><li><code>NAME</code> 값은 데이터베이스 이름을 써줍니다. 만약 SQLite 를 사용한다면, 데이터베이스는 컴퓨터에 파일로 존재합니다. 이 경우에 NAME 은 절대 경로로 표시되어야 하고, 파일명을 포함하고 있어야 합니다. 기본값은 <code>os.path.join(BASE_DIR, &#39;db.sqlite3&#39;)</code>이고, 이 파일은 프로젝트 폴더 안에 저장됩니다. <br></li></ul><br><blockquote><p>SQLite 를 사용하고 있지 않다면, </p><p>USER, PASSWORD 그리고 HOST 같은 </p><p>추가 설정들이 추가되어야만 합니다. </p></blockquote><br><br><p>공식문서 튜토리얼에서는 데이터베이스를 SQLite 를 사용하고 있기 때문에. 다른 데이터베이스 설정에 대해서는 걱정할 필요가 없습니다. </p><br><br><h2 id="데이터베이스-생성전-확인-사항"><a href="#데이터베이스-생성전-확인-사항" class="headerlink" title="데이터베이스 생성전 확인 사항"></a>데이터베이스 생성전 확인 사항</h2><br><h3 id="TIME-ZONE"><a href="#TIME-ZONE" class="headerlink" title="TIME_ZONE"></a>TIME_ZONE</h3><br><p>튜토리얼에서는 <code>mysite/settings.py</code> 를 수정하는김에, <code>TIME_ZONE</code> 까지 설정하라고 합니다. settings.py 파일을 열면, TIME_ZONE 설정하는 부분이 있는데. 기본값으로 UTC 라고 되어 있습니다. </p><br><p>서울 시간인 <code>Asia/Seoul</code> 로 바꾸어 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Internationalization</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/topics/i18n/</span></span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">'en-us'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Seoul'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br></pre></td></tr></table></figure><br><br><h3 id="INSTALLED-APPS"><a href="#INSTALLED-APPS" class="headerlink" title="INSTALLED_APPS"></a>INSTALLED_APPS</h3><br><p>INSTALLED_APPS 도 유의깊게 보고 가야 합니다. <code>INSTALLED_APPS</code> 는 현재 Django 인스턴스에서 활성화 되어 있는 Django 어플리케이션들의 이름들이 있습니다. </p><br><p>어플리케이션들은 여러 프로젝트들에서 사용될수 있고, <br></p><p>다른 사람들이 프로젝트에 사용할수 있도록 패키지화 해서 배포할수 있습니다. </p><br><p>기본값으로, <code>INSTALLED_APPS</code>는 아래 앱들을 가지고 있습니다. </p><br><ul><li>django.contrib.admin - 관리자 사이트. 곧 사용하게 됩니다. </li><li>django.contrib.auth - 인증 시스템 </li><li>django.contrib.contenttypes - 컨텐트타입을 위한 프레임워크 </li><li>django.contrib.sessions - 세션 프레임워크 </li><li>django.contrib.messages - 메시징 프레임워크 </li><li>django.contrib.staticfiles - 정적파일들을 관리하기 위한 프레임워크 </li></ul><br><p>위 어플리케이션들은 공통적인 편의성을 위해 기본값으로 포함되어 있는 어플리케이션들 입니다. </p><br><br><p>이중 어떤 어플리케이션들은 적어도 하나의 데이터베이스 테이블을 사용합니다. <br></p><p>따라서, 이 앱들을 사용하기 위해서는, 데이터베이스 테이블이 먼저 생성이 되어 있어야 합니다. </p><br><br><p>데이터베이스 테이블을 생성하기 위해서, 아래 <code>migrate</code> 커맨드를 실행합니다. </p><br><br><h2 id="데이터베이스-migrate-하기"><a href="#데이터베이스-migrate-하기" class="headerlink" title="데이터베이스 migrate 하기"></a>데이터베이스 migrate 하기</h2><br><br><p>이전 포스팅부터, 계속 서버를 실행시키면, </p><p><br>아래와 같이 17 unapplied migration 이 있다고 메시지가 뜹니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"> </span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 17 unapplied migration(s). Your project may not work properly until you </span><br><span class="line">apply the migrations <span class="keyword">for</span> app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run <span class="string">'python manage.py migrate'</span> to apply them.</span><br><span class="line"></span><br><span class="line">April 12, 2020 - 08:29:55</span><br><span class="line">Django version 3.0.5, using settings <span class="string">'mysite.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><p><br>이 메시지를 자세히 읽어보면, 아래와 같은 사항을 확인 할수 있습니다. </p><br><blockquote><p>admin, auth, contenttypes, sessions 앱을 정상적으로 실행시키려면 </p><p>python manage.py migrate 명령어를 실행 합니다. </p></blockquote><br><p>python manage.py migrate 을 실행 합니다. <br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate </span><br><span class="line"></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying admin.0003_logentry_add_action_flag_choices... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying auth.0009_alter_user_last_name_max_length... OK</span><br><span class="line">  Applying auth.0010_alter_group_name_max_length... OK</span><br><span class="line">  Applying auth.0011_update_proxy_permissions... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure><br><p>이 <code>migrate</code> 커맨드는 <code>mysite/settings.py</code>에  INSTALLED_APPS 설정을 보고, </p><ul><li>settings.py 파일에 설정된 데이터베이스 설정과, </li><li>앱과 딸려온 데이터베이스 마이그레이션에 따라 필요한 데이터베이스 테이블들을 생성합니다. <br></li></ul><p><br> 각각의 마이그레이션의 적용에 따른 메시지들을 볼수 있습니다. <br></p><p>관심이 있으시다면, 커맨드라인에서 데이터베이스에 접속해서 테이블 조회를 할수도 있습니다. <br></p><p>SQLite 의 경우, SQLite 에 접속해서, <code>.schema</code> 라고 치면 조회가 되겠네요. <br></p><br><blockquote><p>INSTALLED_APPS 에 있는 기본 앱들은 </p><p>공통적인 사용을 위해 포함되어 있지만, 모든 사람들이 필요로 하는것들은 아닙니다. </p><p>만약 어떤것이든 혹은 전부 필요하지 않다면, </p><p>migrate 명령을 실행하기 전에, 해당 앱을 주석처리를 하거나, INSTALLED_APPS 에서 지워줍니다. </p><p>migrate 명령어는 오직 INSTALLED_APPS 에 등록된 앱들만 대상으로 migrations 를 실행합니다. </p></blockquote><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><ol><li>데이터베이스 설정은 settings.py 에 DATABASE 값에 해준다. </li><li><code>python manage.py migrate</code>를 실행해서 INSTALLED_APPS 에 등록된 앱의 동작에 필요한 데이터베이스 테이블들을 생성해준다. </li></ol><br><blockquote><p>migrate 명령어를 끝내고, runserver를 해보면</p><p>이제까지 보였던 17 unapplied migrations 이 있다는 메시지는 더 이상 출력되지 않습니다. </p></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">April 12, 2020 - 08:50:41</span><br><span class="line">Django version 3.0.5, using settings <span class="string">'mysite.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-1%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part1 - 4편</title>
      <link>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/</guid>
      <pubDate>Sat, 11 Apr 2020 21:10:07 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;첫번째-뷰-작성하기&quot;&gt;&lt;a href=&quot;#첫번째-뷰-작성하기&quot; class=&quot;headerlink&quot; title=&quot;첫번째 뷰 작성하기&quot;&gt;&lt;/a&gt;첫번째 뷰 작성하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 시간에 polls 앱을 생성하였고, 이번 포스팅에는 첫번째 view 를 작성해 봅니다 &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;디렉토리 구조는 아래와 같고, &lt;code&gt;polls/view.py&lt;/code&gt; 파일을 작성을 진행해봅니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;polls/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __init__.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    admin.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apps.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    migrations/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __init__.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    models.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tests.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    views.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Django의-MTV-모델&quot;&gt;&lt;a href=&quot;#Django의-MTV-모델&quot; class=&quot;headerlink&quot; title=&quot;Django의 MTV 모델&quot;&gt;&lt;/a&gt;Django의 MTV 모델&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="첫번째-뷰-작성하기"><a href="#첫번째-뷰-작성하기" class="headerlink" title="첫번째 뷰 작성하기"></a>첫번째 뷰 작성하기</h2><br><p>지난 시간에 polls 앱을 생성하였고, 이번 포스팅에는 첫번째 view 를 작성해 봅니다 </p><br><p>디렉토리 구조는 아래와 같고, <code>polls/view.py</code> 파일을 작성을 진행해봅니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="Django의-MTV-모델"><a href="#Django의-MTV-모델" class="headerlink" title="Django의 MTV 모델"></a>Django의 MTV 모델</h2><p><br><br><a id="more"></a></p><p>view 를 작성하기 전에, django 의 MTV 모델에 대해서 알아야 하는데. 간단하게 짚고 넘어가자면.. </p><br><p>Models, Templates, View 의 약자로 <br></p><br><ul><li>Models - 데이터베이스의 구조 설계 <br></li><li>Templates: 화면에 보이는 포맷 </li><li>Views: 전달된 요청을 처리하고 반환하는 로직 </li></ul><br><p>처음 접하면 생소하기도 하고, 헷갈리기도 해서. 몇가지 그림들을 가져와 봤습니다. </p><br><img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image1.png" class=""><p><br><br></p><blockquote><p>사용자가 URL 을 통해서 View 에 요청을 하면 </p><p>View 는 요청을 처리하고, 사용자에게 결과물을 반환합니다</p><p>View 는 Model 을 통해서 데이터베이스에서 데이터를 가져올수도 있고, 저장할수도 있습니다</p><p>View 는 Templates 에 결과를 그려주기도 합니다.  </p><p>처리 결과를 Template 에 그려주고, 그 Template 을 사용자에게 다시 반환하는것도 View 가 할 역할입니다. </p></blockquote><p><br><br></p><img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image2.png" class=""> <p><br><br></p><br><blockquote><p>따라서, view 를 작성하려면, </p><p>요청을 받을 URL 도 있어야 하고 </p><p>사용할 Model 도 있어야 하고 </p><p>화면을 출력할 Template 도 있어야 합니다 </p><br><p>View 에는 요청을 받아서, 요청을 처리하고 값을 반환해주는 함수들이 필요합니다. </p></blockquote><p><br><br></p><h2 id="MTV-순서"><a href="#MTV-순서" class="headerlink" title="MTV 순서"></a>MTV 순서</h2><p><br><br></p><p>처음에 django 공부할때, 어떤거 부터 작성해야 하는지에 대해서 많이 헷갈렸었는데. 튜토리얼에서는 View 부터 작성하고 시작합니다. </p><br><p>어떤분들은, models 부터 시작하고, 어떤분들은 templates 부터 시작합니다. </p><p>어디서부터 시작하는지는 개인 취향에 맡겨야 할것 같습니다. 결과물만 좋다면,, 순서는 뭐 중요하지 않지요. </p><br><p>공식문서에 나와있는 순서들도 100% 맞는 순서가 아니지만, 참고 합니다. </p><br><p><strong>공식문서 튜토리얼에서 진행하는 순서는 View 부터 진행합니다</strong></p><br><h2 id="View-작성하기"><a href="#View-작성하기" class="headerlink" title="View 작성하기"></a>View 작성하기</h2><p><br><br></p><blockquote><p>튜토리얼에서, 첫번쨰 View 를 작성 진행하는 순서는 아래와 같습니다 </p></blockquote><br><p>1) <code>polls/views.py</code>에 view 작성 </p><p>2) 요청을 전달할 <code>polls/urls.py</code> 생성 및 작성 (이 url은 작성된 view 를 요청합니다) </p><p>3) 프로젝트 url 과 <code>polls/urls.py</code> 를 연결 </p><p><br><br></p><blockquote><p>url 을 통해서 사용자가 요청을 보내면, </p><p>view 는 요청을 처리하고. 사용자에게 값을 반환합니다. </p></blockquote><p><br><br></p><p>자 그럼, 첫번째 뷰를 작성해 봅니다. <code>polls/views.py</code>를 열고, 아래 파이썬 코드를 작성합니다.</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world. You're at the polls index."</span>)</span><br></pre></td></tr></table></figure><p><br><br></p><p>이것이 django 에서 제일 간단한 view 입니다. 이 view 를 호출하기 위해서는 url 이 필요하겠죠? </p><p><br>따라서 url을 생성해 줍니다</p><p><br><br></p><h3 id="polls-urls-py-생성하기"><a href="#polls-urls-py-생성하기" class="headerlink" title="polls/urls.py 생성하기"></a>polls/urls.py 생성하기</h3><br><br><blockquote><p><code>polls/</code> 폴더에 <code>urls.py</code> 를 생성해 줍니다.</p><p>아래 디렉토리 구조는  <code>urls.py</code> 를 polls 폴더에 생성한 후의 구조 입니다.</p></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    urls.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><p><br><br></p><blockquote><p>polls/urls.py 에 아래 코드를 적어줍니다.</p></blockquote><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls/urls.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><br><h3 id="루트-URLConf-설정"><a href="#루트-URLConf-설정" class="headerlink" title="루트 URLConf 설정"></a>루트 URLConf 설정</h3><p><br><br></p><p>루트 URLConf 에서,  <code>polls/urls.py</code> 를 연결해 줍니다. 여기서 얘기하는 루트 URLConf 는 <code>mysite/urls.py</code> 입니다.</p><p><br><br></p><blockquote><p>mysite/urls.py 를 열고, urlpatterns 에 </p><p>polls/urls.py 가 포함되게 해줍니다 </p></blockquote><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite/urls.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin </span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'polls/'</span>, include(<span class="string">'polls.urls'</span>)),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><br><h3 id="호출-순서"><a href="#호출-순서" class="headerlink" title="호출 순서"></a>호출 순서</h3><p><br><br></p><p>루트 URLConf 설정을 해주고, 잠시 작동 순서를 생각해봅니다. </p><p><br><br><strong>브라우저에서 <code>polls/</code> 로 접속해보면, 아래와 같은 동작 순서가 그려집니다.</strong> </p><br><ol><li>브라우저에서 <code>polls/</code> 로 접속 </li><li><code>polls/</code> 에서 <code>include()</code> 함수를 통해서 <code>polls/urls.py</code> 로 연결 </li><li><code>polls/urls.py</code> 는 <code>&#39;&#39;</code>로 접속했을때, 위에서 작성한 <code>polls/views.py</code> 에 있는 <code>index</code> 함수를 호출 (즉, <code>127.0.0.0:8000/polls/</code> 로 접속했을때 <code>index</code>함수가 호출됨) </li><li><code>polls/views.py</code> 에 있는 <code>index</code> 함수는 요청을 처리후 <code>HttpResponse</code> 로 값을 반환 </li><li>브라우저에 요청이 처리되고 반환값이 표시 </li></ol><br><h3 id="include-함수"><a href="#include-함수" class="headerlink" title="include()함수"></a><code>include()</code>함수</h3><p><br><br></p><p>튜토리얼에서는 <code>include()</code> 함수에 대해서 설명을 하고 있는데. <code>include()</code> 함수는 루트에 존재하는 urls.py 가 다른 url 설정들을 참조할수 있게 해줍니다. 언제든 Django가 <code>include()</code>를 만나면, 참조하는 다른 url 설정으로 남은 문자열들을 전달합니다. </p><br><p>튜토리얼에서는 <code>include()</code> 함수에 대해서 간단하게 설명하고 있는데.<br>Django 초심자라면, 이 시점에서 이 설명을 들으면 오히려 튜토리얼 진행을 할수 없을만큼 헷갈립니다.<br><br><br></p><blockquote><p>include() 함수는 다름 URL 패턴들을 포함할수 있게 합니다. </p><p>다른 url 패턴들을 포함하고 싶을때에는 언제나 include() 함수를 사용합니다 </p><p>admin.site.urls 는 예외입니다. </p></blockquote><p><br><br></p><h2 id="서버를-실행해서-확인하기"><a href="#서버를-실행해서-확인하기" class="headerlink" title="서버를 실행해서 확인하기"></a>서버를 실행해서 확인하기</h2><br><br><p><code>python manage.py runserver</code>를 실행하고, 브라우저를 엽니다<br></p><p>브라우저 주소창에 <code>127.0.0.1:8000</code> 이 표시되어 있고, page not found(404) 가 표시됩니다<br><br><br></p><img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image3.png" class=""> <p><br><br></p><p>페이지를 찾을수 없는 이유는, 루트에 있는 url 파일을 확인해 보면 알수 있습니다. <br></p><p>mysite/urls.py 파일을 참조하면, <strong>등록되어 있는  urls 는 총 2개로 <code>admin/</code> 과 <code>polls/</code> 2개 뿐입니다</strong><br></p><p><br>이 2가지 url 을 제외한 url 을 입력하면, 당연히 django 에서 url을 찾을수 없겟죠? ㅎㅎ </p><p><br><br></p><blockquote><p>127.0.0.1:8000/polls 혹은 </p><p>127.0.0.1:8000/admin 으로 접속하면 해당 페이지들을 찾을수 있을겁니다.  </p></blockquote><p><br><br><br></p><p><strong><code>127.0.0.1:8000/polls/</code>로 접속해 봅니다. polls/views.py 에 있는 Index 뷰가 정상적으로 화면에 메시지를 출력할것 입니다.</strong></p><br><br><img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image4.png" class=""> <p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><p>공식문서 튜토리얼에 첫번째 뷰 작성하기 부분 마지막에는 <code>path()</code> 함수에 대한 설명이 있는데.<br> 이부분은 아직 깊게 들어갈 필요가 없습니다. <br>이제까지 내용도 소화하기 힘든데, path() 까지 깊게 짚지 않고, 향후에 실력이 더 쌓이면 깊게 들어가 보겠습니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part1 - 3편</title>
      <link>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-3%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-3%ED%8E%B8/</guid>
      <pubDate>Sat, 11 Apr 2020 20:51:45 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Polls-app-생성하기&quot;&gt;&lt;a href=&quot;#Polls-app-생성하기&quot; class=&quot;headerlink&quot; title=&quot;Polls app 생성하기&quot;&gt;&lt;/a&gt;Polls app 생성하기&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;이전 과정까지 프로젝트 환경 설정과 생성을 진행 하였습니다. 이제 개발을 시작해도 됩니다&lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;Django에서 쓰는 각가의 어플리케이션은 특정한 규약을 따르는 파이썬 패키지로 이루어져 있습니다&lt;br&gt;&lt;/p&gt;
&lt;p&gt;django 는 자동으로 앱의 기본 디렉토리 구조를 생성하는 유틸리티를 가지고 있습니다&lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;따라서, 디렉토리를 생성하는데에 시간을 쓰기 보다는 &lt;/p&gt;
&lt;p&gt;코드를 쓰는데에 더 집중할수 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Polls-app-생성하기"><a href="#Polls-app-생성하기" class="headerlink" title="Polls app 생성하기"></a>Polls app 생성하기</h2><br><br><p>이전 과정까지 프로젝트 환경 설정과 생성을 진행 하였습니다. 이제 개발을 시작해도 됩니다<br></p><br><p>Django에서 쓰는 각가의 어플리케이션은 특정한 규약을 따르는 파이썬 패키지로 이루어져 있습니다<br></p><p>django 는 자동으로 앱의 기본 디렉토리 구조를 생성하는 유틸리티를 가지고 있습니다<br></p><br><blockquote><p>따라서, 디렉토리를 생성하는데에 시간을 쓰기 보다는 </p><p>코드를 쓰는데에 더 집중할수 있습니다. </p></blockquote><br><a id="more"></a><br><br><h2 id="Projects-vs-Apps"><a href="#Projects-vs-Apps" class="headerlink" title="Projects vs Apps"></a>Projects vs Apps</h2><p><br><br></p><p>Django 에서 프로젝트와 어플리케이션의 다른점을 꼭 알고 가야합니다. </p><br><p>일단, 하나의 프로젝트는 여러개의 앱들을 가질수 있습니다.<br>하나의 앱은 어떠한 동작을 수행하기 위해서 만들어 집니다.<br><br><br></p><blockquote><p><strong>app(앱)</strong> </p><p>웹 어플리케이션으로 어떠한 동작을 수행합니다 </p><p>예) 웹블로그 시스템, 공공 기록을 가진 데이터베이스, 혹은 작은 투표앱 </p></blockquote><p><br><br></p><blockquote><p><strong>project(프로젝트)</strong></p><p>하나의 특정 웹사이트를 위한 설정들과 앱들의 모임입니다. </p><p>프로젝트는 여러개의 앱을 가질수 있습니다. </p><p>하나의 앱은 여러개의 프로젝트 안에 존재할수 있습니다. </p></blockquote><p><br><br></p><p>Apps(앱) 들은 파이썬 경로 어디에든 있을수 있습니다. 이 튜토리얼에서는 <code>manage.py</code> 파일이 존재하는 폴더에 우리의 투표앱을 생성할것 입니다. </p><br><p>그래서, 생성된 프로젝트 <code>mysite</code> 의 하위 모듈이 아닌, 루트 폴더 기준에서, 앱이 자체적으로 모듈로 불러서 쓸수 있게 만들겁니다.<br><br><br></p><h2 id="앱-생성하기"><a href="#앱-생성하기" class="headerlink" title="앱 생성하기"></a>앱 생성하기</h2><p><br><br></p><p><code>manage.py</code> 파일이 존재하는 폴더에서 아래 커맨드를 입력하여 앱을 생성합니다<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp polls</span><br></pre></td></tr></table></figure><br><p>앱 생성후에는 polls 폴더는 아래와 같은 구조여야 합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><p><br><br></p><p>앱을 생성하고 나서의 파이참 화면 내역입니다. 왼쪽 네비게이션에 디렉토리 생성 사항을 체크할수 있습니다. </p><br><img src="/2020/04/12/Writing-your-first-Django-app-part1-3%ED%8E%B8/image1.png" class=""><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><p>생성된 프로젝트 안에, 앱을 하나 생성해 주었습니다. </p><p>프로젝트 &gt; 앱, 이 개념을 잘 알아야 합니다. </p><br><p>다음 포스팅에는 첫번째 view 를 다루는 내용을 진행 합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-3%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part1 - 2편</title>
      <link>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-2%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-2%ED%8E%B8/</guid>
      <pubDate>Sat, 11 Apr 2020 20:36:02 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;개발-서버&quot;&gt;&lt;a href=&quot;#개발-서버&quot; class=&quot;headerlink&quot; title=&quot;개발 서버&quot;&gt;&lt;/a&gt;개발 서버&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅에서 Django 프로젝트를 생성하였습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;생성된 django 프로젝트가 동작을 하는지 확인해 보겠습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;code&gt;mysite&lt;/code&gt;폴더로 이동하고, &lt;code&gt;python manage.py runserver&lt;/code&gt; 커멘드를 실행해줍니다.
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="개발-서버"><a href="#개발-서버" class="headerlink" title="개발 서버"></a>개발 서버</h2><br><p>지난 포스팅에서 Django 프로젝트를 생성하였습니다. </p><p><br>생성된 django 프로젝트가 동작을 하는지 확인해 보겠습니다. </p><p><br><code>mysite</code>폴더로 이동하고, <code>python manage.py runserver</code> 커멘드를 실행해줍니다. <a id="more"></a></p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">(django-tutorial)  ~/django_tutorial/mysite (master)  ls</span><br><span class="line">manage.py  mysite</span><br><span class="line">(django-tutorial)  ~/django_tutorial/mysite  (master) python manage.py runserver</span><br><span class="line"></span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 17 unapplied migration(s). Your project may not work properly until you apply the migrations <span class="keyword">for</span> app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run <span class="string">'python manage.py migrate'</span> to apply them.</span><br><span class="line"></span><br><span class="line">April 11, 2020 - 06:48:28</span><br><span class="line">Django version 3.0.5, using settings <span class="string">'mysite.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><br><br><blockquote><p>17 unapplied migration(s) </p><p>17개의 적용되지 않은 마이그레이션이 있다는 메시지는 </p><p>일단 무시하고 넘어갑니다. 곧 이것에 대해서 다루게 될겁니다. </p></blockquote><br><p>Django 개발 서버를 시작하였습니다. 파이썬으로만 쓰여진 아주 가벼운 웹 서버 입니다. </p><p><br>이 웹서버는 Django 에 포함되어 있고, Apache 같은 프로덕션 서버를 설정할 필요 없이, 빠르게 개발할수 있게 만들어져 있습니다. <br></p><p>프로덕션 서버를 만들 준비가 되면, 그때가서 프로덕션 서버 설정을 하면 됩니다. </p><br><br><p>한가지 알아야 할 점은, 이 서버를 프로덕션 환경에서 사용하면 안된다는 점입니다. 개발서버는 오직 개발중에 사용될 의도로 만들어 졌습니다. </p><br><h2 id="웹서버-접속해보기"><a href="#웹서버-접속해보기" class="headerlink" title="웹서버 접속해보기"></a>웹서버 접속해보기</h2><br><p>서버가 실행중이니, 브라우저에서 웹서버에 접속해 봅니다 <code>http://127.0.0.1:8000</code></p><br><p>아래 이미지와 같이, 로켓 그림과 함께 congratulations! 가 표시된 페이지를 본다면, 잘 실행되고 있다는 겁니다. </p><br><img src="/2020/04/12/Writing-your-first-Django-app-part1-2%ED%8E%B8/image1.png" class=""><br><br><blockquote><p>runserver 커맨드는 기본값으로 </p><p>내부 IP port 8000 에 개발서버를 시작합니다. <br></p><br><p>포트값을 바꾸고 싶으면, 커맨드라인에서 인자값을 바꿔줍니다. 예를들어 <br></p><p>python manage.py runserver 8080 <br></p><br><p>서버의 IP 를 바꾸고 싶다면, IP 값을 포트값과 같이 전달해 줍니다. 예를들어 <br><br>python manage.py runserver 0:8000 </p><p>0 은 0.0.0.0 의 약자입니다.</p></blockquote><br><h2 id="자동-runserver-리로딩"><a href="#자동-runserver-리로딩" class="headerlink" title="자동 runserver 리로딩"></a>자동 runserver 리로딩</h2><br><p>개발 서버는 각 요청마다 파이썬 코드를 자동으로 다시 불러오게 됩니다. </p><p><br>코드의 변경 사항의 결과를 보기위해서, 매번 서버를 다시 시작하지 않아도 됩니다. </p><p><br>그렇지만, 어떤 파일들을 추가할때는 자동으로 다시 불러오지 않습니다. 따라서 해당 상황에서는, 서버를 다시 재시작 시켜 주어야 합니다. </p><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>개발 서버를 구동 시켜 보았습니다. </p><p><code>python manage.py runserver</code>를 실행시켜보면, 서버가 시작됩니다 </p><br><p>한번 서버를 실행 시키면, 에러가 없는 파이썬 코드를 수정할때마다 서버가 수정된 코드들을 다시 읽어 옵니다. </p><p><br>서버를 재시작 시킬 필요가 없지만. 특정 파일들을 추가할때에는 그렇지 않을 경우가 존재하기 때문에, 그런 상황에서는 서버를 다시 실행 시켜 줍니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-2%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part1 - 1편</title>
      <link>http://djangojeng-e.github.io/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/</guid>
      <pubDate>Sat, 11 Apr 2020 10:20:07 GMT</pubDate>
      <description>
      
        &lt;br&gt;

&lt;p&gt;지난시간에 간단한 초기 설정을 마쳤습니다. &lt;/p&gt;
&lt;p&gt;공식문서 튜토리얼 진행을 하면서 추가 설정을 같이 진행 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;초기설정-파이썬-인터프리터-설정&quot;&gt;&lt;a href=&quot;#초기설정-파이썬-인터프리터-설정&quot; class=&quot;headerlink&quot; title=&quot;초기설정: 파이썬 인터프리터 설정&quot;&gt;&lt;/a&gt;초기설정: 파이썬 인터프리터 설정&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이참을 열고, 파이썬 인터프리터를 우리가 생성한 가상환경으로 설정을 해주어야 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;파이참에서 &lt;code&gt;FILE&lt;/code&gt; 안에 &lt;code&gt;SETTINGS&lt;/code&gt; 메뉴를 열어줍니다. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;python interpreter&lt;/code&gt; 설정을 해주어야 합니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<br><p>지난시간에 간단한 초기 설정을 마쳤습니다. </p><p>공식문서 튜토리얼 진행을 하면서 추가 설정을 같이 진행 합니다. </p><br><h2 id="초기설정-파이썬-인터프리터-설정"><a href="#초기설정-파이썬-인터프리터-설정" class="headerlink" title="초기설정: 파이썬 인터프리터 설정"></a>초기설정: 파이썬 인터프리터 설정</h2><br><p>파이참을 열고, 파이썬 인터프리터를 우리가 생성한 가상환경으로 설정을 해주어야 합니다. </p><br><blockquote><p>파이참에서 <code>FILE</code> 안에 <code>SETTINGS</code> 메뉴를 열어줍니다. </p><p><code>python interpreter</code> 설정을 해주어야 합니다. </p></blockquote><br><a id="more"></a><br><ol><li>맨 오른쪽에 조그마한 설정 아이콘을 클릭 </li><li>프로젝트 인터프리터 목록창이 나오는데, 우측에 조그맣게 있는 <code>+</code> 버튼을 눌러서 <code>Add Python Interpreter</code>창 실행 </li><li><code>Existing Envrionment</code>를 클릭하고, 이전 포스팅에서 생성한 가상환경 <code>django-tutorial</code>로 설정</li><li><code>OK</code> 버튼을 눌러서, 인터프리터 설정 완료 </li><li>파이참 재시작 </li></ol><br><img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image1.png" class=""><br><blockquote><p>가상 환경에 깔려 있는 패키지들이 표시됩니다 </p></blockquote><br><img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image2.png" class=""> <br><br><h2 id="Creating-a-Project-프로젝트-생성하기"><a href="#Creating-a-Project-프로젝트-생성하기" class="headerlink" title="Creating a Project(프로젝트 생성하기)"></a>Creating a Project(프로젝트 생성하기)</h2><br><br><p>django를 처음 사용하는것이라면, 초기 설정을 잘해야 합니다. </p><p><br>예를들면, django 프로젝트에는, django 의 인스턴스를 생성하는 모든 설정들 (아래 참조) 를 자동 생성하는 코드들이 필요합니다.  </p><br><ul><li>Django 데이터베이스 설정 </li><li>Django 특화 옵션들 </li><li>어플리케이션 특화 옵션들 </li></ul><br><p>폴더 설정을 잘 마쳤으면, 다음 커맨드를 입력하여, 프로젝트를 자동 생성 합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject mysite</span><br></pre></td></tr></table></figure><br><br><p>저는 지난시간에 파이참을 열어놓았기 때문에, 파이참에서 아래와 같이 커맨드를 입력해주었습니다. </p><br><img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image3.png" class=""><br><blockquote><p>아래와 같이 mysite 라는 폴더와 파일들이 자동 생성 되었습니다. </p></blockquote><br><img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image4.png" class=""><br><br><blockquote><p>참고로, </p><p>django 프로젝트 이름은 파이썬이나 Django 자체에서 쓰이는 </p><p>빌트인 이름들은 피해서 짓습니다. </p><p>예) 프로젝트명으로 django 를 사용하지 않습니다 (웹프레임워크 django와 이름 충돌) </p><p>예) 프로젝트명으로 test 라고 짓지 않습니다 (파이썬 빌트인 패키지과 충돌)</p></blockquote><br><br><h2 id="생성된-프로젝트-둘러보기"><a href="#생성된-프로젝트-둘러보기" class="headerlink" title="생성된 프로젝트 둘러보기"></a>생성된 프로젝트 둘러보기</h2><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mysite/</span><br><span class="line">    manage.py</span><br><span class="line">    mysite/</span><br><span class="line">        __init__.py</span><br><span class="line">        settings.py</span><br><span class="line">        urls.py</span><br><span class="line">        asgi.py</span><br><span class="line">        wsgi.py</span><br></pre></td></tr></table></figure><br><p>생성된 프로젝트를 둘러보니, mysite 라는 프로젝트가 생성되고.<br></p><p>위의 구조로, 폴더와 파일들이 생성된것을 확인 할수 있습니다. </p><br><h2 id="프로젝트-파일들"><a href="#프로젝트-파일들" class="headerlink" title="프로젝트 파일들"></a>프로젝트 파일들</h2><br><br><ul><li><p>바깥의 <code>mysite/</code>는 루트 디렉토리로 프로젝트의 컨테이너 입니다. 해당 폴더 이름은 django 로 지을수도 있고. 언제든 이름을 바꿔줄수 있습니다. <br></p></li><li><p><code>manage.py</code> 는 커맨드 라인 유틸리티로 django project 와 여러가지 방식으로 상호 작용 합니다. <br></p></li><li><p>안쪽의 <code>mysite/</code> 폴더는 프로젝트를 위한 실제 파이썬 패키지 입니다. 이 이름은 일반 파이썬 패키지명과 같은 방식으로, 폴더내의 어떤것이든 가져오기 위해 필요한 이름입니다. </p><br><p>예) mysite.urls,  mysite.asgi, mysite.settings<br> </p></li><li><p><code>mysite/__init__.py</code> 은 비어있는 파일로, 파이썬에게 해당 폴더가 파이썬 패키지라는것을 알려줍니다. 파이썬 초심자라면, 파이썬 문서패키지에 대해 더 읽어보기 섹션을 참조하길 바랍니다. <br></p></li><li><p><code>mysite/urls.py</code>는 django 프로젝트를 위한 url 선언들이 들어 있습니다. django 로 개발된 사이트의 목차 같은 역할을 합니다. <br></p></li><li><p><code>mystie/asgi.py</code> 는 <code>ASGI</code>가 호환되는 웹서버의 진입지점으로 django project  를 수행합니다.<br> </p></li><li><p><code>mysite/wsgi.py</code>는 <code>WSGI</code>가 호환되는 웹서버의 진입지점으로 django project 를 수행합니다.</p></li></ul><br><br><h2 id="초기설정-마무리"><a href="#초기설정-마무리" class="headerlink" title="초기설정 마무리"></a>초기설정 마무리</h2><br><br><p>프로젝트 생성이 완료 되었으니, 초반에 설치했던 <code>django-extension</code>를 프로젝트에 등록 해줍니다. </p><br><p><code>mysite/settings.py</code> 안에 <code>INSTALLED_APPS = []</code> 안쪽에<br><br></p><blockquote><p><code>django_extensions</code>를 추가해 줍니다.  </p></blockquote><br><br><img src="/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/image5.png" class=""><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>Django 프로젝트 생성을 완료하였습니다. 초기 설정은 아직 좀 더 남아 있기는 하지만, </p><p>이정도로 마치고 넘어가면서. 추가로 필요한 설정이 있으면, 그때마다 하겠습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/11/Writing-your-first-Django-app-part1-1%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part1 - 초기설정</title>
      <link>http://djangojeng-e.github.io/2020/04/11/Writing-your-first-Django-app-part1-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/</link>
      <guid>http://djangojeng-e.github.io/2020/04/11/Writing-your-first-Django-app-part1-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/</guid>
      <pubDate>Sat, 11 Apr 2020 09:30:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;장고-공식문서-튜토리얼-초기세팅&quot;&gt;&lt;a href=&quot;#장고-공식문서-튜토리얼-초기세팅&quot; class=&quot;headerlink&quot; title=&quot;장고 공식문서 튜토리얼 초기세팅&quot;&gt;&lt;/a&gt;장고 공식문서 튜토리얼 초기세팅&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;공식문서에 나와있는 첫번째 앱 만들기 튜토리얼을 진행해봅니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이 튜토리얼을 통해서, 아주 기본적인 투표앱을 만드는 과정을 해보겠습니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;투표앱은 두부분으로 이루어져있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;1) 사람들이 투표소 (투표의 내역) 를 보고, 투표를 할수 있는 하나의 공용 사이트 &lt;/p&gt;
&lt;p&gt;2) 투표소 (투표의 내역) 를 추가, 변경, 삭제할수 있는 관리자 사이트&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="장고-공식문서-튜토리얼-초기세팅"><a href="#장고-공식문서-튜토리얼-초기세팅" class="headerlink" title="장고 공식문서 튜토리얼 초기세팅"></a>장고 공식문서 튜토리얼 초기세팅</h2><br><br><p>공식문서에 나와있는 첫번째 앱 만들기 튜토리얼을 진행해봅니다. </p><br><p>이 튜토리얼을 통해서, 아주 기본적인 투표앱을 만드는 과정을 해보겠습니다. </p><br><br><p>투표앱은 두부분으로 이루어져있습니다. </p><br><p>1) 사람들이 투표소 (투표의 내역) 를 보고, 투표를 할수 있는 하나의 공용 사이트 </p><p>2) 투표소 (투표의 내역) 를 추가, 변경, 삭제할수 있는 관리자 사이트</p><br><a id="more"></a><br><p>Django가 이미 설치 되어있다고 가정하고 진행되는 튜토리얼 입니다. </p><p><br>아래 커맨드를 사용하여 어떤 버전의 django 가 설치되어 있는지 확인 할수 있습니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -m django --version</span><br></pre></td></tr></table></figure><br><br><h2 id="튜토리얼-진행전-초기세팅-OS는-Ubuntu18-04"><a href="#튜토리얼-진행전-초기세팅-OS는-Ubuntu18-04" class="headerlink" title="튜토리얼 진행전 초기세팅 (OS는 Ubuntu18.04)"></a>튜토리얼 진행전 초기세팅 (OS는 Ubuntu18.04)</h2><br><br><h3 id="가상환경-설정"><a href="#가상환경-설정" class="headerlink" title="가상환경 설정"></a>가상환경 설정</h3><br><br><p>가상환경 설정을 진행 합니다. (가상환경 설정준비가 되어 있지 않다면, 아래 링크 참조)<br></p><p><a href="https://djangojeng-e.github.io/2020/04/10/가상환경-pyenv-virtualenv-4편/#more">https://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-4%ED%8E%B8/#more</a></p><p><br>저는 아래와 같은 커맨드들을 입력하여. 초기 설정을 진행합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 홈 디렉토리에서 django_tutorial 폴더 생성 </span></span><br><span class="line">mkdir django_tutorial </span><br><span class="line"></span><br><span class="line"><span class="comment"># 홈 디렉토리에서 django_tutorial 폴더로 이동 </span></span><br><span class="line"><span class="built_in">cd</span> django_tutorial </span><br><span class="line"></span><br><span class="line"><span class="comment"># 튜토리얼을 위한 가상환경 생성 (python 3.7.4로 생성) </span></span><br><span class="line">pyenv virtualenv 3.7.4 django_tutorial</span><br><span class="line">Looking <span class="keyword">in</span> links: /tmp/tmp9y92lrdq</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> /home/dhkang/.pyenv/versions/3.7.4/envs/django-tutorial/lib/python3.7/site-packages (40.8.0)</span><br><span class="line">Requirement already satisfied: pip <span class="keyword">in</span> /home/dhkang/.pyenv/versions/3.7.4/envs/django-tutorial/lib/python3.7/site-packages (19.0.3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 해당 폴더에 생성된 가상환경 적용 </span></span><br><span class="line">pyenv <span class="built_in">local</span> django_tutorial</span><br></pre></td></tr></table></figure><br><br><blockquote><p>폴더에 가상환경 적용 완료 (아래 스크린 캡쳐 참조) </p></blockquote><br><img src="/2020/04/11/Writing-your-first-Django-app-part1-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/image1.png" class=""><br><h3 id="Django-설치"><a href="#Django-설치" class="headerlink" title="Django 설치"></a>Django 설치</h3><br><p><code>pip list</code>를 실행해서, 현재 설치된 패키지들을 검사합니다. django가 설치되어 있지 않습니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ pip list </span><br><span class="line"></span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        19.0.3 </span><br><span class="line">setuptools 40.8.0 </span><br><span class="line">You are using pip version 19.0.3, however version 20.0.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><br><br><p><code>pip install django</code> 명령어를 실행해서, django 를 설치합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ pip install django </span><br><span class="line">Installing collected packages: pytz, asgiref, sqlparse, django</span><br><span class="line">Successfully installed asgiref-3.2.7 django-3.0.5 pytz-2019.3 sqlparse-0.3.1</span><br><span class="line">You are using pip version 19.0.3, however version 20.0.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><p><br><br></p><p>다시한번 <code>pip list</code>를 실행하면, django 가 설치되어 있는것을 확인 할수 있습니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ pip list </span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">asgiref    3.2.7  </span><br><span class="line">Django     3.0.5  </span><br><span class="line">pip        19.0.3 </span><br><span class="line">pytz       2019.3 </span><br><span class="line">setuptools 40.8.0 </span><br><span class="line">sqlparse   0.3.1</span><br></pre></td></tr></table></figure><br><br><h3 id="Django-Extensions-설치"><a href="#Django-Extensions-설치" class="headerlink" title="Django Extensions 설치"></a>Django Extensions 설치</h3><br><p>튜토리얼 진행하면서, shell 을 사용할때가 나올텐데. Shell 대신, shell plus 를 사용하기 위해서 </p><p><br><code>django-extensions</code>를 설치해줍니다 <br></p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django-extensions</span><br></pre></td></tr></table></figure><br><blockquote><p>django-extensions 를 사용하기 위해선, </p><p>추후에 django 프로젝트를 생성하고, </p><p><code>settings.py</code> 에 <code>INSTALLED_APPS</code> 에  등록 해주어야 합니다</p></blockquote><br><p><code>pip list</code>를 실행하면, <code>django-extensions</code>가 설치된것을 확인할수 있습니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">(django-tutorial) ~/django_tutorial (master)  pip list</span><br><span class="line">Package           Version</span><br><span class="line">----------------- -------</span><br><span class="line">asgiref           3.2.7  </span><br><span class="line">Django            3.0.5  </span><br><span class="line">django-extensions 2.2.9  </span><br><span class="line">pip               19.0.3 </span><br><span class="line">pytz              2019.3 </span><br><span class="line">setuptools        40.8.0 </span><br><span class="line">six               1.14.0 </span><br><span class="line">sqlparse          0.3.1</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="Pycharm-실행"><a href="#Pycharm-실행" class="headerlink" title="Pycharm 실행"></a>Pycharm 실행</h3><p><br><br></p><p>파이참을 실행하는 커맨드는 각자 다를수 있는데.<br></p><p>저는 터미널에서 <code>pycharm-community .</code> 을 실행하면 실행이 됩니다. 해당 폴더에서 실행 합니다<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(django-tutorial)  ~/django_tutorial (master) pycharm-community .</span><br></pre></td></tr></table></figure><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>간단한 초기설정을 마쳤습니다. </p><p>아직 초기 세팅이 다 끝난것은 아닙니다. 파이참 인터프리터 설정도 해주어야 하고, django-extensions 도 세팅을 해주어야 합니다. <br></p><p>다음 포스팅 시작할때, 추가 초기설정도 하고, <br>향후 진행하면서 필요한 설정은, 그때그때 진행 하겠습니다. </p><br><p>튜토리얼을 위한 깃헙 주소 : <a href="https://github.com/djangojeng-e/django_tutorial.git" target="_blank" rel="noopener">https://github.com/djangojeng-e/django_tutorial.git</a></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/11/Writing-your-first-Django-app-part1-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>가상환경 pyenv, virtualenv - 4편</title>
      <link>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-4%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-4%ED%8E%B8/</guid>
      <pubDate>Fri, 10 Apr 2020 10:47:13 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;가상환경-설정-pyenv-virtualenv-4편&quot;&gt;&lt;a href=&quot;#가상환경-설정-pyenv-virtualenv-4편&quot; class=&quot;headerlink&quot; title=&quot;가상환경 설정 - pyenv, virtualenv - 4편&quot;&gt;&lt;/a&gt;가상환경 설정 - pyenv, virtualenv - 4편&lt;/h2&gt;&lt;h2 id=&quot;pyenv-virtualenv를-사용해서-가상환경-사용&quot;&gt;&lt;a href=&quot;#pyenv-virtualenv를-사용해서-가상환경-사용&quot; class=&quot;headerlink&quot; title=&quot;pyenv-virtualenv를 사용해서 가상환경 사용&quot;&gt;&lt;/a&gt;&lt;code&gt;pyenv-virtualenv&lt;/code&gt;를 사용해서 가상환경 사용&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;지난 포스팅에서 파이썬 3.8.0 을 설치하였습니다. &lt;/p&gt;
&lt;p&gt;가상환경 생성 준비는 다 된것 같으니. 직접 가상환경을 생성하고 사용해 봅니다. &lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;파이썬-버전-확인&quot;&gt;&lt;a href=&quot;#파이썬-버전-확인&quot; class=&quot;headerlink&quot; title=&quot;파이썬 버전 확인&quot;&gt;&lt;/a&gt;파이썬 버전 확인&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;pyenv versions&lt;/code&gt;를 실행하여, 버전을 확인합니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;ubuntu@ip-172-31-47-234:~$ pyenv versions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;* system (&lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; by /home/ubuntu/.pyenv/version)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  3.8.0&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;현재 시스템에서 사용하고 있는 파이썬 버전이 표시됩니다. &lt;code&gt;3.8.0&lt;/code&gt;을 설치하였는데. 아직 사용중이지 않습니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;*&lt;/code&gt; 가 붙어 있는게 현재 사용하고 있는 버전의 파이썬입니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-4편"><a href="#가상환경-설정-pyenv-virtualenv-4편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv - 4편"></a>가상환경 설정 - pyenv, virtualenv - 4편</h2><h2 id="pyenv-virtualenv를-사용해서-가상환경-사용"><a href="#pyenv-virtualenv를-사용해서-가상환경-사용" class="headerlink" title="pyenv-virtualenv를 사용해서 가상환경 사용"></a><code>pyenv-virtualenv</code>를 사용해서 가상환경 사용</h2><br><br><p>지난 포스팅에서 파이썬 3.8.0 을 설치하였습니다. </p><p>가상환경 생성 준비는 다 된것 같으니. 직접 가상환경을 생성하고 사용해 봅니다. </p><br><h2 id="파이썬-버전-확인"><a href="#파이썬-버전-확인" class="headerlink" title="파이썬 버전 확인"></a>파이썬 버전 확인</h2><br><p><code>pyenv versions</code>를 실행하여, 버전을 확인합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ pyenv versions</span><br><span class="line">* system (<span class="built_in">set</span> by /home/ubuntu/.pyenv/version)</span><br><span class="line">  3.8.0</span><br></pre></td></tr></table></figure><br><p>현재 시스템에서 사용하고 있는 파이썬 버전이 표시됩니다. <code>3.8.0</code>을 설치하였는데. 아직 사용중이지 않습니다. </p><br><blockquote><p><code>*</code> 가 붙어 있는게 현재 사용하고 있는 버전의 파이썬입니다 </p></blockquote><br><a id="more"></a> <br><h2 id="시스템-전역에서-사용할-파이썬"><a href="#시스템-전역에서-사용할-파이썬" class="headerlink" title="시스템 전역에서 사용할 파이썬"></a>시스템 전역에서 사용할 파이썬</h2><br><br><p>3.8.0 을 사용하기 위해, 아래 명령어를 입력합니다 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv global 3.8.0</span><br></pre></td></tr></table></figure><br><p>실행하고, 버전을 확인해 보면,<br> <code>*</code>가 3.8.0 앞에 붙었습니다. 이제 전역에서 3.8.0 을 사용합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">* 3.8.0 (<span class="built_in">set</span> by /home/ubuntu/.pyenv/version)</span><br></pre></td></tr></table></figure><br><br><h2 id="가상환경-생성"><a href="#가상환경-생성" class="headerlink" title="가상환경 생성"></a>가상환경 생성</h2><br><p>파이썬 3.8.0 으로 가상환경 하나를 생성해 보겠습니다. <br></p><p>가상 환경 이름은 <code>django-env</code>로 짓겠습니다. </p><br><p>해당 명령어 포맷은 <code>pyenv virtualenv 3.8.0 &lt;가상환경 이름&gt;</code> 입니다. 아래 커멘드를 참조. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv virtualenv 3.8.0 django-env</span><br></pre></td></tr></table></figure><br><p>커맨드 실행후에는 아래와 같은 메시지가 나옵니다. <br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Looking <span class="keyword">in</span> links: /tmp/tmpt74f1znk</span><br><span class="line">Requirement already satisfied: setuptools <span class="keyword">in</span> /home/ubuntu/.pyenv/versions/3.8.0/envs/django-env/lib/python3.8/site-packages (41.2.0)</span><br><span class="line">Requirement already satisfied: pip <span class="keyword">in</span> /home/ubuntu/.pyenv/versions/3.8.0/envs/django-env/lib/python3.8/site-packages (19.2.3)</span><br></pre></td></tr></table></figure><br><br><blockquote><p>가상환경 <code>django-env</code>가 생성 완료 되었습니다. </p></blockquote><br><br><h2 id="특정-폴더에-가상환경-적용"><a href="#특정-폴더에-가상환경-적용" class="headerlink" title="특정 폴더에 가상환경 적용"></a>특정 폴더에 가상환경 적용</h2><br><br><p><code>django_tutorial</code> 이라는 폴더를 하나 생성해줍니다. </p><br><p>해당 폴더로 가서, 그 폴더에 가상환경을 적용해 봅니다. <br></p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ mkdir django_tutorial</span><br><span class="line"></span><br><span class="line">ubuntu@ip-172-31-47-234:~$ ls</span><br><span class="line">django_tutorial  main_projects</span><br><span class="line"></span><br><span class="line">ubuntu@ip-172-31-47-234:~$ <span class="built_in">cd</span> django_tutorial/</span><br></pre></td></tr></table></figure><br><br><p>해당 폴더 안에서, 아래 명령어를 실행해줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~/django_tutorial$ pyenv <span class="built_in">local</span> django-env</span><br></pre></td></tr></table></figure><br><br><p><code>django-env</code> 환경이 폴더에 잘 적용되었는지 아닌지 확인 하려면, <br></p><p>아래와 같이 커맨드라인 맨 왼쪽에 <code>(django-env)</code> 가 표시되는지 확인 해 봅니다. <code>()</code>안에 가상환경 이름이 표시되어 있지 않으면, 제대로 적용이 되지 않은것 입니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(django-env) ubuntu@ip-172-31-47-234:~/django_tutorial</span><br></pre></td></tr></table></figure><br><p><code>pyenv versions</code> 명령어를 실행해서, 현재 폴더에서 사용하고 있는 환경을 확인 해 봅니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(django-env) ubuntu@ip-172-31-47-234:~/django_tutorial$ pyenv versions</span><br><span class="line">  system</span><br><span class="line">  3.8.0</span><br><span class="line">  3.8.0/envs/django-env</span><br><span class="line">* django-env (<span class="built_in">set</span> by /home/ubuntu/django_tutorial/.python-version)</span><br></pre></td></tr></table></figure><br><blockquote><p><code>*</code>가 django-env 앞에 붙어 있습니다. <br></p><p>해당폴더에 제대로 적용 된것을 확인 할수 있습니다. <br></p></blockquote><p><br><br></p><h2 id="가상환경에-설치된-패키지-목록-확인"><a href="#가상환경에-설치된-패키지-목록-확인" class="headerlink" title="가상환경에 설치된 패키지 목록 확인"></a>가상환경에 설치된 패키지 목록 확인</h2><p><br><br></p><p><code>pip list</code>를 실행해서 설치된 패키지들을 확인해 봅니다.</p><p><br>2개 밖에 설치가 안되어 있는데. 이제 해당 폴더에서 진행할 프로젝트의 필요에 따라 패키지를 설치해도. <br></p><br><blockquote><p>원래 시스템에 존재하던 파이썬에는 패키지가 설치되지 않습니다. <br><br></p><p>해당 폴더안에 있는 파이썬 환경에만 패키지가 설치 됩니다. </p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(django-env) ubuntu@ip-172-31-47-234:~/django_tutorial$ pip list</span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">pip        19.2.3 </span><br><span class="line">setuptools 41.2.0 </span><br><span class="line">WARNING: You are using pip version 19.2.3, however version 20.0.2 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><br><p>만약, 다른 프로젝트를 생성하고 싶으면, 그 프로젝트를 진행할 폴더를 생성 한다음, 가상환경을 적용후에 그 폴더안에서 프로젝트를 진행하면 됩니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-4%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>가상환경 pyenv, virtualenv - 3편</title>
      <link>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-3%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-3%ED%8E%B8/</guid>
      <pubDate>Fri, 10 Apr 2020 10:17:45 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;가상환경-설정-pyenv-virtualenv-3편&quot;&gt;&lt;a href=&quot;#가상환경-설정-pyenv-virtualenv-3편&quot; class=&quot;headerlink&quot; title=&quot;가상환경 설정 - pyenv, virtualenv 3편&quot;&gt;&lt;/a&gt;가상환경 설정 - pyenv, virtualenv 3편&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;우분투가 새로 설치되었으면, &lt;/p&gt;
&lt;p&gt;이 3편부터 진행 하면 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;본격적으로 가상환경에 필요한 &lt;code&gt;pyenv&lt;/code&gt;설치를 진행 합니다 &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-3편"><a href="#가상환경-설정-pyenv-virtualenv-3편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv 3편"></a>가상환경 설정 - pyenv, virtualenv 3편</h2><br><blockquote><p>우분투가 새로 설치되었으면, </p><p>이 3편부터 진행 하면 됩니다. </p></blockquote><br><p>본격적으로 가상환경에 필요한 <code>pyenv</code>설치를 진행 합니다 </p><br><a id="more"></a><br><br><h2 id="설치-전-필요-패키지"><a href="#설치-전-필요-패키지" class="headerlink" title="설치 전 필요 패키지"></a>설치 전 필요 패키지</h2><br><p>설치에 앞서, 필요 패키지들을 설치 해줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt install git </span><br><span class="line">sudo apt install curl</span><br></pre></td></tr></table></figure><br><br><h2 id="pyenv-설치-진행"><a href="#pyenv-설치-진행" class="headerlink" title="pyenv 설치 진행"></a><code>pyenv</code> 설치 진행</h2><br><p><br>아래 깃허브 페이지 참조해서 진행 합니다. </p><p><a href="https://github.com/pyenv/pyenv-installer" target="_blank" rel="noopener">https://github.com/pyenv/pyenv-installer</a></p><br><br><blockquote><p>아래 커맨드를 사용해서 인스톨을 진행 합니다</p></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://raw.githubusercontent.com/yyuu/pyenv-installer/master/bin/pyenv-installer | bash</span><br></pre></td></tr></table></figure><br><p>설치 완료후, 아래와 같은 스크린을 보이면 됩니다. </p><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">remote: Total 10 (delta 1), reused 6 (delta 0), pack-reused 0</span><br><span class="line">Unpacking objects: 100% (10/10), <span class="keyword">done</span>.</span><br><span class="line"></span><br><span class="line">WARNING: seems you still have not added <span class="string">'pyenv'</span> to the load path.</span><br><span class="line"></span><br><span class="line"><span class="comment"># Load pyenv automatically by adding</span></span><br><span class="line"><span class="comment"># the following to ~/.bashrc:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/ubuntu/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure><br><br><blockquote><p>*<em>위 스크린의 마지막 부분 (아래 내용)을  *</em></p><p><strong>클립보드에 복사해 줍니다</strong> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Load pyenv automatically by adding</span></span><br><span class="line"><span class="comment"># the following to ~/.bashrc:</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/home/ubuntu/.pyenv/bin:<span class="variable">$PATH</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv init -)</span>"</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br></pre></td></tr></table></figure><p><strong>정말 중요한 포인트 입니다.</strong></p></blockquote><br><br><h2 id="export-PATH를-bashrc에-등록"><a href="#export-PATH를-bashrc에-등록" class="headerlink" title="export PATH를 ~/.bashrc에 등록"></a><code>export PATH</code>를 <code>~/.bashrc</code>에 등록</h2><br><br><p>위에 복사해둔 내용을 <code>~/.bashrc</code> 파일의 마지막줄에 추가해 줘야 합니다. </p><br><blockquote><p>만약 위에 코드에서, </p><p><code># the follwoing to ~/.bashrc:</code> 부분에 <code>~/.bashrc</code> 부분이 다르게 나타나면 </p><p>그 경로가 바로 수정해줘야 하는 파일이 됩니다.  예) <code>~./zshrc</code> 등등 </p></blockquote><br><p>어쨋든 저는 <code>~/.bashrc</code>가 나와있기 때문에, <code>~/.bashrc</code>를 아래 명령어로 열어 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br></pre></td></tr></table></figure><br><p>위에 복사해놓은 내용을, 파일 맨 아래에 붙여 넣습니다. </p><br><img src="/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-3%ED%8E%B8/image1.png" class=""><br><br><br><p>추가후에 파일을 세이브 한뒤에. 터미널을 다시 실행 시켜줍니다. </p><br><br><h2 id="pyenv-설치-확인하기"><a href="#pyenv-설치-확인하기" class="headerlink" title="pyenv 설치 확인하기"></a><code>pyenv</code> 설치 확인하기</h2><p><br><br></p><p><code>pyenv</code> 명령어를 실행해서, 아래와 같은 화면이 보이면, 일단 설치는 완료 된거 맞습니다.<br>명령어 목록들이 화면에 쭈욱 나옵니다. <br><br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-47-234:~$ pyenv</span><br><span class="line"></span><br><span class="line">pyenv 1.2.18</span><br><span class="line">Usage: pyenv &lt;<span class="built_in">command</span>&gt; [&lt;args&gt;]</span><br><span class="line"></span><br><span class="line">Some useful pyenv commands are:</span><br><span class="line">   --version   Display the version of pyenv</span><br><span class="line">   virtualenv-prefix   Display real_prefix <span class="keyword">for</span> a Python virtualenv version</span><br><span class="line">   virtualenvs   List all Python virtualenvs found <span class="keyword">in</span> `<span class="variable">$PYENV_ROOT</span>/versions/*<span class="string">'.</span></span><br><span class="line"><span class="string">   whence      List all Python versions that contain the given executable</span></span><br><span class="line"><span class="string">   which       Display the full path to an executable</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">See `pyenv help &lt;command&gt;'</span> <span class="keyword">for</span> information on a specific <span class="built_in">command</span>.</span><br><span class="line">For full documentation, see: https://github.com/pyenv/pyenv<span class="comment">#readme</span></span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="pyenv로-파이썬-설치하기"><a href="#pyenv로-파이썬-설치하기" class="headerlink" title="pyenv로 파이썬 설치하기"></a><code>pyenv</code>로 파이썬 설치하기</h2><br><br><h3 id="pyenv를-사용해서-파이썬-설치준비"><a href="#pyenv를-사용해서-파이썬-설치준비" class="headerlink" title="pyenv를 사용해서 파이썬 설치준비"></a><code>pyenv</code>를 사용해서 파이썬 설치준비</h3><br><br><p><code>pyenv</code> 를 사용해서 파이썬을 설치할수 있습니다. 우분투18.04 기준으로, <br></p><p>아래 명령어를 실행해서 설치전 필요 패키지들을 설치 합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -y make build-essential libssl-dev zlib1g-dev libbz2-dev \</span><br><span class="line">libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev \</span><br><span class="line">xz-utils tk-dev libffi-dev liblzma-dev python-openssl git</span><br></pre></td></tr></table></figure><br><p>아래와 같은 화면이 보이면, 필요 패키지 설치가 된겁니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">or (x-terminal-emulator) <span class="keyword">in</span> auto mode</span><br><span class="line">Setting up tk (8.6.0+9) ...</span><br><span class="line">Setting up libgl1:amd64 (1.0.0-2ubuntu2.3) ...</span><br><span class="line">Setting up tk-dev:amd64 (8.6.0+9) ...</span><br><span class="line">Setting up x11-utils (7.7+3build1) ...</span><br><span class="line">Setting up libgl1-mesa-glx:amd64 (19.2.8-0ubuntu0~18.04.3) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> man-db (2.8.3-2ubuntu0.1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> mime-support (3.60ubuntu1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> ureadahead (0.100.0-21) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> install-info (6.5.0.dfsg.1-2) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> libc-bin (2.27-3ubuntu1) ...</span><br><span class="line">Processing triggers <span class="keyword">for</span> systemd (237-3ubuntu10.39) ...</span><br></pre></td></tr></table></figure><br><br><h3 id="pyenv로-설치-가능한-파이썬-목록-확인"><a href="#pyenv로-설치-가능한-파이썬-목록-확인" class="headerlink" title="pyenv로 설치 가능한 파이썬 목록 확인"></a><code>pyenv</code>로 설치 가능한 파이썬 목록 확인</h3><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install --list</span><br></pre></td></tr></table></figure><br><p>아래와 같이 설치 가능한 버전 목록 출력 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">3.6.9</span><br><span class="line">3.6.10</span><br><span class="line">3.7.0</span><br><span class="line">3.7-dev</span><br><span class="line">3.7.1</span><br><span class="line">3.7.2</span><br><span class="line">3.7.3</span><br><span class="line">3.7.4</span><br><span class="line">3.7.5</span><br><span class="line">3.7.6</span><br><span class="line">3.7.7</span><br><span class="line">3.8.0</span><br></pre></td></tr></table></figure><br><br><blockquote><p>설치 가능한 파이썬 버전이 굉장히 많은데 </p><p>여기서 저는 3.8.0 을 설치해 보려 합니다. </p></blockquote><br><p>아래 명령어를 사용해서, 파이썬 3.8.0 을 설치해 줍니다 </p><p><br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv install 3.8.0</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Downloading Python-3.8.0.tar.xz...</span><br><span class="line">-&gt; https://www.python.org/ftp/python/3.8.0/Python-3.8.0.tar.xz</span><br><span class="line">Installing Python-3.8.0...</span><br><span class="line">Installed Python-3.8.0 to /home/ubuntu/.pyenv/versions/3.8.0</span><br></pre></td></tr></table></figure><br><p>파이썬 3.8.0 의 설치가 완료 되었습니다.  </p><p><br><br></p><h3 id="pyenv로-시스템에-파이썬-목록-확인"><a href="#pyenv로-시스템에-파이썬-목록-확인" class="headerlink" title="pyenv로 시스템에 파이썬 목록 확인"></a><code>pyenv</code>로 시스템에 파이썬 목록 확인</h3><p><br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure><br><p>아래와 같이 <code>*</code>가 붙은게 현재 사용중인 파이썬 입니다. 아직 <code>3.8.0</code>으로 설정이 안되어 있는데. <br></p><p>설정 진행을 할겁니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">* system (<span class="built_in">set</span> by /home/ubuntu/.pyenv/version)</span><br><span class="line">  3.8.0</span><br></pre></td></tr></table></figure><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p><code>pyenv</code>를 설치하고, 파이썬 3.8.0을 설치 하였습니다. </p><p>다음 포스팅에는 파이썬 3.8.0 을 전역 파이썬 환경으로 설정하고, 가상환경 관리를 다루겠습니다 </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-3%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>가상환경 pyenv, virtualenv - 2편</title>
      <link>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-2%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-2%ED%8E%B8/</guid>
      <pubDate>Fri, 10 Apr 2020 10:02:17 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;가상환경-설정-pyenv-virtualenv-2편&quot;&gt;&lt;a href=&quot;#가상환경-설정-pyenv-virtualenv-2편&quot; class=&quot;headerlink&quot; title=&quot;가상환경 설정 - pyenv, virtualenv 2편&quot;&gt;&lt;/a&gt;가상환경 설정 - pyenv, virtualenv 2편&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;제 개인 컴퓨터에는 우분투가 설치되어 있고. 이미 파이썬과 가상환경 세팅이 완료가 되어 있기 때문에. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;아주 처음부터 진행하기 위해서 AWS EC2를 새로 생성해서, 갓 설치된 우분투로 가상환경 설치를 진행 해보려 합니다.  &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;컴퓨터에 우분투를 새로 설치하였으면&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;AWS로 접속 하지 않고 본인의 피씨 터미널에서 진행해야 합니다&lt;/strong&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;순전히, 새로운 우분투가 필요해서 AWS 에 접속해서 진행한것이지. 새로 우분투를 설치한 피씨가 있었으면, &lt;br&gt;&lt;/p&gt;
&lt;p&gt;제 피씨에서 진행 했을겁니다. &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;컴퓨터에 새로 우분투를 설치하신분은 이 과정은 넘어갑니다&lt;/strong&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-2편"><a href="#가상환경-설정-pyenv-virtualenv-2편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv 2편"></a>가상환경 설정 - pyenv, virtualenv 2편</h2><br><p>제 개인 컴퓨터에는 우분투가 설치되어 있고. 이미 파이썬과 가상환경 세팅이 완료가 되어 있기 때문에. </p><p><br>아주 처음부터 진행하기 위해서 AWS EC2를 새로 생성해서, 갓 설치된 우분투로 가상환경 설치를 진행 해보려 합니다.  </p><br><blockquote><p><strong>컴퓨터에 우분투를 새로 설치하였으면</strong> </p><p><strong>AWS로 접속 하지 않고 본인의 피씨 터미널에서 진행해야 합니다</strong> </p></blockquote><br><p>순전히, 새로운 우분투가 필요해서 AWS 에 접속해서 진행한것이지. 새로 우분투를 설치한 피씨가 있었으면, <br></p><p>제 피씨에서 진행 했을겁니다. </p><p><strong>컴퓨터에 새로 우분투를 설치하신분은 이 과정은 넘어갑니다</strong></p><a id="more"></a><br><br><h2 id="AWS-EC2-접속하기"><a href="#AWS-EC2-접속하기" class="headerlink" title="AWS EC2 접속하기"></a>AWS EC2 접속하기</h2><br><br><blockquote><p>AWS EC2 생성과, 키 설정에 대한 설명은 스킵하겠습니다. </p></blockquote><p><br>자신의 PC 터미널에 아래 명령어를 사용해서 본인의 인스턴스에 접속합니다.  </p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~&#x2F;.ssh&#x2F;12th.pem ubuntu@13.109.21.6</span><br></pre></td></tr></table></figure><br><img src="/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-2%ED%8E%B8/image1.png" class=""><br><br><blockquote><p>접속이 잘 된것을 확인할수 있습니다. </p></blockquote><br><p><br><img src="/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-2%ED%8E%B8/image2.png" class=""></p><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><br><p>AWS 에 생성한 우분투 인스턴스에 접속을 해보았습니다. </p><p><br>순전히 갓 설치된 우분투 시스템이 필요해서 생성후 만든 인스턴스이고.. <br></p><p>이 과정은 사실 가상환경 설정과는 무관합니다.</p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-2%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>가상환경 pyenv, virtualenv - 1편</title>
      <link>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-1%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-1%ED%8E%B8/</guid>
      <pubDate>Fri, 10 Apr 2020 09:47:02 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;가상환경-설정-pyenv-virtualenv-1편&quot;&gt;&lt;a href=&quot;#가상환경-설정-pyenv-virtualenv-1편&quot; class=&quot;headerlink&quot; title=&quot;가상환경 설정 - pyenv, virtualenv 1편&quot;&gt;&lt;/a&gt;가상환경 설정 - pyenv, virtualenv 1편&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;virtualenv, pyenv-virtualenv &lt;/p&gt;
&lt;p&gt;pyenv 는 다중의 파이썬 버전을 쉽게 바꿔가며 사용할수 있게 해주는 도구 입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;Virtualenv&quot;&gt;&lt;a href=&quot;#Virtualenv&quot; class=&quot;headerlink&quot; title=&quot;Virtualenv&quot;&gt;&lt;/a&gt;Virtualenv&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;virtualenv 는 분리된 파이썬 환경을 &lt;/p&gt;
&lt;p&gt;만들어 주는 도구 입니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="가상환경-설정-pyenv-virtualenv-1편"><a href="#가상환경-설정-pyenv-virtualenv-1편" class="headerlink" title="가상환경 설정 - pyenv, virtualenv 1편"></a>가상환경 설정 - pyenv, virtualenv 1편</h2><br><br><blockquote><p>virtualenv, pyenv-virtualenv </p><p>pyenv 는 다중의 파이썬 버전을 쉽게 바꿔가며 사용할수 있게 해주는 도구 입니다. </p></blockquote><br><br><h2 id="Virtualenv"><a href="#Virtualenv" class="headerlink" title="Virtualenv"></a>Virtualenv</h2><br><br><blockquote><p>virtualenv 는 분리된 파이썬 환경을 </p><p>만들어 주는 도구 입니다.</p></blockquote><br><p><br><a id="more"></a></p><p>가상환경은 각 프로젝트마다 설치된 패키지들의 충돌을 막아주기 위해서 필요합니다. </p><p>파이썬에서 기본적으로 사용되는 패키지는 virtualenv 이고, pyenv 와 같이 사용해서 <br></p><br><p>여러개의 파이썬 버전 환경을 적용한 가상환경을 생성하여 사용할수 있습니다. </p><br><br><h2 id="가상환경은-왜-필요한가"><a href="#가상환경은-왜-필요한가" class="headerlink" title="가상환경은 왜 필요한가"></a>가상환경은 왜 필요한가</h2><br><br><p>우리의 시스템에 설치된 파이썬 환경은 1개 입니다. </p><p>그런데, 우리는 여러개의 프로젝트를 진행 해야 하는 상황이 옵니다. </p><br><blockquote><p>아래 상황을 생각해 봅니다 </p></blockquote><br><ul><li>프로젝트 A 는 페키지 1, 2, 3 이 필요합니다 </li><li>프로젝트 B 는 패키지 1, 2, 4, 5 가 필요합니다 </li><li>프로젝트 C는 패키지 1만 필요합니다. </li></ul><br><p>시스템에 존재하나 1개의 파이썬 환경으로 프로젝트 A, B, C 모두 다 진행할수 있지만, <br>각 프로젝트에 딸려있는 패키지들끼리 충돌할수도 있습니다. </p><br><p>그리고, 필요하지도 않은 패키지를 모두 시스템에 설치해야하는데.. 필요하지 않은 패키지를 설치할 이유가 있을까요? </p><br><br><p><strong>프로젝트 A 를 진행할 파이썬 환경 1개</strong></p><p><strong>프로젝트 B 를 진행할 파이썬 환경 1개</strong></p><p><strong>프로젝트 C 를 진행할 파이썬 환경 1개</strong></p><br><p>이렇게 3개의 환경을 가지고 있으면 좋겠는데.. 그렇다면 PC 가 3대 있어야 하는건가요? </p><br><br><h2 id="pyenv-virtualenv-사용해서-가상환경-설정"><a href="#pyenv-virtualenv-사용해서-가상환경-설정" class="headerlink" title="pyenv, virtualenv 사용해서 가상환경 설정"></a>pyenv, virtualenv 사용해서 가상환경 설정</h2><br><p><code>pyenv</code>와 <code>virtualenv</code> 같은 라이브러리를 사용하여, 가상환경을 생성후, 별도의 시스템 환경으로 각각의 프로젝트들을 진행할수 있습니다. </p><p><br><br></p><blockquote><p>시스템에 이미 설치되어 있는 파이썬과 </p><p>분리된 가상환경을 만들어서 </p><p>각각의 프로젝트를 진행 할수 있습니다. </p></blockquote><p><br><br></p><ul><li>가상환경 A - 프로젝트A에 필요한 패키지들만 설치후, 프로젝트 A 진행 </li><li>가상환경 B - 프로젝트B에 필요한 패키지들만 설치후, 프로젝트 B 진행 </li><li>가상환경 C - 프로젝트C에 필요한 패키지들만 설치후, 프로젝트 C 진행 </li></ul><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>가상환경이 필요한 이유에 대해서 아주 짧게 알아보았습니다. </p><p><br>다음 포스팅은 라이브러리 설치 및 가상환경 설정 에 대해서 진행 합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/10/%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-pyenv-virtualenv-1%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Variable Annotations</title>
      <link>http://djangojeng-e.github.io/2020/04/10/PEP8-Variable-Annotations/</link>
      <guid>http://djangojeng-e.github.io/2020/04/10/PEP8-Variable-Annotations/</guid>
      <pubDate>Fri, 10 Apr 2020 06:34:15 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;변수-Annotations&quot;&gt;&lt;a href=&quot;#변수-Annotations&quot; class=&quot;headerlink&quot; title=&quot;변수 Annotations&quot;&gt;&lt;/a&gt;변수 Annotations&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;PEP526 에서는, 변수 주석에 대해서 소개하고 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;br&gt;변수 주석에 대한 스타일 권장사항은 함수 주석 스타일과 비슷합니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;모듈레벨에서 변수들, 클래스 그리고 인스턴스 변수들과 지역 변수들은 &lt;code&gt;:&lt;/code&gt; 뒤에 1칸 띄워줍니다&lt;/li&gt;
&lt;li&gt;콜론뒤에는 빈공간이 없어야 합니다 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;=&lt;/code&gt; 양쪽에 정확히 한칸씩 띄워줍니다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="변수-Annotations"><a href="#변수-Annotations" class="headerlink" title="변수 Annotations"></a>변수 Annotations</h2><br><br><p>PEP526 에서는, 변수 주석에 대해서 소개하고 있습니다.</p><p><br>변수 주석에 대한 스타일 권장사항은 함수 주석 스타일과 비슷합니다. </p><br><br><ul><li>모듈레벨에서 변수들, 클래스 그리고 인스턴스 변수들과 지역 변수들은 <code>:</code> 뒤에 1칸 띄워줍니다</li><li>콜론뒤에는 빈공간이 없어야 합니다 </li><li><code>=</code> 양쪽에 정확히 한칸씩 띄워줍니다</li></ul><p><br><a id="more"></a></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">code : int </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Point</span>:</span></span><br><span class="line">    coords: Tuple[int, int]</span><br><span class="line">    label: str = <span class="string">'&lt;unknown&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line">code:int<span class="comment"># 콜론 뒤에 띄어스기를 안해줬습니다 </span></span><br><span class="line">code : int<span class="comment"># 콜론 앞에 띄어쓰기가 있습니다 </span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    result: int=<span class="number">0</span><span class="comment"># = 주변에 빈공간이 없습니다</span></span><br></pre></td></tr></table></figure><br><br><p>PEP526이 python3.6 에서 적용되었다 하더라도, 변수 주석 syntax 는 모든 버전 파이썬에 <code>stub files</code> 에 적용 되기를 권장합니다.<br></p><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><br><p>이것으로 PEP8에 소개된 스타일 가이드를 전부 훑어 보았습니다. </p><p><br>아직 남아있는 <code>function annotation</code> 과 <code>variable annotation</code>은 각각 PEP484 와 PEP526 을 참조하면 됩니다. </p><br><p>484와 526의 양이 좀 방대하기 때문에, 나중에 따로 포스팅을 할 예정입니다. </p><br><p>PEP8 관련 포스팅을 하면서, 이해가 안가는 부분이 아직 많습니다. </p><br><p>아직까지는, PEP8 에 나와있는 모든것을 고민하면서 코드를 쓸 단계가 아니라서 그런것 같습니다… 코딩 공부를 좀더 진행을 해보면서, PEP8 을 끊임없이 리뷰할것이고, 수정이 필요한 포스팅은 다시 수정 될것입니다.</p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/10/PEP8-Variable-Annotations/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Function Annotations</title>
      <link>http://djangojeng-e.github.io/2020/04/10/PEP8-Function-Annotations/</link>
      <guid>http://djangojeng-e.github.io/2020/04/10/PEP8-Function-Annotations/</guid>
      <pubDate>Fri, 10 Apr 2020 06:22:45 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;함수-Annotations&quot;&gt;&lt;a href=&quot;#함수-Annotations&quot; class=&quot;headerlink&quot; title=&quot;함수 Annotations&quot;&gt;&lt;/a&gt;함수 Annotations&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Annotation&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;어노테이션은 원래 주석이나 노트 라는 뜻인데, &lt;/p&gt;
&lt;p&gt;파이썬에서 우리가 흔히 사용하는 일반 주석과는 역할이 좀 다릅니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;어노테이션은 함수나 변수에 코드를 달아서, 일반 주석과는 다른 의미나 기능을 부여합니다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;함수나 변수에 일반 주석으로는 설명이 너무 길어지거나, 정확한 설명이 불가능할때, &lt;/p&gt;
&lt;p&gt;그리고 특별한 의미를 부여하고 싶을때 Annotation 을 사용합니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;Function-Annotations&quot;&gt;&lt;a href=&quot;#Function-Annotations&quot; class=&quot;headerlink&quot; title=&quot;Function Annotations&quot;&gt;&lt;/a&gt;Function Annotations&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;이 번 포스팅은 function annotations 에 대한 포스팅 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;Annotation 은 함수에 추가로 들어가는 주석입니다. &lt;/p&gt;
&lt;p&gt;PEP484의 허용과 함께, 함수에 들어가는 주석 스타일이 바뀌고 있는 추세입니다 &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="함수-Annotations"><a href="#함수-Annotations" class="headerlink" title="함수 Annotations"></a>함수 Annotations</h2><br><br><blockquote><p><strong>Annotation</strong></p><p>어노테이션은 원래 주석이나 노트 라는 뜻인데, </p><p>파이썬에서 우리가 흔히 사용하는 일반 주석과는 역할이 좀 다릅니다. </p><br><p>어노테이션은 함수나 변수에 코드를 달아서, 일반 주석과는 다른 의미나 기능을 부여합니다. <br></p><br><p>함수나 변수에 일반 주석으로는 설명이 너무 길어지거나, 정확한 설명이 불가능할때, </p><p>그리고 특별한 의미를 부여하고 싶을때 Annotation 을 사용합니다. </p></blockquote><br><br><h2 id="Function-Annotations"><a href="#Function-Annotations" class="headerlink" title="Function Annotations"></a>Function Annotations</h2><br><p>이 번 포스팅은 function annotations 에 대한 포스팅 입니다. </p><br><p>Annotation 은 함수에 추가로 들어가는 주석입니다. </p><p>PEP484의 허용과 함께, 함수에 들어가는 주석 스타일이 바뀌고 있는 추세입니다 </p><br><a id="more"></a><br><blockquote><p>파이썬3 코드에서는, </p><p>향후 버전 호환성을 위해서 PEP484 의 syntax 를 사용하는걸 권장 합니다. </p></blockquote><br><br><h2 id="PEP484"><a href="#PEP484" class="headerlink" title="PEP484"></a>PEP484</h2><br><p>함수내에 주석 스타일 가이드는 PEP484에 나와있는 스타일 가이드가 권장 됩니다.</p><p><br>예를들면, 덩치가 큰 제3자 라이브러리를 마킹 하거나, PEP484 스타일의 <code>type</code>주석 등이 있습니다. PEP484에는 주석달기가 얼마나 쉬운지에 대한 리뷰 그리고 해당 스타일이 얼마나 코드의 이해성을 높이는지에 대한 관찰 사항들이 나와 있습니다. </p><br><p>파이썬 스탠다드 라이브러리는 주석을 받아들이는데에 보수적이어야 하지만, 주석의 사용은 새로운 코드와 큰 리펙토링에는 허용됩니다. </p><br><br><h2 id="Function-Annotation-과-다른-사용"><a href="#Function-Annotation-과-다른-사용" class="headerlink" title="Function Annotation 과 다른 사용"></a>Function Annotation 과 다른 사용</h2><br><br><blockquote><p>함수 주석과 다른 사용을 원하는 코드는, </p><p>일반 커멘트 형식을 갖습니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># type: ignore</span></span><br></pre></td></tr></table></figure><br><br><p>린터와 타입 확인자는 선택 사항이고. 별도의 도구 입니다. 파이썬 인터프러터는 기본적으로 타입 확인에 의한 메시지를 발생 시키지 않고. 함수 주석이기 때문에 코드의 동작을 바꾸지 않습니다. </p><br><p>타입 확인을 원하지 않는 사용자는, 그것을 무시해도 괜찮습니다. 하지만, 3자 라이브러리 패키지는 타입 확인자를 실행하려 할수도 있습니다. 이점을 위해 <code>PEP484</code> 는 <code>stub</code> 파일들을 사용하는것을 권장 합니다.</p><br><br><p>이전 버전 호환성이 필요한 코드들은, 타입 주석을 일반 주석 형태로 추가 할수 있습니다. (PEP484 참조) </p><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>이번 토픽은 PEP484의 소개밖에 없습니다. </p><p>PEP484 를 좀 자세히 보려 했는데. 내용이 너무 방대해서, 나중에 따로 나누어서 포스팅 해야 할것 같습니다. </p><br><br><br><br><br><br><br><br><br><br><br><br><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/10/PEP8-Function-Annotations/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo 블로그 - 네이버 웹마스터 도구 등록</title>
      <link>http://djangojeng-e.github.io/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/</link>
      <guid>http://djangojeng-e.github.io/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/</guid>
      <pubDate>Wed, 08 Apr 2020 16:32:03 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;네이버-웹마스터-회원가입-서치어드바이저&quot;&gt;&lt;a href=&quot;#네이버-웹마스터-회원가입-서치어드바이저&quot; class=&quot;headerlink&quot; title=&quot;네이버 웹마스터 회원가입 (서치어드바이저)&quot;&gt;&lt;/a&gt;네이버 웹마스터 회원가입 (서치어드바이저)&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;네이버 웹마스터툴 사이트에 접속해서. &lt;/p&gt;
&lt;p&gt;회원가입 후 로그인을 진행 합니다. (기존 네이버 아이디가 있으면, 회원가입 할 필요는 없습니다~) &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;사이트-등록&quot;&gt;&lt;a href=&quot;#사이트-등록&quot; class=&quot;headerlink&quot; title=&quot;사이트 등록&quot;&gt;&lt;/a&gt;사이트 등록&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;웹마스터 도구에 &lt;code&gt;Search Advisor&lt;/code&gt; 로 들어갑니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;들어가면, 사이트를 등록하라고 나오는데. 아래 캡쳐 화면을 참조해주세요. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="네이버-웹마스터-회원가입-서치어드바이저"><a href="#네이버-웹마스터-회원가입-서치어드바이저" class="headerlink" title="네이버 웹마스터 회원가입 (서치어드바이저)"></a>네이버 웹마스터 회원가입 (서치어드바이저)</h2><br><p>네이버 웹마스터툴 사이트에 접속해서. </p><p>회원가입 후 로그인을 진행 합니다. (기존 네이버 아이디가 있으면, 회원가입 할 필요는 없습니다~) </p><br><br><h2 id="사이트-등록"><a href="#사이트-등록" class="headerlink" title="사이트 등록"></a>사이트 등록</h2><br><br><p>웹마스터 도구에 <code>Search Advisor</code> 로 들어갑니다. </p><br><p>들어가면, 사이트를 등록하라고 나오는데. 아래 캡쳐 화면을 참조해주세요. </p><br><a id="more"></a><img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image1.png" class=""><br><br><h2 id="사이트-소유확인-진행"><a href="#사이트-소유확인-진행" class="headerlink" title="사이트 소유확인 진행"></a>사이트 소유확인 진행</h2><br><br><p>사이트의 소유 확인을 진행합니다. </p><p><br>구글 서치 콘솔때 진행 했던 방식이랑 비슷비슷하네요 ㅎㅎ </p><br><br><img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image2.png" class=""><p><br><br></p><blockquote><p>저는 HTML 태그를 블로그의 <code>&lt;head&gt;</code> 부분에 붙여서. 소유 확인을 진행 할것입니다. <br></p></blockquote><br><br><h2 id="HTML-태그를-lt-head-gt-섹션에-붙이기"><a href="#HTML-태그를-lt-head-gt-섹션에-붙이기" class="headerlink" title="HTML 태그를 &lt;head&gt;섹션에 붙이기"></a>HTML 태그를 <code>&lt;head&gt;</code>섹션에 붙이기</h2><br><br><p>처음에는 이게 정말 어려웠는데. 이제는 쉽습니다. </p><br><p>우선, 필자 기준으로 <code>blog/themes/hexo-theme-next/layout</code>블로그 폴더로 이동 합니다. </p><br><p>이 폴더에 있는 <code>_layout.swig</code>파일을 열어서, 네이버 사이트 소유확인 html 테그를 붙여 넣습니다. </p><br><p><code>blog/themes/hexo-theme-next/layout/_layout.swig</code> 파일 캡쳐 </p><br><blockquote><p><code>&lt;/head&gt;</code>태그가 있는곳 바로 위에 붙여 줍니다. </p></blockquote><br><img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image4.png" class=""><br><br><p>파일 수정이 끝났으면, 잊지않고 <code>hexo generate</code> 그리고 <code>hexo deploy</code> 를 실행해서. <br></p><p>깃헙 페이지에 배포합니다. </p><blockquote><p>소유 확인 버튼을 눌러서 진행 해줍니다 </p></blockquote><br><br><img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image3.png" class=""><br><br><p>금방 소유확인이 되는군요 ㅎㅎ </p><br><img src="/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/image5.png" class=""><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>다른거 보다가 문득 생각나서 한번 등록 해보았습니다. </p><p><br>네이버 웹마스터도 뭔가 더 기능이 있을거 같긴 한데.. 우선 등록만 이렇게 마쳐놓고.</p><p><br>나중에 더 알아보도록 하겠습니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/09/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%84%A4%EC%9D%B4%EB%B2%84-%EC%9B%B9%EB%A7%88%EC%8A%A4%ED%84%B0-%EB%8F%84%EA%B5%AC-%EB%93%B1%EB%A1%9D/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Programming Recommendations - 4편</title>
      <link>http://djangojeng-e.github.io/2020/04/09/PEP8-Programming-Recommendations-4%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/09/PEP8-Programming-Recommendations-4%ED%8E%B8/</guid>
      <pubDate>Wed, 08 Apr 2020 16:04:13 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;프로그래밍-권장사항들&quot;&gt;&lt;a href=&quot;#프로그래밍-권장사항들&quot; class=&quot;headerlink&quot; title=&quot;프로그래밍 권장사항들&quot;&gt;&lt;/a&gt;프로그래밍 권장사항들&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;불리언값의-비교는-연산자를-사용하지-않습니다&quot;&gt;&lt;a href=&quot;#불리언값의-비교는-연산자를-사용하지-않습니다&quot; class=&quot;headerlink&quot; title=&quot;불리언값의 비교는 == 연산자를 사용하지 않습니다&quot;&gt;&lt;/a&gt;불리언값의 비교는 &lt;code&gt;==&lt;/code&gt; 연산자를 사용하지 않습니다&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 좋은예 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; greetings:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 나쁜예 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; greetings == &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 틀린예 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; greeting &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="프로그래밍-권장사항들"><a href="#프로그래밍-권장사항들" class="headerlink" title="프로그래밍 권장사항들"></a>프로그래밍 권장사항들</h2><br><br><h2 id="불리언값의-비교는-연산자를-사용하지-않습니다"><a href="#불리언값의-비교는-연산자를-사용하지-않습니다" class="headerlink" title="불리언값의 비교는 == 연산자를 사용하지 않습니다"></a>불리언값의 비교는 <code>==</code> 연산자를 사용하지 않습니다</h2><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">if</span> greetings:</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">if</span> greetings == <span class="literal">True</span>:</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 틀린예 </span></span><br><span class="line"><span class="keyword">if</span> greeting <span class="keyword">is</span> <span class="literal">True</span>:</span><br></pre></td></tr></table></figure><br><p><br><a id="more"></a></p><h2 id="try-finally-안에-흐름제어-구문"><a href="#try-finally-안에-흐름제어-구문" class="headerlink" title="try..finally 안에 흐름제어 구문"></a><code>try..finally</code> 안에 흐름제어 구문</h2><br><br><p><code>try..finally</code> 에서 <code>finally</code>부분안에는 <code>return/break/continue</code> 같은 흐름제어 구문의 사용은 권장되지 않습니다. </p><br><p><code>finally</code> 안에 <code>return/break/continue</code> 같은 구문을 사용하면, 암시적으로 활성화 된 예외를 취소시키기 때문에. finally 안에 흐름제어 구문의 사용은 권장 되지 않습니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 틀린예</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="number">1</span> / <span class="number">0</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">42</span></span><br></pre></td></tr></table></figure><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><br><p>PEP8에서 얘기하는 프로그래밍 권장 사항들에 대해서 알아보았습니다. </p><br><p>프로그래밍 전반에 걸친 다양한 권장사항이고. 깊은 컨셉입니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/09/PEP8-Programming-Recommendations-4%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Programming Recommendations - 3편</title>
      <link>http://djangojeng-e.github.io/2020/04/08/PEP8-Programming-Recommendations-3%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/08/PEP8-Programming-Recommendations-3%ED%8E%B8/</guid>
      <pubDate>Wed, 08 Apr 2020 12:53:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;프로그래밍-권장사항들-3편&quot;&gt;&lt;a href=&quot;#프로그래밍-권장사항들-3편&quot; class=&quot;headerlink&quot; title=&quot;프로그래밍 권장사항들 - 3편&quot;&gt;&lt;/a&gt;프로그래밍 권장사항들 - 3편&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="프로그래밍-권장사항들-3편"><a href="#프로그래밍-권장사항들-3편" class="headerlink" title="프로그래밍 권장사항들 - 3편"></a>프로그래밍 권장사항들 - 3편</h2><br><blockquote><p>운영체체 에러를 잡아낼때에는, </p><p>파이썬 3.3 이후에서 소개된 명시적인 예외 상화관계를 사용합니다 <br></p></blockquote><br><br><h2 id="모든-try-except구문"><a href="#모든-try-except구문" class="headerlink" title="모든 try/except구문"></a>모든 <code>try/except</code>구문</h2><br><p>모든 <code>try/except</code>절에 대해 <code>try</code> 절을 필요한 최소의 코드 양으로 사용 제한을 합니다. 버그가 가려지는걸 피할수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    value = collection[key]</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="keyword">return</span> key_not_found(key)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">return</span> handle_value(value)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 너무 광범위함 </span></span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">handle_value(collection[key])</span><br><span class="line"><span class="keyword">except</span> KeyError:</span><br><span class="line">    <span class="comment"># Will also catch KeyError raised by handle_value()</span></span><br><span class="line">    <span class="keyword">return</span> key_not_found(key)</span><br></pre></td></tr></table></figure><br><br><h2 id="특정-코드-섹션에-로컬-자원"><a href="#특정-코드-섹션에-로컬-자원" class="headerlink" title="특정 코드 섹션에 로컬 자원"></a>특정 코드 섹션에 로컬 자원</h2><br><p>자원이 특정 코드 섹션에 대해 로컬로 있을때에는 <code>with</code>문을 사용하여, 사용후 빠르고 안정적으로 정리되도록 합니다. <code>try/finally</code> 구문도 허용됩니다. </p><br><h2 id="Context-Manager"><a href="#Context-Manager" class="headerlink" title="Context Manager"></a>Context Manager</h2><br><p>자원을 확보하거나 해제 하는것이 아닌 경우의 컨텍스트 메니져는 분리된 함수 혹은 메써드를 통해서 호출 되어야 합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">with</span> conn.begin_transaction():</span><br><span class="line">    do_stuff_in_transaction(conn)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">with</span> conn:</span><br><span class="line">    do_stuff_in_trnasaction(conn)</span><br></pre></td></tr></table></figure><br><p>후의 예시는, <code>__enter__</code> 및 <code>__exit__</code> 메서드가 트랜셕션 후 연결을 닫는 것 이외의 작업을 수행하고 있음을 나타내는 정보를 제공하지 않습니다. </p><p><br><br></p><p>이 경우에는 명시적인게 중요합니다. <br></p><br><h2 id="리턴-구문안에서는-일관성이-있어야-합니다"><a href="#리턴-구문안에서는-일관성이-있어야-합니다" class="headerlink" title="리턴 구문안에서는 일관성이 있어야 합니다"></a>리턴 구문안에서는 일관성이 있어야 합니다</h2><br><br><p>함수안에 모든 리턴 구문은 수식을 반환해야 합니다. 만약 어떤 리턴 구문이 수식을 반환할때. 어떠한 값이 없는 리턴 구문은 명시적으로, <code>return None</code> 이라고 해주어야 합니다. </p><br><p>그리고, 명시적인 리턴 구문은 함수의 마지막에 존재해야 합니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">None</span> </span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> math.sqrt(x)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> </span><br><span class="line">    <span class="keyword">return</span> math.sqrt(x)</span><br></pre></td></tr></table></figure><br><br><h2 id="문자열-모듈보다는-문자열-메써드-사용"><a href="#문자열-모듈보다는-문자열-메써드-사용" class="headerlink" title="문자열 모듈보다는 문자열 메써드 사용"></a>문자열 모듈보다는 문자열 메써드 사용</h2><br><p>문자열 메써드는 언제나 빠르고, 유니코드 문자와 함께 같은 API 를 공유합니다.</p><br><br><h2 id="startswith-와-endwith"><a href="#startswith-와-endwith" class="headerlink" title="startswith() 와  endwith()"></a><code>startswith()</code> 와  <code>endwith()</code></h2><br><br><p>접두사와 접미사를 확인하기 위해서는, 문자열 슬라이싱 보다 <code>startswith()</code>와 <code>endwith()</code> 를 사용합니다. </p><p><br><code>startswith()</code>와 <code>endswith()</code>가 더 깔끔하고 에러가 적습니다. </p><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 좋은예 </span><br><span class="line">if foo.startswith(&#39;bar&#39;):</span><br><span class="line"></span><br><span class="line"># 나쁜예 </span><br><span class="line">if foo[:3] &#x3D;&#x3D; &#39;bar&#39;</span><br></pre></td></tr></table></figure><br><br><h2 id="객체-타입-비교는-isinstance-사용"><a href="#객체-타입-비교는-isinstance-사용" class="headerlink" title="객체 타입 비교는 isinstance() 사용"></a>객체 타입 비교는 <code>isinstance()</code> 사용</h2><br><br><p>객체 타입 비교를 할때는, 직접 타입 비교를 하기 보다는 <code>isinstance()</code>를 사용합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">if</span> isinstance(obj, int);</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">if</span> type(obj) <span class="keyword">is</span> type(<span class="number">1</span>):</span><br></pre></td></tr></table></figure><br><br><p>객체가 문자열인지 아닌지 확인할때에는, 그것이 유니코드 문자열일수도 있다는것을 염두해 두세요. <br></p><p>파이썬2 에서는, <code>str</code>과 <code>unicode</code>는 같은 베이스 클래스, <code>basestring</code>을 가지고 있습니다. <br><br></p><p>따라서, 아래와 같이 쓸수 있습니다. <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python2 </span></span><br><span class="line"><span class="keyword">if</span> isinstance(obj, basestring)</span><br></pre></td></tr></table></figure><br><br><p>파이썬3 에서는, <code>unicode</code>와 <code>basestring</code>은 존재하지 않습니다. <code>str</code>만 존재하고</p><p><code>bytes</code>객체는 더이상 문자열 종류가 아닙니다.  <br></p><br><h2 id="시퀀스들-문자열-리스트-튜플-빈-시퀀스는-False-를-반환합니다"><a href="#시퀀스들-문자열-리스트-튜플-빈-시퀀스는-False-를-반환합니다" class="headerlink" title="시퀀스들(문자열, 리스트, 튜플) 빈 시퀀스는 False 를 반환합니다"></a>시퀀스들(문자열, 리스트, 튜플) 빈 시퀀스는 False 를 반환합니다</h2><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> seq:</span><br><span class="line"><span class="keyword">if</span> seq:</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">if</span> len(seq):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> len(seq):</span><br></pre></td></tr></table></figure><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><br><p>프로그래밍 권장 사항들이 꽤 많네요. </p><p><br>나머지 권장 사항들은 다음 포스팅에 이어서 쓰겠습니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/08/PEP8-Programming-Recommendations-3%ED%8E%B8/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
