<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Sun, 25 Oct 2020 02:00:35 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Python 기초 3편 - print 함수</title>
      <link>http://djangojeng-e.github.io/2020/10/25/Python-%EA%B8%B0%EC%B4%88-3%ED%8E%B8-print-%ED%95%A8%EC%88%98/</link>
      <guid>http://djangojeng-e.github.io/2020/10/25/Python-%EA%B8%B0%EC%B4%88-3%ED%8E%B8-print-%ED%95%A8%EC%88%98/</guid>
      <pubDate>Sun, 25 Oct 2020 01:21:55 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-print&quot;&gt;&lt;a href=&quot;#Python-print&quot; class=&quot;headerlink&quot; title=&quot;Python - print()&quot;&gt;&lt;/a&gt;Python - &lt;code&gt;print()&lt;/code&gt;&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;print-함수&quot;&gt;&lt;a href=&quot;#print-함수&quot; class=&quot;headerlink&quot; title=&quot;print 함수&quot;&gt;&lt;/a&gt;print 함수&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;print 문은 &lt;code&gt;print()&lt;/code&gt; 함수로 대체 되었습니다. 키워드 인자들은, 이전 프린트문의 특수 문법들을 대체 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;print문은 아래와 같은 방식으로 사용될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good Morning&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good&quot;&lt;/span&gt;, &amp;lt;문자열을 가지고 있는 변수&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good&quot;&lt;/span&gt;, &amp;lt;문자열을 가지고 있는 변수&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good %s&quot;&lt;/span&gt; % &amp;lt;문자열을 가지고 있는 변수&amp;gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 예) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# a 는 abc 라는 문자열을 가지고 있는 변수 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;good&#39;&lt;/span&gt;, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;good&#39;&lt;/span&gt; + a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;good %S&#39;&lt;/span&gt; % a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;h3 id=&quot;문자열-포매팅&quot;&gt;&lt;a href=&quot;#문자열-포매팅&quot; class=&quot;headerlink&quot; title=&quot;문자열 포매팅&quot;&gt;&lt;/a&gt;문자열 포매팅&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;추가적으로 문자열 포매팅이 중요한데. 문자열에 출력될 변수를, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt; 에 넣어서 출력할수도 있습니다&lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;text = &lt;span class=&quot;string&quot;&gt;&#39;django_bro&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Hey! %s&quot;&lt;/span&gt;, text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;f&#39;Hey! &lt;span class=&quot;subst&quot;&gt;&amp;#123;text&amp;#125;&lt;/span&gt;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Hey! &amp;#123;&amp;#125;&#39;&lt;/span&gt;.format(text))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;파이썬에서 문자열은, &lt;/p&gt;
&lt;p&gt;외따옴표, 쌍따옴표, 혹은 따옴표 3개로 감싸서 문자열로 사용할수 있습니다.&lt;/p&gt;
&lt;p&gt;문자열을 표현하기 위해서 사용되는 따옴표의 종류는 어떤것을 사용해도 상관이 없습니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-print"><a href="#Python-print" class="headerlink" title="Python - print()"></a>Python - <code>print()</code></h2><br><br><h2 id="print-함수"><a href="#print-함수" class="headerlink" title="print 함수"></a>print 함수</h2><br><p>print 문은 <code>print()</code> 함수로 대체 되었습니다. 키워드 인자들은, 이전 프린트문의 특수 문법들을 대체 합니다. </p><br><p>print문은 아래와 같은 방식으로 사용될수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Good Morning"</span>)</span><br><span class="line">print(<span class="string">"Good"</span>, &lt;문자열을 가지고 있는 변수&gt;)</span><br><span class="line">print(<span class="string">"Good"</span>, &lt;문자열을 가지고 있는 변수&gt;)</span><br><span class="line">print(<span class="string">"Good %s"</span> % &lt;문자열을 가지고 있는 변수&gt; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 예) </span></span><br><span class="line">a = <span class="string">'abc'</span></span><br><span class="line"><span class="comment"># a 는 abc 라는 문자열을 가지고 있는 변수 </span></span><br><span class="line">print(<span class="string">'good'</span>, a)</span><br><span class="line">print(<span class="string">'good'</span> + a)</span><br><span class="line">print(<span class="string">'good %S'</span> % a)</span><br></pre></td></tr></table></figure><br><h3 id="문자열-포매팅"><a href="#문자열-포매팅" class="headerlink" title="문자열 포매팅"></a>문자열 포매팅</h3><br><p>추가적으로 문자열 포매팅이 중요한데. 문자열에 출력될 변수를, <code>%</code>, <code>{}</code> 에 넣어서 출력할수도 있습니다</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'django_bro'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Hey! %s"</span>, text)</span><br><span class="line">print(<span class="string">f'Hey! <span class="subst">&#123;text&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">'Hey! &#123;&#125;'</span>.format(text))</span><br></pre></td></tr></table></figure><br><br><blockquote><p>파이썬에서 문자열은, </p><p>외따옴표, 쌍따옴표, 혹은 따옴표 3개로 감싸서 문자열로 사용할수 있습니다.</p><p>문자열을 표현하기 위해서 사용되는 따옴표의 종류는 어떤것을 사용해도 상관이 없습니다.  </p></blockquote><br><a id="more"></a><p>하지만, 보통 아래와 같은 방식으로 사용합니다. </p><br><table><thead><tr><th>따옴표</th><th>표현 문자열</th></tr></thead><tbody><tr><td>‘</td><td>하나의 단어 혹은 하나의 문자를 선언하기 위해 사용</td></tr><tr><td>“</td><td>하나의 줄을 선언하기 위해 사용</td></tr><tr><td>‘’’ 혹은 “””</td><td>파라그래프 / 문단 / 다수의 줄을 선언하기 위해 사용</td></tr></tbody></table><br><p>아래 코드들이 출력하는것은 모두 같습니다. 따옴표 사용의 차이는 없지만, 따옴표 안에 같은 따옴표가 있으면 에러가 발생 합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 외 따옴표 사용 </span></span><br><span class="line">print(<span class="string">'파이썬은 매우 간단합니다!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 쌍 따옴표 사용 </span></span><br><span class="line">print(<span class="string">"파이썬은 매우 간단합니다!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 외따옴표 3개 사용 </span></span><br><span class="line">print(<span class="string">'''파이썬은 매우 간단합니다!'''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 쌍따옴표 3개 사용 </span></span><br><span class="line">print(<span class="string">"""파이썬은 매우 간단합니다!"""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 에러가 나는 경우, invalid syntax  </span></span><br><span class="line"><span class="comment"># 외 따옴표 안에 외 따옴표가 다시 사용되었음 </span></span><br><span class="line">print(<span class="string">'파이썬은 '</span>매우<span class="string">' 간단합니다!'</span>)   </span><br><span class="line">      </span><br><span class="line"><span class="comment"># 에러가 나는 경우2, invalid syntax</span></span><br><span class="line"><span class="comment"># 쌍따옴표 안에 쌍 따옴표가 다시 사용됨, 에러를 발생 </span></span><br><span class="line">print(<span class="string">"파이썬은 "</span>매우<span class="string">" 간단합니다!"</span>)</span><br></pre></td></tr></table></figure><br><br><h2 id="변수-사용"><a href="#변수-사용" class="headerlink" title="변수 사용"></a>변수 사용</h2><br><p>문자열들은 변수에 할당되고, print 문은 사용될때에 호출되어 사용될수 있습니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Wel'</span></span><br><span class="line">print(str1, <span class="string">'come'</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Welcome'</span></span><br><span class="line">str2 = <span class="string">'Python'</span></span><br><span class="line">print(str1, str2)</span><br></pre></td></tr></table></figure><br><h2 id="String-Concatenation-문자열-합치기"><a href="#String-Concatenation-문자열-합치기" class="headerlink" title="String Concatenation (문자열 합치기)"></a>String Concatenation (문자열 합치기)</h2><br><p>string concatenation 은 두개의 문자열을 더하는것입니다. 문자열을 <code>+</code> 를 사용해서 다해주면, 문자열 사이에 공백이 없습니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Python'</span></span><br><span class="line">str2 = <span class="string">':'</span></span><br><span class="line">print(<span class="string">'Welcome'</span> + str1 + str2)</span><br><span class="line"><span class="comment"># () 안에 있는 모든 문자열들이 합쳐져서 출력될겁니다.</span></span><br></pre></td></tr></table></figure><br><h2 id="문자열로-사용하기"><a href="#문자열로-사용하기" class="headerlink" title="문자열로 사용하기"></a>문자열로 사용하기</h2><br><p><code>%</code> 는 문자열을 포함하고 있는 변수를 참조할때 사용됩니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">' Python'</span></span><br><span class="line">print(<span class="string">"Welcome %s"</span> % str1)</span><br></pre></td></tr></table></figure><br><blockquote><p>다른 데이터 타입들도 사용할수 있습니다 </p></blockquote><br><table><thead><tr><th>문자</th><th>데이터타입</th></tr></thead><tbody><tr><td>%d</td><td>정수</td></tr><tr><td>%e</td><td>지수</td></tr><tr><td>%f</td><td>실수</td></tr><tr><td>%o</td><td>Octal 8진수</td></tr><tr><td>%x</td><td>Hexadecimal 16진수</td></tr></tbody></table><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정수를 사용하는 경우 </span></span><br><span class="line">print(<span class="string">"Actual Number = %d"</span> % <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 지수를 사용 </span></span><br><span class="line">print(<span class="string">"Exponential equivalent of the number = %e"</span> %<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 실수를 사용 </span></span><br><span class="line">print(<span class="string">'Float of the number = %f'</span> %<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8진수 사용 </span></span><br><span class="line">print(<span class="string">"Octal Equivalent of the number = %o"</span> %<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 16진수 사용 </span></span><br><span class="line">print(<span class="string">"Octal equivalent of the number = %x"</span> %<span class="number">15</span>)</span><br></pre></td></tr></table></figure><br><h3 id="다수의-변수들을-사용"><a href="#다수의-변수들을-사용" class="headerlink" title="다수의 변수들을 사용"></a>다수의 변수들을 사용</h3><br><p>다수의 변수들을 참조할때에는 괄호가 사용됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'World'</span></span><br><span class="line">str2 = <span class="string">':'</span></span><br><span class="line">print(<span class="string">"Python %s %s"</span> % (str1, str2))</span><br></pre></td></tr></table></figure><br><h3 id="프린트-문의-다른-예시들"><a href="#프린트-문의-다른-예시들" class="headerlink" title="프린트 문의 다른 예시들"></a>프린트 문의 다른 예시들</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %는 %d 타입 단어를 위해 사용된다 </span></span><br><span class="line">print(<span class="string">"Welcome to %%Python %s"</span> %<span class="string">'language'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \n 은 줄바꿈을 위해서 사용됩니다 </span></span><br><span class="line">print(<span class="string">"Sunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 어떤 단어를 여러번 출력하고 싶을때 </span></span><br><span class="line">print(<span class="string">'django'</span> * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \t 는 tab키를 위해 사용됩니다 </span></span><br><span class="line">print(<span class="string">"""</span></span><br><span class="line"><span class="string">Language:</span></span><br><span class="line"><span class="string">\t1 Python</span></span><br><span class="line"><span class="string">\t2 Java\n\t3 JavaScript"""</span>)</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="Precision-width-and-Field-width"><a href="#Precision-width-and-Field-width" class="headerlink" title="Precision width and Field width"></a>Precision width and Field width</h3><br><p>Field Width 는 숫자 전체의 넓이 이고, precision 은 우측을 향한 넓이 입니다. </p><p><br>요구 사항에 따라 이는 조정 될수 있습니다. </p><br><p>기본 precision width 는 6 으로 설정 되어 있습니다. <br></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># precision width and field width </span></span><br><span class="line"><span class="comment"># 6 번째 소숫점 까지 반환 됩니다 </span></span><br><span class="line"><span class="comment"># 이 소숫점 자리수를 지정하기 위해서는, </span></span><br><span class="line"><span class="comment"># %(fieldwidth).(precisionwidth)f 가 사용됩니다. </span></span><br><span class="line">print(<span class="string">"%f"</span> % <span class="number">5.1234567890</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 소수점 5자리까지만 반환 하고 싶을 경우</span></span><br><span class="line">print(<span class="string">"%.5f"</span> %<span class="number">5.1234567890</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 만약 field width 가 필요 이상으로 지정되어 있을경우, </span></span><br><span class="line"><span class="comment"># 데이터 오른쪽은 특정 값쪽으로 스스로 조정 됩니다 </span></span><br><span class="line">print(<span class="string">"%9.5f"</span> %<span class="number">5.1234567890</span>)</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 0 을 추가하여, padding 값을 0으로 만들수 있습니다. </span></span><br><span class="line">print(<span class="string">"%015.5f"</span> % <span class="number">5.1234567890</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 올바른 정렬을 위해, 필드 너비에 공백을 비워 두어 음수를 사용할때에 </span></span><br><span class="line"><span class="comment"># 적절한 정렬이 유지 됩니다 </span></span><br><span class="line">print(<span class="string">"% 9f"</span> % <span class="number">5.1234567890</span>)</span><br><span class="line">print(<span class="string">"% 9f"</span> % <span class="number">5.1234567890</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/25/Python-%EA%B8%B0%EC%B4%88-3%ED%8E%B8-print-%ED%95%A8%EC%88%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 2편 - Syntax</title>
      <link>http://djangojeng-e.github.io/2020/10/24/Python-%EA%B8%B0%EC%B4%88-2%ED%8E%B8-Syntax/</link>
      <guid>http://djangojeng-e.github.io/2020/10/24/Python-%EA%B8%B0%EC%B4%88-2%ED%8E%B8-Syntax/</guid>
      <pubDate>Sat, 24 Oct 2020 07:28:14 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-Syntax-문법-구문&quot;&gt;&lt;a href=&quot;#Python-Syntax-문법-구문&quot; class=&quot;headerlink&quot; title=&quot;Python Syntax (문법, 구문)&quot;&gt;&lt;/a&gt;Python Syntax (문법, 구문)&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;파이썬 프로그램은, parser 로 읽어집니다 &lt;/p&gt;
&lt;p&gt;파이썬은 매우 읽기 편한 언어가 되기 위해서 디자인 되었습니다. &lt;/p&gt;
&lt;p&gt;파이썬 프로그래밍 언어의 문법은, 어떻게 파이썬 프로그래밍이 작성되어야 할지에 대한 규칙을 다룹니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;Python-Line-Structure-줄구조&quot;&gt;&lt;a href=&quot;#Python-Line-Structure-줄구조&quot; class=&quot;headerlink&quot; title=&quot;Python Line Structure (줄구조)&quot;&gt;&lt;/a&gt;Python Line Structure (줄구조)&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬 프로그램은 여러개의 논리적 줄들로 나누어져 있고, 각 논리적 줄은, NEWLINE 토큰에 의해서 종료 됩니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;논리적 줄은, 하나 혹은 그 이상의 줄들로 부터 생성 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;하나의 줄은, 공백, 탭, 주석같은 formfeed 로 이루어질수 있고, 비어있는 줄은 인터프리터가 무시합니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(&lt;span class=&quot;string&quot;&gt;&#39;이 세줄은 물리적 / 논리적 줄들 입니다.&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;파이썬에서-주석-comments&quot;&gt;&lt;a href=&quot;#파이썬에서-주석-comments&quot; class=&quot;headerlink&quot; title=&quot;파이썬에서 주석 (comments)&quot;&gt;&lt;/a&gt;파이썬에서 주석 (comments)&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬에서 주석은, 문자열로 치지 않는 # 으로 시작하고, 물리적으로 한줄의 끝에서 끝납니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;# 뒤의 모든 케릭터들은 주석의 부분이고, 파이썬 인터프리터는 이들을 실행하지 않고 무시합니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;아래 예시를 들어봅니다. 참고로, 파이썬에서 다수의 줄 혹은 블럭으로 된 주석은 존재하지 않습니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;x = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# x 의 초기값은 1 입니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; x &amp;gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	print(&lt;span class=&quot;string&quot;&gt;&#39;두번째 줄은 주석입니다&#39;&lt;/span&gt;)   &lt;span class=&quot;comment&quot;&gt;# 문자열을 출력합니다 (이것도 주석입니다!)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Syntax-문법-구문"><a href="#Python-Syntax-문법-구문" class="headerlink" title="Python Syntax (문법, 구문)"></a>Python Syntax (문법, 구문)</h2><br><blockquote><p>파이썬 프로그램은, parser 로 읽어집니다 </p><p>파이썬은 매우 읽기 편한 언어가 되기 위해서 디자인 되었습니다. </p><p>파이썬 프로그래밍 언어의 문법은, 어떻게 파이썬 프로그래밍이 작성되어야 할지에 대한 규칙을 다룹니다 </p></blockquote><br><br><h2 id="Python-Line-Structure-줄구조"><a href="#Python-Line-Structure-줄구조" class="headerlink" title="Python Line Structure (줄구조)"></a>Python Line Structure (줄구조)</h2><br><p>파이썬 프로그램은 여러개의 논리적 줄들로 나누어져 있고, 각 논리적 줄은, NEWLINE 토큰에 의해서 종료 됩니다. </p><p><br>논리적 줄은, 하나 혹은 그 이상의 줄들로 부터 생성 됩니다. </p><br><p>하나의 줄은, 공백, 탭, 주석같은 formfeed 로 이루어질수 있고, 비어있는 줄은 인터프리터가 무시합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'이 세줄은 물리적 / 논리적 줄들 입니다.'</span>)</span><br></pre></td></tr></table></figure><br><br><h2 id="파이썬에서-주석-comments"><a href="#파이썬에서-주석-comments" class="headerlink" title="파이썬에서 주석 (comments)"></a>파이썬에서 주석 (comments)</h2><br><p>파이썬에서 주석은, 문자열로 치지 않는 # 으로 시작하고, 물리적으로 한줄의 끝에서 끝납니다. </p><p><br># 뒤의 모든 케릭터들은 주석의 부분이고, 파이썬 인터프리터는 이들을 실행하지 않고 무시합니다. </p><br><br><p>아래 예시를 들어봅니다. 참고로, 파이썬에서 다수의 줄 혹은 블럭으로 된 주석은 존재하지 않습니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> </span><br><span class="line"><span class="comment"># x 의 초기값은 1 입니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">print(<span class="string">'두번째 줄은 주석입니다'</span>)   <span class="comment"># 문자열을 출력합니다 (이것도 주석입니다!)</span></span><br></pre></td></tr></table></figure><br><a id="more"></a> <h2 id="두개의-줄-합치기"><a href="#두개의-줄-합치기" class="headerlink" title="두개의 줄 합치기"></a>두개의 줄 합치기</h2><br><p>만약 하나의 줄에 상대적으로 긴 코드를 작성하고 싶으면, <code>\</code> 백슬래쉬를 사용하여, 논리적 줄을 두개 혹은 다수의 줄로 나눌수 있습니다. 따라서, 한줄이 <code>\</code> 로 끝나고, 문자열의 부분 혹은 주석이 아니라면, 다음줄로 이어지는 줄로 볼수 있습니다. </p><br><p>예시를 들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">u = <span class="number">0</span></span><br><span class="line">v = <span class="number">1</span> </span><br><span class="line">w = <span class="number">2</span> </span><br><span class="line">x = <span class="number">3</span> </span><br><span class="line">y = <span class="number">4</span> </span><br><span class="line">z = <span class="number">5</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> u == <span class="number">0</span> <span class="keyword">and</span> v &gt; <span class="number">0</span> \ </span><br><span class="line">    <span class="keyword">and</span> w &gt; <span class="number">1</span> <span class="keyword">and</span> x &gt;<span class="number">2</span> \ </span><br><span class="line">    <span class="keyword">and</span> y &gt; <span class="number">3</span> <span class="keyword">and</span> z &gt; <span class="number">4</span>:</span><br><span class="line">        print(<span class="string">"이것이 줄들을 합치는 예시입니다"</span>)</span><br></pre></td></tr></table></figure><br><h2 id="다수의-statements-한줄에-작성하기"><a href="#다수의-statements-한줄에-작성하기" class="headerlink" title="다수의 statements 한줄에 작성하기"></a>다수의 statements 한줄에 작성하기</h2><br><p>두개의 다른 statements 를 세미콜론 <code>;</code> 을 두개의 줄 사이에 사용하여 이어줄수 있습니다. </p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">print(&#39;statement 1 &#39;)</span><br><span class="line">print(&#39;statement 2 &#39;)</span><br><span class="line"></span><br><span class="line"># ; 세미콜론을 두개의 줄 사이에 사용하여, 아래처럼 합쳐놓을수 있습니다. </span><br><span class="line"></span><br><span class="line">print(&#39;statement 1 &#39;);print(&#39;statement 2 &#39;)</span><br></pre></td></tr></table></figure><br><br><h2 id="들여쓰기"><a href="#들여쓰기" class="headerlink" title="들여쓰기"></a>들여쓰기</h2><br><p>파이썬은 C 나 C++ 에서 ({}) 처럼, 클래스, 함수 혹은 제어문 프로그램 블럭을 정의하기 위해서 공백을 사용합니다. </p><p><br>들여쓰기에서 공백의 수는 (스페이스 와 탭 ) 정해지지 않았습니다. 하지만, 블럭안에 모든 statement 들은 같은 양의 들여쓰기가 되어 있어야 합니다. </p><br><blockquote><p>들여쓰기는 보통 4칸의 공백으로 되어야 합니다 </p></blockquote><br><p>아래 예시에서는, statement 들이 들여쓰기가 되어 있지 않습니다. 이는 문법 에러를 발생시킵니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">print(<span class="string">'이 statement 는 들여쓰기가 안되었습니다'</span>)</span><br><span class="line">print(<span class="string">'이 statement 는 들여쓰기가 안되었습니다'</span>)</span><br></pre></td></tr></table></figure><br><p>아래 예시에서는, 4칸 들여쓰기를 해주었습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">1</span> </span><br><span class="line"><span class="keyword">if</span> x &gt; <span class="number">0</span>:</span><br><span class="line">    print(<span class="string">'이 줄은, 4칸 들여쓰기가 되어 있습니다'</span>)</span><br><span class="line">    print(<span class="string">'에러를 발생시키지 않습니다 '</span>)</span><br></pre></td></tr></table></figure><br><br><h2 id="파이썬-코딩-스타일"><a href="#파이썬-코딩-스타일" class="headerlink" title="파이썬 코딩 스타일"></a>파이썬 코딩 스타일</h2><br><ul><li><p>들여쓰기 마다, 4칸의 공백을 사용합니다 </p></li><li><p>공백과 tab 을 혼용하여 사용하지 않습니다 </p></li><li><p>한줄의 최대 길이는, 79 케릭터입니다. 이는 작은 디스플레이를 가진 사용자들을 도와줍니다 </p></li><li><p>가장 상위의 함수와 클래스 정의들 사이에는 두칸의 빈줄들을 사용하여, 구분을 해줍니다. 함수와 클래스 내부의 메서드 정의들과 큰 단위의 코드 블럭들 사이에는 한칸의 빈줄을 사용하여 구분해 줍니다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 가장 최 상위에 있는 A 와 B 클래스 끼리는 두칸의 빈줄들을 사용하여 구분을 해줍니다 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">abc</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">fge</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 클래스 C 내부에 있는 abc 와 fge 함수끼리는 한칸의 빈줄을 사용하여 구분 해줍니다. </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></li></ul><br><ul><li>가능하다면, 주석은 인라인으로 처리합니다 </li><li>exrpression 과 statement 주변에 공백을 사용합니다 </li></ul><br><h2 id="파이썬-예약어"><a href="#파이썬-예약어" class="headerlink" title="파이썬 예약어"></a>파이썬 예약어</h2><br><p>아래 식별자들은 파이썬 안에서 예약된 단어들입니다. 이 단어들은, 일반적인 식별자로 사용될수 없습니다. (예, 변수명, 클래스명, 함수명 등등 )</p><br><table><thead><tr><th>False</th><th>class</th><th>finally</th><th>is</th><th>return</th></tr></thead><tbody><tr><td>None</td><td>continue</td><td>for</td><td>lambda</td><td>try</td></tr><tr><td>True</td><td>def</td><td>from</td><td>nonlocal</td><td>while</td></tr><tr><td>and</td><td>del</td><td>global</td><td>not</td><td>with</td></tr><tr><td>as</td><td>el</td><td>if</td><td>or</td><td>yield</td></tr><tr><td>assert</td><td>else</td><td>import</td><td>pass</td><td></td></tr><tr><td>break</td><td>except</td><td>in</td><td>raise</td><td></td></tr></tbody></table><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/24/Python-%EA%B8%B0%EC%B4%88-2%ED%8E%B8-Syntax/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 1 편 - 기본 사항들</title>
      <link>http://djangojeng-e.github.io/2020/10/23/Python-%EA%B8%B0%EC%B4%88-1-%ED%8E%B8-%EA%B8%B0%EB%B3%B8-%EC%82%AC%ED%95%AD%EB%93%A4/</link>
      <guid>http://djangojeng-e.github.io/2020/10/23/Python-%EA%B8%B0%EC%B4%88-1-%ED%8E%B8-%EA%B8%B0%EB%B3%B8-%EC%82%AC%ED%95%AD%EB%93%A4/</guid>
      <pubDate>Fri, 23 Oct 2020 09:57:19 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;What-is-Python&quot;&gt;&lt;a href=&quot;#What-is-Python&quot; class=&quot;headerlink&quot; title=&quot;What is Python?&quot;&gt;&lt;/a&gt;What is Python?&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Python-이-무엇인가요&quot;&gt;&lt;a href=&quot;#Python-이-무엇인가요&quot; class=&quot;headerlink&quot; title=&quot;Python 이 무엇인가요?&quot;&gt;&lt;/a&gt;Python 이 무엇인가요?&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;파이썬은 오픈소스로 개발된 객체 지향 프로그래밍 언어로, 고등 레벨의 강력한 프로그래밍 언어 입니다. Guido Van Rossum 에 의해서 1990년대 초반에 개발되었고, Monty Python 을 따라서 이름 지어졌습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬은, 많은 unix 계열에서 실행되고, Mac 과 Windows 2000 대 이후 버전에서도 실행 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬은, &lt;a href=&quot;http://www.python.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.python.org&lt;/a&gt; 에서 다운로드 가능합니다. &lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Python-프로그램은&quot;&gt;&lt;a href=&quot;#Python-프로그램은&quot; class=&quot;headerlink&quot; title=&quot;Python 프로그램은&quot;&gt;&lt;/a&gt;Python 프로그램은&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬 프로그램들은 모듈들로 이루어져 있습니다. 하나의 &lt;code&gt;모듈&lt;/code&gt;은 &lt;code&gt;statement&lt;/code&gt; 들을 포함하고 있고, &lt;code&gt;statement&lt;/code&gt; 는 &lt;code&gt;expressions&lt;/code&gt; 을 가지고 있습니다.  &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;Module &amp;gt; Statements &amp;gt; Expressions&lt;/code&gt; &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬에서뿐만 아니라, 자주자주 나오는 컨셉인, &lt;code&gt;statements&lt;/code&gt; 와 &lt;code&gt;expressions&lt;/code&gt; 에 대해서 알아보자면, &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Expressions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;수식, 연산식 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Statements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;실행 가능한 (executable) 코드 조각, 무엇인가를 실행하는 코드의 조각 이라고 보면 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;스택오버플로우에서 검색해 보면, 아래 예시가 나옵니다 &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="What-is-Python"><a href="#What-is-Python" class="headerlink" title="What is Python?"></a>What is Python?</h2><br><h3 id="Python-이-무엇인가요"><a href="#Python-이-무엇인가요" class="headerlink" title="Python 이 무엇인가요?"></a>Python 이 무엇인가요?</h3><br><p>파이썬은 오픈소스로 개발된 객체 지향 프로그래밍 언어로, 고등 레벨의 강력한 프로그래밍 언어 입니다. Guido Van Rossum 에 의해서 1990년대 초반에 개발되었고, Monty Python 을 따라서 이름 지어졌습니다. </p><br><p>파이썬은, 많은 unix 계열에서 실행되고, Mac 과 Windows 2000 대 이후 버전에서도 실행 됩니다. </p><br><p>파이썬은, <a href="http://www.python.org" target="_blank" rel="noopener">http://www.python.org</a> 에서 다운로드 가능합니다. </p><br><h2 id="Python-프로그램은"><a href="#Python-프로그램은" class="headerlink" title="Python 프로그램은"></a>Python 프로그램은</h2><br><p>파이썬 프로그램들은 모듈들로 이루어져 있습니다. 하나의 <code>모듈</code>은 <code>statement</code> 들을 포함하고 있고, <code>statement</code> 는 <code>expressions</code> 을 가지고 있습니다.  </p><br><p><code>Module &gt; Statements &gt; Expressions</code> </p><br><p>파이썬에서뿐만 아니라, 자주자주 나오는 컨셉인, <code>statements</code> 와 <code>expressions</code> 에 대해서 알아보자면, </p><br><blockquote><p><strong>Expressions</strong></p><p>수식, 연산식 </p></blockquote><br><blockquote><p><strong>Statements</strong></p><p>실행 가능한 (executable) 코드 조각, 무엇인가를 실행하는 코드의 조각 이라고 보면 됩니다. </p></blockquote><br><p>스택오버플로우에서 검색해 보면, 아래 예시가 나옵니다 </p><br><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x + <span class="number">2</span>   <span class="comment"># Expression </span></span><br><span class="line">x = <span class="number">1</span>   <span class="comment"># Statement </span></span><br><span class="line"></span><br><span class="line">y = x + <span class="number">1</span>  <span class="comment"># Statement </span></span><br><span class="line"></span><br><span class="line">print(y)   <span class="comment"># Statement</span></span><br></pre></td></tr></table></figure><br><p>위 예시를 통해서 유추해 보면, expression  은 단순히 어떠한 값을 계산하는 수식이고. 어떠한 동작도 하지 않고, 해당 값을 표현하는 코드 입니다. </p><br><p>하지만, <code>statement</code> 는 이러한 <code>expression</code> 으로 표현된 값들을 가지고, 어떠한 행동을 취하는 코드입니다. 위의 예시에서 보면,</p><br><ul><li><code>x=1</code> 은, x 라는 변수에, 1 이라는 값을 할당 합니다 </li><li><code>y = x + 1</code> 은, <code>x + 1</code> 로 표현된 값을, <code>y</code> 라는 변수에 할당합니다 </li><li><code>print(y)</code> 는, y 의 값을 출력하는 동작을 합니다.  </li></ul><br><p>따라서, 위 3개의 예시는 모두 어떠한 동작을 하는 statement 입니다. 반면에, expression 은 값을 표현하는 단위로만 사용됩니다. statement 는 여러개의 expression 을 가지고 있을수 있고, 이것들을 가지고 어떠한 작업을 수행하는데 사용합니다. </p><br><h2 id="Python-의-특징"><a href="#Python-의-특징" class="headerlink" title="Python 의 특징"></a>Python 의 특징</h2><br><ol><li>Open Source (무료)</li><li>배우기 쉽다 (다른 프로그래밍 언어에 비해서 쉬울수 있다)</li><li>고등 수준의 언어이다 </li><li>범용성이 넓다 </li><li>객체 지향 언어 </li><li>상호 작용이 가능 </li><li>Interpreted 언어 이다 </li></ol><br><h2 id="Python-의-역사"><a href="#Python-의-역사" class="headerlink" title="Python 의 역사"></a>Python 의 역사</h2><br><p>파이썬이라는 이름은, “Monty Python’s Flying Circus” 먼티 파이썬의 플라잉 서커스 라는, 1969년부터 1974년 까지 Monty Python 이라는 코메디 그룹에 의해서 방영된 영국 스케치 코미디 시리즈에서 따온 이름입니다 <br></p><p>파이썬은 1990년대초, Guido Van Rossum 에 의해서, 네덜란드 국립 수학 컴퓨터 사이언스 리서치 기관에서 개발 되었습니다. </p><br><p>파이썬은, ABC 라는 언어의 후계자로써 만들어 졌고, 1991년도에 대중들에게 배포 되었습니다. <br></p><p>시간이 흐르면서, 많은 사용자 커뮤니티들이 언어 개발에 기여를 하였음에도 불구하고, Guido 는 파이썬의 기본 작성자로 남아 있습니다.<br></p><p>1991년도와 2001년도 사이에 여러번의 버전 배포가 있었고, 거의 모든 파이썬 배포판은 오픈 소스 입니다.<br></p><br><h2 id="Python-의-주-사용처"><a href="#Python-의-주-사용처" class="headerlink" title="Python 의 주 사용처"></a>Python 의 주 사용처</h2><br><ul><li>시스템 유틸리티 (시스템 어드민 도구, 커맨드 라인 프로그램들)</li><li>웹 개발 </li><li>GUI (Graphical User Interfaces)</li><li>인터넷 스크립팅 </li><li>임베디드 스크립팅 </li><li>데이터베이스 엑세스 및 프로그래밍 </li><li>게임 프로그래밍 </li><li>빠른 프로토타이핑과 개발 </li><li>프로그램 배포 </li></ul><br><h2 id="Python-을-사용하는-단체들"><a href="#Python-을-사용하는-단체들" class="headerlink" title="Python 을 사용하는 단체들"></a>Python 을 사용하는 단체들</h2><br><table><thead><tr><th><strong>분야</strong></th><th><strong>단체</strong></th></tr></thead><tbody><tr><td>웹개발</td><td>Yahoo maps, Yahoo Group, Google, Zope Corporation, Ultraseek, Linux Weekly News, Mojam.com, Shopzilla</td></tr><tr><td>게임</td><td>Battlefield2, Crystal space, Star Trek Bridge Commander, Civilization 4, QuArk(Quake Army Knife)</td></tr><tr><td>그래픽</td><td>Industrial Light &amp; Magic, Walt Disney Feature Animation, HKS, RoboFog, Caligari Corporation, Blender 3D, Jasc Software</td></tr><tr><td>금융</td><td>Altis Investment Management, ABN AMRO Bank, Treasury Systems</td></tr><tr><td>과학</td><td>National Weather Service, Radar Remote Sensing Group, Applied Maths, Biosoft, The National Research Council of Canada, AlphaGene, Inc. NASA, etc</td></tr><tr><td>전자 자동화 디자인</td><td>Ciranova, Productivity Design Tools, Object Domain, Red Hat</td></tr><tr><td>교육</td><td>University of Califonia, Irvine, New Zealand Digital Library, IT Certification Exam preparation, School Tool</td></tr><tr><td>비지니스 소프트웨어</td><td>Raven Bear Systems Corporation, Thawte Consulting, IBM, WuBook etc</td></tr></tbody></table><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/23/Python-%EA%B8%B0%EC%B4%88-1-%ED%8E%B8-%EA%B8%B0%EB%B3%B8-%EC%82%AC%ED%95%AD%EB%93%A4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>파이썬 라이브러리 (library) 와 모듈 (module)</title>
      <link>http://djangojeng-e.github.io/2020/10/22/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-library-%EC%99%80-%EB%AA%A8%EB%93%88-module/</link>
      <guid>http://djangojeng-e.github.io/2020/10/22/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-library-%EC%99%80-%EB%AA%A8%EB%93%88-module/</guid>
      <pubDate>Wed, 21 Oct 2020 23:49:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Python-Library-and-Modules&quot;&gt;&lt;a href=&quot;#Python-Library-and-Modules&quot; class=&quot;headerlink&quot; title=&quot;Python Library and Modules&quot;&gt;&lt;/a&gt;Python L
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Library-and-Modules"><a href="#Python-Library-and-Modules" class="headerlink" title="Python Library and Modules"></a>Python Library and Modules</h2><br><h3 id="파이썬-라이브러리-Library-와-모듈-Module"><a href="#파이썬-라이브러리-Library-와-모듈-Module" class="headerlink" title="파이썬 라이브러리 (Library) 와 모듈 (Module)"></a>파이썬 라이브러리 (Library) 와 모듈 (Module)</h3><br><h3 id="Python-Library-and-Modules-1"><a href="#Python-Library-and-Modules-1" class="headerlink" title="Python Library and Modules"></a>Python Library and Modules</h3><br><p>파이썬에는, 라이브러리 (Library) 혹은 모듈 (Module) 이라는것들이 존재합니다 </p><br><p>파이썬 공부한지도 제법 시간이 오래되었지만, 라이브러리와 모듈에 대해서 설명 하라고 하면 바로 대답이 나오질 않습니다.. 짧게나마 라이브러리와 모듈에 대해서 정리하고 넘어갑니다. </p><br><br><blockquote><p><strong>파이썬에서 라이브러리 (Library) 란?</strong></p><br><p>파이썬 라이브러리는 코드를 작성할 필요없이 많은 동작을 수행할수 있게 해주는 함수와 메서드의 집합입니다. 우리는, 마치 도서관 (library) 에서 책을 꺼내어 보듯이, </p><br><p>프로그래밍을 하면서, 파이썬 라이브러리를 꺼내어 사용할수 있습니다. 여러 파일로 이루어져 있을수 있고, 함수 메서드 속성들이 하나의 패키지로 모여져 있습니다. </p><br><p>어떤 파이썬 라이브러리에는, </p><p>이미 우리가 수행하고자 하는 기능과 동작들이 이미 정의되어 모여져 있기 때문에, </p><p>이를 가져다 쓰기만 하면 됩니다. </p><br><p>예를들면, 파이썬 이미지 라이브러리 (PIL)은, 파이썬에서 이미지 수정을 위한 파이썬 주요 라이브러리 입니다. Numpy 는 숫자 연산을 위한 강력한 라이브러리 입니다. </p></blockquote><br><br><h2 id="파이썬에서-모듈-Module-란"><a href="#파이썬에서-모듈-Module-란" class="headerlink" title="파이썬에서 모듈 (Module) 란?"></a>파이썬에서 모듈 (Module) 란?</h2><br><blockquote><p><strong>파이썬에서 모듈 (Module) 이란?</strong></p><br><p>파이썬 모듈은, </p><p>파이썬 객체로, 여러분들이 묶고 참조 할수 있는 속성들을 가지고 있는 파이썬 객체 입니다. </p><br><p>간단하게 이야기 해서, 모듈은 파이썬으로 이루어져 있는 하나의 파일 입니다. </p><p>하나의 모듈은 함수들 클래스들 그리고 변수들을 정의할수 있습니다. </p><br><p>하나의 모듈은, 실행 가능한 코드도 포함하고 있을수 있습니다. </p></blockquote><br><br><h2 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h2><br><p>요약하자면, 라이브러리는, 변수나 함수 클래스등을 미리 만들어서 모아 놓은 것입니다. </p><p><br>기본 파이썬에서는 없었거나, 사용하기 편한 기능의 함수와 클래스들을 제공하고, 이를 가져다가 쓸수 있게 만들어 놓은것입니다. </p><br><p><code>import</code> 를 사용하여, 가져와서 사용할수 있고. 보통 구글을 찾아보면, 정말 많은 라이브러리가 존재하는데. 각 라이브러리의 사용법 또한 정말 많이 검색이 되니, 개발자 입장에서는 언제든지 찾아서 끌어다가 사용할수 있습니다.  </p><br><p>예를들어, numpy 같은 경우, 데이터 분석 분야에서 많이 사용되는 라이브러리로, 수적 계산 작업등에 널리 사용되는 라이브러리 입니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/22/%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EB%9D%BC%EC%9D%B4%EB%B8%8C%EB%9F%AC%EB%A6%AC-library-%EC%99%80-%EB%AA%A8%EB%93%88-module/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 9편 - as_table()</title>
      <link>http://djangojeng-e.github.io/2020/10/21/Form-API-9%ED%8E%B8-as-table/</link>
      <guid>http://djangojeng-e.github.io/2020/10/21/Form-API-9%ED%8E%B8-as-table/</guid>
      <pubDate>Wed, 21 Oct 2020 04:44:27 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;HTML-로-폼-출력하기-as-table&quot;&gt;&lt;a href=&quot;#HTML-로-폼-출력하기-as-table&quot; class=&quot;headerlink&quot; title=&quot;HTML 로 폼 출력하기 - as_table()&quot;&gt;&lt;/a&gt;HTML 로 폼 출력하기 - 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="HTML-로-폼-출력하기-as-table"><a href="#HTML-로-폼-출력하기-as-table" class="headerlink" title="HTML 로 폼 출력하기 - as_table()"></a>HTML 로 폼 출력하기 - <code>as_table()</code></h2><br><h3 id="as-table"><a href="#as-table" class="headerlink" title="as_table()"></a><code>as_table()</code></h3><br><blockquote><p>마지막으로, as_table() 은 폼을 <code>&lt;table&gt;</code> HTML 로 출력합니다. </p><p>이는 print 와 같습니다. </p><p>사실 우리는 하나의 폼 객체를 print 할때에, 기본 백앤드 동작으로 as_table() 메서드를 호출합니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [5]: f = ContactForm()                                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [6]: f.as_table()                                                                                                                                                      </span><br><span class="line">Out[6]: '&lt;tr&gt;&lt;th&gt;&lt;label for="id_subject"&gt;Subject:&lt;/label&gt;</span><br><span class="line">&lt;/th&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="text" name="subject" maxlength="100" required id="id_subject"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;\n&lt;tr&gt;&lt;th&gt;&lt;label for="id_message"&gt;Message:&lt;/label&gt;&lt;/th&gt;</span><br><span class="line">&lt;td&gt;&lt;textarea name="message" cols="40" rows="10" required id="id_message"&gt;\n</span><br><span class="line">&lt;/textarea&gt;&lt;/td&gt;&lt;/tr&gt;</span><br><span class="line">\n&lt;tr&gt;&lt;th&gt;&lt;label for="id_sender"&gt;Sender:&lt;/label&gt;&lt;/th&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="email" name="sender" required id="id_sender"&gt;&lt;/td&gt;</span><br><span class="line">&lt;/tr&gt;\n&lt;tr&gt;&lt;th&gt;&lt;label for="id_cc_myself"&gt;Cc myself:&lt;/label&gt;&lt;/th&gt;</span><br><span class="line">&lt;td&gt;&lt;input type="checkbox" name="cc_myself" id="id_cc_myself"&gt;&lt;/td&gt;&lt;/tr&gt;'</span><br></pre></td></tr></table></figure><br><p><code>&lt;tr&gt; 과 &lt;td&gt;</code> 테그들은 생성되지만, <code>&lt;table&gt;</code>태그는 생성되지 않습니다. 이는, 사용자가 직접 추가해 주어야 합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/21/Form-API-9%ED%8E%B8-as-table/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 8편 - Form.as_ul()</title>
      <link>http://djangojeng-e.github.io/2020/10/20/Form-API-8%ED%8E%B8-Form-as-ul/</link>
      <guid>http://djangojeng-e.github.io/2020/10/20/Form-API-8%ED%8E%B8-Form-as-ul/</guid>
      <pubDate>Mon, 19 Oct 2020 23:46:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Form-as-ul&quot;&gt;&lt;a href=&quot;#Form-as-ul&quot; class=&quot;headerlink&quot; title=&quot;Form.as_ul()&quot;&gt;&lt;/a&gt;Form.as_ul()&lt;/h2&gt;&lt;br&gt;



&lt;p&gt;&lt;code&gt;as_ul()&lt;/code&gt;은 폼을 &lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Form-as-ul"><a href="#Form-as-ul" class="headerlink" title="Form.as_ul()"></a>Form.as_ul()</h2><br><p><code>as_ul()</code>은 폼을 <code>&lt;li&gt;</code> 태그로 렌더링 해줍니다. 각 <code>&lt;li&gt;</code> 태그는 하나의 필드를 포함하고 있습니다. </p><p><br>이는, <code>&lt;ul&gt;</code> 혹은 <code>&lt;/ul&gt;</code> 을 포함하고 있지 않습니다. </p><p><br>따라서, 여러분들은 유연하게 <code>&lt;ul&gt;</code>에 어떤 HTML 속성이든지 지정해줄수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [4]: f.as_ul()                                                                                                                                                         </span><br><span class="line">Out[4]: '&lt;li&gt;&lt;label for="id_subject"&gt;Subject:&lt;/label&gt; </span><br><span class="line">&lt;input type="text" name="subject" maxlength="100" required id="id_subject"&gt;&lt;/li&gt;</span><br><span class="line">\n&lt;li&gt;&lt;label for="id_message"&gt;Message:&lt;/label&gt; </span><br><span class="line">&lt;textarea name="message" cols="40" rows="10" required id="id_message"&gt;\n</span><br><span class="line">&lt;/textarea&gt;&lt;/li&gt;\n</span><br><span class="line">&lt;li&gt;&lt;label for="id_sender"&gt;Sender:&lt;/label&gt; </span><br><span class="line">&lt;input type="email" name="sender" required id="id_sender"&gt;&lt;/li&gt;</span><br><span class="line">\n&lt;li&gt;&lt;label for="id_cc_myself"&gt;Cc myself:&lt;/label&gt;</span><br><span class="line">&lt;input type="checkbox" name="cc_myself" id="id_cc_myself"&gt;&lt;/li&gt;'</span><br></pre></td></tr></table></figure><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/20/Form-API-8%ED%8E%B8-Form-as-ul/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 7편 - HTML 로 폼 출력하기 - as_p()</title>
      <link>http://djangojeng-e.github.io/2020/10/20/Form-API-7%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0-as-p/</link>
      <guid>http://djangojeng-e.github.io/2020/10/20/Form-API-7%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0-as-p/</guid>
      <pubDate>Mon, 19 Oct 2020 23:40:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Form-as-p&quot;&gt;&lt;a href=&quot;#Form-as-p&quot; class=&quot;headerlink&quot; title=&quot;Form.as_p()&quot;&gt;&lt;/a&gt;Form.as_p()&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;as_p() 는 form 을 &lt;co
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Form-as-p"><a href="#Form-as-p" class="headerlink" title="Form.as_p()"></a>Form.as_p()</h2><br><blockquote><p>as_p() 는 form 을 <code>&lt;p&gt;</code> 태그들로 렌더링 해줍니다. </p><p>각 <code>&lt;p&gt;</code> 태그는 하나의 필드를 가지고 있습니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm() </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 폼 인스턴스를 생성 한뒤에 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> f.as_p() 를 호출하면, </span></span><br><span class="line"></span><br><span class="line">f.as_p()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 폼의 각 필드들이 &lt;p&gt;태그로 감싸져서 렌더링 되는것을 확인할수 있습니다 </span></span><br><span class="line"></span><br><span class="line">In [2]: f = ContactForm()                                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [3]: f.as_p()                                                                                                                                                          </span><br><span class="line">Out[3]: '&lt;p&gt;&lt;label for="id_subject"&gt;Subject:&lt;/label&gt; </span><br><span class="line">&lt;input type="text" name="subject" maxlength="100" required id="id_subject"&gt;&lt;/p&gt;</span><br><span class="line">\n&lt;p&gt;&lt;label for="id_message"&gt;Message:&lt;/label&gt; </span><br><span class="line">&lt;textarea name="message" cols="40" rows="10" required id="id_message"&gt;\n&lt;/textarea&gt;&lt;/p&gt;</span><br><span class="line">\n&lt;p&gt;&lt;label for="id_sender"&gt;Sender:&lt;/label&gt; </span><br><span class="line">&lt;input type="email" name="sender" required id="id_sender"&gt;&lt;/p&gt;</span><br><span class="line">\n&lt;p&gt;&lt;label for="id_cc_myself"&gt;Cc myself:&lt;/label&gt; </span><br><span class="line">&lt;input type="checkbox" name="cc_myself" id="id_cc_myself"&gt;&lt;/p&gt;'</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/20/Form-API-7%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0-as-p/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 6편 - HTML 로 폼 출력하기</title>
      <link>http://djangojeng-e.github.io/2020/10/19/Form-API-6%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/19/Form-API-6%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Mon, 19 Oct 2020 11:52:31 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Outputting-forms-as-HTML&quot;&gt;&lt;a href=&quot;#Outputting-forms-as-HTML&quot; class=&quot;headerlink&quot; title=&quot;Outputting forms as HTML&quot;&gt;&lt;/a&gt;Outputting forms as HTML&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;폼 객체의 두번째 작업은, 스스로 HTML 태그로 렌더를 해주는것입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;forms.py 가 아래와 같이 작성 되어 있고. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; forms &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContactForm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forms.Form)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subject = forms.CharField(max_length=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message = forms.CharField(widget=forms.Textarea)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sender = forms.EmailField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc_myself = forms.BooleanField(required=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;shell 에서 아래와 같이 폼을 프린트 해보면, &lt;/p&gt;
&lt;p&gt;폼이 저절로 HTML 로 렌더되는것을 확인할수 있습니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;



&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from classviewsforms.forms import ContactForm &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = ContactForm() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Outputting-forms-as-HTML"><a href="#Outputting-forms-as-HTML" class="headerlink" title="Outputting forms as HTML"></a>Outputting forms as HTML</h2><br><p>폼 객체의 두번째 작업은, 스스로 HTML 태그로 렌더를 해주는것입니다. </p><br><p>forms.py 가 아래와 같이 작성 되어 있고. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    subject = forms.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    message = forms.CharField(widget=forms.Textarea)</span><br><span class="line">    sender = forms.EmailField()</span><br><span class="line">    cc_myself = forms.BooleanField(required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>shell 에서 아래와 같이 폼을 프린트 해보면, </p><p>폼이 저절로 HTML 로 렌더되는것을 확인할수 있습니다</p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from classviewsforms.forms import ContactForm </span><br><span class="line"></span><br><span class="line">f = ContactForm() </span><br><span class="line"></span><br><span class="line">print(f)</span><br></pre></td></tr></table></figure><br><a id="more"></a><p>만약 폼이 데이터를 가지고 있으면, HTML 로 출력 될때, HTML 태그는 데이터를 적절하게 포함하고 있습니다. </p><br><p>예를들어, 필드가 <code>&lt;input type=&quot;text&quot;&gt;</code> 라고 표시가 되어 있으면, 데이터는 value 속성에 있을것입니다. </p><p><br>만약 필드가 <code>&lt;input type=&quot;checkbox&quot;&gt;</code>로 표시되어 있으면, 적절한 경우, checked 를 포함하고 있을겁니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">In [4]: data = &#123;'subject': 'hello', </span></span><br><span class="line"><span class="xml">   ...:         'message': 'Hi there', </span></span><br><span class="line"><span class="xml">   ...:         'sender': 'foo@example.com', </span></span><br><span class="line"><span class="xml">   ...:         'cc_myself': True&#125;                                                                </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [5]: f = ContactForm(data)                                                                     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [6]: print(f)                                                                                  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_subject"</span>&gt;</span>Subject:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">value</span>=<span class="string">"hello"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">required</span> <span class="attr">id</span>=<span class="string">"id_subject"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_message"</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">cols</span>=<span class="string">"40"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">required</span> <span class="attr">id</span>=<span class="string">"id_message"</span>&gt;</span></span></span><br><span class="line"><span class="xml">Hi there<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_sender"</span>&gt;</span>Sender:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"sender"</span> <span class="attr">value</span>=<span class="string">"foo@example.com"</span> <span class="attr">required</span> <span class="attr">id</span>=<span class="string">"id_sender"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_cc_myself"</span>&gt;</span>Cc myself:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"cc_myself"</span> <span class="attr">id</span>=<span class="string">"id_cc_myself"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><p>이런 기본 출력 방식은, 각 필드들에 <code>&lt;tr&gt;</code> 을 가지고 있는, 그리고 두개의 컬럼으로 되어 있는 HTML 테이블이 됩니다. 아래 사항들을 짚고 넘어갑니다.  </p><br><ul><li>유연성을 위해서, 폼의 기본 출력값은 <code>&lt;table&gt;&lt;/table&gt;</code> 태그를 가지고 있지 않습니다 </li><li><code>&lt;form&gt;&lt;/form&gt;</code> 태그도 가지고 있지 않습니다 </li><li><code>&lt;input type=&quot;submit&quot;&gt;</code> 태그도 가지고 있지 않습니다. </li></ul><br><blockquote><p>위에 있는 태그들이 기본 출력에 포함되지 않습니다. </p><p>따라서, HTML 템플릿에 위 3개의 테그는 여러분들이 필요에 의해서 추가해 주어야 할 테그들 입니다 <br></p><p>추가적으로, POST 폼을 사용하기전에 csrf_token 을 사용하는것도 잊지 않아야 합니다! </p></blockquote><br><ul><li>각 필드 타입은, 기본 HTML 태그를 가지고 있습니다. 예를들어 , </li></ul><ul><li><p>CharField 는 <code>&lt;input type=&quot;text&quot;&gt;</code></p></li><li><p>EmailField 는 <code>&lt;input type=&quot;email&quot;&gt;</code></p></li><li><p>BooleanField(null=False) 는 <code>&lt;input type=&quot;checkbox&quot;&gt;</code> </p></li></ul><pre><code>이 태그들은 기본값일 뿐입니다. 우리는 widget 을 사용하여, 어떤 HTML 을 사용할것인지 지정할수 있습니다. </code></pre><br><ul><li>각 테그를 위한 HTML 이름은, ContactForm 클래스 안 속성이름을 직접 가져옵니다 </li><li>각 필드를 위한 label. 예) Subject, Message, Cc myself 들은 필드명의 언더스코어를 공백으로 전환하고, 첫번째 글자를 대문자해서 생겨납니다. 이것도 그저 기본값일 뿐입니다. 우리는 이 label 도 수동으로 지정할수 있습니다 </li><li>각 텍스트 레이블은 <code>&lt;label&gt;</code> HTML 태그안에 감싸져 있습니다. 이는 필드의 id 를 가르키고 있습니다. id 는 필드명앞에 id 를 붙여서 생성됩니다. id 속성과 <code>&lt;label&gt;</code> 태그들은 기본값으로 출력값에 포함되어 있습니다만. 이 동작도 변경할수 있습니다. </li><li>출력되는 HTML 은 HTML5 문법을 사용합니다. </li></ul><br><p>print 를 사용하여 form 을 출력했을때, <code>&lt;table&gt;</code> 이 기본 출력 스타일 일지라도, 다른 출력 스타일들이 존재할수 있습니다. 각 스타일은 폼 객체의 메서드로 존재하고. 각 렌더링 메서드는 문자열을 반환합니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/19/Form-API-6%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 5편 -Clean 데이터에 접근하기</title>
      <link>http://djangojeng-e.github.io/2020/10/18/Form-API-5%ED%8E%B8-Clean-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/18/Form-API-5%ED%8E%B8-Clean-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 18 Oct 2020 07:42:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Accessing-“clean”-data&quot;&gt;&lt;a href=&quot;#Accessing-“clean”-data&quot; class=&quot;headerlink&quot; title=&quot;Accessing “clean” data&quot;&gt;&lt;/a&gt;Accessing “clean” data&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Form-cleaned-data&quot;&gt;&lt;a href=&quot;#Form-cleaned-data&quot; class=&quot;headerlink&quot; title=&quot;Form.cleaned_data&quot;&gt;&lt;/a&gt;Form.cleaned_data&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;폼안에 각 필드들은, 데이터 검증뿐만 아니라, “cleaning” (정화) 하는 역할도 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;cleaning &lt;/p&gt;
&lt;p&gt;유효하고 일관적인 포맷으로 정형화 시킵니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;이는 아주 좋은 기능입니다. 왜냐하면, 특정 필드가 여러 방법으로 입력되고, 일관적인 아웃풋을 만들어 내기 때문입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;예를들어, DateField 는 입력값을 python 의 datetime.date 객체로 정형화 시킵니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;‘1994-07-15’ 같이, 문자열 형태, datetime.date 객체 혹은 다른 포맷들이든 상관없이. 유효하기만 하면, DateField 는 언제나 datetime.date 객체로 정형화 시킵니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;폼 인스턴스를 데이터와 함께 생성하고, 검증하였으면, &lt;/p&gt;
&lt;p&gt;폼의 cleaned_data 속성에 접근하여, 깔끔한 데이터에 엑세스 할수 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [1]: data = &amp;#123;&#39;subject&#39;: &#39;hello&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;message&#39;: &#39;Hi there&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;sender&#39;: &#39;foo@example.com&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;cc_myself&#39;: True&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [4]: f = ContactForm(data)                                                                                                                                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [5]: f.is_valid()                                                                                                                                                      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[5]: True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [6]: f.cleaned_data                                                                                                                                                    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[6]: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&#39;subject&#39;: &#39;hello&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &#39;message&#39;: &#39;Hi there&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &#39;sender&#39;: &#39;foo@example.com&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &#39;cc_myself&#39;: True&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;여기서 꼭 알아야 할 부분은, cleaned_data 는 사전형태로. 깨끗한 데이터를 가지고 있습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Accessing-“clean”-data"><a href="#Accessing-“clean”-data" class="headerlink" title="Accessing “clean” data"></a>Accessing “clean” data</h2><br><h3 id="Form-cleaned-data"><a href="#Form-cleaned-data" class="headerlink" title="Form.cleaned_data"></a>Form.cleaned_data</h3><br><p>폼안에 각 필드들은, 데이터 검증뿐만 아니라, “cleaning” (정화) 하는 역할도 합니다. </p><br><blockquote><p>cleaning </p><p>유효하고 일관적인 포맷으로 정형화 시킵니다 </p></blockquote><br><p>이는 아주 좋은 기능입니다. 왜냐하면, 특정 필드가 여러 방법으로 입력되고, 일관적인 아웃풋을 만들어 내기 때문입니다. </p><br><p>예를들어, DateField 는 입력값을 python 의 datetime.date 객체로 정형화 시킵니다. </p><br><p>‘1994-07-15’ 같이, 문자열 형태, datetime.date 객체 혹은 다른 포맷들이든 상관없이. 유효하기만 하면, DateField 는 언제나 datetime.date 객체로 정형화 시킵니다. </p><br><blockquote><p>폼 인스턴스를 데이터와 함께 생성하고, 검증하였으면, </p><p>폼의 cleaned_data 속성에 접근하여, 깔끔한 데이터에 엑세스 할수 있습니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [1]: data = &#123;'subject': 'hello', </span><br><span class="line">   ...:         'message': 'Hi there', </span><br><span class="line">   ...:         'sender': 'foo@example.com', </span><br><span class="line">   ...:         'cc_myself': True&#125;     </span><br><span class="line"></span><br><span class="line">In [4]: f = ContactForm(data)                                                                                                                                             </span><br><span class="line"></span><br><span class="line">In [5]: f.is_valid()                                                                                                                                                      </span><br><span class="line">Out[5]: True</span><br><span class="line"></span><br><span class="line">In [6]: f.cleaned_data                                                                                                                                                    </span><br><span class="line">Out[6]: </span><br><span class="line">&#123;'subject': 'hello',</span><br><span class="line"> 'message': 'Hi there',</span><br><span class="line"> 'sender': 'foo@example.com',</span><br><span class="line"> 'cc_myself': True&#125;</span><br></pre></td></tr></table></figure><br><p>여기서 꼭 알아야 할 부분은, cleaned_data 는 사전형태로. 깨끗한 데이터를 가지고 있습니다. </p><p><br><a id="more"></a></p><p>CharField 혹은 EmailField 같은 텍스트 기반 필드들은, 언제나 입력값을 문자열로 정화 시킨다는것을 숙지해야 합니다. 우리는 인코딩 시에 이것에 대한것을 나중에 다룰겁니다. </p><br><p>만약, 여러분들의 데이터가 검증되지 않는다면, cleaned_data 사전은 오직 유효한 필드들만 가지게 됩니다. </p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [7]: data &#x3D; &#123;&#39;subject&#39;: &#39;&#39;, </span><br><span class="line">   ...:         &#39;message&#39;: &#39;Hi there&#39;, </span><br><span class="line">   ...:         &#39;sender&#39;: &#39;invalid email address&#39;, </span><br><span class="line">   ...:         &#39;cc_myself&#39;: True&#125;                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [8]: f &#x3D; ContactForm(data)                                                                                                                                        </span><br><span class="line"></span><br><span class="line">In [9]: f.is_valid()                                                                                                                                                 </span><br><span class="line">Out[9]: False</span><br><span class="line"></span><br><span class="line">In [10]: f.cleaned_data                                                                                                                                              </span><br><span class="line">Out[10]: &#123;&#39;message&#39;: &#39;Hi there&#39;, &#39;cc_myself&#39;: True&#125;</span><br></pre></td></tr></table></figure><br><blockquote><p>폼을 정의할때, 추가적인 데이터를 전달한다 하더라도, </p><p>cleaned_data 는 언제나 폼에 정의된 필드들에 대해서만 key 값들을 가질겁니다. </p></blockquote><br><p>아래 예시에서는, ContactForm 생성자에, 여러가지 추가적인 필드를 전달하지만, cleaned_data 는 오직 폼의 필드들만 포함하는것을 확인 할수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [11]: data = &#123;'subject': 'hello', </span><br><span class="line">    ...:         'message': 'Hi there', </span><br><span class="line">    ...:         'sender': 'foo@example.com', </span><br><span class="line">    ...:         'extra_field_1': 'foo', </span><br><span class="line">    ...:         'extra_field_2': 'bar', </span><br><span class="line">    ...:         'extra_field_3': 'baz'&#125;                                                                                                                             </span><br><span class="line"></span><br><span class="line">In [12]: f = ContactForm(data)                                                                                                                                       </span><br><span class="line"></span><br><span class="line">In [13]: f.is_valid()                                                                                                                                                </span><br><span class="line">Out[13]: True</span><br><span class="line"></span><br><span class="line">In [14]: f.cleaned_data                                                                                                                                              </span><br><span class="line">Out[14]: </span><br><span class="line">&#123;'subject': 'hello',</span><br><span class="line"> 'message': 'Hi there',</span><br><span class="line"> 'sender': 'foo@example.com',</span><br><span class="line"> 'cc_myself': False&#125;</span><br></pre></td></tr></table></figure><br><br><blockquote><p>폼이 유효할때, </p><p>데이터가 어떤 옵션 필드들에 대한 값을 포함하고 있지 않더라도, </p><p>cleaned_data  는 폼의 모든 필드들에 대한 key 와 value 들을 포함합니다. </p></blockquote><br><p>아래 예시에서, 데이터 사전은, nick_name 필드에 대한 값을 포함하고 있지 않습니다. </p><p><br>하지만, cleaned_data 는 이 필드에 대한 값을 비어 있는 값으로 포함하고 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n [1]: from forms_more_on_fields.forms import OptionalPersonForm                                                                                                    </span><br><span class="line"></span><br><span class="line">In [2]: data = &#123;'first_name': 'John', 'last_name': 'Lennon'&#125;    </span><br><span class="line"></span><br><span class="line">In [4]: f = OptionalPersonForm(data)                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [5]: f.is_valid()                                                                                                                                                 </span><br><span class="line">Out[5]: True</span><br><span class="line"></span><br><span class="line">In [6]: f.cleaned_data                                                                                                                                               </span><br><span class="line">Out[6]: &#123;'first_name': 'John', 'last_name': 'Lennon', 'nick_name': ''&#125;</span><br></pre></td></tr></table></figure><br><p>위의 예시에서 보다싶이, nick_name 을 위한 cleaned_data 값은 빈 문자열로 지정 됩니다. 왜냐하면, nick_name 은 CharField 이고, CharField 는 빈값을 비어있는 문자열로 다루기 때문입니다. </p><br><p>각 필드 타입은, 필드의 빈 값이 무엇인지 알고 있습니다. 예를들면, DateField 는 비어있는 문자열 대신에 None 을 값으로 가집니다. </p><br><p>이 상황에 대한 각 필드의 동작에 대한 자세한 정보는, Built-in Field classes 안에 있는 ‘Empty Value’ 노트를 확인하면 됩니다. </p><br><p>여러분들은 특정 폼 필드들에 (필드명을 기반으로 한) 대한 검증작업을 실행 하기 위해서 코드를 작성합니다. 혹은, 폼 전체의 검증을 수행하기 위해서 작성합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/18/Form-API-5%ED%8E%B8-Clean-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 4편 - 폼 데이터 변경사항 체크하기</title>
      <link>http://djangojeng-e.github.io/2020/10/17/Form-API-4%ED%8E%B8-%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/17/Form-API-4%ED%8E%B8-%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 16 Oct 2020 22:47:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Checking-which-form-data-has-been-changed&quot;&gt;&lt;a href=&quot;#Checking-which-form-data-has-been-changed&quot; class=&quot;headerlink&quot; title=&quot;Checking w
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Checking-which-form-data-has-been-changed"><a href="#Checking-which-form-data-has-been-changed" class="headerlink" title="Checking which form data has been changed"></a>Checking which form data has been changed</h2><br><h3 id="폼-데이터-변경사항을-체크하기-위해서는-has-changed-메서드를-사용하면-됩니다"><a href="#폼-데이터-변경사항을-체크하기-위해서는-has-changed-메서드를-사용하면-됩니다" class="headerlink" title="폼 데이터 변경사항을 체크하기 위해서는 has_changed() 메서드를 사용하면 됩니다."></a>폼 데이터 변경사항을 체크하기 위해서는 <code>has_changed()</code> 메서드를 사용하면 됩니다.</h3><br><p>초기값에서부터 폼 데이터가 변경 되었는지 아니었는지 확인할 필요가 있을떄 체크 합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [2]: from forms_more_on_fields.forms import ContactForm  </span><br><span class="line"></span><br><span class="line">In [7]: data = &#123;'subject': 'hello', </span><br><span class="line">   ...:         'message': 'Hi there', </span><br><span class="line">   ...:         'sender': 'foo@example.com', </span><br><span class="line">   ...:         'cc_myself': True&#125;                                                                                 </span><br><span class="line"></span><br><span class="line">In [8]: f = ContactForm(data, initial=data)                                                                        </span><br><span class="line"></span><br><span class="line">In [9]: f.has_changed()                                                                                            </span><br><span class="line">Out[9]: False</span><br></pre></td></tr></table></figure><br><p>폼이 제출 되었을때, 우리는 다시 폼을 만들고 오리지널 데이터를 제공하여 비교가 이루어 질수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f = ContactForm(request.POST, initial=data)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f.has_changed()</span></span><br></pre></td></tr></table></figure><br><p>만약, request_POST 에서 온 data 가 initial 에 있는 데이터와 다르다면, has_changed() 는 True 를 반환할겁니다. 그렇지 않다면, False 를 반환합니다. </p><br><p>이 결과는, 폼안에 있는 각 필드에, has_changed() 를 호출함으로 계산됩니다. </p><br><h3 id="Form-changed-data"><a href="#Form-changed-data" class="headerlink" title="Form.changed_data"></a>Form.changed_data</h3><br><p>changed_data 속성은 initial 에 제공되었던 데이터와 다른 데이터들이, 폼을 통해 (보통 request.POST를 통해서) 온 데이터들과 다를때, 폼의 bound data 안에 있는 필드들의 이름을 가진 리스트를 반환합니다.  </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f = ContactForm(request.POST, initial=data)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">if</span> f.has_changed():</span></span><br><span class="line">...     print("The following fields changed: %s" % ", ".join(f.changed_data))</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f.changed_data</span></span><br><span class="line">['subject', 'message']</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/17/Form-API-4%ED%8E%B8-%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 3편 - Dynamic Initial Values</title>
      <link>http://djangojeng-e.github.io/2020/10/16/Form-API-3%ED%8E%B8-Dynamic-Initial-Values/</link>
      <guid>http://djangojeng-e.github.io/2020/10/16/Form-API-3%ED%8E%B8-Dynamic-Initial-Values/</guid>
      <pubDate>Fri, 16 Oct 2020 00:13:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Dynamic-initial-values&quot;&gt;&lt;a href=&quot;#Dynamic-initial-values&quot; class=&quot;headerlink&quot; title=&quot;Dynamic initial values&quot;&gt;&lt;/a&gt;Dynamic initial valu
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Dynamic-initial-values"><a href="#Dynamic-initial-values" class="headerlink" title="Dynamic initial values"></a>Dynamic initial values</h2><br><h3 id="Form-initial"><a href="#Form-initial" class="headerlink" title="Form.initial"></a>Form.initial</h3><br><p>initial 을 사용하여, 실행시에 폼필드의 초기값을 지정할수 있습니다. </p><p><br>예를들면, 여러분들은 현재 세션의 username 을 username 필드에 채워놓고 싶을지도 모릅니다<br></p><p>이런 동작을 구현하기 위해서, initial 인자를 Form 에 써줍니다. </p><br><p>이 인자가 주어질때는, 필드명이 초기값에 매핑되는 사전 형태여야 합니다. </p><br><p>오직 여러분들이 초기값을 지정하고 싶은 필드에만 포함합니다.<br> 폼안에 모든 필드에 쓰는것은 불필요한 일입니다.<br><br></p><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm(initial=&#123;<span class="string">'subject'</span>: <span class="string">'Hi there!'</span>&#125;)</span><br></pre></td></tr></table></figure><br><p>이 값들은 오직 unbound 폼에만 표시되고, 만약 특정 값이 주어지지 않을때에 fallback 값으로 사용되지 않습니다. </p><br><p>만약 필드가 initial 을 정의하고, initial 폼을 인스턴스화 할때 포함하면, 두번째가 먼저 택해집니다. 아래 예시에는, initial 이 필드에서 주어졌고, 폼 인스턴스에도 주어졌습니다. 두번째가 우선시 됩니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django import forms </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">class CommentForm(forms.Form):</span></span><br><span class="line"><span class="xml">name = forms.CharField(initial='class')</span></span><br><span class="line"><span class="xml">url = forms.URLField()</span></span><br><span class="line"><span class="xml">    comment = forms.CharField()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">In [1]: from forms_more_on_fields.forms import CommentForm                                                                                                                </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [2]: f = CommentForm(initial=&#123;'name': 'instance'&#125;, auto_id=False)                                                                                                      </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [3]: print(f)                                                                                                                                                          </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"instance"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Url:<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Comment:<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"comment"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><blockquote><p>Initial 값이 정해져 있어도, </p><p>폼의 인스턴스를 생성할때 initial 을 지정해주면, 인스턴스 생성할때 지정한 initial 값이 해당 필드에 지정이 됩니다. </p></blockquote><br><h3 id="Form-get-initial-for-field-field-field-name"><a href="#Form-get-initial-for-field-field-field-name" class="headerlink" title="Form.get_initial_for_field(field, field_name)"></a><code>Form.get_initial_for_field(field, field_name)</code></h3><br><p>get_initial_for_field() 를 사용하여, 폼 필드의 초기 데이터를 조회할수 있습니다. 이는 Form.initial 과 Field.initial 로 부터, 데이터를 조회하고, 그 순서대로 호출 가능한 초기값들을 평가합니다 .</p><p><br><br></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/16/Form-API-3%ED%8E%B8-Dynamic-Initial-Values/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 2편 - 폼을 사용하여 데이터 검증하기</title>
      <link>http://djangojeng-e.github.io/2020/10/15/Form-API-2%ED%8E%B8-%ED%8F%BC%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/15/Form-API-2%ED%8E%B8-%ED%8F%BC%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 15 Oct 2020 05:29:29 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;폼을-사용하여-데이터-검증하기&quot;&gt;&lt;a href=&quot;#폼을-사용하여-데이터-검증하기&quot; class=&quot;headerlink&quot; title=&quot;폼을 사용하여 데이터 검증하기&quot;&gt;&lt;/a&gt;폼을 사용하여 데이터 검증하기&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Form-clean&quot;&gt;&lt;a href=&quot;#Form-clean&quot; class=&quot;headerlink&quot; title=&quot;Form.clean()&quot;&gt;&lt;/a&gt;&lt;code&gt;Form.clean()&lt;/code&gt;&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;서로 의존되어 있는 필드들을 위한 커스텀 검증을 추가해야 할때는, 폼에 clean() 메서드를 써주면 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;h3 id=&quot;Form-is-valid&quot;&gt;&lt;a href=&quot;#Form-is-valid&quot; class=&quot;headerlink&quot; title=&quot;Form.is_valid()&quot;&gt;&lt;/a&gt;&lt;code&gt;Form.is_valid()&lt;/code&gt;&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;폼 객체의 기본 과제는, 데이터를 검증하는것입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;Bound 폼 인스턴스를 가지고, &lt;code&gt;is_valid()&lt;/code&gt; 메서드를 호출하여 유효성 검증을 실행하고, 데이터가 유효했었는지 아닌지에 대한 불리언값을 반환합니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [1]: data = &amp;#123;&#39;subject&#39;: &#39;hello&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;message&#39;: &#39;Hi there&#39;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;sender&#39;: &#39;foo@example.com&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;cc_myself&#39;: True&amp;#125;                                                                                                                                        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [2]: from forms_more_on_fields.forms import ContactForm                                                                                                                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [3]: f = ContactForm(data)                                                                                                                                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [4]: f.is_valid()                                                                                                                                                      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[4]: True&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;유효하지 않은 데이터로도 시도해보기 위해서, 아래 예시에는 subject  필드가 비어있습니다 (모든 필드들이 채워져야 하는 폼이므로, 이것은 에러 입니다). 게다가, 아래 예시에서, sender 는 유효한 이메일 주소가 아니게 입력 된 폼입니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [5]: data = &amp;#123;&#39;subject&#39;: &#39;&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;message&#39;: &#39;Hi there&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;sender&#39;: &#39;invalid email address&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;cc_myself&#39;: True&amp;#125;                                                                                                                                     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [6]: f = ContactForm(data)                                                                                                                                          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [7]: f.is_valid()                                                                                                                                                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[7]: False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="폼을-사용하여-데이터-검증하기"><a href="#폼을-사용하여-데이터-검증하기" class="headerlink" title="폼을 사용하여 데이터 검증하기"></a>폼을 사용하여 데이터 검증하기</h2><br><h3 id="Form-clean"><a href="#Form-clean" class="headerlink" title="Form.clean()"></a><code>Form.clean()</code></h3><br><p>서로 의존되어 있는 필드들을 위한 커스텀 검증을 추가해야 할때는, 폼에 clean() 메서드를 써주면 됩니다. </p><br><h3 id="Form-is-valid"><a href="#Form-is-valid" class="headerlink" title="Form.is_valid()"></a><code>Form.is_valid()</code></h3><br><p>폼 객체의 기본 과제는, 데이터를 검증하는것입니다. </p><br><p>Bound 폼 인스턴스를 가지고, <code>is_valid()</code> 메서드를 호출하여 유효성 검증을 실행하고, 데이터가 유효했었는지 아닌지에 대한 불리언값을 반환합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [1]: data = &#123;'subject': 'hello', </span><br><span class="line">   ...:         'message': 'Hi there',  </span><br><span class="line">   ...:         'sender': 'foo@example.com', </span><br><span class="line">   ...:         'cc_myself': True&#125;                                                                                                                                        </span><br><span class="line"></span><br><span class="line">In [2]: from forms_more_on_fields.forms import ContactForm                                                                                                                </span><br><span class="line"></span><br><span class="line">In [3]: f = ContactForm(data)                                                                                                                                             </span><br><span class="line"></span><br><span class="line">In [4]: f.is_valid()                                                                                                                                                      </span><br><span class="line">Out[4]: True</span><br></pre></td></tr></table></figure><br><p>유효하지 않은 데이터로도 시도해보기 위해서, 아래 예시에는 subject  필드가 비어있습니다 (모든 필드들이 채워져야 하는 폼이므로, 이것은 에러 입니다). 게다가, 아래 예시에서, sender 는 유효한 이메일 주소가 아니게 입력 된 폼입니다. </p><br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [5]: data = &#123;'subject': '', </span><br><span class="line">   ...:         'message': 'Hi there', </span><br><span class="line">   ...:         'sender': 'invalid email address', </span><br><span class="line">   ...:         'cc_myself': True&#125;                                                                                                                                     </span><br><span class="line"></span><br><span class="line">In [6]: f = ContactForm(data)                                                                                                                                          </span><br><span class="line"></span><br><span class="line">In [7]: f.is_valid()                                                                                                                                                   </span><br><span class="line">Out[7]: False</span><br></pre></td></tr></table></figure><p><br><br></p><a id="more"></a><br><h3 id="Form-errors"><a href="#Form-errors" class="headerlink" title="Form.errors"></a><code>Form.errors</code></h3><br><p>에러 속성을 error messages 의 사전에서 가져옵니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [8]: f.errors                                                                                                                                                       </span><br><span class="line">Out[8]: </span><br><span class="line">&#123;'subject': ['This field is required.'],</span><br><span class="line"> 'sender': ['Enter a valid email address.']&#125;</span><br></pre></td></tr></table></figure><br><p>해당 사전에서, keys 는 필드 이름들이고, Values 는 에러 메시지들을 문자열로 표시한 리스트 입니다. </p><p>에러 메시지들은 리스트에 저장 되어 있습니다. 왜냐하면, 하나의 필드는 여러개의 에러 메시지들을 가질수도 있기 때문입니다. </p><br><p><code>is_valid()</code> 를 호출하지 않아도, errors 에 엑세스 할수 있습니다. <br></p><br><p>폼의 데이터는 처음 is_valid() 혹은 errors 에 호출하거나 access 할때 유효성 검사가 이루어 집니다. </p><br><p>유효성 루틴은 오직 한번만 호출됩니다. 몇번에 걸쳐서 errors 를 접근을 하던, is_valid() 를 호출하던. 딱 한번만 유효성 검사가 이루어집니다. 이것이 의미하는 바는, 유효성이 다른 부작용이 있을때, 부작용들은 오직 한번만 일어난다는것을 의미합니다. </p><br><h3 id="Form-errors-as-data"><a href="#Form-errors-as-data" class="headerlink" title="Form.errors.as_data()"></a><code>Form.errors.as_data()</code></h3><br><p>오리지널 ValidationError 인스턴스들을 매핑하는 사전을 반환합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [9]: f.errors.as_data()                                                                                                                                             </span><br><span class="line">Out[9]: </span><br><span class="line">&#123;'subject': [ValidationError(['This field is required.'])],</span><br><span class="line"> 'sender': [ValidationError(['Enter a valid email address.'])]&#125;</span><br></pre></td></tr></table></figure><br><p>코드로 에러를 식별하고 싶을때, 이 메서드를 사용합니다. 이 메서드는 에러의 메시지를 재작성 하거나 에러가 있을때, 뷰 안에 커스텀 로직을 작성할수 있게 해줍니다. </p><br><p>또한, 에러들을 커스텀 형태, (예, XML) 로 직력화 하는데에도 사용될수 있습니다.  </p><br><p>예를들면, as_json() 은 as_data() 에 의존하는 메서드 입니다. </p><br><br><h3 id="Form-errors-as-json-escape-html-False"><a href="#Form-errors-as-json-escape-html-False" class="headerlink" title="Form.errors.as_json(escape_html=False)"></a><code>Form.errors.as_json(escape_html=False)</code></h3><br><p>에러를 직렬화된 JSON 으로 반환합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [10]: f.errors.as_json()                                                                                                                                            </span><br><span class="line">Out[10]: '&#123;"subject": [&#123;"message": "This field is required.", "code": "required"&#125;], </span><br><span class="line">"sender": [&#123;"message": "Enter a valid email address.", "code": "invalid"&#125;]&#125;'</span><br></pre></td></tr></table></figure><br><p>기본값으로, as_json() 은 그 결과를 escape  하지 않습니다. </p><p>만약 AJAX 요청 같은 것을 Form View 에 사용하고 있다면, (Form view 에서 클라이언트는 응답을 해석하여, 에러들을 페이지에 삽입하고, 당신은 사이트간 스크립팅 공격의 가능성을 피하기 위해서, 클라이언트 사이드에 결과들을 escape 하고 싶을것입니다). 이는, JavaScript 로 element.textContext = errorText 혹은 jQuery의 $(el).text(errorText) 를 사용해서 해결할수 있습니다. </p><br><p>만약 어떠한 이유로인해, client-side escaping 을 원치 않는다면, escape_html=True 를 설정해 주면 됩니다. 그리고 에러 메시지들은 escaped 되어서, 직접 HTML  안에 사용할수 있습니다. </p><br><h3 id="Form-errors-get-json-data-escape-html-False"><a href="#Form-errors-get-json-data-escape-html-False" class="headerlink" title="Form.errors.get_json_data(escape_html=False)"></a><code>Form.errors.get_json_data(escape_html=False)</code></h3><br><p>JSON 으로 직렬화하기 좋은 사전으로 에러들을 반환합니다. </p><p><br>form.errors.as_json() 은 직렬화된 JSON 을 반환 합니다. 하지만, Form.errors.get_json_data() 는 직렬화 되기 전 에러 데이터를 반환 합니다. <br></p><p>escape_html 파라미터는, Form.errors.as_json() 에서 나온것처럼 작동합니다. </p><br><h3 id="Form-add-errors-field-error"><a href="#Form-add-errors-field-error" class="headerlink" title="Form.add_errors(field,error)"></a><code>Form.add_errors(field,error)</code></h3><br><p>이 메서드는 에러들을 Form.clean() 메서드 안에서 혹은 폼의 바깥에서 특정 필드들에 추가할수 있게 해줍니다. </p><p>field 인자는 필드의 이름이고, 에러가 추가되어야 하는 필드입니다. 이 값이 None 이면, 에러는 non-field 에러로 간주됩니다.</p><br><p>error 인자는 문자열로 될수 있습니다 혹은 ValidationError 의 인스턴스가 선호될수 있습니다. </p><br><p>Form.add_error() 는 자동으로 cleaned_data 부터 연결된 필드들을 지워줍니다. </p><br><h3 id="Form-has-error-field-code-None"><a href="#Form-has-error-field-code-None" class="headerlink" title="Form.has_error(field, code=None)"></a><code>Form.has_error(field, code=None)</code></h3><br><p>필드가 특정 에러코드를 가진 에러를 가지고 있는지 없는지 Boolean 값을 리턴합니다. </p><p>만약 code 가 None 이면, 필드가 어떤 에러들을 가지고 있을경우, True 를 반환합니다. </p><br><p>non-field errors 를 확인하기 위해서는, NON_FIELD_ERRORS 를 field 파라미터로 사용할수 있습니다. </p><br><br><h3 id="Form-non-field-errors"><a href="#Form-non-field-errors" class="headerlink" title="Form.non_field_errors()"></a><code>Form.non_field_errors()</code></h3><br><p>이 메서드는 특정 필드와 연관이 없는 Form.errors 로 부터 에러들의 리스트를 반환합니다.</p><p>이는 Form.clean() 과 Form.add_errors를 사용하여 추가된 에러들에 발생된 ValidationErrors 들을 포함합니다. </p><br><br><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><br><table><thead><tr><th><strong>Method</strong></th><th><strong>role</strong></th></tr></thead><tbody><tr><td>clean()</td><td>서로 의존하는 필드들을 위한 사용자 검증이 필요할때</td></tr><tr><td>is_valid()</td><td>Bound 된 폼 인스턴스의 유효성 검사. Boolean 값을 반환</td></tr><tr><td>.errors</td><td>error messages 사전을 가져오기 위한 errors 속성에 엑세스 합니다.</td></tr><tr><td>.errors.as_data()</td><td>오리지널 ValidationError 인스턴스들을 매핑하는 사전을 반환 합니다.</td></tr><tr><td>.errors.as_json()</td><td>에러를 직렬화된 JSON 으로 반환합니다.</td></tr><tr><td>.errors.get_json_data(escape_html=False)</td><td>에러들을 JSON 으로 직렬화하기 좋은 형태의 사전으로 반환합니다.</td></tr><tr><td>.add_error(field, error)</td><td>특정 필드에 에러를 추가할수 있게 해줍니다.</td></tr><tr><td>.has_error(field, code=None)</td><td>필드가 특정 코드를 가진 에러를 가지고 있는지 없는지 Boolean을 리턴합니다.</td></tr><tr><td>.non_field_errors()</td><td>특정 필드와 연결되지 않은 Form.errors 로부터 에러의 리스트를 반환합니다.</td></tr></tbody></table><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/15/Form-API-2%ED%8E%B8-%ED%8F%BC%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 1편 - Bound and Unbound Forms</title>
      <link>http://djangojeng-e.github.io/2020/10/14/Form-API-1%ED%8E%B8-Bound-and-Unbound-Forms/</link>
      <guid>http://djangojeng-e.github.io/2020/10/14/Form-API-1%ED%8E%B8-Bound-and-Unbound-Forms/</guid>
      <pubDate>Wed, 14 Oct 2020 10:34:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Form-API&quot;&gt;&lt;a href=&quot;#Form-API&quot; class=&quot;headerlink&quot; title=&quot;Form API&quot;&gt;&lt;/a&gt;Form API&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Bound-and-Unbound-Forms&quot;&gt;&lt;a href=&quot;#
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Form-API"><a href="#Form-API" class="headerlink" title="Form API"></a>Form API</h2><br><h3 id="Bound-and-Unbound-Forms"><a href="#Bound-and-Unbound-Forms" class="headerlink" title="Bound and Unbound Forms"></a>Bound and Unbound Forms</h3><br><p>하나의 폼 인스턴스는 <code>bound</code> 혹은 <code>unbound</code> 로 종류가 나뉩니다. </p><br><h4 id="Bound-Form"><a href="#Bound-Form" class="headerlink" title="Bound Form"></a>Bound Form</h4><br><p>폼이 Bound 되어있다라는 표현은, 데이터가 폼에 묶여있는 형태로. </p><p>폼에 데이터가 있는 상태를 의미합니다.<br> 해당 폼 인스턴스가, 데이터를 가지고 있다면, Django 는 해당 데이터를 검증하고, 데이터와 함께 HTML 로 렌더링 할수 있게 됩니다. </p><br><h4 id="Unbound-Form"><a href="#Unbound-Form" class="headerlink" title="Unbound Form"></a>Unbound Form</h4><br><p>만약에 폼이 unbound 되었다면, 해당 폼 인스턴스에는 데이터 검증 작업을 수행할수 없습니다 (검증할 데이터가 없기 때문입니다). 그렇지만, 비어있는 폼을 HTML 로 렌더 할수 있습니다. </p><br><br><h2 id="폼-클래스로-폼-인스턴스-생성"><a href="#폼-클래스로-폼-인스턴스-생성" class="headerlink" title="폼 클래스로 폼 인스턴스 생성"></a>폼 클래스로 폼 인스턴스 생성</h2><br><p>하나의 unbound  폼 (데이터가 비어있는 폼 인스턴스) 을 생성하기 위해서는, 폼 클래스를 인스턴스화 시켜주면 됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm()</span><br></pre></td></tr></table></figure><br><p>반대로, 폼에 데이터를 묶어주는, bound 폼 인스턴스를 생성하기 위해서는, </p><p><br>묶어줄 데이터를 사전 형태로 전달해주면 됩니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'subject'</span>: <span class="string">'hello'</span>,</span><br><span class="line">    <span class="string">'message'</span>: <span class="string">'Hi there'</span>,</span><br><span class="line">    <span class="string">'sender'</span>: <span class="string">'foo@example.com'</span>,</span><br><span class="line">    <span class="string">'cc_myself'</span>: <span class="literal">True</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = ContactForm(data)</span><br></pre></td></tr></table></figure><br><p>이 사전안에 keys 는 필드 이름이고, 이는 Form 클래스안의 속성들과 대응합니다. </p><p><br>사전안에 있는 values 는 여러분들이 검증하려고 하는 데이터 입니다. 이들은 보통 문자열로 되어 있지만, 문자열이여만 하는 요구 조건은 없습니다. 전달될 데이터 타입은 필드 마다 다를수 있습니다. </p><br><h2 id="is-bound"><a href="#is-bound" class="headerlink" title="is_bound"></a><code>is_bound</code></h2><br><p>만약 여러분들이 form 인스턴스가 bound 인지 unbound 인지 실행시에 구분하고 싶다면, form 의 is_bound 속성의 값을 확인 하면 됩니다. True 혹은 False 를 반환합니다. </p><br><p>shell 에서 확인해보면, </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [3]: from forms_more_on_fields.forms import ContactForm                                                                                                             </span><br><span class="line">In [4]: f = ContactForm()                                                                                                                                              </span><br><span class="line">In [5]: f.is_bound                                                                                                                                                     </span><br><span class="line">Out[5]: False</span><br><span class="line">In [6]: f = ContactForm(&#123;'subject': 'hello'&#125;)                                                                                                                          </span><br><span class="line">In [7]: f.is_bound                                                                                                                                                     </span><br><span class="line">Out[7]: True</span><br></pre></td></tr></table></figure><br><ul><li>폼 인스턴스에 데이터가 들어가면, is_bound 를 호출했을때, True 를 반환하고 </li><li>폼 인스턴스에 데이터가 들어가지 않은 unbound 폼에 is_bound 를 호출하면, False 를 반환합니다 </li></ul><br><p>비어 있는 사전을 전달할 경우, 비어 있는 데이터를 가진 bound form 이 됩니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [8]: f = ContactForm(&#123;&#125;)       # 비어있는 사전 전달                                                                                                                            </span><br><span class="line"></span><br><span class="line">In [9]: f.is_bound                                                                                                                                                     </span><br><span class="line">Out[9]: True</span><br></pre></td></tr></table></figure><br><p>Bound Form 인스턴스를 가지고 있고, 어떻게든 데이터를 바꾸고 싶거나 혹은 unbound form 을 어떠한 데이터를 가지게 하고 싶다면, 또다른 Form 인스턴스를 생성하면 됩니다. </p><br><p>Form instance 안에 데이터를 변경하는 길은 없습니다. 한번 Form 인스턴스가 생성이 되면, 데이터를 가지고 있던 없던, 데이터는 변경이 불가능 합니다! </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/14/Form-API-1%ED%8E%B8-Bound-and-Unbound-Forms/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 18편 - 폼 템플릿 작업하기-6</title>
      <link>http://djangojeng-e.github.io/2020/10/13/Django-Forms-18%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-6/</link>
      <guid>http://djangojeng-e.github.io/2020/10/13/Django-Forms-18%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-6/</guid>
      <pubDate>Tue, 13 Oct 2020 04:47:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Reusable-form-templates&quot;&gt;&lt;a href=&quot;#Reusable-form-templates&quot; class=&quot;headerlink&quot; title=&quot;Reusable form templates&quot;&gt;&lt;/a&gt;Reusable form tem
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Reusable-form-templates"><a href="#Reusable-form-templates" class="headerlink" title="Reusable form templates"></a>Reusable form templates</h2><br><p>만약 여러분의 사이트가 공통된 렌더링 로직을 가진 폼들을 다수의 공간에서 사용한다면, </p><p><br>반복되는것을 폼의 템플릿 안에 저장하고 include 테그를 사용하여, 다른 템플릿 안에서 사용할수 있습니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'form_snippet.html' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># In form_snippet_html </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> field <span class="keyword">in</span> form %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; field.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; field.label_tag &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><br><br><p>만약 폼 객체가 컨텍스트 안에 포함되어, 다른 이름을 가진 템플릿으로 전달 된다면, with  인자를 통해서, alias 설정을 할수 있습니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> "form_snippet.html" with form=common_form %&#125;</span></span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/13/Django-Forms-18%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 17편 - 폼 템플릿 작업하기-5</title>
      <link>http://djangojeng-e.github.io/2020/10/13/Django-Forms-17%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-5/</link>
      <guid>http://djangojeng-e.github.io/2020/10/13/Django-Forms-17%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-5/</guid>
      <pubDate>Tue, 13 Oct 2020 04:42:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Looping-over-hidden-and-visible-fields&quot;&gt;&lt;a href=&quot;#Looping-over-hidden-and-visible-fields&quot; class=&quot;headerlink&quot; title=&quot;Looping over hid
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Looping-over-hidden-and-visible-fields"><a href="#Looping-over-hidden-and-visible-fields" class="headerlink" title="Looping over hidden and visible fields"></a>Looping over hidden and visible fields</h2><br><p>만약 여러분들이 수동으로 폼을 템플릿안에서 레이아웃을 잡는 작업을 하고 있다면, Django 의 기본 폼 레이아웃과는 반대되게, <code>&lt;input type=&quot;hidden&quot;&gt;</code> 을 사용하여, 숨김처리가 되지 않은 필드들과 다르게 사용할수 있습니다. </p><br><p>예를들면, 숨겨진 필드들은 아무것도 출력하지 않기 때문에, 에러 메시지들을 해당 필드 옆에 출력 한다는것은 사용자들에게 혼란을 일으킬수 있을것입니다. 따라서, 이런 필드들의 에러들은 다른 방식으로 다루어 져야 합니다. </p><br><p>Django 는 숨겨진 필드와 노출된 필드들을 따로 반복할수 있게 해줍니다. </p><br><p>바로, hidden_fields() 와 visible_fields()</p> <br><p>아래 예시를 참고합니다. </p><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#123;# Include the hidden fields #&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> hidden <span class="keyword">in</span> form.hidden_fields %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="template-variable">&#123;&#123; hidden &#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="comment">&#123;# Include the visible fields #&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> field <span class="keyword">in</span> form.visible_fields %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">         </span><span class="template-variable">&#123;&#123; field.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">         </span><span class="template-variable">&#123;&#123; field.label_tag &#125;&#125;</span><span class="xml">  </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><br><p>위의 예시는, 숨겨진 필드들 안에 있는 어떤 에러도 다루지 않습니다. 보통은, 숨겨진 필드안에 있는 에러는 폼 변조를 의미할수 있습니다. 보통 폼 동작은 폼을 바꾸지 않습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/13/Django-Forms-17%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 16편 - 폼 템플릿 작업하기-4</title>
      <link>http://djangojeng-e.github.io/2020/10/12/Django-Forms-16%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-4/</link>
      <guid>http://djangojeng-e.github.io/2020/10/12/Django-Forms-16%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-4/</guid>
      <pubDate>Mon, 12 Oct 2020 01:14:01 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Looping-over-the-form’s-fields&quot;&gt;&lt;a href=&quot;#Looping-over-the-form’s-fields&quot; class=&quot;headerlink&quot; title=&quot;Looping over the form’s fields&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Looping-over-the-form’s-fields"><a href="#Looping-over-the-form’s-fields" class="headerlink" title="Looping over the form’s fields"></a>Looping over the form’s fields</h2><br><p>만약 여러분들이 각 폼 필드들을 위해 같은 HTML 테그들을 사용하고 있다면, 반복되는 코드들을 줄일수 있습니다 </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># 반복문을 사용하여 반복되는 코드를 줄일수 있습니다 </span></span><br><span class="line"><span class="xml"># </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> %&#125;</span><span class="xml"> </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># 예시 </span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> field <span class="keyword">in</span> form %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldwrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; field.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; field.lable_tag &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> field.help_text %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"help"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; field.help_text|<span class="name">safe</span> &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><br><p>반복문이 실행될때마다, 각 필드에서 사용할수 유용한 속성들이 존재 합니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span><span class="xml"> 가 포함하고 있는 유용한 속성들은 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.lable &#125;&#125;</span><span class="xml"> 필드의 레이블을 표시합니다. 예) Email Address </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml"># 필드의 label 이 적절한 HTML <span class="tag">&lt;<span class="name">label</span>&gt;</span> 태그로 감싸집니다. 이는 form 의 label_suffix 를 포함합니다. 예를들면, labe_suffix 의 기본값은 콜론입니다. </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"id_email"</span>&gt;</span>Email address:<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.id_for_label &#125;&#125;</span></span><br><span class="line"><span class="xml"># 이 필드를 위해 사용될 ID (위 예시에서는 id_email). </span></span><br><span class="line"><span class="xml"># 만약 여러분들이 label 을 수동으로 만들고 있다면, 이것을 label_tag 대신에 사용할수 있습니다 </span></span><br><span class="line"><span class="xml"># 이것또한 유용하게 사용될수 있습니다. </span></span><br><span class="line"><span class="xml"># 예를들면, 여러분들이 인라인 JavaScript 를 가지고 있고, 필드의 ID 를 하드코딩 하는것을 피하고 </span></span><br><span class="line"><span class="xml"># 싶을때처럼 말이죠 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.value &#125;&#125;</span></span><br><span class="line"><span class="xml"># 필드의 값 예) someone@example.com </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.html_name &#125;&#125;</span></span><br><span class="line"><span class="xml"># 인풋 요소의 이름 필드에 사용될 필드의 이름, 설정 되어 있다면, 폼의 접두사를 고려합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.help_text &#125;&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"># 필드와 관련된 hep text </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.errors  &#125;&#125;</span></span><br><span class="line"><span class="xml"># 필드에 해당하는 유효성 혹은 검증 에러를 가지고 있는 <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class-</span>"<span class="attr">errorlist</span>"&gt;</span>를 출력합니다 </span></span><br><span class="line"><span class="xml"># 에러의 모습을 </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> error <span class="keyword">in</span> field.errors %&#125;</span><span class="xml"> 반복문을 사용하여, 커스터마이즈 할수 있습니다. </span></span><br><span class="line"><span class="xml"># 이 경우에는, 반복문안에 각 객체들은 에러 메시지를 포함하고 있는 문자열이 됩니다. </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.is_hidden &#125;&#125;</span></span><br><span class="line"><span class="xml"># 만약 필드가 숨겨진 필드라면 True 를 반환하고, 숨겨져 잇지 않다면 False 를 반환합니다 </span></span><br><span class="line"><span class="xml"># 이것은 특출나게 템플릿 변수로써 유용하지 않습니다. 하지만 아래 예시같이 조건적인 테스트에서는</span></span><br><span class="line"><span class="xml"># 유용할수 있습니다 </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> field.is_hidden %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.field &#125;&#125;</span></span><br><span class="line"><span class="xml"># 폼 클래스로부터 필드 인스턴스로 BoundField 로 감싸집니다. </span></span><br><span class="line"><span class="xml"># Field 속성들을 엑세스하기 위해 사용합니다. 예) </span><span class="template-variable">&#123;&#123;char_field.field.max_length&#125;&#125;</span></span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/12/Django-Forms-16%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 15편 - 폼 템플릿 작업하기-3</title>
      <link>http://djangojeng-e.github.io/2020/10/11/Django-Forms-15%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-3/</link>
      <guid>http://djangojeng-e.github.io/2020/10/11/Django-Forms-15%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-3/</guid>
      <pubDate>Sun, 11 Oct 2020 09:13:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Rendering-form-error-messages&quot;&gt;&lt;a href=&quot;#Rendering-form-error-messages&quot; class=&quot;headerlink&quot; title=&quot;Rendering form error messages&quot;&gt;&lt;/a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Rendering-form-error-messages"><a href="#Rendering-form-error-messages" class="headerlink" title="Rendering form error messages"></a>Rendering form error messages</h2><br><p>폼에 에러 메시지들을 출력해줄수 있습니다. 하지만, 물론 이 부분은 유연한 추가 작업일 뿐입니다. </p><br><p>현재까지 우리는, 폼 에러들을 어떻게 출력해주어야 하는지에 대해 걱정하지 않아도 되었었습니다. </p><p><br>이번 예시에서 우리는, 각 필드에서 발생하는 에러와 폼 전체에서 발생하는 에러에 대해서 어떻게 관리 해야 하는지에 대해서 다룹니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.non_field_errors &#125;&#125;</span><span class="xml"> 가 폼의 가장 상단에 위치하고, 템플릿은 각 필드에 error 들을 조회 한다는것을 숙지 합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.필드명.errors &#125;&#125;</span><span class="xml"> 를 사용하면, 폼 에러의 리스트를 출력해 줍니다. 이는 순서가 정해지지 않은 unordered list 로 렌더 됩니다 </span></span><br><span class="line"><span class="xml">아래와 같이 보여질수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"errorlist"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sender is required.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><p>해당 리스트는 errorlist  의 CSS 클래스를 가지고, 모양을 스타일링 할수 있게 해줍니다. 만약, 여러분들이 조금 더 출력 된 에러들을 커스터마이즈 하고 싶다면, 반복문을 사용하여 이를 꾸며줄수 있습니다. </p><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> form.subject.errors %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> error <span class="keyword">in</span> form.subject.errors %&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; error|<span class="name">escape</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><br><br><p>필드 에러가 아닌것 (그리고 혹은, form.as_p) 를 사용하여, 폼의 상단에 렌더된 숨겨진 필드 에러들은 추가적인 nonfield 클래스와 함께 렌더가 됩니다. </p><p><br>이는, 특히 필드 특화된 에러들과의 구분을 도와줍니다.  예를들면, </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"errorlist nonfield"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Generic Validation error<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><p>The Forms API 를 확인하면, 에러들과, 스타일링 그리고 템플릿 안에서의 폼 속성들에 대한 것들을 확인 할수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/11/Django-Forms-15%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 14편 - 폼 템플릿 작업하기-2</title>
      <link>http://djangojeng-e.github.io/2020/10/10/Django-Forms-14%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-2/</link>
      <guid>http://djangojeng-e.github.io/2020/10/10/Django-Forms-14%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-2/</guid>
      <pubDate>Sat, 10 Oct 2020 08:35:42 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Rendering-Fields-Manually&quot;&gt;&lt;a href=&quot;#Rendering-Fields-Manually&quot; class=&quot;headerlink&quot; title=&quot;Rendering Fields Manually&quot;&gt;&lt;/a&gt;Rendering Fields Manually&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;Django 가 forms.py 에 작성된 폼들을 템플릿에 자동으로 풀어놓게 하고 싶지 않으면, 수동으로 작업하는 방법도 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;각 필드들은, form.(폼필드명) 의 형태로, 해당폼의 속성으로 존재합니다. 그리고, Django 템플릿안에서 적절하게 사용하여 렌더 될수 있습니다. &lt;/p&gt;
&lt;p&gt;예시를 들자면, 이전 포스팅에서 작성한 forms.py 와 views.py 를 기반으로 해서 예를 듭니다. &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# forms.py &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; forms &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContactForm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forms.Form)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subject = forms.CharField(max_length=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	message = forms.CharField(widget=forms.Textarea)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sender = forms.EmailField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cc_mysself = forms.BooleanField(required=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# views.py &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;form_render&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	form = ContactForm() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;string&quot;&gt;&#39;form.html&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;form&#39;&lt;/span&gt;: form&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;form.html 파일에 렌더를 수동으로 해주려면, 아래와 같이 작성해주면 됩니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Rendering-Fields-Manually"><a href="#Rendering-Fields-Manually" class="headerlink" title="Rendering Fields Manually"></a>Rendering Fields Manually</h2><br><p>Django 가 forms.py 에 작성된 폼들을 템플릿에 자동으로 풀어놓게 하고 싶지 않으면, 수동으로 작업하는 방법도 있습니다. </p><br><p>각 필드들은, form.(폼필드명) 의 형태로, 해당폼의 속성으로 존재합니다. 그리고, Django 템플릿안에서 적절하게 사용하여 렌더 될수 있습니다. </p><p>예시를 들자면, 이전 포스팅에서 작성한 forms.py 와 views.py 를 기반으로 해서 예를 듭니다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># forms.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">subject = forms.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">message = forms.CharField(widget=forms.Textarea)</span><br><span class="line">sender = forms.EmailField()</span><br><span class="line">cc_mysself = forms.BooleanField(required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">form_render</span><span class="params">(request)</span>:</span></span><br><span class="line">form = ContactForm() </span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'form.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure><br><p>form.html 파일에 렌더를 수동으로 해주려면, 아래와 같이 작성해주면 됩니다. </p><br><a id="more"></a><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; form.non_field_errors &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.subject.id_for_lable &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span> Email Subject <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.message.id_for_label &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Your messages : <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.sender.id_for_label &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Your Email Address : <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.cc_myself.id_for_label &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>CC Yourself <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><h2 id="label-tag"><a href="#label-tag" class="headerlink" title="label_tag()"></a><code>label_tag()</code></h2><br><p><code>&lt;label&gt;</code> 요소들을 <code>label_tag()</code> 를 사용하여 완성 시킬수 있습니다. 예를들면, 아래와 같이 HTML 에 작성해 주면 됩니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><p>서버를 실행 시키고, 템플릿을 확인해 보면, 아래와 같이 폼이 출력 됩니다. </p><br><img src="/2020/10/10/Django-Forms-14%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-2/image1.png" class=""><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># 이미지에서 들여다 보면, </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.subject.errors &#125;&#125;</span><span class="xml"> 는 아무것도 출력하지 않습니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.subject.label_tag &#125;&#125;</span><span class="xml"> 는, </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_subject"</span>&gt;</span>Subject<span class="tag">&lt;/<span class="name">label</span>&gt;</span> 로 출력되는걸 볼수 있습니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.subject &#125;&#125;</span><span class="xml"> 는, </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">request</span> <span class="attr">id</span>=<span class="string">"id_subject"</span>&gt;</span> 형태로 출력되는것을 확인 할수 있습니다.</span></span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/10/Django-Forms-14%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 13편 - 폼 템플릿 작업하기-1</title>
      <link>http://djangojeng-e.github.io/2020/10/09/Django-Forms-13%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-1/</link>
      <guid>http://djangojeng-e.github.io/2020/10/09/Django-Forms-13%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-1/</guid>
      <pubDate>Thu, 08 Oct 2020 23:06:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Working-with-form-templates&quot;&gt;&lt;a href=&quot;#Working-with-form-templates&quot; class=&quot;headerlink&quot; title=&quot;Working with form templates&quot;&gt;&lt;/a&gt;Working with form templates&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;폼을 템플릿으로 가져오기 위해서 해야할 모든것은, 폼 인스턴스를 템플릿 컨텍스트에 넣어주는것입니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;폼인스턴스 생성&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# views.py 에서 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;form = NameForm()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;템플릿 컨텍스트에 넣기 &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, form.html, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;form&#39;&lt;/span&gt;: form&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;p&gt;템플릿 컨텍스트에 넣어진 컨텍스트 즉, &lt;code&gt;{&amp;#39;form&amp;#39;: form}&lt;/code&gt; 은, 해당 템플릿 페이지에서, 아래와 같이 사용될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight django&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; form &amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;이렇게 하면, 템플릿에서 적절하게 label 과 input 요소들을 렌더해줄수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;Form-rendering-options&quot;&gt;&lt;a href=&quot;#Form-rendering-options&quot; class=&quot;headerlink&quot; title=&quot;Form rendering options&quot;&gt;&lt;/a&gt;Form rendering options&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;추가해야할 폼 템플릿 요소들&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;폼의 출력은 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 테그 혹은 폼의 제출 약식들을 포함하지 않는다는것을 잊지 마세요. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 태그와 &lt;code&gt;&amp;lt;submit&amp;gt;&lt;/code&gt; 태그 같은것들은 여러분들이 스스로 넣어줘야 합니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;Django 에서 Form 을 템플릿에 렌더할때에, 옵션을 붙여서 폼의 출력 형태를 바꾸어 줄수 있습니다.  &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight django&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; form.as_table &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt; 테그로 감싸진 테이블로 폼을 렌더해줍니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; form.as_p &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; 테그로 감싸진 폼을 렌더해 줍니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; form.as_ul &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt; 태그로 감싸진 폼을 렌더해 줍니다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;form.as_table 과 form.as_ul 같은 경우, 상위 태그인 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 과, &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 요소들을 여러분들 스스로 작성하고 감싸주어야 합니다. &lt;/p&gt;
&lt;br&gt;



&lt;br&gt;

&lt;h2 id=&quot;예제&quot;&gt;&lt;a href=&quot;#예제&quot; class=&quot;headerlink&quot; title=&quot;예제&quot;&gt;&lt;/a&gt;예제&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;아주 간단한 폼을 템플릿에 렌더해 보면, &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Working-with-form-templates"><a href="#Working-with-form-templates" class="headerlink" title="Working with form templates"></a>Working with form templates</h2><br><p>폼을 템플릿으로 가져오기 위해서 해야할 모든것은, 폼 인스턴스를 템플릿 컨텍스트에 넣어주는것입니다. </p><br><br><ol><li><p>폼인스턴스 생성</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py 에서 </span></span><br><span class="line">form = NameForm()</span><br></pre></td></tr></table></figure></li><li><p>템플릿 컨텍스트에 넣기 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render(request, form.html, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure></li></ol><br><p>템플릿 컨텍스트에 넣어진 컨텍스트 즉, <code>{&#39;form&#39;: form}</code> 은, 해당 템플릿 페이지에서, 아래와 같이 사용될수 있습니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; form &#125;&#125;</span></span><br></pre></td></tr></table></figure><br><p>이렇게 하면, 템플릿에서 적절하게 label 과 input 요소들을 렌더해줄수 있습니다. </p><br><br><h2 id="Form-rendering-options"><a href="#Form-rendering-options" class="headerlink" title="Form rendering options"></a>Form rendering options</h2><br><blockquote><p><strong>추가해야할 폼 템플릿 요소들</strong> </p><p>폼의 출력은 <code>&lt;form&gt;</code> 테그 혹은 폼의 제출 약식들을 포함하지 않는다는것을 잊지 마세요. </p><p><code>&lt;form&gt;</code> 태그와 <code>&lt;submit&gt;</code> 태그 같은것들은 여러분들이 스스로 넣어줘야 합니다. </p></blockquote><br><p>Django 에서 Form 을 템플릿에 렌더할때에, 옵션을 붙여서 폼의 출력 형태를 바꾸어 줄수 있습니다.  </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; form.as_table &#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span> 테그로 감싸진 테이블로 폼을 렌더해줍니다 </span></span><br><span class="line"><span class="template-variable">&#123;&#123; form.as_p &#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">p</span>&gt;</span> 테그로 감싸진 폼을 렌더해 줍니다 </span></span><br><span class="line"><span class="template-variable">&#123;&#123; form.as_ul &#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span> 태그로 감싸진 폼을 렌더해 줍니다</span></span><br></pre></td></tr></table></figure><br><p>form.as_table 과 form.as_ul 같은 경우, 상위 태그인 <code>&lt;table&gt;</code> 과, <code>&lt;ul&gt;</code> 요소들을 여러분들 스스로 작성하고 감싸주어야 합니다. </p><br><br><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><br><p>아주 간단한 폼을 템플릿에 렌더해 보면, </p><br><a id="more"></a><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># forms.py </span></span><br><span class="line"></span><br><span class="line"><span class="xml">from django import forms </span></span><br><span class="line"></span><br><span class="line"><span class="xml">class ContactForm(forms.Form):</span></span><br><span class="line"><span class="xml">subject = forms.CharField(max_length=100)</span></span><br><span class="line"><span class="xml">message = forms.CharField(widget=forms.Textarea)</span></span><br><span class="line"><span class="xml">sender = forms.EmailField()</span></span><br><span class="line"><span class="xml">cc_mysself = forms.BooleanField(required=False)</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># views.py </span></span><br><span class="line"><span class="xml">def form_render(request):</span></span><br><span class="line"><span class="xml">form = ContactForm() </span></span><br><span class="line"><span class="xml">return render(request, 'form.html', &#123;'form': form&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"># form.html 에서 </span><span class="template-variable">&#123;&#123; form.as_p &#125;&#125;</span><span class="xml"> 로 렌더를 해보면,</span></span><br><span class="line"><span class="xml"># 아래처럼 html 태그가 생성됩니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_subject"</span>&gt;</span>Subject:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"id_subject"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_message"</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">id</span>=<span class="string">"id_message"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_sender"</span>&gt;</span>Sender:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"sender"</span> <span class="attr">id</span>=<span class="string">"id_sender"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_cc_myself"</span>&gt;</span>Cc myself:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"cc_myself"</span> <span class="attr">id</span>=<span class="string">"id_cc_myself"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/09/Django-Forms-13%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 12편 - Django Form 클래스에 대해 2</title>
      <link>http://djangojeng-e.github.io/2020/10/08/Django-Forms-12%ED%8E%B8-Django-Form-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-2/</link>
      <guid>http://djangojeng-e.github.io/2020/10/08/Django-Forms-12%ED%8E%B8-Django-Form-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-2/</guid>
      <pubDate>Thu, 08 Oct 2020 00:43:30 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Fields-에-대해서&quot;&gt;&lt;a href=&quot;#Fields-에-대해서&quot; class=&quot;headerlink&quot; title=&quot;Fields 에 대해서&quot;&gt;&lt;/a&gt;Fields 에 대해서&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;이전 포스팅들에서 다루었었던 예시보다 좀더 유용한 폼을 한번 생각해 봅시다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;개인적인 웹사이트에 contact me 기능을 구현하는 폼을 생각해 봅시다. Contact Me 폼을 작성하기 위한 &lt;code&gt;forms.py&lt;/code&gt; 파일은 아래와 같이 작성될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; forms &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContactForm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forms.Form)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subject = forms.CharField(max_length=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message = forms.CharField(widget=forms.Textarea)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sender = forms.EmailField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc_myself = forms.BooleanField(required=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;이전 포스팅에서 들었었던 폼의 예시는, 하나의 필드만 사용했었습니다. your_ name 과 CharField 만 사용햇었습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;하지만, 이번 경우에는, 4가지의 필드들을 가지고 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Fields&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;FieldTypes&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;subject&lt;/td&gt;
&lt;td&gt;CharField&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;message&lt;/td&gt;
&lt;td&gt;CharField(widget=forms.Textarea)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sender&lt;/td&gt;
&lt;td&gt;EmailField&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cc_myself&lt;/td&gt;
&lt;td&gt;BooleanField&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;Widgets&quot;&gt;&lt;a href=&quot;#Widgets&quot; class=&quot;headerlink&quot; title=&quot;Widgets&quot;&gt;&lt;/a&gt;Widgets&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;각 폼의 필드는 그에 상응하는 Widget 클래스를 가지고 있습니다, 위의 예시에서는 widget=forms.Textarea 로 지정되어 &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; 같은 HTML 폼 widget 이 될것입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;대부분의 경우, 필드는 적당한 기본 widget 을 가지고 있을것입니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;예를들면, 기본값으로 CharField 는 TextInput widget 을 가질것이고, 이는 &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; 를 HTML 안에서 만들어 내줍니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;만약 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 가 필요했다면, 적절한 widget 을 Form 필드를 정의할때 지정해 주면 됩니다. 우리는 이것을 message 필드를 정의할때 지정해 주었습니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Fields-에-대해서"><a href="#Fields-에-대해서" class="headerlink" title="Fields 에 대해서"></a>Fields 에 대해서</h2><br><p>이전 포스팅들에서 다루었었던 예시보다 좀더 유용한 폼을 한번 생각해 봅시다. </p><p><br>개인적인 웹사이트에 contact me 기능을 구현하는 폼을 생각해 봅시다. Contact Me 폼을 작성하기 위한 <code>forms.py</code> 파일은 아래와 같이 작성될수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    subject = forms.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    message = forms.CharField(widget=forms.Textarea)</span><br><span class="line">    sender = forms.EmailField()</span><br><span class="line">    cc_myself = forms.BooleanField(required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><br><p>이전 포스팅에서 들었었던 폼의 예시는, 하나의 필드만 사용했었습니다. your_ name 과 CharField 만 사용햇었습니다. </p><p><br>하지만, 이번 경우에는, 4가지의 필드들을 가지고 있습니다. </p><br><table><thead><tr><th><strong>Fields</strong></th><th><strong>FieldTypes</strong></th></tr></thead><tbody><tr><td>subject</td><td>CharField</td></tr><tr><td>message</td><td>CharField(widget=forms.Textarea)</td></tr><tr><td>sender</td><td>EmailField</td></tr><tr><td>cc_myself</td><td>BooleanField</td></tr></tbody></table><br><br><h2 id="Widgets"><a href="#Widgets" class="headerlink" title="Widgets"></a>Widgets</h2><br><p>각 폼의 필드는 그에 상응하는 Widget 클래스를 가지고 있습니다, 위의 예시에서는 widget=forms.Textarea 로 지정되어 <code>&lt;input type=&quot;text&quot;&gt;</code> 같은 HTML 폼 widget 이 될것입니다. </p><br><p>대부분의 경우, 필드는 적당한 기본 widget 을 가지고 있을것입니다. </p><p><br>예를들면, 기본값으로 CharField 는 TextInput widget 을 가질것이고, 이는 <code>&lt;input type=&quot;text&quot;&gt;</code> 를 HTML 안에서 만들어 내줍니다. </p><br><p>만약 <code>&lt;textarea&gt;</code> 가 필요했다면, 적절한 widget 을 Form 필드를 정의할때 지정해 주면 됩니다. 우리는 이것을 message 필드를 정의할때 지정해 주었습니다. </p><br><br><a id="more"></a><br><h2 id="Field-Data"><a href="#Field-Data" class="headerlink" title="Field Data"></a>Field Data</h2><br><p>어떤 데이터이든 폼과 함께 제출되었고, <code>is_valid()</code> 함수를 호출하여 성공적으로 검증되었으면 (is_valid() 가 True 를 반환했을때),  </p><p><br>검증된 폼 데이터는 <code>form.cleaned_data</code> 에 사전 형태로 있을것입니다. 이 데이터는 여러분들을 위해 python 데이터 타입으로 좋게 전환되어 있습니다.  </p><br><blockquote><p><strong>NOTE</strong></p><p>우리는 여전히 검증되지 않은 데이터들을, request.POST 를 사용하여 </p><p>직접 엑세스 할수 있습니다. 하지만, 검증된 데이터를 다루는것이 더 좋습니다. </p></blockquote><br><p>위에 있는 contact form 예시에서, cc_myself 는 불리언 값이 될것 입니다. 비슷하게도, IntegerField 와 FloatField  같은 필드들은, Python 이 값을 int 와 Float 으로 전환 합니다. </p><br><h2 id="Form-데이터-처리하기"><a href="#Form-데이터-처리하기" class="headerlink" title="Form 데이터 처리하기"></a>Form 데이터 처리하기</h2><br><p>폼에서 제출된 데이터가, is_valid() 함수를 사용하여 검증이 된 데이터라고 할때, 아래 예시에서는 어떻게 폼에서 받은 데이터를 뷰에서 다룰수 있는지 간단하게 보여줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.is_valid():</span><br><span class="line">    subject = form.cleaned_data[<span class="string">'subject'</span>]</span><br><span class="line">    message = form.cleaned_data[<span class="string">'message'</span>]</span><br><span class="line">    sender = form.cleaned_data[<span class="string">'sender'</span>]</span><br><span class="line">    cc_myself = form.cleaned_data[<span class="string">'cc_myself'</span>]</span><br><span class="line">    </span><br><span class="line">    recipients = [<span class="string">'info@example.com'</span>]</span><br><span class="line">    <span class="keyword">if</span> cc_myself:</span><br><span class="line">        recipients.append(sender)</span><br><span class="line">        </span><br><span class="line">    send_mail(subject, message, sender, recipients)</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/thanks/'</span>)</span><br></pre></td></tr></table></figure><br><p>기본적으로, form.is_valid() 가 True 이면, 각 필드들에 입력된 데이터들은, <code>form.cleaned_data[&#39;subject&#39;]</code> 같은 형식에 담아져 있습니다. 이는, 검증된 폼 데이터가 form.cleaned_data  에 사전 형태로 저장되어 있기 때문입니다. </p><br><p>이 예시에서, send_mail 에 대한 구현은 다루지 않습니다. 이 send_mail 을 더 알고 싶으면, Django 에서 이메일 보내기를 더 알아야 합니다. </p><p>Sending Email 문서를 참조하면 되는데, 처음엔 무슨 소리인지 이해가지 않을겁니다. </p><br><p>몇가지 필드 타입들은 추가적인 처리가 필요할수 있습니다. 예를들면, 폼을 사용하여 업로드된 파일들은 좀 다르게 다루어질 필요가 있습니다. <br></p><p>이런 파일들은 (request.POST 보다는 request.FILES 로 조회될수 있습니다)</p><br><p>어떻게 업로드된 파일들을 다루는지에 대해서는, binding uploaded files to a form 문서를 확인하시면 됩니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/08/Django-Forms-12%ED%8E%B8-Django-Form-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-2/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
