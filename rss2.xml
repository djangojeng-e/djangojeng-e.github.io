<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Tue, 14 Jun 2022 10:47:04 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Django 간단한 투두리스트 API -  1</title>
      <link>http://djangojeng-e.github.io/2022/06/12/Django-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-API-1/</link>
      <guid>http://djangojeng-e.github.io/2022/06/12/Django-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-API-1/</guid>
      <pubDate>Sun, 12 Jun 2022 11:23:32 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;간단한-TodoList-API-로-만들기&quot;&gt;&lt;a href=&quot;#간단한-TodoList-API-로-만들기&quot; class=&quot;headerlink&quot; title=&quot;간단한 TodoList API 로 만들기&quot;&gt;&lt;/a&gt;간단한 TodoList API 로 만들기&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;Django API RESTFRAMEWORK 학습을 진행 하면서 RESTFRAMEWORK 문서에 나와 있는 튜토리얼을 하나하나 따라서 진행 하며 학습을 해보았지만. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;컨텐츠는 좋게 짜여진 튜토리얼이지만, 무언가 머리에 남는게 별로 없었다. 사실 처음 접했을때는 너무 어려웠었다. 따라서, 조금 쉬운 예제를 가지고 API 개발을 진행하면서 학습을 하기로 하였고. 여러모로 접근도 쉽고, 간편하게 짤수 있는 투두리스트 사이트를 API로 개발해 보면서, 학습을 진행해 보았다. &lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;1-project-생성-및-앱-등록&quot;&gt;&lt;a href=&quot;#1-project-생성-및-앱-등록&quot; class=&quot;headerlink&quot; title=&quot;1. project 생성 및 앱 등록&quot;&gt;&lt;/a&gt;1. project 생성 및 앱 등록&lt;/h2&gt;&lt;p&gt;가상환경과 Django 가 모두 세팅되었다고 가정하고. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;projects/todo&lt;/code&gt; 폴더를 만들고 이동후에, 아래 커맨드들을 통해 Django 프로젝트를 생성해 주었다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; todo 라는 django project 생성&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;django-admin startproject todo .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; 폴더 구조 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; ~/projects/todo  ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;manage.py  todo&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;#&lt;/span&gt;&lt;span class=&quot;bash&quot;&gt; todolist 라는 앱 생성 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;python manage.py startapp todolist &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;~/projects/todo  ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;manage.py  todo  todolist	# todolist 폴더가 생겨난다&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;br&gt;

&lt;p&gt;제대로 프로젝트가 생성이 되었고, 앱도 생성이 되었다. 다른것을 하기전에, 생성된 앱을 &lt;code&gt;todo/settings.py&lt;/code&gt; 에 &lt;code&gt;INSTALLED_APPS&lt;/code&gt; 에 추가해주었다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;INSTALLED_APPS = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.admin&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.auth&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.contenttypes&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.sessions&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.messages&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;django.contrib.staticfiles&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;todolist&#39;&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;# todolist 앱 추가 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="간단한-TodoList-API-로-만들기"><a href="#간단한-TodoList-API-로-만들기" class="headerlink" title="간단한 TodoList API 로 만들기"></a>간단한 TodoList API 로 만들기</h1><br><p>Django API RESTFRAMEWORK 학습을 진행 하면서 RESTFRAMEWORK 문서에 나와 있는 튜토리얼을 하나하나 따라서 진행 하며 학습을 해보았지만. <br></p><p>컨텐츠는 좋게 짜여진 튜토리얼이지만, 무언가 머리에 남는게 별로 없었다. 사실 처음 접했을때는 너무 어려웠었다. 따라서, 조금 쉬운 예제를 가지고 API 개발을 진행하면서 학습을 하기로 하였고. 여러모로 접근도 쉽고, 간편하게 짤수 있는 투두리스트 사이트를 API로 개발해 보면서, 학습을 진행해 보았다. </p><br><h2 id="1-project-생성-및-앱-등록"><a href="#1-project-생성-및-앱-등록" class="headerlink" title="1. project 생성 및 앱 등록"></a>1. project 생성 및 앱 등록</h2><p>가상환경과 Django 가 모두 세팅되었다고 가정하고. </p><p><code>projects/todo</code> 폴더를 만들고 이동후에, 아래 커맨드들을 통해 Django 프로젝트를 생성해 주었다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> todo 라는 django project 생성</span></span><br><span class="line">django-admin startproject todo .</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 폴더 구조 </span></span><br><span class="line"> ~/projects/todo  ls</span><br><span class="line">manage.py  todo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> todolist 라는 앱 생성 </span></span><br><span class="line">python manage.py startapp todolist </span><br><span class="line"></span><br><span class="line">~/projects/todo  ls</span><br><span class="line">manage.py  todo  todolist# todolist 폴더가 생겨난다</span><br></pre></td></tr></table></figure><br><p>제대로 프로젝트가 생성이 되었고, 앱도 생성이 되었다. 다른것을 하기전에, 생성된 앱을 <code>todo/settings.py</code> 에 <code>INSTALLED_APPS</code> 에 추가해주었다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'todolist'</span>, <span class="comment"># todolist 앱 추가 </span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><h2 id="2-Migrations-amp-Migrate"><a href="#2-Migrations-amp-Migrate" class="headerlink" title="2. Migrations &amp; Migrate"></a>2. Migrations &amp; Migrate</h2><br><p>Django 프로젝트 생성후 앱 등록후에, 데이터베이스를 생성해 주었다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations </span><br><span class="line">python manage.py migrate</span><br><span class="line">...................................</span><br><span class="line"> Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying auth.0009_alter_user_last_name_max_length... OK</span><br><span class="line">  Applying auth.0010_alter_group_name_max_length... OK</span><br><span class="line">  Applying auth.0011_update_proxy_permissions... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure><br><p>서버를 구동해서 Django 사이트가 잘 작동하는지 확인해 보자. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><br><p>서버를 실행 시킨후에, 브라우저 주소창에 <code>http://127.0.0.1:8000/</code>를 입력 하면, 아래와 같은 화면이 표시되는걸 확인할수 있다. </p><br><img src="/2022/06/12/Django-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-API-1/image1.png" class=""><br><h2 id="3-학습-목표"><a href="#3-학습-목표" class="headerlink" title="3. 학습 목표"></a>3. 학습 목표</h2><br><p>일반적인 사이트 개발이었을 경우, 다음 스텝들은 아래와 같이 그려볼수 있다. </p><br><ol><li><p>todolist 앱의 models.py 에 투두리스트에 대한 데이터 모델을 작성한다 </p></li><li><p>프로젝트 urls.py 에 todolist/urls.py 를 연결해 주고, URL 구조를 만든다. 예를들면, </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># todo/urls.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">    path(<span class="string">''</span>, include(<span class="string">'todolist.urls'</span>)), </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># todolist/urls.py (urls.py 파일을 todolist 폴더안에 생성해줘야 함)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line"><span class="comment"># path('', ) </span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li><li><p>todolist/views.py 파일에 view 를 작성하고 todolist/urls.py 에 해당 view 를 등록하여, URL 요청이 있을때 어떻게 사이트가 작동할것인지에 대한 정의를 내림 </p></li><li><p>todolist 앱을 위한 템플릿 (즉, html 웹페이지들) 을 생성하고, 어떻게 view에서 처리된 데이터가 나타나게 될지 html, css, javascript 를 사용하여 html 페이지로 표현. </p></li></ol><br><p>위 4가지를 대충만 작업하고 지나가도 시간이 너무 오래 걸리고 귀찮기 때문에 (특히, 프론트앤드). 웬만하면 API 학습 위주로만 연습을 해보기로 했다.  <br></p><p>프론트 작업 없이, 작성된 API 만 확인하는 정도라면 위 4단계를 거치지 않고 학습을 진행 할수 있을것 같다. </p><h1 id="TodoList-모델링"><a href="#TodoList-모델링" class="headerlink" title="TodoList 모델링"></a>TodoList 모델링</h1><p><br> 투두리스트 앱을 생성해 주었으니, 투두리스트 데이터 모델 부터 작성해 주기로 했다. </p><br><h2 id="1-models-py"><a href="#1-models-py" class="headerlink" title="1.models.py"></a>1.models.py</h2><br><p>우선, todolist 폴더안에 <code>models.py</code> 파일을 열고 해당 파일에 데이터베이스 모델을 작성했다.  </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User </span><br><span class="line"><span class="comment"># Django 기본 User 모델을 가져옴 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TodoList</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    user = models.ForeignKey(User, on_delete=models.CASCADE)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    content = models.TextField(blank=<span class="literal">True</span>)</span><br><span class="line">    dt_created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.title</span><br></pre></td></tr></table></figure><p><br> 하나의 투두리스트를 생성하기 위한 데이터 정보들을 모델링 해주었다. 간단하게 각 필드에 대해 짚고 넘어가자면,  </p><br><ol><li><code>user</code> : 투두리스트를 작성한 사용자 정보 </li><li><code>title</code> : 투두리스트의 타이틀 (제목)</li><li><code>content</code> : 투두리스트의 상세정보 </li><li><code>dt_created</code> : 투두리스트 생성날짜와 시간 </li></ol><br> <h2 id="2-Migrations-amp-Migrate-1"><a href="#2-Migrations-amp-Migrate-1" class="headerlink" title="2. Migrations &amp; Migrate"></a>2. Migrations &amp; Migrate</h2><br><p>모델을 작성 하였으니, 데이터베이스에 모델을 적용해 보았다.  </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python manage.py makemigrations </span></span><br><span class="line"></span><br><span class="line">Migrations for 'todolist':</span><br><span class="line">  todolist/migrations/0001_initial.py</span><br><span class="line">    - Create model TodoList</span><br><span class="line">    </span><br><span class="line"><span class="meta">#</span><span class="bash"> python manage.py migrate</span></span><br><span class="line"></span><br><span class="line">.................................</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying todolist.0001_initial... OK</span><br></pre></td></tr></table></figure><br><h2 id="3-Superuser-생성-하기"><a href="#3-Superuser-생성-하기" class="headerlink" title="3. Superuser 생성 하기"></a>3. Superuser 생성 하기</h2><br><p>데이터를 생성하기 위해 관리자 계정 (Superuser) 하나를 생성해 주었다.  </p><p>터미널에 아래 명령어를 실행해서, 관리자 계정을 생성하였다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> python manage.py createsuperuser</span></span><br><span class="line">Username (leave blank to use 'user'): todolist</span><br><span class="line">Email address: </span><br><span class="line">Password: </span><br><span class="line">Password (again): </span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><br><p>관리자 계정을 생성해 주었으니, Django 관리자 페이지로 들어가 보았다. <code>python manage.py runserver</code> 명령어를 실행시켜서 서버를 구동시키고,  브라우저에서 <code>http://127.0.0.1:8000/admin</code> 로 접속해 보면, 어드민 페이지로 들어갈수 있다. </p><br><img src="/2022/06/12/Django-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-API-1/image2.png" class=""><br><p>생성된 superuser 아이디를 입력해서 어드민 페이지로 로그인 하면, 아래와 같이 어드민 페이지로 접속이 된다. </p><br><img src="/2022/06/12/Django-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-API-1/image3.png" class=""><br><p>아직 기본 어드민에 어떠한 메뉴도 추가해주지 않았으므로, 현재 작성된 투두리스트 모델을 통해 데이터 생성은 어드민에서 할수가 없다. </p><br><h2 id="4-어드민에-TodoList-메뉴-추가해주기"><a href="#4-어드민에-TodoList-메뉴-추가해주기" class="headerlink" title="4. 어드민에 TodoList 메뉴 추가해주기"></a>4. 어드민에 TodoList 메뉴 추가해주기</h2><br><p>todolist 앱에 models.py 파일에 투두리스트 모델을 작성해 주었다. 이제 해당 모델을 통해 어드민에서 데이터를 생성, 수정, 갱신, 삭제 동작을 할수 있도록 TodoList 모델을 어드민에 등록해 보도록 한다. </p><br><p>어드민에 작성된 모델을 등록하려면, todolist 폴더안에 admin.py 파일에 작성된 모델 정보를 등록해 주면 된다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># todolist/admin.py </span></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin</span><br><span class="line"></span><br><span class="line"><span class="comment"># Register your models here.</span></span><br><span class="line"><span class="comment"># 모델에서 TodoList 모델을 가져옴 </span></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> TodoList </span><br><span class="line"></span><br><span class="line"><span class="comment"># 어드민 사이트에 TodoList 모델을 등록 </span></span><br><span class="line">admin.site.register(TodoList)</span><br></pre></td></tr></table></figure><br><p>admin.py 파일을 위와 같이 작성해 준다음, admin 에 다시 접속해 보면, 아래와 같이 TodoList 모델이 등록되어 있는것을 확인할수 있다. </p><br><img src="/2022/06/12/Django-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-API-1/image4.png" class=""><br><p>TODOLIST 탭아래 Todolists 를 클릭해주면, ADD TODO LIST 버튼이 오른쪽 위에 존재하고. </p><br><img src="/2022/06/12/Django-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-API-1/image5.png" class=""><br><p>ADD TODO LIST 버튼을 클릭하면, 어드민에서 Todolist 를 생성해 줄수 있다. </p><br><img src="/2022/06/12/Django-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-API-1/image6.png" class=""><br><h1 id="TodoList-데이터-생성"><a href="#TodoList-데이터-생성" class="headerlink" title="TodoList 데이터 생성"></a>TodoList 데이터 생성</h1><br><p>models.py 에 데이터베이스 모델을 정의해 주었는데. 정의된 대로, 데이터를 한번 생성해 보았다. 데이터를 생성하는 방법에는 두가지가 있는데. shell 과 admin을 이용해서 데이터를 추가해줄수 있다.  </p><br><ol><li>shell 에서 데이터를 추가 </li><li>admin 에서 데이터를 추가 </li></ol><br><h2 id="1-shell-로-데이터-추가해주기"><a href="#1-shell-로-데이터-추가해주기" class="headerlink" title="1. shell 로 데이터 추가해주기"></a>1. shell 로 데이터 추가해주기</h2><br><p>shell 로 데이터를 추가해 주려면, 커맨드라인에서 django shell 로 들어가야 한다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">~/projects/todo  python manage.py shell</span><br><span class="line">Python 3.8.0 (default, May 11 2020, 19:08:02) </span><br><span class="line">Type 'copyright', 'credits' or 'license' for more information</span><br><span class="line">IPython 7.14.0 -- An enhanced Interactive Python. Type '?' for help.</span><br><span class="line"></span><br><span class="line">In [1]:</span><br></pre></td></tr></table></figure><br><p>shell 의 모양이, 기본 모습과 다른데. 이건 <code>django-extension</code> 을 설치해줘서 모양이 바뀐것 같다. </p><br><p>투두리스트 하나를 생성할때 필요한 필드들은, 모델에 정의해 준대로. <code>user</code>, <code>title</code>, <code>content</code>, <code>dt_created</code> 가 있는데. </p><br><p><code>dt_created</code> 는 생성된 날짜와 시간을 기록하는 필드로, <code>auto_now=True</code> 로 설정해 주었기에, 직접 입력을 하지않아도 자동으로 현재 날짜와 시간값으로 생성이 된다. 따라서, 하나의 투두리스트를 shell 로 생성해 주려면, 아래 명령어를 shell 에 입력하면 된다. </p><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">1</span>]: from todolist.models import TodoList          </span><br><span class="line"></span><br><span class="line"><span class="comment"># 사용자 정보를 가져오기 위해, User 모델을 가져옴 </span></span><br><span class="line"><span class="keyword">In</span> [<span class="number">2</span>]: from django.contrib.auth.models import User   </span><br><span class="line"></span><br><span class="line"><span class="comment"># 관리자는 첫번째 사용자임으로, id=1 로 생성된 사용자를 가져옴 </span></span><br><span class="line"><span class="keyword">In</span> [<span class="number">3</span>]: user = User.objects.get(id=<span class="number">1</span>)                 </span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">4</span>]: user                                          </span><br><span class="line">Out[<span class="number">4</span>]: &lt;User: todolist&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># objects.create 메소드를 통해 데이터 생성, 사용자는 위에서 찾은 첫번째 사용자. 즉, 관리자. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">5</span>]: TodoList.objects.create(user=user, title=<span class="string">"Djan</span></span><br><span class="line"><span class="string">   ...: go API 학습하기"</span>, content=<span class="string">"간단한 예제를 통해 </span></span><br><span class="line"><span class="string">   ...: API 학습 해보자."</span>)                            </span><br><span class="line">Out[<span class="number">5</span>]: &lt;TodoList: Django API 학습하기&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 생성된 데이터 조회</span></span><br><span class="line"><span class="keyword">In</span> [<span class="number">6</span>]: TodoList.objects.all()                        </span><br><span class="line">Out[<span class="number">6</span>]: &lt;QuerySet [&lt;<span class="type">TodoList</span>: <span class="type">Django</span> <span class="type">API</span> 학습하기&gt;]&gt;</span><br></pre></td></tr></table></figure><br><p>TodoList 데이터가 생성된것을 확인할수 있었다.  Admin 에서도 생성해줄수 있는데.  어드민 페이지에 접속한후에, </p><br><img src="/2022/06/12/Django-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-API-1/image6.png" class=""><br><p>화면에 나온 값들을 입력한뒤, Save 버튼을 눌러주면 생성된다. </p><br><h2 id="2-Django-seed-를-이용해서-데이터-채워주기"><a href="#2-Django-seed-를-이용해서-데이터-채워주기" class="headerlink" title="2. Django-seed 를 이용해서 데이터 채워주기"></a>2. Django-seed 를 이용해서 데이터 채워주기</h2><br><p>예시 데이터를 채우기 위해서, shell 이나 admin 에 접속하여 일일이 하나씩 데이터를 생성해주는것은 너무 귀찮은 일이다. 만약 예시 데이터를 50개정도 추가해서 데이터를 보려 한다면, 50번을 위 과정을 거쳐야 함으로 매우 비효율적이다. </p><br><p>다행히도, Django 패키지 중에는 예시 데이터를 자동으로 생성해주는 패키지가 존재하는데. 책에서만 읽어 보았고, 직접 사용해 보지는 않았었기 때문에. 이번 연습때 한번 사용해 보도록 했다. </p><br><blockquote><p><a href="https://pypi.org/project/django-seed/#installation" target="_blank" rel="noopener">https://pypi.org/project/django-seed/#installation</a> </p><p>pypi 페이지에 가면, django-seed 설치와 사용법에 대해 나와 있다. </p></blockquote><br><p>우선, <code>pip install django-seed</code> 를 커맨드 라인에 입력하여, 패키지를 설치해주고. <code>settings.py</code> 파일에 <code>INSTALLED_APPS</code> 에 설치한 앱을 등록해 보았다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">pip install django-seed </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> settings.py </span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    'django.contrib.admin',</span><br><span class="line">    'django.contrib.auth',</span><br><span class="line">    'django.contrib.contenttypes',</span><br><span class="line">    'django.contrib.sessions',</span><br><span class="line">    'django.contrib.messages',</span><br><span class="line">    'django.contrib.staticfiles',</span><br><span class="line"></span><br><span class="line">    'todolist',</span><br><span class="line">    # django-seed 등록 </span><br><span class="line">    'django_seed',    </span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p>공식문서를 보면, <code>django-seed</code> 의 사용법은 아래와 같다. </p><br><p><code>python manage.py seed &lt;앱이름&gt; --number=&lt;생성 데이터 갯수&gt;</code></p><br><p>이 사용법을 TodoList 앱에 적용해 사용해 보기 위해, 커맨드라인에 아래 명령어를 입력해 주었다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 10개의 데이터를 생성 </span></span><br><span class="line">python manage.py seed todolist --number=10</span><br><span class="line"></span><br><span class="line">Model User generated record with primary key 2</span><br><span class="line">Model User generated record with primary key 3</span><br><span class="line">Model User generated record with primary key 4</span><br><span class="line">Model User generated record with primary key 5</span><br><span class="line">Model User generated record with primary key 6</span><br><span class="line">Model User generated record with primary key 7</span><br><span class="line">Model User generated record with primary key 8</span><br><span class="line">Model User generated record with primary key 9</span><br><span class="line">Model User generated record with primary key 10</span><br><span class="line">Model User generated record with primary key 11</span><br><span class="line">Model TodoList generated record with primary key 2</span><br><span class="line">Model TodoList generated record with primary key 3</span><br><span class="line">Model TodoList generated record with primary key 4</span><br><span class="line">Model TodoList generated record with primary key 5</span><br><span class="line">Model TodoList generated record with primary key 6</span><br><span class="line">Model TodoList generated record with primary key 7</span><br><span class="line">Model TodoList generated record with primary key 8</span><br><span class="line">Model TodoList generated record with primary key 9</span><br><span class="line">Model TodoList generated record with primary key 10</span><br><span class="line">Model TodoList generated record with primary key 11</span><br></pre></td></tr></table></figure><br><p>커맨드라인에 몇가지 에러가 출력된것 같은데,, 결과적으론 10명의 User 와 10개의 투두리스트가 생성된것 같다. 생성된지 아닌지 확인해 보기 위해, 빠르게 shell  로 접속해서 데이터를 조회해 보았다. </p><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell </span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">1</span>]: from todolist.models import TodoList          </span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">2</span>]: TodoList.objects.all()                        </span><br><span class="line">Out[<span class="number">2</span>]: &lt;QuerySet [&lt;<span class="type">TodoList</span>: <span class="type">Django</span> <span class="type">API</span> 학습하기&gt;, &lt;<span class="type">TodoList</span>: <span class="type">Law</span> <span class="type">machine</span> <span class="type">movement</span> <span class="type">these</span> <span class="type">effort</span> <span class="type">that</span> <span class="type">themselves.</span>&gt;, &lt;<span class="type">TodoList</span>: <span class="type">Start</span> <span class="type">listen</span> <span class="type">firm</span> <span class="type">trouble</span> <span class="type">defense</span> <span class="type">husband</span> <span class="type">collection.</span>&gt;, &lt;<span class="type">TodoList</span>: <span class="type">Really</span> <span class="type">first</span> <span class="type">product</span> <span class="type">new</span> <span class="type">no.</span>&gt;, &lt;<span class="type">TodoList</span>: <span class="type">Skin</span> <span class="type">name</span> <span class="type">certainly</span> <span class="type">peace.</span>&gt;, &lt;<span class="type">TodoList</span>: <span class="type">Society</span> <span class="type">as</span> <span class="type">similar</span> <span class="type">change</span> <span class="type">team</span> <span class="type">model</span> <span class="type">agency.</span>&gt;, &lt;<span class="type">TodoList</span>: <span class="type">Prove</span> <span class="type">dog</span> <span class="type">page</span> <span class="type">rest</span> <span class="type">cover</span> <span class="type">else.</span>&gt;, &lt;<span class="type">TodoList</span>: <span class="type">Deal</span> <span class="type">test</span> <span class="type">only</span> <span class="type">exist</span> <span class="type">without</span> <span class="type">yourself.</span>&gt;, &lt;<span class="type">TodoList</span>: <span class="type">Letter</span> <span class="type">operation</span> <span class="type">run</span> <span class="type">political</span> <span class="type">require.</span>&gt;, &lt;<span class="type">TodoList</span>: <span class="type">Level</span> <span class="type">truth</span> <span class="type">green</span> <span class="type">than</span> <span class="type">defense</span> <span class="type">industry</span> <span class="type">Mrs.</span>&gt;, &lt;<span class="type">TodoList</span>: <span class="type">Help</span> <span class="type">direction</span> <span class="type">top</span> <span class="type">task</span> <span class="type">enough</span> <span class="type">scientist.</span>&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># TodoList 데이터의 갯수를 출력 </span></span><br><span class="line"><span class="keyword">In</span> [<span class="number">3</span>]: TodoList.objects.count()                      </span><br><span class="line">Out[<span class="number">3</span>]: <span class="number">11</span></span><br></pre></td></tr></table></figure><br><p>shell 에서 조회해 보니, TodoList 데이터 10개가 자동으로 생성된것을 확인할수 있었다. </p><p>이제 본격적으로 API를 만들어서 이렇게 생성된 데이터들을 생성, 조회, 갱신, 삭제 할수 있는지 알아볼수 있을것 같다.  </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2022/06/12/Django-%EA%B0%84%EB%8B%A8%ED%95%9C-%ED%88%AC%EB%91%90%EB%A6%AC%EC%8A%A4%ED%8A%B8-API-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django API Fundamentals</title>
      <link>http://djangojeng-e.github.io/2022/06/10/Django-API-Fundamentals/</link>
      <guid>http://djangojeng-e.github.io/2022/06/10/Django-API-Fundamentals/</guid>
      <pubDate>Fri, 10 Jun 2022 11:53:32 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Fundamental-Terms&quot;&gt;&lt;a href=&quot;#Fundamental-Terms&quot; class=&quot;headerlink&quot; title=&quot;Fundamental Terms&quot;&gt;&lt;/a&gt;Fundamental Terms&lt;/h1&gt;&lt;br&gt;



&lt;p&gt;Django API 공부를 시작하기 전에, 알아야 할 기본적인 terminology 를 정리해 보았다. &lt;/p&gt;
&lt;p&gt;API 공부를 시작하기전에는 잘 몰랐던 단어들과 컨셉을 다시 정리해 본다. &lt;/p&gt;
&lt;br&gt;



&lt;h2 id=&quot;1-HTTP-VERBS&quot;&gt;&lt;a href=&quot;#1-HTTP-VERBS&quot; class=&quot;headerlink&quot; title=&quot;1. HTTP VERBS&quot;&gt;&lt;/a&gt;1. HTTP VERBS&lt;/h2&gt;&lt;br&gt;



&lt;p&gt;HTTP 프로토콜은 &lt;code&gt;요청 방법&lt;/code&gt; 이라는것이 존재한다. 각 요청은 &lt;code&gt;request method&lt;/code&gt; 라는 요청 방법을 가지고 있어서, 요청 방법에 따라 CRUD 연산이 가능하다. &lt;/p&gt;
&lt;p&gt;CRUD 는 웹개발에서 너무 기본적인 텀이지만, Create, Read, Update, Delete 의 앞 글자들을 따서 만들어진 단어라고 볼수 있다. &lt;/p&gt;
&lt;br&gt;



&lt;p&gt;가장 흔한 4개의 요청 방법은, 아래와 같다. &lt;/p&gt;
&lt;br&gt;



&lt;ol&gt;
&lt;li&gt;POST &lt;/li&gt;
&lt;li&gt;GET&lt;/li&gt;
&lt;li&gt;PUT&lt;/li&gt;
&lt;li&gt;DELETE &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;



&lt;p&gt;이 요청 방법들을 &lt;code&gt;HTTP Verbs&lt;/code&gt; 라고 부르는데, 영어 단어 verbs 는 동사라는 뜻을 가지고 있고. HTTP 가 가진 동사 (포스트 하다, 겟 하다, 풋 하다, 딜리트 하다, ~~하다 라는 동사) 라고 해서 &lt;code&gt;HTTP Verbs&lt;/code&gt; 라고 불리우는것 같다. &lt;/p&gt;
&lt;br&gt;



&lt;p&gt;보통 이 동사들은, 각각의 CRUD 동작과 매칭이 되는데. 각 동작들이 어떤 HTTP VERB 들과 매칭이 되는지 테이블로 정리해 보았다.  &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CRUD (Create, Read, Update, Delete)&lt;/th&gt;
&lt;th&gt;HTTP Verbs&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Create (생성)&lt;/td&gt;
&lt;td&gt;POST&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Read (읽기)&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update (갱신)&lt;/td&gt;
&lt;td&gt;PUT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Delete (삭제)&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&quot;2-Endpoints&quot;&gt;&lt;a href=&quot;#2-Endpoints&quot; class=&quot;headerlink&quot; title=&quot;2. Endpoints&quot;&gt;&lt;/a&gt;2. Endpoints&lt;/h2&gt;&lt;br&gt;



&lt;p&gt;REST FRAMEWORK 튜토리얼을 따라했었을때, 몰랐던 단어가 바로 이 &lt;code&gt;endpoints&lt;/code&gt; 였다. &lt;/p&gt;
&lt;br&gt;



&lt;blockquote&gt;
&lt;p&gt;Endpoints 가 무엇인지 이해하려면, URL 부터 알아야 한다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;



&lt;p&gt;거의 모든 웹페이지는 HTML, CSS, JavaScript 혹은 다른 element 와 함께 구성이 되어 있고. 해당 웹페이지를 위한 URL 이 존재한다. &lt;/p&gt;
&lt;p&gt;예를들면, &lt;code&gt;mysite.com.au/page/1&lt;/code&gt; 이라는 URL 주소가 존재할때, 해당 URL 을 브라우저 주소창에 입력하면 웹페이지가 화면에 출력이 된다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Fundamental-Terms"><a href="#Fundamental-Terms" class="headerlink" title="Fundamental Terms"></a>Fundamental Terms</h1><br><p>Django API 공부를 시작하기 전에, 알아야 할 기본적인 terminology 를 정리해 보았다. </p><p>API 공부를 시작하기전에는 잘 몰랐던 단어들과 컨셉을 다시 정리해 본다. </p><br><h2 id="1-HTTP-VERBS"><a href="#1-HTTP-VERBS" class="headerlink" title="1. HTTP VERBS"></a>1. HTTP VERBS</h2><br><p>HTTP 프로토콜은 <code>요청 방법</code> 이라는것이 존재한다. 각 요청은 <code>request method</code> 라는 요청 방법을 가지고 있어서, 요청 방법에 따라 CRUD 연산이 가능하다. </p><p>CRUD 는 웹개발에서 너무 기본적인 텀이지만, Create, Read, Update, Delete 의 앞 글자들을 따서 만들어진 단어라고 볼수 있다. </p><br><p>가장 흔한 4개의 요청 방법은, 아래와 같다. </p><br><ol><li>POST </li><li>GET</li><li>PUT</li><li>DELETE </li></ol><br><p>이 요청 방법들을 <code>HTTP Verbs</code> 라고 부르는데, 영어 단어 verbs 는 동사라는 뜻을 가지고 있고. HTTP 가 가진 동사 (포스트 하다, 겟 하다, 풋 하다, 딜리트 하다, ~~하다 라는 동사) 라고 해서 <code>HTTP Verbs</code> 라고 불리우는것 같다. </p><br><p>보통 이 동사들은, 각각의 CRUD 동작과 매칭이 되는데. 각 동작들이 어떤 HTTP VERB 들과 매칭이 되는지 테이블로 정리해 보았다.  </p><p><br><br></p><table><thead><tr><th>CRUD (Create, Read, Update, Delete)</th><th>HTTP Verbs</th></tr></thead><tbody><tr><td>Create (생성)</td><td>POST</td></tr><tr><td>Read (읽기)</td><td>GET</td></tr><tr><td>Update (갱신)</td><td>PUT</td></tr><tr><td>Delete (삭제)</td><td></td></tr></tbody></table><h2 id="2-Endpoints"><a href="#2-Endpoints" class="headerlink" title="2. Endpoints"></a>2. Endpoints</h2><br><p>REST FRAMEWORK 튜토리얼을 따라했었을때, 몰랐던 단어가 바로 이 <code>endpoints</code> 였다. </p><br><blockquote><p>Endpoints 가 무엇인지 이해하려면, URL 부터 알아야 한다. </p></blockquote><br><p>거의 모든 웹페이지는 HTML, CSS, JavaScript 혹은 다른 element 와 함께 구성이 되어 있고. 해당 웹페이지를 위한 URL 이 존재한다. </p><p>예를들면, <code>mysite.com.au/page/1</code> 이라는 URL 주소가 존재할때, 해당 URL 을 브라우저 주소창에 입력하면 웹페이지가 화면에 출력이 된다. </p><br><a id="more"></a><br><p><code>웹 API</code>도 같은 개념인데, 예를들어 <code>mysite.com.au/page/api/1</code> 이라는 특정 API를 호출하는 URL이 존재한다고 가정했을때. </p><p>이 URL을 호출했을 경우, 보통의 웹페이지가 화면에 출력되는 대신에, <code>API endpoints</code> 가 생성된다.   </p><br><blockquote><p><code>mysite.com/page/api/1</code> </p><p>이라는 URL 을 호출하면, API endpoints 를 생성한다.</p><p>하나의 <code>endpoint</code> 는 보통 JSON 포맷으로 된 데이터와 동작 가능한 <code>HTTP verbs</code> 정보를 가지고 있다.  </p></blockquote><br><p>간단한 투두 리스트를 위한 <code>mytodolist.com</code> 이라는 사이트가 있다고 가정했을때. 아래와 같은 <code>api endpoints</code>를 만들어 볼수 있다. </p><ol><li><code>https://mytodolist.com/api/list</code> - 모든 투두리스트의 정보를 반환 </li><li><code>https://mytodolist.com/api/detail/1</code> - 투두리스트중 id 값이 1 인 투두리스트의 디테일을 반환</li></ol><br> <p>위의 두가지 endpoint 는 모두 GET 요청으로, 두가지 모두 정보만 조회하는 개념이지만, 요청 방법을 POST, PUT, DELETE 로 만든다면, 생성, 수정, 삭제 도 가능하다. </p><p><strong>URL 을 가지고 화면에 웹페이지를 보여주는것 대신에, 특정 데이터들을 생성, 조회, 갱신, 삭제 같은 동작을 행할수 있다.</strong> </p><br><h2 id="3-Status-Codes-상태코드"><a href="#3-Status-Codes-상태코드" class="headerlink" title="3. Status Codes (상태코드)"></a>3. Status Codes (상태코드)</h2><br><p>우리가 웹브라우저를 사용하여 url을 통해 <code>HTTP 요청 (HTTP REQUEST)</code> 을 보내면, 해당 요청에 대한 <code>HTTP 응답 (HTTP RESPONSE)</code> 에 상태 코드를 가지고 있어서. 어떤 결과가 나왔는지 유추해 볼수 있다. </p><br><p>상태 코드는 꽤나 많은 종류가 있는데, 모든 상태 코드를 다 외우기 보다는 보편적인 코드들을 알고 지나가고 나중에 필요에 의해 상태 코드들을 더 알아보는것이 좋다. </p><p>상태 코드는, <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status" target="_blank" rel="noopener">https://developer.mozilla.org/en-US/docs/Web/HTTP/Status</a> 에서 확인해 볼수 있다. </p><br><p>현재 중요한것은 보편적인 상태 코드 종류를 이해하는것이 중요한데. 상태 코드가 어떤 숫자로 시작하는가에 따라서, 요청에 대한 응답이 어떤 상태인지 쉽게 파악할수가 있다. </p><p>아래 표에 가장 보편적인 상태 코드들에 대해서 정리를 해보았다. </p><br><table><thead><tr><th>상태코드</th><th>결과</th><th>비고</th></tr></thead><tbody><tr><td>2xx (상태코드가 2로 시작하는 경우)</td><td>성공</td><td>클라이언트가 요청한 동작이 정상적으로 받아졌고, 이해되었고, 접수가 완료 되었음</td></tr><tr><td>3xx (상태코드가 3 으로 시작하는 경우)</td><td>리다이렉션</td><td>요청된 URL 이 옮겨졌음</td></tr><tr><td>4xx (상태코드가 4 로 시작하는 경우)</td><td>에러</td><td>에러가 발생함. 보통은 클라이언트가 잘못된 URL 요청을 했을때 발생.</td></tr><tr><td>5xx (상태코드가 5 로 시작하는 경우)</td><td>에러</td><td>서버가 요청을 처리할수 없음.</td></tr></tbody></table><br><p>Django 개발을 하면서 가장 많이 접할 상태코드는, 아래와 같다. </p><br><ol><li>200 - 성공 </li><li>201 - 생성됨 </li><li>404 - 404 Error  </li><li>500 - 서버 에러 </li></ol><br><p>이런 상태값은 서버를 구동하고 브라우저를 통해 요청들을 넣었을때, 터미널에 표시되기도 한다. </p><h1 id="4-REST"><a href="#4-REST" class="headerlink" title="4. REST"></a>4. REST</h1><br><p>REST FRAMEWORK 이라고 해서, 왜 REST 라는 단어가 API 개발에 들어가는지 이해를 할수가 없었다. </p><br><blockquote><p>REST 는 </p><p><code>REpresentational State Transfer(REST)</code> 의 줄임말이다. </p></blockquote><br><p><code>REST</code> 는 2000년대에 생겨난 방법으로, 웹상에서 API 를 만드는 방법을 의미한다. 즉, HTTP protocol 위에 API를 만드는 방식이다. </p><br><p>이런 특성을 가진 API 를 RESTFul API 라고 표현을 하는데. 모든 RESTful API는 아래와 같은 특성을 가지고 있다. </p><br><ol><li>HTTP 처럼 상태가 없다 (stateless). 이를 무상태라고 하는데 클라이언트와 서버 관계에서 서버가 클라이언트의 상태를 보존하지 않다는것을 의미한다. </li><li>보편적인 HTTP verbs 를 지원한다. HTTP verbs 는 보통 (GET, POST, PUT, DELETE)</li><li>JSON 이나 XML 포맷으로 데이터를 반환한다.  </li></ol><br><p>보통 RESTful API 이라 함은 위의 세가지 특성을 가진, HTTP 프로토콜 위에 얹혀서 만들어진 API를 의미한다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2022/06/10/Django-API-Fundamentals/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-36편- view vs viewsets</title>
      <link>http://djangojeng-e.github.io/2020/12/30/DRF-Tutorial-36%ED%8E%B8-view-vs-viewsets/</link>
      <guid>http://djangojeng-e.github.io/2020/12/30/DRF-Tutorial-36%ED%8E%B8-view-vs-viewsets/</guid>
      <pubDate>Wed, 30 Dec 2020 08:28:50 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Trade-offs-between-views-vs-viewsets&quot;&gt;&lt;a href=&quot;#Trade-offs-between-views-vs-viewsets&quot; class=&quot;headerlink&quot; title=&quot;Trade-offs between v
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Trade-offs-between-views-vs-viewsets"><a href="#Trade-offs-between-views-vs-viewsets" class="headerlink" title="Trade-offs between views vs viewsets"></a>Trade-offs between views vs viewsets</h2><br><p>viewsets 를 사용하는것은 매우 유용할수 있습니다. </p><br><p>viewsets 는 여러분의 API 에 결쳐있는 URL 이름들이 일관성을 가지게 해주고, 작성해야 하는 코드를 최소화 해줍니다. </p><br><p>그리고 작동과 표시를 해주는것을 좀 더 단단하게 해줍니다. </p><br><p>하지만, 이는 언제나 맞는 접근방식이라는 뜻은 아닙니다. 클래스기반 뷰를 사용하는것과 함수 기반 뷰를 사용할때의 장단점을 비교해보는것과 비슷합니다. </p><br><p>viewsets 를 사용하는것으로, 개별적으로 views 를 만드는것보다 덜 명시적입니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/30/DRF-Tutorial-36%ED%8E%B8-view-vs-viewsets/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-35편- Router 사용하기</title>
      <link>http://djangojeng-e.github.io/2020/12/29/DRF-Tutorial-35%ED%8E%B8-Router-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/29/DRF-Tutorial-35%ED%8E%B8-Router-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 29 Dec 2020 06:16:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Using-Routers&quot;&gt;&lt;a href=&quot;#Using-Routers&quot; class=&quot;headerlink&quot; title=&quot;Using Routers&quot;&gt;&lt;/a&gt;Using Routers&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;우리는 View 클래스들 대신에 Vi
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Using-Routers"><a href="#Using-Routers" class="headerlink" title="Using Routers"></a>Using Routers</h2><br><p>우리는 View 클래스들 대신에 ViewSet 클래스들을 사용하고 있기 때문에, 우리는 사실 우리 스스로 URL Conf 를 딪인해줄 필요가 없습니다. <br></p><br><p>관례적으로, 리소스들을 views 와 urls 에 묶어주는것은 Router 를 사용함으로써 자동으로 다루어 지게 할수 있습니다. 우리가 해야할것은, 적절한 뷰 세트들을 router 에 등록해 주는것입니다. </p><br><p>snippets/urls.py 파일을 아래와 같이 수정해 줍시다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include </span><br><span class="line"><span class="keyword">from</span> rest_framework.routers <span class="keyword">import</span> DefaultRouter </span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views </span><br><span class="line"></span><br><span class="line"><span class="comment"># create a router and register our viewsets with it </span></span><br><span class="line"></span><br><span class="line">router = DefaultRouter()</span><br><span class="line">router.register(<span class="string">r'snippets'</span>, views.SnippetViewSet)</span><br><span class="line">router.register(<span class="string">r'users'</span>, views.UserViewSet)</span><br><span class="line"></span><br><span class="line"><span class="comment"># The API URLs are now determined automatically by the router </span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, include(router.urls)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p>뷰셋들을 라우터와 등록해주는것은 urlpattern 을 제공해주는것과 비슷합니다. </p><br><p>우리는 두개의 인자를 포함해 줍니다 - 뷰를 위한 URL prefix 와 뷰셋 그자체. </p><br><p>우리가 사용하는 DefaultRour 클래스는 자동으로 API root 뷰를 생성해줍니다. 따라서, 우리는 api_root 메서드를 우리 view 모듈에서 지워줄수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/29/DRF-Tutorial-35%ED%8E%B8-Router-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-34편- URLs에 명시적으로 ViewSets 묶어주기</title>
      <link>http://djangojeng-e.github.io/2020/12/28/DRF-Tutorial-34%ED%8E%B8-URLs%EC%97%90-%EB%AA%85%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-ViewSets-%EB%AC%B6%EC%96%B4%EC%A3%BC%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/28/DRF-Tutorial-34%ED%8E%B8-URLs%EC%97%90-%EB%AA%85%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-ViewSets-%EB%AC%B6%EC%96%B4%EC%A3%BC%EA%B8%B0/</guid>
      <pubDate>Mon, 28 Dec 2020 00:48:54 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Binding-ViewSets-to-URLs-explicitly&quot;&gt;&lt;a href=&quot;#Binding-ViewSets-to-URLs-explicitly&quot; class=&quot;headerlink&quot; title=&quot;Binding ViewSets to UR
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Binding-ViewSets-to-URLs-explicitly"><a href="#Binding-ViewSets-to-URLs-explicitly" class="headerlink" title="Binding ViewSets to URLs explicitly"></a>Binding ViewSets to URLs explicitly</h2><br><p>handler 메서드들은 URL Conf 를 정의할때에만 동작들에 묶여집니다. </p><br><p>무슨일이 일어나는지 보기 위해, 명시적으로 ViewSets 로 부터, View 의 세트를 생성해 줍니다. </p><br><p><code>snippets/urls.py</code> 파일안에, 우리의 ViewSet 클래스들을 묶어줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.views <span class="keyword">import</span> SnippetViewSet, UserViewSet, api_root </span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers </span><br><span class="line"></span><br><span class="line">snippet_list = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>: <span class="string">'list'</span>,</span><br><span class="line">    <span class="string">'post'</span>: <span class="string">'create'</span></span><br><span class="line">&#125;)</span><br><span class="line">snippet_detail = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>:<span class="string">' retrieve'</span>,</span><br><span class="line">    <span class="string">'put'</span>: <span class="string">'update'</span>,</span><br><span class="line">    <span class="string">'patch'</span>: <span class="string">'partial_update'</span>,</span><br><span class="line">    <span class="string">'delete'</span>: <span class="string">'destroy'</span></span><br><span class="line">&#125;)</span><br><span class="line">snippet_highlight = SnippetViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>: <span class="string">'highlight'</span></span><br><span class="line">&#125;, renderer_classes=[renderers.StaticHTMLRenderer])</span><br><span class="line"></span><br><span class="line">user_list = UserViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>: <span class="string">'list'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">user_detail = UserViewSet.as_view(&#123;</span><br><span class="line">    <span class="string">'get'</span>: <span class="string">'retrieve'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><br><p>우리가 어떻게 다수의 뷰들을 각 ViewSet 클래스로부터 생성하고 있는지 알아야 합니다. </p><br><p>http메서드들을 각 뷰에 요구되는 엑션들을 묶어주는식으로 이 작업을 하고 있다는것을 인지하고 있어야 합니다. </p><br><p>이제 우리는 우리의 리소스들을 뷰들에 묶어주었습니다. 우리는 이전처럼, 뷰들을 URL Conf 와 함께 등록 해줄수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = format_suffix_patterns([</span><br><span class="line">    path(<span class="string">''</span>, api_root),</span><br><span class="line">    path(<span class="string">'snippets/'</span>, snippet_list, name=<span class="string">'snippet_list'</span>),</span><br><span class="line">    path(<span class="string">'snippets/&lt;int:pk&gt;/'</span>, snippet_detail, name=<span class="string">'snippet-detail'</span>),</span><br><span class="line">    path(<span class="string">'snippets/&lt;int:pk&gt;/higlight'</span>, snippet_highlight, name=<span class="string">'snippet-highlight'</span>),</span><br><span class="line">    path(<span class="string">'users/'</span>, user_list, name=<span class="string">'user-list'</span>), </span><br><span class="line">    path(<span class="string">'users/&lt;int:pk&gt;/'</span>, user_detail, name=<span class="string">'user-detail'</span>)</span><br><span class="line">])</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/28/DRF-Tutorial-34%ED%8E%B8-URLs%EC%97%90-%EB%AA%85%EC%8B%9C%EC%A0%81%EC%9C%BC%EB%A1%9C-ViewSets-%EB%AC%B6%EC%96%B4%EC%A3%BC%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-33편- ViewSets를 사용하기 위해 코드 다시 짜기</title>
      <link>http://djangojeng-e.github.io/2020/12/26/DRF-Tutorial-33%ED%8E%B8-ViewSets%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%BD%94%EB%93%9C-%EB%8B%A4%EC%8B%9C-%EC%A7%9C%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/26/DRF-Tutorial-33%ED%8E%B8-ViewSets%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%BD%94%EB%93%9C-%EB%8B%A4%EC%8B%9C-%EC%A7%9C%EA%B8%B0/</guid>
      <pubDate>Fri, 25 Dec 2020 22:35:29 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Refactoring-to-use-ViewSets&quot;&gt;&lt;a href=&quot;#Refactoring-to-use-ViewSets&quot; class=&quot;headerlink&quot; title=&quot;Refactoring to use ViewSets&quot;&gt;&lt;/a&gt;Refac
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Refactoring-to-use-ViewSets"><a href="#Refactoring-to-use-ViewSets" class="headerlink" title="Refactoring to use ViewSets"></a>Refactoring to use ViewSets</h2><br><p>현재 views 를 viewsets 를 사용하기 위해서, 코드를 다시 refactor 해봅시다. </p><br><p>우선, 우리의 UserList 와 UserDetail 뷰들을 하나의 UserViewSet 으로 리펙터 해줍니다. 우리는 이 두개의 뷰들을 삭제하고, 하나의 클래스로 대체할수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> viewsets </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserViewSet</span><span class="params">(viewsets.ReadOnlyModelViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    This viewset automatically provides 'list' and 'detail' actions</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serailizer_class = UserSerializer</span><br></pre></td></tr></table></figure><br><p>우리는 여기에 <code>ReadOnlyModelViewSet</code> 클래스를 사용하여, 자동으로 기본동작인 read-only 를 주었습니다. </p><br><p>우리는 여전히 queryset 과 serializer_class 속성들을 우리가 일반 뷰들을 사용할때처럼 정확하게 명시해 주었습니다. 하지만, 우리는 더이상 같은 정보를 두개의 별도 클래스들에 주지 않아도 됩니다.</p><br><h2 id="SnippetList-SnippetDetail-SnippetHighlight"><a href="#SnippetList-SnippetDetail-SnippetHighlight" class="headerlink" title="SnippetList, SnippetDetail, SnippetHighlight"></a>SnippetList, SnippetDetail, SnippetHighlight</h2><br><p>다음은, 우리는 <code>SnippetList</code>, <code>SnippetDetail</code> 그리고 <code>SnippetHighlight</code> 뷰 클래스들을 교체 해줄겁니다. 우리는 이 세개의 뷰들을 삭제하고, 하나의 클래스로 대체해줍니다.<br></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> action </span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetViewSet</span><span class="params">(viewsets.ModelViewSet)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    This viewset automatically provides 'list', 'create', 'retrieve', 'update' and 'destroy' actions</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Additionally, we also provide an extra 'hihghlight' action.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    permission_classes = [permissions.IsAuthenticateOrReadOnly, IsOwnerOrReadOnly]</span><br><span class="line"><span class="meta">    @action(detail=True, rendere_classes[renderers.StaticHTMLRenderer])</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">highlight</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        snippet = self.get_objects()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        serializer.save(owner=self.request.user)</span><br></pre></td></tr></table></figure><br><p>이번에 우리는 <code>ModelViewSet</code> 클래스를 사용해서, 완벽하게 기본 읽기와 작성 동작들을 설정해주었습니다. </p><br><p>또한 <code>@action</code> 데코레이터를 사용하여, highlight 라는 커스텀 엑션을 생성해 주었다는것도 숙지해야 합니다. 이 데코레이터는 <code>create/update/delete</code> 스타일에 맞지 않는 커스텀 앤드포인트들을 추가할때 사용됩니다. </p><br><p><code>@action</code> 데코레이터를 사용하는 커스텀 엑션들은 기본적으로 GET 요청들에 반응합니다. </p><br><p>만일 우리가 POST 요청에 반응하는 엑션을 원한다면, 우리는  methods 인자를 사용할수 있습니다. </p><br><p>커스텀 엑션의 URL 들은 기본적으로, 해당 메서드 이름에 따라 결정됩니다. 만약, 우리가 URL 이 생성되는 방식을 바꾸고 싶으면, url_path 를 데코레이터의 키워드 인자로 포함할수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/26/DRF-Tutorial-33%ED%8E%B8-ViewSets%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%B4-%EC%BD%94%EB%93%9C-%EB%8B%A4%EC%8B%9C-%EC%A7%9C%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-32편- ViewSets &amp; Routers</title>
      <link>http://djangojeng-e.github.io/2020/12/25/DRF-Tutorial-32%ED%8E%B8-ViewSets-Routers/</link>
      <guid>http://djangojeng-e.github.io/2020/12/25/DRF-Tutorial-32%ED%8E%B8-ViewSets-Routers/</guid>
      <pubDate>Fri, 25 Dec 2020 02:13:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;ViewSets-amp-Routers&quot;&gt;&lt;a href=&quot;#ViewSets-amp-Routers&quot; class=&quot;headerlink&quot; title=&quot;ViewSets &amp;amp; Routers&quot;&gt;&lt;/a&gt;ViewSets &amp;amp; Routers&lt;/
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="ViewSets-amp-Routers"><a href="#ViewSets-amp-Routers" class="headerlink" title="ViewSets &amp; Routers"></a>ViewSets &amp; Routers</h2><br><p>REST FRAMEWORK 는 ViewSets 를 다루기 위한 추상화된것을 포함하고 있습니다. </p><br><p>이는, 개발자들에게 API 의 상태와 상호작용들을 모델링하는데에 집중할수 있게 해주고. URL 빌드업이 자동으로 이루어지게 해줍니다. </p><br><p>ViewSet 클래스들은, View 클래스들과 거의 같습니다. </p><br><p>get 혹은, put 같은 메서드 대신에, read 혹은 update 같은 동작을 제공한다는점만 제외하고 말이죠. </p><br><p>하나의 ViewSet클래스는 메서드 핸들러에 마지막 순간에 bound 됩니다. </p><br><p>보통, Router 를 사용하여, set of views 로 인스턴스화 되었을때, bound 됩니다. </p><br><p>Router 클래스는, URL conf 를 정의하는데에 있는 복잡함을 다루어 줍니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/25/DRF-Tutorial-32%ED%8E%B8-ViewSets-Routers/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-31편- API 브라우징</title>
      <link>http://djangojeng-e.github.io/2020/12/24/DRF-Tutorial-31%ED%8E%B8-API-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95/</link>
      <guid>http://djangojeng-e.github.io/2020/12/24/DRF-Tutorial-31%ED%8E%B8-API-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95/</guid>
      <pubDate>Thu, 24 Dec 2020 07:22:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Browsing-the-API&quot;&gt;&lt;a href=&quot;#Browsing-the-API&quot; class=&quot;headerlink&quot; title=&quot;Browsing the API&quot;&gt;&lt;/a&gt;Browsing the API&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;브라우저를 열어
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Browsing-the-API"><a href="#Browsing-the-API" class="headerlink" title="Browsing the API"></a>Browsing the API</h2><br><p>브라우저를 열어서 브라우저블 API 로 가보면, 이제 우리는 API 사이를 간단하게 링크를 따라가는것만으로도 작업할수 있습니다. </p><br><img src="/2020/12/24/DRF-Tutorial-31%ED%8E%B8-API-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95/image1.png" class=""><br><p>또한, 스니펫 인스턴스에는, highlight 라는 링크를 볼수 있을것이고, 이는 HTML 형태로 스니펫을 하이라이트 해줍니다. </p><br><p>Tutorial Part 6 에서는, 어떻게 <code>ViewSets</code> 과 <code>Routers</code>를 사용하여 코드의 양을 줄일수 있는지 둘러볼것입니다.</p><br><img src="/2020/12/24/DRF-Tutorial-31%ED%8E%B8-API-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95/image2.png" class=""><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/24/DRF-Tutorial-31%ED%8E%B8-API-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A7%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-30편- API를 하이퍼링크 해주기</title>
      <link>http://djangojeng-e.github.io/2020/12/23/DRF-Tutorial-30%ED%8E%B8-API%EB%A5%BC-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC-%ED%95%B4%EC%A3%BC%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/23/DRF-Tutorial-30%ED%8E%B8-API%EB%A5%BC-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC-%ED%95%B4%EC%A3%BC%EA%B8%B0/</guid>
      <pubDate>Wed, 23 Dec 2020 06:28:53 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Hyperlinking-our-API&quot;&gt;&lt;a href=&quot;#Hyperlinking-our-API&quot; class=&quot;headerlink&quot; title=&quot;Hyperlinking our API&quot;&gt;&lt;/a&gt;Hyperlinking our API&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;각 요소들의 관계를 다루는것은 우리의 웹 API 디자인에서 조금 더 어려운 부분입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;관계를 표현하기 위해서 선택할수 있는 여러가지 다른 방법들이 존재합니다.&lt;/p&gt;
&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;primary key 사용하기 &lt;/li&gt;
&lt;li&gt;entities 간 하이퍼링크 해주기 &lt;/li&gt;
&lt;li&gt;고유한 slug 필드를 관계된 entity 에 사용해주기 &lt;/li&gt;
&lt;li&gt;관계된 entity 의 기본 문자열 표현 사용하기 &lt;/li&gt;
&lt;li&gt;부모 표현 안에 관계된 entity 네스팅 해주기 &lt;/li&gt;
&lt;li&gt;기타 다른 사용자 정의 표현 &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;REST Frmaework 은 이 모든 스타일들을 지원합니다. 그리고, 순방향 혹은 역방향 관계들에 적용할수 있습니다. 혹은, generic foreign key 와 같은 커스텀 메니저에도 적용될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이번에 우리는, entity 간에 하이퍼링크를 해주는 스타일을 사용해 볼겁니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이를 하기 위해서는, 기존에 존재하던 &lt;code&gt;ModelSerializer&lt;/code&gt; 대신에, 우리의 serializer 를 수정하여 &lt;code&gt;HyperlinkedModelSerializer&lt;/code&gt; 를 확장해야 합니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Hyperlinking-our-API"><a href="#Hyperlinking-our-API" class="headerlink" title="Hyperlinking our API"></a>Hyperlinking our API</h2><br><p>각 요소들의 관계를 다루는것은 우리의 웹 API 디자인에서 조금 더 어려운 부분입니다. </p><br><p>관계를 표현하기 위해서 선택할수 있는 여러가지 다른 방법들이 존재합니다.</p><br><ul><li>primary key 사용하기 </li><li>entities 간 하이퍼링크 해주기 </li><li>고유한 slug 필드를 관계된 entity 에 사용해주기 </li><li>관계된 entity 의 기본 문자열 표현 사용하기 </li><li>부모 표현 안에 관계된 entity 네스팅 해주기 </li><li>기타 다른 사용자 정의 표현 </li></ul><br><p>REST Frmaework 은 이 모든 스타일들을 지원합니다. 그리고, 순방향 혹은 역방향 관계들에 적용할수 있습니다. 혹은, generic foreign key 와 같은 커스텀 메니저에도 적용될수 있습니다. </p><br><p>이번에 우리는, entity 간에 하이퍼링크를 해주는 스타일을 사용해 볼겁니다. </p><br><p>이를 하기 위해서는, 기존에 존재하던 <code>ModelSerializer</code> 대신에, 우리의 serializer 를 수정하여 <code>HyperlinkedModelSerializer</code> 를 확장해야 합니다. </p><br><a id="more"></a><br><blockquote><p><code>HyperlinkedModelSerializer</code> 는 <code>ModelSerializer</code> 와 차이점이 있습니다. </p><br><ol><li>기본값으로 id 필드를 포함하지 않습니다 </li><li>HyperlinkedIdentityfield 를 사용하여, url 필드를 포함합니다 </li><li>관계들은 <code>HyperlinkedRelatedField</code> 를 <code>PrimaryKeyRelatedFiedl</code> 대신 사용합니다. </li></ol></blockquote><br><p>우리는 이미 쉽게 존재하는 serializers 를 재작성하여 hyperlinking 을 사용하도록 만들수 있습니다. </p><br><p><code>snippets/serializer.py</code> 파일을 열고, 아래를 추가해줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class="line">    owner = serializers.ReadOnlyFied(source=<span class="string">'owner.username'</span>)</span><br><span class="line">    highlight = serializers.HyperlinkedIdentityField(view_name=<span class="string">'snippet-highlight'</span>, format=<span class="string">'html'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet</span><br><span class="line">        fields = [<span class="string">'url'</span>, <span class="string">'id'</span>, <span class="string">'highlight'</span>, <span class="string">'owner'</span>, <span class="string">'title'</span>, </span><br><span class="line">                <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>]</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializers.HyperlinkedModelSerializer)</span>:</span></span><br><span class="line">    snippets = serializers.HyperlinkedRelatedField(many=<span class="literal">True</span>, view_name=<span class="string">'snippet-detail'</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">'url'</span>, <span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'snippets'</span>]</span><br></pre></td></tr></table></figure><br><p>우리가 새로운 highlight 필드를 추가했다는것을 알고 있어야 합니다. 이필드는 snippet-detail 대신에 snippet-highlight URL 패턴을 가르키는것을 제외하고는, url 필드와 같은 타입의 필드 입니다. </p><br><p>우리는 <code>.json</code> 같은, 접미사 url 을 포함하였기 때문에, highlight 필드에 접미사로된 하이퍼링크들은 <code>.html</code> 접미사를 사용하도록 명시해 줍니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/23/DRF-Tutorial-30%ED%8E%B8-API%EB%A5%BC-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC-%ED%95%B4%EC%A3%BC%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-29편- 하이라이트된 스니펫에 앤드포인트 생성</title>
      <link>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%ED%95%98%EC%9D%B4%EB%9D%BC%EC%9D%B4%ED%8A%B8%EB%90%9C-%EC%8A%A4%EB%8B%88%ED%8E%AB%EC%97%90-%EC%95%A4%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%83%9D%EC%84%B1/</link>
      <guid>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%ED%95%98%EC%9D%B4%EB%9D%BC%EC%9D%B4%ED%8A%B8%EB%90%9C-%EC%8A%A4%EB%8B%88%ED%8E%AB%EC%97%90-%EC%95%A4%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%83%9D%EC%84%B1/</guid>
      <pubDate>Tue, 15 Dec 2020 07:25:57 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Creating-an-endpoint-for-the-highlighted-snippets&quot;&gt;&lt;a href=&quot;#Creating-an-endpoint-for-the-highlighted-snippets&quot; class=&quot;headerlink&quot; title=&quot;Creating an endpoint for the highlighted snippets&quot;&gt;&lt;/a&gt;Creating an endpoint for the highlighted snippets&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;우리의 API 코드가 코드 하이라이팅에 앤드포인트를 가지고 있지 않습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;우리는 JSON 을 사용하지 않고, HTML 로 표시합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;REST FRAMEWORK 에서는, 두가지 스타일의 HTML 렌더러가 제공됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;템플릿을 사용하여, HTML 을 렌더 &lt;/li&gt;
&lt;li&gt;미리 렌더가 된 HTML 을 다루는것 &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;p&gt;2번째 방식이, 우리가 앤드포인트를 위해 사용하고 싶은것 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;코드 하이라이트 뷰를 생성할때 염두해 두어야 할 또다른 한가지는, 우리가 사용할수 있는 강력한 generic 뷰가 존재하지 않는다는 점입니다. 우리는 객체 인스턴스를 반환하지 않지만, 객체 인스턴스의 속성을 대신 리턴해 줄겁니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;generic 뷰를 사용하는 대신에, 우리는 인스턴스를 표현하기 위한 베이스 클래스를 사용하고, 우리만의 &lt;code&gt;.get()&lt;/code&gt; 메서드를 사용할겁니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;snippets/views.py&lt;/code&gt; 파일을 열고, 아래를 추가해 줍니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Creating-an-endpoint-for-the-highlighted-snippets"><a href="#Creating-an-endpoint-for-the-highlighted-snippets" class="headerlink" title="Creating an endpoint for the highlighted snippets"></a>Creating an endpoint for the highlighted snippets</h2><br><p>우리의 API 코드가 코드 하이라이팅에 앤드포인트를 가지고 있지 않습니다. </p><br><p>우리는 JSON 을 사용하지 않고, HTML 로 표시합니다. </p><br><p>REST FRAMEWORK 에서는, 두가지 스타일의 HTML 렌더러가 제공됩니다. </p><br><ol><li>템플릿을 사용하여, HTML 을 렌더 </li><li>미리 렌더가 된 HTML 을 다루는것 </li></ol><br><p>2번째 방식이, 우리가 앤드포인트를 위해 사용하고 싶은것 입니다. </p><br><p>코드 하이라이트 뷰를 생성할때 염두해 두어야 할 또다른 한가지는, 우리가 사용할수 있는 강력한 generic 뷰가 존재하지 않는다는 점입니다. 우리는 객체 인스턴스를 반환하지 않지만, 객체 인스턴스의 속성을 대신 리턴해 줄겁니다. </p><br><p>generic 뷰를 사용하는 대신에, 우리는 인스턴스를 표현하기 위한 베이스 클래스를 사용하고, 우리만의 <code>.get()</code> 메서드를 사용할겁니다. </p><br><p><code>snippets/views.py</code> 파일을 열고, 아래를 추가해 줍니다. </p><p><br><a id="more"></a></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> renderers</span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnipeptHighlight</span><span class="params">(generics.GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    renderer_classes = [renderes.StaticHTMLRenderer]</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        snippet = self.get_object()</span><br><span class="line">        <span class="keyword">return</span> Response(snippet.highlighted)</span><br></pre></td></tr></table></figure><br><p>평소와 같이 우리는 우리가 생성한 새로운 뷰들을 URLConf 에 추가해 주어야 합니다. </p><br><p>새로운 API root 를 <code>snippets/urls.py</code> 파일안에 urlpatterns 에 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">''</span>, views.api_root),</span><br></pre></td></tr></table></figure><br><p>그리고 나서, 스니펫 하이라이트들을 url 패턴에 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'snippets/&lt;int:pk&gt;/highlight/'</span>, views.SnippetHighlight.as_view()),</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%ED%95%98%EC%9D%B4%EB%9D%BC%EC%9D%B4%ED%8A%B8%EB%90%9C-%EC%8A%A4%EB%8B%88%ED%8E%AB%EC%97%90-%EC%95%A4%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%83%9D%EC%84%B1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-29편- 객체 레벨 권한</title>
      <link>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%EA%B0%9D%EC%B2%B4-%EB%A0%88%EB%B2%A8-%EA%B6%8C%ED%95%9C/</link>
      <guid>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%EA%B0%9D%EC%B2%B4-%EB%A0%88%EB%B2%A8-%EA%B6%8C%ED%95%9C/</guid>
      <pubDate>Tue, 15 Dec 2020 07:23:34 GMT</pubDate>
      <description>
      
      </description>
      
      
      <comments>http://djangojeng-e.github.io/2020/12/15/DRF-Tutorial-29%ED%8E%B8-%EA%B0%9D%EC%B2%B4-%EB%A0%88%EB%B2%A8-%EA%B6%8C%ED%95%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-28편- 관계와 하이퍼링크된 APIs</title>
      <link>http://djangojeng-e.github.io/2020/12/14/DRF-Tutorial-28%ED%8E%B8-%EA%B4%80%EA%B3%84%EC%99%80-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC%EB%90%9C-APIs/</link>
      <guid>http://djangojeng-e.github.io/2020/12/14/DRF-Tutorial-28%ED%8E%B8-%EA%B4%80%EA%B3%84%EC%99%80-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC%EB%90%9C-APIs/</guid>
      <pubDate>Mon, 14 Dec 2020 07:51:33 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Relationships-amp-Hyperlinked-APIs&quot;&gt;&lt;a href=&quot;#Relationships-amp-Hyperlinked-APIs&quot; class=&quot;headerlink&quot; title=&quot;Relationships &amp;amp; Hype
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Relationships-amp-Hyperlinked-APIs"><a href="#Relationships-amp-Hyperlinked-APIs" class="headerlink" title="Relationships &amp; Hyperlinked APIs"></a>Relationships &amp; Hyperlinked APIs</h2><br><p>현재 우리의 API 안에 있는 관계들은 primary key 를 사용하여 표현되어 있습니다. </p><br><p>이번 튜토리얼에서 우리는 우리의 API 의 결속력을 찾기 쉽게 향상 시킬겁니다. 이는 관계들을 하이퍼링크로 잇는 것을 사용하여 이룰수 있습니다. </p><br><h2 id="Creating-an-endpoint-for-the-root-of-our-API"><a href="#Creating-an-endpoint-for-the-root-of-our-API" class="headerlink" title="Creating an endpoint for the root of our API"></a>Creating an endpoint for the root of our API</h2><br><p>지금 현재 우리는 snippets 와 users 에 앤드포인트들을 가지고 있습니다. 하지만, 우리는 우리의 API 에 하나의 진입점을 가지고 있지 않습니다. 하나를 생성하기 위해, 우리는 일반 함수형 뷰와 @api_view 데코레이터를 사용할것 입니다. </p><br><p><code>snippets/views.py</code> 파일을 열고, 아래 내용을 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view </span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response</span><br><span class="line"><span class="keyword">from</span> rest_framework.reverse <span class="keyword">import</span> reverse </span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(['GET'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">api_root</span><span class="params">(request, format=None)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> Response(&#123;</span><br><span class="line">        <span class="string">'users'</span>: reverse(<span class="string">'user-list'</span>m request=request, format=format),</span><br><span class="line">        <span class="string">'snippets'</span>: reverse(<span class="string">'snippet-list'</span>, request=request, format=format)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><br><p>여기에서 두가지를 알고 넘어가야 합니다. </p><br><ol><li>우리는 REST FRMAEWORK 의 reverse 함수를 사용하여, 완벽한 URL 을 반환합니다 </li><li>URL 패턴들은 쉬운 이름으로 정의가 되고, 나중에 snippets/urls.py 에 선언될것 입니다. </li></ol><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/14/DRF-Tutorial-28%ED%8E%B8-%EA%B4%80%EA%B3%84%EC%99%80-%ED%95%98%EC%9D%B4%ED%8D%BC%EB%A7%81%ED%81%AC%EB%90%9C-APIs/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-27편- 브라우저블 API에 로그인 추가하기</title>
      <link>http://djangojeng-e.github.io/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 13 Dec 2020 06:17:42 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Adding-login-to-the-Browable-API&quot;&gt;&lt;a href=&quot;#Adding-login-to-the-Browable-API&quot; class=&quot;headerlink&quot; title=&quot;Adding login to the Browable
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Adding-login-to-the-Browable-API"><a href="#Adding-login-to-the-Browable-API" class="headerlink" title="Adding login to the Browable API"></a>Adding login to the Browable API</h2><br><p>지금 브라우저를 열어서 브라우저로 API 로 가보면, 더이상 여러분들은 새로운 코드 스니펫을 생성할수 없다는것을 발견할것입니다. </p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image1.png" class=""><br><p>새로운 코드 스니펫을 생성하기 위해서는, 사용자로써 로그인을 해야 합니다. </p><br><p>브라우저로 API 를 사용하기 위해서, 로그인 뷰를 추가해줄수 있습니다. </p><br><p>이는, 프로젝트 레벨의 URLConf 를 수정함으로써 해줄수 있습니다. urls.py 파일을 아래와 같이 수정해 줍니다. </p><br><p>urls.py 를 아래와 같이 수정 </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include </span><br><span class="line"></span><br><span class="line">urlpatterns += [</span><br><span class="line">    path(<span class="string">'api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p><code>api-auth</code> 부분은 우리가 사용하고 싶은 어떤 URL 이름을 써도 괜찮습니다. </p><br><p>이제 브라우저를 다시 열고 새로고침을 하면, Login 링크가 페이지의 오른쪽 상단에 보일것입니다. </p><br><p>여러분들이 이전에 생성한 사용자 디테일로 로그인을 하면, 이제 다시 코드 스니펫을 생성할수 있을것입니다. </p><br><p><strong>화면 오른쪽 상단에 Login 링크 확인</strong></p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image2.png" class=""><br><p><strong>이전 포스팅에서 생성한 사용자로 로그인 진행</strong></p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image3.png" class=""><br><p>로그인 진행후 화면에는, 새로운 코드를 생성할수 있는 필드가 나옴 </p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image4.png" class=""><br><p>몇가지 코드 스니펫들을 생성 하였으면, ‘/users/‘ 엔드포인트로 이동하고, </p><p>각 사용자에 연결된 snippet ids 의 리스트가 표시되는것을 확인합니다, 각 사용자의 snippets 필드 안에 있습니다. </p><br><p><strong>사용자 1의 디테일</strong></p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image5.png" class=""><br><p><strong>사용자 2의 디테일</strong></p><br><img src="/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image6.png" class=""><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/13/DRF-Tutorial-27%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-26편- API로 인증하기</title>
      <link>http://djangojeng-e.github.io/2020/12/06/DRF-Tutorial-26%ED%8E%B8-API%EB%A1%9C-%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/06/DRF-Tutorial-26%ED%8E%B8-API%EB%A1%9C-%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 06 Dec 2020 09:00:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Authenticating-with-the-API&quot;&gt;&lt;a href=&quot;#Authenticating-with-the-API&quot; class=&quot;headerlink&quot; title=&quot;Authenticating with the API&quot;&gt;&lt;/a&gt;Authe
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Authenticating-with-the-API"><a href="#Authenticating-with-the-API" class="headerlink" title="Authenticating with the API"></a>Authenticating with the API</h2><br><p>우리는 이제 API 에 몇가지 권한 설정들을 가지고 있기 때문에, </p><p>우리가 어떠한 스니펫을 수정하고 싶을때에 우리의 요청들을 인증할 필요가 있습니다. </p><br><p>우리는 그 어떠한 authentication 클래스들을 설정해 주지 않았고, 그렇기 때문에 현재는 SessionAuthentication 과 BasicAuthentication 같은 기본값들만 적용 되어 있는 상태 입니다. </p><br><p>웹브라우저를 통해서 API 와 상호 작용할때에, 우리는 로그인 할수 있고. 브라우저 세션은 해당 요청들에 대한 필요한 인증 기능을 제공합니다. </p><br><p>하지만, 만약 우리가 API 를 프로그래밍적으로 이용할때에는, 명시적으로 인증서를 각 요청마다 제공해줘야 합니다. </p><br><p><strong>만약, 터미널에서 인증 없이 snippet 을 생성하고자 한다면 에러가 날것입니다</strong></p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">http POST http://127.0.0.1:8000/snippets/ code="print(123)"</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "detail": "Authentication credentials were not provided."</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p>그렇지만, 사용자의 username 과 password 를 포함한 요청을 보내면, 성공적인 결과를 얻을수 있습니다.</p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">http -a admin:password123 POST http://127.0.0.1:8000/snippets/ code="print(789)"</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    "id": 1,</span><br><span class="line">    "owner": "admin",</span><br><span class="line">    "title": "foo",</span><br><span class="line">    "code": "print(789)",</span><br><span class="line">    "linenos": false,</span><br><span class="line">    "language": "python",</span><br><span class="line">    "style": "friendly"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><blockquote><p>정리</p></blockquote><br><p>이제 우리는, 우리의 웹 API 에 추가로 사용자들의 앤드포인트들에 그리고 그들이 생성한 코드 스니펫에 대한 적당한 권한 설정들을 가지고 있습니다. </p><br><p>Part5 에서는, 어떻게 모든것들이 묶여서 하이라이트된 코드 스니펫들을 HTML endpoint 로 생성할수 있고, 우리의 API 시스템내에 존재하는 관계들을 하이퍼링크들을 사용하여 우리의 API 의 단결성을 향상시킬수 있는지 알아볼겁니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/06/DRF-Tutorial-26%ED%8E%B8-API%EB%A1%9C-%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-25편- 객체단에서의 권한</title>
      <link>http://djangojeng-e.github.io/2020/12/05/DRF-Tutorial-25%ED%8E%B8-%EA%B0%9D%EC%B2%B4%EB%8B%A8%EC%97%90%EC%84%9C%EC%9D%98-%EA%B6%8C%ED%95%9C/</link>
      <guid>http://djangojeng-e.github.io/2020/12/05/DRF-Tutorial-25%ED%8E%B8-%EA%B0%9D%EC%B2%B4%EB%8B%A8%EC%97%90%EC%84%9C%EC%9D%98-%EA%B6%8C%ED%95%9C/</guid>
      <pubDate>Sat, 05 Dec 2020 05:02:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Object-Level-Permissions&quot;&gt;&lt;a href=&quot;#Object-Level-Permissions&quot; class=&quot;headerlink&quot; title=&quot;Object Level Permissions&quot;&gt;&lt;/a&gt;Object Level P
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Object-Level-Permissions"><a href="#Object-Level-Permissions" class="headerlink" title="Object Level Permissions"></a>Object Level Permissions</h2><br><p>실제로 우리는, 모든 코드 스니펫들이 누구에게나 보여지지만 오직 해당 스니펫을 생성한 사용자만 업데이트 혹은 삭제를 할수 있게 만들고 싶습니다. </p><br><p>이것을 하기 위해서는, 커스텀 권한을 생성할 필요가 있습니다. </p><br><p><code>permissions.py</code> 라는 파일을, snippet 앱 안에 생성해 줍니다. <code>snippets/permissions.py</code> 파일에, 아래 내용을 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IsOwnerOrReadOnly</span><span class="params">(permissions.BasePermission)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Custom permission to only allow owners of an object to edit it </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">has_object_permissions</span><span class="params">(self, request, view, obj)</span>:</span></span><br><span class="line">        <span class="comment"># Read permissions are allowed to any request </span></span><br><span class="line">        <span class="comment"># 읽기 권한은 어떤 요청에도 허용됨 </span></span><br><span class="line">        <span class="comment"># So we'll always allow GET, HEAD or OPTIONS requests </span></span><br><span class="line">        <span class="comment"># 따라서, 우리는 언제나 GET, HEAD 혹은 OPTIONS 요청들을 허용함 </span></span><br><span class="line">        <span class="keyword">if</span> request.method <span class="keyword">in</span> permissions.SAFE_METHODS:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># Write permissions are only allowed to the owner of the snippet </span></span><br><span class="line">        <span class="comment"># 해당 snippet 의 owner 만 작성 권한이 허용됨 </span></span><br><span class="line">        <span class="keyword">return</span> obj.owner == request.user</span><br></pre></td></tr></table></figure><br><p>이제 이 커스텀 권한을 우리의 스니펫 인스턴스 앤드포인트에 추가해줍니다. SnippetDetail 뷰 클래스 안에 있는 permission_classes 속성에 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">permission_classes = [permissions.IsAuthenticatedOrReadOnly,</span><br><span class="line">  IsOwnerOrReadOnly]</span><br></pre></td></tr></table></figure><br><p>우리가 작성한 <code>IsOwnerOrReadOnly</code> 클래스를 가져오는것을 까먹으면 안됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.permissions <span class="keyword">import</span> IsOwnerOrReadOnly</span><br></pre></td></tr></table></figure><br><p>이제, 브라우저를 다시 열어보면, 코드 스니펫을 생성한 사용자가 로그인 하였을때, <code>DELETE</code> 와 <code>PUT</code> 액션들이 스니펫 인스턴스의 앤드포인트에만 나타나는것을 확인 할수 있습니다. </p><br><img src="/2020/12/05/DRF-Tutorial-25%ED%8E%B8-%EA%B0%9D%EC%B2%B4%EB%8B%A8%EC%97%90%EC%84%9C%EC%9D%98-%EA%B6%8C%ED%95%9C/image1.png" class=""><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/05/DRF-Tutorial-25%ED%8E%B8-%EA%B0%9D%EC%B2%B4%EB%8B%A8%EC%97%90%EC%84%9C%EC%9D%98-%EA%B6%8C%ED%95%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-24편- 브라우저블 API 에 로그인 추가하기</title>
      <link>http://djangojeng-e.github.io/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 04 Dec 2020 07:19:35 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Adding-login-to-the-browsable-API&quot;&gt;&lt;a href=&quot;#Adding-login-to-the-browsable-API&quot; class=&quot;headerlink&quot; title=&quot;Adding login to the browsa
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Adding-login-to-the-browsable-API"><a href="#Adding-login-to-the-browsable-API" class="headerlink" title="Adding login to the browsable API"></a>Adding login to the browsable API</h2><br><p>지금 브러우저를 열어서 브라우저로 API 로 접근을 해보면, 더이상 새로운 코드 스니펫을 생성할수 없다는것을 발견할수 있습니다. </p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image1.png" class=""><br><p>새로운 코드 스니펫을 생성하기 위해서는, 사용자로써 로그인을 해야 합니다. </p><br><p>브라우저로 API 를 사용하기 위해서, 로그인 뷰를 추가해 줄수 있습니다. </p><p>이는, 프로젝트 레벨의 URLConf 를 수정함으로써 해줄수 있습니다. urls.py 파일을 아래와 같이 수정해 줍니다. </p><br><p><code>snippets/urls.py</code> 파일말고, 프로젝트 urls.py 파일을 아래와 같이 수정해 줍시다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.conf.urls <span class="keyword">import</span> include</span><br><span class="line"></span><br><span class="line">urlpatterns += [</span><br><span class="line">path(<span class="string">'api-auth/'</span>, include(<span class="string">'rest_framework.urls'</span>)),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p>api-auth/ 부분은 우리가 사용하고 싶은 어떤 URL 이름을 써도 괜찮습니다</p><br><p>이제 브라우저를 다시 열고 새로고침을 하면, login 링크가 페이지의 오른쪽 상단에 볼수 있을겁니다.</p><br><p>여러분들이 이전에 생성한 사용자 디테일로 로그인을 하면, 다시 코드 스니펫을 생성할수 있을것입니다. </p><br><p>*<em>화면 오른쪽 상단에 Login 링크 확인 *</em></p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image2.png" class=""><br><p><strong>이전 포스팅에서 생성한 사용자로 로그인 진행</strong></p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image3.png" class=""><br><p><strong>로그인 진행후 화면에는, 새로운 코드를 생성할수 있는 필드가 나옵니다</strong></p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image4.png" class=""><br><p>몇가지 코드 스니펫들을 생성하였으면 <code>/users/</code> 앤드포인트로 이동하고, </p><p><br>각 사용자에 연결된 snippet id 의 리스트가 표시되는것을 확인할수 있습니다. 각 사용자의 snippets 필드 안에 있습니다.</p><br><p>아래는, 사용자 1 의 디테일 </p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image5.png" class=""><br><p>사용자 2의 디테일</p><br><img src="/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/image6.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/04/DRF-Tutorial-24%ED%8E%B8-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%EB%B8%94-API-%EC%97%90-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-23편- 뷰에 필요한 권한 추가하기</title>
      <link>http://djangojeng-e.github.io/2020/12/03/DRF-Tutorial-23%ED%8E%B8-%EB%B7%B0%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B6%8C%ED%95%9C-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/03/DRF-Tutorial-23%ED%8E%B8-%EB%B7%B0%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B6%8C%ED%95%9C-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 03 Dec 2020 08:42:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Adding-required-permissions-to-views&quot;&gt;&lt;a href=&quot;#Adding-required-permissions-to-views&quot; class=&quot;headerlink&quot; title=&quot;Adding required perm
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Adding-required-permissions-to-views"><a href="#Adding-required-permissions-to-views" class="headerlink" title="Adding required permissions to views"></a>Adding required permissions to views</h2><br><p>이제 코드 스니펫들은 사용자와 연결이 되어 있습니다. </p><br><p>우리는 오직 인증된 사용자들만 스니펫들을 생성하고, 업데이트 하고 삭제할수 있게 만들고 싶습니다. </p><br><p>REST FRAMEWORK 은 우리가 사용할수 있는 몇가지 권한 클래스들을 가지고 있습니다. 이를 사용하여, 해당 뷰를 누가 접근할수 있는지에 대한 제약을 줄수 있습니다. </p><br><p>이번 경우에, <code>IsAuthenticatedOrReadOnly</code> 를 볼수 있습니다. 이 클래스는, 오직 인증이된 요청들만 읽고-쓸수 있는 접근을 할수 있게 해줍니다. 그리고, 인증이 되지 않은 요청들은 오직 읽기전용 접근만 허용됩니다. </p><br><blockquote><p><strong>IsAuthenticatedOrReadOnly</strong></p><p>오직 인증된 요청들만 읽고-쓸수 있는 접근을 가능하게 해줍니다. </p><p>인증이 되지 않은 요청들은 오직 읽기전용 접근만 허용됩니다.</p></blockquote><br><p><code>snippets/views.py</code> 파일에, 아래와 같이 <code>permissions</code> 를 불러와 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> permissions</span><br></pre></td></tr></table></figure><br><p>그리고 나서, <code>snippets/views.py</code>  파일 안에 있는 <code>SnippetList</code> 와 <code>SnippetDetail</code> 클래스들에 아래 속성을 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">permission_class = [permissions.IsAuthenticatedOrReadOnly]</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/03/DRF-Tutorial-23%ED%8E%B8-%EB%B7%B0%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-%EA%B6%8C%ED%95%9C-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF-Tutorial-22편- Serializer 업데이트 해주기</title>
      <link>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-22%ED%8E%B8-Serializer-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%B4%EC%A3%BC%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-22%ED%8E%B8-Serializer-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%B4%EC%A3%BC%EA%B8%B0/</guid>
      <pubDate>Wed, 02 Dec 2020 08:28:18 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Serializer-업데이트-해주기&quot;&gt;&lt;a href=&quot;#Serializer-업데이트-해주기&quot; class=&quot;headerlink&quot; title=&quot;Serializer 업데이트 해주기&quot;&gt;&lt;/a&gt;Serializer 업데이트 해주기&lt;/h2&gt;&lt;br&gt;

        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Serializer-업데이트-해주기"><a href="#Serializer-업데이트-해주기" class="headerlink" title="Serializer 업데이트 해주기"></a>Serializer 업데이트 해주기</h2><br><p>이제 snippets 는 해당 snippets 를 생성한 user 와 연계되어 있습니다. </p><br><p><code>snippets/serializers.py</code> 에 <code>SnippetSerializer</code> 를 업데이트 하여, 이를 반영하도록 해줍니다. </p><br><p>아래 코드를, <code>snippets/serializers.py</code> 파일에 추가 해줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    owner = serializers.ReadOnlyField(source=<span class="string">'owner.username'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet </span><br><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'code'</span>, <span class="string">'linenos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>, <span class="string">'owner'</span>]</span><br></pre></td></tr></table></figure><br><blockquote><p>owner 를 Meta 클래스안에 fields 리스트에 확실하게 추가해 주는걸 잊지 않습니다. </p></blockquote><br><p>이 필드는 꽤나 재미있는 일을 합니다. source 인자는 어떤 속성이 필드를 채우기 위해 사용되는지 제어합니다. 그리고, 직렬화된 인스턴스에 속성을 가르킬수도 있습니다. </p><br><p>또한, 위에 보이는데로, <code>owner.username</code> 같이 점을 찍은 표현 (dot-notation) 을 인자로 받아서, django 의 템플릿 언어와 같이 주어진 속성들을 파악 합니다. </p><br><p>우리가 추가한 필드는 타이핑이 되지 않는 ReadOnlyField 클래스로, CharField, BooleanField 등과 같은 다른 타이핑된 필드들과는 대조됩니다. 타이핑 되지 않은 ReadOnlyField 는 언제나 읽기 전용이고, 직렬화된 표현으로 사용될것 입니다. </p><br><p>하지만, 이것들이 역직렬화되었을때는, 모델 인스턴스들을 업데이트 할때 사용되지 않을것입니다. 우리는, <code>CharField(read_only=True)</code> 도 이곳에 사용할수도 있었습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-22%ED%8E%B8-Serializer-%EC%97%85%EB%8D%B0%EC%9D%B4%ED%8A%B8-%ED%95%B4%EC%A3%BC%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 21편 - Snippets 와 User 를 연계하기</title>
      <link>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-21%ED%8E%B8-Snippets-%EC%99%80-User-%EB%A5%BC-%EC%97%B0%EA%B3%84%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-21%ED%8E%B8-Snippets-%EC%99%80-User-%EB%A5%BC-%EC%97%B0%EA%B3%84%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Wed, 02 Dec 2020 08:21:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Associating-Snippets-with-Users&quot;&gt;&lt;a href=&quot;#Associating-Snippets-with-Users&quot; class=&quot;headerlink&quot; title=&quot;Associating Snippets with User
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Associating-Snippets-with-Users"><a href="#Associating-Snippets-with-Users" class="headerlink" title="Associating Snippets with Users"></a>Associating Snippets with Users</h2><br><p>지금 우리가 코드 스니펫을 생성했다면, 스니펫을 생성한 사용자와 스니펫 인스턴스가 연계되는길은 없습니다. 사용자는 직렬화된 형태를 전달받지 않습니다. 하지만, 들어오는 요청의 속성으로 있습니다. </p><br><p>이것을 해결하기 위해, snippet 뷰에 <code>.perform_create()</code> 메서드를 오버라이딩 해줍니다. 이는, 어떻게 인스턴스 저장이 관리되고, 들어오는 요청 혹은 요청된 URL 안에 숨겨져 있는 정보를 다룰수 있게 해줍니다. </p><br><p>SnippetList 뷰 클래스에, 아래 메서드를 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">perform_create</span><span class="params">(self, serializer)</span>:</span></span><br><span class="line">        serializer.save(owner=self.request.user)</span><br></pre></td></tr></table></figure><br><p>우리의 serializer 의 create() 메서드는, 이제 추가적인 owner필드를 요청으로부터 유효한 데이터와 함께 전달 받습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/02/DRF-Tutorial-21%ED%8E%B8-Snippets-%EC%99%80-User-%EB%A5%BC-%EC%97%B0%EA%B3%84%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 20편 - 유저모델을 위한 엔드포인트 추가하기</title>
      <link>http://djangojeng-e.github.io/2020/12/01/DRF-Tutorial-20%ED%8E%B8-%EC%9C%A0%EC%A0%80%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/12/01/DRF-Tutorial-20%ED%8E%B8-%EC%9C%A0%EC%A0%80%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 01 Dec 2020 09:09:56 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Adding-information-to-our-model&quot;&gt;&lt;a href=&quot;#Adding-information-to-our-model&quot; class=&quot;headerlink&quot; title=&quot;Adding information to our model&quot;&gt;&lt;/a&gt;Adding information to our model&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Endpoint 란?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;어떠한 소프트웨어나 제품의 최종목적지인 사용자를 가리킴 &lt;/p&gt;
&lt;p&gt;사전적 의미로는, 연결의 한쪽 끝에 있는 엔티티 (주체)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;이제 우리는 작업을 같이 할 몇몇의 사용자가 있습니다. 우리의 API 에 이 사용자들이 표시되게 하는것이 나을것 같습니다. 새로운 serializer 를 생성하는것은 쉽습니다. &lt;code&gt;snippets/serializers.py&lt;/code&gt; 파일안에, 아래 내용을 추가해 줍니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.contrib.auth.models &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; User &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;UserSerializer&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(serializer.ModelSerializer)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    snippets = serializers.PrimaryKeyRelatedField(many=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;, queryset=Snippet.objects.all())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Meta&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        model = User&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        fields = [&lt;span class=&quot;string&quot;&gt;&#39;id&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;username&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;snippets&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;&lt;strong&gt;Snippets 들은 User 모델에서 역방향 관계에 있기 때문에&lt;/strong&gt; &lt;code&gt;ModelSerializer&lt;/code&gt; 클래스를 사용할때에 기본값으로 포함되어 있지 않을것입니다. 따라서, 우리는 명시적으로, 필드를 추가해 주어야 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;Snippet Class 에 ForiegnKey 를 사용하여 User 모델에 연결되어 있기 때문에, &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;하나의 Snippet 객체에서 연결되어 있는 User 객체를 조회할때는 순방향 (Forward) 라고 하고, &lt;/p&gt;
&lt;p&gt;하나의 User 객체에서, 연결되어 있는 Snippet 객체를 조회할때는, 역방향 (Backward or Reverse) 라고 합니다. 따라서, snippets 는 User 모델에서 역방향 관계에 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Adding-information-to-our-model"><a href="#Adding-information-to-our-model" class="headerlink" title="Adding information to our model"></a>Adding information to our model</h2><br><blockquote><p><strong>Endpoint 란?</strong></p><p>어떠한 소프트웨어나 제품의 최종목적지인 사용자를 가리킴 </p><p>사전적 의미로는, 연결의 한쪽 끝에 있는 엔티티 (주체)</p></blockquote><br><p>이제 우리는 작업을 같이 할 몇몇의 사용자가 있습니다. 우리의 API 에 이 사용자들이 표시되게 하는것이 나을것 같습니다. 새로운 serializer 를 생성하는것은 쉽습니다. <code>snippets/serializers.py</code> 파일안에, 아래 내용을 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserSerializer</span><span class="params">(serializer.ModelSerializer)</span>:</span></span><br><span class="line">    snippets = serializers.PrimaryKeyRelatedField(many=<span class="literal">True</span>, queryset=Snippet.objects.all())</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = User</span><br><span class="line">        fields = [<span class="string">'id'</span>, <span class="string">'username'</span>, <span class="string">'snippets'</span>]</span><br></pre></td></tr></table></figure><br><p><strong>Snippets 들은 User 모델에서 역방향 관계에 있기 때문에</strong> <code>ModelSerializer</code> 클래스를 사용할때에 기본값으로 포함되어 있지 않을것입니다. 따라서, 우리는 명시적으로, 필드를 추가해 주어야 합니다. </p><br><blockquote><p>Snippet Class 에 ForiegnKey 를 사용하여 User 모델에 연결되어 있기 때문에, </p><br><p>하나의 Snippet 객체에서 연결되어 있는 User 객체를 조회할때는 순방향 (Forward) 라고 하고, </p><p>하나의 User 객체에서, 연결되어 있는 Snippet 객체를 조회할때는, 역방향 (Backward or Reverse) 라고 합니다. 따라서, snippets 는 User 모델에서 역방향 관계에 있습니다. </p></blockquote><br><a id="more"></a><br><p>또한 우리는 몇가지 views 를 views.py 파일에 추가해 줄것입니다. 읽기 전용 형태로 사용자들에게 표시되게 하고 싶습니다. 따라서 <code>ListAPIView</code> 와 <code>RetrieveView</code> 제너릭 클래스기반 뷰를 사용할것입니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib.auth.models <span class="keyword">import</span> User </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserList</span><span class="params">(generics.ListAPIView)</span>:</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serializer_class = UserSerializer </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UserDetail</span><span class="params">(generics.RetireveAPIView)</span>:</span></span><br><span class="line">    queryset = User.objects.all()</span><br><span class="line">    serialzier_class = UserSerializer</span><br></pre></td></tr></table></figure><br><blockquote><p><code>views.py</code> 파일에서 <code>UserSerializer</code> 클래스를 불러오는것을 잊지 말아야 합니다! </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> UserSerializer</span><br></pre></td></tr></table></figure><br><p>마지막으로, 우리는 이 뷰들을 API 안에 추가해줄 필요가 있습니다. <code>URLConf</code> 에서 참조하도록 합시다.</p><br><p><code>snippets/urls.py</code> 파일에 아래 패턴들을 추가해줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'users/'</span>, views.UserList.as_view()), </span><br><span class="line">path(<span class="string">'users/&lt;int:pk&gt;/'</span>, views.UserDetail.as_view()),</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/12/01/DRF-Tutorial-20%ED%8E%B8-%EC%9C%A0%EC%A0%80%EB%AA%A8%EB%8D%B8%EC%9D%84-%EC%9C%84%ED%95%9C-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
