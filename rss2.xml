<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Fri, 01 May 2020 02:15:20 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Writing your first Django app, part5 - 1편</title>
      <link>http://djangojeng-e.github.io/2020/05/01/Writing-your-first-Django-app-part5-1%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/05/01/Writing-your-first-Django-app-part5-1%ED%8E%B8/</guid>
      <pubDate>Fri, 01 May 2020 01:51:57 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;자동화된-테스트-소개하기&quot;&gt;&lt;a href=&quot;#자동화된-테스트-소개하기&quot; class=&quot;headerlink&quot; title=&quot;자동화된 테스트 소개하기&quot;&gt;&lt;/a&gt;자동화된 테스트 소개하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;튜토리얼 part4 에 이어서 진행합니다&lt;/p&gt;
&lt;p&gt;&lt;br&gt;튜토리얼을 통해서, 현재까지 Web-poll 어플리케이션을 만들었습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이번 part 5 에서는, 자동화된 테스트를 생성해 봅니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;자동화-테스트란&quot;&gt;&lt;a href=&quot;#자동화-테스트란&quot; class=&quot;headerlink&quot; title=&quot;자동화 테스트란?&quot;&gt;&lt;/a&gt;자동화 테스트란?&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;자동화 테스트는 코드의 동작을 체크하는 루틴 입니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="자동화된-테스트-소개하기"><a href="#자동화된-테스트-소개하기" class="headerlink" title="자동화된 테스트 소개하기"></a>자동화된 테스트 소개하기</h2><br><p>튜토리얼 part4 에 이어서 진행합니다</p><p><br>튜토리얼을 통해서, 현재까지 Web-poll 어플리케이션을 만들었습니다. </p><p><br>이번 part 5 에서는, 자동화된 테스트를 생성해 봅니다. </p><br><br><h2 id="자동화-테스트란"><a href="#자동화-테스트란" class="headerlink" title="자동화 테스트란?"></a>자동화 테스트란?</h2><br><br><p>자동화 테스트는 코드의 동작을 체크하는 루틴 입니다. </p><br><a id="more"></a> <br><p>테스팅은 모두 다른 단위로 행해집니다. 어떤 테스트는 아주 작은 세부 사항을 테스트를 합니다 (예, 특정 모델 메서드가 예상된 값을 반환하는지) </p><br><p>반면, 어떤 또다른 테스트는 전반적인 소프트웨어의 동작을 테스트 합니다 (예, 사용자 입력값의 순서가 요구하는 결과를 도출해 내는가?) </p><br><p>튜토리얼 part 2 에서 쉘을 이용하여 메서드의 동작과 어플리케이션 실행 그리고 데이터를 입력해서 어떻게 동작하는지 확인해 보았던것과 다르지 않습니다. </p><br><p>자동화 테스트가 다른점은, 시스템에서 자동으로 테스트를 실행해 볼수 있다는 점입니다. </p><p><br>테스트를 한번 생성하고, 앱에 변경 사항들을 만듭니다. 그리고, 생성한 테스트로 코드가 원래 의도했던대로 작동하는지에 대한 확인을. 시간과 귀찮음을 들여서 수동으로 테스트할 필요 없이, 자동으로 테스트를 해볼수 있습니다. </p><br><br><h2 id="왜-테스트가-필요한가"><a href="#왜-테스트가-필요한가" class="headerlink" title="왜 테스트가 필요한가?"></a>왜 테스트가 필요한가?</h2><br><br><p>어째서 테스트가 필요한가, 그리고 지금 왜 필요할까요? </p><p><br>지금까지 단지 python/django 를 배우는것만 해도 충분하다고 느낄수 있고, 다른것을 배워야 하는것이 버겁고 불필요하게 느껴질수 있습니다. 튜토리얼에서 작성한 투표앱은 현재 잘 동작하고. 자동화 테스트를 생성하는 괴로움이 잘 동작하고 있는 투표앱을 더 나은 앱으로 만들것 같지 않습니다. </p><br><p>투표앱이 우리가 작성할 마지막 Django 프로그램 이라면, 자동화 테스트를 생성하는 괴로움은 불필요할지 모릅니다.<br> 하지만, 투표앱이 우리가 작성할 마지막 단계의 Django 프로그래밍이 아니기 때문에, 지금이 배우기 가장 적절한 때입니다. </p><br><br><h3 id="테스트는-시간을-절약해-줍니다"><a href="#테스트는-시간을-절약해-줍니다" class="headerlink" title="테스트는 시간을 절약해 줍니다"></a>테스트는 시간을 절약해 줍니다</h3><br><p>지금까지는, ‘잘 작동하는것 같아 보이면’ 만족스러운 테스트 결과 였습니다. </p><p><br>하지만, 좀 더 복잡한 어플리케이션에서는, 각 앱의 구성요소들 끼리 더 복잡한 상호 작용들을 가지게 됩니다. </p><p><br>어떤 구성요소의 변경 사항은 예상치 못한 앱 동작의 결과를 초래할수 있습니다. 이것을 ‘잘 작동하는것 같아 보여’ 라고 테스트 한다는것은, 코드의 기능들을 20개의 다른 테스트 데이터를 가지고 실행 해 보아야 하는데, 어떤것도 잘못된것이 없다는것을 증명하기 위해서 사용하는 시간들은. 시간을 쓰는 좋은 방법이 아닙니다. </p><br><br><p>특히, 자동화 테스트가 테스트를 몇초 안에 끝낼수 있는 상황이면, 이것은 전적으로 맞는 이야기 입니다. 만약 어떤것이라도 잘못 되었을때, 테스트는 예상치 못한 동작들을 찾아내는데 도움이 됩니다. </p><br><p>때때로, 코드가 정상적으로 잘 작동할때, 흉측하고 재미없는 테스트들을 작성하는 상황에 직면하는것은 우리를 생산성 잇고 창의적인 프로그래밍 작업과 멀어지게 하는일이 될수도 있습니다. </p><br><p>하지만! 테스트를 작성하는것은, 테스트를 수동으로 진행 하는것에 몇시간을 쏟거나 새로 발견된 문제점들을 찾아내는것 보다는 좀 더 생산적입니다. </p><br><br><h3 id="테스트는-문제점들을-방지해-줍니다"><a href="#테스트는-문제점들을-방지해-줍니다" class="headerlink" title="테스트는 문제점들을 방지해 줍니다"></a>테스트는 문제점들을 방지해 줍니다</h3><br><br><p>테스트는 문제점들을 찾아내기만 하는게 아니라, 문제점들을 방지해 줍니다. 테스트가 개발의 안좋은 점 이라고 생각하는것은 잘못 된 생각입니다. </p><br><p>테스트 없이는, 어플리케이션의 목적과 의도된 코드의 동작들이 불투명 해질수 있습니다. </p><p><br>본인이 직접 작성한 코드일지라도, 때로 그 코드들을 가지고 정확히 무엇을 수행하는지 찾아내야 할때가 있습니다.<br><br></p><p>테스트는 이러한 점을 바꿉니다. 테스트는 코드를 내부에서부터 보고, 무언가가 잘못되었을때 어떤 부분이 잘못 되었는지 비추어 줍니다. 본인이 어떤것이 잘못 되었는지에 대해 깨닫지 못했을때에도 어떤게 잘못 되었는지에 대해 비추어 줄수 있습니다.<br><br></p><h3 id="테스트는-코드를-좀더-매력적으로-만들어-줍니다"><a href="#테스트는-코드를-좀더-매력적으로-만들어-줍니다" class="headerlink" title="테스트는 코드를 좀더 매력적으로 만들어 줍니다"></a>테스트는 코드를 좀더 매력적으로 만들어 줍니다</h3><p><br><br></p><p>우리는 매우 엄청난 소프트웨어를 만들었을지 모릅니다. 하지만 다수의 다른 개발자들은 아무리 좋은 소프트웨어라도 그것을 보는것을 거부할지도 모릅니다. 왜냐하면, 테스트 하기에 어려움이 있을지 모르기 때문입니다. 테스트가 없이는, 엄청난 소프트웨어라는것을 믿지 않을것입니다. Django 의 기본 개발자인 Jacob Kaplan-Moss 는, “테스트가 없는 코드는 디자인적으로 깨져 잇는 코드” 라고 했습니다. </p><br><p>다른 개발자들은 소프트웨어를 심각하게 고려 하기 이전에, 소프트웨어 내의 테스트들을 확인 하기를 원합니다. </p><br><br><h3 id="테스트는-팀원들이-함께-일하게-도와줍니다"><a href="#테스트는-팀원들이-함께-일하게-도와줍니다" class="headerlink" title="테스트는 팀원들이 함께 일하게 도와줍니다"></a>테스트는 팀원들이 함께 일하게 도와줍니다</h3><p><br><br></p><p>이전까지는, 한명의 개발자가 어플리케이션을 유지 보수하는 시점에서만 작성이 되었습니다<br></p><p>하지만, 복잡한 어플리케이션들은 팀 단위로 유지 보수가 됩니다.<br><br></p><p>테스트들은 동료들이 좋지 않은 방향으로 당신이 작성한 코드들을 고치는것을 방지해 줍니다. 그리고, 다른 사람들이 작성한 코드들도 알지도 못하면서 바꾸는것을 방지해 줍니다. </p><br><p>만약, Django 프로그래머로 살아가고 싶다면, 테스트 작성하는것을 잘 할줄 알아야 합니다.<br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>테스트 코드들을 작성하는것은 어렵고, 지루하고, 재미 없습니다. </p><br><p>하지만, 테스트 코드를 작성하고, 자동화 된 테스트를 진행하면서 소프트웨어의 완성도도 높이고, 코드의 퀄리티도 높일수 있습니다. <br></p><p>협업을 할때에도 많은 도움이 되고, 본인이 작성하는 코드에 대한 이해도도 더 높아집니다. <br></p><p>좋은 Django 개발자가 되기 위해서는, 자동화 테스트를 잘 알아야 합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/05/01/Writing-your-first-Django-app-part5-1%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part4 - 2편</title>
      <link>http://djangojeng-e.github.io/2020/04/30/Writing-your-first-Django-app-part4-2%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/30/Writing-your-first-Django-app-part4-2%ED%8E%B8/</guid>
      <pubDate>Thu, 30 Apr 2020 13:48:56 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Generic-뷰-사용하기&quot;&gt;&lt;a href=&quot;#Generic-뷰-사용하기&quot; class=&quot;headerlink&quot; title=&quot;Generic 뷰 사용하기&quot;&gt;&lt;/a&gt;Generic 뷰 사용하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;적은 코드가 낫다 &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;Part3 에서 detail() 과 results() 뷰들은 매우 짧지만, 중복이 됩니다. &lt;/p&gt;
&lt;p&gt;index() 뷰도 비슷하고, 투표 리스트를 출력합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이 뷰들은 공통적인 기본 웹개발 방법을 대표합니다. &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;URL 에서 전달된 파라미터에 따라서 데이터를 데이터베이스에서 가져오고 &lt;/li&gt;
&lt;li&gt;템플릿을 읽고 처리된 템플릿을 반환합니다 &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;p&gt;이것은 매우 공통된 부분이기 때문에, 이것을 쉽게 다룰수 있는 generic view 시스템을 Django 가 제공합니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Generic-뷰-사용하기"><a href="#Generic-뷰-사용하기" class="headerlink" title="Generic 뷰 사용하기"></a>Generic 뷰 사용하기</h2><br><p>적은 코드가 낫다 </p><br><p>Part3 에서 detail() 과 results() 뷰들은 매우 짧지만, 중복이 됩니다. </p><p>index() 뷰도 비슷하고, 투표 리스트를 출력합니다. </p><br><p>이 뷰들은 공통적인 기본 웹개발 방법을 대표합니다. </p><br><ol><li>URL 에서 전달된 파라미터에 따라서 데이터를 데이터베이스에서 가져오고 </li><li>템플릿을 읽고 처리된 템플릿을 반환합니다 </li></ol><br><p>이것은 매우 공통된 부분이기 때문에, 이것을 쉽게 다룰수 있는 generic view 시스템을 Django 가 제공합니다. </p><br><a id="more"></a><br><h2 id="왜-GenericView-인가"><a href="#왜-GenericView-인가" class="headerlink" title="왜 GenericView 인가?"></a>왜 GenericView 인가?</h2><br><br><p>Generic view 는 웹개발에서 공통된 패턴들에 대해서 <br>더이상 파이썬 코드들을 쓸 필요가 없는 지점까지 추상화 합니다. </p><br><p>튜토리얼에서 작업하고 있었던 polls 앱을 generic view 를 사용하도록 전환 해 봅시다. <br></p><p>몇가지 코드를 지우고도 사용할수 있게 됩니다! 전환을 위해서 다음 스텝들을 거쳐 갑니다. </p><br><ol><li>URLConf 바꾸기 </li><li>불필요하고 오래된 코드 삭제하기 </li><li>Django 의 genericview 를 기반으로 하는 새로운 코드 쓰기 </li></ol><br><blockquote><p><strong>왜 코드를 다시 작업하는가?</strong> </p><p>보통 Django 앱을 작성할때에는, </p><p>generic view 를 사용하는것이 문제 해결에 도움이 되는지에 대해 먼저 파악 합니다.</p><p>코드를 중간에 리펙토링 하지 않고, 처음부터 generic view 를 사용합니다. </p><p>튜토리얼에서는, 단지 의도적으로 주요 컨셉에 집중하기 위해서 </p><p>어려운 방식으로 뷰를 작성 했었던것 뿐입니다. </p></blockquote><br><br><h2 id="Generic-view-로-전환"><a href="#Generic-view-로-전환" class="headerlink" title="Generic view 로 전환"></a>Generic view 로 전환</h2><br><h3 id="Views-수정하기"><a href="#Views-수정하기" class="headerlink" title="Views 수정하기"></a>Views 수정하기</h3><br><p>index, detail 그리고 results 뷰들의 오래된 코드들을 삭제하고, django 의 generic view 를 사용해 봅니다. generic view  를 사용하기 위해서, polls/views.py 파일을 열고, 아래와 같이 코드를 바꾸어 줍니다. </p><br><blockquote><p>polls/views.py 파일을 열고, 아래 뷰들을 수정해 줍니다. </p><p>index()</p><p>detail()</p><p>results()</p><p>vote() 는 수정해 주지 않습니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"><span class="keyword">from</span> django.views <span class="keyword">import</span> generic</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexView</span><span class="params">(generic.ListView)</span>:</span></span><br><span class="line">    template_name = <span class="string">'polls/index.html'</span></span><br><span class="line">    context_object_name = <span class="string">'latest_question_list'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_queryset</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""Return the last five published questions."""</span></span><br><span class="line">        <span class="keyword">return</span> Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DetailView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">'polls/detail.html'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResultsView</span><span class="params">(generic.DetailView)</span>:</span></span><br><span class="line">    model = Question</span><br><span class="line">    template_name = <span class="string">'polls/results.html'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    ... <span class="comment"># same as above, no changes needed.</span></span><br></pre></td></tr></table></figure><br><br><p>여기서 우리는 두개의 generic view 를 사용합니다. ListView 와 DetailView 입니다. </p><br><blockquote><p>ListView 는 “모든 객체의 리스트를 출력하기” </p><p>DetailView 는 “디테일 페이지 출력하기” </p><p>이 두가지 아이디어를 요약 하여, genericview 가 만들어 졌습니다. </p></blockquote><br><br><ul><li>각 generic view 들은 어떤 모델을 사용해서 작동해야 할지 알아야 합니다. 이것은 model 속성들 사용에 의해서 주어집니다. </li><li>DetailView  는 URL 에서 켑쳐된 Primary Key 를 기대하고 있기 때문에, question_id 를 pk 로 바꿔줍니다. </li></ul><br><h2 id="DetailView"><a href="#DetailView" class="headerlink" title="DetailView"></a>DetailView</h2><br><p>﻿기본값으로 <code>DetailView</code> 는 <code>&lt;appname&gt;/&lt;model name&gt;_detail.html</code>템플릿 형태를 사용합니다. 튜토리얼 예시에서는 “polls/question_detail.html” 템플릿을 사용할것 입니다.</p><br><blockquote><p>﻿</p><p>하지만, 이번 튜토리얼에서는 template_name = “polls/detail.html” 을 둠으로써,</p><p>기존에 만든 템플릿을 사용하게 하였습니다.</p><p>template_name 속성은,</p><p>기본으로 정해진 템플릿명 대신에 django에게 특정 템플릿 이름을 사용하게 합니다.</p><p>﻿</p></blockquote><br><p>﻿template_name 속성을 results 리스트 뷰에도 명시하여, <br>기존에 사용했던 results view 와 detail view 가 화면에 출력 될때, 다르게 render 되게 만듭니다.<br> 이렇게 되면 두 뷰가 같은 DetailView 라고 해도, 다르게 표시가 됩니다.</p><p><br><br></p><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><br><p><br>﻿</p><p>비슷한 맥락으로, ListView 는 기본 템플릿으로 <code>&lt;app name&gt;/&lt;model name&gt;_list.html</code>을 사용합니다.<br></p><p>하지만, 우리는 tempalte_name = ‘polls/index.html’ 템플릿으로 명시를 해줌으로써,<br> ListView 가 기존에 있던 ‘polls/index.html’ 템플릿을 사용하도록 설정해줍니다.</p><p>﻿<br><br></p><p>﻿이전 튜토리얼 과정에서, 템플릿들은 question 과 lastest_question_list 컨텍스트 변수들을 가지고 있는 컨텍스트들을 전달 받았었습니다.<br> DetailView 는 question 변수가 자동으로 주어집니다. 이것은 모델명을 기반으로 가져오는것이라, <br>자동으로 DetailView 가 적절한 컨텍스트 변수명을 판단하여 가져옵니다.</p><br><blockquote><p>﻿</p><p>ListView 에 context 변수명 속성을 명시해 줍니다</p><p>context_object_name = latest_question_list</p><p>ListView는 기본적으로 자동으로 생성하는 컨텍스트 변수명은 question_list 입니다. 이 context 변수명을 명시를 해주기 위해서,</p><p>context_object_name 속성을 지정해 줍니다.</p><p>﻿</p></blockquote><br><p>context_object_name 을 지정해주고 싶지 않다면, 그냥 템플릿에서 context 변수명들을 바꾸어 주면 됩니다. </p><br><br><h2 id="URL-세팅해주기"><a href="#URL-세팅해주기" class="headerlink" title="URL 세팅해주기"></a>URL 세팅해주기</h2><p><br><br></p><p>views.py 에 있는 뷰들이 generic view  들인 클래스 뷰들로 바뀌었습니다. </p><p>vote  를 제외한 index, detail 그리고 results 뷰들이 바뀌었고. 이것들이 url 에서 호출되도록 변경해주어야 합니다. </p><br><br><p>﻿polls/urls.py 파일을 열어서, index, detail 그리고 results 뷰에 대한 URL설정을 고쳐줍니다.</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views</span><br><span class="line"></span><br><span class="line">app_name = <span class="string">'polls'</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">""</span>, views.IndexView.as_view(), name=<span class="string">'index'</span>),</span><br><span class="line">    path(<span class="string">'specifics/&lt;int:pk&gt;/'</span>, views.DetailView.as_view(), name=<span class="string">'detail'</span>), </span><br><span class="line">    <span class="comment"># &lt;int:question_id&gt; 를 &lt;int:pk&gt; 로 바꾸어줌 </span></span><br><span class="line">    path(<span class="string">'&lt;int:pk&gt;/results/'</span>, views.ResultsView.as_view(), name=<span class="string">'results'</span>),</span><br><span class="line">    <span class="comment"># &lt;int:question_id&gt; 를 &lt;int:pk&gt; 로 바꾸어줌 </span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><br><blockquote><p>﻿</p><p>IndexView, DetailView 그리고 ResultsView 는</p><p>클래스 기반의 generic view 입니다.</p><p>이 뷰들을 URL에서 호출하려면,</p><p>view 뒤에 as_view() 함수를 붙여줘야 잘 작동합니다.</p><p>그리고, <a href="int:question_id">int:question_id</a> 를 <a href="int:pk">int:pk</a> 로 바꾸어줘야 작동합니다.</p><p>왜냐하면, DetailView 는 pk 를 인자로 받기 때문입니다.</p><p>﻿</p></blockquote><br><br><p>서버를 시작하고, 한번 시험해 봅니다. IndexView 호출 </p><br><img src="/2020/04/30/Writing-your-first-Django-app-part4-2%ED%8E%B8/image1.png" class=""> <br><p>DetailView 호출 </p><img src="/2020/04/30/Writing-your-first-Django-app-part4-2%ED%8E%B8/image2.png" class=""> <br><p>ResultsView 호출 </p><img src="/2020/04/30/Writing-your-first-Django-app-part4-2%ED%8E%B8/image3.png" class=""> <p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><p>사전 지식 없이 튜토리얼만 보고 공부 시작했다가 낭패 봤습니다. </p><p>겨우겨우 찾아서, 클래스 기반의 뷰들을 작성 해보았지만.. 알아내기 힘들었습니다. </p><br><p>폼과 generic view 와 친숙해 졌으면, part5 로 넘어갑니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/30/Writing-your-first-Django-app-part4-2%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part4 - 1편</title>
      <link>http://djangojeng-e.github.io/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/</guid>
      <pubDate>Thu, 30 Apr 2020 09:32:05 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;최소한의-폼-작성하기&quot;&gt;&lt;a href=&quot;#최소한의-폼-작성하기&quot; class=&quot;headerlink&quot; title=&quot;최소한의 폼 작성하기&quot;&gt;&lt;/a&gt;최소한의 폼 작성하기&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;튜토리얼 part3 에 이어서, 계속 진행 합니다. Web-poll 어플리케이션을 이어서 진행하고. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;part4 에서는 form 프로세싱과 코드양을 줄이는데 집중합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;polls/detail.html 수정하기 &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;지난 포스팅까지 작성한 &lt;/p&gt;
&lt;p&gt;디테일 템플릿 polls/detail.html  파일에 &lt;/p&gt;
&lt;p&gt;html &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 요소를 추가하여 업데이트 해줍니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="최소한의-폼-작성하기"><a href="#최소한의-폼-작성하기" class="headerlink" title="최소한의 폼 작성하기"></a>최소한의 폼 작성하기</h2><br><br><p>튜토리얼 part3 에 이어서, 계속 진행 합니다. Web-poll 어플리케이션을 이어서 진행하고. </p><br><p>part4 에서는 form 프로세싱과 코드양을 줄이는데 집중합니다. </p><br><p>polls/detail.html 수정하기 </p><br><blockquote><p>지난 포스팅까지 작성한 </p><p>디테일 템플릿 polls/detail.html  파일에 </p><p>html <code>&lt;form&gt;</code> 요소를 추가하여 업데이트 해줍니다. </p></blockquote><br><a id="more"></a><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> error_message %&#125;</span><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; error_message &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'polls:vote' question.id %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"choice"</span> <span class="attr">id</span>=<span class="string">"choice</span></span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span> <span class="attr">value</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; choice.id &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"choice</span></span></span><span class="template-variable">&#123;&#123; forloop.counter &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; choice.choice_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Vote"</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><br><p>빠른 설명: </p><br><ul><li><p>위 템플릿은 각각의 Question 의 Choice 를 라디오 버튼으로 표시해 줍니다.  각 라디오 버튼의 Value 값은 질문에 붙어 있는 Choice 의 ID 가 됩니다. 각 라디오 버튼의 이름은 choice 가 됩니다. 이것이 의미하는 바는, 누군가가 하나의 라디오 버튼을 누르고 폼을 제출하면, 폼은 POST데이터 <code>choice=#</code> 을 전송합니다. <code>#</code>은 선택된 choice  의 ID 값입니다. </p></li><li><pre><code class="django"><span class="xml">form 에 action 은 <span class="comment">{% url 'polls:vote' question.id %}</span> 를 설정해줍니다. </span><span class="xml"><span class="comment"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  form의 method  는 POST 로 설정해 줍니다. Form 의 method 를 POST 로 설정해 주는것은 중요합니다. 왜냐하면, 이 form 을 제출한다는것은 서버쪽의 데이터를 변경할것이기 때문입니다. 언제든 서버쪽 데이터를 바꾸고 싶으면, method&#x3D;&quot;POST&quot; 를 사용하면 됩니다. Django 에만 국한된 이야기가 아니라, 전반적으로 좋은 웹개발을 위한 연습이 됩니다. </span><br><span class="line"></span><br><span class="line">- forloop.counter 는 for 태그가 반복문의 몇번을 수행했는지 표시합니다</span><br><span class="line"></span><br><span class="line">- POST 폼을 생성하고 있기 때문에, 우리는 &#96;Cross Site Request Forgeries&#96;. 즉, 사이트간 요청 위조에 대해서 걱정해야 합니다. 감사하게도, 이것에 대해서 너무 걱정할 필요가 없습니다. Django 는 이것에 대한 아주 요용한 시스템을 갖추고 있습니다. </span><br><span class="line"></span><br><span class="line">  &#96;&#96;&#96;django</span><br><span class="line">  내부 URL 을 타겟으로 하는 모든 POST 폼들은 &#123;% csrf_token %&#125; 템플릿 테그를 사용해 줍니다.</span><br></pre></td></tr></table></figure></span></span></code></pre></li></ul><br><br><h2 id="CSRF-사이트간-요청-위조"><a href="#CSRF-사이트간-요청-위조" class="headerlink" title="CSRF (사이트간 요청 위조)"></a>CSRF (사이트간 요청 위조)</h2><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">내부 URL 을 타겟으로 하는 모든 POST 폼들은 </span><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span><span class="xml"> 템플릿 테그를 사용해 줍니다.</span></span><br></pre></td></tr></table></figure><br><blockquote><p>Cross-site Request Forgery (CSRF, XSRF) 는, </p><p>웹사이트 취약점 공격의 하나로, 사용자가 자신의 의지와는 무관하게</p><p>공격자가 의도한 행위 (수정, 삭제, 등록) 을 웹사이트에 요청하게 하는 공격을 의미합니다. </p><p>출처 : 위키백과 </p></blockquote><br><h2 id="URL-설정"><a href="#URL-설정" class="headerlink" title="URL 설정"></a>URL 설정</h2><p><br><br></p><p>이제 form 이 수행하는 Django view 를 수정해줘야 할 차례입니다. 전송된 데이터를 가지고 무언가를 수행할 django view 를 작성해 줍시다. part3 에서, vote 를 처리하는 url 설정을 해주었었습니다.</p><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/vote/', views.vote, name='vote'),</span></span><br></pre></td></tr></table></figure><br><br><h2 id="polls-views-py-수정하기"><a href="#polls-views-py-수정하기" class="headerlink" title="polls/views.py 수정하기"></a>polls/views.py 수정하기</h2><br><p>위 url 은 vote 함수를 불러옵니다. part3 에서, 이것을 처리하는 예시 view 를 작성했었는데, </p><p>이 polls/views.py 파일에서 vote() 함수를 아래와 같이 업데이트 해줍니다.</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> reverse</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Choice, Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        selected_choice = question.choice_set.get(pk=request.POST[<span class="string">'choice'</span>])</span><br><span class="line">    <span class="keyword">except</span> (KeyError, Choice.DoesNotExist):</span><br><span class="line">        <span class="comment"># 투표 폼을 다시 출력 </span></span><br><span class="line">        <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, </span><br><span class="line">                  &#123; <span class="string">'question'</span>: question,</span><br><span class="line">                    <span class="string">'error_message'</span>: <span class="string">"You didn't select a choice"</span>,</span><br><span class="line">                    &#125;)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        selected_choice.votes += <span class="number">1</span> </span><br><span class="line">        selected_choice.save()</span><br><span class="line">        <span class="comment"># 항상 POST 데이터를 성공적으로 다루었을때는</span></span><br><span class="line">        <span class="comment"># HttpResponseRedirect 를 반환해 줍니다 </span></span><br><span class="line">        <span class="comment"># 이것으로 사용자가 데이터를 뒤로가기 버튼을 눌러서 데이터를 두번 전송하는것을 방지합니다. </span></span><br><span class="line">        <span class="keyword">return</span> HttpResponseRedirect(reverse(<span class="string">'polls:results'</span>, args=(question.id,)))</span><br></pre></td></tr></table></figure><br><br><p>위의 예시에는, 아직 우리가 공부하지 않은 몇가지가 있습니다. </p><br><ul><li><p><code>request.POST</code>는 사전 형태의 객체로 전송된 데이터를 key 이름으로 접근할수 있게 해줍니다. 해당 예시에서는, <code>request.POST[&#39;choie&#39;]</code>는 선택된 choice 의 ID 를 문자열 형태로 반환합니다. <code>request.POST</code> 값은 언제나 문자열로 되어 있습니다. </p></li><li><p>Django 는 <code>request.GET</code>도 지원합니다. GET 데이터를 접근할때 사용합니다. 하지만, 튜토리얼에서는, 명시적으로 <code>request.POST</code>를 사용합니다. 데이터를 바꿀때에는 <code>POST</code> 콜을 통해서만 작업합니다. </p></li><li><p>만약 choice 가 POST 데이터에서 제공되지 않았을때, <code>request.POST[&#39;choice&#39;]</code> 는 <code>KeyError</code>를 발생시킵니다. 위의 예시 코드는 choice 가 주어지지 않았을때, KeyError 를 확인하고 question 폼을 다시 표시합니다. </p></li><li><p>choice 카운트가 증가하였을때, 코드는 <code>HttpResponse</code> 대신에, <code>HttpResponseRedirect</code>를 반환합니다. <code>HttpResponseRedirect</code>는 하나의 인자, 즉 redirect 할 URL 을 받습니다. 위의 코드에 주석으로 나와 있듯이, POST 데이터를 성공적으로 다루었을때에는, <code>HttpResponseRedirect</code>를 반환하여, 데이터가 2번 전송되는것을 방지 합니다. </p></li><li><p><code>reverse()</code> 함수를 <code>HttpResponseRedirect</code>에 사용하는데. reverse() 함수는 view에서 하드코드된 URL 을 가지게 되는것을 방지합니다. <code>reverse(&#39;polls:results&#39;, args=(question.id))</code> 에서 보이듯, view 의 이름과 전달할 변수명을 받습니다. 해당 예시에서는, reverse() 함수가 아래와 같은 문자열을 반환 합니다.  </p></li><li><pre><code class="django"><span class="xml">reverse('polls:results', args=(quesiton.id,)) </span><span class="xml">'/polls/3/results/' </span><span class="xml"># 3 은 question.id 이고 </span><span class="xml"># Redirect 된 URL 은 'results' 뷰를 호출하여 마지막 페이지를 출력합니다 </span><span class="xml"><span class="comment"><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">part3 에서 다루었지만, request 는 HttpRequest 객체입니다. </span><br><span class="line"></span><br><span class="line">&lt;br&gt;HttpRequest 객체에 대해서 더 알고 싶으면, request and response 문서를 확인 하면 됩니다. </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">누군가가 질문에 대한 투표를 마치면, vote() 뷰는 질문에 대한 results 페이지로 리다이렉트 시킵니다. 따라서, result view 도 바꿔줘야 합니다. </span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">## polls&#x2F;views.py (Results view) 수정</span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">polls&#x2F;views.py 에 results() 함수를 아래와 같이 업데이트 해줍니다. </span><br><span class="line"></span><br><span class="line">&lt;br&gt;</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;django</span><br><span class="line">from django.shortcuts import get_object_or_404, render</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def results(request, question_id):</span><br><span class="line">    question &#x3D; get_object_or_404(Question, pk&#x3D;question_id)</span><br><span class="line">    return render(request, &#39;polls&#x2F;results.html&#39;, &#123;&#39;question&#39;: question&#125;)</span><br></pre></td></tr></table></figure></span></span></code></pre></li></ul><br><br><p>part3 에서 봤던 detail() 뷰와 거의 흡사합니다만, template 이름만 다른것을 확인 할수 있습니다. </p><br><blockquote><p>results 뷰에서, </p><p>‘polls/results.html’에 render 를 해주는데.</p><p>polls/results.html 파일이 없습니다. <br></p><p>polls/results.html 파일을 생성하고, 아래와 같이 내용을 채워줍니다. </p></blockquote><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; choice.choice_text &#125;&#125;</span><span class="xml"> -- </span><span class="template-variable">&#123;&#123; choice.votes &#125;&#125;</span><span class="xml"> vote</span><span class="template-variable">&#123;&#123; choice.votes|<span class="name">pluralize</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'polls:detail' question.id %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Vote again?<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><br><blockquote><p>서버를 시작하고, 체크해봅니다. 브라우저에서 polls/ 로 접속합니다. </p></blockquote><br><img src="/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/image1.png" class=""> <br><blockquote><p>what’s up? 질문을 클릭합니다. </p></blockquote><br><img src="/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/image2.png" class=""><br><blockquote><p>Not Much 를 선택하고 Vote 를 눌러봅니다 </p></blockquote><br><img src="/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/image3.png" class=""><br><blockquote><p>아무것도 선택 안하고, </p><p>vote 버튼을 누르면, 에러가 표시될겁니다. </p></blockquote><br><img src="/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/image4.png" class=""> <br><p><strong>Race conditions</strong></p><br><p>vote() 뷰는 조그마한 문제점이 하나 있습니다. Votes 뷰는 첫번째로, selected_choice 객체를 데이터베이스에서 가져옵니다. 그리고, 새 votes 의 값을 계산하고 데이터베이스에 다시 저장합니다. </p><p>하지만, 만약 두명의 사용자가 동시에 vote 를 할때에는, 이것이 잘못 될수도 있습니다. </p><p>이것은 race condition 이라고 불리우는데, F() 함수를 사용해서 이점을 피할수도 있습니다. </p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>reverse() 함수를 자주 사용하던데, reverse 함수 사용법을 다시 숙지 해야 합니다. </p><p>그리고 F() 함수도 나중에 리뷰해야 할것 같습니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/30/Writing-your-first-Django-app-part4-1%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part3 - 7편</title>
      <link>http://djangojeng-e.github.io/2020/04/30/Writing-your-first-Django-app-part3-7%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/30/Writing-your-first-Django-app-part3-7%ED%8E%B8/</guid>
      <pubDate>Thu, 30 Apr 2020 04:08:14 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;URL-이름공간-분리하기&quot;&gt;&lt;a href=&quot;#URL-이름공간-분리하기&quot; class=&quot;headerlink&quot; title=&quot;URL 이름공간 분리하기&quot;&gt;&lt;/a&gt;URL 이름공간 분리하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;이번 튜토리얼은, polls 앱 하나 밖에 없습니다. &lt;/p&gt;
&lt;p&gt;하지만, 실제 Django 프로젝트에서는, 프로젝트에서 사용되는 앱의 갯수가, 5개, 10개, 20개 혹은 그 이상이 될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;그렇다면, Django 는 URL 이름들을 어떻게 구분해야 할까요? &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="URL-이름공간-분리하기"><a href="#URL-이름공간-분리하기" class="headerlink" title="URL 이름공간 분리하기"></a>URL 이름공간 분리하기</h2><br><p>이번 튜토리얼은, polls 앱 하나 밖에 없습니다. </p><p>하지만, 실제 Django 프로젝트에서는, 프로젝트에서 사용되는 앱의 갯수가, 5개, 10개, 20개 혹은 그 이상이 될수 있습니다. </p><br><p>그렇다면, Django 는 URL 이름들을 어떻게 구분해야 할까요? </p><br><a id="more"></a> <br><blockquote><p>예를들어, </p><p>polls 앱은 detail view 를 가지고 있습니다. </p><p>하지만, polls 앱 외에 다른 앱인 blog 앱이 존재한다고 가정할때, </p><p>그 앱도 detail view 를 가지고 있을수 있습니다. </p></blockquote><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">그렇다면, </span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> %&#125;</span><span class="xml"> 태그안에서 어떻게 이 두가지의 detail view 를 구분할까요?</span></span><br></pre></td></tr></table></figure><br><h2 id="URLConf-에-이름공간-추가하기"><a href="#URLConf-에-이름공간-추가하기" class="headerlink" title="URLConf 에 이름공간 추가하기"></a>URLConf 에 이름공간 추가하기</h2><br><p>정답은, URLConf 에 이름공간들을 추가해 주는것입니다. </p><p><br>polls/urls.py 파일로 가서, app_name 을 추가해 줍니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django.urls import path</span></span><br><span class="line"></span><br><span class="line"><span class="xml">from . import views</span></span><br><span class="line"></span><br><span class="line"><span class="xml">app_name = 'polls'         # Namespace 를 추가해줍니다 </span></span><br><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">    path('', views.index, name='index'),</span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/', views.detail, name='detail'),</span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/results/', views.results, name='results'),</span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/vote/', views.vote, name='vote'),</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure><br><br><h2 id="URLConf-에-추가된-Namesapce-사용"><a href="#URLConf-에-추가된-Namesapce-사용" class="headerlink" title="URLConf 에 추가된 Namesapce 사용"></a>URLConf 에 추가된 Namesapce 사용</h2><br><p>polls/index.html 템플릿은 아래와 같이 작성되어 있습니다. (지난 포스팅) </p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'detail' question.id %&#125;"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><br><p>바뀐 namespace 를 적용하고, a 태그가 정확하게 polls 에 있는 detail  뷰를 가르키게 하려면, </p><p>아래와 같이 a 태그를 수정해 줍니다. </p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"&#123;% url 'polls:detail' question.id %&#125;"</span>&gt;</span></span><br><span class="line">    &#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> %&#125;</span><span class="xml"> 태그안에, </span></span><br><span class="line"><span class="xml">'polls:detail' 이라고 써주어서, polls 에 있는 detail path 라는것을 지정해 줍니다.</span></span><br></pre></td></tr></table></figure><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><br><p>polls 앱 말고, 다른 앱이 존재 한다면, namespace  를 분리하기 위해서, 아래 절차를 따르면 됩니다. </p><br><ol><li><p>해당 엡의 urls.py 에 app_name 을 지정 </p></li><li><p>템플릿에서 </p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> %&#125;</span><span class="xml">  태그안에 '앱이름:url명' 으로 url  연결</span></span><br><span class="line"></span><br><span class="line"><span class="xml">e.g. </span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'polls:detail' question.id %&#125;</span></span><br></pre></td></tr></table></figure></li></ol><br><p>뷰를 작성하는것이 편해졌다면, 이제 튜토리얼의 part 4 로 넘어갑니다. </p><p><br>part4 는, form  프로세싱과 generic 뷰에 대한 기본을 다룹니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/30/Writing-your-first-Django-app-part3-7%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part3 - 6편</title>
      <link>http://djangojeng-e.github.io/2020/04/28/Writing-your-first-Django-app-part3-6%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/28/Writing-your-first-Django-app-part3-6%ED%8E%B8/</guid>
      <pubDate>Tue, 28 Apr 2020 10:39:10 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;템플릿에서-하드-코드된-코드-제거하기&quot;&gt;&lt;a href=&quot;#템플릿에서-하드-코드된-코드-제거하기&quot; class=&quot;headerlink&quot; title=&quot;템플릿에서 하드 코드된 코드 제거하기&quot;&gt;&lt;/a&gt;템플릿에서 하드 코드된 코드 제거하기&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;polls/index.html 템플릿에서 question 에 연결된 링크를 기억해야 합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;해당 링크는 부분적으로 아래와 같이 하드 코드 되어 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;href&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/polls/&amp;#123;&amp;#123; question.id &amp;#125;&amp;#125;/&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123;&amp;#123; question.question_text &amp;#125;&amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;a&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="템플릿에서-하드-코드된-코드-제거하기"><a href="#템플릿에서-하드-코드된-코드-제거하기" class="headerlink" title="템플릿에서 하드 코드된 코드 제거하기"></a>템플릿에서 하드 코드된 코드 제거하기</h2><br><br><p>polls/index.html 템플릿에서 question 에 연결된 링크를 기억해야 합니다. </p><p><br>해당 링크는 부분적으로 아래와 같이 하드 코드 되어 있습니다. </p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/&#123;&#123; question.id &#125;&#125;/"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><a id="more"></a><p>하드 코드된 코드들의 문제점은, </p><p><br>템플릿 수가 많아질때, URL 들을 바꾸는것이 굉장히 어려워 진다는 점입니다. </p><br><p>하지만 path() 함수내 polls.urls 모듈에 대한 인자를 정의 하여, 특정 URL에 대한 의존도를 없앨수 있습니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> %&#125;</span><span class="xml"> 템플릿 테그를 사용해서 이 작업을 수행합니다.</span></span><br></pre></td></tr></table></figure><br><p>polls/index.html 의 코드를 아래와 같이 바꿔줍니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"</span></span></span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> 'detail' question.id %&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"># 참고 polls/urls.py </span></span><br><span class="line"></span><br><span class="line"><span class="xml">urlpatterns = [</span></span><br><span class="line"><span class="xml">    path("", views.index, name='index'),</span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/', views.detail, name='detail'), </span></span><br><span class="line"><span class="xml">    # 위 a 태그 안에 'detail' 을 지정함 </span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/results/', views.results, name='results'),</span></span><br><span class="line"><span class="xml">    path('<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/vote/', views.vote, name='vote'),</span></span><br><span class="line"><span class="xml">]</span></span><br></pre></td></tr></table></figure><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">url</span></span> %&#125;</span><span class="xml"> 태그 안에,  'detail' 이름을 가진 url 주소를 정의하고, </span></span><br><span class="line"><span class="xml"> question.id 라는 인자를 넣어주었습니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">이러한 방식으로, polls.urls 모듈에 있는 URL 정의를 조회하여 <span class="tag">&lt;<span class="name">a</span>&gt;</span> 태그가 작업을 수행 합니다.</span></span><br></pre></td></tr></table></figure><br><blockquote><p>polls/specifics/12/ 같이 </p><p>detail view 를 보여주는 URL 주소명을 다른것으로 바꾸고 싶을때에는, </p><p>이전에는 polls/index.html 의 a 태그를 바꾸어 줬어야 했겟지만, </p><p>이제는 polls/urls.py 파일에 name=’detail’ 을 가진 path 를 </p><p>아래와 같이 고쳐주면 됩니다.  </p></blockquote><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">path('specifics/<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/', views.detail, name='detail'),</span></span><br></pre></td></tr></table></figure><br><br><p>실험을 해보기 위해서, 브라우저에서 <a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/</a> 로 접속합니다.</p><p>What’s up? 질문이 화면에 출력이 됩니다. </p><br><img src="/2020/04/28/Writing-your-first-Django-app-part3-6%ED%8E%B8/image1.png" class=""><br><br><p>이 What’s up? 을 클릭하면, polls/urls.py 에 있는 detail 뷰가 호출이 되고, <br> </p><p>아래 path() 를 참조하여, url을 찾아가고, detial 뷰가 실행 됩니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">path('specifics/<span class="tag">&lt;<span class="name">int:question_id</span>&gt;</span>/', views.detail, name='detail'),</span></span><br></pre></td></tr></table></figure><br><br><p>브라우저에서  <a href="http://127.0.0.1:8000/polls/specifics/1/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/specifics/1/</a> 로 이동하게 됩니다. <br></p><p>그리고, 화면에 What’s up? 질문에 딸린 choice 들이 표시가 되겠죠. </p><br><br><img src="/2020/04/28/Writing-your-first-Django-app-part3-6%ED%8E%B8/image2.png" class=""><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>urls.py 파일안에  path() 함수 안에 URL name 을 짓고. </p><p>이 이름을 템플릿에서 사용할수 있습니다.  </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/28/Writing-your-first-Django-app-part3-6%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part3 - 5편</title>
      <link>http://djangojeng-e.github.io/2020/04/28/Writing-your-first-Django-app-part3-5%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/28/Writing-your-first-Django-app-part3-5%ED%8E%B8/</guid>
      <pubDate>Tue, 28 Apr 2020 10:25:31 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;템플릿-시스템-사용하기&quot;&gt;&lt;a href=&quot;#템플릿-시스템-사용하기&quot; class=&quot;headerlink&quot; title=&quot;템플릿 시스템 사용하기&quot;&gt;&lt;/a&gt;템플릿 시스템 사용하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;이전 포스팅에서 작성했던 detail() 뷰로 다시 돌아갑니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, question_id)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    question = get_object_or_404(Question, pk=question_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;string&quot;&gt;&#39;polls/detail.html&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;question&#39;&lt;/span&gt;: question&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;컨텍스트 변수 question 이 polls/html 로 전달이 되어 render 가 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="템플릿-시스템-사용하기"><a href="#템플릿-시스템-사용하기" class="headerlink" title="템플릿 시스템 사용하기"></a>템플릿 시스템 사용하기</h2><br><p>이전 포스팅에서 작성했던 detail() 뷰로 다시 돌아갑니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure><br><blockquote><p>컨텍스트 변수 question 이 polls/html 로 전달이 되어 render 가 됩니다. </p></blockquote><br><a id="more"></a><p>polls/templates/polls/detail.html 템플릿을 아래와 같이 고쳐줍니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; choice.choice_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><p>템플릿 시스템은 변수의 속성들에 접근하기 위해서 <code>.</code> 을 찍어 조회를 하는, dot-lookup 형식을 사용합니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; question.question_text &#125;&#125;</span><span class="xml"> 에서 </span></span><br><span class="line"></span><br><span class="line"><span class="xml">첫번째로 django 는 question 객체에 대한 사전을 조회 합니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml">두번째로, . 뒤에 question_text 라는 속성값을 조회 합니다.</span></span><br></pre></td></tr></table></figure><br><br>서버를 시작하고, 브라우저를 열어서** [**http://127.0.0.1:8000/polls/1/**](http://127.0.0.1:8000/polls/1/) **에 접속하면,** <p><strong>아래와 같이 question 하나와, 해당 question에 있는 choice 들이 리스트 되어 있는것을 확인 할수 있습니다.</strong> </p><br><img src="/2020/04/28/Writing-your-first-Django-app-part3-5%ED%8E%B8/image1.png" class=""><p><br><br></p><h2 id="메서드의-호출"><a href="#메서드의-호출" class="headerlink" title="메서드의 호출"></a>메서드의 호출</h2><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> choice <span class="keyword">in</span> question.choice_set.all %&#125;</span><span class="xml">   </span></span><br><span class="line"><span class="xml"># question 에 붙어있는 선택들을 for 문으로 순회 시작 </span></span><br><span class="line"><span class="xml">   </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123; choice.choice_text &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"># 순회 하는동안 <span class="tag">&lt;<span class="name">li</span>&gt;</span> 태그 안에 하나씩 choice_text 들을 출력 </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span><span class="xml">                                  # for 문 종료</span></span><br></pre></td></tr></table></figure><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">메써드의 호출은 </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> %&#125;</span><span class="xml"> 반복문에서 이루어집니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml">question.choice_set.all 은 파이썬 코드에서 question.choice_set.all() 로 해석이 됩니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">question.choice_set.all() 은 순회가능한 Choice 객체들을 반환하고, </span></span><br><span class="line"></span><br><span class="line"><span class="xml">이것은 </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> %&#125;</span><span class="xml"> 테그 안에서 사용하기 적합합니다.</span></span><br></pre></td></tr></table></figure><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><br><p>템플릿에 나오는 템플릿 언어의 구분이 많이 힘들었습니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> %&#125;</span><span class="xml"> 나 </span><span class="template-variable">&#123;&#123; question.choice_set.all &#125;&#125;</span><span class="xml"> 같은 템플릿 언어들 말입니다. </span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% %&#125;</span><span class="xml"> 어떠한 로직들을 불러오는 코드라고 생각하고 (예 조건문, 반복문) </span></span><br><span class="line"><span class="template-variable">&#123;&#123; &#125;&#125;</span><span class="xml"> 는 변수나 객체의 값들만 가지는 코드라고 이해하고 넘어갑니다.</span></span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/28/Writing-your-first-Django-app-part3-5%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part3 - 4편</title>
      <link>http://djangojeng-e.github.io/2020/04/28/Writing-your-first-Django-app-part3-4%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/28/Writing-your-first-Django-app-part3-4%ED%8E%B8/</guid>
      <pubDate>Tue, 28 Apr 2020 02:41:55 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;render-숏컷&quot;&gt;&lt;a href=&quot;#render-숏컷&quot; class=&quot;headerlink&quot; title=&quot;render() 숏컷&quot;&gt;&lt;/a&gt;render() 숏컷&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;템플릿을 읽고, 컨텍스를 채우고, 렌더가 된 템플릿을 결과값으로 가진 HttpResponse 객체를 반환 하는 일은 매우 흔한 일입니다. 따라서, Django 는 이것에 대한 shortcut 함수를 제공합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;render() 함수는 &lt;/p&gt;
&lt;p&gt;템플릿을 읽고, context 를 채우고, &lt;/p&gt;
&lt;p&gt;결과를 템플릿에 객체로 반환합니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;render() 함수를 알아보기 위해서, polls/views.py 에 index() 함수를 다시 써줍니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="render-숏컷"><a href="#render-숏컷" class="headerlink" title="render() 숏컷"></a>render() 숏컷</h2><br><br><p>템플릿을 읽고, 컨텍스를 채우고, 렌더가 된 템플릿을 결과값으로 가진 HttpResponse 객체를 반환 하는 일은 매우 흔한 일입니다. 따라서, Django 는 이것에 대한 shortcut 함수를 제공합니다. </p><br><blockquote><p>render() 함수는 </p><p>템플릿을 읽고, context 를 채우고, </p><p>결과를 템플릿에 객체로 반환합니다. </p></blockquote><br><p>render() 함수를 알아보기 위해서, polls/views.py 에 index() 함수를 다시 써줍니다. </p><br><a id="more"></a> <br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="comment"># render 를 가져옵니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    context = &#123;<span class="string">'latest_question_list'</span>: latest_question_list&#125;</span><br><span class="line">    <span class="comment"># return HttpResponse(template.render(context, request)) 대신 아래 render() 를 써줍니다.</span></span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/index.html'</span>, context)</span><br></pre></td></tr></table></figure><br><br><p>render() 가 기존에 썼었던 HttpResponse 와 같은 작업을 수행하는것을 확인할수 있습니다. </p><br><blockquote><p>브라우저에서, 아래 URL로 접속해서 확인 합니다. </p><p><a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/</a></p></blockquote><br><img src="/2020/04/28/Writing-your-first-Django-app-part3-4%ED%8E%B8/image1.png" class=""> <br><blockquote><p>render() 를 사용하면, </p><p>loader 와 HttpResonse 모듈들을 불러오지 않아도 됩니다. </p></blockquote><br><p>render() 함수는 </p><br><ol><li>요청을 첫번째 인자로 받고, </li><li>템플릿 이름을 두번째 인자로 받고, </li><li>사전 형태의 자료를 선택적으로 세번째 인자로 받습니다. </li></ol><br><blockquote><p>render() 함수는, </p><p>주어진 context 들이 그려진 template 에 </p><p>HttpResponse 객체를 반환 합니다 </p></blockquote><br><h2 id="404-에러-발생-시키기"><a href="#404-에러-발생-시키기" class="headerlink" title="404 에러 발생 시키기"></a>404 에러 발생 시키기</h2><br><p>polls/views.py 에 있는 detail() 뷰를 한번 보겠습니다 (주어진 투표의 질문들을 나열하는 페이지). </p><p><br>Http404를 통해서, 404 에러를 발생시키는 detail 뷰는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"><span class="comment"># ...</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        question = Question.objects.get(pk=question_id)</span><br><span class="line">    <span class="keyword">except</span> Question.DoesNotExist:</span><br><span class="line">        <span class="keyword">raise</span> Http404(<span class="string">"Question does not exist"</span>)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure><br><blockquote><p>여기서 새로운 컨셉은 Http404 예외 인데, </p><p>요청된 ID 를 가진 question 이 존재하지 않을때 예외를 발생시킵니다. </p></blockquote><br><p>테스트를 진행 하기 위해서, polls/templates/polls/detail.html 파일을 생성하고, 아래 내용을 추가해 줍니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; quetions &#125;&#125;</span></span><br></pre></td></tr></table></figure><br><blockquote><p>현재 데이터베이스에 있는 질문은 딱 1개로, </p><p>이전 과정에서 생성한 “What’s up?” 질문밖에 없으므로, </p><p>id 값이 2 인 질문은 존재하지 않습니다. </p></blockquote><br><p><a href="http://127.0.0.1:8000/polls/1/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/1/</a> 로 접속하면, </p><p>What’s Up? 질문이 페이지에 출력이 되겠지만. </p><br><p> <a href="http://127.0.0.1:8000/polls/2/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/2/</a> 로 접속하면, </p><p>출력할 질문이 없어서, 예외가 발생합니다. 이때 Http404 가 메시지를 출력할겁니다. </p><br><img src="/2020/04/28/Writing-your-first-Django-app-part3-4%ED%8E%B8/image2.png" class=""> <br><p>Quetion does not exist 가 잘 표시되는것을 확인할수 있습니다. </p><br><h2 id="get-object-or-404-숏컷-함수"><a href="#get-object-or-404-숏컷-함수" class="headerlink" title="get_object_or_404() 숏컷 함수"></a>get_object_or_404() 숏컷 함수</h2><br><p>get() 함수를 사용하고, 객체가 존재하지 않을때,<br></p><p>Http404 를 발생시키는것은 매우 빈번하게 일어나는 일입니다. Django 는 이것에 대한 숏컷도 제공합니다. </p><p><br>다시 쓰여진 detail() 뷰는 아래와 같습니다.<br></p><br><p>polls/views.py 에 detail() 뷰를 아래와 같이 수정해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> get_object_or_404, render</span><br><span class="line"><span class="comment"># get_object_or_404 를 코드 상단에서 가져오는것을 잊지 않습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    question = get_object_or_404(Question, pk=question_id)</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'polls/detail.html'</span>, &#123;<span class="string">'question'</span>: question&#125;)</span><br></pre></td></tr></table></figure><p><br><br></p><p>get_object_or_404() 함수는 Django 모델을 첫번째 인수로 받고, 키워드 인수들을 두번째로 받습니다. </p><p>받은 인수들을 get() 함수에 전달하고, 객체가 존재하지 않으면 Http404 를 발생 시킵니다.  </p><p><br><br></p><blockquote><p>아래 캡쳐 화면을 통해서, </p><p>get_object_or_404() 가 잘 동작하는지 확인 해 봅시다. </p><p><a href="http://127.0.0.1:8000/polls/1/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/1/</a> 로 접속하면, </p><p>What’s Up? 질문이 페이지에 출력이 되겠지만. </p><p> <a href="http://127.0.0.1:8000/polls/2/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/2/</a> 로 접속하면, </p><p>출력할 질문이 없어서, 예외가 발생하는것은 같은데. </p><p>메시지가 “No Question matches the given query” 라고 표시됩니다. </p></blockquote><p><br><br></p><img src="/2020/04/28/Writing-your-first-Django-app-part3-4%ED%8E%B8/image3.png" class=""> <br><p>또한, get_list_or_404() 라는 함수도 존재합니다. get_object_or_404 와 비슷하게 동작하지만, </p><p>받은 인자들을 함수 대신, filter() 함수에 전달 합니다. <br></p><br><p>get_list_or_404() 함수는, 빈 리스트가 조회되었을때,  Http404 를 발생 시킵니다. </p><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>장고 숏컷을 다시 리뷰 합니다. </p><br><ol><li>render() 함수 </li><li>Http404() 함수 </li><li>get_object_or_404() 함수 </li></ol><br><p>filter() 함수와 get() 함수의 차이점도 숙지하고 지나갑니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/28/Writing-your-first-Django-app-part3-4%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part3 - 3편</title>
      <link>http://djangojeng-e.github.io/2020/04/27/Writing-your-first-Django-app-part3-3%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/27/Writing-your-first-Django-app-part3-3%ED%8E%B8/</guid>
      <pubDate>Mon, 27 Apr 2020 04:23:42 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;실제로-무언가를-하는-view-작성하기&quot;&gt;&lt;a href=&quot;#실제로-무언가를-하는-view-작성하기&quot; class=&quot;headerlink&quot; title=&quot;실제로 무언가를 하는 view 작성하기&quot;&gt;&lt;/a&gt;실제로 무언가를 하는 view 작성하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;각각의 뷰는 두가지중 하나를 실행 하도록 되어 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;요청된 페이지의 컨텐츠를 포함하고 있는 HttpResponse 객체를 반환 &lt;/li&gt;
&lt;li&gt;Http404 같은 예외를 발생 &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;p&gt;나머지 동작은, 개발자 마음대로 입니다~ &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="실제로-무언가를-하는-view-작성하기"><a href="#실제로-무언가를-하는-view-작성하기" class="headerlink" title="실제로 무언가를 하는 view 작성하기"></a>실제로 무언가를 하는 view 작성하기</h2><br><p>각각의 뷰는 두가지중 하나를 실행 하도록 되어 있습니다. </p><br><ol><li>요청된 페이지의 컨텐츠를 포함하고 있는 HttpResponse 객체를 반환 </li><li>Http404 같은 예외를 발생 </li></ol><br><p>나머지 동작은, 개발자 마음대로 입니다~ </p><br><a id="more"></a><br><blockquote><p>view  는 데이터베이스에서 기록을 읽어 올수 있고, </p><p>Django 가 제공하는 혹은 파이썬 템플릿 시스템들을 사용 할수 있고. </p><p>PDF, XML, ZIP 같은 파일등을 생성할수도 있습니다 </p><br><p>어떤 파이썬 라이브러리든지 사용해서 View 가 작업을 수행할수 있습니다. </p></blockquote><br><p>편의성 측면에서, Django 가 원하는건 단지 두가지 뿐입니다. HttpResponse 혹은 예외 처리 뿐입니다. </p><br><p>Part 2 에서 진행 했었던, database API 를 사용해서, index() view  를 한번 실행 해 봅시다 </p><br><blockquote><p>polls/views.py 의 index 뷰를 </p><p>시스템에 존재하는 가장 최근의 질문들 5개를 출력하게 합니다 </p><p>질문들은 날짜별로 , 으로 구분되게 합니다 </p><br><p>index() 뷰를 아래와 같이 수정해 줍니다  </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    lastest_question_list = Question.obejcts.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>] </span><br><span class="line">    output = <span class="string">', '</span>.join([q.question_text <span class="keyword">for</span> q <span class="keyword">in</span> latest_question_list]) </span><br><span class="line">    <span class="keyword">return</span> HttpResponse(output) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 다른 view 들 (detail, results, vote) 는 수정하지 않습니다. </span></span><br><span class="line"><span class="comment"># [q.question_text for q in latest_question_list] 는 list comprehension </span></span><br><span class="line"><span class="comment"># ', '.join 으로 list comprehension 안에 값들을 콤마로 구분 합니다</span></span><br></pre></td></tr></table></figure><br><br><p>파트 2에서, Question.objects.all() API 를 둘러보았었는데, </p><p><br>이번에는, <code>Question.objects.order_by(&#39;-pub_date&#39;)[:5]</code> 가 나왔습니다. </p><br><blockquote><p>Question 에 있는 객체 중, </p><p>가장 최근의 pub_date 순으로 5개를 조회 하는 쿼리를 실행  </p><p>Question.objects.order_by(‘-pub_date’)[:5]</p><br><p>Question에 있는 모든 객체 조회 쿼리, </p><p>Question.objects.all() </p></blockquote><br><br><p>근데 여기에, 문제가 좀 있습니다. </p><p><br>뷰에 있는 HttpResponse 값은 하드코드가 된 페이지 디자인 입니다. 페이지의 모양을 바꾸고 싶으면, </p><p><br>이 파이썬 코드를 매번 바꿔줘야 합니다. 코드가 짧을때는 상관 없겠지만, 페이지가 길면, 더 큰 문제가 될수 있고. </p><p><br>무엇보다, 디자인이 예쁘지 않습니다. </p><br><br><blockquote><p>따라서, </p><p>Django의 템플릿 시스템을 사용하여 디자인과 파이썬 코드를 분리합니다 </p><p>view 가 사용할수 있는 템플릿을 생성해서 사용합니다. </p></blockquote><br><h2 id="Template-생성하기"><a href="#Template-생성하기" class="headerlink" title="Template 생성하기"></a>Template 생성하기</h2><br><br><h3 id="index-html-파일-생성하기"><a href="#index-html-파일-생성하기" class="headerlink" title="index.html 파일 생성하기"></a>index.html 파일 생성하기</h3><br><p>polls 폴더내에, templates 라는 폴더를 생성합니다. </p><p><br>Django 는 기본적으로 App 폴더안에 있는 Templates 폴더를 찾아서, Template 파일을 확인하고, 그것을 본 뒤에, 브라우저에 출력을 해줍니다. </p><br><p>polls 앱에서 사용하는 templates 는 polls/templates/ 폴더 안에 있는 파일들이겠죠? </p><br><blockquote><p>생성한 templates 폴더안에, index.html 파일을 생성합니다 </p><p>polls/templates/polls/index.html </p></blockquote><br><img src="/2020/04/27/Writing-your-first-Django-app-part3-3%ED%8E%B8/image1.png" class=""><br><br><blockquote><p><strong>템플릿 이름 공간</strong></p><p>장고는 이름과 일치하는 첫번째 템플릿을 선택할 것이고, </p><p>다른 응용 프로그램에 같은 이름의 템플릿이 있다면, 장고는 그것을 구별할수 없습니다. </p><br><p>우리는 장고가 올바른 템플릿을 찾게 만들어줘야 하고, </p><p>이것을 확실히 하기 위한 가장 좋은 방법은, 그들의 이름을 붙여주는것입니다. </p><br><p>즉, 어플리케이션 자체를 위해 명명된 템플릿 폴더안에, </p><p>다시한번, 어플리케이션 이름을 가진 폴더를 생성하여 </p><p><code>(polls/templates/polls/index.html)</code></p><p>다른 이름공간에 존재하는 템플릿을 구분하게 만들어 주는 것입니다.  </p></blockquote><br><br><h3 id="index-html-파일-내용-추가"><a href="#index-html-파일-내용-추가" class="headerlink" title="index.html 파일 내용 추가"></a>index.html 파일 내용 추가</h3><br><p><code>polls/templates/polls/index.html</code> 파일에 아래 내용을 추가해줍니다. </p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if latest_question_list %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    &#123;% for question in latest_question_list %&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/polls/&#123;&#123; question.id &#125;&#125;/"</span>&gt;</span>&#123;&#123; question.question_text &#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">&#123;% else %&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>No polls are available.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># </span><span class="template-tag">&#123;% %&#125;</span><span class="xml"> 안에 들어 있는 내용들은 템플릿 언어 입니다. 로직 혹은 구문들을 사용할수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123;&#125;&#125;</span><span class="xml"> 안에 들어 있는 내용도 템플릿 언어 인데, 변수들을 표시할수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># html 에서 이 템플릿 언어를 사용하여, 해당 데이터들을 다룰수 있습니다.</span></span><br></pre></td></tr></table></figure><br><h3 id="View-에서-index-html-파일을-템플릿으로-사용"><a href="#View-에서-index-html-파일을-템플릿으로-사용" class="headerlink" title="View 에서 index.html 파일을 템플릿으로 사용"></a>View 에서 index.html 파일을 템플릿으로 사용</h3><p><br><br></p><p>polls/views.py 파일을 아래와 같이 수정해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"><span class="keyword">from</span> django.template <span class="keyword">import</span> loader    <span class="comment"># 템플릿 파일을 불러오기 위한 loader 모듈 가져오기 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    latest_question_list = Question.objects.order_by(<span class="string">'-pub_date'</span>)[:<span class="number">5</span>]</span><br><span class="line">    template = loader.get_template(<span class="string">'polls/index.html'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># template 에 전달할 객체 latest_question_list 를 사전 형태로 저장 </span></span><br><span class="line"></span><br><span class="line">    context = &#123;</span><br><span class="line">        <span class="string">'latest_question_list'</span>: latest_question_list,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> HttpResponse(template.render(context, request))</span><br><span class="line">    <span class="comment"># render 를 사용하여, template에서 사용할 객체 latest_question_list 를 template 에 출력해줌</span></span><br></pre></td></tr></table></figure><p><br><br></p><p>해당 코드는 polls/index.html 템플릿 파일을 읽어오고, 거기에 context 를 전달합니다. </p><p><br>context 는 사전형태로, 메핑된 파이썬 객체에 할당된 템플릿 변수 이름들입니다. <br><br></p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># 이 템플릿 변수가 html 에 전달이 되면, </span></span><br><span class="line"><span class="xml"># 위에 나온 `</span><span class="template-tag">&#123;% %&#125;</span><span class="xml">` 나 `</span><span class="template-variable">&#123;&#123; &#125;&#125;</span><span class="xml">` 같은 템플릿 언어를 사용하여, 데이터들을 다룰수 있습니다.</span></span><br></pre></td></tr></table></figure><br><blockquote><p>브라우저에 접속해서, </p><p><a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/</a> 에 접속합니다.</p><p>part2 에서 입력하였던, What’s up? 질문이 화면에 표시됩니다. </p></blockquote><br><img src="/2020/04/27/Writing-your-first-Django-app-part3-3%ED%8E%B8/image2.png" class=""><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>처음에 굉장히 헷갈리는 개념입니다. </p><p>view 를 어떻게 작성해야 할지, <br></p><p>어떻게 URL에 연결해줘야 할지, <br></p><p>어떤 Template 을 끄집어내서 사용할지,,, <br><br></p><p>계속 아래 그림을 생각하면서, view 가 어떤 역할을 하는지 이해하려 하고 넘어갑니다. <br></p><img src="/2020/04/27/Writing-your-first-Django-app-part3-3%ED%8E%B8/image3.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/27/Writing-your-first-Django-app-part3-3%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part3 - 2편</title>
      <link>http://djangojeng-e.github.io/2020/04/26/Writing-your-first-Django-app-part3-2%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/26/Writing-your-first-Django-app-part3-2%ED%8E%B8/</guid>
      <pubDate>Sun, 26 Apr 2020 03:41:35 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;더-많은-view-쓰기&quot;&gt;&lt;a href=&quot;#더-많은-view-쓰기&quot; class=&quot;headerlink&quot; title=&quot;더 많은 view 쓰기&quot;&gt;&lt;/a&gt;더 많은 view 쓰기&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;지난 포스팅에서 짧게 polls 앱에 필요한 views를 둘러보았습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이제 몇개의 view 들을 polls/views.py 에 더 써줄겁니다. 추가될 view 들은 좀 다릅니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;추가되는 view 들은 인수를 가집니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.shortcuts &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; render&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.http &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; HttpResponse&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Create your views here.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponse(&lt;span class=&quot;string&quot;&gt;&quot;Hello, world. You&#39;re at the polls index.&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;detail&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, question_id)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponse(&lt;span class=&quot;string&quot;&gt;&quot;You&#39;re looking at question %s.&quot;&lt;/span&gt; % question_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;results&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, question_id)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    response = &lt;span class=&quot;string&quot;&gt;&quot;You&#39;re looking at the results of question %s.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponse(response % question_id)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;vote&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request, question_id)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponse(&lt;span class=&quot;string&quot;&gt;&quot;You&#39;re voting on question %s.&quot;&lt;/span&gt; % question_id)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="더-많은-view-쓰기"><a href="#더-많은-view-쓰기" class="headerlink" title="더 많은 view 쓰기"></a>더 많은 view 쓰기</h2><br><br><p>지난 포스팅에서 짧게 polls 앱에 필요한 views를 둘러보았습니다. </p><p><br>이제 몇개의 view 들을 polls/views.py 에 더 써줄겁니다. 추가될 view 들은 좀 다릅니다. </p><p><br>추가되는 view 들은 인수를 가집니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render</span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your views here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world. You're at the polls index."</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're looking at question %s."</span> % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">results</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    response = <span class="string">"You're looking at the results of question %s."</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(response % question_id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">vote</span><span class="params">(request, question_id)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"You're voting on question %s."</span> % question_id)</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><blockquote><p>새로 추가된 view 들을 URL과 연결해 줍니다 </p><p>polls/urls.py 에 아래와 같이 각 view 들을 URL 과 연결해 줍니다 .</p></blockquote><br><br><h2 id="HttpResponse"><a href="#HttpResponse" class="headerlink" title="HttpResponse"></a>HttpResponse</h2><p><br><br></p><p>참고로, <code>HttpResponse</code> 함수는, 단순히 괄호안에 들어간 값을 브라우저에 출력해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views         <span class="comment"># polls/views.py 를 가져옴</span></span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    <span class="comment"># 예: /polls/</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/polls/ 로 접속시, views 에 있는 index 함수 호출후 실행 </span></span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 예: /polls/5/</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/polls/5/ 로 접속시, views 에 있는 detail 함수 호출후 실행 </span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/'</span>, views.detail, name=<span class="string">'detail'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 예: /polls/5/results/</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/polls/5/results/ 로 접속시, view 에 있는 results 함수 호출후 실행 </span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/results/'</span>, views.results, name=<span class="string">'results'</span>),</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 예: /polls/5/vote/</span></span><br><span class="line">    <span class="comment"># http://127.0.0.1:8000/polls/5/vote/ 로 접속시, view 에 있는 vote 함수 호출후 실행  </span></span><br><span class="line">    path(<span class="string">'&lt;int:question_id&gt;/vote/'</span>, views.vote, name=<span class="string">'vote'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><br><p><a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls</a>/34 도 브라우저에서 실행 해서 한번 봅니다. 이렇게 하면, views 에 있는 detail() 메서드가 실행되고, URL에 포함되어 있는 어떤 ID 값을 인수로 받아서 화면에 결과값이 출력됩니다. </p> <br><p><a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls</a>/34/results <br></p><p><a href="http://127.0.0.1:8000/polls/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls</a>/34/vote 도 실행 해 보세요. </p><br><p><strong>HttpResponse 함수가 실행되고, 단순히 괄호안에  들어간 값을 브라우저에 출력해 줍니다.</strong><br><br></p><blockquote><p>누군가가 웹사이트에 있는 페이지를 요청 하면, </p><p>예를들어, <a href="http://127.0.0.1:8000/polls/34/" target="_blank" rel="noopener">http://127.0.0.1:8000/polls/34/</a></p><br><p>Django 는 RootURL 설정으로인해 mysite/urls.py 파이썬 모듈을 읽어 들입니다. </p><p>루트 URL 설정으로 경로가, </p><p><code>path(&#39;polls&#39;, include(&#39;polls.urls&#39;))</code>로 설정되어 있기 때문에, </p><p>polls/urls.py 에 있는 url 설정이 불러져서 작동합니다. </p></blockquote><p><br><br></p><h2 id="lt-int-question-id-gt-는-인자"><a href="#lt-int-question-id-gt-는-인자" class="headerlink" title="&lt;int:question_id&gt;는 인자"></a><code>&lt;int:question_id&gt;</code>는 인자</h2><br><p>polls/ 가 URL 경로에 매칭이되고, polls.urls 로 넘어가는데. </p><p>polls/34/  라는 URL 경로에 들어가면, 34 가 <code>&lt;int:question_id&gt;</code> 와 매칭이 됩니다, 따라서 detail() 뷰를 호출할때. 이것을 인자로 넘겨줍니다.</p><p><br><br></p><blockquote><p>URL 의 확장자는 붙여줄 필요는 없지만, </p><p>원한다면 붙여주어도 괜찮습니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">path(<span class="string">'polls/latest.html'</span>, views.index),</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p>아직도 좀 헷갈리는 부분이긴 한데. </p><p>url 을 통해서 요청을 받고, 그 요청을 view 에서 처리한다는 개념을 다시 복습하고 갑니다. </p><p>url 을 통해서 요청을 받을때, 그 요청에 인수까지 받아서 view 에 있는 함수에 전달해 줄수 있다. </p><p>이런식으로 개념을 잡고 넘어갑니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/26/Writing-your-first-Django-app-part3-2%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part3 - 1편</title>
      <link>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part3-1%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part3-1%ED%8E%B8/</guid>
      <pubDate>Sat, 25 Apr 2020 12:14:53 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Part-3-Overview&quot;&gt;&lt;a href=&quot;#Part-3-Overview&quot; class=&quot;headerlink&quot; title=&quot;Part 3 Overview&quot;&gt;&lt;/a&gt;Part 3 Overview&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;이번 튜토리얼은 part2 에 이어서, part 3  를 진행합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;여전히 투표 어플리케이션에 대해 진행이 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;Public Interface 인 “view” 에 집중합니다. &lt;/p&gt;
&lt;p&gt;복습을 위해, 아래 그림들을 이전 포스팅에서 가져 왔습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;img src=&quot;/2020/04/25/Writing-your-first-Django-app-part3-1%ED%8E%B8/image1.png&quot; class=&quot;&quot;&gt;

&lt;br&gt;

&lt;p&gt;view 란 Django 안에 있는 하나의 웹페이지 종류로, 보통 특정 기능과 특정 템플릿에 대해 수행합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Part-3-Overview"><a href="#Part-3-Overview" class="headerlink" title="Part 3 Overview"></a>Part 3 Overview</h2><br><p>이번 튜토리얼은 part2 에 이어서, part 3  를 진행합니다. </p><p><br>여전히 투표 어플리케이션에 대해 진행이 됩니다. </p><br><blockquote><p>Public Interface 인 “view” 에 집중합니다. </p><p>복습을 위해, 아래 그림들을 이전 포스팅에서 가져 왔습니다. </p></blockquote><br><img src="/2020/04/25/Writing-your-first-Django-app-part3-1%ED%8E%B8/image1.png" class=""><br><p>view 란 Django 안에 있는 하나의 웹페이지 종류로, 보통 특정 기능과 특정 템플릿에 대해 수행합니다. </p><p><br><a id="more"></a></p><p>예를들면, 블로그 어플리케이션은 아래 view 들이 필요할수 있습니다. </p><br><br><img src="/2020/04/25/Writing-your-first-Django-app-part3-1%ED%8E%B8/image2.png" class=""> <br><table><thead><tr><th><strong>블로그 어플리케이션에 필요할수 있는 view 목록</strong></th><th></th></tr></thead><tbody><tr><td>블로그 홈페이지</td><td>가장 최근의 게시글 몇개를 표시합니다</td></tr><tr><td>게시글 디테일 페이지</td><td>하나의 게시글을 위한 특정페이지의 영구적인 주소</td></tr><tr><td>연도별 아카이브 페이지</td><td>해당 연도에 작성된 모든 게시글들 표시</td></tr><tr><td>월별 아카이브 페이지</td><td>해당 월에 작성된 모든 게시글들 표시</td></tr><tr><td>일별 아카이브 페이지</td><td>해당 일에 작성된 모든 게시글들  표시</td></tr><tr><td>커멘트 엑션</td><td>해당 포스트에 다른 커멘트들을 관리</td></tr></tbody></table><br><br><h2 id="Polls-앱에-필요한-view-목록"><a href="#Polls-앱에-필요한-view-목록" class="headerlink" title="Polls 앱에 필요한 view 목록"></a>Polls 앱에 필요한 view 목록</h2><br><table><thead><tr><th><strong>Polls 어플리케이션에 필요한 View 목록</strong></th><th></th></tr></thead><tbody><tr><td>Question 인덱스 페이지</td><td>가장 최근에 등록된 질문 몇개들을 표시</td></tr><tr><td>Question 디테일 페이지</td><td>결과를 제외한 질문의 텍스트를 표시, 투표를 할수 있는 양식 제공</td></tr><tr><td>Question 결과 페이지</td><td>해당 투표질문의 결과를 표시</td></tr><tr><td>투표 액션</td><td>특정 투표질문에 있는 특정 옵션의 투표를 관리</td></tr></tbody></table><br><br><p>Django 에서는, 웹페이지들과 다른 컨텐츠가 view 로 전달이 되어서 나옵니다. 각각의 view 는 python 함수로 표시가 됩니다 (혹은, 클래스기반 view 일 경우, 메서드로 표시가 됩니다) </p><br><blockquote><p>Django 는 요청된 URL 을 확인하여, </p><p>어떤 view 를 호출할것인가 판단합니다. </p><p>한마디로, 도메인 이름 뒤에 붙는 URL 부분을 확인하여, View 를 호출합니다. </p></blockquote><br><p>웹 서핑을 하면서 한번쯤은 이런 URL을 본적이 있을겁니다 “ME2/Sites/dirmod.asp?sid=&amp;type=gen&amp;mod=Core+Pages&amp;gid=A6CD4967199A42D9B65B1B” </p><br><p>Django 에서는 이것보다는 더 엘레강스한 URL 패턴들을 허용 합니다 </p><br><blockquote><p>URL Pattern 의 예는 아래와 같습니다. </p><p><code>/newsarchive/&lt;year&gt;/&lt;month&gt;/</code></p></blockquote><br><p>Django 에서 URL 을 view 로 연결하려면, </p><p>URLConfs 를 사용하면 됩니다. URLConf 는 URL 패턴을 view에 연결합니다. </p><br><p>이번 튜토리얼은 기본적인 URLConfs 사용에 대한 매핑을 제공합니다. </p><br><p>더 많은 세부사항은, URL Dispatcher 문서를 확인 하면 됩니다. </p><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><br><p>다시 한번 복습하지만, 아래 그림처럼, </p><br><p>브라우저로 해당 URL 을 접속하면, VIEW를 호출하고, <br>해당 VIEW 에 있는 함수는 MODEL 이나 Template을 통해서 데이터베이스에 접근하거나,<br> 결과를 사용자에게 다시 돌려줄수 있습니다. </p><br><p>해당 URL 에서 View 를 호출하기 위해서는, URLConf 의 URL 설정을 해주어야 합니다. </p><br><img src="/2020/04/25/Writing-your-first-Django-app-part3-1%ED%8E%B8/image1.png" class=""> <br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part3-1%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 9편</title>
      <link>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/</guid>
      <pubDate>Sat, 25 Apr 2020 10:16:06 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;어드민-페이지-기능-살펴보기&quot;&gt;&lt;a href=&quot;#어드민-페이지-기능-살펴보기&quot; class=&quot;headerlink&quot; title=&quot;어드민 페이지 기능 살펴보기&quot;&gt;&lt;/a&gt;어드민 페이지 기능 살펴보기&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;지난 포스팅에서, Question 을 관리 할수 있도록, &lt;/p&gt;
&lt;p&gt;&lt;br&gt;Question 모델을 어드민 페이지에 등록을 하였습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;Django 는 이제 관리자 페이지에 Question 을 표시해야 하는것을 압니다. &lt;/p&gt;
&lt;br&gt;

&lt;img src=&quot;/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/image1.png&quot; class=&quot;&quot;&gt; 

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="어드민-페이지-기능-살펴보기"><a href="#어드민-페이지-기능-살펴보기" class="headerlink" title="어드민 페이지 기능 살펴보기"></a>어드민 페이지 기능 살펴보기</h2><br><br><p>지난 포스팅에서, Question 을 관리 할수 있도록, </p><p><br>Question 모델을 어드민 페이지에 등록을 하였습니다. </p><p><br>Django 는 이제 관리자 페이지에 Question 을 표시해야 하는것을 압니다. </p><br><img src="/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/image1.png" class=""> <br><a id="more"></a><br><blockquote><p>화면에 보이는 Question 을 클릭하면, </p><p>Question 들을 바꿀수 있는 리스트 페이지로 이동합니다. </p><p>해당 페이지는 데이터베이스에 존재하는 모든 question  들을 표시하고, </p><p>관리자는 하나를 선택해서 컨텐츠를 바꿀수 있습니다. </p></blockquote><br><img src="/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/image2.png" class=""> <br><p>이전 포스팅에서 등록했던 ‘What’s up?’ 질문이 등록되어 있는것을 확인 할수 있습니다. </p><p>이 ‘What’s up?’ 을 클릭합니다. </p><br><br><img src="/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/image3.png" class=""> <br><p><strong>여기서 알아야 할것은 아래와 같습니다.</strong> </p><ul><li><p>해당 폼은 Question 모델을 따라서 자동으로 생성됩니다. </p></li><li><p>다른 형태의 필드 타입들 (DateTimeField, CharField) 는 적절한 HTML input widget 으로 표시됩니다. 각 타입필드는 django admin 에서 어떻게 표시되어야 하는지 알고 있습니다. </p></li><li><p>각 DateTimeField 는 JavaScript 숏컷을 가집니다. 날짜는 “Today” 숏컷 그리고 날짜 팝업을 가지고, 시간은 “Now” 숏컷과 공통된 시간대를 나열하는 편리한 팝업을 가집니다.</p></li></ul><br><br><p><strong>밑부분에 위치하는 버튼들은 아래와 같습니다</strong> </p><ul><li><p>Save: 변경 사항들을 저장하고, 해당 객체에 대한 변경 리스트를 반환합니다</p></li><li><p>Save and continue editing: 변경 사항들을 저장하고, 이 객체에 대한 관리자 페이지를 다시 로드 합니다 </p></li><li><p>Save and add another: 변경 사항들을 저장하고, 이 객체에 대한 빈값을 로드합니다. 새로운 값을 입력하기 편하게 만들어 줍니다 </p></li><li><p>Delete: 삭제 확인 페이지를 표시해줍니다 </p></li></ul><br><p>만약 “Date published” 값이 튜토리얼1 에서 입력한 시간과 맞지 않는다면, TIME_ZONE 세팅에서 맞는 값을 지정하지 않았을지 모릅니다. TIME_ZONE 세팅을 바꾸고 다시 페이지를 열어서 맞는값이 표시되는지 확인하면 됩니다. <br><br></p><h2 id="변경-내역-확인하기"><a href="#변경-내역-확인하기" class="headerlink" title="변경 내역 확인하기"></a>변경 내역 확인하기</h2><br><p>“Date published” 값을 “Today” 와 “Now” 버튼을 사용해서 바꿔줍니다. 바꾼뒤에는, “Save and continue Editing” 버튼을 눌러줍니다. </p><br><blockquote><p>그리고 나서, 우측 상단에 있는 “History” 버튼을 눌러줍니다. </p></blockquote><br><p>Django 어드민 페이지에서, 이 객체에 대한 모든 수정 사항들을 표시하는 페이지를 확인 할수 있습니다. </p><p>시간과 사용자 내역을 볼수 있습니다. </p><br><img src="/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/image4.png" class=""> <br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>모델 API 와 어드민 사이트와 친숙해 졌으면, 어떻게 polls 앱에 더 많은 views 를 추가할수 있는 알아보기 위해 part3 로 넘어갑니다.  </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part2-9%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 8편</title>
      <link>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part2-8%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part2-8%ED%8E%B8/</guid>
      <pubDate>Sat, 25 Apr 2020 10:08:38 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;polls-앱을-어드민에서-수정하기&quot;&gt;&lt;a href=&quot;#polls-앱을-어드민에서-수정하기&quot; class=&quot;headerlink&quot; title=&quot;polls 앱을 어드민에서 수정하기&quot;&gt;&lt;/a&gt;polls 앱을 어드민에서 수정하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅에, 관리자 사이트 꼐정을 만들고, Django에서 기본으로 제공하는 관리자 페이지에 접속해 보았습니다. 접속해 보면, 우리가 생성한 polls 앱을 수정할수 있는 컨텐츠가 보이지 않습니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;polls 앱의 컨텐츠는 Quetion 과 Choice 인데, &lt;br&gt;관리자 페이지에서 추가, 수정, 삭제가 되지 않는다면, 관리자 페이지가 무슨 의미가 있을까요? &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="polls-앱을-어드민에서-수정하기"><a href="#polls-앱을-어드민에서-수정하기" class="headerlink" title="polls 앱을 어드민에서 수정하기"></a>polls 앱을 어드민에서 수정하기</h2><br><p>지난 포스팅에, 관리자 사이트 꼐정을 만들고, Django에서 기본으로 제공하는 관리자 페이지에 접속해 보았습니다. 접속해 보면, 우리가 생성한 polls 앱을 수정할수 있는 컨텐츠가 보이지 않습니다. </p><br><br><p>polls 앱의 컨텐츠는 Quetion 과 Choice 인데, <br>관리자 페이지에서 추가, 수정, 삭제가 되지 않는다면, 관리자 페이지가 무슨 의미가 있을까요? </p><br><a id="more"></a><br><blockquote><p>따라서, </p><p>관리자 페이지에서 해당 컨텐츠들 (polls 앱에 있는 Question, Choice) 을 </p><p>관리할수 있게, 관리자 페이지에 등록 해 줘야 합니다. </p></blockquote><br><blockquote><p>관리자 페이지에 등록하기 위해서, </p><p>polls/admin.py 파일에 아래 내용을 추가해 줍니다. </p></blockquote><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin </span><br><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> Question        <span class="comment"># polls 앱안에 models 에서 Question 모델 가져오기 </span></span><br><span class="line"></span><br><span class="line">admin.site.register(Question)       <span class="comment"># 가져온 Question 모델을 어드민에 등록</span></span><br></pre></td></tr></table></figure><br><br><h2 id="관리자-페이지에서-확인"><a href="#관리자-페이지에서-확인" class="headerlink" title="관리자 페이지에서 확인"></a>관리자 페이지에서 확인</h2><br><p><br>Question 컨텐츠를 관리자 페이지에서 관리할수 있도록, 관리자페이지에 가서 확인 해 봅니다. </p><br><p>1) python manage.py runserver 로 개발서버를 실행합니다</p><p>2) <a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a> 으로 접속을 합니다</p><p>3) 이전 포스팅에서 생성한 아이디와 비밀번호를 입력해서 로그인 합니다</p><p>4) 어드민 페이지로 접속을 하고, Questions 가 관리자 페이지에 잘 등록되었는지 확인 합니다. </p><br><br><p>polls/admin.py 파일에 코드를 추가했더니, 아래와 같이 Questions 가 관리자 페이지가 보입니다.</p><br><br><img src="/2020/04/25/Writing-your-first-Django-app-part2-8%ED%8E%B8/image1.png" class=""> <br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>어드민 페이지에서 컨텐츠를 관리하기 위해서, 컨텐츠 정보를 어드민 페이지에 등록 하였습니다. </p><p><br><code>admin.site.register(모델 클래스명)</code> 코드를 잊지 맙시다~  </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part2-8%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 7편</title>
      <link>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part2-7%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part2-7%ED%8E%B8/</guid>
      <pubDate>Sat, 25 Apr 2020 03:14:56 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Django-어드민-소개&quot;&gt;&lt;a href=&quot;#Django-어드민-소개&quot; class=&quot;headerlink&quot; title=&quot;Django 어드민 소개&quot;&gt;&lt;/a&gt;Django 어드민 소개&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;지난 시간까지 데이터베이스를 둘러보았습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;기본 API 를 통해서 데이터를 추가하고, 수정하고, 삭제하는것을 진행 해보았습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이번 포스팅에서는 Django 가 제공하는 관리자 페이지, 즉 Django Admin 에 대해서 알아봅니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Django-어드민-소개"><a href="#Django-어드민-소개" class="headerlink" title="Django 어드민 소개"></a>Django 어드민 소개</h2><br><br><p>지난 시간까지 데이터베이스를 둘러보았습니다. </p><p><br>기본 API 를 통해서 데이터를 추가하고, 수정하고, 삭제하는것을 진행 해보았습니다. </p><br><p>이번 포스팅에서는 Django 가 제공하는 관리자 페이지, 즉 Django Admin 에 대해서 알아봅니다. </p><br><a id="more"></a><br><blockquote><p>철학 </p><p>직원이나 고객들이 사이트의 컨텐츠를 추가하고, 바꾸고, 삭제하는 </p><p>관리자 페이지를 만드는일은 지루한 일입니다. 그다지 창의성을 요구하는일도 아닙니다. </p><br><p>이러한 사유로, Django 는 전적으로 관리자 인터페이스를 생성하는것을 자동화 하였습니다. </p><br><p>Django 는 뉴스룸 환경에서 작성되었습니다. </p><p>컨텐츠 발행자들과 일반 공용 사이트의 구분이 명확한 환경에서 쓰여졌습니다. </p><p>사이트 관리자는 시스템을 사용해서 뉴스 스토리, 스포츠 점수 등을 추가하고, 이러한 컨텐츠들은 공용 사이트에 표시됩니다. </p><br><p>Django 는 사이트 관리자가 컨텐츠들을 수정하기 위한 통합 인터페이스를 생성해야 하는 문제를 해결해 줍니다. </p><br><p>어드민은 사이트 방문자에 의해서 사용될 목적이 없습니다. </p><p>어드민은 관리자 페이지로, 사이트 관리자들을 위한 페이지 입니다. </p></blockquote><br><br><h2 id="Django-어드민-사용자-생성하기"><a href="#Django-어드민-사용자-생성하기" class="headerlink" title="Django 어드민 사용자 생성하기"></a>Django 어드민 사용자 생성하기</h2><br><p>관리자 페이지는, 사이트 관리자들이 로그인 하고 사용할수 있게 만들어야 합니다. </p><p><br>모든 사람들이 사용할수 있다면, 관리자 페이지가 아니게 되겠죠. </p><br><p>따라서, 관리자 사이트를 사용할 사용자를 생성해야 하고, 해당 사용자가 관리자 페이지에 접근할수 있게 해야 합니다. </p><br><p>어드민 사용자를 생성하기 위해서는, <code>python manage.py createsuperuser</code>명령어를 터미널에서 실행 합니다. </p><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(django-tutorial)  ~/django_tutorial/mysite  ( master ) ls</span><br><span class="line">db.sqlite3  manage.py  mysite  polls</span><br><span class="line">(django-tutorial)  ~/django_tutorial/mysite  ( master ) python manage.py createsuperuser</span><br><span class="line">Username (leave blank to use <span class="string">'dhkang'</span>): admin</span><br><span class="line">Email address: admin@example.com</span><br><span class="line">Password: </span><br><span class="line">Password (again): </span><br><span class="line">Superuser created successfully.</span><br></pre></td></tr></table></figure><br><p>관리자 페이지 사용자를 생성하고, username, email address, password, password(again)을 입력하면, 어드민 사용자가 성공적으로 생성됩니다. </p><br><h2 id="개발-서버-실행하기"><a href="#개발-서버-실행하기" class="headerlink" title="개발 서버 실행하기"></a>개발 서버 실행하기</h2><br><p>Django 어드민 사이트는 기본적으로 활성화가 되어 잇습니다. </p><p><br>개발 서버를 시작하고, 어드민을 알아볼수 있습니다. </p><br><blockquote><p>개발 서버를 시작했으면, 브라우저를 열어서, 아래 URL로 접속합니다. </p><p><a href="http://127.0.0.1:8000/admin" target="_blank" rel="noopener">http://127.0.0.1:8000/admin</a></p></blockquote><br><br><img src="/2020/04/25/Writing-your-first-Django-app-part2-7%ED%8E%B8/image1.png" class=""> <br><br><blockquote><p>어드민 사이트에 접속하기 위해서 </p><p>위에서 생성한 username 과 비밀번호를 입력하고 로그인 합니다. </p></blockquote><br><br><img src="/2020/04/25/Writing-your-first-Django-app-part2-7%ED%8E%B8/image2.png" class=""> <br><br><p>번역 옵션이 기본적으로 활성화 되어 있기 때문에, 로그인 화면은 브라우저의 기본 언어로 표시됩니다. </p><br><h2 id="Admin-사이트-들어가기"><a href="#Admin-사이트-들어가기" class="headerlink" title="Admin 사이트 들어가기"></a>Admin 사이트 들어가기</h2><br><br><p>아이디와 비밀번호를 입력한뒤에, 로그인 버튼을 누르면, </p><p>아래와 같은 Django admin 인덱스 페이지를 볼수 있습니다. </p><br><img src="/2020/04/25/Writing-your-first-Django-app-part2-7%ED%8E%B8/image3.png" class=""> <br><p>화면에 보이는것 처럼, 몇가지 수정 가능한 컨텐츠들을 볼수 있습니다. groups 과 users 컨텐츠들은, Django 의 인증 프레임워크인, django.contrib.auth 모듈에서 제공이 됩니다. </p><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><br><p>장고 어드민 페이지를 접속해 보았습니다. 복습으로 순서를 정리하자면,, </p><br><p>1)  python manage.py createsuperuser 로 어드민 관리자 아이디 생성 </p><p>2) python manage.py runserver 로 개발 서버 시작 </p><p>3) <a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a> 으로 관리자 페이지 접속 </p><p>4) 생성된 관리자 아이디로 로그인 </p><p>5) 관리자 페이지 접속 완료 </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/25/Writing-your-first-Django-app-part2-7%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 6편</title>
      <link>http://djangojeng-e.github.io/2020/04/24/Writing-your-first-Django-app-part2-6%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/24/Writing-your-first-Django-app-part2-6%ED%8E%B8/</guid>
      <pubDate>Fri, 24 Apr 2020 11:30:29 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;API-가지고-놀기-3편&quot;&gt;&lt;a href=&quot;#API-가지고-놀기-3편&quot; class=&quot;headerlink&quot; title=&quot;API 가지고 놀기 - 3편&quot;&gt;&lt;/a&gt;API 가지고 놀기 - 3편&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 시간에 이어서, API 실험을 이어서 합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;[1] 부터 [6] 까지는, 지난 포스팅에서 진행한 내용 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [1]: Question.objects.all()                                                                                                                                            &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[1]: &amp;lt;QuerySet [&amp;lt;Question: What&#39;s up?&amp;gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [2]: Question.objects.filter(id=1)                                                                                                                                     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[2]: &amp;lt;QuerySet [&amp;lt;Question: What&#39;s up?&amp;gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [3]: Question.objects.filter(question_text__startswith=&#39;What&#39;)                                                                                                         &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[3]: &amp;lt;QuerySet [&amp;lt;Question: What&#39;s up?&amp;gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [4]: from django.utils import timezone                                                                                                                                 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [5]: current_year = timezone.now().year                                                                                                                                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [6]: Question.objects.get(pub_date__year=current_year)                                                                                                                 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[6]: &amp;lt;Question: What&#39;s up?&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="API-가지고-놀기-3편"><a href="#API-가지고-놀기-3편" class="headerlink" title="API 가지고 놀기 - 3편"></a>API 가지고 놀기 - 3편</h2><br><p>지난 시간에 이어서, API 실험을 이어서 합니다. </p><p><br>[1] 부터 [6] 까지는, 지난 포스팅에서 진행한 내용 입니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [1]: Question.objects.all()                                                                                                                                            </span><br><span class="line">Out[1]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [2]: Question.objects.filter(id=1)                                                                                                                                     </span><br><span class="line">Out[2]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [3]: Question.objects.filter(question_text__startswith='What')                                                                                                         </span><br><span class="line">Out[3]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [4]: from django.utils import timezone                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [5]: current_year = timezone.now().year                                                                                                                                </span><br><span class="line"></span><br><span class="line">In [6]: Question.objects.get(pub_date__year=current_year)                                                                                                                 </span><br><span class="line">Out[6]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure><br><br><a id="more"></a><h2 id="없는-데이터-요청하기"><a href="#없는-데이터-요청하기" class="headerlink" title="없는 데이터 요청하기"></a>없는 데이터 요청하기</h2><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> id가 2번인 값을 조회했습니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Question은 한개밖에 없으니까, 2번은 존재하지 않습니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 따라서 아래와 같은 에러가 표시됩니다. </span></span><br><span class="line"></span><br><span class="line">In [7]: Question.objects.get(id=2)                                                                                                                                        </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">DoesNotExist                              Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-7-75091ca84516&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 Question.objects.get(id=2)</span></span><br></pre></td></tr></table></figure><br><br><h2 id="pk로-데이터-찾기"><a href="#pk로-데이터-찾기" class="headerlink" title="pk로 데이터 찾기"></a>pk로 데이터 찾기</h2><br><br><p>primary key 로 데이터를 조회하는것은 일반적인 일입니다. 따라서, Django  는 primary-key 단축키를 제공합니다. 아래 코드는 <code>Question.objects.get(id=1)</code> 과 동일합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [8]: Question.objects.get(pk=1)                                                                                                                                        </span><br><span class="line">Out[8]: &lt;Question: What's up?&gt;</span><br><span class="line"></span><br><span class="line">In [9]: Question.objects.get(id=1)                                                                                                                                        </span><br><span class="line">Out[9]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure><br><br><h2 id="Custom-메서드-동작-확인"><a href="#Custom-메서드-동작-확인" class="headerlink" title="Custom 메서드 동작 확인"></a>Custom 메서드 동작 확인</h2><br><br><p>Question 에 was_plubished_recently() 라는 메서드를 추가해 줬었습니다. </p><p>이게 잘 작동하는지 확인 해 봅니다. True 를 반환 한다면, 잘 작동하는것으로 볼수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [12]: q = Question.objects.get(pk=1)                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [13]: q.was_published_recently()                                                                                                                                       </span><br><span class="line">Out[13]: True</span><br></pre></td></tr></table></figure><br><br><h2 id="Choice-로-조회하기"><a href="#Choice-로-조회하기" class="headerlink" title="Choice 로 조회하기"></a>Choice 로 조회하기</h2><br><br><p>DATABASE API를 통해서, 하나의 Question 에 여러개의 Choice 를 등록할수 있습니다. </p><p>몇개의 Choice 를 하나의 Question 에 등록하는 과정을 진행 합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> q에 pk값이 1인 Question 을 할당합니다 </span></span><br><span class="line">In [1]: q = Question.objects.get(pk=1)                                                                                                                                    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q.choice_set.all() 을 하면, 해당 Question 에 달려있는 Choice 들이 검색됩니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 비어있는 쿼리셋이 출력됩니다. 아직, 해당 Question 에는 어떠한 Choice 도 등록한적 없기 때문입니다. </span></span><br><span class="line">In [2]: q.choice_set.all()                                                                                                                                                </span><br><span class="line">Out[2]: &lt;QuerySet []&gt;</span><br></pre></td></tr></table></figure><br><br><blockquote><p>Question 과 Choice 는 ForeignKey 로 연결되어 있습니다. </p><p>One-To-Many 관계로 이어져 있습니다. </p><p>하나의 Question - 다수의 Choice 관계 입니다. </p><p>하나의 Question 을 q 에 할당했고, </p><p>q 에 달려있는 Choice 는, q.choice_set.all() 로 검색이 가능합니다. </p></blockquote><br><h2 id="Choice-등록하기"><a href="#Choice-등록하기" class="headerlink" title="Choice 등록하기"></a>Choice 등록하기</h2><br><br><p>What’s up Question 에 3개의 Choice 를 등록해 봅니다 </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [3]: q                                                                                                                                                                 </span><br><span class="line">Out[3]: &lt;Question: What's up?&gt;</span><br><span class="line"></span><br><span class="line">In [4]: q.choice_set.create(choice_text='Not Much', votes=0)                                                                                                              </span><br><span class="line">Out[4]: &lt;Choice: Not Much&gt;</span><br><span class="line"></span><br><span class="line">In [5]: q.choice_set.create(choice_text='The Sky', votes=0)                                                                                                               </span><br><span class="line">Out[5]: &lt;Choice: The Sky&gt;</span><br><span class="line"></span><br><span class="line">In [6]: c = q.choice_set.create(choice_text='Just Hacking again', votes=0)</span><br></pre></td></tr></table></figure><br><br><h2 id="Choice-객체에서-Question-객체-조회"><a href="#Choice-객체에서-Question-객체-조회" class="headerlink" title="Choice 객체에서 Question 객체 조회"></a>Choice 객체에서 Question 객체 조회</h2><p><br><br></p><blockquote><p>q가 가진 모든 Choice 조회 </p><p>q.choice_set.all() </p><p>q가 가진 모든 choice 의 갯수 조회 </p><p>q.choice_set.count() </p></blockquote><p><br><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Choice 객체 에서 관계된 Question 객체를 조회할수 있는 API 가 있습니다 </span></span><br><span class="line">In [7]: c.question                                                                                                                                                        </span><br><span class="line">Out[7]: &lt;Question: What's up?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 반대로, Question 객체에서 Choice 객체를 조회할수 있습니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> What<span class="string">'s up Question 인 q 에 달려있는 모든 Choice 를 볼수 있습니다 </span></span></span><br><span class="line">In [8]: q.choice_set.all()                                                                                                                                                </span><br><span class="line">Out[8]: &lt;QuerySet [&lt;Choice: Not Much&gt;, &lt;Choice: The Sky&gt;, &lt;Choice: Just Hacking again&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 에 달려있는 Choice 의 갯수를 볼수 있습니다 </span></span><br><span class="line">In [9]: q.choice_set.count()                                                                                                                                              </span><br><span class="line">Out[9]: 3</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="의-사용"><a href="#의-사용" class="headerlink" title="__의 사용"></a><code>__</code>의 사용</h2><br><p>API는 자동으로 필요한만큼의 관계들을 따라갑니다. 두개의 언더스코어를 사용해서 관계를 분리 시킬수 있습니다. <br>몇개의 관계로 나누어도 상관 없습니다<br><br></p><p>Choice 중 question 의 <code>pub__date</code>가 이번년 인것을 찾으려면, 아래와 같이 써줍니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [10]: from django.utils import timezone                                                                                                                                </span><br><span class="line"></span><br><span class="line">In [11]: current_year = timezone.now().year                                                                                                                               </span><br><span class="line"></span><br><span class="line">In [12]: Choice.objects.filter(question__pub_date__year=current_year)                                                                                                     </span><br><span class="line">Out[12]: &lt;QuerySet [&lt;Choice: Not Much&gt;, &lt;Choice: The Sky&gt;, &lt;Choice: Just Hacking again&gt;]&gt;</span><br></pre></td></tr></table></figure><br><br><h2 id="Choice-하나-삭제하기"><a href="#Choice-하나-삭제하기" class="headerlink" title="Choice 하나 삭제하기"></a>Choice 하나 삭제하기</h2><br><p>delete() 함수를 사용해서, 하나의 choice 를 삭제합니다 </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> q 에 달린 choice 중에 <span class="string">'Just hacking'</span> 으로 시작하는것을 조회 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> c 에 할당 </span></span><br><span class="line">In [13]: c = q.choice_set.filter(choice_text__startswith='Just hacking')                                                                                                  </span><br><span class="line"></span><br><span class="line">In [14]: c                                                                                                                                                                </span><br><span class="line">Out[14]: &lt;QuerySet [&lt;Choice: Just Hacking again&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> delete() 메써드를 사용해서, c 를 삭제 </span></span><br><span class="line">In [15]: c.delete()                                                                                                                                                       </span><br><span class="line">Out[15]: (1, &#123;'polls.Choice': 1&#125;)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 삭제후, q에 달려 있는 choice 조회 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 3개였던것이 2개만 출력됩니다</span></span><br><span class="line">In [16]: q.choice_set.all()                                                                                                                                               </span><br><span class="line">Out[16]: &lt;QuerySet [&lt;Choice: Not Much&gt;, &lt;Choice: The Sky&gt;]&gt;</span><br></pre></td></tr></table></figure><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>이 Queryset 하고 API 부분이, 매우 중요한 부분입니다. </p><p>더 많은 정보는, 장고 공식문서에 <strong>Accessing related objects</strong> 를 참조하시면 됩니다. </p><p>또한, <code>__</code> 사용에 대해서는, <strong>Field lookups</strong> 와 <strong>Database API reference</strong> 를 참조하시면 됩니다.  </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/24/Writing-your-first-Django-app-part2-6%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 5편</title>
      <link>http://djangojeng-e.github.io/2020/04/17/Writing-your-first-Django-app-part2-5%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/17/Writing-your-first-Django-app-part2-5%ED%8E%B8/</guid>
      <pubDate>Fri, 17 Apr 2020 11:33:45 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;API-가지고-놀기-2편&quot;&gt;&lt;a href=&quot;#API-가지고-놀기-2편&quot; class=&quot;headerlink&quot; title=&quot;API 가지고 놀기 - 2편&quot;&gt;&lt;/a&gt;API 가지고 놀기 - 2편&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅에서, 쿼리셋을 조회 했더니, 아래와 같이 알수 없는 쿼리셋이 반환되서 나왔습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [14]: Question.objects.all() Out[14]: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;QuerySet [&amp;lt;Question: Question object (1)&amp;gt;]&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;Question object (1) 이라고만 표시되어 쿼리셋이 조회가 됩니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이렇게 조회가 되면, 이게 무슨 질문인지, 언제 생성된 질문인지 알수가 없어지게 되서. 전혀 유용하지 않은 정보가 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이번 포스팅에서 이것을 어떻게 유용한 형태로 표시할것인지에 대한 과정을 진행 합니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="API-가지고-놀기-2편"><a href="#API-가지고-놀기-2편" class="headerlink" title="API 가지고 놀기 - 2편"></a>API 가지고 놀기 - 2편</h2><br><p>지난 포스팅에서, 쿼리셋을 조회 했더니, 아래와 같이 알수 없는 쿼리셋이 반환되서 나왔습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [14]: Question.objects.all() Out[14]: </span><br><span class="line"></span><br><span class="line">&lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span><br></pre></td></tr></table></figure><br><p>Question object (1) 이라고만 표시되어 쿼리셋이 조회가 됩니다. </p><p><br>이렇게 조회가 되면, 이게 무슨 질문인지, 언제 생성된 질문인지 알수가 없어지게 되서. 전혀 유용하지 않은 정보가 됩니다. </p><br><p>이번 포스팅에서 이것을 어떻게 유용한 형태로 표시할것인지에 대한 과정을 진행 합니다. </p><br><a id="more"></a> <br><br><h2 id="모델-수정하기-str-추가"><a href="#모델-수정하기-str-추가" class="headerlink" title="모델 수정하기 __str__ 추가"></a>모델 수정하기 <code>__str__</code> 추가</h2><br><br><p>우선, 문제를 해결하기 위해서 polls/models.py 를 수정해 줍니다. <br></p><p><code>__str__()</code> 메써드를 Question 과 Choice 클래스에 추가를 해줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question = models.ForeignKey(Question, on_delete=models.CASCADE)</span><br><span class="line">    choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    votes = models.IntegerField(default=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.choice_text</span><br></pre></td></tr></table></figure><br><br><p><code>__str__</code> 메써드를 추가해주는것은 중요합니다. 인터렉티브 명령어에 대응할때에만 중요한것 뿐만 아니라,<br> Django 에서 자동으로 생성되는 관리자 페이지에서 표시되는 객체 내역들을 위해서도 중요합니다. </p><br><blockquote><p><code>__str__</code> 을 추가 해주고 나서, 객체를 조회해 봅니다 </p><p>python manage.py shell_plus 로 접속해서. 아래와 같이 조회해줍니다 </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [1]: Question.objects.all()                                                                                                                                            </span><br><span class="line">Out[1]: &lt;QuerySet [&lt;Question: 나 지금 뭐하고 있지?&gt;]&gt;</span><br></pre></td></tr></table></figure><br><p>이전 포스팅에서 생성한 질문의 값을 제대로 반영한 데이터가 표시됩니다. </p><br><br><h2 id="Custom-메써드-추가하기"><a href="#Custom-메써드-추가하기" class="headerlink" title="Custom 메써드 추가하기"></a>Custom 메써드 추가하기</h2><br><p>커스텀 메서드도 (사용자 정의) Question 클래스에 추가해 봅니다 </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> django.utils <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.question_text</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">was_published_recently</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.pub_date &gt;= timezone.now() - datetime.timedelta(days=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><br><p>import datetime 과 from django.utils import timezone을 가져오는것을 잊지 않습니다. </p><p>모델을 저장을 하고 shell_plus 로 접속해 봅니다. </p><br><p>python manage.py shell_plus </p><br><p>일단, 지난 포스팅에 튜토리얼과 상관없는 질문을 등록했었습니다. 튜토리얼에서는 “What’s up?” 이라고 썼었는데. 제가 ‘나 지금 뭐하고 있지?’ 라고 임의로 바꿨었습니다. <br></p><br><p>연습도 할겸, 다시 튜토리얼과 같은 질문으로 바꿔보겠습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Question 중에서 id 값이 1번인것을 q에 저장 </span></span><br><span class="line">In [1]: q = Question.objects.get(id=1)                                                                                                                                    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 를 출력하면, 나 지금 뭐하고 있지? 가 출력됩니다  </span></span><br><span class="line">In [2]: q                                                                                                                                                                 </span><br><span class="line">Out[2]: &lt;Question: 나 지금 뭐하고 있지?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 에 존재하는 question_text 를 <span class="string">"What's up?"</span> 으로 바꾸어 줍니다. </span></span><br><span class="line">In [3]: q.question_text = "What's up?"                                                                                                                                    </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> save() 함수를 호출해서 데이터베이스에 저장합니다.</span></span><br><span class="line">In [4]: q.save()                                                                                                                                                          </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q를 출력하면, 바뀐 question_text 를 가진 <span class="string">"What's up?"</span> 이 출력됩니다. </span></span><br><span class="line">In [5]: q                                                                                                                                                                 </span><br><span class="line">Out[5]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure><br><br><h2 id="DATABASE-API-실험하기"><a href="#DATABASE-API-실험하기" class="headerlink" title="DATABASE API 실험하기"></a>DATABASE API 실험하기</h2><p><br><br></p><p>모델을 저장하고, 질문값을 다 바꾸었으면, 이제부터 DATABASE API 실험에 들어갑니다 .</p><br><h3 id="str-동작-확인"><a href="#str-동작-확인" class="headerlink" title="__str__ 동작 확인"></a><code>__str__</code> 동작 확인</h3><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> __str__() 메써드가 잘 작동하는지 확인 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 이제 Question 이 알아볼수 있는 질문 <span class="string">'What'</span>s up?<span class="string">' 으로 표시됩니다.</span></span></span><br><span class="line"></span><br><span class="line">In [1]: Question.objects.all()                                                                                                                                            </span><br><span class="line">Out[1]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br></pre></td></tr></table></figure><br><h3 id="키워드-인자로-조회"><a href="#키워드-인자로-조회" class="headerlink" title="키워드 인자로 조회"></a>키워드 인자로 조회</h3><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Django 는 다양한 키워드 인수로 동작하는 lookup API 를 제공합니다</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> (id=1) 은 id 가 1번인것을 조회해서 보여줍니다 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="string">"What's up?"</span> 이 첫번째 질문이니, <span class="string">"What's up?"</span> 이 나옵니다 </span></span><br><span class="line"></span><br><span class="line">In [2]: Question.objects.filter(id=1)                                                                                                                                     </span><br><span class="line">Out[2]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> __startswith 는 무엇으로 시작하는지에 대한 필터 입니다 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> question_text__startswith=<span class="string">'What'</span> 은 question_text 중에 <span class="string">'What'</span> 으로 시작하는것을 조회해서 보여줍니다 </span></span><br><span class="line"></span><br><span class="line">In [3]: Question.objects.filter(question_text__startswith='What')                                                                                                         </span><br><span class="line">Out[3]: &lt;QuerySet [&lt;Question: What's up?&gt;]&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 이번년도에 등록된 질문에 대해서 조회합니다 ([4] - [6])</span></span><br><span class="line"></span><br><span class="line">In [4]: from django.utils import timezone                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [5]: current_year = timezone.now().year     # current_year 에 timezone.now().year 를 사용, 이번년을 저장                                                                                                                           </span><br><span class="line"></span><br><span class="line">In [6]: Question.objects.get(pub_date__year=current_year)  # Question중 pub_date 이 이번년도와 같은것을 조회                                                                                                                 </span><br><span class="line">Out[6]: &lt;Question: What's up?&gt;</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><p>포스팅은 나누는것도 길어지는것도 별로 안좋아하지만.. </p><p><br>너무 길어질것 같아서, 다시 나누어 포스팅 하려 합니다<br> 다음 포스팅에 이어 합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/17/Writing-your-first-Django-app-part2-5%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 4편</title>
      <link>http://djangojeng-e.github.io/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/</guid>
      <pubDate>Wed, 15 Apr 2020 15:42:04 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;API-가지고-놀기&quot;&gt;&lt;a href=&quot;#API-가지고-놀기&quot; class=&quot;headerlink&quot; title=&quot;API 가지고 놀기&quot;&gt;&lt;/a&gt;API 가지고 놀기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬에 있는 인터렉티브한 쉘에 진입해서 DJango 가 제공하는 기본 데이터베이스 API 를 가지고 놀아봅니다. &lt;/p&gt;
&lt;p&gt;Python shell 에 진입하기 위해서는 아래 커맨드를 사용합니다.  &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;python manage.py shell&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;p&gt;일반 shell 에 접속해서 할수도 있지만, 저는 shell_plus 를 사용해서 진행해 봤습니다. &lt;/p&gt;
&lt;p&gt;shell_plus 를 사용하기 위해서는 django-extensions 를 설치하고, settings.py 에 INSTALLED_APPS 에 등록 해줘야 합니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="API-가지고-놀기"><a href="#API-가지고-놀기" class="headerlink" title="API 가지고 놀기"></a>API 가지고 놀기</h2><br><p>파이썬에 있는 인터렉티브한 쉘에 진입해서 DJango 가 제공하는 기본 데이터베이스 API 를 가지고 놀아봅니다. </p><p>Python shell 에 진입하기 위해서는 아래 커맨드를 사용합니다.  </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><br><br><p>일반 shell 에 접속해서 할수도 있지만, 저는 shell_plus 를 사용해서 진행해 봤습니다. </p><p>shell_plus 를 사용하기 위해서는 django-extensions 를 설치하고, settings.py 에 INSTALLED_APPS 에 등록 해줘야 합니다. </p><br><a id="more"></a><br><h2 id="Shell-plus-사용하기"><a href="#Shell-plus-사용하기" class="headerlink" title="Shell_plus 사용하기"></a>Shell_plus 사용하기</h2><br><br><p>django-extensions를 설치하고, settings.py 에 INSTALLED_APPS에 등록해주고, notebook도 설치해줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># django-extensions 설치 </span></span><br><span class="line">pip install django-extensions </span><br><span class="line"></span><br><span class="line"><span class="comment"># mysite/settings.py INSTALLED_APPS 에 등록 </span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>,</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'django_extensions'</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 그리고, notebook 도 설치해줍니다 </span></span><br><span class="line"><span class="comment"># jupyter notebook 으로 Django shell_plus를 실행 시킬수 있지만, Django 3.0 부터 지원이 안되는것 같습니다. </span></span><br><span class="line"></span><br><span class="line">pip install notebook</span><br><span class="line"></span><br><span class="line"><span class="comment"># 설치와 세팅을 마쳤으면, 아래 명령어로 Shell_plus 로 진입합니다 </span></span><br><span class="line">python manage.py shell_plus</span><br></pre></td></tr></table></figure><br><br><p>아래 그림처럼 ln [1]: 이 화면에 나오면 됩니다. </p><br><img src="/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/image1.png" class=""><br><p>shell_plus 에 진입했으면, database API 를 알아봅시다. </p><br><br><h2 id="DATABASE-API"><a href="#DATABASE-API" class="headerlink" title="DATABASE API"></a>DATABASE API</h2><br><br><blockquote><p>여기서 얘기하는 DATABASE API 란 </p><p>Django 가 제공하는 기능으로, 데이터베이스 추출 API 입니다. </p><p>사용자는 데이터베이스 객체를 생성하고, 읽어오고, 업데이트 하고 삭제할수 있습니다. </p></blockquote><br><br><h2 id="모델-다시-보기"><a href="#모델-다시-보기" class="headerlink" title="모델 다시 보기"></a>모델 다시 보기</h2><br><br><p>첫번째로, 우리가 작성한 모델을 봐야 합니다. polls/models.py 에는 이미 작성된 모델들 Question, Choice 모델이 있습니다. 이걸 사용해서 데이터베이스 API 사용을 실습합니다. <br></p><p>작성한 모델을 다시 정리하자면, </p><br><br><table><thead><tr><th>모델명</th><th>필드 이름</th><th>데이터 타입</th></tr></thead><tbody><tr><td>Question</td><td>question_text</td><td>Charfield</td></tr><tr><td>Question</td><td>pub_date</td><td>DateTimeField</td></tr><tr><td>Choice</td><td>question</td><td>ForeignKey</td></tr><tr><td>Choice</td><td>choice_text</td><td>CharField</td></tr><tr><td>Choice</td><td>votes</td><td>IntegerField</td></tr></tbody></table><br><p>튜토리얼에서 진행하는 실습을 shell_plus 에 입력하면서 진행 해봅니다. </p><br><br><h2 id="objects-all-조회"><a href="#objects-all-조회" class="headerlink" title="objects.all() 조회"></a>objects.all() 조회</h2><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> polls.models <span class="keyword">import</span> Choice, Question     <span class="comment"># 작성한 모델을 불러오기 </span></span><br><span class="line"></span><br><span class="line">Quesiton.objects.all()                       <span class="comment"># Question의 모든 객체를 조회하는 명령어</span></span><br></pre></td></tr></table></figure><br><br><p>튜토리얼에서는, 다짜고짜 objects.all() 명령어를 실행 시켜서, 질문들이 없다는것만 보여주는데.. objects.all() 이 어떻게 생겨 나는것인지 짚고 넘어갑니다. </p><br><p>위에 테이블을 보면, 분명히 Question 은 모델명입니다. Question.objects.all() 을 사용해서 Question 의 모든 객체를 조회하는 것입니다. objects.all() 명령어는, 모델에 붙어 있는 모든 객체를 조회하고 쿼리셋을 반환합니다. </p><br><p>Choice 도 모델명인데, Choice.objects.all() 을 사용하면 어떨까요? 물론, Choice 에 있는 모든 객체를 조회하는 명령어가 됩니다. </p><br><blockquote><p>현재 우리는, 어떠한 Question도, 어떠한 Choice 도 데이터베이스에 집어 넣지 않았기 때문에 </p><p>objects.all() 명령어를 사용하면, 비어 있는 쿼리셋이 반환됩니다</p><p>아래 shell_plus 화면 참고  <br></p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [1]: from polls.models import Choice, Question                                                                                                       </span><br><span class="line"></span><br><span class="line">In [2]: Question.objects.all()                                                                                                                          </span><br><span class="line">Out[2]: &lt;QuerySet []&gt;</span><br><span class="line"></span><br><span class="line">In [3]: Choice.objects.all()                                                                                                                            </span><br><span class="line">Out[3]: &lt;QuerySet []&gt;</span><br></pre></td></tr></table></figure><br><h2 id="새로운-Question-생성하기"><a href="#새로운-Question-생성하기" class="headerlink" title="새로운 Question 생성하기"></a>새로운 Question 생성하기</h2><p><br><br></p><p>위에서 Question.objects.all() 로 모든 Question 들을 조회해보면, 비어 있는 쿼리셋이 나옵니다. Question 하나를 추가해 보겠습니다. Question 하나를 추가하기 위해서는,<br>모델에 나와 있는 두가지 필드들이 채워져야 합니다 (question_text 와 pub_date). 이중, pub_date 는 데이터 타입이 시간이기 때문에, 시간을 넣어줘야 합니다. <br></p><p>Django 는 time zone 을 지원하기 때문에, timezone.now() 를 사용하면 pub_date 에 들어갈 시간을 넣을수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [4]: from django.utils import timezone                                                                                                               </span><br><span class="line"></span><br><span class="line">In [5]: q = Question(question_text="What's new?", pub_date=timezone.now())                                                                              </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 객체를 데이터베이스에 저장합니다. save() 를 명시적으로 호출해서 저장합니다. </span></span><br><span class="line">In [6]: q.save()   </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> q 가 데이터베이스에 저장 되었으니, 자동으로 id 값을 가집니다. </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 첫번째 데이터이니, id 값은 자동으로 1 이 됩니다. </span></span><br><span class="line"></span><br><span class="line">In [7]: q.id                                                                                                                                            </span><br><span class="line">Out[7]: 1</span><br></pre></td></tr></table></figure><br><p>q 라는 변수에 <code>Question(question_text=&quot;what&#39;s new?&quot;, pub_date=timezone.now())</code> 객체 를 넣어주고. 그 객체 q를 저장 하였습니다. 이렇게 하면, 데이터베이스에 하나의 질문이 생성 됩니다. </p><br><br><h2 id="생성된-데이터-접근하기"><a href="#생성된-데이터-접근하기" class="headerlink" title="생성된 데이터 접근하기"></a>생성된 데이터 접근하기</h2><br><br><p>데이터가 하나 생성되었으니, 생성된 데이트를 접근할수도 있습니다. <br></p><p>위에서, q 라는 객체로 데이터베이스에 저장을 하였으니, 파이썬 속성을 사용하여, 필드 값에 접근 할수 있습니다. <br></p><br><p>위에서 q 는 Question(question_text=”What’s new?”, pub_date=timezone.now()) 였습니다. </p><br><p>q.question_text 에 접근하면, “What’s new?” 라는 텍스트를 반환합니다. <br></p><p>q.pub_date 에 접근하면, timezone.now() 의 값이 반환되겟죠? </p><br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [9]: q.question_text                                                                                                                                 </span><br><span class="line">Out[9]: "What's new?"</span><br><span class="line"></span><br><span class="line">In [10]: q.pub_date                                                                                                                                     </span><br><span class="line">Out[10]: datetime.datetime(2020, 4, 13, 6, 58, 8, 963804, tzinfo=&lt;UTC&gt;)</span><br></pre></td></tr></table></figure><br><br><h2 id="생성된-데이터-값-바꾸기"><a href="#생성된-데이터-값-바꾸기" class="headerlink" title="생성된 데이터 값 바꾸기"></a>생성된 데이터 값 바꾸기</h2><br><br><p>속성값을 바꾸고, save() 를 호출함으로써, 데이터베이스에 저장된 값을 바꿀수도 있습니다. <br><br></p><p>위에서, “What’s new?” 라고 저장되었던 첫번째 질문을, “나 지금 뭐하고 있지?” 라는 질문으로 바꿔봅니다. (튜토리얼에서는 “What’s up? 이라고 바꾸는데.. 너무 비슷한 질문이라 헷갈립니다)</p><br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> q.question_text 값을 바꾸어줌 </span></span><br><span class="line">In [11]: q.question_text = "나 지금 뭐하고 있지?"                                                                                                       </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 바뀐 q 값을 데이터베이스에 저장 </span></span><br><span class="line">In [12]: q.save()                                                                                                                                       </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 다시 q.question_text 에 접근 </span></span><br><span class="line">In [13]: q.question_text                                                                                                                                </span><br><span class="line">Out[13]: '나 지금 뭐하고 있지?'</span><br></pre></td></tr></table></figure><br><h2 id="objects-all-로-다시-조회"><a href="#objects-all-로-다시-조회" class="headerlink" title="objects.all()로 다시 조회"></a>objects.all()로 다시 조회</h2><p><br><br></p><p>objects.all() 을 사용하면 데이터베이스에 있는 모든 question 들을 출력해 줄겁니다. <br></p><p>이제까지 quesiton 한개를 데이터베이스에 저장해놓았으니, 1개가 출력됩니다. </p><p><br><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [14]: Question.objects.all()                                                                                                                         </span><br><span class="line">Out[14]: &lt;QuerySet [&lt;Question: Question object (1)&gt;]&gt;</span><br></pre></td></tr></table></figure><p><br><br></p><p>그런데, 이상하네요? 위에서 생성한 question 의 정보는 없고. <br> &lt;Quetion: Question object(1)&gt; 만 출력되어 나옵니다. 이러면, 이게 무슨 질문인지, <br>언제 생성된 질문인지 알수가 없어지게 됩니다. </p><p><br><br></p><p>데이터베이스가 이런식으로 조회가 된다면, 전혀 도움이 되지 않기때문에. <br>다음 포스팅에서 이것을 어떻게 유용한 형태로 출력할것인지 해결할겁니다. </p><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><p>처음에 튜토리얼 진행하면서, 이 부분이 저언혀 이해가 안갔었습니다. <br></p><p>너무 생소했었습니다. 중요한 부분이라 생각하고, 파트를 나누어서 포스팅하기로 했습니다. <br></p><br><p>다음 포스팅에서 이어서 진행합니다. 아래는, shell_plus 전체 캡쳐 화면 입니다. </p><br><img src="/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/image2.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/16/Writing-your-first-Django-app-part2-4%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 3편</title>
      <link>http://djangojeng-e.github.io/2020/04/15/Writing-your-first-Django-app-part2-3%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/15/Writing-your-first-Django-app-part2-3%ED%8E%B8/</guid>
      <pubDate>Wed, 15 Apr 2020 11:44:28 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;모델-활성화-하기&quot;&gt;&lt;a href=&quot;#모델-활성화-하기&quot; class=&quot;headerlink&quot; title=&quot;모델 활성화 하기&quot;&gt;&lt;/a&gt;모델 활성화 하기&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;모델에 적혀있는 작은 코드들은 Django 에게 많은 정보를 줍니다. 모델에 있는 코드로, Django 는 아래 작업을 수행할수 있습니다.&lt;/p&gt;
&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;이 앱을 위한 데이터베이스 스키마 생성 (CREATE TABLE 구문) &lt;/li&gt;
&lt;li&gt;Question 과 Choice 객체를 접근할수 있는 파이썬 데이터베이스 엑세스 API 생성 &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;&lt;strong&gt;하지만 우선, 프로젝트에 우리의 polls 앱이 설치 되었다는것을 알려 줘야 합니다&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="모델-활성화-하기"><a href="#모델-활성화-하기" class="headerlink" title="모델 활성화 하기"></a>모델 활성화 하기</h2><br><br><p>모델에 적혀있는 작은 코드들은 Django 에게 많은 정보를 줍니다. 모델에 있는 코드로, Django 는 아래 작업을 수행할수 있습니다.</p><br><ul><li>이 앱을 위한 데이터베이스 스키마 생성 (CREATE TABLE 구문) </li><li>Question 과 Choice 객체를 접근할수 있는 파이썬 데이터베이스 엑세스 API 생성 </li></ul><br><p><strong>하지만 우선, 프로젝트에 우리의 polls 앱이 설치 되었다는것을 알려 줘야 합니다</strong></p><br><a id="more"></a><br><blockquote><p>철학 </p><p>Django 앱들은 뺏다꼇다 플러그인 이 가능합니다. </p><p>앱들은 여러개의 프로젝트에서 사용될수 있고, 배포도 될수 있습니다 </p></blockquote><br><br><h2 id="INSTALLED-APPS-에-등록하기"><a href="#INSTALLED-APPS-에-등록하기" class="headerlink" title="INSTALLED_APPS 에 등록하기"></a>INSTALLED_APPS 에 등록하기</h2><br><br><p>앱을 프로젝트에 포함 시키기 위해서, <code>mysite/settings.py</code> 에 있는 <code>INSTALLED_APPS</code> 설정안에, 앱의 설정 클래스 참조값을 추가해 줍니다. 앱의 설정 클래스는 <code>PollsConfig</code> 라는 이름으로, <code>polls/apps.py</code> 파일 안에 존재합니다. 따라서 이 경로를 참조하기 위해서 <code>polls.apps.PollsConfig</code> 라고 쓰고 사용합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls 앱 안에, apps.py 에 있는 PollsConfig </span></span><br><span class="line"><span class="comment"># . 으로 이어서 참조값을 만듭니다. </span></span><br><span class="line"><span class="comment"># 이값을 mysite/settings.py 파일에 등록해 줍니다. </span></span><br><span class="line"></span><br><span class="line">polls.apps.PollsConfig</span><br></pre></td></tr></table></figure><br><blockquote><p>mysite/settings.py 파일을 열어서. 위의 <code>.</code>으로 연결된 경로, </p><p><code>polls.apps.PollsConfig</code>를 INSTALLED_APPS 설정에 추가해 줍니다. </p></blockquote><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite/settings.py </span></span><br><span class="line"></span><br><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'polls.apps.PollsConfig'</span>,    <span class="comment"># 추가된 항목 </span></span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><blockquote><p>참고로, <code>polls.apps.PollsConfig</code> 라고 쓰기 귀찮으면, </p><p>그냥 앱의 이름인 <code>polls</code> 라고만 써주어도 됩니다. </p><p><code>&#39;&#39;</code> 안에 넣어주는것을 잊지 않습니다. </p></blockquote><br><h2 id="makemigrations-하기"><a href="#makemigrations-하기" class="headerlink" title="makemigrations 하기"></a>makemigrations 하기</h2><br><br><p>이제 Django 프로젝트에 polls 앱을 포함시켰습니다. </p><p><br>INSTALLED_APPS 에  polls 앱을 잘 등록하였으면, 아래 명령어를 실행 합니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations polls </span><br><span class="line"><span class="comment"># 아래와같은 메시지가 표시되어야 합니다 </span></span><br><span class="line">Migrations <span class="keyword">for</span> <span class="string">'polls'</span>:</span><br><span class="line">  polls/migrations/<span class="number">0001</span>_initial.py</span><br><span class="line">    - Create model Question</span><br><span class="line">    - Create model Choice</span><br></pre></td></tr></table></figure><br><p><code>polls/migrations/0001_inital.py</code> 파일이 잘 생성되었는지 확인 합니다. </p><br><br><blockquote><p>만약 makemigrations 가 제대로 실행되지 않는다면, </p><p>polls/models.py 에 오타가 있을수도 있고, mysite/settings.py 에 제대로 앱이 등록 되지 않았을수 있습니다. </p></blockquote><br><br><p><code>makemigrations</code> 명령어를 실행시키므로써, 모델에 변경사항이 있다는것을 Django 에게 얘기 해줍니다.</p><p>(여기서 변경사항은, 이전 포스팅에서 새로 작성한 모델입니다) 그리고 변경 사항들은 <code>migration</code> 형태로 저장됩니다. </p><br><p>migrations는 Django가 변경된 모델 사항들을 저장하는 방법입니다 (즉, 데이터베이스 스키마). migrations는 디스크에 파일 형태로 저장됩니다. 방금 생성한 첫번째 migration 을 읽고 싶으면, 읽을수 있습니다. 이 파일은 <code>polls/migrations/0001_inital.py</code> 파일 입니다. </p><br><p>하지만, Django 가 이 파일을 하나씩 만들때마다 우리는 이 파일들을 하나씩 다 읽을 필요가 없습니다. 이 파일들은 수동으로 Django가 무언가를 변경시키는것을 비틀기 위해서 사람이 수정할수 있는 형식으로 디자인 되었습니다. </p><br><blockquote><p>migrate 하기 </p><p>migrations 와 데이터베이스 스키마를 자동으로 실행시킬수 있는 커맨드가 존재합니다 </p><p>바로, migrate 입니다 </p></blockquote><br><br><h2 id="sqlmigrate-명령어"><a href="#sqlmigrate-명령어" class="headerlink" title="sqlmigrate 명령어"></a>sqlmigrate 명령어</h2><br><br><p>튜토리얼에서는, <code>sqlmigrate</code> 명령어를 소개합니다만, 데이터베이스 구문을 모르면, 이해하기 힘듭니다. 초심자들은,, 일단 이부분을 깊게 들어가지 않는것을 권장 합니다 </p><br><p>일단, 튜토리얼에서 얘기하는 sqlmigrate 명령어를 간단하게 짚고 넘어갑니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">python manage.py sqlmigrate polls <span class="number">0001</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 실행하면, 아래와 비슷한 형식의 결과를 볼수 있을겁니다. </span></span><br><span class="line"></span><br><span class="line">BEGIN;</span><br><span class="line">--</span><br><span class="line">-- Create model Question</span><br><span class="line">--</span><br><span class="line">CREATE TABLE <span class="string">"polls_question"</span> (</span><br><span class="line">    <span class="string">"id"</span> serial NOT NULL PRIMARY KEY,</span><br><span class="line">    <span class="string">"question_text"</span> varchar(<span class="number">200</span>) NOT NULL,</span><br><span class="line">    <span class="string">"pub_date"</span> timestamp <span class="keyword">with</span> time zone NOT NULL</span><br><span class="line">);</span><br><span class="line">--</span><br><span class="line">-- Create model Choice</span><br><span class="line">--</span><br><span class="line">CREATE TABLE <span class="string">"polls_choice"</span> (</span><br><span class="line">    <span class="string">"id"</span> serial NOT NULL PRIMARY KEY,</span><br><span class="line">    <span class="string">"choice_text"</span> varchar(<span class="number">200</span>) NOT NULL,</span><br><span class="line">    <span class="string">"votes"</span> integer NOT NULL,</span><br><span class="line">    <span class="string">"question_id"</span> integer NOT NULL</span><br><span class="line">);</span><br><span class="line">ALTER TABLE <span class="string">"polls_choice"</span></span><br><span class="line">  ADD CONSTRAINT <span class="string">"polls_choice_question_id_c5b4b260_fk_polls_question_id"</span></span><br><span class="line">    FOREIGN KEY (<span class="string">"question_id"</span>)</span><br><span class="line">    REFERENCES <span class="string">"polls_question"</span> (<span class="string">"id"</span>)</span><br><span class="line">    DEFERRABLE INITIALLY DEFERRED;</span><br><span class="line">CREATE INDEX <span class="string">"polls_choice_question_id_c5b4b260"</span> ON <span class="string">"polls_choice"</span> (<span class="string">"question_id"</span>);</span><br><span class="line"></span><br><span class="line">COMMIT;</span><br></pre></td></tr></table></figure><br><p>아래 사항들을 숙지해 둡니다 <br></p><br><ul><li>정확한 출력 값은 어떤 데이터베이스를 사용하느냐에 따라서 바뀝니다. 위의 예시는 <code>PostgreSQL</code>을 위해 생성되었습니다. </li><li>테이블명은 자동으로 생성되는데 앱의 이름 (polls) 과 소문자의 모델 이름 (즉, question 과 choice) 들을 합쳐서 지어 집니다 </li><li>외래키 필드 이름에는 Django의 규칙으로 <code>_id</code> 를 붙여줍니다 </li><li>외래키 관계는 명시적으로 <code>FOREIGN KEY</code> 제약으로 만들어집니다. <code>DEFFERABLE</code> 부분에 대해서는 걱정 안해도 됩니다. PostgreSQL 에게 트랜젝션이 끝날때까지 외래키를 실행 시키지 않는 역할을 합니다. </li><li>프로젝트가 사용하는 데이터베이스에 맞춤 설정이 되어 있습니다. 예를들면, ﻿(auto_increment(MySQL), serial(PostgreSQL), integer primary key autoincrement(SQLite) 들이 자동으로 처리됩니다</li><li>﻿sqlmigrate 캐먼드는 사실 데이터베이스를 위한 migration을 실행 시키지 않습니다. 대신, Django가 생각하는 데이터베이스 요구사항을 화면에 출력해서 사용자가 볼수 있게 해줍니다. Django 가 무엇을 할것인지 혹은 데이터베이스 관리자가 변경을 위해 SQL script 를 필요로 할때 유용하게 쓰입니다.</li></ul><p><br><br></p><h2 id="migrate-실행-하기"><a href="#migrate-실행-하기" class="headerlink" title="migrate 실행 하기"></a>migrate 실행 하기</h2><p><br><br></p><p>이제 진짜 migrate 를 실행 해 봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">python manage.py migrate</span><br><span class="line"></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, polls, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying polls<span class="number">.0001</span>_initial... OK</span><br></pre></td></tr></table></figure><p><br><br></p><blockquote><p>migrate 커맨드는 적용되지 않은, 모든 migrations  들을 가지고 </p><p>데이터베이스에 적용합니다 </p><p>데이터베이스 스키마와 모든 변경사항들을 동기화 시켜 줍니다</p></blockquote><p><br><br></p><p>migrations 는 매우 강력한 기능입니다. migrations 는 개발 기간동안 데이터베이스 혹은 테이블을 삭제하지 않고도 모델을 수정 할수 있게 해줍니다. 데이터의 손실없이 실시간으로 데이터베이스를 업그레이드 하는데에 특화 되어 있습니다. </p><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><h3 id="숙지하고-있어야할-스텝들"><a href="#숙지하고-있어야할-스텝들" class="headerlink" title="숙지하고 있어야할 스텝들"></a>숙지하고 있어야할 스텝들</h3><br><ol><li>App 생성 </li><li>settings.py 에 INSTALLED_APPS 에 App 등록</li><li>해당 App 의 모델 생성 혹은 수정 </li><li>python manage.py makemigrations 실행 </li><li>python manage.py migrate 실행  </li></ol><br><p>커맨드가 이렇게 분리되어 있는 이유는, migrations 를 버전 관리 시스템에 커밋하고 앱과 함께 배달하기 위해서 입니다. 개발을 쉽게 해주는것 뿐만 아니라, 다른 개발자들이 사용할수 있고, 프로덕션 환경에서 사용할수 있게 해줍니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/15/Writing-your-first-Django-app-part2-3%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 2편</title>
      <link>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-2%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-2%ED%8E%B8/</guid>
      <pubDate>Mon, 13 Apr 2020 12:42:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;모델-작성하기&quot;&gt;&lt;a href=&quot;#모델-작성하기&quot; class=&quot;headerlink&quot; title=&quot;모델 작성하기&quot;&gt;&lt;/a&gt;모델 작성하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅에서 데이터베이스 설정을 마쳤습니다. 튜토리얼에서 진행하는 기본 데이터베이스인 SQLite 를 사용하고, 기본앱들에 대한 migrate 를 완료해서, 필요한 데이터베이스 테이블들을 생성해 주었습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이번 파트는, 모델을 작성해 봅니다. 데이터베이스 레이아웃과 추가적인 메타데이터를 정의 합니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="모델-작성하기"><a href="#모델-작성하기" class="headerlink" title="모델 작성하기"></a>모델 작성하기</h2><br><p>지난 포스팅에서 데이터베이스 설정을 마쳤습니다. 튜토리얼에서 진행하는 기본 데이터베이스인 SQLite 를 사용하고, 기본앱들에 대한 migrate 를 완료해서, 필요한 데이터베이스 테이블들을 생성해 주었습니다. </p><br><p>이번 파트는, 모델을 작성해 봅니다. 데이터베이스 레이아웃과 추가적인 메타데이터를 정의 합니다. </p><br><a id="more"></a><blockquote><p>모델은 하나의 데이터에 대한 확실한 사실적 정의를 내립니다. </p><p>모델은 필요한 저장할 데이터의 필드들과 동작들의 정보를 가지고 있습니다. </p><p>Django 는 DRY 원칙을 따릅니다 (Don’t Repeat Yourself) </p><br><p>목표하는것은 데이터 모델을 한곳에 정의하고, 그곳에서 자동으로 도출해 내는겁니다. </p><br><p>Ruby on Rails 와는 다르게, 여기서는 migrations 를 포함합니다. </p><p>예를들면, migrations 는 전적으로 모델파일에서 추출되고, </p><br><p>Django 는 본질적으로 데이터베이스 스키마를 현재 모델에 업데이트 할수 있게 내역을 기록합니다. </p></blockquote><p><br><br></p><h2 id="모델-클래스-작성하기"><a href="#모델-클래스-작성하기" class="headerlink" title="모델 클래스 작성하기"></a>모델 클래스 작성하기</h2><p><br><br></p><p>투표앱 튜토리얼에서는, 2개의 모델을 작성합니다. </p><p><br><br></p><ul><li>Question - 질문과 발행날짜 정보를 가지고 있는 투표 질문 </li><li>Choice - 질문에 대한 선택문들과 투표집계 정보를 가지고 있습니다 </li></ul><p><br>각각의 Choice 들은 하나의 Question과 연관되어 있습니다. </p><br><blockquote><p>해당 컨셉은 파이썬 클래스들로 표현됩니다. </p><p>polls/models.py 파일을 열고, 아래와 같이 작성해 줍니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Question</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    question_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">    pub_date = models.DateTimeField(<span class="string">'date published'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Choice</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">  question = models.ForeignKey(Question, on_delete=models.CASCADE) </span><br><span class="line">  choice_text = models.CharField(max_length=<span class="number">200</span>)</span><br><span class="line">  votes = models.IntegerField(default=<span class="number">0</span>)</span><br></pre></td></tr></table></figure><br><p>여기서, 각가의 모델들은 <code>django.db.models.Model</code>을 상속받는 서브클래스들로 표현됩니다. </p><p><br>각 모델은 몇개의 클래스 변수들을 가지고 있는데,</p><br><blockquote><p>각 클래스 변수들은 모델안의 데이터베이스 필드들을 표현합니다 </p></blockquote><br><br><h2 id="필드-정보"><a href="#필드-정보" class="headerlink" title="필드 정보"></a>필드 정보</h2><br><br><p>각 필드들은 필드클래스의 인스턴스들로 표현됩니다. </p><br><p>예) 케릭터필드를 위한 CharField, 날짜시간필드를 위한 DateTimeField </p><br><p>이 필드 정보들은 각 필드들이 가지는 데이터 타입이 어떤것인지 Django 에게 말해줍니다. </p><p><br>각 필드 인스턴스들의 이름들 (예, question_text 혹은 pub_date)은 필드들의 기계친화적 이름들입니다. </p><p><br>이 필드 이름들을 파이썬 코드에서 사용할수 있고, 데이터베이스에서 컬럼명으로 사용됩니다.  사람이 읽기 편한 형태의 이름으로 필드를 만들기 위해서 선택적으로 첫번째 위치인자를 필드명으로 사용할수 있습니다. </p><br><p>보통 Django의 내부 설명 용도로 쓰이는, 문서를 2배로 늘려버립니다. 만약, 필드가 제공되지 않으면, Django는 기계친화적인 이름을 우선 사용합니다. </p><br><p>튜토리얼에서는, Question.pub_date 만 인간이 읽기 좋은 형태의 이름을 정의합니다. 그외에 다른 필드들은, 기계친화적 이름이라도 사람이 읽기 충분합니다. </p><br><br><h2 id="Field-클래스들의-필수-인수"><a href="#Field-클래스들의-필수-인수" class="headerlink" title="Field 클래스들의 필수 인수"></a>Field 클래스들의 필수 인수</h2><br><br><p>어떤 필드 클래스들은 필수적으로 인수를 가져야 합니다. </p><p><br>예를들어, CharField 는 최대 길이값인 max_length 인수를 가져야 하고, 데이터베이스 스키마에 사용될 뿐만 아니라 검증에도 사용됩니다.</p><br><br><p>필드는 여러가지 선택적 인수들을 가질수도 있습니다. 튜토리얼에서는 votes 의 기본값을 0으로 세팅해주었습니다. </p><br><br><h2 id="데이터베이스-관계의-정의"><a href="#데이터베이스-관계의-정의" class="headerlink" title="데이터베이스 관계의 정의"></a>데이터베이스 관계의 정의</h2><br><br><p>마지막으로, 튜토리얼의 데이터베이스 모델에서는 관계가 정의 되어 있습니다. </p><p><br>ForeignKey를 사용해서 Question 과 Choice 의 관계가 정의되어 있습니다. Django 는 모든 공통적인 데이터베이스 관계들을 지원합니다. 예) <code>many-to-one</code>, <code>many-to-many</code>, <code>one-to-one</code></p><br><blockquote><p>튜토리얼에 나온 Question 과 Choice 는, </p><p>일 대 다수의 관계인 </p><p>one-to-many (many-to-one) 의 관계를 가지고 있습니다. </p></blockquote><br><br><p>하나의 질문에, 여러가지 선택지가 있다는 얘기 입니다. </p><br><p>2020년 4월 현재에 진행되고 있는, 제 21대 국회의원 선거를 예로 들면.<br></p><p>‘우리 지역에서 누가 국회의원이 되어야 하나?’ 라는 질문에, 여러 후보들이 존재합니다.<br><br></p><p>하나의 질문에 여러가지 선택이 있는겁니다.  <br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>아주 간단한 모델을 작성해 보았습니다.</p><p><br>다음 포스팅에는 모델의 활성화를 진행해 볼겁니다.<br></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-2%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part2 - 1편</title>
      <link>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-1%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-1%ED%8E%B8/</guid>
      <pubDate>Mon, 13 Apr 2020 08:01:44 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;데이터베이스-셋업&quot;&gt;&lt;a href=&quot;#데이터베이스-셋업&quot; class=&quot;headerlink&quot; title=&quot;데이터베이스 셋업&quot;&gt;&lt;/a&gt;데이터베이스 셋업&lt;/h2&gt;&lt;p&gt;첫번째 장고앱 만들기 part2 에 대한 포스팅 시작입니다. &lt;/p&gt;
&lt;p&gt;튜토리얼은 part1 에서 이어지고, part2 에서는 데이터베이스 셋업과 첫번째 모델 생성 그리고 Django의 자동 생성 어드민 사이트에 대해 소개 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;데이터베이스-셋업하기&quot;&gt;&lt;a href=&quot;#데이터베이스-셋업하기&quot; class=&quot;headerlink&quot; title=&quot;데이터베이스 셋업하기&quot;&gt;&lt;/a&gt;데이터베이스 셋업하기&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;&lt;code&gt;mysite/settings.py&lt;/code&gt; 파일을 열어줍니다. settings.py 는 Django 설정들을 대표하는 모듈레벨의 변수들을 가지고 있는 일반 파이썬 모듈입니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;기본값으로 설정되어 있는 데이터베이스는 SQLite 입니다.  &lt;br&gt;만약 데이터베이스 초심자 혹은 그냥 Django 를 시도해 보고 싶은거라면, SQLite 가 가장 쉬운 데이터베이스 사용 선택지 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;SQLite 는 파이썬에 포함되어 있습니다 &lt;/p&gt;
&lt;p&gt;따라서, 별도로 데이터베이스를 지원하기 위한 설치과정은 없습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="데이터베이스-셋업"><a href="#데이터베이스-셋업" class="headerlink" title="데이터베이스 셋업"></a>데이터베이스 셋업</h2><p>첫번째 장고앱 만들기 part2 에 대한 포스팅 시작입니다. </p><p>튜토리얼은 part1 에서 이어지고, part2 에서는 데이터베이스 셋업과 첫번째 모델 생성 그리고 Django의 자동 생성 어드민 사이트에 대해 소개 합니다. </p><br><br><h2 id="데이터베이스-셋업하기"><a href="#데이터베이스-셋업하기" class="headerlink" title="데이터베이스 셋업하기"></a>데이터베이스 셋업하기</h2><br><br><p><code>mysite/settings.py</code> 파일을 열어줍니다. settings.py 는 Django 설정들을 대표하는 모듈레벨의 변수들을 가지고 있는 일반 파이썬 모듈입니다. </p><p><br><br></p><p>기본값으로 설정되어 있는 데이터베이스는 SQLite 입니다.  <br>만약 데이터베이스 초심자 혹은 그냥 Django 를 시도해 보고 싶은거라면, SQLite 가 가장 쉬운 데이터베이스 사용 선택지 입니다. </p><br><blockquote><p>SQLite 는 파이썬에 포함되어 있습니다 </p><p>따라서, 별도로 데이터베이스를 지원하기 위한 설치과정은 없습니다. </p></blockquote><br><a id="more"></a><br><p>그렇지만, 첫번째 실전 프로젝트를 진행할때에는, PostgreSQL 같은 좀더 확장성이 있고 고도의 데이터베이스를 사용하고 싶어질지 모릅니다. </p><br><blockquote><p>mysite/settings.py 파일을 열면, </p><p>아래와 같이 데이터베이스를 설정을 하는 부분이 있습니다. </p></blockquote><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Database</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/ref/settings/#databases</span></span><br><span class="line"></span><br><span class="line">DATABASES = &#123;</span><br><span class="line">    <span class="string">'default'</span>: &#123;</span><br><span class="line">        <span class="string">'ENGINE'</span>: <span class="string">'django.db.backends.sqlite3'</span>,</span><br><span class="line">        <span class="string">'NAME'</span>: os.path.join(BASE_DIR, <span class="string">'db.sqlite3'</span>),</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h2 id="데이터베이스-ENGINE-값"><a href="#데이터베이스-ENGINE-값" class="headerlink" title="데이터베이스 ENGINE 값"></a>데이터베이스 ENGINE 값</h2><br><br><ul><li>사용하고 싶은 데이터베이스 설정에 따라 <code>ENGINE</code> 값을 바꿔줄수 있습니다. <br></li></ul><table><thead><tr><th><strong>ENGINE 값</strong></th><th><strong>데이터베이스</strong></th></tr></thead><tbody><tr><td>‘django.db.backends.sqlite3’</td><td>SQLite</td></tr><tr><td>‘django.db.backends.postgresql’</td><td>PostgreSQL</td></tr><tr><td>‘django.db.backends.mysql’</td><td>MySQL</td></tr><tr><td>‘django.db.backends.oracle’</td><td>Oracle</td></tr></tbody></table><br><ul><li><code>NAME</code> 값은 데이터베이스 이름을 써줍니다. 만약 SQLite 를 사용한다면, 데이터베이스는 컴퓨터에 파일로 존재합니다. 이 경우에 NAME 은 절대 경로로 표시되어야 하고, 파일명을 포함하고 있어야 합니다. 기본값은 <code>os.path.join(BASE_DIR, &#39;db.sqlite3&#39;)</code>이고, 이 파일은 프로젝트 폴더 안에 저장됩니다. <br></li></ul><br><blockquote><p>SQLite 를 사용하고 있지 않다면, </p><p>USER, PASSWORD 그리고 HOST 같은 </p><p>추가 설정들이 추가되어야만 합니다. </p></blockquote><br><br><p>공식문서 튜토리얼에서는 데이터베이스를 SQLite 를 사용하고 있기 때문에. 다른 데이터베이스 설정에 대해서는 걱정할 필요가 없습니다. </p><br><br><h2 id="데이터베이스-생성전-확인-사항"><a href="#데이터베이스-생성전-확인-사항" class="headerlink" title="데이터베이스 생성전 확인 사항"></a>데이터베이스 생성전 확인 사항</h2><br><h3 id="TIME-ZONE"><a href="#TIME-ZONE" class="headerlink" title="TIME_ZONE"></a>TIME_ZONE</h3><br><p>튜토리얼에서는 <code>mysite/settings.py</code> 를 수정하는김에, <code>TIME_ZONE</code> 까지 설정하라고 합니다. settings.py 파일을 열면, TIME_ZONE 설정하는 부분이 있는데. 기본값으로 UTC 라고 되어 있습니다. </p><br><p>서울 시간인 <code>Asia/Seoul</code> 로 바꾸어 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Internationalization</span></span><br><span class="line"><span class="comment"># https://docs.djangoproject.com/en/3.0/topics/i18n/</span></span><br><span class="line"></span><br><span class="line">LANGUAGE_CODE = <span class="string">'en-us'</span></span><br><span class="line"></span><br><span class="line">TIME_ZONE = <span class="string">'Asia/Seoul'</span></span><br><span class="line"></span><br><span class="line">USE_I18N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_L10N = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">USE_TZ = <span class="literal">True</span></span><br></pre></td></tr></table></figure><br><br><h3 id="INSTALLED-APPS"><a href="#INSTALLED-APPS" class="headerlink" title="INSTALLED_APPS"></a>INSTALLED_APPS</h3><br><p>INSTALLED_APPS 도 유의깊게 보고 가야 합니다. <code>INSTALLED_APPS</code> 는 현재 Django 인스턴스에서 활성화 되어 있는 Django 어플리케이션들의 이름들이 있습니다. </p><br><p>어플리케이션들은 여러 프로젝트들에서 사용될수 있고, <br></p><p>다른 사람들이 프로젝트에 사용할수 있도록 패키지화 해서 배포할수 있습니다. </p><br><p>기본값으로, <code>INSTALLED_APPS</code>는 아래 앱들을 가지고 있습니다. </p><br><ul><li>django.contrib.admin - 관리자 사이트. 곧 사용하게 됩니다. </li><li>django.contrib.auth - 인증 시스템 </li><li>django.contrib.contenttypes - 컨텐트타입을 위한 프레임워크 </li><li>django.contrib.sessions - 세션 프레임워크 </li><li>django.contrib.messages - 메시징 프레임워크 </li><li>django.contrib.staticfiles - 정적파일들을 관리하기 위한 프레임워크 </li></ul><br><p>위 어플리케이션들은 공통적인 편의성을 위해 기본값으로 포함되어 있는 어플리케이션들 입니다. </p><br><br><p>이중 어떤 어플리케이션들은 적어도 하나의 데이터베이스 테이블을 사용합니다. <br></p><p>따라서, 이 앱들을 사용하기 위해서는, 데이터베이스 테이블이 먼저 생성이 되어 있어야 합니다. </p><br><br><p>데이터베이스 테이블을 생성하기 위해서, 아래 <code>migrate</code> 커맨드를 실행합니다. </p><br><br><h2 id="데이터베이스-migrate-하기"><a href="#데이터베이스-migrate-하기" class="headerlink" title="데이터베이스 migrate 하기"></a>데이터베이스 migrate 하기</h2><br><br><p>이전 포스팅부터, 계속 서버를 실행시키면, </p><p><br>아래와 같이 17 unapplied migration 이 있다고 메시지가 뜹니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"> </span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 17 unapplied migration(s). Your project may not work properly until you </span><br><span class="line">apply the migrations <span class="keyword">for</span> app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run <span class="string">'python manage.py migrate'</span> to apply them.</span><br><span class="line"></span><br><span class="line">April 12, 2020 - 08:29:55</span><br><span class="line">Django version 3.0.5, using settings <span class="string">'mysite.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><p><br>이 메시지를 자세히 읽어보면, 아래와 같은 사항을 확인 할수 있습니다. </p><br><blockquote><p>admin, auth, contenttypes, sessions 앱을 정상적으로 실행시키려면 </p><p>python manage.py migrate 명령어를 실행 합니다. </p></blockquote><br><p>python manage.py migrate 을 실행 합니다. <br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate </span><br><span class="line"></span><br><span class="line">Operations to perform:</span><br><span class="line">  Apply all migrations: admin, auth, contenttypes, sessions</span><br><span class="line">Running migrations:</span><br><span class="line">  Applying contenttypes.0001_initial... OK</span><br><span class="line">  Applying auth.0001_initial... OK</span><br><span class="line">  Applying admin.0001_initial... OK</span><br><span class="line">  Applying admin.0002_logentry_remove_auto_add... OK</span><br><span class="line">  Applying admin.0003_logentry_add_action_flag_choices... OK</span><br><span class="line">  Applying contenttypes.0002_remove_content_type_name... OK</span><br><span class="line">  Applying auth.0002_alter_permission_name_max_length... OK</span><br><span class="line">  Applying auth.0003_alter_user_email_max_length... OK</span><br><span class="line">  Applying auth.0004_alter_user_username_opts... OK</span><br><span class="line">  Applying auth.0005_alter_user_last_login_null... OK</span><br><span class="line">  Applying auth.0006_require_contenttypes_0002... OK</span><br><span class="line">  Applying auth.0007_alter_validators_add_error_messages... OK</span><br><span class="line">  Applying auth.0008_alter_user_username_max_length... OK</span><br><span class="line">  Applying auth.0009_alter_user_last_name_max_length... OK</span><br><span class="line">  Applying auth.0010_alter_group_name_max_length... OK</span><br><span class="line">  Applying auth.0011_update_proxy_permissions... OK</span><br><span class="line">  Applying sessions.0001_initial... OK</span><br></pre></td></tr></table></figure><br><p>이 <code>migrate</code> 커맨드는 <code>mysite/settings.py</code>에  INSTALLED_APPS 설정을 보고, </p><ul><li>settings.py 파일에 설정된 데이터베이스 설정과, </li><li>앱과 딸려온 데이터베이스 마이그레이션에 따라 필요한 데이터베이스 테이블들을 생성합니다. <br></li></ul><p><br> 각각의 마이그레이션의 적용에 따른 메시지들을 볼수 있습니다. <br></p><p>관심이 있으시다면, 커맨드라인에서 데이터베이스에 접속해서 테이블 조회를 할수도 있습니다. <br></p><p>SQLite 의 경우, SQLite 에 접속해서, <code>.schema</code> 라고 치면 조회가 되겠네요. <br></p><br><blockquote><p>INSTALLED_APPS 에 있는 기본 앱들은 </p><p>공통적인 사용을 위해 포함되어 있지만, 모든 사람들이 필요로 하는것들은 아닙니다. </p><p>만약 어떤것이든 혹은 전부 필요하지 않다면, </p><p>migrate 명령을 실행하기 전에, 해당 앱을 주석처리를 하거나, INSTALLED_APPS 에서 지워줍니다. </p><p>migrate 명령어는 오직 INSTALLED_APPS 에 등록된 앱들만 대상으로 migrations 를 실행합니다. </p></blockquote><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><ol><li>데이터베이스 설정은 settings.py 에 DATABASE 값에 해준다. </li><li><code>python manage.py migrate</code>를 실행해서 INSTALLED_APPS 에 등록된 앱의 동작에 필요한 데이터베이스 테이블들을 생성해준다. </li></ol><br><blockquote><p>migrate 명령어를 끝내고, runserver를 해보면</p><p>이제까지 보였던 17 unapplied migrations 이 있다는 메시지는 더 이상 출력되지 않습니다. </p></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line">Watching <span class="keyword">for</span> file changes with StatReloader</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line">April 12, 2020 - 08:50:41</span><br><span class="line">Django version 3.0.5, using settings <span class="string">'mysite.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/13/Writing-your-first-Django-app-part2-1%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Writing your first Django app, part1 - 4편</title>
      <link>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/</guid>
      <pubDate>Sat, 11 Apr 2020 21:10:07 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;첫번째-뷰-작성하기&quot;&gt;&lt;a href=&quot;#첫번째-뷰-작성하기&quot; class=&quot;headerlink&quot; title=&quot;첫번째 뷰 작성하기&quot;&gt;&lt;/a&gt;첫번째 뷰 작성하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 시간에 polls 앱을 생성하였고, 이번 포스팅에는 첫번째 view 를 작성해 봅니다 &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;디렉토리 구조는 아래와 같고, &lt;code&gt;polls/view.py&lt;/code&gt; 파일을 작성을 진행해봅니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;polls/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    __init__.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    admin.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    apps.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    migrations/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        __init__.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    models.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    tests.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    views.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Django의-MTV-모델&quot;&gt;&lt;a href=&quot;#Django의-MTV-모델&quot; class=&quot;headerlink&quot; title=&quot;Django의 MTV 모델&quot;&gt;&lt;/a&gt;Django의 MTV 모델&lt;/h2&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="첫번째-뷰-작성하기"><a href="#첫번째-뷰-작성하기" class="headerlink" title="첫번째 뷰 작성하기"></a>첫번째 뷰 작성하기</h2><br><p>지난 시간에 polls 앱을 생성하였고, 이번 포스팅에는 첫번째 view 를 작성해 봅니다 </p><br><p>디렉토리 구조는 아래와 같고, <code>polls/view.py</code> 파일을 작성을 진행해봅니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="Django의-MTV-모델"><a href="#Django의-MTV-모델" class="headerlink" title="Django의 MTV 모델"></a>Django의 MTV 모델</h2><p><br><br><a id="more"></a></p><p>view 를 작성하기 전에, django 의 MTV 모델에 대해서 알아야 하는데. 간단하게 짚고 넘어가자면.. </p><br><p>Models, Templates, View 의 약자로 <br></p><br><ul><li>Models - 데이터베이스의 구조 설계 <br></li><li>Templates: 화면에 보이는 포맷 </li><li>Views: 전달된 요청을 처리하고 반환하는 로직 </li></ul><br><p>처음 접하면 생소하기도 하고, 헷갈리기도 해서. 몇가지 그림들을 가져와 봤습니다. </p><br><img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image1.png" class=""><p><br><br></p><blockquote><p>사용자가 URL 을 통해서 View 에 요청을 하면 </p><p>View 는 요청을 처리하고, 사용자에게 결과물을 반환합니다</p><p>View 는 Model 을 통해서 데이터베이스에서 데이터를 가져올수도 있고, 저장할수도 있습니다</p><p>View 는 Templates 에 결과를 그려주기도 합니다.  </p><p>처리 결과를 Template 에 그려주고, 그 Template 을 사용자에게 다시 반환하는것도 View 가 할 역할입니다. </p></blockquote><p><br><br></p><img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image2.png" class=""> <p><br><br></p><br><blockquote><p>따라서, view 를 작성하려면, </p><p>요청을 받을 URL 도 있어야 하고 </p><p>사용할 Model 도 있어야 하고 </p><p>화면을 출력할 Template 도 있어야 합니다 </p><br><p>View 에는 요청을 받아서, 요청을 처리하고 값을 반환해주는 함수들이 필요합니다. </p></blockquote><p><br><br></p><h2 id="MTV-순서"><a href="#MTV-순서" class="headerlink" title="MTV 순서"></a>MTV 순서</h2><p><br><br></p><p>처음에 django 공부할때, 어떤거 부터 작성해야 하는지에 대해서 많이 헷갈렸었는데. 튜토리얼에서는 View 부터 작성하고 시작합니다. </p><br><p>어떤분들은, models 부터 시작하고, 어떤분들은 templates 부터 시작합니다. </p><p>어디서부터 시작하는지는 개인 취향에 맡겨야 할것 같습니다. 결과물만 좋다면,, 순서는 뭐 중요하지 않지요. </p><br><p>공식문서에 나와있는 순서들도 100% 맞는 순서가 아니지만, 참고 합니다. </p><br><p><strong>공식문서 튜토리얼에서 진행하는 순서는 View 부터 진행합니다</strong></p><br><h2 id="View-작성하기"><a href="#View-작성하기" class="headerlink" title="View 작성하기"></a>View 작성하기</h2><p><br><br></p><blockquote><p>튜토리얼에서, 첫번쨰 View 를 작성 진행하는 순서는 아래와 같습니다 </p></blockquote><br><p>1) <code>polls/views.py</code>에 view 작성 </p><p>2) 요청을 전달할 <code>polls/urls.py</code> 생성 및 작성 (이 url은 작성된 view 를 요청합니다) </p><p>3) 프로젝트 url 과 <code>polls/urls.py</code> 를 연결 </p><p><br><br></p><blockquote><p>url 을 통해서 사용자가 요청을 보내면, </p><p>view 는 요청을 처리하고. 사용자에게 값을 반환합니다. </p></blockquote><p><br><br></p><p>자 그럼, 첫번째 뷰를 작성해 봅니다. <code>polls/views.py</code>를 열고, 아래 파이썬 코드를 작성합니다.</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> HttpResponse(<span class="string">"Hello, world. You're at the polls index."</span>)</span><br></pre></td></tr></table></figure><p><br><br></p><p>이것이 django 에서 제일 간단한 view 입니다. 이 view 를 호출하기 위해서는 url 이 필요하겠죠? </p><p><br>따라서 url을 생성해 줍니다</p><p><br><br></p><h3 id="polls-urls-py-생성하기"><a href="#polls-urls-py-생성하기" class="headerlink" title="polls/urls.py 생성하기"></a>polls/urls.py 생성하기</h3><br><br><blockquote><p><code>polls/</code> 폴더에 <code>urls.py</code> 를 생성해 줍니다.</p><p>아래 디렉토리 구조는  <code>urls.py</code> 를 polls 폴더에 생성한 후의 구조 입니다.</p></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">polls/</span><br><span class="line">    __init__.py</span><br><span class="line">    admin.py</span><br><span class="line">    apps.py</span><br><span class="line">    migrations/</span><br><span class="line">        __init__.py</span><br><span class="line">    models.py</span><br><span class="line">    tests.py</span><br><span class="line">    urls.py</span><br><span class="line">    views.py</span><br></pre></td></tr></table></figure><p><br><br></p><blockquote><p>polls/urls.py 에 아래 코드를 적어줍니다.</p></blockquote><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># polls/urls.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> views </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, views.index, name=<span class="string">'index'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><br><h3 id="루트-URLConf-설정"><a href="#루트-URLConf-설정" class="headerlink" title="루트 URLConf 설정"></a>루트 URLConf 설정</h3><p><br><br></p><p>루트 URLConf 에서,  <code>polls/urls.py</code> 를 연결해 줍니다. 여기서 얘기하는 루트 URLConf 는 <code>mysite/urls.py</code> 입니다.</p><p><br><br></p><blockquote><p>mysite/urls.py 를 열고, urlpatterns 에 </p><p>polls/urls.py 가 포함되게 해줍니다 </p></blockquote><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># mysite/urls.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django.contrib <span class="keyword">import</span> admin </span><br><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> include, path </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'polls/'</span>, include(<span class="string">'polls.urls'</span>)),</span><br><span class="line">    path(<span class="string">'admin/'</span>, admin.site.urls),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><br><h3 id="호출-순서"><a href="#호출-순서" class="headerlink" title="호출 순서"></a>호출 순서</h3><p><br><br></p><p>루트 URLConf 설정을 해주고, 잠시 작동 순서를 생각해봅니다. </p><p><br><br><strong>브라우저에서 <code>polls/</code> 로 접속해보면, 아래와 같은 동작 순서가 그려집니다.</strong> </p><br><ol><li>브라우저에서 <code>polls/</code> 로 접속 </li><li><code>polls/</code> 에서 <code>include()</code> 함수를 통해서 <code>polls/urls.py</code> 로 연결 </li><li><code>polls/urls.py</code> 는 <code>&#39;&#39;</code>로 접속했을때, 위에서 작성한 <code>polls/views.py</code> 에 있는 <code>index</code> 함수를 호출 (즉, <code>127.0.0.0:8000/polls/</code> 로 접속했을때 <code>index</code>함수가 호출됨) </li><li><code>polls/views.py</code> 에 있는 <code>index</code> 함수는 요청을 처리후 <code>HttpResponse</code> 로 값을 반환 </li><li>브라우저에 요청이 처리되고 반환값이 표시 </li></ol><br><h3 id="include-함수"><a href="#include-함수" class="headerlink" title="include()함수"></a><code>include()</code>함수</h3><p><br><br></p><p>튜토리얼에서는 <code>include()</code> 함수에 대해서 설명을 하고 있는데. <code>include()</code> 함수는 루트에 존재하는 urls.py 가 다른 url 설정들을 참조할수 있게 해줍니다. 언제든 Django가 <code>include()</code>를 만나면, 참조하는 다른 url 설정으로 남은 문자열들을 전달합니다. </p><br><p>튜토리얼에서는 <code>include()</code> 함수에 대해서 간단하게 설명하고 있는데.<br>Django 초심자라면, 이 시점에서 이 설명을 들으면 오히려 튜토리얼 진행을 할수 없을만큼 헷갈립니다.<br><br><br></p><blockquote><p>include() 함수는 다름 URL 패턴들을 포함할수 있게 합니다. </p><p>다른 url 패턴들을 포함하고 싶을때에는 언제나 include() 함수를 사용합니다 </p><p>admin.site.urls 는 예외입니다. </p></blockquote><p><br><br></p><h2 id="서버를-실행해서-확인하기"><a href="#서버를-실행해서-확인하기" class="headerlink" title="서버를 실행해서 확인하기"></a>서버를 실행해서 확인하기</h2><br><br><p><code>python manage.py runserver</code>를 실행하고, 브라우저를 엽니다<br></p><p>브라우저 주소창에 <code>127.0.0.1:8000</code> 이 표시되어 있고, page not found(404) 가 표시됩니다<br><br><br></p><img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image3.png" class=""> <p><br><br></p><p>페이지를 찾을수 없는 이유는, 루트에 있는 url 파일을 확인해 보면 알수 있습니다. <br></p><p>mysite/urls.py 파일을 참조하면, <strong>등록되어 있는  urls 는 총 2개로 <code>admin/</code> 과 <code>polls/</code> 2개 뿐입니다</strong><br></p><p><br>이 2가지 url 을 제외한 url 을 입력하면, 당연히 django 에서 url을 찾을수 없겟죠? ㅎㅎ </p><p><br><br></p><blockquote><p>127.0.0.1:8000/polls 혹은 </p><p>127.0.0.1:8000/admin 으로 접속하면 해당 페이지들을 찾을수 있을겁니다.  </p></blockquote><p><br><br><br></p><p><strong><code>127.0.0.1:8000/polls/</code>로 접속해 봅니다. polls/views.py 에 있는 Index 뷰가 정상적으로 화면에 메시지를 출력할것 입니다.</strong></p><br><br><img src="/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/image4.png" class=""> <p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><p>공식문서 튜토리얼에 첫번째 뷰 작성하기 부분 마지막에는 <code>path()</code> 함수에 대한 설명이 있는데.<br> 이부분은 아직 깊게 들어갈 필요가 없습니다. <br>이제까지 내용도 소화하기 힘든데, path() 까지 깊게 짚지 않고, 향후에 실력이 더 쌓이면 깊게 들어가 보겠습니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/12/Writing-your-first-Django-app-part1-4%ED%8E%B8/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
