<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Wed, 12 Aug 2020 03:37:21 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Django Models 15편 - 이미 정의된 모델 메서드 오버라이드 하기</title>
      <link>http://djangojeng-e.github.io/2020/08/12/Django-Models-15%ED%8E%B8-%EC%9D%B4%EB%AF%B8-%EC%A0%95%EC%9D%98%EB%90%9C-%EB%AA%A8%EB%8D%B8-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9C-%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/08/12/Django-Models-15%ED%8E%B8-%EC%9D%B4%EB%AF%B8-%EC%A0%95%EC%9D%98%EB%90%9C-%EB%AA%A8%EB%8D%B8-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9C-%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Wed, 12 Aug 2020 03:17:33 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Overriding-predefined-model-methods&quot;&gt;&lt;a href=&quot;#Overriding-predefined-model-methods&quot; class=&quot;headerlink&quot; title=&quot;Overriding predefined model methods&quot;&gt;&lt;/a&gt;Overriding predefined model methods&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;여러분들이 커스터마이즈 하고 싶은 데이터베이스의 동작을 캡슐화 해주는 모델 메서드들도 존재 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;특히 우리는 종종 &lt;code&gt;save()&lt;/code&gt; 와 &lt;code&gt;delete()&lt;/code&gt; 의 동작 방식을 바꾸고 싶어 집니다.  &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;save() 나 delete() 같은 메서드들을 override 해서 동작 방식을 바꾸는것도 가능하고,&lt;/p&gt;
&lt;p&gt;다른 어떤 모델 메서드들을 override 해서 사용하는것도 가능합니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;내장된 메서드, &lt;code&gt;save()&lt;/code&gt; 같은 메서드를 override 하여 사용하는 고전적인 예시는, &lt;/p&gt;
&lt;p&gt;&lt;br&gt;하나의 객체를 저장할때마다 다른 무언가를 발생시키고 싶을 때입니다.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Overriding-predefined-model-methods"><a href="#Overriding-predefined-model-methods" class="headerlink" title="Overriding predefined model methods"></a>Overriding predefined model methods</h2><br><p>여러분들이 커스터마이즈 하고 싶은 데이터베이스의 동작을 캡슐화 해주는 모델 메서드들도 존재 합니다. </p><br><p>특히 우리는 종종 <code>save()</code> 와 <code>delete()</code> 의 동작 방식을 바꾸고 싶어 집니다.  </p><br><blockquote><p>save() 나 delete() 같은 메서드들을 override 해서 동작 방식을 바꾸는것도 가능하고,</p><p>다른 어떤 모델 메서드들을 override 해서 사용하는것도 가능합니다.  </p></blockquote><br><p>내장된 메서드, <code>save()</code> 같은 메서드를 override 하여 사용하는 고전적인 예시는, </p><p><br>하나의 객체를 저장할때마다 다른 무언가를 발생시키고 싶을 때입니다.</p><br><a id="more"></a><br><h2 id="Method-override-예시"><a href="#Method-override-예시" class="headerlink" title="Method override 예시"></a>Method override 예시</h2><br><p>예시 코드를 둘러봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    tagline = models.TextField()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        do_something()</span><br><span class="line">        super().save(*args, **kwargs)  <span class="comment"># 실제 save() 를 호출 </span></span><br><span class="line">        do_something_else()</span><br><span class="line">        </span><br><span class="line"><span class="comment"># save()를 호출할때, do_something() 부분에 어떠한 작업을 하는 코드를 써주면, </span></span><br><span class="line"><span class="comment"># 실제 save() 가 동작하기 전에, do_something() 을 수행합니다 </span></span><br><span class="line"><span class="comment"># 그리고, save()가 호출 되고 나서는, do_something_else() 부분에 있는 또다른 </span></span><br><span class="line"><span class="comment"># 작업을 해줄수 있습니다.</span></span><br></pre></td></tr></table></figure><br><p><code>def save(self, *args, **kwargs)</code> 를 사용하여, 평범하게 객체를 저장하기 보다는, 다른 작업을 실행하고 저장할수 있는 기능을 가질수 있습니다.  </p><br><blockquote><p>저장하는것을 방지할수도 있습니다 </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blog</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    tagline = models.TextField() </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.name == <span class="string">"Yoko One's blog"</span>:</span><br><span class="line">            <span class="keyword">return</span> </span><br><span class="line">        <span class="comment"># 블로그 이름이 "Yoko One's blog" 이면, save 가 호출 되지 않고 </span></span><br><span class="line">        <span class="comment"># 비어있는값이 return 됩니다 </span></span><br><span class="line">        <span class="comment"># "Yoko One's blog" 가 제목이 아닐경우, else 로 넘어갑니다. </span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            super().save(*args, **kwargs)<span class="comment"># 실제 save()를 호출해서 save() 진행</span></span><br></pre></td></tr></table></figure><br><br><h2 id="super-save-args-kwargs"><a href="#super-save-args-kwargs" class="headerlink" title="super().save(*args, **kwargs)"></a><code>super().save(*args, **kwargs)</code></h2><br><p>처음에는 생소해 보일지 모르지만, </p><br><blockquote><p><code>super().save(*args, **kwargs)</code> 를 통해서, </p><p>superclass 의 메서드를 호출하는것이 중요합니다. </p><p>이것을 호출하여, 객체가 여전히 데이터베이스에 저장되게 하는것이 중요합니다. </p></blockquote><br><p>superclass 메서드를 호출하지 않는다면, 기본적인 저장 동작이 일어나지 않을것이고. </p><p><br>이는 데이터베이스를 건들지 않습니다. </p><br><p>또한, 모델 메서드에 전달된 인자들을 전달하는것도 중요합니다. </p><p><br><code>*args, **kwargs</code> 부분이 이 역할을 수행합니다. <br></p><p>Django 는 때때로, 내장 모델 메서드들의 능력을 확장하고, 새로운 인자들을 추가해줄수 있습니다. </p><br><blockquote><p>정의된 모델안에서, <code>*args</code> 와 <code>**kwargs</code> 를 사용하면, </p><p>인자들이 추가 되었을때, 코드가 자동으로 해당 인자들을 지원합니다.</p></blockquote><br><h2 id="Quick-Note"><a href="#Quick-Note" class="headerlink" title="Quick Note"></a>Quick Note</h2><br><blockquote><p>override 된 모델 메서드들은, 대량으로 운영되는 상황에서는 호출되지 않습니다. </p><br><p>객체를 위한, <code>delete()</code> 메서드는 쿼리셋을 이용해서 대량으로 객체를 지울때에는 호출 되지 않습니다. 혹은, cascading delete 일때도 호출되지 않습니다. </p><br><p>사용자 정의 delete 로직의 실행을 확실시 하고 싶으면, </p><p>pre_delete 그리고/혹은 post_delete 신호를 사용합니다.</p><br><p>안타깝게도, 객체를 대량으로 creating 혹은 updating 하는 작업은 존재하지 않습니다. </p><p>save(), pre_save() 그리고 post_save()  들이 대량으로 작업해야 하는 상황에서는 호출되지 않기 때문입니다.  </p></blockquote><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/12/Django-Models-15%ED%8E%B8-%EC%9D%B4%EB%AF%B8-%EC%A0%95%EC%9D%98%EB%90%9C-%EB%AA%A8%EB%8D%B8-%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%93%9C-%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 14편 - Model Methods</title>
      <link>http://djangojeng-e.github.io/2020/08/11/Django-Models-14%ED%8E%B8-Model-Methods/</link>
      <guid>http://djangojeng-e.github.io/2020/08/11/Django-Models-14%ED%8E%B8-Model-Methods/</guid>
      <pubDate>Tue, 11 Aug 2020 07:49:40 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Model-Methods&quot;&gt;&lt;a href=&quot;#Model-Methods&quot; class=&quot;headerlink&quot; title=&quot;Model Methods&quot;&gt;&lt;/a&gt;Model Methods&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;모델 클래스에는,  사용자 정의 메서드를 추가할수 있습니다. (row-level, 즉, 줄 단위)&lt;/p&gt;
&lt;p&gt;&lt;br&gt;Manager 메서드 (objects) 는, table 전체에 적용되고. 모델 메서드들은, 특정한 모델 인스턴스에 적용됩니다.  &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;해당 모델의 인스턴스에 대해서, 특별한 비지니스 로직을 동작하고 싶을때에, 이런 모델 메서드를 사용해서. 하나의 모델에 모아놓고 사용할수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;아래 예시에는, 몇가지 사용자 정의 메서드가 정의되어 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; models &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    first_name = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    last_name = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    birth_date = models.DateField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;baby_boomer_status&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &quot;Returns the person&#39;s baby-boomer status. &quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 해당 사람이, baby_boomer 세대인지 아닌지 판단합니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; self.birth_date &amp;lt; datetime.datetime(&lt;span class=&quot;number&quot;&gt;1945&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Pre-boomer&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; self.birth_date &amp;lt; datetime.datetime(&lt;span class=&quot;number&quot;&gt;1965&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Baby boomer&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;Post-boomer&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;    @property &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;full_name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# &quot;Returns the person&#39;s full name&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 해당 사람의 이름을 리턴합니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;%s %s&#39;&lt;/span&gt; % (self.first_name, self.last_name)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Model-Methods"><a href="#Model-Methods" class="headerlink" title="Model Methods"></a>Model Methods</h2><br><p>모델 클래스에는,  사용자 정의 메서드를 추가할수 있습니다. (row-level, 즉, 줄 단위)</p><p><br>Manager 메서드 (objects) 는, table 전체에 적용되고. 모델 메서드들은, 특정한 모델 인스턴스에 적용됩니다.  </p><br><p>해당 모델의 인스턴스에 대해서, 특별한 비지니스 로직을 동작하고 싶을때에, 이런 모델 메서드를 사용해서. 하나의 모델에 모아놓고 사용할수 있습니다. </p><br><p>아래 예시에는, 몇가지 사용자 정의 메서드가 정의되어 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    birth_date = models.DateField()</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">baby_boomer_status</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># "Returns the person's baby-boomer status. "</span></span><br><span class="line">        <span class="comment"># 해당 사람이, baby_boomer 세대인지 아닌지 판단합니다. </span></span><br><span class="line">        <span class="keyword">import</span> datetime </span><br><span class="line">        <span class="keyword">if</span> self.birth_date &lt; datetime.datetime(<span class="number">1945</span>, <span class="number">8</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Pre-boomer"</span></span><br><span class="line">        <span class="keyword">elif</span> self.birth_date &lt; datetime.datetime(<span class="number">1965</span>, <span class="number">1</span>, <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Baby boomer"</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">"Post-boomer"</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">    @property </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">full_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># "Returns the person's full name"</span></span><br><span class="line">        <span class="comment"># 해당 사람의 이름을 리턴합니다 </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'%s %s'</span> % (self.first_name, self.last_name)</span><br></pre></td></tr></table></figure><br><br><a id="more"></a><br><p>예시에서, 마지막으로 작성된 <code>def full_name(self)</code> 메서드는, property 입니다. </p><br><p>모델 인스턴스는 자동으로 각 모델에 부여된 메서드의 목록을 가지고 있고. </p><p><br>아래 예시에서 보면, colin 이라는 인스턴스가 모델에 정의된 메서드들을 사용할수 있다는것을 확인합니다. <br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">colin = Person.objects.create(first_name="colin", last_name="firth", birth_date="1961-10-07")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> colin 이라는 객체를 가져옴 </span></span><br><span class="line">colin = Person.objects.get(first_name="colin")</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> colin 이라는 인스턴스의 baby_boomer_status 메서드를 호출 </span></span><br><span class="line">colin.baby_boomer_status </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> colin 이라는 인스턴스의 full_name 메서드를 호출 </span></span><br><span class="line">colin.full_name</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="str-메서드"><a href="#str-메서드" class="headerlink" title="__str__() 메서드"></a><code>__str__()</code> 메서드</h2><br><p>객체의 문자열 표시를 반환하는 파이썬 <code>magic method</code> (매직 메서드) 입니다. 이 메서드는 파이썬과 장고가 언제든 모델 인스턴스가 순수한 문자열로 표시되길 원할때에 사용됩니다. </p><br><blockquote><p> <code>__str__()</code> 메서드를 사용하면, 해당 모델 인스턴스를 문자열로 표시해서 반환할수 있습니다. </p></blockquote><br><p>이 메서드는 아주 많이, 많이, 많이, 그리고 자주, 사용되는 메서드입니다.  </p><br><h2 id="get-absolute-url"><a href="#get-absolute-url" class="headerlink" title="get_absolute_url()"></a><code>get_absolute_url()</code></h2><br><p>이 메서드는 Django 에게 어떻게 객체에 대한 URL 을 계산해야 하는지 얘기해 줍니다. </p><p><br>Django 는 이 메서드를 어드민 인터페이스에서 사용합니다. 또는 언제든 객체의 URL 을 알아내야 할때 사용합니다. </p><br><p>어떤 객체든 고유한 URL 이 식별하는 객체일때, 이 메서드로 정의 합니다. </p><br><h2 id="Model-Method-연습"><a href="#Model-Method-연습" class="headerlink" title="Model Method 연습"></a>Model Method 연습</h2><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [1]: import datetime                                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [2]: colin = Person.objects.create(first_name="Colin", </span><br><span class="line">                                      last_name="Firth", </span><br><span class="line">                                      birth_date=datetime.date(1960, 9, 10))                                                       </span><br><span class="line"></span><br><span class="line">In [3]: colin.first_name                                                                                                                                                  </span><br><span class="line">Out[3]: 'Colin'</span><br><span class="line"></span><br><span class="line">In [4]: colin.last_name                                                                                                                                                   </span><br><span class="line">Out[4]: 'Firth'</span><br><span class="line"></span><br><span class="line">In [5]: colin.birth_date                                                                                                                                                  </span><br><span class="line">Out[5]: datetime.date(1960, 9, 10)</span><br><span class="line"></span><br><span class="line">In [6]: colin.baby_boomer_status                                                                                                                                          </span><br><span class="line">Out[6]: &lt;bound method Person.baby_boomer_status of &lt;Person: Person object (4)&gt;&gt;</span><br><span class="line"></span><br><span class="line">In [7]: colin.full_name                                                                                                                                                   </span><br><span class="line">Out[7]: 'Colin Firth'</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/11/Django-Models-14%ED%8E%B8-Model-Methods/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 13편 - Model Attributes</title>
      <link>http://djangojeng-e.github.io/2020/08/10/Django-Models-13%ED%8E%B8-Model-Attributes/</link>
      <guid>http://djangojeng-e.github.io/2020/08/10/Django-Models-13%ED%8E%B8-Model-Attributes/</guid>
      <pubDate>Mon, 10 Aug 2020 06:41:50 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Model-Attributes&quot;&gt;&lt;a href=&quot;#Model-Attributes&quot; class=&quot;headerlink&quot; title=&quot;Model Attributes&quot;&gt;&lt;/a&gt;Model Attributes&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;모델의 가장 중요한 속성은 Manager 입니다. &lt;/p&gt;
&lt;br&gt;



&lt;blockquote&gt;
&lt;p&gt;Manager 는 &lt;/p&gt;
&lt;p&gt;Django 데이터베이스 쿼리 운영을 제공 하는 인터페이스로, &lt;/p&gt;
&lt;p&gt;데이터베이스에서 인스턴스들을 검색할때 사용 됩니다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;만약, 사용자 정의 Manager 가 정의되어 있지 않다면, 기본값으로, Manager 의 이름은 objects 입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;Manager 는 모델 클래스들을 통해서만 접근 가능합니다. 모델 인스턴스로는 접근이 가능하지 않습니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Model-Attributes"><a href="#Model-Attributes" class="headerlink" title="Model Attributes"></a>Model Attributes</h2><br><p>모델의 가장 중요한 속성은 Manager 입니다. </p><br><blockquote><p>Manager 는 </p><p>Django 데이터베이스 쿼리 운영을 제공 하는 인터페이스로, </p><p>데이터베이스에서 인스턴스들을 검색할때 사용 됩니다. <br></p><p>만약, 사용자 정의 Manager 가 정의되어 있지 않다면, 기본값으로, Manager 의 이름은 objects 입니다. </p></blockquote><br><p>Manager 는 모델 클래스들을 통해서만 접근 가능합니다. 모델 인스턴스로는 접근이 가능하지 않습니다. </p><br><a id="more"></a><h2 id="Manager-의-사용"><a href="#Manager-의-사용" class="headerlink" title="Manager 의 사용"></a>Manager 의 사용</h2><br><p>우리가 Django 에서 해당 모델의 데이터베이스 모든 데이터를 조회할때에는, 아래와 같이 ORM 을 작성합니다. </p><p><br>이때 사용되는, objects 가 Manager의 기본 이름입니다. <br></p><p><code>&lt;model명&gt;.objects.all()</code></p><br><p>예시를 들어보자면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'학생 이름'</span>)</span><br></pre></td></tr></table></figure><br><p>위의 Student 모델이 있다고 가정할때에, 해당 모델의 데이터베이스를 조회하는 명령어들은 아래와 같습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Student.objects.all()   # Student 의 모든 객체를 조회 </span><br><span class="line">Student.objects.get(name='장고쟁이') # 이름이 장고쟁이인 Student 를 찾음</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/10/Django-Models-13%ED%8E%B8-Model-Attributes/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 12편 - Meta Options</title>
      <link>http://djangojeng-e.github.io/2020/08/09/Django-Models-12%ED%8E%B8-Meta-Options/</link>
      <guid>http://djangojeng-e.github.io/2020/08/09/Django-Models-12%ED%8E%B8-Meta-Options/</guid>
      <pubDate>Sun, 09 Aug 2020 02:46:31 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Models-Meta-Options&quot;&gt;&lt;a href=&quot;#Models-Meta-Options&quot; class=&quot;headerlink&quot; title=&quot;Models - Meta Options&quot;&gt;&lt;/a&gt;Models - Meta Options&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;Metadata &lt;/p&gt;
&lt;p&gt;데이터의 집합체로 다른 데이터에 대한 설명과 정보를 제공합니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;모델에 metadata 를 부여할수 있습니다. 클래스 안에 Meta 클래스를 사용해서 부여할수 있습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;아래 예시와 같이 모델 클래스 안에 부가적으로, Meta 클래스를 넣어서 metadata 를 넣을수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; models &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Ox&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    horn_length = models.IntegerField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 아래와 같이 Ox 모델 클래스 안쪽에 Meta 클래스를 넣어서 metadata 를 부여 할수 있습니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Meta&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ordering = [&lt;span class=&quot;string&quot;&gt;&quot;horn_length&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        verbose_name_plural = &lt;span class=&quot;string&quot;&gt;&quot;oxen&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;필드가 아닌 무엇이든, 모델의 메타데이터가 될수 있습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;필드는, 메타 데이터가 될수 없습니. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Models-Meta-Options"><a href="#Models-Meta-Options" class="headerlink" title="Models - Meta Options"></a>Models - Meta Options</h2><br><blockquote><p>Metadata </p><p>데이터의 집합체로 다른 데이터에 대한 설명과 정보를 제공합니다 </p></blockquote><br><p>모델에 metadata 를 부여할수 있습니다. 클래스 안에 Meta 클래스를 사용해서 부여할수 있습니다. </p><p><br>아래 예시와 같이 모델 클래스 안에 부가적으로, Meta 클래스를 넣어서 metadata 를 넣을수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ox</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    horn_length = models.IntegerField()</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 아래와 같이 Ox 모델 클래스 안쪽에 Meta 클래스를 넣어서 metadata 를 부여 할수 있습니다 </span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">"horn_length"</span>]</span><br><span class="line">        verbose_name_plural = <span class="string">"oxen"</span></span><br></pre></td></tr></table></figure><br><p>필드가 아닌 무엇이든, 모델의 메타데이터가 될수 있습니다. </p><p><br>필드는, 메타 데이터가 될수 없습니. </p><br><a id="more"></a><br><blockquote><p>정렬 옵션인 ordering, </p><p>데이터 베이스 테이블명,  db_table </p><p>혹은 사람이 읽기 편한 단수와 복수 이름들인, verbose_name, verbose_name_plural </p><p>이런것들이 Meta 클래스안에 정의 될수 있습니다. </p></blockquote><br><p>모델에 대한 class Meta 적용은 전적으로 선택 사항입니다. </p><br><p>Meta Option 에 가능한 모든 옵션들에 대해서는,  model option reference 문서에서 보면 됩니다. </p><br><h2 id="Meta-option-리스트"><a href="#Meta-option-리스트" class="headerlink" title="Meta option 리스트"></a>Meta option 리스트</h2><br><p>메타 옵션에는 아래와 같은 항목들이 존재합니다. </p><p>모든 리스트를 확인하고 싶다면, <a href="https://docs.djangoproject.com/en/3.0/ref/models/options/" target="_blank" rel="noopener">https://docs.djangoproject.com/en/3.0/ref/models/options/</a></p><p><br>링크를 확인 하면 됩니다. </p><table><thead><tr><th>Meta Options</th><th>Function</th><th>Remarks</th></tr></thead><tbody><tr><td>abstract</td><td>모델이 abstract base class 가 됩니다</td><td><code>abstract = True</code></td></tr><tr><td>app_label</td><td>모델이 INSTALLED_APPS 밖에 있는 어플리케이션에 존재할때에 선언합니다</td><td><code>app_label = myapp</code></td></tr><tr><td>base_manager_name</td><td>메니저의 속성 이름을 지정합니다. 예를들면, objects</td><td></td></tr><tr><td>db_table</td><td>해당 모델을 위한 데이터베이스 테이블 명을 지정합니다</td><td><code>db_table = &#39;music_album&#39;</code></td></tr><tr><td>db_tablespace</td><td>데이터베이스 테이블 스페이스의 이름</td><td></td></tr><tr><td>default_manager_name</td><td>해당 모델을 위해 사용할 메니저의 이름을 지정합니다</td><td></td></tr><tr><td>default_related_name</td><td>관련된 객체에서 역으로 접근할 이름을 지정합니다.  기본값은, <code>모델명_set</code> 입니다</td><td></td></tr><tr><td>get_latest_by</td><td>보편적으로 ,DateField, DateTimeField 혹은 IntegerField 같은 모델명에 사용합니다.</td><td>get_latest_by = “order_date”, get_latest_by = [‘-priority’, ‘order_date’]</td></tr><tr><td></td><td></td><td></td></tr></tbody></table><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/09/Django-Models-12%ED%8E%B8-Meta-Options/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 11편 - Fields (Field name restrictions)</title>
      <link>http://djangojeng-e.github.io/2020/08/08/Django-Models-11%ED%8E%B8-Fields-Field-name-restrictions/</link>
      <guid>http://djangojeng-e.github.io/2020/08/08/Django-Models-11%ED%8E%B8-Fields-Field-name-restrictions/</guid>
      <pubDate>Sat, 08 Aug 2020 04:16:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Models-Fields-Field-Name-Restrictions&quot;&gt;&lt;a href=&quot;#Models-Fields-Field-Name-Restrictions&quot; class=&quot;headerlink&quot; title=&quot;Models - Fields(Field Name Restrictions)&quot;&gt;&lt;/a&gt;Models - Fields(Field Name Restrictions)&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Field-name-restrictions&quot;&gt;&lt;a href=&quot;#Field-name-restrictions&quot; class=&quot;headerlink&quot; title=&quot;Field name restrictions&quot;&gt;&lt;/a&gt;Field name restrictions&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;Django 는 모델 필드 이름들에 대한 제약이 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;필드명은 파이썬 예약어들이 될수 없습니다. 만약 사용한다면, 파이썬 문법 에러를 발생 시킵니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt; = models.IntegerField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# pass 는 파이썬에서 reversed word (예약어) 입니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 따라서, 모델의 필드명이 될수 없습니다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;&lt;p&gt;필드명은 하나 이상의 언더스코어를 사용할수 없습니다. Django 의 쿼리 조회문이 언더스코어를 2개 사용하기 때문에, 필드명은, &lt;code&gt;__&lt;/code&gt; 를 가질수 없습니다.  &lt;br&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	foo__bar = models.IntegerField() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# foo__bar 는 언더스코어 2개를 가지고 있습니다. 잘못된 필드명입니다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;&lt;p&gt;비슷한 이유로, 언더스코어로 끝나면 안됩니다. 쿼리 구문과 겹치기 때문입니다 &lt;br&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Example&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	foobar_ = models.InegerField() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# foobar_ 처럼 언더스코어로 끝나는 필드명은 사용하면 안됩니다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Models-Fields-Field-Name-Restrictions"><a href="#Models-Fields-Field-Name-Restrictions" class="headerlink" title="Models - Fields(Field Name Restrictions)"></a>Models - Fields(Field Name Restrictions)</h2><br><h3 id="Field-name-restrictions"><a href="#Field-name-restrictions" class="headerlink" title="Field name restrictions"></a>Field name restrictions</h3><br><p>Django 는 모델 필드 이름들에 대한 제약이 있습니다. </p><br><ol><li><p>필드명은 파이썬 예약어들이 될수 없습니다. 만약 사용한다면, 파이썬 문법 에러를 발생 시킵니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(models.Model)</span>:</span></span><br><span class="line"><span class="keyword">pass</span> = models.IntegerField()</span><br><span class="line"></span><br><span class="line"><span class="comment"># pass 는 파이썬에서 reversed word (예약어) 입니다 </span></span><br><span class="line"><span class="comment"># 따라서, 모델의 필드명이 될수 없습니다</span></span><br></pre></td></tr></table></figure></li></ol><br><ol start="2"><li><p>필드명은 하나 이상의 언더스코어를 사용할수 없습니다. Django 의 쿼리 조회문이 언더스코어를 2개 사용하기 때문에, 필드명은, <code>__</code> 를 가질수 없습니다.  <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">foo__bar = models.IntegerField() </span><br><span class="line"></span><br><span class="line"><span class="comment"># foo__bar 는 언더스코어 2개를 가지고 있습니다. 잘못된 필드명입니다.</span></span><br></pre></td></tr></table></figure></li></ol><br><ol start="3"><li><p>비슷한 이유로, 언더스코어로 끝나면 안됩니다. 쿼리 구문과 겹치기 때문입니다 <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Example</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">foobar_ = models.InegerField() </span><br><span class="line"></span><br><span class="line"><span class="comment"># foobar_ 처럼 언더스코어로 끝나는 필드명은 사용하면 안됩니다.</span></span><br></pre></td></tr></table></figure></li></ol><br><a id="more"></a><br><p>하지만, 이런 제약들은 유도리 있게 잘 사용될수 있습니다. 필드명은 데이터베이스 컬럼명과 꼭 같지 않아도 되기 때문입니다. </p><br><p>join, where 혹은 select 같은 SQL 예약어들은 모델 필드명에 사용해도 됩니다. </p><p><br>Django 는 모든 SQL 쿼리 기반에서의 데이터베이스 테이블 이름들과 컬럼명들에서 자유롭습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/08/Django-Models-11%ED%8E%B8-Fields-Field-name-restrictions/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 10편 - Fields (Models across files)</title>
      <link>http://djangojeng-e.github.io/2020/08/07/Django-Models-10%ED%8E%B8-Fields-Models-across-files/</link>
      <guid>http://djangojeng-e.github.io/2020/08/07/Django-Models-10%ED%8E%B8-Fields-Models-across-files/</guid>
      <pubDate>Fri, 07 Aug 2020 02:14:14 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;파일사이에-모델들&quot;&gt;&lt;a href=&quot;#파일사이에-모델들&quot; class=&quot;headerlink&quot; title=&quot;파일사이에 모델들&quot;&gt;&lt;/a&gt;파일사이에 모델들&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;다른 앱에 존재하는 모델끼리 관계를 형성해도 괜찮습니다. &lt;/p&gt;
&lt;p&gt;다른 앱에 존재하는 모델을 사용하려면, 관계된 모델을 파일 상단에 가져와서 사용합니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;다른 모델 클래스를 가져온 다음에는, 필요한곳에 사용하면 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;공식문서에서는 예시가 많이 빈약한데, 프로젝트 구조가 아래처럼 되어 있다고 가정합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;order 라는 앱이 있고, product 라는앱이 있습니다 &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이런 구조안에서, order/models.py 파일에서, product/models.py 에 있는 모델을 &lt;/p&gt;
&lt;p&gt;가져다 사용할수 있습니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="파일사이에-모델들"><a href="#파일사이에-모델들" class="headerlink" title="파일사이에 모델들"></a>파일사이에 모델들</h2><br><blockquote><p>다른 앱에 존재하는 모델끼리 관계를 형성해도 괜찮습니다. </p><p>다른 앱에 존재하는 모델을 사용하려면, 관계된 모델을 파일 상단에 가져와서 사용합니다. </p></blockquote><br><p>다른 모델 클래스를 가져온 다음에는, 필요한곳에 사용하면 됩니다. </p><br><p>공식문서에서는 예시가 많이 빈약한데, 프로젝트 구조가 아래처럼 되어 있다고 가정합니다. </p><br><blockquote><p>order 라는 앱이 있고, product 라는앱이 있습니다 </p><br><p>이런 구조안에서, order/models.py 파일에서, product/models.py 에 있는 모델을 </p><p>가져다 사용할수 있습니다.  </p></blockquote><p><br><a id="more"></a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">├── config</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── settings.py</span><br><span class="line">│   ├── urls.py</span><br><span class="line">│   └── wsgi.py</span><br><span class="line">├── db.sqlite3</span><br><span class="line">├── manage.py</span><br><span class="line">├── order</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── forms.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">├── product</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── forms.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br></pre></td></tr></table></figure><br><br><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><br><blockquote><p>파일 상단에, 다른 앱에 존재하는 클래스를 가져와서 사용하면 됩니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"><span class="keyword">from</span> order.models <span class="keyword">import</span> Order </span><br><span class="line"></span><br><span class="line"><span class="comment"># order 앱에 있는 models.py 에서 Order 라는 모델을 불러옴</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Product</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    order = models.ForeignKey(Order, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><br><h2 id="공식문서-예시"><a href="#공식문서-예시" class="headerlink" title="공식문서 예시"></a>공식문서 예시</h2><br><p>공식문서 예시에서는, geography 에 있는 models 를 불러오고, 그 안에 있는 ZipCode 클래스를 가져와서 사용하는것을 보여주고 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"><span class="keyword">from</span> geography.models <span class="keyword">import</span> ZipCode </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    zip_code = models.ForeignKey(</span><br><span class="line">    ZipCode, on_delete=models.SET_NULL,</span><br><span class="line">    blank=<span class="literal">True</span>,</span><br><span class="line">    null=<span class="literal">True</span>, </span><br><span class="line">    )</span><br></pre></td></tr></table></figure><br><p>파일 상단에 다른 앱에 존재하는 모델을 불러오기 위해서는, 아래 형식으로 불러와주면 됩니다. </p><br><p><code>from &lt;앱이름&gt;.models import &lt;가져올클래스이름&gt;</code></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/07/Django-Models-10%ED%8E%B8-Fields-Models-across-files/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 9편 - One-to-One</title>
      <link>http://djangojeng-e.github.io/2020/08/06/Django-Models-9%ED%8E%B8-One-to-One/</link>
      <guid>http://djangojeng-e.github.io/2020/08/06/Django-Models-9%ED%8E%B8-One-to-One/</guid>
      <pubDate>Thu, 06 Aug 2020 08:29:30 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Models-Relationships-One-to-One&quot;&gt;&lt;a href=&quot;#Models-Relationships-One-to-One&quot; class=&quot;headerlink&quot; title=&quot;Models - Relationships (One-to-One)&quot;&gt;&lt;/a&gt;Models - Relationships (One-to-One)&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;one-to-one-relationships&quot;&gt;&lt;a href=&quot;#one-to-one-relationships&quot; class=&quot;headerlink&quot; title=&quot;one-to-one relationships&quot;&gt;&lt;/a&gt;one-to-one relationships&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;one-to-one 관계, 즉 1대 1 관계를 정의하기 위해서는, &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;code&gt;OneToOneField&lt;/code&gt;를 사용해 줍니다. 다른 필드 타입을 사용하는것과 비슷하게, 모델 클래스 안에 클래스 속성으로 정의해 줍니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;OneToOneField 는 위치 인자를 필요로 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;OneToOneField 는 연결된 모델 클래스를, 필수 위치 인자로 받습니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;예를들어, “places” 라는 데이터베이스를 만들고 있었는데,  &lt;code&gt;address&lt;/code&gt; 나 &lt;code&gt;phone number&lt;/code&gt; 같이 매우 보편적인 것들을 데이터베이스에 만드려고 하는 상황이 올지 모릅니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;places 라는 장소위에 restaurant 이라는 데이터베이스를 만들고 싶으면, Place 를 만들때 포함하였던 &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;데이터베이스 필드들을 Restaurant 모델에 반복하여 생성해 주기 보다는, &lt;/p&gt;
&lt;p&gt;Restaurant 이 OneToOneField 를 Place 에 갖게 하면 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;이게 무슨 이야기냐면,,, 하나의 장소 (Place)는 &lt;code&gt;address&lt;/code&gt; 나 &lt;code&gt;phone number&lt;/code&gt; 같은 보편적인 정보를 가지고 있을지 모릅니다. 그런데 만약, 하나의 장소 위에 식당 (restaurant) 을 만들고 싶다면? &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;restaurant 모델을 만들어 줄때에 &lt;code&gt;address&lt;/code&gt; 나 &lt;code&gt;phone number&lt;/code&gt; 같은 보편적인 필드들을 다시 정의하지 않고,&lt;/p&gt;
&lt;p&gt;&lt;br&gt;Restaurant 이 OneToOneField 를 사용하여 Place 모델과 연결되면 됩니다.  &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Models-Relationships-One-to-One"><a href="#Models-Relationships-One-to-One" class="headerlink" title="Models - Relationships (One-to-One)"></a>Models - Relationships (One-to-One)</h2><br><h3 id="one-to-one-relationships"><a href="#one-to-one-relationships" class="headerlink" title="one-to-one relationships"></a>one-to-one relationships</h3><br><p>one-to-one 관계, 즉 1대 1 관계를 정의하기 위해서는, </p><p><br><code>OneToOneField</code>를 사용해 줍니다. 다른 필드 타입을 사용하는것과 비슷하게, 모델 클래스 안에 클래스 속성으로 정의해 줍니다. </p><br><p>OneToOneField 는 위치 인자를 필요로 합니다. </p><br><blockquote><p>OneToOneField 는 연결된 모델 클래스를, 필수 위치 인자로 받습니다 </p></blockquote><br><p>예를들어, “places” 라는 데이터베이스를 만들고 있었는데,  <code>address</code> 나 <code>phone number</code> 같이 매우 보편적인 것들을 데이터베이스에 만드려고 하는 상황이 올지 모릅니다. </p><br><p>places 라는 장소위에 restaurant 이라는 데이터베이스를 만들고 싶으면, Place 를 만들때 포함하였던 </p><br><blockquote><p>데이터베이스 필드들을 Restaurant 모델에 반복하여 생성해 주기 보다는, </p><p>Restaurant 이 OneToOneField 를 Place 에 갖게 하면 됩니다. </p></blockquote><br><p>이게 무슨 이야기냐면,,, 하나의 장소 (Place)는 <code>address</code> 나 <code>phone number</code> 같은 보편적인 정보를 가지고 있을지 모릅니다. 그런데 만약, 하나의 장소 위에 식당 (restaurant) 을 만들고 싶다면? </p><br><p>restaurant 모델을 만들어 줄때에 <code>address</code> 나 <code>phone number</code> 같은 보편적인 필드들을 다시 정의하지 않고,</p><p><br>Restaurant 이 OneToOneField 를 사용하여 Place 모델과 연결되면 됩니다.  </p><br><a id="more"></a><br><p>사실, Restaurant 도 하나의 Place 이기 때문에, 이런 상황을 해결 하기 위해서는 보통 상속 개념을 사용합니다. </p><p>클래스를 상속 하면, 상속받는 클래스의 필드와 메서드들을 사용할수 있다는것을 숙지해둡시다. </p><br><p>데이터베이스 상속은 암묵적으로, <code>one-to-one</code> 관계를 형성합니다. </p><br><h2 id="OneToOneField-예시"><a href="#OneToOneField-예시" class="headerlink" title="OneToOneField 예시"></a>OneToOneField 예시</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">80</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s the place"</span> % self.name </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># OneToOneField 의 첫번째 인자로, Place 클래스를 받음 </span></span><br><span class="line">    place = models.OneToOneField(Place, on_delete=models.CASCADE,  primary_key=<span class="literal">True</span>)</span><br><span class="line">    serves_hot_dogs = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    serves_pizza = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s the restaurant"</span> % self.place.name </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Waiter</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    restaurant = models.ForeignKey(Restaurant, on_delete=models.CASCADE)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"%s the waiter at %s"</span> % (self.name, self.restaurant)</span><br></pre></td></tr></table></figure><p><br><br></p><p>위의 예시 모델에서, 하나의 장소 <code>Place</code> 에는 하나의 <code>Restaurant</code> 이 존재하고, 이는 <code>OneToOneField</code> 로 연결되어 있습니다. 하나의 <code>Restaurant</code> 에는 <code>ForeignKey</code> 로 연결되어 있는, <code>Waiter</code>  라는 모델이 존재합니다. </p><p><br>이는, 하나의 Restaurant 에 일하는 웨이터가 여러명 있을수 있는 관계를 모델링 한것입니다. <br><br></p><blockquote><p><code>OneToOneField</code> 는 선택 인자로 parent_link 를 받습니다. </p></blockquote><br><h2 id="Python-API-사용해보기"><a href="#Python-API-사용해보기" class="headerlink" title="Python API 사용해보기"></a>Python API 사용해보기</h2><br><p>장소 (Place) 2 곳을 생성해 줍니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [1]: p1 = Place(name="명랑핫도그", address="성남시 분당구 정자1동")                                                                                                    </span><br><span class="line"></span><br><span class="line">In [2]: p1.save()                                                                                                                                                         </span><br><span class="line"></span><br><span class="line">In [3]: p2 = Place(name="피자헛", address="성남시 분당구 금곡동 불정로 87")                                                                                               </span><br><span class="line"></span><br><span class="line">In [4]: p2.save()</span><br></pre></td></tr></table></figure><br><p>식당을 생성해 주고, 부모 객체를 해당 객체의 primary key 로 전달해줍니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [5]: r = Restaurant(place=p1, serves_hot_dogs=True, serves_pizza=False)                                                                                                </span><br><span class="line"></span><br><span class="line">In [6]: r.save()</span><br></pre></td></tr></table></figure><br><p>r 은 Restaurant 의 인스턴스 이니까, 하나의 Restaurant 인스턴스는, 해당 장소에 접근할수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [7]: r.place                                                                                                                                                           </span><br><span class="line">Out[7]: &lt;Place: 명랑핫도그 the place&gt;</span><br></pre></td></tr></table></figure><br><p>반대로, 하나의 Place 는 restaurant 에 접근할수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [8]: p1.restaurant                                                                                                                                                     </span><br><span class="line">Out[8]: &lt;Restaurant: 명랑핫도그 the restaurant&gt;</span><br></pre></td></tr></table></figure><br><blockquote><p>p2 는 연결된 restaurant 이 아직 없습니다. </p><p>따라서, 아래 코드를 shell 에서 실행 하면, p2 에는 restaurant 이 없다고 나옵니다 </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [9]: from django.core.exceptions import ObjectDoesNotExist                                                                                                             </span><br><span class="line"></span><br><span class="line">In [10]: try: </span><br><span class="line">    ...:     p2.restaurant </span><br><span class="line">    ...: except ObjectDoesNotExist: </span><br><span class="line">    ...:     print("There is no restaurant here.") </span><br><span class="line">    ...:                                                                                                                                                                  </span><br><span class="line"><span class="meta">#</span><span class="bash"> Shift + Enter 를 실행하면, 실행됨. </span></span><br><span class="line"></span><br><span class="line">There is no restaurant here.</span><br></pre></td></tr></table></figure><br><blockquote><p><code>hasattr</code> 메서드를 사용하여, 예외처리를 하지 않아도 됩니다. </p><ul><li><code>hasattr</code> 는 파이썬 내장함수 입니다.</li><li>객체가 주어진 이름의 어트리뷰트를 가지고 있을때 True 를 반환하고, 그렇지 않을때에 False 를 반환합니다.  </li><li><code>hasatt(object, name)</code></li></ul></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">In [11]: hasattr(p2, 'restaurant')                                                                                                                                        </span><br><span class="line">Out[11]: False</span><br></pre></td></tr></table></figure><br><p>할당 기호 (<code>=</code>) 를  사용하여, place 를 설정해 줍니다. place 는 Restaurant 의 primary key 이므로, save 는 새로운 restaurant 을 생성합니다 </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 위에서 r = Restaurant(place=p1, serves_hot_dogs=True, serves_pizza=False)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> r.place = p2 로 바꿔줍니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [12]: r.place = p2                                                                                                                                               </span><br><span class="line">In [13]: r.save()                                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [14]: p2.restaurant                                                                                                                                                    </span><br><span class="line">Out[14]: &lt;Restaurant: 피자헛 the restaurant&gt;</span><br><span class="line"></span><br><span class="line">In [15]: r.place                                                                                                                                                          </span><br><span class="line">Out[15]: &lt;Place: 피자헛 the place&gt;</span><br></pre></td></tr></table></figure><br><p>Place 를 다시 역으로 바꿔줍니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [16]: p1.restaurant = r                                                                                                                                                </span><br><span class="line"></span><br><span class="line">In [17]: p1.restaurant                                                                                                                                                    </span><br><span class="line">Out[17]: &lt;Restaurant: 명랑핫도그 the restaurant&gt;</span><br></pre></td></tr></table></figure><br><blockquote><p>One-To-One 관계가 할당 되기 이전에 </p><p>객체가 저장 되어 있어야 ValueError 가 나질 않습니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [18]: p3 = Place(name='Daemon Dogs', address='944 W. Fullerton')                                                                                                       </span><br><span class="line"></span><br><span class="line">In [19]: Restaurant.objects.create(place=p3, serves_hot_dogs=True, serves_pizza=False)                                                                                    </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">ValueError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-19-18b4cdec5239&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 Restaurant.objects.create(place=p3, serves_hot_dogs=True, serves_pizza=False)</span></span><br></pre></td></tr></table></figure><br><blockquote><p>Restaurant.objects.all() 은 Restaurants 만 반환합니다. Place 는 반환하지 않습니다. </p><p>Place.objects.all() 은 Places 들을 반환합니다. Restaurant을 가지고 있던 안있던,  결과를 반환합니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [20]: Restaurant.objects.all()                                                                                                                                         </span><br><span class="line">Out[20]: &lt;QuerySet [&lt;Restaurant: 명랑핫도그 the restaurant&gt;, &lt;Restaurant: 피자헛 the restaurant&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [21]: Place.objects.order_by('name')                                                                                                                                   </span><br><span class="line">Out[21]: &lt;QuerySet [&lt;Place: 명랑핫도그 the place&gt;, &lt;Place: 피자헛 the place&gt;]&gt;</span><br></pre></td></tr></table></figure><br><blockquote><p>관계간 룩업들을 사용하여, 해당 모델에 쿼리문을 작성할수 있습니다. </p></blockquote><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">In [22]: Restaurant.objects.get(place&#x3D;p1)                                                                                                                                 </span><br><span class="line">Out[22]: &lt;Restaurant: 명랑핫도그 the restaurant&gt;</span><br><span class="line"></span><br><span class="line">In [23]: Restaurant.objects.get(place__pk&#x3D;1)                                                                                                                              </span><br><span class="line">Out[23]: &lt;Restaurant: 명랑핫도그 the restaurant&gt;</span><br><span class="line"></span><br><span class="line">In [24]: Restaurant.objects.filter(place__name__startswith&#x3D;&quot;명&quot;)                                                                                                          </span><br><span class="line">Out[24]: &lt;QuerySet [&lt;Restaurant: 명랑핫도그 the restaurant&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [25]: Restaurant.objects.exclude(place__address__contains&#x3D;&quot;헛&quot;)                                                                                                        </span><br><span class="line">Out[25]: &lt;QuerySet [&lt;Restaurant: 명랑핫도그 the restaurant&gt;, &lt;Restaurant: 피자헛 the restaurant&gt;]&gt;</span><br><span class="line"></span><br><span class="line"># 한글은 조회 필터가 안걸리는지, exclude 를 했는데도. 조회가 되서 나옵니다;;;;</span><br></pre></td></tr></table></figure><br><p>물론 거꾸로도 작동 합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [27]: Place.objects.get(pk=1)                                                                                                                                          </span><br><span class="line">Out[27]: &lt;Place: 명랑핫도그 the place&gt;</span><br><span class="line"></span><br><span class="line">In [28]: Place.objects.get(restaurant__place=p1)                                                                                                                          </span><br><span class="line">Out[28]: &lt;Place: 명랑핫도그 the place&gt;</span><br><span class="line"></span><br><span class="line">In [29]: Place.objects.get(restaurant=r)                                                                                                                                  </span><br><span class="line">Out[29]: &lt;Place: 명랑핫도그 the place&gt;</span><br><span class="line"></span><br><span class="line">In [30]: Place.objects.get(restaurant__place__name__startswith="명")                                                                                                      </span><br><span class="line">Out[30]: &lt;Place: 명랑핫도그 the place&gt;</span><br></pre></td></tr></table></figure><br><br><blockquote><p>Waiter 를 Restaurant 에 추가해 줍니다. </p><p>Waiter는 Restaurant 에 ForeignKey 로 등록 되어 있습니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [31]: w = r.waiter_set.create(name="장고쟁이")                                                                                                                         </span><br><span class="line"></span><br><span class="line">In [32]: w                                                                                                                                                                </span><br><span class="line">Out[32]: &lt;Waiter: 장고쟁이 the waiter at 명랑핫도그 the restaurant&gt;</span><br></pre></td></tr></table></figure><br><p>웨이터들을 쿼리를 통해 조회합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [33]: Waiter.objects.filter(restaurant__place=p1)                                                                                                                      </span><br><span class="line">Out[33]: &lt;QuerySet [&lt;Waiter: 장고쟁이 the waiter at 명랑핫도그 the restaurant&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [34]: Waiter.objects.filter(restaurant__place__name__startswith="명")                                                                                                  </span><br><span class="line">Out[34]: &lt;QuerySet [&lt;Waiter: 장고쟁이 the waiter at 명랑핫도그 the restaurant&gt;]&gt;</span><br></pre></td></tr></table></figure><br><h2 id="데이터베이스-리뷰"><a href="#데이터베이스-리뷰" class="headerlink" title="데이터베이스 리뷰"></a>데이터베이스 리뷰</h2><br><img src="/2020/08/06/Django-Models-9%ED%8E%B8-One-to-One/image1.png" class=""><img src="/2020/08/06/Django-Models-9%ED%8E%B8-One-to-One/image2.png" class=""> <img src="/2020/08/06/Django-Models-9%ED%8E%B8-One-to-One/image3.png" class="">  <p><br><br></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/06/Django-Models-9%ED%8E%B8-One-to-One/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 8편 - Many-to-many 예시</title>
      <link>http://djangojeng-e.github.io/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/</link>
      <guid>http://djangojeng-e.github.io/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/</guid>
      <pubDate>Wed, 05 Aug 2020 03:53:46 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Django-Models-ManyToMany-예시&quot;&gt;&lt;a href=&quot;#Django-Models-ManyToMany-예시&quot; class=&quot;headerlink&quot; title=&quot;Django Models - ManyToMany 예시&quot;&gt;&lt;/a&gt;Django Models - ManyToMany 예시&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;예시-개요&quot;&gt;&lt;a href=&quot;#예시-개요&quot; class=&quot;headerlink&quot; title=&quot;예시 개요&quot;&gt;&lt;/a&gt;예시 개요&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;대학교에서 학생들이 듣는 과정들과 학생들에 대한 모델링을 합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;과정은, Course 로 표현하고, 과목들은 아래와 같이 몇개만 정리 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;CourseID&lt;/th&gt;
&lt;th&gt;CourseName&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;Algorithm Design&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Systems Programming&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Object-Oriented Programming&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;

&lt;p&gt;아래 학생들이 재학하고 있다고 가정합니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;StudentID&lt;/th&gt;
&lt;th&gt;Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;
&lt;td&gt;djangojeng-e&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;
&lt;td&gt;Jennifer Lawrence&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;
&lt;td&gt;Will Smith&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;학생들은, 여러개의 과목들을 수강할수 있고. &lt;/p&gt;
&lt;p&gt;한 과목은 여러명의 수강생들이 들을수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;따라서, Students - to - Courses 는 Many-to-Many, 다대다 관계가 성립됩니다 &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;일반적인 Many-to-Many 관계로는, 학생의 수강날짜, 수강종료날짜, 그리고 성적 같은것들을 모두 기록할수 없기 때문에. 중간 모델을 하나 만들어서 관리할수 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Django-Models-ManyToMany-예시"><a href="#Django-Models-ManyToMany-예시" class="headerlink" title="Django Models - ManyToMany 예시"></a>Django Models - ManyToMany 예시</h2><br><h3 id="예시-개요"><a href="#예시-개요" class="headerlink" title="예시 개요"></a>예시 개요</h3><br><p>대학교에서 학생들이 듣는 과정들과 학생들에 대한 모델링을 합니다. </p><p><br>과정은, Course 로 표현하고, 과목들은 아래와 같이 몇개만 정리 합니다. </p><br><table><thead><tr><th>CourseID</th><th>CourseName</th></tr></thead><tbody><tr><td>1</td><td>Algorithm Design</td></tr><tr><td>2</td><td>Systems Programming</td></tr><tr><td>3</td><td>Object-Oriented Programming</td></tr></tbody></table><br><p>아래 학생들이 재학하고 있다고 가정합니다. </p><br><table><thead><tr><th>StudentID</th><th>Name</th></tr></thead><tbody><tr><td>1</td><td>djangojeng-e</td></tr><tr><td>2</td><td>Jennifer Lawrence</td></tr><tr><td>3</td><td>Will Smith</td></tr></tbody></table><br><blockquote><p>학생들은, 여러개의 과목들을 수강할수 있고. </p><p>한 과목은 여러명의 수강생들이 들을수 있습니다. </p><br><p>따라서, Students - to - Courses 는 Many-to-Many, 다대다 관계가 성립됩니다 </p><br><p>일반적인 Many-to-Many 관계로는, 학생의 수강날짜, 수강종료날짜, 그리고 성적 같은것들을 모두 기록할수 없기 때문에. 중간 모델을 하나 만들어서 관리할수 있습니다. </p></blockquote><br><a id="more"></a><h3 id="모델링"><a href="#모델링" class="headerlink" title="모델링"></a>모델링</h3><br><p>Student 와 Course 모델들의 중간 모델인, Enrolment 를 생성하고. </p><p><br>Enrolment 에 수강날짜, 수강종료날짜, 그리고 성적을 관리 할겁니다. </p><br><table><thead><tr><th>Student</th><th>Course</th><th>Enrolment</th></tr></thead><tbody><tr><td>name (CHARFIELD)</td><td>name (CHARFIELD)</td><td>student (ForeignKey, Student)</td></tr><tr><td></td><td>enrolments - Enrolment 라는 중간 모델을 통해서 Student 와 M2M을 성립</td><td>enrolment (ForeignKey, Course)</td></tr><tr><td></td><td>- 중간모델을 성립하기 위해 through 를 사용해야 함</td><td>enrolled_date (수강시작 날짜)</td></tr><tr><td></td><td></td><td>finished_date (수강종료 날짜)</td></tr><tr><td></td><td></td><td>academic_record (성적)</td></tr></tbody></table><br><blockquote><p>이렇게 정리된 사항을, Django 모델로 작성을 해보면, 아래와 같습니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create your models here. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Student(models.Model);</span><br><span class="line">name = models.CharField(max_length=<span class="number">40</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Course</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    enrolments = models.ManyToManyField(Student, through=<span class="string">'Enrolment'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> self.name </span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Enrolment</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    student = models.ForeignKey(Student, on_delete=models.CASCADE)</span><br><span class="line">    course = models.ForeignKey(Course, on_delete=models.CASCADE)</span><br><span class="line">    enrolled_date = models.DateTimeField()</span><br><span class="line">    finished_date = models.DateTimeField(blank=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 학점을 관리 하기 위해서, 등급을 ABCDEF 로 나눕니다 </span></span><br><span class="line">    <span class="comment"># 학점 선택을 위해서, models.TextChoice 로 선택할수 있는 학점을 밑에 넣어줍니다. </span></span><br><span class="line">    </span><br><span class="line">    AcademicType = models.TextChoices(<span class="string">'AcademicType'</span>, <span class="string">'A B C D E F'</span>)</span><br><span class="line">    </span><br><span class="line">    academic_record = models.CharField(blank=<span class="literal">True</span>, choices=AcademicType.choices,    max_length=<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> (self.student + <span class="string">" "</span></span><br><span class="line">               + self.course + <span class="string">" "</span></span><br><span class="line">               + self.enrolled_date + <span class="string">" "</span></span><br><span class="line">               + self.finished_date + <span class="string">" "</span></span><br><span class="line">               + self.academic_record)</span><br></pre></td></tr></table></figure><br><h2 id="객체-생성-연습"><a href="#객체-생성-연습" class="headerlink" title="객체 생성 연습"></a>객체 생성 연습</h2><br><p>아래 테이블에 정리된 데이터 처럼, 객체 생성 연습을 해봅니다. </p><br><table><thead><tr><th>CourseID</th><th>CourseName</th><th>StudentID</th><th>StudentName</th></tr></thead><tbody><tr><td>1</td><td>Algorithm Design</td><td>1</td><td>djangojeng-e</td></tr><tr><td>2</td><td>Systems Programming</td><td>2</td><td>Jennifer Lawrence</td></tr><tr><td>3</td><td>Object-Oriented Programming</td><td>3</td><td>Will Smith</td></tr></tbody></table><br><blockquote><p>shell_plus  를 사용해서, 객체 생성을 해보았습니다. </p><p>Student 와 Course 데이터 생성 </p></blockquote><br><h3 id="Student-와-Course-객체-생성"><a href="#Student-와-Course-객체-생성" class="headerlink" title="Student 와 Course 객체 생성"></a>Student 와 Course 객체 생성</h3><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [1]: djangojeng_e = Student.objects.create(name="장고쟁이")                                                                                                            </span><br><span class="line"></span><br><span class="line">In [2]: jennifer = Student.objects.create(name="Jennifer Lawrence")                                                                                                       </span><br><span class="line"></span><br><span class="line">In [3]: will = Student.objects.create(name="Will Smith")                                                                                                                  </span><br><span class="line"></span><br><span class="line">In [4]: algorith_design = Course.objects.create(name="Algorith Design")                                                                                                   </span><br><span class="line"></span><br><span class="line">In [5]: systems_programming = Course.objects.create(name="Systems Programming")                                                                                           </span><br><span class="line"></span><br><span class="line">In [6]: object_oriented_programming = Course.objects.create(name="Object Oriented Programming")</span><br></pre></td></tr></table></figure><br><blockquote><p>db 에 아래와 같이 저장 됩니다 </p></blockquote><br><img src="/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/image1.png" class=""><br><img src="/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/image2.png" class=""><br><h3 id="Student-객체-둘러보기"><a href="#Student-객체-둘러보기" class="headerlink" title="Student 객체 둘러보기"></a>Student 객체 둘러보기</h3><br><p>shell 에서, 아래와 같이 Student 객체를 생성후, <code>dir(인스턴스)</code>를 쳐보면, 해당 인스턴스의 메서드들이 모두 나열됩니다. 이 메서드중에, 가장 중요한것만 나열해 봅니다.  (<code>__메서드</code> 들은 모두 빼주고 나열함)</p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">djangojeng_e = Student.objects.create(name='장고쟁이')     </span><br><span class="line"></span><br><span class="line">dir(djangojeng_e)                                                                                                                         </span><br><span class="line">['DoesNotExist',</span><br><span class="line"> 'MultipleObjectsReturned',</span><br><span class="line"> 'course_set',</span><br><span class="line"> 'delete',</span><br><span class="line"> 'enrolment_set',</span><br><span class="line"> 'id',</span><br><span class="line"> 'name',</span><br><span class="line"> 'pk',</span><br><span class="line"> 'save',</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> djangojeng_e 인스턴스로 호출가능한것들</span></span><br><span class="line">djangojeng_e.id </span><br><span class="line">djangojeng_e.name </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 해당 인스턴스와 연관된 enrolment 객체에 접근 가능 </span></span><br><span class="line">djangojeng_e.enrolment_set   </span><br><span class="line"><span class="meta">#</span><span class="bash"> 예를들면, </span></span><br><span class="line">djangojeng_e.enrolment_set.all() </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 해당 인스턴스와 연관된 course 객체에 접근 가능 </span></span><br><span class="line">djangojeng_e.course_set </span><br><span class="line"><span class="meta">#</span><span class="bash"> 예를들면, </span></span><br><span class="line">djangojeng_e.course_set.all()</span><br></pre></td></tr></table></figure><br><h3 id="Course-객체-둘러보기"><a href="#Course-객체-둘러보기" class="headerlink" title="Course 객체 둘러보기"></a>Course 객체 둘러보기</h3><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">oop = Course.objects.create(name='객체지향 프로그래밍')</span><br><span class="line">dir(oop)</span><br><span class="line"></span><br><span class="line">['DoesNotExist',</span><br><span class="line"> 'MultipleObjectsReturned',</span><br><span class="line"> 'delete',</span><br><span class="line"> 'enrolment_set',</span><br><span class="line"> 'enrolments',</span><br><span class="line"> 'id',</span><br><span class="line"> 'name',</span><br><span class="line"> 'pk',</span><br><span class="line"> 'save',</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">oop.id </span><br><span class="line">oop.name</span><br><span class="line">oop.pk</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> oop 인스턴스와 연결된 enrolment 객체 조회 가능 </span></span><br><span class="line">oop.enrolment_set.all() </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> enrolments </span></span><br><span class="line">oop.enrolments</span><br></pre></td></tr></table></figure><br><br><br><h3 id="Enrolment-객체-생성"><a href="#Enrolment-객체-생성" class="headerlink" title="Enrolment 객체 생성"></a>Enrolment 객체 생성</h3><br><p>아래 테이블에 정리된대로, Enrolment 객체를 생성해 줍시다. </p><br><table><thead><tr><th>EnrolmentID</th><th>Student</th><th>Course</th><th>enrolled_date</th><th>finished_date</th><th>academic_record</th></tr></thead><tbody><tr><td>1</td><td>djangojeng-e</td><td>Object-Oriented Programming</td><td>2020.04.20</td><td></td><td></td></tr><tr><td>2</td><td>Jennifer Lawrence</td><td>Object-Oriented Programming</td><td>2020.04.20</td><td></td><td></td></tr><tr><td>3</td><td>Will Smith</td><td>Systems Programming</td><td>2019.04.21</td><td>2020.04.21</td><td>A</td></tr></tbody></table><p><br><br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> import datetime 을 먼저 하고 명령어를 실행해줘야 합니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [9]: e1 = Enrolment(student=djangojeng_e, </span><br><span class="line">                       course=oop, </span><br><span class="line">                       enrolled_date=datetime.datetime(2020, 4, 20))                                            </span><br><span class="line">In [10]: e1.save()          </span><br><span class="line"></span><br><span class="line">In [11]: oop.enrolments.all()                                                                                                                     </span><br><span class="line">Out[11]: &lt;QuerySet [&lt;Student: 장고쟁이&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [12]: djangojeng_e.course_set.all()     </span><br><span class="line"><span class="meta">#</span><span class="bash"> 장고쟁이 학생에 관련된 course 를 조회하려면, course_set.all() 하면 됩니다.                                                                                                   <span class="comment"># 참고로, djangojeng_e.enrolment_set.all() 하면, enrol 된 객체가 조회 됩니다.                             </span></span></span><br><span class="line">Out[12]: &lt;QuerySet [&lt;Course: 객체지향 프로그래밍&gt;]&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [15]: e2 = Enrolment.objects.create(student=jennifer, </span><br><span class="line">course=oop, </span><br><span class="line">enrolled_date=datetime.datetime(2020, 4, 20))    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">In [17]: e3 = Enrolment.objects.create(student=will,  </span><br><span class="line">    ...: course=systems_programming,  </span><br><span class="line">    ...: enrolled_date=datetime.datetime(2019, 4, 19), </span><br><span class="line">    ...: finished_date=datetime.datetime(2020, 4, 20),  </span><br><span class="line">    ...: academic_record="A")</span><br></pre></td></tr></table></figure><br><p>데이터베이스 데이터를 저장할때, datetime 관련 에러가 날수가 있는데. 이 점에 대해서는 추후에 해결해봐야 할것 같습니다. </p><br><img src="/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/image3.png" class=""><p><br><br></p><blockquote><p>add(), create() 혹은 set() 을 사용해서, </p><p>관계들을 생성 할수 있습니다. through_defaults 를 통해, 요구되는 필드값을 넣어줄수 있습니다. </p></blockquote><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [18]: john &#x3D; Student.objects.create(name&#x3D;&quot;John Snow&quot;)   </span><br><span class="line"></span><br><span class="line">In [19]: systems_programming.enrolments.add(john, through_defaults&#x3D;&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19)&#125;)</span><br><span class="line"></span><br><span class="line">In [20]: object_oriented_programming.enrolments.create(name&#x3D;&quot;Arya Stark&quot;, through_defaults&#x3D;&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19)&#125;) </span><br><span class="line"></span><br><span class="line">In [21]: algorithm_design.enrolments.set([djangojeng_e, jennifer, will], through_defaults&#x3D;&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19)&#125;) </span><br><span class="line"></span><br><span class="line">In [23]: algorithm_design.enrolments.all()                                                                                                                                </span><br><span class="line">Out[23]: &lt;QuerySet [&lt;Student: 장고쟁이&gt;, &lt;Student: Jennifer Lawrence&gt;, &lt;Student: Will Smith&gt;]&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">john &#x3D; Student.objects.create(name&#x3D;&quot;John Snow&quot;)</span><br><span class="line">systems_programming.enrolments.add(jogn, through_defaults&#x3D;</span><br><span class="line">&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19) &#125;)</span><br><span class="line"></span><br><span class="line">object_oriented_programming.enrolments.create(name&#x3D;&quot;Arya Stark&quot;, through_defaults&#x3D;&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19)&#125;)</span><br><span class="line"></span><br><span class="line">algorithm_design.enrolments.set(</span><br><span class="line">[djangojeng_e, jennifer, will],</span><br><span class="line">through_defaults&#x3D;&#123;&#39;enrolled_date&#39;: datetime.datetime(2020, 4, 19)&#125;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">algorith_design.enrolments.all() </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">Out[23]: &lt;QuerySet [&lt;Student: 장고쟁이&gt;, &lt;Student: Jennifer Lawrence&gt;, &lt;Student: Will Smith&gt;]&gt;</span><br></pre></td></tr></table></figure><br><img src="/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/image4.png" class=""><br><br><blockquote><p>remove() 사용하기 </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> oop 에서 장고쟁이 빼기 </span></span><br><span class="line"></span><br><span class="line">In [25]: object_oriented_programming.enrolments.all()                                                                                                             </span><br><span class="line">Out[25]: &lt;QuerySet [&lt;Student: 장고쟁이&gt;, &lt;Student: Jennifer Lawrence&gt;, &lt;Student: Arya Stark&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [26]: object_oriented_programming.enrolments.remove(djangojeng_e)                                                                                                 </span><br><span class="line">In [27]: object_oriented_programming.enrolments.all()                                                                                                             </span><br><span class="line">Out[27]: &lt;QuerySet [&lt;Student: Jennifer Lawrence&gt;, &lt;Student: Arya Stark&gt;]&gt;</span><br></pre></td></tr></table></figure><p><br><br></p><blockquote><p>many-to-many 로 관계된 모델들의 속성을 사용하여 </p><p>쿼리 생성하기 </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 과목중에서, 수강중인 학생 이름이 will 로 시작하는 과목 찾기 </span></span><br><span class="line"></span><br><span class="line">In [28]: Course.objects.filter(enrolments__name__startswith='Will')           </span><br><span class="line">Out[28]: &lt;QuerySet [&lt;Course: Systems Programming&gt;, &lt;Course: Algorith Design&gt;]&gt;</span><br></pre></td></tr></table></figure><br><blockquote><p>중간 모델을 사용하여, 쿼리 작성하기 </p><p>Student 가 중간 모델을 이용해서, 찾고자 하는 데이터를 조회 </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Student 중에서, 아래 조건들을 충족하는 데이터 검색 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 수강 과목 이름이 <span class="string">"Systems Programming' 인것 </span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 수강 시작 날짜가 2018년 4월 19일 이후인것들을 조회 </span></span><br><span class="line"></span><br><span class="line">In [30]: Student.objects.filter( </span><br><span class="line">    ...:                 course__name='Systems Programming', </span><br><span class="line">    ...:                 enrolment__enrolled_date__gte=datetime.datetime(2018, 4, 19))  </span><br><span class="line"></span><br><span class="line">Out[30]: &lt;QuerySet [&lt;Student: Will Smith&gt;, &lt;Student: John Snow&gt;]&gt;</span><br></pre></td></tr></table></figure><p><br><br></p><blockquote><p>Enrolment 의 정보를 바로 접근 </p><p>Enrolment 모델에 직접 쿼리를 사용해서 데이터를 조회할수 있습니다 </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [32]: will_enrolment = Enrolment.objects.get(course=systems_programming, student=will)                                                                                 </span><br><span class="line">In [33]: will_enrolment.enrolled_date                                                                                                                               </span><br><span class="line">Out[33]: datetime.datetime(2019, 4, 19, 0, 0, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line">In [34]: will_enrolment.finished_date                                                                                                                               </span><br><span class="line">Out[34]: datetime.datetime(2020, 4, 20, 0, 0, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line">In [35]: will_enrolment.academic_record                                                                                                                             </span><br><span class="line">Out[35]: 'A'</span><br></pre></td></tr></table></figure><br><blockquote><p>Student 객체에서부터, enrolment 에 접근하는 many-to-many reverse </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">n [36]: will_enrolment = will.enrolment_set.get(course=systems_programming)                                                                                              </span><br><span class="line"></span><br><span class="line">In [37]: will_enrolment.enrolled_date                                                                                                                                     </span><br><span class="line">Out[37]: datetime.datetime(2019, 4, 19, 0, 0, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line">In [38]: will_enrolment.finished_date                                                                                                                                     </span><br><span class="line">Out[38]: datetime.datetime(2020, 4, 20, 0, 0, tzinfo=&lt;UTC&gt;)</span><br><span class="line"></span><br><span class="line">In [39]: will_enrolment.academic_record                                                                                                                                   </span><br><span class="line">Out[39]: 'A'</span><br></pre></td></tr></table></figure><br><p>reverse, back_ward relationship, forward relationship 에 대한 정리도 필요할것으로 보입니다! </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/05/Django-Models-8%ED%8E%B8-Many-to-many-%EC%98%88%EC%8B%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 8편 - Relationships (Many-to-many) B</title>
      <link>http://djangojeng-e.github.io/2020/08/04/Django-Models-8%ED%8E%B8-Relationships-Many-to-many-B/</link>
      <guid>http://djangojeng-e.github.io/2020/08/04/Django-Models-8%ED%8E%B8-Relationships-Many-to-many-B/</guid>
      <pubDate>Tue, 04 Aug 2020 12:29:24 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Many-to-Many-2편&quot;&gt;&lt;a href=&quot;#Many-to-Many-2편&quot; class=&quot;headerlink&quot; title=&quot;Many-to-Many-2편&quot;&gt;&lt;/a&gt;Many-to-Many-2편&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;Many-To-Many 인스턴스들 생성하기 &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;지난 포스팅에서, through 를 사용하여, 중간 모델을 가진 Many-to-Many 관계에 대한 모델을 작성했고. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;중간모델 Membership 을 사용하는 ManyToManyField 를 설정하였습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이제 몇가지 many-to-many relationship 을 생성할 준비가 되어 있습니다. 중간 모델의 인스턴스들을 생성하면서 Membership 을 사용하는 Many-to-Many 관계를 생성해 봅시다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    name = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;128&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    members = models.ManyToManyField(Person, through=&lt;span class=&quot;string&quot;&gt;&#39;Membership&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# through=&quot;Membership&quot; 을 넣어줌으로, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# Membership 이 Person 과 Group  사이의 중간 모델 역할을 하게 만들수 있음 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;__str__&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(self)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; self.name &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Membership&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 중간 모델에서는, Person과 Group이 ForeignKey 로 등록 되어 있어야 함 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    person = models.ForeignKey(Person, on_delete=models.CASCADE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    group = models.ForeignKey(Group, on_delete=models.CASCADE)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    date_joined = models.DateField() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    invite_reason = models.CharField(max_length=&lt;span class=&quot;number&quot;&gt;64&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;위 모델을 바탕으로, shell 에서 객체를 만들어 봅니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;shell 에 접속하려면,&lt;/p&gt;
&lt;p&gt;python manage.py shell 명령어를 커맨드 라인에서 실행 시키면 됩니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Many-to-Many-2편"><a href="#Many-to-Many-2편" class="headerlink" title="Many-to-Many-2편"></a>Many-to-Many-2편</h2><br><p>Many-To-Many 인스턴스들 생성하기 </p><br><p>지난 포스팅에서, through 를 사용하여, 중간 모델을 가진 Many-to-Many 관계에 대한 모델을 작성했고. </p><br><p>중간모델 Membership 을 사용하는 ManyToManyField 를 설정하였습니다. </p><p><br>이제 몇가지 many-to-many relationship 을 생성할 준비가 되어 있습니다. 중간 모델의 인스턴스들을 생성하면서 Membership 을 사용하는 Many-to-Many 관계를 생성해 봅시다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    members = models.ManyToManyField(Person, through=<span class="string">'Membership'</span>)</span><br><span class="line">    <span class="comment"># through="Membership" 을 넣어줌으로, </span></span><br><span class="line">    <span class="comment"># Membership 이 Person 과 Group  사이의 중간 모델 역할을 하게 만들수 있음 </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Membership</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 중간 모델에서는, Person과 Group이 ForeignKey 로 등록 되어 있어야 함 </span></span><br><span class="line">    person = models.ForeignKey(Person, on_delete=models.CASCADE)</span><br><span class="line">    group = models.ForeignKey(Group, on_delete=models.CASCADE)</span><br><span class="line">    date_joined = models.DateField() </span><br><span class="line">    invite_reason = models.CharField(max_length=<span class="number">64</span>)</span><br></pre></td></tr></table></figure><br><p>위 모델을 바탕으로, shell 에서 객체를 만들어 봅니다. </p><br><blockquote><p>shell 에 접속하려면,</p><p>python manage.py shell 명령어를 커맨드 라인에서 실행 시키면 됩니다.  </p></blockquote><br><a id="more"></a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">ringo = Person.objects.create(name="Ringo Starr")</span><br><span class="line">paul = Person.objects.create(name="Paul McCartney")</span><br><span class="line">beatles = Group.objects.create(name="The Beatles")</span><br><span class="line"></span><br><span class="line">import datetime </span><br><span class="line"></span><br><span class="line">m1 = Membership(person=ringo, group=beatles, date_joined=datetime.datetime(1962,8, 16), invite_reason="Needed a new drummer.")</span><br><span class="line"></span><br><span class="line">m1.save()</span><br><span class="line"></span><br><span class="line">In [7]: beatles.members.all()                                                                                                                                             </span><br><span class="line">Out[7]: &lt;QuerySet [&lt;Person: Ringo Starr&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [8]: ringo.group_set.all()                                                                                                                                             </span><br><span class="line">Out[8]: &lt;QuerySet [&lt;Group: The Beatles&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [9]: m2 = Membership.objects.create(person=paul, group=beatles, date_joined=datetime.datetime(1960, 8, 1), invite_reason="Wanted to form a band.")                     </span><br><span class="line"></span><br><span class="line">In [10]: beatles.members.all()                                                                                                                                            </span><br><span class="line">Out[10]: &lt;QuerySet [&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;]&gt;</span><br></pre></td></tr></table></figure><br><blockquote><p>add(), create() 혹은 set() 을 사용해서 관계들을 생성할수도 있습니다. </p><p>요구되는 필드에 through_defaults 만 명시해주면 됩니다. </p></blockquote><br><p>공식문서에는, 아래와 같은 예제가 있는데. shell 에서 쳐보면, 하나도 제대로 동작하지 않습니다. </p><p><br>공식문서를 무슨생각으로 만들어 놓은건지;;; </p><br><p>john 이라는 객체를 생성하면 잘 동작할것입니다만. 우선, 아래와 같이 연습 내역을 담습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">In [11]: beatles.members.add(john, through_defaults=&#123;'date_joined': date(1960, 8, 1)&#125;)                                                                                    </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-11-47e459b083b9&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 beatles.members.add(john, through_defaults=&#123;<span class="string">'date_joined'</span>: date(1960, 8, 1)&#125;)</span></span><br><span class="line"></span><br><span class="line">NameError: name 'john' is not defined</span><br><span class="line"></span><br><span class="line">In [12]: beatles.members.create(name="George Harrison", through_defaults=&#123;'date_joined': datetime.datetime(1960, 8, 1)&#125; </span><br><span class="line">    ...: )                                                                                                                                                                </span><br><span class="line">Out[12]: &lt;Person: George Harrison&gt;</span><br><span class="line"></span><br><span class="line">In [13]: beatles.members.set([john, paul, ringo, george], through_defaults=&#123;'date_joined': date(1960, 8, 1)&#125;)                                                             </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-13-cad5aee581b9&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 beatles.members.set([john, paul, ringo, george], through_defaults=&#123;<span class="string">'date_joined'</span>: date(1960, 8, 1)&#125;)</span></span><br><span class="line"></span><br><span class="line">NameError: name 'john' is not defined</span><br></pre></td></tr></table></figure><br><br><p>만약 중간 모델에 의해서, through 테이블이 커스텀 정의가 되었는데, (model1, model2 ) 페어에 강제적으로 고유성을 요구하지 않고, 다중의 값을 허용한다면, remove() 를 호출해서 모든 중간 모델 인스턴스들을 제거할수 있습니다.</p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [14]: Membership.objects.create(person=ringo, group=beatles, date_joined=datetime.datetime(1968, 9, 4), invite_reason="You've been gone for a month and we miss you.") </span><br><span class="line">Out[14]: &lt;Membership: Membership object (9)&gt;</span><br><span class="line"></span><br><span class="line">In [15]: beatles.members.all()                                                                                                                                            </span><br><span class="line">Out[15]: &lt;QuerySet [&lt;Person: Ringo Starr&gt;, &lt;Person: Paul McCartney&gt;, &lt;Person: George Harrison&gt;, &lt;Person: Ringo Starr&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [16]: beatles.members.remove(ringo)                                                                                                                                    </span><br><span class="line"></span><br><span class="line">In [17]: beatles.members.all()                                                                                                                                            </span><br><span class="line">Out[17]: &lt;QuerySet [&lt;Person: Paul McCartney&gt;, &lt;Person: George Harrison&gt;]&gt;</span><br></pre></td></tr></table></figure><br><br><blockquote><p>clear() 메서드는, </p><p>하나의 인스턴스를 위한 모든 Many-to-Many 관계들을 없애줍니다.</p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">In [18]: # 비틀즈가 해산                                                                                                                                                  </span><br><span class="line"></span><br><span class="line">In [19]: beatles.members.clear()                                                                                                                                          </span><br><span class="line"></span><br><span class="line">In [20]: # 이 방식은 중간 모델 인스턴스를 삭제해줍니다                                                                                                                    </span><br><span class="line"></span><br><span class="line">In [21]: Membership.objects.all()                                                                                                                                         </span><br><span class="line">Out[21]: &lt;QuerySet []&gt;</span><br></pre></td></tr></table></figure><br><p>한번 many-to-many 관계를 성립하였으면, 쿼리들을 발행할수 있습니다. 보통의 many-to-many 관계와 같이, many-to-many 로 관계된 모델들의 속성들을 사용하여 쿼리를 사용할수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 멤버의 이름이 <span class="string">'Paul'</span> 로 시작하는 그룹 찾기                                                                                                                     </span></span><br><span class="line"></span><br><span class="line">In [39]: Group.objects.filter(members__name__startswith='Paul')                                                                                                           </span><br><span class="line">Out[39]: &lt;QuerySet [&lt;Group: The Beatles&gt;]&gt;</span><br></pre></td></tr></table></figure><br><p>중간 모델을 사용하면서, 중간 모델의 속성을 쿼리 조회 할수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> Person 중에, group 이름이 <span class="string">'The Beatles'</span> 이면서 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Membership에 든 날짜가 1961년 1월 1일 보다 이후인 객체를 조회 </span></span><br><span class="line">In [40]: Person.objects.filter( </span><br><span class="line">    ...:     group__name='The Beatles', </span><br><span class="line">    ...:     membership__date_joined__gt=datetime.datetime(1961, 1, 1))                                                                                                   </span><br><span class="line">Out[40]: &lt;QuerySet [&lt;Person: Ringo Starr&gt;]&gt;</span><br></pre></td></tr></table></figure><br><blockquote><p>membership  의 정보를 바로 접근하고 싶으면, </p><p>바로 Membership 모델에 쿼리를 보내면 됩니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [41]: ringos_membership = Membership.objects.get(group=beatles, person=ringo)                                                                                          </span><br><span class="line"></span><br><span class="line">In [42]: ringos_membership.date_joined                                                                                                                                    </span><br><span class="line">Out[42]: datetime.date(1962, 8, 16)</span><br><span class="line"></span><br><span class="line">In [43]: ringos_membership.invite_reason                                                                                                                                  </span><br><span class="line">Out[43]: 'Needed a new drummer.'</span><br></pre></td></tr></table></figure><br><br><blockquote><p>Person 객체에서 부터 거꾸로 가는  </p><p>Many-To-Many reverse 관계도 존재합니다 </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [44]: ringos_membership = ringo.membership_set.get(group=beatles)                                                                                                      </span><br><span class="line"></span><br><span class="line">In [45]: ringos_membership.date_joined                                                                                                                                    </span><br><span class="line">Out[45]: datetime.date(1962, 8, 16)</span><br><span class="line"></span><br><span class="line">In [46]: ringos_membership.invite_reason                                                                                                                                  </span><br><span class="line">Out[46]: 'Needed a new drummer.'</span><br></pre></td></tr></table></figure><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>공식문서가 예시도 너무 불충분하고,, 뭐라 설명은 하는지는 잘 모르겠습니다. </p><p><br>다음 포스팅에서는, ManyToMany 예제를 좀 들어서, 데이터베이스 검색 및 쿼리문 사용을 좀 연습 해봐야 할것 같습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/04/Django-Models-8%ED%8E%B8-Relationships-Many-to-many-B/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 8편 - Relationships (Many-to-many) A</title>
      <link>http://djangojeng-e.github.io/2020/08/03/Django-Models-8%ED%8E%B8-Relationships-Many-to-many/</link>
      <guid>http://djangojeng-e.github.io/2020/08/03/Django-Models-8%ED%8E%B8-Relationships-Many-to-many/</guid>
      <pubDate>Mon, 03 Aug 2020 09:29:15 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Many-to-many-Relationships&quot;&gt;&lt;a href=&quot;#Many-to-many-Relationships&quot; class=&quot;headerlink&quot; title=&quot;Many-to-many Relationships&quot;&gt;&lt;/a&gt;Many-to-many Relationships&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;many-to-many 관계를 정의하기 위해서는, ManyToManyField 를 사용해 주면 됩니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;다른 Field 타입을 사용하는것과 비슷하게 사용합니다. 클래스 속성에 포함해주는 방식으로 사용하면 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;ManyToManyField 는 위치 인자를 필요로 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;관계된 모델을 &lt;/p&gt;
&lt;p&gt;ManyToManyField 의 위치인자로 넣어주어야 합니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;예를들면, 하나의 피자가 다수의 토핑 객체를 가진다면, &lt;/p&gt;
&lt;p&gt;&lt;br&gt;- 토핑은 다수의 피자에 있을수 있고, 각 피자는 다수의 토핑들을 가질수 있습니다. &lt;/p&gt;
&lt;p&gt;이러한 관계는 아래의 형태로 표현될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.db &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; models &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Topping&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# ... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Pizza&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(models.Model)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# ... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# toppings = models.ManyToManyField(Topping)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Many-to-many-Relationships"><a href="#Many-to-many-Relationships" class="headerlink" title="Many-to-many Relationships"></a>Many-to-many Relationships</h2><br><p>many-to-many 관계를 정의하기 위해서는, ManyToManyField 를 사용해 주면 됩니다. </p><p><br>다른 Field 타입을 사용하는것과 비슷하게 사용합니다. 클래스 속성에 포함해주는 방식으로 사용하면 됩니다. </p><br><p>ManyToManyField 는 위치 인자를 필요로 합니다. </p><br><blockquote><p>관계된 모델을 </p><p>ManyToManyField 의 위치인자로 넣어주어야 합니다 </p></blockquote><br><p>예를들면, 하나의 피자가 다수의 토핑 객체를 가진다면, </p><p><br>- 토핑은 다수의 피자에 있을수 있고, 각 피자는 다수의 토핑들을 가질수 있습니다. </p><p>이러한 관계는 아래의 형태로 표현될수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Topping</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pizza</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    <span class="comment"># toppings = models.ManyToManyField(Topping)</span></span><br></pre></td></tr></table></figure><p><br><a id="more"></a></p><p>ForeignKey 와 마찬가지로, 재귀적인 관계를 생성할수도 있습니다. (객체가 many-to-many 관계를 자기 자신에게 갖는것). 그리고, 아직 정의되지 않은 모델과도 관계를 생성할수도 있습니다. </p><br><blockquote><p>필수는 아니지만, 권장 사항으로는, </p><p>ManyToManyField 필드명은, 관계된 모델 객체의 복수형으로 표현합니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pizza</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    toppings = models.ManyToManyField(Topping)</span><br><span class="line">    <span class="comment"># toppings 라고 복수형의 필드로 사용</span></span><br></pre></td></tr></table></figure><br><p>위 예시에서 Pizza 와 Topping, 두 모델을 예시로 들어봤는데. </p><p>두 모델중 한쪽에만 ManyToManyField 가 사용되어야 합니다. 양쪽 다 사용하지는 않습니다! </p><br><p>보통 ManyToManyField 인스턴스들은, Form 에서 수정될 객체에 생성됩니다. </p><p><br>위 예시에서는, Pizza 안에 toppings 가 들어가 있는데. Pizza 가 여러개의 topping 들을 가지고, 피자에 들어간 토핑을 고치는 개념이 Topping 이 Pizza 를 가지고, 토핑에 들어간 피자를 고치는것보다 자연스럽기 때문에. </p><p><br>Pizza 클래스안에 ManyToManyField 를 넣어준것입니다. </p><br><h2 id="Extra-fields-on-many-to-many-relationships"><a href="#Extra-fields-on-many-to-many-relationships" class="headerlink" title="Extra fields on many-to-many relationships"></a>Extra fields on many-to-many relationships</h2><br><p>many-to-many 관계에는, 추가적인 필드들이 존재합니다. </p><p><br>피자와 토핑같은 피자와 토핑을 섞고 매칭하는 다대다 관계를 다룰때는, 일반적인 ManyToManyField 만으로도 충분히 다룰수 있습니다. </p><br><p>하지만, 때때로, 우리는 두개의 모델 사이의 관계를 관련지어서 데이터들을 생각할 필요가 생깁니다. </p><br><p>예를들어서, 뮤지컬 그룹과 뮤지컬 그룹들에 속해 있는 뮤지션들의 관계를 생각해 봅시다. </p><p><br><br></p><p>한 사람과, 사람이 멤버로 속해 있는 그룹 사이에는 many-to-many 관계를 사용할수 있습니다. 따라서, ManyToManyField 를 사용하여 해당 관계를 표현할수 있습니다. 그렇지만, 멤버쉽에 대한 조금 더 많은 세부 사항들을 수집하고 싶어질지 모릅니다. 예를들면, 아래와 같은 사항들을 따로 기록해 놓고 싶을지 모릅니다. </p><br><ul><li>사람이 어떤 날짜에 그룹에 합류 하였는지  </li><li>언제 떠나갔는지 </li><li>가입 장소는 어디인지 </li><li>기타 정보 </li></ul><br><p>이러한 상황들에서, Django 는 many-to-many 관계를 관리하기 위한 모델을 명시할수 있게 해줍니다.  </p><p><br><code>extra field</code> 를 중간 모델에 넣어둘수 있습니다.  여기서 이야기 하는 중간 모델은, 새로운 모델로써, ManyToManyField 와 연관되어 있고, through 인자를 사용하여, 해당 모델이 중간 모델 역할을 할거라고 명시할수 있습니다. <br></p><br><blockquote><p>조금 더 복잡한 many-to-many 관계를 관리하기 위해, 두 모델 사이에 어떠한 모델을 생성해 주고. </p><p>extra field  들을 중간 모델에 넣어주고 사용할수 있습니다. </p><br><p>중간 모델은 ManyToManyField 와 연관되어 있고, through 인자를 사용하여, </p><p>해당 모델이 중간 모델 역할을 할것이라고 명시할수 있습니다. </p><br><p>코드를 보면서 이해하는것이 더 빠를것입니다. 뮤지션 예시를 보면 아래와 같습니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Group</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">128</span>)</span><br><span class="line">    members = models.ManyToManyField(Person, through=<span class="string">'Membership'</span>)</span><br><span class="line">    <span class="comment"># through = "Membership" 을 넣어줌으로, </span></span><br><span class="line">    <span class="comment"># Membership 이 Person 과 Group 사이의 중간 모델 역할을 하게 만들수 있음 </span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Membership</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 중간 모델에서는, Person 과 Group 이 ForeginKey 로 등록 되어 있어야 함 </span></span><br><span class="line">    person = models.ForeignKey(Person, on_delete=models.CASCADE)</span><br><span class="line">    group = models.ForeignKey(Group, on_delete=models.CASCADE)</span><br><span class="line">    date_joined = models.DateField()</span><br><span class="line">    invite_reason = models.CharField(max_length=<span class="number">64</span>)</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="중간모델의-제약사항"><a href="#중간모델의-제약사항" class="headerlink" title="중간모델의 제약사항"></a>중간모델의 제약사항</h2><p><br><br></p><ul><li>중간 모델은 반드시 하나의 소스모델을 가르키는 foreign Key 를 가져야 합니다 (예시에서는 Group 이 됩니다) </li><li>Group 모델이 바로 소스 모델인데, Group class 안에 <code>through=&#39;Membership&#39;</code> 을 사용해서, Membership 이 Group 모델에 대한 중간 모델이 되게 만들어 주었습니다. </li><li>따라서, 중간 모델인  Membership 에서 1개의 Foreign Key 를 소스 모델인 Group 에 지정해 주었습니다. </li></ul><br><p><strong>유의사항</strong></p><br><p>소스모델이 두개 이상이라면, ManyToManyField.through_fields 를 사용해서, Django 가 데이터베이스 관계를 위해 사용할 foreign key 들을 명시적으로 지정해 줘야 합니다. </p><p>만약 foreign key 가 한개 이상 있고, through_fields 가 지정되어 있지 않으면, 유효성 에러가 발생하게 됩니다. </p><p><br>비슷한 제약 사항이 타겟 모델에 쓰이는 Foreign key 에도 적용됩니다 (예시에서는, Person 모델이 타겟 모델입니다)<br><br></p><p>- 중간 모델을 통해서 many-to-many 관계를 자기자신에 갖는 모델들은, 두개의 Foreign key 들을 같은 모델에 지정하는것이 허용됩니다. 하지만, 이것은 many-to-many 관계의 양쪽 사이드로 취급됩니다. 만일 2개 이상의 foreign key 들이 존재한다면, through_fields 를 사용해서 지정을 해줘야 합니다. 그렇지 않으면, 유효성 에러가 발생 합니다.  </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/03/Django-Models-8%ED%8E%B8-Relationships-Many-to-many/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 7편 - Relationships (Many-to-one)</title>
      <link>http://djangojeng-e.github.io/2020/08/03/Django-Models-7%ED%8E%B8-Relationships-Many-to-one/</link>
      <guid>http://djangojeng-e.github.io/2020/08/03/Django-Models-7%ED%8E%B8-Relationships-Many-to-one/</guid>
      <pubDate>Mon, 03 Aug 2020 07:07:49 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Models-Relationships-Many-to-one&quot;&gt;&lt;a href=&quot;#Models-Relationships-Many-to-one&quot; class=&quot;headerlink&quot; title=&quot;Models - Relationships (Many-to-one)&quot;&gt;&lt;/a&gt;Models - Relationships (Many-to-one)&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;확실히, 관계형 데이터베이스의 장점은, 테이블들끼리 관계를 생성하는데에서 옵니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;관계형 데이터베이스란?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;데이터베이스계의 주류로, &lt;/p&gt;
&lt;p&gt;데이터를 로우 (Row:행, 줄) 과 컬럼 (Column: 열, 칸) 이라는 일종의 표 형태로 저장하고, &lt;/p&gt;
&lt;p&gt;데이터의 종속성은 관계 (Relation) 으로 표현한다. &lt;/p&gt;
&lt;p&gt;한 테이블에 있는 모든 로우는 같은 길이의 컬럼을 가지고 있으며, 이 컬럼의 구조와 데이터의 관계가 테이블 스키마 (Schema) 로 사전 정의 된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;Django 는 가장 공통적인 relational database 3가지를 지원합니다. &lt;/p&gt;
&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;many-to-one (1:M, 1 대 다수)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;many-to-many (M:M, 다수 대 다수)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;one-to-one (1:1, 일 대 일 )&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Models-Relationships-Many-to-one"><a href="#Models-Relationships-Many-to-one" class="headerlink" title="Models - Relationships (Many-to-one)"></a>Models - Relationships (Many-to-one)</h2><br><br><p>확실히, 관계형 데이터베이스의 장점은, 테이블들끼리 관계를 생성하는데에서 옵니다. </p><br><blockquote><p><strong>관계형 데이터베이스란?</strong></p><p>데이터베이스계의 주류로, </p><p>데이터를 로우 (Row:행, 줄) 과 컬럼 (Column: 열, 칸) 이라는 일종의 표 형태로 저장하고, </p><p>데이터의 종속성은 관계 (Relation) 으로 표현한다. </p><p>한 테이블에 있는 모든 로우는 같은 길이의 컬럼을 가지고 있으며, 이 컬럼의 구조와 데이터의 관계가 테이블 스키마 (Schema) 로 사전 정의 된다.</p></blockquote><br><br><p>Django 는 가장 공통적인 relational database 3가지를 지원합니다. </p><br><ul><li><p>many-to-one (1:M, 1 대 다수)</p></li><li><p>many-to-many (M:M, 다수 대 다수)</p></li><li><p>one-to-one (1:1, 일 대 일 )</p></li></ul><a id="more"></a><br><h2 id="Many-to-one-relationships"><a href="#Many-to-one-relationships" class="headerlink" title="Many-to-one relationships"></a>Many-to-one relationships</h2><br><p>다수 : 1 혹은 1: 다수 관계를 정의하기 위해서는, django.db.models.ForeignKey 를 사용합니다. </p><p>모델내에 클래스 속성으로 다른 필드 타입을 사용하는것과 비슷하게 사용할수 있습니다. </p><br><blockquote><p>ForeignKey 는 위치 인자를 필수적으로 필요로 합니다 </p><p>ForeignKey 를 사용하면, 다른 모델과 해당 필드에 관계를 만들어 놓을수 있습니다. </p><p>ForeignKey 를 사용할때에는, 위치인자에 관계를 만들고 싶은 다른 class 이름을 넣어줍니다. </p><br><p>예를들면, </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Manufuacturer</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="comment"># 여러대의 Car 는 1개의 Manufacturuer 를 가집니다 </span></span><br><span class="line">    <span class="comment"># ForeginKey 를 사용해서, 이 관계를 모델링 해줄수 있습니다. </span></span><br><span class="line">    <span class="comment"># 위의 Manufacturer 클래스를 소문자화한 이름으로 필드명을 짓는것이 권장 됩니다. </span></span><br><span class="line">    manufacturer = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><br><ul><li>Car 모델은 하나의 Manufacturer 를 가집니다 </li><li>하나의 Manufacturer (브랜드 공장) 은 여러개의 자동차를 생산합니다 </li><li>하지만, 각 자동차는 하나의 Manufacturer 만 가질수 있습니다 </li><li>다수 : 1 의 데이터베이스 관계를 성립하여, ForeignKey 를 이용해 위의 예시처럼 정의해주었습니다. </li></ul><br><p>또한, 재귀적인 관계를 생성할수도 있습니다 (many-to-one 관계를 스스로 갖는 객체) </p><br><p>필수는 아니지만, 권장되는 사항은, ForeignKey 필드 이름은 해당 모델의 소문자로 표현하는게 좋습니다. </p><p><br>하지만, 당연히 필드명은 우리가 원하는데로 지을수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    company_that_makes_it = models.ForeignKey(Manufacturer, on_delete=models.CASCADE)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 필드명을 company_that_makes_it 으로, 사용자가 사용하기 편하게 지어줬습니다 </span></span><br><span class="line">    <span class="comment"># 하지만, 이 필드명은 Manufacturer 의 소문자 형태인 manufacturer 로 짓는것이 권장됩니다.</span></span><br></pre></td></tr></table></figure><br><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dev_Department</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    team = models.CharField(max_length=<span class="number">40</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dev_Staff</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">40</span>, verbose_name=<span class="string">"직원이름"</span>)</span><br><span class="line">    department = models.ForeignKey(Dev_Department, on_delete=models.CASCADE)</span><br></pre></td></tr></table></figure><br><ul><li>개발 조직에 있는 하나의 팀에는, 여러명의 직원이 소속될수 있습니다 </li><li>Dev_Staff 는, 직원의 이름과 부서 팀을 정의합니다. ForeignKey 를 사용하여, Dev_Department 와 관계를 가지게 정의되었습니다. </li></ul><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/03/Django-Models-7%ED%8E%B8-Relationships-Many-to-one/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 6편 - Fields (verbose field names)</title>
      <link>http://djangojeng-e.github.io/2020/08/02/Django-Models-6%ED%8E%B8-Fields-verbose-field-names/</link>
      <guid>http://djangojeng-e.github.io/2020/08/02/Django-Models-6%ED%8E%B8-Fields-verbose-field-names/</guid>
      <pubDate>Sun, 02 Aug 2020 12:22:43 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Models-Fields-verbose-field-names&quot;&gt;&lt;a href=&quot;#Models-Fields-verbose-field-names&quot; class=&quot;headerlink&quot; title=&quot;Models - Fields (verbose field names)&quot;&gt;&lt;/a&gt;Models - Fields (verbose field names)&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;ForeignKey&lt;/code&gt;, &lt;code&gt;ManyToManyField&lt;/code&gt; 그리고 &lt;code&gt;OneToOneField&lt;/code&gt; 들을 제외한, 각 필드 타입은 선택적으로 첫번째 위치인자로, &lt;code&gt;verbose name&lt;/code&gt; 을 받습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;verbose name&lt;/code&gt; 이 주어지지 않았을때는, Django 는 자동으로 field 의 속성명의 언더스코어를 공백으로 전환하여 verbose name 을 생성합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;verbose name 은 &lt;/p&gt;
&lt;p&gt;사용자가 사용하는 자세한 이름을 의미합니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;verbose name&lt;/code&gt; 을 지정하지 않으면, 어드민에 표시되는 이름이 이상하다는것을 느낄수 있을겁니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Models-Fields-verbose-field-names"><a href="#Models-Fields-verbose-field-names" class="headerlink" title="Models - Fields (verbose field names)"></a>Models - Fields (verbose field names)</h2><br><p><code>ForeignKey</code>, <code>ManyToManyField</code> 그리고 <code>OneToOneField</code> 들을 제외한, 각 필드 타입은 선택적으로 첫번째 위치인자로, <code>verbose name</code> 을 받습니다. </p><br><p><code>verbose name</code> 이 주어지지 않았을때는, Django 는 자동으로 field 의 속성명의 언더스코어를 공백으로 전환하여 verbose name 을 생성합니다. </p><br><blockquote><p>verbose name 은 </p><p>사용자가 사용하는 자세한 이름을 의미합니다 </p></blockquote><br><p><code>verbose name</code> 을 지정하지 않으면, 어드민에 표시되는 이름이 이상하다는것을 느낄수 있을겁니다. </p><br><a id="more"></a><br><blockquote><p>아래 예시에서, verbose name 은 “person’s first name” 입니다 </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first_name = models.CharField(<span class="string">"person's first name"</span>, max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>아래 예시에서는, verbose name 이 “first name” 입니다.</p><p>필드 타입의 첫번째 인자로, verbose name 이 명시되지 않았기 때문에, </p><p>필드명 first_name 에서, 언더스코어를 공백으로 전환하여 verbose name 을 표시합니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">first_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>verbose_name 을 정의한 모델의 예시입니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Members</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">'이름'</span>)</span><br><span class="line">    nick_name = models.CharField(max_length=<span class="number">50</span>, verbose_name=<span class="string">"닉네임"</span>)</span><br><span class="line">    birth_date = models.DateField(verbose_name=<span class="string">"생년월일"</span>, null=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>위 Members 모델에서는, name, nick_name, birth_date 이 각각 한글로 표시된 verbose_name 들을 어드민에 표시할것입니다.  </p><br><h2 id="외래키-모델들"><a href="#외래키-모델들" class="headerlink" title="외래키 모델들"></a>외래키 모델들</h2><br><p>아직 살펴보지는 않았지만, <code>ForeignKey</code>, <code>ManyToManyField</code> 그리고 <code>OneToOneField</code> 들은 첫번째 인자로 모델 클래스가 옵니다. </p><blockquote><p>따라서, <code>verbose_name</code>을 키워드 인자로 사용해줍니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">poll = models.ForeignKey(Poll, on_delete=models.CASCADE, verbose_name=<span class="string">"the related poll"</span>)</span><br><span class="line"><span class="comment"># poll 은 ForeignKey (외래키) 로 Poll 이라는 클래스를 첫번째 인자로 받음 </span></span><br><span class="line"><span class="comment"># verbose_name 은 키워드 인자로 넣어줌 </span></span><br><span class="line"></span><br><span class="line">sites = models.ManyToManyField(Site, verbose_name=<span class="string">"list of sites"</span>)</span><br><span class="line"><span class="comment"># sites 는 ManyToManyField 로 Site 라는 클래스를 첫번째 인자로 받음 </span></span><br><span class="line"><span class="comment"># verbose_name 은 키워드 인자로 넣어줌 </span></span><br><span class="line"></span><br><span class="line">place = models.OneToOneField(Place, on_delete=models.CASCADE, verbose_name=<span class="string">'related place'</span>)</span><br><span class="line"><span class="comment"># place 는 OneToOneField 로 Place 라는 클래스를 첫번째 인자로 받음 </span></span><br><span class="line"><span class="comment"># verbose_name 은 키워드 인자로 넣어줌</span></span><br></pre></td></tr></table></figure><br><p>위의 예시에서는, 단지 <code>ForeignKey</code>, <code>ManyToManyField</code>  그리고 <code>OneToOneField</code> 를 사용할때에, verbose_name 이 어떻게 키워드 인자로 들어가는지에 대한 코딩 스타일만 보여주고 있습니다. </p><br><blockquote><p>관례적으로, </p><p>verbose_name 의 첫번째 글자는 대문자로 써주지 않습니다. </p><p>Django 가 필요할때 자동으로 첫번째 글자를 대문자화 해줍니다. </p></blockquote><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>verbose_name 에 대해서 알아보았습니다.<br>verbose_name 을 사용하면, 어떤것이 달라지는지 완벽한 예시가 있으면 좋았을텐데, <br><br></p><p>현재까지는, verbose_name 을 사용할경우, 해당 필드가 어드민에 표시되는 바가 달라지게 된다는점을 알고 넘어가면 될것 같습니다. </p><br><p>지난 포스팅에서 Runner 모델을 작성했었는데, 아래와 같이, <br></p><p>name 필드에 verbose_name 을 추가해주었습니다. “러너 이름” </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Runner</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    MedalType = models.TextChoices(<span class="string">'MedalType'</span>, <span class="string">'GOLD SILVER BRONZE'</span>)</span><br><span class="line">    name = models.CharField(<span class="string">"러너이름"</span>, max_length=<span class="number">60</span>)</span><br><span class="line">    medal = models.CharField(blank=<span class="literal">True</span>, choices=MedalType.choices, max_length=<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name + <span class="string">" "</span> + self.medal</span><br></pre></td></tr></table></figure><br><p>위와같이 verbose_name 을 모델 필드에 추가하면, 아래처럼 어드민에 “러너이름” 이라고 표시가 됩니다. </p><br><img src="/2020/08/02/Django-Models-6%ED%8E%B8-Fields-verbose-field-names/image1.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/02/Django-Models-6%ED%8E%B8-Fields-verbose-field-names/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 5편 - Fields (Automatic primary key fields)</title>
      <link>http://djangojeng-e.github.io/2020/08/02/Django-Models-5%ED%8E%B8-Fields-Automatic-primary-key-fields/</link>
      <guid>http://djangojeng-e.github.io/2020/08/02/Django-Models-5%ED%8E%B8-Fields-Automatic-primary-key-fields/</guid>
      <pubDate>Sun, 02 Aug 2020 10:22:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Models-Fields-Automatic-primary-key&quot;&gt;&lt;a href=&quot;#Models-Fields-Automatic-primary-key&quot; class=&quot;headerlink&quot; title=&quot;Models - Fields(Automa
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Models-Fields-Automatic-primary-key"><a href="#Models-Fields-Automatic-primary-key" class="headerlink" title="Models - Fields(Automatic primary key)"></a>Models - Fields(Automatic primary key)</h2><br><p>기본값으로, Django 는 각 모델에 다음과 같은 field 를 부여 합니다. </p><p>아래 필드는, 해당 모델에 명시적으로 정의해 놓지 않아도, 자동으로 적용이 되어 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><br><p>이는, 자동으로 증가하는 primary key 입니다. </p><br><p>만약 사용자 정의의 primary key  를 명시하고 싶으면, primary_key 로 사용하고 싶은 필드에, <code>primary_key=True</code> 를 명시해주면 됩니다. </p><br><p>만약, 여러분들이 명시적으로, 어떠한 필드에 <code>primary_key = True</code> 를 설정한것을 보면, django 는 자동으로 id 컬럼을 추가하지 않을것입니다. </p><br><p>각 모델은, 정확히 하나의 필드가 primary_key = True 를 가질것을 요구합니다 (두개 이상의 필드가 primary_key=True  를 가질수는 없다는 이야기 입니다) </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/02/Django-Models-5%ED%8E%B8-Fields-Automatic-primary-key-fields/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 4편 - Fields (Field Options)</title>
      <link>http://djangojeng-e.github.io/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/</link>
      <guid>http://djangojeng-e.github.io/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/</guid>
      <pubDate>Sun, 02 Aug 2020 01:53:03 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Field-Options&quot;&gt;&lt;a href=&quot;#Field-Options&quot; class=&quot;headerlink&quot; title=&quot;Field Options&quot;&gt;&lt;/a&gt;Field Options&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;각각의 필드들은, 해당 필드에 특화된 독립 변수들을 갖습니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;예를들면, &lt;/p&gt;
&lt;p&gt;CharField 와 CharField 의 서브클래스들은, &lt;/p&gt;
&lt;p&gt;max_length 같은, 데이터를 저장하기 위해서 길이를 정의하는 독립된 변수들을 갖게 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;또한, 모든 필드 타입들에 유효한, 공통 독립 변수들도 존재합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;모든 변수들은, 선택적으로 사용할수 있고, reference 문서에 완벽하게 설명이 되어 있지만. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;strong&gt;가장 공통적으로 많이 사용되는것들을 정리하고 넘어갑니다.&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Field-Options"><a href="#Field-Options" class="headerlink" title="Field Options"></a>Field Options</h2><br><p>각각의 필드들은, 해당 필드에 특화된 독립 변수들을 갖습니다. </p><br><blockquote><p>예를들면, </p><p>CharField 와 CharField 의 서브클래스들은, </p><p>max_length 같은, 데이터를 저장하기 위해서 길이를 정의하는 독립된 변수들을 갖게 됩니다. </p></blockquote><br><p>또한, 모든 필드 타입들에 유효한, 공통 독립 변수들도 존재합니다. </p><p><br>모든 변수들은, 선택적으로 사용할수 있고, reference 문서에 완벽하게 설명이 되어 있지만. </p><p><br><strong>가장 공통적으로 많이 사용되는것들을 정리하고 넘어갑니다.</strong> <br></p><br><a id="more"></a> <br><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><br><p><code>null=True</code> 일 경우에, Django 는 빈값을 NULL 로 데이터베이스에 저장합니다. </p><p>기본값은 False 입니다. </p><br><h3 id="blank"><a href="#blank" class="headerlink" title="blank"></a>blank</h3><br><p><code>blank=True</code> 일 경우에, 필드는 비어있는 값이 허용됩니다. 기본값은 False 입니다. </p><br><br><h2 id="NULL-vs-Blank"><a href="#NULL-vs-Blank" class="headerlink" title="NULL vs Blank?"></a>NULL vs Blank?</h2><br><blockquote><p>blank 와 null 은 다르다는것을 숙지해야 합니다. </p><p>null 은 순수하게 데이터베이스 측면에서 생각하는 값이고, </p><p>blank 는 검증 혹은 유효성 검사 측면에서 바라보는것입니다. </p><br><p>null 은 필드의 값이 NULL (정보없음) 으로 저장되는것을 허용하고, </p><p>blank 는 필드가 폼(입력 양식) 에서 비어있는 채로 저장되는것을 허용합니다. </p><br><p>blank = false 이면, 해당 필드가 비어있는채로 저장되는것을 허용하지 않습니다. </p><p>비슷하게도, null=false 일 경우에, 필드의 값이 NULL (정보없음) 으로 저장되는것을 허용하지 않습니다. </p></blockquote><br><h3 id="choices"><a href="#choices" class="headerlink" title="choices"></a>choices</h3><br><p>2개로된 튜플은, 필드의 선택값으로 사용할수 있습니다. </p><p><br>튜플이 주어지면, 기본 양식 폼 위젯은 문자열 필드 대신에 select box 가 될것이고, 튜플에 들어있는 선택들로, 선택이 제한됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">YEAR_IN_SCHOOL_CHOICES = [</span><br><span class="line">    (<span class="string">'FR'</span>, <span class="string">'Freshman'</span>), </span><br><span class="line">    (<span class="string">'SO'</span>, <span class="string">'Sophomore'</span>), </span><br><span class="line">    (<span class="string">'JR'</span>, <span class="string">'Junior'</span>), </span><br><span class="line">    (<span class="string">'SR'</span>, <span class="string">'Senior'</span>), </span><br><span class="line">    (<span class="string">'GR'</span>, <span class="string">'Graduate'</span>),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p>여기서 알아야 할게, </p><br><blockquote><p>Choices 의 순서가 바뀔대마다, 새로운 migration  이 생겨납니다. </p></blockquote><br><blockquote><p>또한, </p><p>튜플의 첫번째 값은, 데이터베이스에 저장되는 값이고, </p><p>튜플의 두번째 값은, 필드의 입력양식 위젯에 표시됩니다. 즉, 이 모델을 가지고 폼 (입력양식) 을 만들었을때, 입력양식 위젯에 표시되는것은, 튜플의 두번째 값이고. </p><p>실제 사용자가 이 입력양식을 통해서 값을 입력하여 데이터베이스에 저장할시에는, 튜플의 첫번째 값으로 저장이 됩니다. </p></blockquote><br><br><p>모델 인스턴스가 주어졌을때, Choices 를 가진 필드의 표시값은, get_shirt_size_display() 메서드를 사용해서 접근할수 있습니다. 아래 예시를 통해서 알아봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    SHIRT_SIZES = (</span><br><span class="line">    (<span class="string">'S'</span>, <span class="string">'Small'</span>),</span><br><span class="line">        (<span class="string">'M'</span>, <span class="string">'Medium'</span>),</span><br><span class="line">        (<span class="string">'L'</span>, <span class="string">'Large'</span>),</span><br><span class="line">    )</span><br><span class="line">    name = models.CharField(max_length=<span class="number">60</span>)</span><br><span class="line">    shirt_size = models.CharField(max_length=<span class="number">1</span>, choices=SHIRT_SIZES)</span><br></pre></td></tr></table></figure><br><h4 id="choices-값의-표시"><a href="#choices-값의-표시" class="headerlink" title="choices 값의 표시"></a>choices 값의 표시</h4><p><br><br></p><ul><li>shirt_size 가 데이터베이스에 저장될때에는, 튜플의 첫번째 값들인, S, M, L 로 저장이 되고 </li><li>shirt_size 가 폼에 표시될때는, Small, Medium, Large 로 표시가 됩니다 </li><li>이렇게 데이터베이스 외의 위치에서 표시되는 값들은, get_shirt_size_display() 로 호출할수 있습니다. </li></ul><br><br><blockquote><p>실제로 model 을 작성해서 테스트 해봅니다 </p><p>shell 에 접속하여, 아래 코드를 입력합니다. </p></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># shell 에 접속 </span></span><br><span class="line">python manage.py shell </span><br><span class="line"></span><br><span class="line"><span class="comment"># shell 접속후에 실습 </span></span><br><span class="line"></span><br><span class="line">In [1]: p = Person(name=<span class="string">"Superman"</span>, shirt_size=<span class="string">"L"</span>)                                   </span><br><span class="line"></span><br><span class="line">In [2]: <span class="comment"># Person의 name이 Superman, 셔츠 사이즈가 L 인 인스턴스 생성                                                                                                      </span></span><br><span class="line"></span><br><span class="line">In [3]: p.save()                                                                                                                                                          </span><br><span class="line"></span><br><span class="line">In [4]: <span class="comment">#  p.save() 를 호출하여, p 를 데이터베이스에 저장                                                                                                                 </span></span><br><span class="line"></span><br><span class="line">In [5]: p.shirt_size                                                                                                                                                      </span><br><span class="line">Out[5]: <span class="string">'L'</span></span><br><span class="line"></span><br><span class="line">In [6]: p.get_shirt_size_display()                                                                                                                                        </span><br><span class="line">Out[6]: <span class="string">'Large'</span></span><br><span class="line"></span><br><span class="line">In [7]: <span class="comment"># p의 shirt_size의 display 값을 표시</span></span><br></pre></td></tr></table></figure><br><p>어드민에서 SHIRT_SIZE 는  Large 라고 표시됩니다.</p><br><img src="/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/image1.png" class=""><br><p>하지만, 정작 DB 에는, L 로 저장되어 있는것을 확인 할수 있습니다. </p><br><img src="/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/image2.png" class=""><br><br><h4 id="간단하게-choices-정의하기"><a href="#간단하게-choices-정의하기" class="headerlink" title="간단하게 choices 정의하기"></a>간단하게 choices 정의하기</h4><br><p>enumeration 클래스들을 사용해서 간단한 방법으로 choices 들을 정의할수 있습니다 </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line">class Runner(models.Model);</span><br><span class="line">MedalType = models.TextChoices(<span class="string">'MedalType'</span>, <span class="string">'GOLD SILVER BRONZE'</span>)</span><br><span class="line"><span class="comment"># 튜플에서 두번째 값인, 'GOLD SILVER BRONZE' 가 선택할수 있는값이 됨 </span></span><br><span class="line">name = models.CharField(max_length=<span class="number">60</span>)</span><br><span class="line">medal = models.CharField(blank=<span class="literal">True</span>, choices=MedalType.choices, max_length=<span class="number">10</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>Runner 를 추가할때, GOLD SILVER BRONZE 셋중 하나를 선택해서 추가할수 있습니다. </p></blockquote><br><img src="/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/image3.png" class=""><p><br><br></p><h3 id="default"><a href="#default" class="headerlink" title="default"></a>default</h3><br><p>필드의 기본값을 지정합니다. 기본값은 특정 값일수도 있고, 호출 가능한 객체일수도 있습니다. </p><p>호출 가능한 객체라면, 새로운 객체가 생성될때마다, 호출이 됩니다.<br></p><p>예) </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line">class Djangojeng_e(models.Model);</span><br><span class="line"><span class="comment"># 이름이 장고쟁이인 객체만 생성할수 있음 </span></span><br><span class="line">name = models.CharFied(max_length=<span class="number">20</span>, default=<span class="string">'장고쟁이'</span>)</span><br></pre></td></tr></table></figure><br><h3 id="help-text"><a href="#help-text" class="headerlink" title="help_text"></a>help_text</h3><br><p>추가적인 help 텍스트가 입력양식 위젯과 함께 표시가 됩니다. 필드가 입력양식에서 사용되지 않더라도. </p><p><br>문서화 할때에 유용합니다 <br><br></p><h3 id="primary-key"><a href="#primary-key" class="headerlink" title="primary_key"></a>primary_key</h3><br><p><code>primary_key = True</code> 일때, 해당 필드는 모델의 primary key 가 됩니다. </p><br><p>모델안에 어떻나 필드도 primary_key = True 라고 명시하지 않은 경우에는, django가 자동적으로 IntegerField 를 추가하여, primary key 를 지니게 합니다. 딸사ㅓ, primary_key = True 라고 어떠한 필드에도 설정해줄 필요는 없습니다. 하지만, 기본 primary-key 동작을 오버라이드 하고 싶으면, 명시적으로 설정해 주면 됩니다.  <br><br></p><p>primary key 필드는 read-only 입니다.<br>만약, 이미 존재하는 객체의 primary key 값을 바꾸고 저장하면, 새로운 객체가 기존의 객체와 같이 생성이 됩니다. 예를들면, <br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    <span class="comment"># 이름이 primary_key 값으로 되어있음</span></span><br></pre></td></tr></table></figure><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. name 이 '사과' 인 객체를 생성 </span></span><br><span class="line">fruit = Fruit.objects.create(name=<span class="string">'사과'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. name 을 '배' 로 바꾸어줌 </span></span><br><span class="line">fruit.name = <span class="string">'배'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 바뀐 name 을 데이터베이스에 저장 </span></span><br><span class="line">fruit.save() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 값 list 를 조회 </span></span><br><span class="line">Fruit.objects.values_list(<span class="string">'nam'</span>, flat=<span class="literal">True</span>)</span><br><span class="line">Out[<span class="number">4</span>]: &lt;QuerySet [<span class="string">'사과'</span>, <span class="string">'배'</span>]&gt;</span><br><span class="line"></span><br><span class="line">In [<span class="number">5</span>]: Fruit.objects.all()                               <span class="comment"># 모든 객체 조회                                                                                                                 </span></span><br><span class="line">Out[<span class="number">5</span>]: &lt;QuerySet [&lt;Fruit: 사과&gt;, &lt;Fruit: 배&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># primary key 값인 name 을 바꾸고 저장했기 때문에, 새로운 객체인 '배' 가 생겨난것을 확인</span></span><br></pre></td></tr></table></figure><br><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><br><p>만일 True 일 경우, 해당 필드는 테이블 전체에서 고유한 값이여야 합니다. </p><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>공통된 필드 옵션에 대한 짧은 설명이었습니다. 더 많은 디테일들은, common model field option reference 문서에서 확인할수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/02/Django-Models-4%ED%8E%B8-Fields-Field-Options/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 3편 - Fields (Field Types)</title>
      <link>http://djangojeng-e.github.io/2020/08/01/Django-Models-3%ED%8E%B8-Fields-Field-Types/</link>
      <guid>http://djangojeng-e.github.io/2020/08/01/Django-Models-3%ED%8E%B8-Fields-Field-Types/</guid>
      <pubDate>Sat, 01 Aug 2020 05:57:06 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Fields&quot;&gt;&lt;a href=&quot;#Fields&quot; class=&quot;headerlink&quot; title=&quot;Fields&quot;&gt;&lt;/a&gt;Fields&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;모델에서 가장 중요하고, 가장 요구되는 사항중 하나는. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;모델에서 정의하는 데이터베이스 필드들의 리스트 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;필드는 클래스 속성으로 정의되어 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;주의사항, &lt;/p&gt;
&lt;p&gt;필드명은, clean, save, delete 와 같은 model API 와 충돌할수 있는 이름으로 지으면 안됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Fields"><a href="#Fields" class="headerlink" title="Fields"></a>Fields</h2><br><p>모델에서 가장 중요하고, 가장 요구되는 사항중 하나는. </p><p><br>모델에서 정의하는 데이터베이스 필드들의 리스트 입니다. </p><br><p>필드는 클래스 속성으로 정의되어 있습니다. </p><br><blockquote><p>주의사항, </p><p>필드명은, clean, save, delete 와 같은 model API 와 충돌할수 있는 이름으로 지으면 안됩니다. </p></blockquote><br><a id="more"></a> <br><p>예시 코드는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Musician</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">50</span>)  <span class="comment"># Musician class 의 속성 </span></span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    instrument = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Album</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    artist = models.ForiengKey(Musician, on_delete=models.CASCADE)</span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    release_date = models.DateField()</span><br><span class="line">    num_stars = models.IntegerField()</span><br></pre></td></tr></table></figure><br><br><h2 id="Field-Types"><a href="#Field-Types" class="headerlink" title="Field Types"></a>Field Types</h2><br><p>각 모델안에 필드들은 적절한 필드클래스의 인스턴스여야 합니다. </p><br><p>Django 는 필드 클래스에 정의되어 있는 type 들을 사용해서 여러가자 사항들을 결정합니다. </p><br><ul><li>INTEGER, VARCHAR, TEXT 같은 컬럼 타입을 결정하여, 데이터베이스가 어떤 종류의 데이터를 저장할건지 결정합니다 </li><li>폼 필드를 출력할때 어떤 기본  HTML 위젯을 사용할지 결정합니다 </li><li>DJango 의 어드민과 자동 생성되는 폼에서 사용할 최소한의 검증사항들을 결정합니다. </li></ul><br><p>Django 는 여러개의 내장 필드 타입들을 지원합니다. 필드타입의 리스트를 확인하고 싶다면,  model field reference 문서를 확인하면 됩니다. Django 의 내장 필드타입으로 충분하지 않다면, 본인 스스로 커스텀 필드를 작성할수도 있습니다. wrting custom model fields 문서를 참조하면 됩니다. </p><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>Django 에서 모델을 작성할때, models.py 안에 작성하는 클래스는 데이터베이스 테이블이 되고. </p><p><br>클래스 안의 속성들을 통해서 필드명과 데이터 타입을 정의할수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/01/Django-Models-3%ED%8E%B8-Fields-Field-Types/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 2편 - using models </title>
      <link>http://djangojeng-e.github.io/2020/07/31/Django-Models-2%ED%8E%B8-using-models/</link>
      <guid>http://djangojeng-e.github.io/2020/07/31/Django-Models-2%ED%8E%B8-using-models/</guid>
      <pubDate>Thu, 30 Jul 2020 22:54:42 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Using-models-모델-사용하기&quot;&gt;&lt;a href=&quot;#Using-models-모델-사용하기&quot; class=&quot;headerlink&quot; title=&quot;Using models (모델 사용하기)&quot;&gt;&lt;/a&gt;Using models (모델 사용하기)&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;앱-등록하기&quot;&gt;&lt;a href=&quot;#앱-등록하기&quot; class=&quot;headerlink&quot; title=&quot;앱 등록하기&quot;&gt;&lt;/a&gt;앱 등록하기&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;모델을 정의 한 후에 우리는, Django 에게 이 모델을 사용할것이라고 얘기해주어야 합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;Django 에게 이 모델을 사용할것이라고 알려주기 위해서는, &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;settings.py 에 있는 INSTALLED_APPS 에 해당 모듈명을 추가해 주어야 합니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;예를들어, &lt;code&gt;python manage.py startapp usemodel&lt;/code&gt; 명령어를 통해, usemodel 이라는 앱을 생성하였다고 가정하면, settings.py 파일에 INSTALLED_APPS 안에, 생성된 모델이 아래와 같이 등록 되어 있어야 합니다.  &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;INSTALLED_APPS = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;#...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;usemodel&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;]&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Using-models-모델-사용하기"><a href="#Using-models-모델-사용하기" class="headerlink" title="Using models (모델 사용하기)"></a>Using models (모델 사용하기)</h2><br><h3 id="앱-등록하기"><a href="#앱-등록하기" class="headerlink" title="앱 등록하기"></a>앱 등록하기</h3><br><p>모델을 정의 한 후에 우리는, Django 에게 이 모델을 사용할것이라고 얘기해주어야 합니다. </p><p><br>Django 에게 이 모델을 사용할것이라고 알려주기 위해서는, </p><br><blockquote><p>settings.py 에 있는 INSTALLED_APPS 에 해당 모듈명을 추가해 주어야 합니다 </p></blockquote><br><p>예를들어, <code>python manage.py startapp usemodel</code> 명령어를 통해, usemodel 이라는 앱을 생성하였다고 가정하면, settings.py 파일에 INSTALLED_APPS 안에, 생성된 모델이 아래와 같이 등록 되어 있어야 합니다.  </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="comment">#...</span></span><br><span class="line">    <span class="string">'usemodel'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><br><a id="more"></a><br><h3 id="makemigrations"><a href="#makemigrations" class="headerlink" title="makemigrations"></a>makemigrations</h3><br><p>INSTALLED_APPS 에 새로운 앱을 추가해 주고, 해당 앱에 대한 모델을 작성해 주었으면, </p><p>데이터베이스에 적용을 해주어야 합니다. 하지만, 적용전에 <code>python manage.py makemigrations</code> 명령어를 통해서, 데이터베이스 적용 전에 migrations 파일을 만들어 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations</span><br></pre></td></tr></table></figure><br><blockquote><p>해당 앱의 모델을 아직 작성하지 않아도, 위의 makemigrations 명령어는 정상으로 실행됩니다. </p><p>왜냐하면, 새로운 모델이 생성되었기 때문입니다. </p><p>이렇게 앱과 모델을 등록한다음에는, 앱의 모델을 변경할때마다, </p><p>makemigrations 와 migrate 명령어를 실행하여, 데이터베이스에 변경사항을 적용 해주어야 합니다. </p></blockquote><br><h3 id="migrate"><a href="#migrate" class="headerlink" title="migrate"></a>migrate</h3><br><p>makemigrations 명령어를 실행 시켜 주었으면, <code>migrate</code> 명령어를 통해서, 데이터 베이스에 실제 적용을 합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><br><br><h2 id="모델을-사용하는-순서"><a href="#모델을-사용하는-순서" class="headerlink" title="모델을 사용하는 순서"></a>모델을 사용하는 순서</h2><br><ol><li>앱생성 </li><li>앱을 settings.py 에 등록 </li><li><code>python manage.py makemigrations</code></li><li><code>python manage.py migrate</code></li></ol>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/31/Django-Models-2%ED%8E%B8-using-models/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 1편 - Quick Example</title>
      <link>http://djangojeng-e.github.io/2020/07/30/Django-Models-1%ED%8E%B8-Quick-Example/</link>
      <guid>http://djangojeng-e.github.io/2020/07/30/Django-Models-1%ED%8E%B8-Quick-Example/</guid>
      <pubDate>Thu, 30 Jul 2020 11:39:34 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Models-Quick-example&quot;&gt;&lt;a href=&quot;#Models-Quick-example&quot; class=&quot;headerlink&quot; title=&quot;Models - Quick example&quot;&gt;&lt;/a&gt;Models - Quick example&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;Django 공식문서에 나와있는, models 에 대한 부분을 둘러봅니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;공식 문서에는 완벽한 번역본이 존재하지 않고, 설명이 너무 불충분해서, 초반에 공부할때에 많은 어려움이 있었습니다. &lt;/p&gt;
&lt;p&gt;물론,, 지금도 쉽지는 않지만.. 어쨋든, Django models 에 대한 포스팅을 시작합니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Models (모델)&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;모델은 당신의 데이터에 대한 정보를 가지고 있고, 당신의 데이터에 대한 정의를 내리는 하나의 소스 입니다.&lt;/p&gt;
&lt;p&gt;모델은 당신에게 필요하고 저장하고자 하는 필드들과 동작들에 대한 정보를 포함하고 있습니다&lt;/p&gt;
&lt;p&gt;각 모델들은, 보통 하나의 데이터 베이스 테이블로 매핑 됩니다.﻿&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Models-Quick-example"><a href="#Models-Quick-example" class="headerlink" title="Models - Quick example"></a>Models - Quick example</h2><br><p>Django 공식문서에 나와있는, models 에 대한 부분을 둘러봅니다. </p><p><br>공식 문서에는 완벽한 번역본이 존재하지 않고, 설명이 너무 불충분해서, 초반에 공부할때에 많은 어려움이 있었습니다. </p><p>물론,, 지금도 쉽지는 않지만.. 어쨋든, Django models 에 대한 포스팅을 시작합니다. </p><br><br><blockquote><p><strong>Models (모델)</strong> </p><p>모델은 당신의 데이터에 대한 정보를 가지고 있고, 당신의 데이터에 대한 정의를 내리는 하나의 소스 입니다.</p><p>모델은 당신에게 필요하고 저장하고자 하는 필드들과 동작들에 대한 정보를 포함하고 있습니다</p><p>각 모델들은, 보통 하나의 데이터 베이스 테이블로 매핑 됩니다.﻿</p></blockquote><br><a id="more"></a><br><h2 id="기본-사항들"><a href="#기본-사항들" class="headerlink" title="기본 사항들"></a>기본 사항들</h2><br><ol><li>각 모델은 Python 클래스 이고, <code>django.db.models.Model</code> 의 서브 클래스 이다 </li><li>각 모델의 속성들은 데이터베이스 필드를 표현 합니다 </li><li>이 모든 정보들을 가지고, Django 는 자동으로 생성된 database-access API 를 제공합니다. </li></ol><br><br><h2 id="빠른-예제"><a href="#빠른-예제" class="headerlink" title="빠른 예제"></a>빠른 예제</h2><br><p>아래 예제는, first_name, last_name 정보를 가지는 Person 모델을 정의 합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Person(models.Model);</span><br><span class="line">first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</span><br></pre></td></tr></table></figure><br><p>first_name 과 last_name 은 모델의 필드들입니다. 각 필드들은, 클래스의 속성들로 표현되어 있습니다. </p><br><p>그리고, 각 속성들은 database 컬럼들과 메칭 됩니다. </p><br><blockquote><p>처음에 공부할때, 데이터베이스의 Column 그리고 Field 에 대해서 잘 몰라서 </p><p>이해가 안갔었는데,  아래 그림을 가져와서 참고 합니다. </p></blockquote><br><img src="/2020/07/30/Django-Models-1%ED%8E%B8-Quick-Example/image1.png" class=""><br><ul><li>위의 모델에서  class Person 이라는 클래스는 데이터베이스 테이블명이 됩니다 </li><li>first_name 은 해당 테이블의 필드명이 되고, 최대 길이는 30자 입니다 </li><li>last_name 은 해당 테이블의 필드명이 되고, 최대 길이는 30자 입니다   </li></ul><br><blockquote><p>위의 Person 모델은 아래와 같은 데이터베이스 테이블을 생성합니다. </p></blockquote><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> myapp_person (</span><br><span class="line">    <span class="string">"id"</span> <span class="built_in">serial</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> PRIMARY <span class="keyword">KEY</span>,</span><br><span class="line">    <span class="string">"first_name"</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="string">"last_name"</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><br><h2 id="기술적인-노트"><a href="#기술적인-노트" class="headerlink" title="기술적인 노트"></a>기술적인 노트</h2><br><ul><li>테이블의 이름은, myapp_person 으로 지정되어 있는데, 이것은 자동적으로 메타데이터에서 따옵니다. 하지만, 이 이름은 오버라이드 될수 있습니다 </li><li>id 필드는 자동으로 추가됩니다. 이 동작 방식도 수정될수는 있습니다 </li><li>이번 예제에서 사용된 CREATE TABLE SQL 구문은, PostgreSQL 구문을 사용한 형식입니다. 하지만, django 는 데이터베이스 백앤드를 당신의 settings.py 파일에 명시되어 있는 데이터베이스에 맞추어 사용합니다. </li></ul>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/30/Django-Models-1%ED%8E%B8-Quick-Example/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 33편 - Docker로 배포 (nginx 와 gunicorn)</title>
      <link>http://djangojeng-e.github.io/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/</link>
      <guid>http://djangojeng-e.github.io/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/</guid>
      <pubDate>Wed, 29 Jul 2020 05:16:23 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Docker로-배포-nginx-gunicorn&quot;&gt;&lt;a href=&quot;#Docker로-배포-nginx-gunicorn&quot; class=&quot;headerlink&quot; title=&quot;Docker로 배포 (nginx, gunicorn)&quot;&gt;&lt;/a&gt;Docker로 배포 (nginx, gunicorn)&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;연습 차원에서, Docker 에 nginx 와 gunicorn 을 적용하여 배포 연습을 진행 해 봅니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이전 포스팅하고는 조금 다른 방식으로 쓰는 예제를 찾아서, 이 프로젝트에 적용해 보려 합니다. 아래 내용대로 진행해보았지만, 배포 결과는 실패했습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이 포스팅에서는, 그냥 배포 시도 과정만을 담고 있습니다. &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Docker로-배포-nginx-gunicorn"><a href="#Docker로-배포-nginx-gunicorn" class="headerlink" title="Docker로 배포 (nginx, gunicorn)"></a>Docker로 배포 (nginx, gunicorn)</h2><br><p>연습 차원에서, Docker 에 nginx 와 gunicorn 을 적용하여 배포 연습을 진행 해 봅니다. </p><p><br>이전 포스팅하고는 조금 다른 방식으로 쓰는 예제를 찾아서, 이 프로젝트에 적용해 보려 합니다. 아래 내용대로 진행해보았지만, 배포 결과는 실패했습니다. </p><p><br>이 포스팅에서는, 그냥 배포 시도 과정만을 담고 있습니다. </p><a id="more"></a><br><h2 id="Docker-Compose-설치하기"><a href="#Docker-Compose-설치하기" class="headerlink" title="Docker Compose 설치하기"></a>Docker Compose 설치하기</h2><br><p>터미널에서 아래 명령어를 실행하여, Docker compose  를 설치해 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo curl -L <span class="string">"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-<span class="variable">$(uname -s)</span>-<span class="variable">$(uname -m)</span>"</span> -o /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><br><p>바이너리에 실행 권한을 적용합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chmod +x /usr/<span class="built_in">local</span>/bin/docker-compose</span><br></pre></td></tr></table></figure><br><p>정상적으로 설치가 되었는지, 아래 버전 확인 명령어를 통해서 확인 합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker-compose --version </span><br><span class="line">docker-compose version 1.25.5, build 8a1c60f6</span><br></pre></td></tr></table></figure><br><br><h2 id="gunicorn-설치하기"><a href="#gunicorn-설치하기" class="headerlink" title="gunicorn 설치하기"></a>gunicorn 설치하기</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gunicorn</span><br></pre></td></tr></table></figure><br><br><h2 id="requirements-txt-파일-업데이트"><a href="#requirements-txt-파일-업데이트" class="headerlink" title="requirements.txt  파일 업데이트"></a>requirements.txt  파일 업데이트</h2><br><p>프로젝트 폴더에서 터미널 명령어를 통해, requirements.txt 파일을 업데이트 해줍니다 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><br><h2 id="settings-py-파일-수정"><a href="#settings-py-파일-수정" class="headerlink" title="settings.py 파일 수정"></a>settings.py 파일 수정</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALLOWED_HOSTS = [<span class="string">'web'</span>]</span><br></pre></td></tr></table></figure><br><h2 id="Dockerfile-재작성"><a href="#Dockerfile-재작성" class="headerlink" title="Dockerfile 재작성"></a>Dockerfile 재작성</h2><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> python:<span class="number">3.8</span>-slim</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /todo </span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /todo </span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> pip install -r /todo/requirements.txt</span></span><br></pre></td></tr></table></figure><br><ol><li><code>FROM python:3.8-slim</code> - 파이썬 3.8-slim 을 베이스 이미지로 사용합니다 </li><li><code>COPY . /todo</code> - 컨테이너 안에 /todo 디렉토리 안으로, 로컬에서의 현재 위치에 있는 모든 파일 및 디렉토리를 복사합니다 </li><li><code>WORKDIR /todo</code> - ~/todo 디렉토리로, 워킹 디렉토리를 변경합니다 </li><li><code>RUN pip install -r /todo/requirements.txt</code> - 프로젝트에 필요한 파이썬 패키지들을 설치합니다. </li></ol><br><h2 id="docker-compose-yml-작성"><a href="#docker-compose-yml-작성" class="headerlink" title="docker-compose.yml 작성"></a>docker-compose.yml 작성</h2><br><p>docker-compose 를 사용하여, Dockerfile 빌드 준비를 합니다. </p><p><br>프로젝트 폴더 내에, docker-compose.yml 파일을 생성해 주고, 아래와 같이 작성해 줍니다. </p><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"><span class="attr">web:</span></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">context:</span> <span class="string">.</span> </span><br><span class="line">  <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> </span><br><span class="line"><span class="attr">command:</span> <span class="string">python</span> <span class="string">manage.py</span> <span class="string">runserver</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8000</span></span><br><span class="line"><span class="attr">volumes:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">.:todo</span></span><br><span class="line"><span class="attr">ports:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"8000:8000"</span></span><br></pre></td></tr></table></figure><br><ol><li>version - docker compose 정의 파일의 버전 </li><li>services - 서비스 정의 </li><li>web - 서비스 명 </li><li>build - 빌드 지정 </li><li>context - Dockerfile 이 있는 디렉토리의 경로 </li><li>dockerfile - 도커파일명 </li><li>command - 컨테이너 안에서 작동하는 명령 지정, 베이스 이미지에 지정되어 있을 경우 덮어씁니다 </li><li>volumes - 컨테이너에 볼륨을 마운트 합니다 </li><li>ports - 컨테이너가 공개하는 포트는 ports 로 지정, <code>&lt;호스트 머신의 포트번호&gt;:&lt;컨테이너의 포트번호&gt;</code><br></li></ol><br><h2 id="docker-compose-명령어로-이미지를-빌드하여-실행"><a href="#docker-compose-명령어로-이미지를-빌드하여-실행" class="headerlink" title="docker-compose 명령어로 이미지를 빌드하여 실행"></a>docker-compose 명령어로 이미지를 빌드하여 실행</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -- build</span><br></pre></td></tr></table></figure><br><p>위 명령어를 실행한뒤에, 터미널에는, Attaching to todolist_web_1 이라고 표시 되는데. 이때, 웹 브라우저에서 django 어플리케이션이 정상적으로 실행 되는지 확인 합니다. </p><br><img src="/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/image1.png" class=""><br><p>우선, django 어플리케이션은 브라우저에서 동작하는것을 확인할수 있습니다. </p><br><img src="/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/image2.png" class=""><p><br><br></p><h2 id="nginx-gunicorn-django"><a href="#nginx-gunicorn-django" class="headerlink" title="nginx, gunicorn, django"></a>nginx, gunicorn, django</h2><br><p>nginx 와  gunicorn 을 사용하여 django 배포 작업을 해줍니다. <br></p><p>위의 docker-compose.yml 파일을 아래와 같이 수정해 줍니다. </p><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80"</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/todo</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/nginx:/etc/nginx.conf.d</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">web</span> </span><br><span class="line">  <span class="attr">web:</span></span><br><span class="line">    <span class="attr">build:</span></span><br><span class="line">      <span class="attr">context:</span> <span class="string">.</span></span><br><span class="line">      <span class="attr">dockerfile:</span> <span class="string">Dockerfile</span> </span><br><span class="line">    <span class="attr">command:</span> <span class="string">gunicorn</span> <span class="string">todolist.wsgi:application</span> <span class="string">==</span> <span class="string">bind</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">:8000</span> </span><br><span class="line">    <span class="attr">volumes:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">.:/todo</span> </span><br><span class="line">    <span class="attr">expose:</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">"8000"</span></span><br></pre></td></tr></table></figure><br><ol><li><p>version - docker compose 정의 파일의 버전 </p></li><li><p>services - 서비스 정의 </p></li><li><p>nginx - 서비스명 </p></li><li><p>image - 도커이미지 (d2hub 에서 최신버전) </p></li><li><p>ports - &lt;호스트 머신 번호&gt;:&lt;컨테이너의 포트 번호&gt; </p></li><li><p>volumes - 컨테이너에 볼륨을 마운트 할때 사용, &lt;호스트의 디렉토리 경로&gt;:&lt;컨테이너의 디렉토리 경로&gt; </p></li><li><p>depends_on</p><ul><li><p>서비스의 의존 관계 정의 </p></li><li><p>nginx 컨테이너 시작전, web 컨테이너 시작 </p></li><li><p>depends_on 으로 컨테이너 시작 순서를 제어 </p></li><li><p>컨테이너 상 어플리케이션이 이용 가능해질때까지 기다리고, 제어 하지 않음 </p></li></ul></li></ol><ol start="8"><li><p>web - 서비스명 </p></li><li><p>build - 빌드지정 </p></li><li><p>context - Dockerfile이 있는 디렉토리의 경로 </p></li><li><p>dockerfile - 도커파일 명 </p></li><li><p>command </p><ul><li><p>컨테이너 안에서 작동하는 명령어 지정 </p></li><li><p>gunicorn 으로 django 서버를 실행 시킴 </p></li></ul></li></ol><ol start="13"><li>volumens - 현재 디렉토리 전부를 컨테이너 /todo 에 마운트 </li><li>ports <ul><li>컨테이너 포트 번호만 지정 </li><li>호스트 머신의 포트는 랜덤한 값으로 설정 </li><li>호스트 머신에서 직접 접근하지 않고 웹서버 기능을 갖고 있는 컨테이너를 경유해서 접근 </li></ul></li></ol><br><h2 id="nginx-conf-파일-생성"><a href="#nginx-conf-파일-생성" class="headerlink" title="nginx.conf 파일 생성"></a>nginx.conf 파일 생성</h2><br><p>todolist/config/nginx/nginx.conf 파일을 생성해 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">upstream web &#123;</span><br><span class="line">  ip_hash;</span><br><span class="line">  server web:8000;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">  location /static/ &#123;</span><br><span class="line">      <span class="built_in">alias</span> /todo/static;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  location / &#123;</span><br><span class="line">      proxy_pass http://web/;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  listen 80;</span><br><span class="line">  server_name localhost;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h2 id="docker-compose-명령어로-이미지-빌드후-실행"><a href="#docker-compose-명령어로-이미지-빌드후-실행" class="headerlink" title="docker-compose 명령어로 이미지 빌드후 실행"></a>docker-compose 명령어로 이미지 빌드후 실행</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up --build</span><br></pre></td></tr></table></figure><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>django 어플리케이션을 배포하는일은 매우 어렵고 비효율적입니다. </p><p>이렇게 복잡하게 할거면, 왜 만들었는지도 의심 스럽네요;;; 위 작업을 다 마쳤지만, 실제 배포랑은 완전 거리가 멀고. 되지도 않았습니다. </p><p>다른 배포 방법을 찾아봅시다! </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/29/TodoList-33%ED%8E%B8-Docker%EB%A1%9C-%EB%B0%B0%ED%8F%AC-nginx-%EC%99%80-gunicorn/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 32편 - .dockerignore 파일</title>
      <link>http://djangojeng-e.github.io/2020/07/28/TodoList-32%ED%8E%B8-dockerignore-%ED%8C%8C%EC%9D%BC/</link>
      <guid>http://djangojeng-e.github.io/2020/07/28/TodoList-32%ED%8E%B8-dockerignore-%ED%8C%8C%EC%9D%BC/</guid>
      <pubDate>Tue, 28 Jul 2020 05:29:32 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;dockerignore-파일&quot;&gt;&lt;a href=&quot;#dockerignore-파일&quot; class=&quot;headerlink&quot; title=&quot;dockerignore 파일&quot;&gt;&lt;/a&gt;dockerignore 파일&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;현재까지 배포를 위해 진행한 스텝입니다 &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;AWS EC2 생성 &lt;/li&gt;
&lt;li&gt;AWS RDS 생성 - PostgreSQL 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 생성 및 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 정적 이미지와 CSS 파일 적용 &lt;/li&gt;
&lt;li&gt;Docker 설치 &lt;/li&gt;
&lt;li&gt;Dockerfile 작성 후 이미지 생성 &lt;/li&gt;
&lt;li&gt;생성된 이미지를 DockerHub 에 Push &lt;/li&gt;
&lt;li&gt;Docker 를 이용하여 EC2 에 배포하기 (.dockerigrnoe파일) &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;p&gt;지난 포스팅까지, Docker 를 이용하여, EC2 에 배포하는것 까지 진행 하였고. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;EC2 에 잘 배포가 되는것까지 확인 하였습니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;하지만, Docker 를 사용하여, &lt;/p&gt;
&lt;p&gt;EC2 에 배포할때에, .dockerignore 파일에 대해서 &lt;/p&gt;
&lt;p&gt;신경 써야 한다는 점을 잊지 말아야 합니다 &lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="dockerignore-파일"><a href="#dockerignore-파일" class="headerlink" title="dockerignore 파일"></a>dockerignore 파일</h2><br><p>현재까지 배포를 위해 진행한 스텝입니다 </p><br><ol><li>AWS EC2 생성 </li><li>AWS RDS 생성 - PostgreSQL 적용 </li><li>AWS S3 생성 및 적용 </li><li>AWS S3 정적 이미지와 CSS 파일 적용 </li><li>Docker 설치 </li><li>Dockerfile 작성 후 이미지 생성 </li><li>생성된 이미지를 DockerHub 에 Push </li><li>Docker 를 이용하여 EC2 에 배포하기 (.dockerigrnoe파일) </li></ol><br><p>지난 포스팅까지, Docker 를 이용하여, EC2 에 배포하는것 까지 진행 하였고. <br></p><p>EC2 에 잘 배포가 되는것까지 확인 하였습니다. </p><br><blockquote><p>하지만, Docker 를 사용하여, </p><p>EC2 에 배포할때에, .dockerignore 파일에 대해서 </p><p>신경 써야 한다는 점을 잊지 말아야 합니다 </p></blockquote><a id="more"></a> <br><h2 id="dockerignore-파일이란"><a href="#dockerignore-파일이란" class="headerlink" title=".dockerignore 파일이란?"></a>.dockerignore 파일이란?</h2><br><br><p><code>.gitignore</code> 파일과 비슷하게, <code>.dockerignore</code> 파일은 하나의 도구로써, <br></p><p>정말로 필요한 Docker 빌드 내용을 정의 하는데에 사용됩니다. </p><br><p>이 파일을 사용함으로써, 어떤 폴더와 파일들이 도커를 빌드할때에 무시되고, 예외처리가 될지 기준을 정합니다<br></p><p>마치, git 에 무언가를 작업하여 올릴때, gitignore 에 올리지 말아야 할 파일과 디렉토리를 정하는것 처럼 말입니다. <br></p><p><code>.dockerignore</code> 파일에 포함된 파일들과 폴더들은, <br>빌드내용에 포함되지 않게 되어서 도커 서버에 업로드가 되지 않을것입니다. </p><br><h2 id="왜-신경을-써야-하나요"><a href="#왜-신경을-써야-하나요" class="headerlink" title="왜 신경을 써야 하나요?"></a>왜 신경을 써야 하나요?</h2><br><p>실제로, 요즘 컴퓨터들은 빠르고, 네트워크도 꽤나 안정적이고 빠른데다가 저장소를 사용하는것도 많이 저렴해 졌습니다. 그렇다면, </p><blockquote><p><code>.dockerignore</code>를 사용하여, 파일들과 폴더들을 업로드 하지 않는 이유가. </p><p>용량때문만은 아닐것입니다.  </p></blockquote><br><p>어째서 .dockerignore 를 사용해야 하는지에 대해서 몇가지 예를 들어 봅니다. </p><br><br><h3 id="도커-이미지-사이즈"><a href="#도커-이미지-사이즈" class="headerlink" title="도커 이미지 사이즈"></a>도커 이미지 사이즈</h3><br><p>요즘 컴퓨터들이 아무리 빠르고, 네트워크도 안정적이고, 저장소가 저렴해졌다고 해도, </p><p><br>도커 이미지의 용량에 대해서 신경쓰지 않아도 된다는 이야기는 아닙니다. 여전히 용량은 중요한 포인트 이고, 어떤 상황에서는, 하나의 도커 이미지를 여러개의 서버에 올려서 사용해야 할때도 있습니다. </p><br><p>이런 상황에서는, 이미지 사이즈와 이미지 생성 시간이 중요해 집니다. </p><br><p>예를들면, 5 MB 짜리 도커 이미지를 100개의 서버에 배포하는것이, 700MB 짜리 도커 이미지를 100개의 서버에 배포하는것보다 훨씬 빠르고 저렴할것입니다. </p><br><p>따라서, .dockerignore 를 사용하여, 용량관리를 해보는것도 나쁘지 않은 생각입니다. </p><br><h3 id="의도하지-않은-비밀값-노출"><a href="#의도하지-않은-비밀값-노출" class="headerlink" title="의도하지 않은 비밀값 노출"></a>의도하지 않은 비밀값 노출</h3><br><p>빌드 내용을 제어하지 않는다면, </p><p><br>의도치 않게 우리의 코드, 커밋 내역 그리고 비밀값들 (키와 인증키 등등) 이 노출 될수 있습니다. </p><br><p><code>ADD .</code> 혹은 <code>COPY .</code> 커맨드를 사용하여 파일들을 도커 이미지 안에 복사를 한다면, 우리는 의도하지 않게 소스 파일들을 포함하고, 모든 깃 내역과, 비밀값들 (.aws, env, 혹은 개인정보 키같은 값들), 캐시, 그리고 기타 파일들을 도커 빌드 내용에 넣어, 결국에 도커 이미지 안에 의도치 않게 넣을수 있습니다. </p><br><p>DockerHub 에 존재하는 도커 이미지중에 여러개의 이미지들은, 어플리케이션 소스 코드, 비밀번호, 키값들 그리고 인증값들을 노출하고 있습니다. <code>.git</code> 폴더를 도커 이미지안에 실수로라도 복사하는것은 특히나 좋지 않습니다. </p><br><p>따라서, <code>.dockerignore</code> 를 사용하여, 이런 비밀값들이나 민감한 정보 관리를 할수 있습니다. </p><p><br><code>.git folder</code>를 <code>.dockerignore</code>  파일에 항상 표시해두는것이 좋습니다. </p><br><h3 id="Cache-무효"><a href="#Cache-무효" class="headerlink" title="Cache 무효"></a>Cache 무효</h3><br><p>어플리케이션의 전체 코드베이스를 이미지에 넣는 방식은 대체로 아래 명령어를 사용하는것이 일반적입니다. </p><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">COPY</span><span class="bash"> . /user/src/app</span></span><br></pre></td></tr></table></figure><br><p>이런 경우에는, 전체 빌드 내용을 이미지에 복사하게 됩니다. </p><p><br>그리고 한가지 더 중요한점은, 각 Dockerfile 명령어는 새로운 레이어를 생성한다는 점입니다. </p><br><p>따라서, 포함된 파일들에 대한 수정 사항들은, <code>COPY . /opt/myapp</code> 레이어와 새로운 이미지 레이어가 다음 빌드에 생성되게 될때, 빌드 캐시를 무효화 합니다 (빌드를 훨씬 더 느리게 한다는 이야기 입니다) </p><br><br><p>만약 우리의 작업 폴더들이 매우 빈번히 업데이트가 되는 파일들을 가지고 있다면, (로그, 테스트 결과, 깃내역, 임시 캐시파일등등), 우리는 이 레이어를 매번 dockr build 를 실행할때마다 생성하게 될것입니다. </p><br><p>따라서, 빌드 내용을 맞게 관리 하지 않는다면, 빌드들은 캐시를 맞는 방법으로 사용할수가 없어서, 매우 느려질겁니다. </p><br><br><h3 id="dockerignore-문법"><a href="#dockerignore-문법" class="headerlink" title=".dockerignore 문법"></a>.dockerignore 문법</h3><br><p>이제 우리는 어째서 도커 빌드 내용을 제어해야만 하고, 이것이 어떻게 이루어지는지 살펴 보았습니다. </p><br><blockquote><p>.dockerignore 파일은, </p><p>깃툴에서 사용되는, .girignore  파일과 비슷합니다. </p></blockquote><br><p>깃헙에서 사용되는 <code>.gitignore</code> 파일들과 비슷하게, 도커 빌드 내용을 생성할때 무시되어야 할 파일들과 폴더들을 특정 패턴을 통해 설정할수 있습니다. </p><br><blockquote><p><code>.dockerignore</code> 파일 문법이, <code>.gitignore</code>  파일과 비슷한 문법이다 하더라도, </p><p>그것들이 똑같지는 않습니다! </p></blockquote><br><p>예시) </p><br><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># .git 과 .cache 폴더를 무시 </span></span><br><span class="line">.git </span><br><span class="line">.cache </span><br><span class="line"></span><br><span class="line"><span class="comment"># ignore all *.class files in all folders, including build root</span></span><br><span class="line"><span class="comment"># 모든 폴더안에 있는 모든, *.class 파일들을 무시   </span></span><br><span class="line">**/*.class </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 모든 마크다운 파일들 (md) 파일들을 무시, </span></span><br><span class="line"><span class="comment"># 모든 README*.md 파일 무시 </span></span><br><span class="line">*.md </span><br><span class="line">IREADME*.md</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="Dockerfile-을-dockerignore-에-포함되어야-하나요"><a href="#Dockerfile-을-dockerignore-에-포함되어야-하나요" class="headerlink" title="Dockerfile 을 .dockerignore 에 포함되어야 하나요?"></a>Dockerfile 을 .dockerignore 에 포함되어야 하나요?</h3><br><p>이 질문에 대한 명확한 답은 존재하지 않습니다. </p><p><br>대부분 개인 취향에 달려 있긴 하지만. <code>.dockerfile</code> 을 <code>Dockerfile</code> 안에 포함하는것이 권장 됩니다<br></p><p>그리고, 그전에, Dockerfile 이 어떠한 민감한 정보도 갖고 있지 않도록 합니다. </p><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p><code>.dockerignore</code> 파일을 도커 이미지들을 생성하는 모든 프로젝트에 사용해야 합니다. </p><p><br><code>.dockerignore</code>는 도커 이미지들을 작고, 빠르고, 안전하게 만들어 줍니다.<br>또한, 로컬 개발에서 도커 캐시를 도와주기도 합니다. </p><br><p>최소한, git 폴더는 .dockerignore 파일에 포함되어야만 합니다. 그리고 아래 프로젝트 특화 추가 파일들도 추가해주어야 합니다. </p><br><ul><li>빌드로그 </li><li>스크립트 / 결과 테스트 </li><li>임시 파일들 </li><li>캐싱 </li><li>로컬 비밀값들 </li><li>docker-compose.yml 같은 로컬 개발 파일들 </li></ul>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/28/TodoList-32%ED%8E%B8-dockerignore-%ED%8C%8C%EC%9D%BC/#disqus_thread</comments>
    </item>
    
    <item>
      <title>TodoList 31편 - Docker를 이용하여 EC2에 배포</title>
      <link>http://djangojeng-e.github.io/2020/07/27/TodoList-31%ED%8E%B8-Docker%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC/</link>
      <guid>http://djangojeng-e.github.io/2020/07/27/TodoList-31%ED%8E%B8-Docker%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC/</guid>
      <pubDate>Mon, 27 Jul 2020 11:06:46 GMT</pubDate>
      <description>
      
        &lt;p&gt;현재까지 배포를 위해 진행한 순서는, &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;AWS EC2 생성 &lt;/li&gt;
&lt;li&gt;AWS RDS 생성 - PostgreSQL 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 생성 및 적용 &lt;/li&gt;
&lt;li&gt;AWS S3 정적 이미지와 CSS파일 적용 &lt;/li&gt;
&lt;li&gt;Docker 설치 &lt;/li&gt;
&lt;li&gt;Dockerfile 작성후 이미지 생성 &lt;/li&gt;
&lt;li&gt;생성된 이미지를 DockerHub 에 Push &lt;/li&gt;
&lt;li&gt;Docker 를 이용하여 EC2 배포하기 &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;지난 포스팅에서, 로컬에서 생성한 Docker 를 실행하여, 서버가 잘 작동하는것을 확인 하였습니다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이제 EC2 에다가, 생성하였던 Docker 를 이용하여, 서버를 실행 시켜 보는 작업을 진행합니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;EC2에 배포를 하려면, &lt;/p&gt;
&lt;p&gt;EC2에 접속하여, EC2 터미널에서 생성한 Docker 를 실행시키면 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p>현재까지 배포를 위해 진행한 순서는, </p><ol><li>AWS EC2 생성 </li><li>AWS RDS 생성 - PostgreSQL 적용 </li><li>AWS S3 생성 및 적용 </li><li>AWS S3 정적 이미지와 CSS파일 적용 </li><li>Docker 설치 </li><li>Dockerfile 작성후 이미지 생성 </li><li>생성된 이미지를 DockerHub 에 Push </li><li>Docker 를 이용하여 EC2 배포하기 </li></ol><br><br><p>지난 포스팅에서, 로컬에서 생성한 Docker 를 실행하여, 서버가 잘 작동하는것을 확인 하였습니다. <br></p><p>이제 EC2 에다가, 생성하였던 Docker 를 이용하여, 서버를 실행 시켜 보는 작업을 진행합니다. </p><br><br><blockquote><p>EC2에 배포를 하려면, </p><p>EC2에 접속하여, EC2 터미널에서 생성한 Docker 를 실행시키면 됩니다. </p></blockquote><br><a id="more"></a> <br><p>정확히 이야기하면, 아래 단계들을 거쳐야 하는데. </p><p><br>이 단계들을 명령어화 하여 진행해 보면 됩니다. </p><br><ol><li>EC2에 접속, 서버 초기 설정을 해줍 </li><li>로컬에서 pip freeze &gt; requirements.txt 를 실행, requirements.txt 를 갱신 </li><li>로컬에서 Dokerfile 을 이용하여, Docker 이미지 빌드 </li><li>로컬에서 Docker image tag 지정 </li><li>로컬에서 DockerHub 로 docker push </li><li>EC2 에서, DockerHub 에  push 된 이미지 pull </li><li>EC2 에서, pull 한 Docker 이미지를 실행하기 </li></ol><br><blockquote><p>이전 포스팅에서 생성한 Docker 이미지는, </p><p>자동으로 python manage.py runserver 를 실행해 주므로. </p><p>Docker 이미지를 실행 시키는것만으로도 runserver 를 실행한 상태로 유지해 줍니다. </p></blockquote><br><h2 id="1-EC2에-접속-서버-초기-설정"><a href="#1-EC2에-접속-서버-초기-설정" class="headerlink" title="1. EC2에 접속, 서버 초기 설정"></a>1. EC2에 접속, 서버 초기 설정</h2><br><p>터미널에서, EC2 에 접속합니다. 접속하여서, 기본 세팅을 해줍니다. <br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/newtodolist.pem ubuntu@52.79.175.188</span><br><span class="line">*** System restart required ***</span><br><span class="line">Last login: Sat May 23 13:06:22 2020 from 49.194.199.4</span><br><span class="line">ubuntu@ip-172-31-35-66:~$ sudo apt update &amp;&amp; sudo DEBIAN_FRONTEND=noninteractive apt dist-upgrade -y &amp;&amp; apt -y autoremove</span><br><span class="line"></span><br><span class="line"><span class="comment"># Docker 도 설치해 줍니다. </span></span><br><span class="line">ubuntu@ip-172-31-35-66:~$ sudo apt -y install docker.io</span><br></pre></td></tr></table></figure><br><h2 id="2-로컬-컴퓨터-터미널에서-requiremnts-txt-갱신"><a href="#2-로컬-컴퓨터-터미널에서-requiremnts-txt-갱신" class="headerlink" title="2. 로컬 컴퓨터 터미널에서 requiremnts.txt 갱신"></a>2. 로컬 컴퓨터 터미널에서 requiremnts.txt 갱신</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">~/mini_projects   master ●  </span><br><span class="line"><span class="string">"<span class="variable">$HOME</span>"</span>/.pyenv/versions/3.8.0/envs/to-do-list/bin/pip freeze &gt; <span class="string">"<span class="variable">$HOME</span>"</span>/mini_projects/todolist/requirements.txt</span><br></pre></td></tr></table></figure><br><h2 id="3-로컬에서-Dockerfile-을-이용-Docker-이미지-빌드"><a href="#3-로컬에서-Dockerfile-을-이용-Docker-이미지-빌드" class="headerlink" title="3. 로컬에서 Dockerfile 을 이용, Docker  이미지 빌드"></a>3. 로컬에서 Dockerfile 을 이용, Docker  이미지 빌드</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t todolist ~/mini_projects/todolist</span><br></pre></td></tr></table></figure><br><p>todolist 라는 이미지를,  ~/mini_projects/todolist 경로에 있는 Dockerfile 을 이용하여 생성. </p><br><h2 id="4-로컬에서-docker-image-tag-지정"><a href="#4-로컬에서-docker-image-tag-지정" class="headerlink" title="4. 로컬에서 docker image tag 지정"></a>4. 로컬에서 docker image tag 지정</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker tag todolist:latest headfat1218/todolist:latest</span><br></pre></td></tr></table></figure><br><p>todolist:latest 를 테그로 지정 </p><br><h2 id="5-로컬에서-DockerHub-로-docker-push"><a href="#5-로컬에서-DockerHub-로-docker-push" class="headerlink" title="5. 로컬에서 DockerHub 로 docker push"></a>5. 로컬에서 DockerHub 로 docker push</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker push headfat1218/todolist:latest</span><br></pre></td></tr></table></figure><br><p>headfat1218/todolist:latest 로 테그된 이미지를 DockerHub 로 푸쉬 <br><br></p><h2 id="6-EC2-에서-DockerHub-에-push-된-이미지-pull"><a href="#6-EC2-에서-DockerHub-에-push-된-이미지-pull" class="headerlink" title="6. EC2 에서, DockerHub 에 push 된 이미지  pull"></a>6. EC2 에서, DockerHub 에 push 된 이미지  pull</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@ip-172-31-35-66:~$ sudo docker pull headfat1218/todolist:latest</span><br></pre></td></tr></table></figure><br><h2 id="7-EC2-에서-Pull-한-이미지를-실행하기"><a href="#7-EC2-에서-Pull-한-이미지를-실행하기" class="headerlink" title="7. EC2 에서, Pull 한 이미지를 실행하기"></a>7. EC2 에서, Pull 한 이미지를 실행하기</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run --rm -it -p 80:8000 --name todolist headfat1218/todolist:latest</span><br></pre></td></tr></table></figure><br><p>이미지를 실행하면, 이미지가 빌드된 대로, </p><br><p><code>python manage.py makemigrations</code>를 알아서 해주고 </p><p><code>python manage.py migrate</code> 도 알아서 해주고,<br></p><br><p><code>python manage.py runserver</code> 도 알아서 해줍니다.<br><br></p><img src="/2020/07/27/TodoList-31%ED%8E%B8-Docker%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC/image1.png" class=""><br><br><blockquote><p>이제, EC2 인스턴스에서 RUNSERVER 를 실행하고 있으니까 </p><p>브라우저에서, 해당 EC2 인스턴스의 퍼블릭 IP 로 접속해 봅니다. </p><p>퍼블릭 IP 로 접속을 하면, 브라우저에서, 현재까지 개발한 Django 프로젝트가 돌아가는것을 확인할수 있을겁니다. </p></blockquote>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/07/27/TodoList-31%ED%8E%B8-Docker%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-EC2%EC%97%90-%EB%B0%B0%ED%8F%AC/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
