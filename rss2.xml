<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Sun, 05 Apr 2020 07:24:34 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>PEP8 Whitespace in Expressions and Statements - PET PEEVES</title>
      <link>http://djangojeng-e.github.io/2020/04/05/PEP8-Whitespace-in-Expressions-and-Statements-PET-PEEVES/</link>
      <guid>http://djangojeng-e.github.io/2020/04/05/PEP8-Whitespace-in-Expressions-and-Statements-PET-PEEVES/</guid>
      <pubDate>Sun, 05 Apr 2020 06:53:57 GMT</pubDate>
      <description>
      
        &lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;수식과-구문안에서-빈공간&quot;&gt;&lt;a href=&quot;#수식과-구문안에서-빈공간&quot; class=&quot;headerlink&quot; title=&quot;수식과 구문안에서 빈공간&quot;&gt;&lt;/a&gt;수식과 구문안에서 빈공간&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;이번토픽은 PEP8에서 다루는 공백에 대한 포스트입니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;포스팅을 시작하기 전에, 프로그래밍언어 안에서 쓰이는 &lt;code&gt;expressions&lt;/code&gt; 이라는 단어와 &lt;code&gt;Statements&lt;/code&gt;에 대한 뜻을 먼저 알고 시작하겠습니다. &lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Expressions-와-Statements&quot;&gt;&lt;a href=&quot;#Expressions-와-Statements&quot; class=&quot;headerlink&quot; title=&quot;Expressions 와 Statements&quot;&gt;&lt;/a&gt;Expressions 와 Statements&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;영어에서는 &lt;code&gt;expressions&lt;/code&gt;은 표현, &lt;code&gt;statements&lt;/code&gt;는 진술서 라는 의미로 쓰이는게 많은데. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;프로그래밍 세계에서 의미하는 바는 조금 다른것 같아. 아래와 같이 요약합니다.&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Expressions&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;수식, 연산식 &lt;/p&gt;
&lt;p&gt;예) 1 + 1 = 0 혹은 a = 3 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Statements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;실행 가능한 (executable) 코드 조각. &lt;/p&gt;
&lt;p&gt;보통 여러개의 expressions 로 이루어져 있습니다. &lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 함수안에 실행 가능한 구문이 Statements 입니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 여러개의 Expressions 로 이루어져 있는걸 확인 할수 있습니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addition&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    a = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    b = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; a + b&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<p><br><br></p><h2 id="수식과-구문안에서-빈공간"><a href="#수식과-구문안에서-빈공간" class="headerlink" title="수식과 구문안에서 빈공간"></a>수식과 구문안에서 빈공간</h2><br><br><p>이번토픽은 PEP8에서 다루는 공백에 대한 포스트입니다. </p><br><br><p>포스팅을 시작하기 전에, 프로그래밍언어 안에서 쓰이는 <code>expressions</code> 이라는 단어와 <code>Statements</code>에 대한 뜻을 먼저 알고 시작하겠습니다. </p><br><h2 id="Expressions-와-Statements"><a href="#Expressions-와-Statements" class="headerlink" title="Expressions 와 Statements"></a>Expressions 와 Statements</h2><br><p>영어에서는 <code>expressions</code>은 표현, <code>statements</code>는 진술서 라는 의미로 쓰이는게 많은데. </p><p><br><br></p><p><strong>프로그래밍 세계에서 의미하는 바는 조금 다른것 같아. 아래와 같이 요약합니다.</strong></p><br><br><blockquote><p><strong>Expressions</strong></p><p>수식, 연산식 </p><p>예) 1 + 1 = 0 혹은 a = 3 </p></blockquote><br><br><blockquote><p><strong>Statements</strong></p><p>실행 가능한 (executable) 코드 조각. </p><p>보통 여러개의 expressions 로 이루어져 있습니다. <br></p></blockquote><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수안에 실행 가능한 구문이 Statements 입니다. </span></span><br><span class="line"><span class="comment"># 여러개의 Expressions 로 이루어져 있는걸 확인 할수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addition</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">1</span> </span><br><span class="line">    b = <span class="number">2</span> </span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><a id="more"></a> <br><br><br><h2 id="PET-PEEVES"><a href="#PET-PEEVES" class="headerlink" title="PET PEEVES"></a>PET PEEVES</h2><br><br><p>PET PEEVES의 뜻도 짚어보고 넘어갑니다. </p><p>PET PEEVES 는 특별히 짜증나게 느끼는것들을 얘기하는데. 예를 들면 아래와 같습니다. </p><br><br><blockquote><p>우리 어머니의 PET PEEVE 는 내가 방청소를 안하는겁니다..<br></p><p>여자친구의 PET PEEVE 는 내가 연락을 잘 안하는겁니다.. <br></p><p>제 PET PEEVE 는 약속시간에 늦는겁니다. </p></blockquote><br><p>어머니를 짜증나게 하는것은 내가 방청소를 안하는것이고, 여자친구가 짜증나 하는거는 내가 연락을 잘 안하는것이고. 저를 짜증나게 하는것은 약속시간을 지키지 않는것입니다. </p><br><br><p>PEP8 에서는 짜증나는것들은 피하면서 코드를 쓰라고, 이번 타이틀을 이렇게 적은것 같습니다 ㅎㅎ </p><br><br><h2 id="과도하거나-적절하지-못한-공백은-피해야-합니다"><a href="#과도하거나-적절하지-못한-공백은-피해야-합니다" class="headerlink" title="과도하거나 적절하지 못한 공백은 피해야 합니다"></a>과도하거나 적절하지 못한 공백은 피해야 합니다</h2><br><br><p>PEP8 에서는 아래 상황들에 대해서 다룹니다. 예를들면서 넘어가겠습니다. </p><br><br><h3 id="소괄호-중괄호-대괄호-바로-안쪽"><a href="#소괄호-중괄호-대괄호-바로-안쪽" class="headerlink" title="소괄호, 중괄호, 대괄호 바로 안쪽"></a>소괄호, 중괄호, 대괄호 바로 안쪽</h3><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">spam(ham[<span class="number">1</span>], &#123;eggs: <span class="number">2</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="comment"># 괄호가 시작하고 바로 띄어쓰기가 나오고, </span></span><br><span class="line"><span class="comment"># 괄호가 닫히기 전에 띄어쓰기가 한번 더 되었습니다</span></span><br><span class="line"><span class="comment"># 너무 과도한 공백 사용의 예 </span></span><br><span class="line"></span><br><span class="line">spam( ham [ <span class="number">1</span> ], &#123; eggs: <span class="number">2</span> &#125; )</span><br></pre></td></tr></table></figure><br><br><h3 id="뒤에-붙는-콤마와-괄호가-닫히는-사이-공간"><a href="#뒤에-붙는-콤마와-괄호가-닫히는-사이-공간" class="headerlink" title="뒤에 붙는 콤마와 괄호가 닫히는 사이 공간"></a>뒤에 붙는 콤마와 괄호가 닫히는 사이 공간</h3><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">foo = (<span class="number">0</span>,)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="comment"># 0 과 닫히는 괄호 사이에 의미없는 띄어쓰기가 있습니다. </span></span><br><span class="line"></span><br><span class="line">bar = (<span class="number">0</span>, )</span><br></pre></td></tr></table></figure><br><br><h3 id="콤마-세미콜론-콜론-바로-전-공간"><a href="#콤마-세미콜론-콜론-바로-전-공간" class="headerlink" title="콤마, 세미콜론, 콜론 바로 전 공간"></a>콤마, 세미콜론, 콜론 바로 전 공간</h3><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span>: <span class="keyword">print</span> x, y; x, y = y, x </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예</span></span><br><span class="line"><span class="comment"># 콜론, 세미콜론, 콤마 전후에 너무 많은 공백이 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x == <span class="number">4</span> : <span class="keyword">print</span> x , y ; x , y = y , x</span><br></pre></td></tr></table></figure><br><br><h3 id="슬라이싱에-사용되는-콜론은-이항-연산자-역할을-합니다"><a href="#슬라이싱에-사용되는-콜론은-이항-연산자-역할을-합니다" class="headerlink" title="슬라이싱에 사용되는 콜론은 이항 연산자 역할을 합니다"></a>슬라이싱에 사용되는 콜론은 이항 연산자 역할을 합니다</h3><br><br><p>논리적 연산자 역할을 하는 콜론이 사용될때 (슬라이싱)에 대한 공백 가이드 라인 입니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">ham[<span class="number">1</span>:<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span>:<span class="number">3</span>], ham[:<span class="number">9</span>:<span class="number">3</span>], ham[<span class="number">1</span>::<span class="number">3</span>], ham[<span class="number">1</span>:<span class="number">9</span>:]</span><br><span class="line">ham[lower:upper], ham[lower:uper:], ham[lower::step]</span><br><span class="line">ham[lower+offset : upper+offset]</span><br><span class="line">ham[: upper_fn(x) : step_fn(x), ham[:: step_fn(x)]]</span><br><span class="line">ham[lower + offset : upper + offset]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 콜론을 사이에 두고 양쪽에 같은 공백이 적용 되어 있지 않습니다. </span></span><br><span class="line"></span><br><span class="line">ham[lower + offset:upper + offset]    <span class="comment"># 수정 예시 ham[lower+offset : upper+offset]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 슬리이싱이라 콜론 사이에 공백을 넣을 필요가 없는 경우 </span></span><br><span class="line"></span><br><span class="line">ham[<span class="number">1</span>: <span class="number">9</span>], ham[<span class="number">1</span> :<span class="number">9</span>], ham[<span class="number">1</span>:<span class="number">9</span> :<span class="number">3</span>] </span><br><span class="line"><span class="comment"># 수정 예시 ham[1:9], ham[1:9:3]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># extended slicing, :: 가 나오는 경우 공백 없이 써줘야 합니다.</span></span><br><span class="line"></span><br><span class="line">ham[lower : : upper]  </span><br><span class="line"><span class="comment"># 수정 예시 ham[lower::upper]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 콜론이 이항 연산자와 같은 역할을 하므로, 공백이 없어야 합니다. </span></span><br><span class="line"></span><br><span class="line">ham[ : upper] </span><br><span class="line"><span class="comment"># 수정 예시 ham[:upper]</span></span><br></pre></td></tr></table></figure><br><br><h3 id="함수를-호출할때-인자가-들어가는-바로-앞자리"><a href="#함수를-호출할때-인자가-들어가는-바로-앞자리" class="headerlink" title="함수를 호출할때 인자가 들어가는 바로 앞자리"></a>함수를 호출할때 인자가 들어가는 바로 앞자리</h3><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">spam(<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line">spam (<span class="number">1</span>)</span><br></pre></td></tr></table></figure><br><br><h3 id="인덱스와-슬라이싱을-하는-괄호-바로-앞자리"><a href="#인덱스와-슬라이싱을-하는-괄호-바로-앞자리" class="headerlink" title="인덱스와 슬라이싱을 하는 괄호 바로 앞자리"></a>인덱스와 슬라이싱을 하는 괄호 바로 앞자리</h3><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line">dct[<span class="string">'key'</span>] = <span class="number">1</span>st[index]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line">dct [<span class="string">'key'</span>] = <span class="number">1</span>st [index]</span><br></pre></td></tr></table></figure><br><br><h3 id="변수-할당시-다른줄과-줄을-맞추기-위한-공백"><a href="#변수-할당시-다른줄과-줄을-맞추기-위한-공백" class="headerlink" title="변수 할당시 다른줄과 줄을 맞추기 위한 공백"></a>변수 할당시 다른줄과 줄을 맞추기 위한 공백</h3><br><p>변수를 할당하거나 선언할때, 연산자 주변에 다른 줄에 있는 연산기호와 줄을 맞추기 위해서 </p><p>공백을 너무 많이 주면 안됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1</span> </span><br><span class="line">y = <span class="number">2</span> </span><br><span class="line">long_variable = <span class="number">3</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"></span><br><span class="line">x   = <span class="number">1</span> </span><br><span class="line">y  = <span class="number">2</span> </span><br><span class="line">long_variable = <span class="number">3</span></span><br></pre></td></tr></table></figure><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><p>너무 과도하거나 불필요하거나 적절하지 못한 공백의 사용은, 코드의 가독성을 떨어트리는것 같습니다. </p><br><p>적절한 곳에 공백을 두어서 코드의 가독성을 높이고. </p><br><p>논리적으로나 시각적으로나 더 간결한 코드를 작성하면 좋겠습니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/05/PEP8-Whitespace-in-Expressions-and-Statements-PET-PEEVES/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Code Layout - String Quotes</title>
      <link>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-String-Quotes/</link>
      <guid>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-String-Quotes/</guid>
      <pubDate>Sun, 05 Apr 2020 05:18:02 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;String-Quotes-문자열-따옴표&quot;&gt;&lt;a href=&quot;#String-Quotes-문자열-따옴표&quot; class=&quot;headerlink&quot; title=&quot;String Quotes (문자열 따옴표)&quot;&gt;&lt;/a&gt;String Quotes (문자열 따옴
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="String-Quotes-문자열-따옴표"><a href="#String-Quotes-문자열-따옴표" class="headerlink" title="String Quotes (문자열 따옴표)"></a>String Quotes (문자열 따옴표)</h1><br><br><blockquote><p>파이썬에서는, </p><p>문자열을 사용할때 작은따옴표와 큰따옴표는 똑같습니다. </p></blockquote><br><p>PEP8 에서는, 따옴표의 사용에 대한 어떠한 권장 사항이 없습니다. </p><p><br>단지 하나의 룰을 정하고, 그것을 일관되게 사용하길 바랍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">"This is string"</span> <span class="comment"># 큰 따옴표를 사용한 경우 </span></span><br><span class="line">string = <span class="string">'This is string'</span><span class="comment"># 작은 따옴표를 사용한 경우 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 두가지 방식은 같음</span></span><br></pre></td></tr></table></figure><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..<br></h2><br><p>저는 보통 작은 따옴표 <code>&#39;</code>를 사용합니다.. <code>shift</code>키를 안눌러도 되서 그런가 봅니다. </p><br><p>여러분들은 어떠신가요? <br></p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-String-Quotes/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Code Layout - Module Level Dunder Names</title>
      <link>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Module-Level-Dunder-Names/</link>
      <guid>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Module-Level-Dunder-Names/</guid>
      <pubDate>Sun, 05 Apr 2020 05:05:38 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Module-내에-Dunder-Names&quot;&gt;&lt;a href=&quot;#Module-내에-Dunder-Names&quot; class=&quot;headerlink&quot; title=&quot;Module 내에 Dunder Names&quot;&gt;&lt;/a&gt;Module 내에 Dunder Names&lt;/h1&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;&lt;strong&gt;모듈 레벨에서 Dunder Names&lt;/strong&gt;&lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;모듈 레벨에서 &lt;code&gt;__all__&lt;/code&gt;, &lt;code&gt;__author__&lt;/code&gt;, &lt;code&gt;__version__&lt;/code&gt; 같은 “dunders” 는 모듈 docstring 뒤에 그리고 &lt;code&gt;__future__&lt;/code&gt;를 제외한 모든 import 구문 앞에 붙입니다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;dunders &lt;/p&gt;
&lt;p&gt;&lt;br&gt;언더스코어 _ 두개가 붙는 메소드로 &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Double UNDERscore&lt;/strong&gt; Method 를 줄여서 &lt;/p&gt;
&lt;p&gt;Dunder 메소드라고 부릅니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Module-내에-Dunder-Names"><a href="#Module-내에-Dunder-Names" class="headerlink" title="Module 내에 Dunder Names"></a>Module 내에 Dunder Names</h1><br><br><p><strong>모듈 레벨에서 Dunder Names</strong><br></p><br><br><p>모듈 레벨에서 <code>__all__</code>, <code>__author__</code>, <code>__version__</code> 같은 “dunders” 는 모듈 docstring 뒤에 그리고 <code>__future__</code>를 제외한 모든 import 구문 앞에 붙입니다. <br></p><br><br><blockquote><p>dunders </p><p><br>언더스코어 _ 두개가 붙는 메소드로 </p><p><strong>Double UNDERscore</strong> Method 를 줄여서 </p><p>Dunder 메소드라고 부릅니다. </p></blockquote><br><p><br><a id="more"></a></p><p>파이썬에서는, 아래 사항들을 의무화 합니다<br></p><br><blockquote><p><code>__future__</code> imports 는 docstring 을 제외한 어떤 코드보다 앞에 나와야 합니다.<br></p></blockquote><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""This is the example module. </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">This module does stuff </span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> barry_as_FLUFL<span class="comment"># __future__ imports 가 docstring 다음에 위치합니다.</span></span><br><span class="line"></span><br><span class="line">__all__ = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">__version__ = <span class="string">'0.1'</span></span><br><span class="line">__author__ = <span class="string">'Cardinal Biggles'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># __future__를 제외한 Dunders 는 다른 일반 imports 구문 앞에 나옵니다.</span></span><br></pre></td></tr></table></figure><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>__ 가 붙는 imports 구문에 대한 순서를 알아보았습니다.<br></p><br><p>Docstring 이 우선으로 오고, </p><p><code>__future__</code>가 두번째로 오고<br></p><p><code>__future__</code>를 제외한 기타 다른 Dunders (e.g.<code>__all__, __version__, __author__ 등등</code>) 는 세번째로 옵니다. </p><p>그리고, 나머지 보통 라이브러리 imports (e.g. import os, import sys) 가 그 뒤에 온다고 정리하면 될것 같습니다. </p><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Module-Level-Dunder-Names/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Code Layout - Imports</title>
      <link>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Imports/</link>
      <guid>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Imports/</guid>
      <pubDate>Sun, 05 Apr 2020 04:44:34 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;PEP8-Code-Layout-Imports-가져오기&quot;&gt;&lt;a href=&quot;#PEP8-Code-Layout-Imports-가져오기&quot; class=&quot;headerlink&quot; title=&quot;PEP8 Code Layout - Imports (가져오기)&quot;&gt;&lt;/a&gt;PEP8 Code Layout - Imports (가져오기)&lt;/h1&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;PEP8 코드 레이아웃, &lt;code&gt;imports&lt;/code&gt;편 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;imports&lt;/code&gt; 는 해당 파일에 다른 함수나 모듈을 불러올때 사용하는 명령어 입니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;표준 라이브러리 기능이나, 다른 모듈에 있는 함수, 클래스 혹은 메써드들을 가져올때 사용합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;PEP8에 따르면, Imports 는 보통 별도의 줄로 되어 있어야 합니다. &lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 좋은예 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; os &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 나쁜예 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sys, os&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;br&gt;

&lt;p&gt;하지만, 아래의 경우도 괜찮습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 좋은예&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; subprocess &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Popen, PIPE&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="PEP8-Code-Layout-Imports-가져오기"><a href="#PEP8-Code-Layout-Imports-가져오기" class="headerlink" title="PEP8 Code Layout - Imports (가져오기)"></a>PEP8 Code Layout - Imports (가져오기)</h1><br><br><p>PEP8 코드 레이아웃, <code>imports</code>편 입니다. </p><br><p><code>imports</code> 는 해당 파일에 다른 함수나 모듈을 불러올때 사용하는 명령어 입니다. </p><p><br>표준 라이브러리 기능이나, 다른 모듈에 있는 함수, 클래스 혹은 메써드들을 가져올때 사용합니다. </p><br><blockquote><p>PEP8에 따르면, Imports 는 보통 별도의 줄로 되어 있어야 합니다. <br></p></blockquote><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예 </span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"><span class="keyword">import</span> sys </span><br><span class="line"></span><br><span class="line"><span class="comment"># 나쁜예 </span></span><br><span class="line"><span class="keyword">import</span> sys, os</span><br></pre></td></tr></table></figure><br><p>하지만, 아래의 경우도 괜찮습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예</span></span><br><span class="line"><span class="keyword">from</span> subprocess <span class="keyword">import</span> Popen, PIPE</span><br></pre></td></tr></table></figure><br><a id="more"></a><blockquote><br><p>가져오기는 언제나 파일의 맨 위에 위치해야 하고, <br></p><p>모듈 주석이나 docstring 바로 뒤에 와야 합니다. <br></p><p>그리고 모듈 글로벌값들과 상수들 전에 와야 합니다. <br></p><br></blockquote><br><p><strong>가져오기는 아래 순서의 그룹으로 나뉩니다</strong><br></p><br><ol><li>스탠다드 라이브러리 imports</li><li>연관된 3자 모듈 / 라이브러리 imports</li><li>로컬 어플리케이션 / 라이브러리 imports<br></li></ol><p><br><br></p><p>이 그룹들 사이에는 빈줄을 넣어줘서 가져옵니다<br></p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 파이썬 스탠다드 라이브러리 </span></span><br><span class="line"><span class="keyword">import</span> os </span><br><span class="line"></span><br><span class="line"><span class="comment"># 파이썬 3자 모듈/라이브러리 </span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask </span><br><span class="line"><span class="keyword">from</span> flask_restful <span class="keyword">import</span> Api </span><br><span class="line"></span><br><span class="line"><span class="comment"># 로컬 어플리케이션 </span></span><br><span class="line"><span class="keyword">from</span> local_module <span class="keyword">import</span> local_class </span><br><span class="line"><span class="keyword">from</span> local_package <span class="keyword">import</span> local_function</span><br></pre></td></tr></table></figure><br><br><p>추천되는 import 방식은, 절대값의 imports  입니다.<br></p><br><p>절대 경로로 가져오면, </p><p>a) 코드에서 가독성이 높아집니다, b) 만약 import system 이 잘못 설정이 되어 있더라도 적어도 에러 메시지가 더 좋게 표시됩니다. </p><br><br><p><strong>명시적인 상대경로로 import 를 하는것도 허용됩니다.</strong><br></p><p>특히, 절대 경로로 import 하는것이 불필요한 복잡한 패키지 레이아웃에서는 </p><p>명시적인 상대경로로 import 를 해도 됩니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 절대값 import </span></span><br><span class="line"><span class="keyword">import</span> mypkg.sibling </span><br><span class="line"><span class="keyword">from</span> mypkg <span class="keyword">import</span> sibling </span><br><span class="line"><span class="keyword">from</span> mypkg.sibling <span class="keyword">import</span> example </span><br><span class="line"></span><br><span class="line"><span class="comment"># 명시적인 상대 import </span></span><br><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> sibling </span><br><span class="line"><span class="keyword">from</span> .sibling <span class="keyword">import</span> example</span><br></pre></td></tr></table></figure><br><br><p>스탠다드 라이브러리 코드는 복잡한 패키지 레이아웃을 피해야 합니다. </p><p><br>언제나 절대 경로의 import 를 하는것이 좋고, 명시적이지 않는 상대 import 는 절대 사용되면 안됩니다. </p><br><p><br><strong>클래스를 포함하고 있는 모듈에서 클래스를 가져올땐, 보통 클래스명을 써줍니다</strong><br></p><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> myclass <span class="keyword">import</span> MyClass </span><br><span class="line"><span class="keyword">from</span> foo.bar.yourclass <span class="keyword">import</span> YourClass </span><br><span class="line"></span><br><span class="line"><span class="comment"># 만약 클래스명이 로컬 이름과 충돌한다면, 명시적으로 스펠링을 해줍니다. </span></span><br><span class="line"><span class="keyword">import</span> myclass </span><br><span class="line"><span class="keyword">import</span> foo.bar.yourclass </span><br><span class="line"></span><br><span class="line"><span class="comment"># 그리고, 아래를 사용합니다 </span></span><br><span class="line">myclass.MyClass </span><br><span class="line">foo.bar.yourclass.Yourclass</span><br></pre></td></tr></table></figure><p><br><br></p><blockquote><p>Whildcard 와일드카드 가져오기를 사용하는것은 피해야 합니다. </p><p><code>from &lt;module&gt; import *</code><br></p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Wildcard Imports 예시, * 은 모듈에 포함된 모든것을 의미 </span></span><br><span class="line"><span class="keyword">from</span> Flask <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><br><br><p><code>*</code>를 사용하므로써, 모듈에 포함된 모든 클래스와 함수 그리고 메써드들을 불러옵니다. </p><p>이럴경우, 어떤 이름들이 네임공간에 있는지 헷갈리게 되고, 자동화툴이나 에디터가 헷갈릴수 있습니다. <br></p><br><p>와일드카드 가져오기는 보통 내부 인터페이스를 퍼블릭 API  로 재발행 할때 사용합니다. <br></p><br><p>이 때를 제외하고는, 기본적으로 사용을 피해야 합니다. </p><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br><br></p><p>클래스를 포함하고 있는 클래스 모듈을 가져올때 쓰는 스펠링이 이해가 잘 가지 않습니다. <br></p><p>이 부분은 조금 더 시간을 들여서 더 많은 코드를 접해본다음 이해가 갈것 같습니다. <br></p><br><p>이해를 마친뒤에 업데이트 할 예정입니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Imports/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Code Layout - Source File Encoding</title>
      <link>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Source-File-Encoding/</link>
      <guid>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Source-File-Encoding/</guid>
      <pubDate>Sat, 04 Apr 2020 16:43:05 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Source-File-Encoding-소스파일-인코딩&quot;&gt;&lt;a href=&quot;#Source-File-Encoding-소스파일-인코딩&quot; class=&quot;headerlink&quot; title=&quot;Source File Encoding (소스파일 인코딩)&quot;&gt;&lt;/a&gt;Source File Encoding (소스파일 인코딩)&lt;/h1&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;이번 토픽은 소스파일 인코딩 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;파이썬 배포에 사용되는 코드는 항상 UTF-8 을 사용해야 합니다. &lt;/p&gt;
&lt;p&gt;파이썬2 에서는 ASCII &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;a href=&quot;https://namu.wiki/w/UTF-8&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://namu.wiki/w/UTF-8&lt;/a&gt;&lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;UTF-8 은 가장 많이 사용되는 가변길이 유니코드 인코딩이다.&lt;/p&gt;
&lt;p&gt;GO 언어를 만든 켄 톰슨과 롭 파이크가 만들었다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;[&lt;a href=&quot;https://namu.wiki/w/%EC%95%84%EC%8A%A4%ED%82%A4%20%EC%BD%94%EB%93%9C?from=ASCII]&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://namu.wiki/w/%EC%95%84%EC%8A%A4%ED%82%A4%20%EC%BD%94%EB%93%9C?from=ASCII]&lt;/a&gt;(&lt;a href=&quot;https://namu.wiki/w/아스키&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://namu.wiki/w/아스키&lt;/a&gt; 코드?from=ASCII)&lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;ASCII 코드는 미국 ANSI 에서 표준화한 정보 교환용 7비트 부호체계 &lt;/p&gt;
&lt;p&gt;2 바이트 이상의 코드를 표현할수 없기 때문에. &lt;/p&gt;
&lt;p&gt;국제 표준에서는 유니코드로 넘어감.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;PEP8에 따르면, 파이썬2에서 ASCII 를 사용하는 파일들이나 혹은 파이썬3에서 UTF-8을 사용하는 파일들 모두 &lt;/p&gt;
&lt;p&gt;인코딩 선언이 되어 있지 않아야 합니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Source-File-Encoding-소스파일-인코딩"><a href="#Source-File-Encoding-소스파일-인코딩" class="headerlink" title="Source File Encoding (소스파일 인코딩)"></a>Source File Encoding (소스파일 인코딩)</h1><br><br><p>이번 토픽은 소스파일 인코딩 입니다. </p><br><br><p>파이썬 배포에 사용되는 코드는 항상 UTF-8 을 사용해야 합니다. </p><p>파이썬2 에서는 ASCII </p><br><p><a href="https://namu.wiki/w/UTF-8" target="_blank" rel="noopener">https://namu.wiki/w/UTF-8</a></p><br><blockquote><p>UTF-8 은 가장 많이 사용되는 가변길이 유니코드 인코딩이다.</p><p>GO 언어를 만든 켄 톰슨과 롭 파이크가 만들었다 </p></blockquote><br><br><p>[<a href="https://namu.wiki/w/%EC%95%84%EC%8A%A4%ED%82%A4%20%EC%BD%94%EB%93%9C?from=ASCII]" target="_blank" rel="noopener">https://namu.wiki/w/%EC%95%84%EC%8A%A4%ED%82%A4%20%EC%BD%94%EB%93%9C?from=ASCII]</a>(<a href="https://namu.wiki/w/아스키" target="_blank" rel="noopener">https://namu.wiki/w/아스키</a> 코드?from=ASCII)</p><br><blockquote><p>ASCII 코드는 미국 ANSI 에서 표준화한 정보 교환용 7비트 부호체계 </p><p>2 바이트 이상의 코드를 표현할수 없기 때문에. </p><p>국제 표준에서는 유니코드로 넘어감.</p></blockquote><br><br><p>PEP8에 따르면, 파이썬2에서 ASCII 를 사용하는 파일들이나 혹은 파이썬3에서 UTF-8을 사용하는 파일들 모두 </p><p>인코딩 선언이 되어 있지 않아야 합니다. </p><br><a id="more"></a><br><blockquote><p>*<em>참고로 *</em></p><p>encoding 선언이 되어 있지 않으면, </p><p>기본 인코딩은 UTF-8 입니다. </p><p>from Python3 공식문서 </p></blockquote><br><br><p>파이썬 표준 라이브러리에서는, 기본 인코딩이 아닌 문자는 아래의 경우만 사용합니다<br></p><br><p>a) 테스트 목적<br></p><p>b) comment 나 docstring 에서 게시자의 이름이 non-ASCII  문자를 포함하고 있을때 </p><br><br><p><strong>PEP에서는 특별히 Non-ASCII 문자가 포함되어 있는 경우가 아니면</strong><br></p><p>아래의 escapes 를 사용하여 문자열에 있는 non-ASCII 데이터를 표현하는 방식을 선호합니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">\x <span class="comment"># Character with hex value e.g. \xhh</span></span><br><span class="line">\u <span class="comment"># Unicode Character with 16-bit hex value xxx e.g. u'\u004D'</span></span><br><span class="line">\U<span class="comment"># Unicode Character with 32-bit hex value xxxxxxxx e.g. u'\U0000004D'</span></span><br><span class="line">\N<span class="comment"># Character named name in the Unicode database e.g. \N&#123;name&#125;</span></span><br></pre></td></tr></table></figure><br><br><p>PEP3131 에 파이썬 3.0 과 그 이후 버전에 대한 원칙이 나와 있습니다.<br></p><br><br><p>PEP8 에서 정리하는 바는 다음과 같습니다 <br></p><br><p>1) 파이썬의 표준 라이브러리 안에 있는 모든 식별자는 ASCII-Only 식별자여야 하고. 가능하면 영문으로 씁니다.<br></p><p>2) 추가로 문자열과 주석들도 ASCII  형식으로 되어 있어야만 합니다. 이부분에 대한 예외는 아래와 같습니다. <br></p><p>  a) ASCII 방식이 아닌것을 테스트 하고자 할때. <br></p><p>  b) 게시자의 이름이 라틴 알파벳으로 되어 있지 않은 경우, Non-ASCII로 표현 되어도 됩니다. </p><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>저는 아직도 ASCII 와 UTF-8 인코딩 방식에 대해서 깊게 알지 못합니다. </p><p>두가지의 인코딩 방식에 대해서 정확하게 이해해야지만, PEP8 에서 이야기 하는 부분을 정확하게 이해할것 같습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Source-File-Encoding/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Code Layout - Blank Lines</title>
      <link>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Blank-Lines/</link>
      <guid>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Blank-Lines/</guid>
      <pubDate>Sat, 04 Apr 2020 16:25:03 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;PEP8-Code-Layout-Blank-Lines-빈줄&quot;&gt;&lt;a href=&quot;#PEP8-Code-Layout-Blank-Lines-빈줄&quot; class=&quot;headerlink&quot; title=&quot;PEP8 Code Layout - Blank Lines (빈줄)&quot;&gt;&lt;/a&gt;PEP8 Code Layout - Blank Lines (빈줄)&lt;/h1&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;이번 토픽은, PEP8 에서 권장하는 코드내에 빈줄 공간들에 대해서 다룹니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt; &lt;strong&gt;가장 상위의 함수와 클래스 정의는 2줄의 빈줄로 공간을 둡니다&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;이것이 의미하는 바는 아래의 예제를 보면 알수 있습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 가장 상위의 함수와 클래스들 사이의 2줄 공간 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 가장 상위의 클래스 두개끼리는 2줄의 빈공간이 있습니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DjangoJenge&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;DjangoJenge2&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 가장 상위의 함수 두개끼리는 2줄의 빈공간을 둡니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Djangojeng&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Djangojeng&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;pass&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;클래스 내의 메써드 정의는 1줄로 공간을 둡니다.&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="PEP8-Code-Layout-Blank-Lines-빈줄"><a href="#PEP8-Code-Layout-Blank-Lines-빈줄" class="headerlink" title="PEP8 Code Layout - Blank Lines (빈줄)"></a>PEP8 Code Layout - Blank Lines (빈줄)</h1><br><br><p>이번 토픽은, PEP8 에서 권장하는 코드내에 빈줄 공간들에 대해서 다룹니다. </p><br><br><blockquote><p> <strong>가장 상위의 함수와 클래스 정의는 2줄의 빈줄로 공간을 둡니다</strong> <br></p></blockquote><p><br><br></p><p>이것이 의미하는 바는 아래의 예제를 보면 알수 있습니다. </p><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 가장 상위의 함수와 클래스들 사이의 2줄 공간 </span></span><br><span class="line"><span class="comment"># 가장 상위의 클래스 두개끼리는 2줄의 빈공간이 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJenge</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJenge2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 가장 상위의 함수 두개끼리는 2줄의 빈공간을 둡니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Djangojeng</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Djangojeng</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><br><blockquote><p>클래스 내의 메써드 정의는 1줄로 공간을 둡니다.<br></p></blockquote><a id="more"></a><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 클래스 내의 메써드 정의는 1줄 공간을 둡니다. </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJenge1</span><span class="params">()</span>:</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_python</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_python2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DjangoJeng2</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_django</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">learn_django2</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><br><br></p><p>위 예시를 보면, 가장 상위에 위치하는 클래스들 끼리는 2줄 빈공간이 존재하고. <br></p><p>클래스 안에 있는 메서드 들 끼리는 1줄 빈공간들이 존재합니다.</p><p><br><br></p><blockquote><p>함수내에 빈줄은 드물게 사용해야 합니다.</p><p>함수내에 빈줄은 논리적 부분을 표시하기 위해서 사용 가능합니다. </p></blockquote><p><br><br></p><p>예를들면, </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수내에 논리적인 부분을 표시하기 위해서 빈줄을 함수내에서 사용합니다. </span></span><br><span class="line"><span class="comment"># 아주 드물게 사용해야 합니다.</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loop</span><span class="params">(j)</span>:</span></span><br><span class="line">    c = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, j):</span><br><span class="line">        c = c + <span class="number">1</span> </span><br><span class="line">    </span><br><span class="line">    print(c)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># for 문과 print 문 사이에 하나의 빈줄이 존재합니다.</span></span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>PEP8 안에 빈줄 (Blank Lines)에 관한 내용은 유용한 내용인데도 불구하고 <br></p><p>예시가 빈약해서 이해하기 힘들었습니다. <br></p><p><br><br></p><p>최대한 맞는 예시를 들으려 했지만 부족할수 있습니다. </p><br><p>하지만, 걱정 안하셔도 됩니다. </p><br><blockquote><p>Pycharm을 사용하면 자동으로 PEP8에 맞는 스타일을 가이드 해줍니다 </p><p>코드를 작성할때 이따금씩 노란색 밑줄이 쳐질때가 있는데, PEP8에 어긋날때 표시가 됩니다. </p><p>잘 유의해서 확인하고, PEP8 가이드라인에 맞게 코드를 작성하면 됩니다! </p></blockquote>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/05/PEP8-Code-Layout-Blank-Lines/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Code Layout - Should a Line Break Before or After a Binary Operator?</title>
      <link>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Should-a-Line-Break-Before-or-After-a-Binary-Operator/</link>
      <guid>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Should-a-Line-Break-Before-or-After-a-Binary-Operator/</guid>
      <pubDate>Sat, 04 Apr 2020 10:53:38 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;이항연산자-전후-줄바꿈&quot;&gt;&lt;a href=&quot;#이항연산자-전후-줄바꿈&quot; class=&quot;headerlink&quot; title=&quot;이항연산자 전후 줄바꿈&quot;&gt;&lt;/a&gt;이항연산자 전후 줄바꿈&lt;/h1&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;이항 연산자 전에 줄바꿈을 해야할
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="이항연산자-전후-줄바꿈"><a href="#이항연산자-전후-줄바꿈" class="headerlink" title="이항연산자 전후 줄바꿈"></a>이항연산자 전후 줄바꿈</h1><br><br><p>이항 연산자 전에 줄바꿈을 해야할까요 아니면 후에 줄바꿈을 해줘야 할까요? </p><br><blockquote><p>줄바꿈은 연산기호 전에 되어야 하는가? </p><p>아니면</p><p>줄바꿈은 연산기호 후에 되어야 하는가? </p></blockquote><br><br><p><strong>몇십년동안, 줄바꿈은 연산기호 후에 해주는것이 권장 되어 왔습니다.</strong></p><br><p>하지만, 줄바꿈을 연산기호 후에 해주면, 두가지 이유로 가독성을 떨어트립니다. </p><p><br><br> </p><p>1) 연산기호들이 스크린에 세로줄로 흐트러지고, 이전줄에 있는 피연산자들(opernand) 과 떨어지게 됩니다. </p><p>2) 시각적으로 어떤것들이 더해지고, 빼줘야 하는것인지 파악하는데에 시간을 들여야 합니다. </p><br><br><p><strong>연산기호들이 피연산자들과 멀리 떨어져 있는 경우의 예를 들어봅니다</strong></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 연산기호들이 이전줄의 피연산자들과 떨어져 있는 경우의 코드 </span></span><br><span class="line"></span><br><span class="line">income = (gross_wages +</span><br><span class="line">         taxable_interest +</span><br><span class="line">         (dividends - qualified_dividends) -</span><br><span class="line">         ira_deduction - </span><br><span class="line">         student_loan_interest)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 줄바꿈이 연산기호인 + 혹은 - 이후에 이루어진것을 확인 할수 있습니다. </span></span><br><span class="line"><span class="comment"># 코드를 읽어가면서 어떤것을 더해주고 빼주어야 하는지 눈으로 더 확인 해봐야 하는 상황이 옵니다.</span></span><br></pre></td></tr></table></figure><br><p>위 상황에서 가독성이 떨어지기 때문에, 수학자들과 퍼블리셔들은 반대의 관례를 따르기 시작합니다.</p><br><br><blockquote><p>문단안에 있는 공식들은 </p><p>언제나 연산기호 뒤에 줄바꿈을 하지만 </p><p>잘 진열된 공식들은 언제나 연산기호 전에 줄바꿈을 합니다 </p><p>Donald Knuth in “Computers and Typesetting series”</p></blockquote><br><br><p>수학적 전통을 따르면, 결과적으로 더 읽기 편한 코드가 나옵니다. 아래 예시 코드를 참조합니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 코드에서 줄바꿈을 연산기호 전에 하면</span></span><br><span class="line"><span class="comment"># 연산기호들과 피연산자들을 매칭 시키기 쉬운 코드가 됩니다. </span></span><br><span class="line"><span class="comment"># PEP8 에서 나온 좋은 예시는 아래와 같습니다. </span></span><br><span class="line"></span><br><span class="line">income = (gross_wages</span><br><span class="line">         + taxable_interest</span><br><span class="line">         + (dividends - qualified_dividens)</span><br><span class="line">         - ira_deduction</span><br><span class="line">         - student_loan_interest)</span><br></pre></td></tr></table></figure><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>파이썬 코드에서는, 줄바꿈을 연산기호 전이나 연산기호 후에 하는 두가지 방법이 모두 허용됩니다. <br></p><p>어떤 방법이던, 해당 지역의 관례와 맞는다면, 두가지 방식은 다 괜찮습니다.<br></p><br><p><strong>저는 개인적으로, 연산기호 전에 줄바꿈을 해주는것이 가독성에 좋다고 생각합니다.</strong></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Should-a-Line-Break-Before-or-After-a-Binary-Operator/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Code Layout - Maximum Line Length</title>
      <link>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Maximum-Line-Length/</link>
      <guid>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Maximum-Line-Length/</guid>
      <pubDate>Sat, 04 Apr 2020 10:29:03 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;Maximum-Line-Length&quot;&gt;&lt;a href=&quot;#Maximum-Line-Length&quot; class=&quot;headerlink&quot; title=&quot;Maximum Line Length&quot;&gt;&lt;/a&gt;Maximum Line Length&lt;/h1&gt;&lt;br&gt;

        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Maximum-Line-Length"><a href="#Maximum-Line-Length" class="headerlink" title="Maximum Line Length"></a>Maximum Line Length</h1><br><blockquote><p><code>Maximum Line Length</code> 는 한줄의 최대 길이를 의미 합니다. </p></blockquote><br><br><h2 id="모든-줄은-79자로-제한-합니다"><a href="#모든-줄은-79자로-제한-합니다" class="headerlink" title="모든 줄은 79자로 제한 합니다"></a>모든 줄은 79자로 제한 합니다</h2><br><p>네. PEP8 에서는, 파이썬 코드를 작성할때. 한줄의 최대 길이를 79자로 제한합니다. </p><br><br><p><strong>다만! <code>docstring</code>혹은 <code>comments</code> 즉 주석들은, 72자로 제한합니다.</strong> </p><br><br><blockquote><p>모든 팀원들이 동의한다는 전제하에, </p><p>특별히 코드의 긴 줄이 유지 되어야 하는 상황이거나 하면 </p><p>최대 길이는 99자까지 늘릴수 있습니다. </p></blockquote><br><h2 id="한줄이-너무-긴-코드-줄-바꾸기"><a href="#한줄이-너무-긴-코드-줄-바꾸기" class="headerlink" title="한줄이 너무 긴 코드 줄 바꾸기"></a>한줄이 너무 긴 코드 줄 바꾸기</h2><br><blockquote><p>PEP8 에서 선호하는 긴줄 처리는, </p><p>계속되는 줄의 경계를 소괄호, 중괄호, 대괄호 안에 넣고 사용하는것입니다. </p><p>이 방법이 \ 를 사용하는 방법보다 선호됩니다. </p></blockquote><br><p>제가 생각하는 예시들은 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 한줄이 너무 긴 코드 </span></span><br><span class="line"><span class="keyword">if</span>(this_is_one_thing <span class="keyword">or</span> that_is_another_thing <span class="keyword">or</span> everything_is_good_thing <span class="keyword">or</span> you_are_the best):</span><br><span class="line">    </span><br><span class="line"><span class="comment"># \ 백슬레쉬를 사용하지 않고, 괄호안에서 줄을 바꿔서, 한줄을 다음줄로 나눕니다. </span></span><br><span class="line"><span class="comment"># 물론 들여쓰기는 잘해주어야 하겠죠? </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(this_is_one_thing <span class="keyword">or</span></span><br><span class="line">   that-is_another_thing <span class="keyword">or</span></span><br><span class="line">   everything_is_good_thing <span class="keyword">or</span></span><br><span class="line">   you_are_the_best):</span><br></pre></td></tr></table></figure><br><p>위 방법이 선호되는것 같으나, 여전히 <code>\</code>백슬레쉬의 사용하는 방법도 괜찮습니다! </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># \ 를 사용하여 줄을 나눈 경우, \를 사용하지 않았으면, 한줄이 너무 길어 졌을것 같습니다. </span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'/path/to/some/file/you/want/to/read'</span>) <span class="keyword">as</span> file_1, \</span><br><span class="line">     open(<span class="string">'/path/to/some/file/being/written'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file_2:)</span><br><span class="line">     file_2.write(file_1.read())</span><br></pre></td></tr></table></figure><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>1) PEP8 에서는 한줄의 최대길이를 79자로 제한합니다. </p><p>2) docstring 이나 comments 같은 주석들은 72자로 제한합니다.</p><p>3) 한줄이 너무 길어질것 같으면, <code>\</code>나 괄호안의 문장을 다음줄로 이어갑니다 (들여쓰기는 적절히 해야하는게 필수) </p><br><p>한줄 한줄이 너무 길어서 스크린이 꽉꽉 차있으면, 일하러 가서 매일 아래와 같은 스크린을 보게 될것입니다. <br></p><img src="/2020/04/04/PEP8-Code-Layout-Maximum-Line-Length/image1.jpeg" class=""><p><br><br></p><p>그리고, 누가 그러시던데, 한줄의 길이가 79자가 된 이유중에 하나가. <br></p><p>옛날 컴퓨터의 모니터 크기 때문이라고 합니다. 지금 나오는 모니터 크기와는 다르게.<br></p><p><br> 옛날 모니터들은 가로폭이 굉장히 좁아서. 화면에 꽉차는 양이 79자 정도 였다 합니다.  <br></p><p>아래 사진을 보면,,, 충분히 그럴수도 있었겟네요? ㅎㅎ <br></p><br><img src="/2020/04/04/PEP8-Code-Layout-Maximum-Line-Length/image2.jpg" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Maximum-Line-Length/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Code Layout - Tabs or Spaces?</title>
      <link>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Tabs-or-Spaces/</link>
      <guid>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Tabs-or-Spaces/</guid>
      <pubDate>Sat, 04 Apr 2020 10:14:27 GMT</pubDate>
      <description>
      
        
        
          &lt;h1 id=&quot;PEP8-Code-Layout-Tab-혹은-Spaces&quot;&gt;&lt;a href=&quot;#PEP8-Code-Layout-Tab-혹은-Spaces&quot; class=&quot;headerlink&quot; title=&quot;PEP8 Code Layout - Tab 혹은 Spaces
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="PEP8-Code-Layout-Tab-혹은-Spaces"><a href="#PEP8-Code-Layout-Tab-혹은-Spaces" class="headerlink" title="PEP8 Code Layout - Tab 혹은 Spaces?"></a>PEP8 Code Layout - Tab 혹은 Spaces?</h1><br><blockquote><p>파이썬에서는 Tab 대신 Spaces(빈공간)을 사용하는것을 선호합니다. </p></blockquote><br><p>탭을 사용하는 경우는, 이미 코드가 <code>tab</code>으로 들여쓰기가 되어 있는 경우, </p><p><br>코드와 일관되게 <code>tab</code>을 사용합니다. </p><br><blockquote><p>Python3 에는 <code>tab</code>과 <code>spaces</code> 혼용 사용을 허락하지 않습니다. </p></blockquote><br><p><code>tab</code>과  <code>spaces</code>의 혼용으로 들여쓰기가 되어진 Python2 버전의 코드는 특별히 spaces를 사용해서 전환되어야 합니다. </p><br><p><br>Python2 커맨드 라인 인터프리터로 <code>-t</code>옵션을 사용하면, </p><p><code>tabs</code>와 <code>spaces</code>의 혼용된 코드에 대해서 경고를 줍니다. </p><br><p><code>--t</code>옵션을 사용하면, 이 경고들이 에러가 됩니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Tabs-or-Spaces/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 Code Layout - Indentation</title>
      <link>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Indentation/</link>
      <guid>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Indentation/</guid>
      <pubDate>Sat, 04 Apr 2020 09:16:00 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;PEP8-Code-Layout-Indentation-들여쓰기&quot;&gt;&lt;a href=&quot;#PEP8-Code-Layout-Indentation-들여쓰기&quot; class=&quot;headerlink&quot; title=&quot;PEP8 Code Layout - Indentation (들여쓰기)&quot;&gt;&lt;/a&gt;PEP8 Code Layout - Indentation (들여쓰기)&lt;/h1&gt;&lt;br&gt;

&lt;h2 id=&quot;Indentation&quot;&gt;&lt;a href=&quot;#Indentation&quot; class=&quot;headerlink&quot; title=&quot;Indentation&quot;&gt;&lt;/a&gt;Indentation&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬에서, 들여쓰기는 문법으로 의무화 되어 있습니다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;PEP8에서는 들여쓰기에 대한 코딩 스타일을 다루고 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;들여쓰기는 4칸을 사용합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;Continuation lines, 즉 이어지는 줄들은 세로로 정렬이 되어야 하는데. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;1) 파이썬에서 암시적으로 이어지는 줄들을 소괄호, 중괄호, 대괄호 안에 묶거나, &lt;/p&gt;
&lt;p&gt;2) hanging indent 를 사용하여 정렬합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;hanging indent 를 직역하면, 매달려 있는 들여쓰기로. &lt;/p&gt;
&lt;p&gt;문단의 첫번째 줄을 제외한 모든 라인이 들여쓰기가 되어 있는 스타일 입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;&lt;strong&gt;hanging indent 의 예를 들어봅니다&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="PEP8-Code-Layout-Indentation-들여쓰기"><a href="#PEP8-Code-Layout-Indentation-들여쓰기" class="headerlink" title="PEP8 Code Layout - Indentation (들여쓰기)"></a>PEP8 Code Layout - Indentation (들여쓰기)</h1><br><h2 id="Indentation"><a href="#Indentation" class="headerlink" title="Indentation"></a>Indentation</h2><br><p>파이썬에서, 들여쓰기는 문법으로 의무화 되어 있습니다. <br></p><p>PEP8에서는 들여쓰기에 대한 코딩 스타일을 다루고 있습니다. </p><br><br><blockquote><p>들여쓰기는 4칸을 사용합니다.</p></blockquote><br><p>Continuation lines, 즉 이어지는 줄들은 세로로 정렬이 되어야 하는데. <br></p><p>1) 파이썬에서 암시적으로 이어지는 줄들을 소괄호, 중괄호, 대괄호 안에 묶거나, </p><p>2) hanging indent 를 사용하여 정렬합니다. </p><br><blockquote><p>hanging indent 를 직역하면, 매달려 있는 들여쓰기로. </p><p>문단의 첫번째 줄을 제외한 모든 라인이 들여쓰기가 되어 있는 스타일 입니다. </p></blockquote><br><p><strong>hanging indent 의 예를 들어봅니다</strong></p><br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">djangojenge = djangojenge(django, python,</span><br><span class="line">pep8, programming)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 첫번째줄은 들여쓰기가 되어 있지 않은데 </span></span><br><span class="line"><span class="comment"># 두번째줄은 들여쓰기가 되어 있습니다. 이것을 매달려있는 들여쓰기. 즉 hanging indent 라고 합니다.</span></span><br></pre></td></tr></table></figure><br><br><p><code>hanging indent</code>를 사용할때는, 아래 두가지 사항을 골려하면서 사용합니다. </p><br><ol><li>첫번째 줄에는 arguments (전달인자) 가 없어야 합니다. </li><li>이어지는 줄이라는것을 표시하기 위해 추가적인 들여쓰기가 사용되어야합니다</li></ol><br><br><h2 id="좋은예"><a href="#좋은예" class="headerlink" title="좋은예"></a>좋은예</h2><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 좋은예: </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 열리는 구분자와 정렬</span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(var_one, var_two, </span><br><span class="line">                         var_three, var_four)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4칸을 추가로 주어 전달인자들을 다른 로직과 구분 </span></span><br><span class="line"><span class="comment"># 추가 들여쓰기로 arguments 부분과, print 부분이 구분됩니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">var_one, var_two, var_three,</span></span></span><br><span class="line"><span class="function"><span class="params">var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># Hanging indents 한칸을 더 추가 합니다 </span></span><br><span class="line"><span class="comment"># 첫번째 예랑 같은데, hanging indent 로 한칸씩 추가 되어. 좀더 깔끔해 보입니다. </span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(</span><br><span class="line">var_one, var_two,</span><br><span class="line">var_three, var_four)</span><br></pre></td></tr></table></figure><br><br><h2 id="나쁜예"><a href="#나쁜예" class="headerlink" title="나쁜예"></a>나쁜예</h2><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 나쁜예: </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 첫번째 전달인자들이 세로로 정렬이 되지 않은 경우</span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(var_one, var_two,</span><br><span class="line">      var_three, var_four)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 추가적인 들여쓰기가 필요한 경우</span></span><br><span class="line"><span class="comment"># 추가적인 들여쓰기가 없을경우, 전달인자들과 print() 와 구분이 안갑니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">long_function_name</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">var_one, var_two, var_three,</span></span></span><br><span class="line"><span class="function"><span class="params">var_four)</span>:</span></span><br><span class="line">    print(var_one)</span><br></pre></td></tr></table></figure><br><br><h2 id="선택-사항"><a href="#선택-사항" class="headerlink" title="선택 사항"></a>선택 사항</h2><br><br><p>이어지는 줄에서의 4-칸 스페이스 룰은 선택 사항입니다. 4칸 보다 더 쓸수도, 덜 쓸수도 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hanging indents 는 4칸 외에 공간으로 들여쓰기가 가능합니다 </span></span><br><span class="line"></span><br><span class="line">foo = long_function_name(</span><br><span class="line">  var_one, var_two, </span><br><span class="line">  var_three, var_four)</span><br></pre></td></tr></table></figure><br><h2 id="조건문이-너무-길어질때"><a href="#조건문이-너무-길어질때" class="headerlink" title="조건문이 너무 길어질때"></a>조건문이 너무 길어질때</h2><br><p><strong><code>if</code>구문의 조건 부분이 너무 길어져서 다수의 줄이 된다면,</strong> </p><br><blockquote><p><code>if</code> 다음에 한칸을 띄고 괄호를 열어줍니다.</p><p>if ():</p><p>이렇게 쓰면, 자연스럽게 다음줄부터 4칸 들여쓰기가 됩니다</p></blockquote><p><br><br></p><p>조건부분이 너무 길고, 밑에 실행 가능한 함수등과 구분짓고 싶을때 아래와 같이 써줍니다. </p><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 추가 들여쓰기가 없음</span></span><br><span class="line"><span class="comment"># do_something() 부분이 자연스럽게 들여쓰기가 됩니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span> </span><br><span class="line">   that_is_another_thing):</span><br><span class="line">   do_something()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 주석을 달아줘서 조건 부분과 함수 부분을 구분합니다 </span></span><br><span class="line"><span class="comment"># 주석과 코드의 색깔을 표시해주는 에디터가 많기 때문에 구분이 가능합니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing <span class="keyword">and</span> </span><br><span class="line">   that_is_another_thing):</span><br><span class="line">   <span class="comment"># Since both conditions are true, we can frobncate.</span></span><br><span class="line">   do_something()</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 조건문이 이어지는 줄에 추가로 들여쓰기를 넣어줍니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (this_is_one_thing</span><br><span class="line">   <span class="keyword">and</span> that_is_another_thing): </span><br><span class="line">    do_something()</span><br></pre></td></tr></table></figure><br><br><h2 id="여러-줄에서-닫히는-소괄호-중괄호-대괄호"><a href="#여러-줄에서-닫히는-소괄호-중괄호-대괄호" class="headerlink" title="여러 줄에서 닫히는 소괄호/중괄호/대괄호"></a>여러 줄에서 닫히는 소괄호/중괄호/대괄호</h2><br><p>맨마지막 줄 다음줄에 닫는 괄호를 넣어줍니다. 괄호를 따로 들여쓰기를 해주어야 되겠죠? ㅎㅎ<br></p><br><p><strong>코드를 보면서 이해합니다.</strong> </p><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 마지막 줄의 ] 는 추가로 들여쓰기가 되었습니다.</span></span><br><span class="line"></span><br><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 마지막 줄의 ) 는 추가로 들여쓰기가 되었습니다. </span></span><br><span class="line"></span><br><span class="line">result = some_function_that_takes_arguments(</span><br><span class="line"><span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line"><span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><br><p><strong>혹은, 닫히는 소괄호/중괄호/대괄호 들은 첫번째 줄의 시작점에 두어도 괜찮습니다. (밑에 코드 참조)</strong></p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 마지막 줄의 ] 는 추가로 들여쓰기가 되었습니다.</span></span><br><span class="line"></span><br><span class="line">my_list = [</span><br><span class="line">    <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>,</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 마지막 줄의 ) 는 추가로 들여쓰기가 되었습니다. </span></span><br><span class="line"></span><br><span class="line">result = some_function_that_takes_arguments(</span><br><span class="line"><span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>,</span><br><span class="line"><span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>,</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>PEP에서 들여쓰기 부분이 가장 초입인데. 뭔가 가장 헷갈렸습니다. <br></p><p>표현들이 좀 이상해서 더 애먹은것 같습니다.  세번째 쯤 보니까 이제 좀 이해가 가는듯 합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/04/PEP8-Code-Layout-Indentation/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 - A Foolish Consistency is the Hobgoblin of Little Minds</title>
      <link>http://djangojeng-e.github.io/2020/04/04/PEP8-A-Foolish-Consistency-is-the-Hobgoblin-of-Little-Minds/</link>
      <guid>http://djangojeng-e.github.io/2020/04/04/PEP8-A-Foolish-Consistency-is-the-Hobgoblin-of-Little-Minds/</guid>
      <pubDate>Fri, 03 Apr 2020 17:08:19 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;PEP8-A-foolish-consistency-is-the-Hobgoblin-of-Little-Minds&quot;&gt;&lt;a href=&quot;#PEP8-A-foolish-consistency-is-the-Hobgoblin-of-Little-Minds&quot; class=&quot;headerlink&quot; title=&quot;PEP8 - A foolish consistency is the Hobgoblin of Little Minds&quot;&gt;&lt;/a&gt;PEP8 - A foolish consistency is the Hobgoblin of Little Minds&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;PEP8 스타일 가이드라인의 두번째 토픽입니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt; 타이틀을 직역해보면, &lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;어리석은 일관성은 &lt;/p&gt;
&lt;p&gt;소심한 홉고블린이다? &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;서양에서는, 홉고블린이 사악하고, 아둔한 그런데 또 피지컬은 또 없는 그런 요괴로 취급됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;strong&gt;다시 말해서, 잘못된 코딩 스타일 일관성은 고블린 취급받기 쉽단 얘기겠죠?&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;코드는 쓰이는것보다 읽히는 일이 많다.&lt;/p&gt;
&lt;p&gt;by 파이썬 창시자 귀도 반 로썸&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;코드는 쓰이는것보다 읽힐때가 훨씬 많습니다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;PEP8에 제시되는 가이드라인은 코드의 가독성 향상과,  파이썬 코드 전반에 걸쳐서 일관성을 만들어 가는것입니다.&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="PEP8-A-foolish-consistency-is-the-Hobgoblin-of-Little-Minds"><a href="#PEP8-A-foolish-consistency-is-the-Hobgoblin-of-Little-Minds" class="headerlink" title="PEP8 - A foolish consistency is the Hobgoblin of Little Minds"></a>PEP8 - A foolish consistency is the Hobgoblin of Little Minds</h1><br><p>PEP8 스타일 가이드라인의 두번째 토픽입니다. </p><p><br> 타이틀을 직역해보면, <br></p><blockquote><p>어리석은 일관성은 </p><p>소심한 홉고블린이다? </p></blockquote><br><p>서양에서는, 홉고블린이 사악하고, 아둔한 그런데 또 피지컬은 또 없는 그런 요괴로 취급됩니다. </p><br><p><strong>다시 말해서, 잘못된 코딩 스타일 일관성은 고블린 취급받기 쉽단 얘기겠죠?</strong> </p><p><br><br></p><blockquote><p>코드는 쓰이는것보다 읽히는 일이 많다.</p><p>by 파이썬 창시자 귀도 반 로썸</p></blockquote><br><p>코드는 쓰이는것보다 읽힐때가 훨씬 많습니다. <br></p><p>PEP8에 제시되는 가이드라인은 코드의 가독성 향상과,  파이썬 코드 전반에 걸쳐서 일관성을 만들어 가는것입니다.</p><a id="more"></a><br><br><h2 id="Consistency-일관성"><a href="#Consistency-일관성" class="headerlink" title="Consistency (일관성)"></a>Consistency (일관성)</h2><br><p>PEP8 스타일 가이드는 일관성에 대한 것입니다. <br></p><p>PEP8에 나와있는 스타일 가이드와 일관되게 따르는것은 중요합니다. </p><br><blockquote><p>하지만! </p><p>프로젝트내에 스타일 가이드와 일관되게 코드를 짜는것이 더욱 중요합니다.  </p></blockquote><br><p>각각의 프로젝트 마다, 코딩 스타일이 다르고. PEP8 은 프로젝트 마다의 코딩 스타일을 존중합니다. <br></p><p>PEP8은 가이드라인을 제시할뿐이지. 그 가이드라인을 의무화 하지는 않습니다. </p><br><p>따라서, 프로젝트내에 일관된 코드가 있다면, 더 좋은 코딩 스타일이 존재한다면,<br></p><p><br>그 프로젝트 내의 코딩 스타일과 일관되게 코드를 작성하는것이 좋습니다. </p><br><h2 id="일관되지-않을때를-알아야-합니다"><a href="#일관되지-않을때를-알아야-합니다" class="headerlink" title="일관되지 않을때를 알아야 합니다"></a>일관되지 않을때를 알아야 합니다</h2><br><p>위에서 언급하였듯이, PEP8 의 스타일 가이드가 프로젝트에 잘 적용 될수 없을때는.<br> 본인의 판단하에, 다른 예시들을 보고 어떤게 제일 좋게 보이는 스타일을 선택하면 됩니다.</p><br><blockquote><p>PEP를 따르기 위해서, 뒤로 퇴보하지는 않아야 합니다. </p></blockquote><br><br><p><strong>가이드라인을 무시할수 있는 사유들</strong></p><br><br><p>1) PEP를 적용했을때에 가독성이 더 떨어지는 경우 </p><p>2) 이미 PEP가 적용되지 않은 코드가 주변에 너무 많이 존재할때 (예, 너무 과거에 쓰여진 코드들)</p><p>3) 해당 코드가 이미 PEP8이 소개되기 이전인데, 해당 코드를 바꿀 이유가 별로 없을때 </p><p>4) 해당 코드가 파이썬의 이전버전과 호환하기 위해 필요한데, 가이드라인에 제시되어 있는 기능을 지원하지 않을때 </p><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>정리하자면, PEP8 은 가이드라인일 뿐이고. <br> 본인이나 팀의 판단에 따라서. 프로젝트에 적용할지 안할지를 정하면 될것 같습니다. </p><br><p>개인적으로 저는 따르는게 좋다고 생각합니다. <br></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/04/PEP8-A-Foolish-Consistency-is-the-Hobgoblin-of-Little-Minds/#disqus_thread</comments>
    </item>
    
    <item>
      <title>PEP8 - Introduction</title>
      <link>http://djangojeng-e.github.io/2020/04/04/PEP8-Introduction/</link>
      <guid>http://djangojeng-e.github.io/2020/04/04/PEP8-Introduction/</guid>
      <pubDate>Fri, 03 Apr 2020 16:39:32 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;PEP8-Introduction&quot;&gt;&lt;a href=&quot;#PEP8-Introduction&quot; class=&quot;headerlink&quot; title=&quot;PEP8 - Introduction&quot;&gt;&lt;/a&gt;PEP8 - Introduction&lt;/h1&gt;&lt;br&gt;

&lt;br&gt;



&lt;h2 id=&quot;PEP8-소개&quot;&gt;&lt;a href=&quot;#PEP8-소개&quot; class=&quot;headerlink&quot; title=&quot;PEP8 소개&quot;&gt;&lt;/a&gt;PEP8 소개&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;&lt;strong&gt;파이썬 코딩 스타일 가이드라인 PEP 에 대해서 포스팅 하고자 합니다. &lt;br&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;PEP는&lt;/p&gt;
&lt;p&gt;Python Enhancement Proposal 의 약자로 &lt;/p&gt;
&lt;p&gt;파이썬 코딩 스타일 가이드라인을 담고 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.python.org/dev/peps/pep-0008/#introduction&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.python.org/dev/peps/pep-0008/#introduction&lt;/a&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="PEP8-Introduction"><a href="#PEP8-Introduction" class="headerlink" title="PEP8 - Introduction"></a>PEP8 - Introduction</h1><br><br><h2 id="PEP8-소개"><a href="#PEP8-소개" class="headerlink" title="PEP8 소개"></a>PEP8 소개</h2><br><br><p><strong>파이썬 코딩 스타일 가이드라인 PEP 에 대해서 포스팅 하고자 합니다. <br></strong></p><br><blockquote><p>PEP는</p><p>Python Enhancement Proposal 의 약자로 </p><p>파이썬 코딩 스타일 가이드라인을 담고 있습니다. </p></blockquote><p><br><br></p><p><a href="https://www.python.org/dev/peps/pep-0008/#introduction" target="_blank" rel="noopener">https://www.python.org/dev/peps/pep-0008/#introduction</a></p><a id="more"></a> <p>위 웹사이트에 자세한 가이드라인이 나와 있으며, 파이썬 코딩에서 관례를 다루고 있습니다. <br></p><br><p>해당 문서는, 파이썬의 창시자인 귀도 반 로섬의 오리지널 파이썬 스타일 가이드 에세이를 <br>기본적으로 받아들이고 있고<br> 베리의 스타일 가이드의 내용을 추가해서 제작되었습니다.</p><br><p>파이썬 코딩 스타일 가이드는 시간이 지나면서 점차 진화합니다. </p><p><br><strong>언어가 변화함에 따라서 추가적인 관례와<br> 너무 노후한 스타일들이 확인 되고. 그에 맞춰서 가이드라인도 진화 하겟죠?</strong> </p><p><br><br></p><p>각각의 프로젝트들은 그들만의 고유한 코딩 스타일 가이드라인이 존재합니다. </p><p><br><br></p><blockquote><p>PEP8의 가이드라인과, 프로젝트의 코딩 스타일 가이드라인이 충돌할 경우, </p><p>프로젝트에 특화된 코딩 스타일을 우선 따르는것을 원칙으로 합니다. </p></blockquote><p>​    <br></p><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>PEP8 이 굉장히 중요하다 합니다. 모두가 기본이 되는 파이썬 코딩 스타일을 가지고 있으면, <br></p><p>남이 쓴 코드도 이해하기 더 쉬워질겁니다. <br></p><p>PEP8 관련 포스팅을 이제부터 시작합니다~ </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/04/04/PEP8-Introduction/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo 블로그 - About 페이지 만들기</title>
      <link>http://djangojeng-e.github.io/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/</guid>
      <pubDate>Mon, 30 Mar 2020 11:34:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;About-페이지-만들기&quot;&gt;&lt;a href=&quot;#About-페이지-만들기&quot; class=&quot;headerlink&quot; title=&quot;About 페이지 만들기&quot;&gt;&lt;/a&gt;About 페이지 만들기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;개인 블로그라면, &lt;br&gt; 적어도 간단하게 본인이나 블로그를 소개하는 About 페이지 하나는 있어야 할것 같아서. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;About&lt;/code&gt; 페이지를 하나 만들어서 적용해 보려 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;페이지에 생성후, 디테일을 한번 수정해 보겠습니다. &lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;About-페이지-생성하기&quot;&gt;&lt;a href=&quot;#About-페이지-생성하기&quot; class=&quot;headerlink&quot; title=&quot;About 페이지 생성하기&quot;&gt;&lt;/a&gt;About 페이지 생성하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;blog&lt;/code&gt; 폴더에서, 아래 명령어를 실행하여, &lt;code&gt;about&lt;/code&gt;페이지를 생성합니다. &lt;/p&gt;
&lt;br&gt;



&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;hexo new page about&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="About-페이지-만들기"><a href="#About-페이지-만들기" class="headerlink" title="About 페이지 만들기"></a>About 페이지 만들기</h2><br><p>개인 블로그라면, <br> 적어도 간단하게 본인이나 블로그를 소개하는 About 페이지 하나는 있어야 할것 같아서. <br></p><br><p><code>About</code> 페이지를 하나 만들어서 적용해 보려 합니다. </p><br><p>페이지에 생성후, 디테일을 한번 수정해 보겠습니다. </p><br><h2 id="About-페이지-생성하기"><a href="#About-페이지-생성하기" class="headerlink" title="About 페이지 생성하기"></a>About 페이지 생성하기</h2><br><p><code>blog</code> 폴더에서, 아래 명령어를 실행하여, <code>about</code>페이지를 생성합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page about</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><p>생성후에는, <code>blog/source/about/</code>폴더에 <code>index.md</code>가 생성 되어 있습니다. </p><p><br><br></p><h2 id="blog-source-about-index-md파일-수정"><a href="#blog-source-about-index-md파일-수정" class="headerlink" title="blog/source/about/index.md파일 수정"></a><code>blog/source/about/index.md</code>파일 수정</h2><br><p><code>categories</code>나 <code>tags</code> 페이지를 만들었을때와 비슷하게 진행 해봅니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: about</span><br><span class="line">date: 2020-03-30 20:33:44</span><br><span class="line"><span class="built_in">type</span>: about</span><br><span class="line">---</span><br></pre></td></tr></table></figure><br><br><h2 id="Themes-config-yml-파일에서-메뉴-활성화-하기"><a href="#Themes-config-yml-파일에서-메뉴-활성화-하기" class="headerlink" title="Themes _config.yml 파일에서 메뉴 활성화 하기"></a>Themes _config.yml 파일에서 메뉴 활성화 하기</h2><br><br><p><code>blog/themes/hexo-theme-next/_config.yml</code>파일을 열어서, <br></p><p><code>menu</code>부분에, <code>about</code>부분을 활성화 시켜줍니다. <br></p><p>uncomment 처리만 해주면 되겟죠? ㅎㅎ  </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  archives: /archives/ || archive</span><br><span class="line">  <span class="comment">#schedule: /schedule/ || calendar</span></span><br><span class="line">  <span class="comment">#sitemap: /sitemap.xml || sitemap</span></span><br></pre></td></tr></table></figure><br><br><p>그런데.. 여기까지 하고 <code>hexo runserver</code> 로 로컬에 들어가서, about 페이지를 확인해 보니, </p><br><p><strong>사이드 메뉴에는 about 메뉴가 뜨는데, 클릭하면, 빈 페이지가 표시됩니다.</strong></p><br><img src="/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/image1.png" class=""><br><blockquote><p>어디에 내용을 채워줘야 빈페이지가 표시 되지 않을까요? </p></blockquote><p><br><br></p><h2 id="index-md-파일에-내용-추가하기"><a href="#index-md-파일에-내용-추가하기" class="headerlink" title="index.md 파일에 내용 추가하기"></a>index.md 파일에 내용 추가하기</h2><br><p><code>blog/source/about/index.md</code> 파일에, about 페이지에 들어갈 내용을 추가합니다.</p><br><img src="/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/image2.png" class=""><br><br><blockquote><p> <code>index.md</code> 파일에 내용을 추가하면, </p><p>about 페이지에 내용이 추가 되어 표시됩니다! </p></blockquote><p><br><br></p><img src="/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/image3.png" class=""><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p><code>about</code>페이지를 생성 하였고, 내용도 추가 하였습니다. <br></p><p>추가된 내용은 잘 표시가 되는것 같으니, 내용을 더 채워 줘야 겠습니다~ </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/03/30/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-About-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A7%8C%EB%93%A4%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo 블로그 - 블로그내에 검색 기능 추가</title>
      <link>http://djangojeng-e.github.io/2020/03/26/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%82%B4%EC%97%90-%EA%B2%80%EC%83%89-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80/</link>
      <guid>http://djangojeng-e.github.io/2020/03/26/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%82%B4%EC%97%90-%EA%B2%80%EC%83%89-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80/</guid>
      <pubDate>Thu, 26 Mar 2020 13:29:45 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;블로그내-검색기능-추가&quot;&gt;&lt;a href=&quot;#블로그내-검색기능-추가&quot; class=&quot;headerlink&quot; title=&quot;블로그내 검색기능 추가&quot;&gt;&lt;/a&gt;블로그내 검색기능 추가&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;블로그내에 검색기능을 추가하려 합니다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;카테고리나, 태그로 검색해도 괜찮지만, 포스트들을 검색할수 있는 기능이 있으면 좋을것 같습니다 &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;hexo-generator-searchdb-설치하기&quot;&gt;&lt;a href=&quot;#hexo-generator-searchdb-설치하기&quot; class=&quot;headerlink&quot; title=&quot;hexo-generator-searchdb 설치하기&quot;&gt;&lt;/a&gt;hexo-generator-searchdb 설치하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;search data generator&lt;/code&gt;플러그인을 설치 해줍니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;해당 플러그인은 여러분의 포스트의 필요한 데이터를 포함하고 있는 &lt;code&gt;검색 인덱스 파일&lt;/code&gt;을 생성하는데 사용하고. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;이 파일들을을 이용해서, 블로그내에 로컬 서치 엔진 으로 사용합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="블로그내-검색기능-추가"><a href="#블로그내-검색기능-추가" class="headerlink" title="블로그내 검색기능 추가"></a>블로그내 검색기능 추가</h1><br><p>블로그내에 검색기능을 추가하려 합니다. <br></p><p>카테고리나, 태그로 검색해도 괜찮지만, 포스트들을 검색할수 있는 기능이 있으면 좋을것 같습니다 </p><br><br><h2 id="hexo-generator-searchdb-설치하기"><a href="#hexo-generator-searchdb-설치하기" class="headerlink" title="hexo-generator-searchdb 설치하기"></a>hexo-generator-searchdb 설치하기</h2><br><p><code>search data generator</code>플러그인을 설치 해줍니다. </p><p><br>해당 플러그인은 여러분의 포스트의 필요한 데이터를 포함하고 있는 <code>검색 인덱스 파일</code>을 생성하는데 사용하고. <br></p><p>이 파일들을을 이용해서, 블로그내에 로컬 서치 엔진 으로 사용합니다. </p><br><p><br><a id="more"></a></p><p>우선, 아래 명령어를 실앻해서 플러그인을 설치해줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure><br><h2 id="config-yml-수정하기"><a href="#config-yml-수정하기" class="headerlink" title="_config.yml 수정하기"></a>_config.yml 수정하기</h2><br><p>위 과정에서 플러그인을 정상적으로 설치했으면, <code>blog/_config.yml</code>파일을 열어줍니다. </p><br><p>파일을 연뒤에, 밑에 코드를 맨 아래에 추가해줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search </span></span><br><span class="line"><span class="comment"># search </span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: <span class="literal">true</span></span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure><br><br><h2 id="테마폴더내에-config-yml-수정하기"><a href="#테마폴더내에-config-yml-수정하기" class="headerlink" title="테마폴더내에 _config.yml 수정하기"></a>테마폴더내에 _config.yml 수정하기</h2><br><br><p><code>blog/themes/hexo-next-theme/_config.yml</code>파일을 열어줍니다. </p><br><br><p><code>local_search</code>부분을 아래와 같이 수정해 줍니다. </p><p><code>enable</code>값을 <code>true</code>로 변경해줍니다. </p><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Local Search</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/theme-next/hexo-generator-searchdb</span></span><br><span class="line">local_search:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="comment"># If auto, trigger search by changing input.</span></span><br><span class="line">  <span class="comment"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: manual</span><br><span class="line">  <span class="comment"># Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br><span class="line">  <span class="comment"># Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Preload the search data when the page loads.</span></span><br><span class="line">  preload: <span class="literal">false</span></span><br></pre></td></tr></table></figure><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><br><p>블로그에 검색기능이 잘 반영된것 같습니다. hexo 라고 검색하니까. </p><p>잘 작동합니다. </p><br><img src="/2020/03/26/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%82%B4%EC%97%90-%EA%B2%80%EC%83%89-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80/image1.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/03/26/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%EB%B8%94%EB%A1%9C%EA%B7%B8%EB%82%B4%EC%97%90-%EA%B2%80%EC%83%89-%EA%B8%B0%EB%8A%A5-%EC%B6%94%EA%B0%80/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo 블로그 - SEO 세팅하기</title>
      <link>http://djangojeng-e.github.io/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 22 Mar 2020 11:05:14 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;NeXT-Theme-검색엔진-최적화&quot;&gt;&lt;a href=&quot;#NeXT-Theme-검색엔진-최적화&quot; class=&quot;headerlink&quot; title=&quot;NeXT Theme 검색엔진 최적화&quot;&gt;&lt;/a&gt;NeXT Theme 검색엔진 최적화&lt;/h1&gt;&lt;h2 id=&quot;검색엔진-최적화-SEO-시작&quot;&gt;&lt;a href=&quot;#검색엔진-최적화-SEO-시작&quot; class=&quot;headerlink&quot; title=&quot;검색엔진 최적화 (SEO) 시작&quot;&gt;&lt;/a&gt;검색엔진 최적화 (SEO) 시작&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;블로그이든, 홈페이지든, 쇼핑몰이든, 어떠한 서비스 이든, 만들어 놓기만 하고, &lt;br&gt;&lt;/p&gt;
&lt;p&gt;사람들이 검색해서 찾지 못한다면, 사용자들이 사용할수 없겠죠? ㅎㅎ &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;사용자들이 웹에 검색해서 원하는 컨텐츠들을 우리 블로그에서 찾을수 있도록 하기 위해서,&lt;/strong&gt; &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;우리는 모두  블로그나, 웹사이트 혹은 어떠한 웹서비스를 검색엔진에 최적화를 시켜놓아야 합니다. &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;br&gt;점점 저의 블로그도 뼈대를 갖춰 가고 있으니, 사람들이 필요한 정보를 검색해서 찾을수 있게. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;돈을 들여서 검색광고를 하면, 더 많은 사용자들에게 찾아지겠지만, 이 블로그는 어디까지나 공부가 목적이니. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;비용을 전혀 들이지 않고 검색이 잘 나올수 있게.  SEO 세팅을 좀 해보겠습니다 ㅎㅎ &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;&lt;strong&gt;SEO (Search Engine Optimization)&lt;/strong&gt;  과정을 알아봅니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="NeXT-Theme-검색엔진-최적화"><a href="#NeXT-Theme-검색엔진-최적화" class="headerlink" title="NeXT Theme 검색엔진 최적화"></a>NeXT Theme 검색엔진 최적화</h1><h2 id="검색엔진-최적화-SEO-시작"><a href="#검색엔진-최적화-SEO-시작" class="headerlink" title="검색엔진 최적화 (SEO) 시작"></a>검색엔진 최적화 (SEO) 시작</h2><br><p>블로그이든, 홈페이지든, 쇼핑몰이든, 어떠한 서비스 이든, 만들어 놓기만 하고, <br></p><p>사람들이 검색해서 찾지 못한다면, 사용자들이 사용할수 없겠죠? ㅎㅎ <br></p><p><br><br></p><blockquote><p><strong>사용자들이 웹에 검색해서 원하는 컨텐츠들을 우리 블로그에서 찾을수 있도록 하기 위해서,</strong> </p><br><p>우리는 모두  블로그나, 웹사이트 혹은 어떠한 웹서비스를 검색엔진에 최적화를 시켜놓아야 합니다. <br><br></p></blockquote><p><br>점점 저의 블로그도 뼈대를 갖춰 가고 있으니, 사람들이 필요한 정보를 검색해서 찾을수 있게. <br></p><p>돈을 들여서 검색광고를 하면, 더 많은 사용자들에게 찾아지겠지만, 이 블로그는 어디까지나 공부가 목적이니. <br></p><br><p>비용을 전혀 들이지 않고 검색이 잘 나올수 있게.  SEO 세팅을 좀 해보겠습니다 ㅎㅎ </p><br><br><p><strong>SEO (Search Engine Optimization)</strong>  과정을 알아봅니다. </p><br><br><a id="more"></a> <br><h2 id="Config-파일에-SEO-Settings"><a href="#Config-파일에-SEO-Settings" class="headerlink" title="Config 파일에 SEO Settings"></a>Config 파일에 SEO Settings</h2><br><br><p><code>blog/themes/hexo-theme-next/_config.yml</code>을 열어줍니다. </p><br><br><p>NeXT 테마는 기본적인 SEO  설정을 할수 있게끔 만들어 주고 있습니다. <br></p><br><p>저는, 아래와 같이 설정해주었습니다. </p><br><br><p>*<em>사실은,,, canonical: true 부분은 기본값이 아닌데, 다른 블로그 참조해서 갖다가 붙여놨습니다; *</em></p><p>잘 동작하는지 안하는지 잘 모르겠으나. 일단 따라해 봅니다. </p><p><br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"><span class="comment"># SEO Settings</span></span><br><span class="line"><span class="comment"># ---------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable Baidu transformation on mobile devices.</span></span><br><span class="line">disable_baidu_transformation: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Set a canonical link tag in your hexo, you could use it for your SEO of blog. </span></span><br><span class="line"><span class="comment"># https://support.google.com/webmasters/anser/139066</span></span><br><span class="line"><span class="comment"># Remember to set up your URL in Hexo '_config.yml' (e.g. url: http://yourdomain.com) </span></span><br><span class="line">canonical: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Change headers hierarchy on site-subtitle (will be main site description) and on all post / page titles for better SEO-optimization.</span></span><br><span class="line">seo: <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># If true, site-subtitle will be added to index page.</span></span><br><span class="line"><span class="comment"># Remember to set up your site-subtitle in Hexo `_config.yml` (e.g. subtitle: Subtitle)</span></span><br><span class="line">index_with_subtitle: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Automatically add external URL with Base64 encrypt &amp; decrypt.</span></span><br><span class="line">exturl: <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Google Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.google.com/webmasters</span></span><br><span class="line">google_site_verification:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Bing Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://www.bing.com/webmaster</span></span><br><span class="line">bing_site_verification:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Yandex Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://webmaster.yandex.ru</span></span><br><span class="line">yandex_site_verification:</span><br><span class="line"></span><br><span class="line"><span class="comment"># Baidu Webmaster tools verification.</span></span><br><span class="line"><span class="comment"># See: https://ziyuan.baidu.com/site</span></span><br><span class="line">baidu_site_verification:</span><br></pre></td></tr></table></figure><br><p>표준 링크를 생성해주는 <code>canonical</code>과 검색엔진 최적화를 위한 <code>seo</code>기능을 활성화 되었고.<br></p><br><p><code>exturl</code>기능은 외부 링크들이 크롤러에 수집되지 않게 하는 기능을 합니다. <br><br></p><h2 id="hexo-generator-feed-설치하기"><a href="#hexo-generator-feed-설치하기" class="headerlink" title="hexo-generator-feed 설치하기"></a>hexo-generator-feed 설치하기</h2><br><p>아래 명령어를 실행해서, 플러그인을 설치합니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><br><br><p><code>blog/_config.yml</code>파일에 아래 내용을 추가합니다. </p><p>피드 종류를 정할 수 있습니다만, 저는 제가 보았던 블로그를 참조하여. <code>rss2</code>로 설정해 주었습니다. </p><br><blockquote><p>네이버를 사용하려 하면, rss2 가 더 유리 하다 합니다 </p></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: rss2     <span class="comment">#피드의 종류(atom/rss2)</span></span><br><span class="line">  path: rss2.xml  <span class="comment">#피드가 생성될 경로</span></span><br><span class="line">  <span class="built_in">limit</span>: 20      <span class="comment">#최신 포스트의 개수(0 또는 false 설정시 모든 포스트)</span></span><br></pre></td></tr></table></figure><br><h2 id="hexo-generator-seo-friendly-sitemap-설치하기"><a href="#hexo-generator-seo-friendly-sitemap-설치하기" class="headerlink" title="hexo-generator-seo-friendly-sitemap 설치하기"></a>hexo-generator-seo-friendly-sitemap 설치하기</h2><br><p>아래 명령어를 실행하여, 플러그인을 설치해줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-seo-friendly-sitemap --save</span><br></pre></td></tr></table></figure><br><p>설치가 끝났으면, <code>blog/_config.yml</code>파일에 아래 내용을 추가해줍니다. </p><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml   <span class="comment">#생성될 경로</span></span><br><span class="line">  tag: <span class="literal">false</span>          <span class="comment">#sitemap에 tag 포함 여부</span></span><br><span class="line">  category: <span class="literal">false</span>     <span class="comment">#sitemap에 category 포함 여부</span></span><br></pre></td></tr></table></figure><br><br><h2 id="hexo-generator-robottxt-설치하기"><a href="#hexo-generator-robottxt-설치하기" class="headerlink" title="hexo-generator-robottxt 설치하기"></a>hexo-generator-robottxt 설치하기</h2><br><p><code>robots.txt</code>파일을 사이트에 생성해줍니다. 이 파일 생성도, 자동으로 생성해주는 plugin을 설치해서 생성해 줍니다. 참 쉽습니다. </p><br><p>참고로, <code>robots.txt</code> 파일은 <code>서치엔진</code>이나 <code>크로울러</code>들에게 어떤 페이지나 파일들을 요청할수 있는지 혹은 없는지에 대한 정보를 줍니다. </p><br><p>아래 커맨드를 입력하여, 플러그인을 설치해줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-robotstxt --save</span><br></pre></td></tr></table></figure><br><br><p><code>blog/_config.yml</code> 파일을 열어서, 맨 밑에다가 아래 내용을 추가 해줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Robots.txt</span></span><br><span class="line">robotstxt:</span><br><span class="line">  useragent: <span class="string">"*"</span>    <span class="comment"># 적용시킬 검색엔진</span></span><br><span class="line">  allow:            <span class="comment"># 허용할 페이지</span></span><br><span class="line">    - /</span><br><span class="line">  sitemap: https://djangojeng-e.github.io/sitemap.xml</span><br></pre></td></tr></table></figure><p><br><br></p><blockquote><p>이 robots.txt 내용을 추가해주면, Github Banner 의 위치가 </p><p>깨져버립니다. 이 부분은 추후에 해결해 보려 합니다. </p></blockquote><br><br><h2 id="구글-웹마스터-인증하기"><a href="#구글-웹마스터-인증하기" class="headerlink" title="구글 웹마스터 인증하기"></a>구글 웹마스터 인증하기</h2><p>구글 웹마스터에 접속해서, 오른쪽 메뉴에 자신의 블로그 사이트 URL  을 입력합니다. </p><br><br><p>입력하면, 아래와 같이, 소유권을 인증 하라고 나오는데. </p><p>저는, head 태그 안에, <code>&lt;meta name=&quot;google-site-verification&quot; content=&lt;content&gt;</code> 코드를 넣어주고 소유권을 인증 해보려 합니다. </p><br><img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image1.png" class=""><br><p><code>blog/themes/hexo-theme-next/layout/_layout.swig</code> 파일을 열어서, </p><p><code>&lt;head&gt;</code>부분에, 구글에서 생성된 메타 테그를 추가해 줍니다. </p><img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image2.png" class=""><br><br><br><p>Generate 하고 Deploy 해줍시다. </p><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo generate </span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><br><p>다시 구글로 돌아가서, <code>verify</code> 버튼을 누르면, 소유권이 인증 됩니다. <br></p><br><img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image3.png" class=""><br><br><p><code>Properties</code> 확인하기로 들어가면, 구글 메인 메뉴가 나오고. </p><p><code>&lt;br&gt; 사이드바에 있는 sitemap</code> 메뉴를 클릭하고, 사이트맵 두개를 추가해 줍니다. </p><br><p>저 같은 경우는, 아래와 같이 입력해주니까. 등록이 되었습니다. </p><br><p><code>https://&lt;username&gt;.github.io/sitemap</code> </p><p><code>https://&lt;username&gt;/github.io/rss</code> </p><br><img src="/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/image4.png" class=""><p><br><br></p><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><code>SEO</code> 기본 설정을 다 마친듯 합니다. <br></p><p>근데.. 무언가 굉장히 찝찝하네요. 잘 모르겠어요 뭐가 된건지 안된건지.. </p><br><p>일단 넘어가도록 하고, 나중에 뭐가 이루어 진건지 안 이루어 진건지 확인 해봐야겠네요. </p><p><br><br></p><p><strong>그것보다 더 큰 문제는,  SEO 설정을 진행 했더니.. 깃헙 베너가 깨져서 나옵니다. <br></strong></p><p><strong>해당 에러는 천천히 어떻게 고치는지 알아내려 합니다….</strong></p><p>3월 23일에, 에러를 찾아 냈습니다. _config.yml 파일에 <code>exturl</code>파일 설정을 <code>false</code>로 바꾸니까 잘 됩니다! </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/03/22/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-SEO-%EC%84%B8%ED%8C%85%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Google 에드센스 시작하기 - 1</title>
      <link>http://djangojeng-e.github.io/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/</link>
      <guid>http://djangojeng-e.github.io/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/</guid>
      <pubDate>Fri, 20 Mar 2020 12:46:55 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Google-에드센스-시작하기-1&quot;&gt;&lt;a href=&quot;#Google-에드센스-시작하기-1&quot; class=&quot;headerlink&quot; title=&quot;Google 에드센스 시작하기 - 1&quot;&gt;&lt;/a&gt;Google 에드센스 시작하기 - 1&lt;/h1&gt;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Google-에드센스-계정-Sign-Up&quot;&gt;&lt;a href=&quot;#Google-에드센스-계정-Sign-Up&quot; class=&quot;headerlink&quot; title=&quot;Google 에드센스 계정 Sign Up&quot;&gt;&lt;/a&gt;Google 에드센스 계정 Sign Up&lt;/h2&gt;&lt;br&gt;



&lt;p&gt;&lt;a href=&quot;https://www.google.com/adsense/signup/new/lead&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.google.com/adsense/signup/new/lead&lt;/a&gt; 에 접속해서. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;에드 센스를 시작합니다. &lt;/p&gt;
&lt;br&gt; 

&lt;img src=&quot;/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image1.png&quot; class=&quot;&quot;&gt;




&lt;br&gt;



&lt;h2 id=&quot;Google-Adsense-Signup-진행&quot;&gt;&lt;a href=&quot;#Google-Adsense-Signup-진행&quot; class=&quot;headerlink&quot; title=&quot;Google Adsense Signup 진행&quot;&gt;&lt;/a&gt;Google Adsense Signup 진행&lt;/h2&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Google-에드센스-시작하기-1"><a href="#Google-에드센스-시작하기-1" class="headerlink" title="Google 에드센스 시작하기 - 1"></a>Google 에드센스 시작하기 - 1</h1><p><br><br></p><h2 id="Google-에드센스-계정-Sign-Up"><a href="#Google-에드센스-계정-Sign-Up" class="headerlink" title="Google 에드센스 계정 Sign Up"></a>Google 에드센스 계정 Sign Up</h2><br><p><a href="https://www.google.com/adsense/signup/new/lead" target="_blank" rel="noopener">https://www.google.com/adsense/signup/new/lead</a> 에 접속해서. </p><br><p>에드 센스를 시작합니다. </p><br> <img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image1.png" class=""><br><h2 id="Google-Adsense-Signup-진행"><a href="#Google-Adsense-Signup-진행" class="headerlink" title="Google Adsense Signup 진행"></a>Google Adsense Signup 진행</h2><a id="more"></a><br><blockquote><br><p>사이트 URL 과 이메일 주소를 입력해 줍니다. </p><br></blockquote><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image2.png" class=""><!-- more --><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image3.png" class=""><br><blockquote><p>진행 하다보면, 지역 설정을 하고. </p><p>약관에 동의 후에. 다음 단계로 넘어가는 단계가 오는데. </p><p>아래와 같이 다음 단계로 넘어갑니다. </p></blockquote><br><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image4.png" class=""><p><br><br></p><p><code>CREATE ACCOUNT</code> 버튼을 눌러서 다음 단계로 진행합니다. </p><p><br><br></p><p>다음 단계로 넘어가면,  <code>AdSense Code</code>가 나오고. <br></p><p>이 코드를 블로그의 <code>&lt;head&gt;&lt;/head&gt;</code> 사이에 넣어줘야 한다 합니다. </p><p><br><br></p><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image5.png" class=""><br><p>아래와 같이 에드센스 코드를 카피해 놓고. 블로그 사이트의 <code>&lt;head&gt;</code>태그 안에 넣어주는 작업을 해야 한답니다. </p><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script data-ad-client=<span class="string">"ca-pub-9284986247336734"</span> <span class="keyword">async</span> src=<span class="string">"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><br><p>일반 블로그도 아니고, 깃헙 블로그라서, <code>index.html</code>이 어디에 있는지.. 전혀 감이 안와서;;; </p><br><p><strong>해당 코드를 어디에 붙여야 되는지 몰랐는데.</strong> <br></p><p><strong><code>&lt;head&gt;</code>태그에 넣어주기 위해서, 아래 과정으로 넘어갑니다.</strong></p><br><h3 id="layout-swig-파일을-찾기"><a href="#layout-swig-파일을-찾기" class="headerlink" title="_layout.swig 파일을 찾기"></a><code>_layout.swig</code> 파일을 찾기</h3><p><br><br></p><p>에드센스 코드를 블로그에 추가해 주기 위해서,<code>hexo-theme-next/layout/_layout.swig</code> 파일을 엽니다. </p><br><h2 id="에드센스-코드는-lt-head-gt-태그-안에-넣어주기"><a href="#에드센스-코드는-lt-head-gt-태그-안에-넣어주기" class="headerlink" title="에드센스 코드는 &lt;head&gt;태그 안에 넣어주기"></a>에드센스 코드는 <code>&lt;head&gt;</code>태그 안에 넣어주기</h2><br><p>저는, <code>&lt;head&gt;</code> 밑에,   밑에 붙여 놔줬습니다;;; </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;head&gt;</span><br><span class="line">  &#123;&#123; partial(<span class="string">'_partials/head/head.swig'</span>, &#123;&#125;, &#123;cache: theme.cache.enable&#125;) &#125;&#125;</span><br><span class="line">  </span><br><span class="line">  &lt;script data-ad-client=<span class="string">"ca-pub-9284986247336734"</span> async src=<span class="string">"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><br><br></p><p>웹페이지를 생성하고, 구글 코드가 있는지 확인 합니다. </p><p><br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br><span class="line"></span><br><span class="line">hexo d </span><br><span class="line"></span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p><br><br></p><blockquote><p>브라우저로 접속해서 view source code  기능을 이용해서 소스를 보면. </p><p>해당 스크립트가 <head>  영역안에 있는걸 확인 할수 있습니다. </p></blockquote><br><br><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image6.png" class=""><br><br><blockquote><p>사이트 소스에 구글 에드센스 스크립트 코드를 붙여놨으니, </p><p>구글 에스센스 Home 에, <code>코드를 내 사이트에 붙여 놨습니다</code> 라는곳에 체크 박스에 체크를 하고 </p><p>완료 버튼을 누릅니다 </p></blockquote><br><br><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image7.png" class=""><br><br><p><strong>구글에서 코드를 찾았다는 메시지가 아래와 같이 나오고.</strong> </p><br><p>계정 활성화를 이제 시작할수 있다고 나옵니다. 보통 하루 이내에 완료 되지만, </p><p>어떤때는 하루보다 오래 걸린다네요. 다 완료되면, 이메일로 알려준다 하네요. </p><br><p><br><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image8.png" class=""></p><p><br><br></p><blockquote><p><strong><code>GOT IT</code> 을 꾹 눌러줍니다</strong> </p></blockquote><br><h2 id="Google-Adsense-리뷰-기다리기"><a href="#Google-Adsense-리뷰-기다리기" class="headerlink" title="Google Adsense 리뷰 기다리기"></a>Google Adsense 리뷰 기다리기</h2><br> <p>위의 과정을  다 마치면, 사이트를 리뷰 하겠다는 메시지가 뜹니다. </p><p>며칠 걸릴수도 있고, 2주까지 걸릴수 있다네요 ㅎㄷㄷ </p><br><br><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/image9.png" class=""><br><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>구글 에드센스 추가하기를 다룬 블로그는 많은데. 아래의 이유로.. 애를 좀 먹었습니다;; </p><br><ul><li>테마가 <code>NeXT</code>가 아닌경우 </li><li>위 세팅을 하나도 안해놨는데, 광고 생성 페이지 부터 시작하는 블로그 </li><li>구글 화면 캡쳐 거의 없음</li><li>기타 이유  </li></ul><br><p><strong>한 2주 승인 걸린다 하니, 에드센스 승인이 날때까지 기다렸다가 다음 포스팅 진행 하겠습니다.</strong> </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Google 에드센스 시작하기 - 2</title>
      <link>http://djangojeng-e.github.io/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/</link>
      <guid>http://djangojeng-e.github.io/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/</guid>
      <pubDate>Fri, 20 Mar 2020 02:40:31 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Google-에드센스-승인전-수정사항&quot;&gt;&lt;a href=&quot;#Google-에드센스-승인전-수정사항&quot; class=&quot;headerlink&quot; title=&quot;Google 에드센스 승인전 수정사항&quot;&gt;&lt;/a&gt;Google 에드센스 승인전 수정사항&lt;/h1&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅을 마치면서, 구글 리뷰가 한 2주 정도 걸릴것 같았는데. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;아직 사이트 검토중인데, &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이메일이 하나 날라왔습니다. &lt;code&gt;계정 승인에 앞서 수정이 필요한 사항이 있음&lt;/code&gt; 이라는 타이틀로 말이죠  &lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;img src=&quot;/home/dhkang/.config/Typora/typora-user-images/image-20200403072425033.png&quot; alt=&quot;image-20200403072425033&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;h2 id=&quot;Google-에드센스-계정-승인-실패&quot;&gt;&lt;a href=&quot;#Google-에드센스-계정-승인-실패&quot; class=&quot;headerlink&quot; title=&quot;Google 에드센스 계정 승인 실패&quot;&gt;&lt;/a&gt;Google 에드센스 계정 승인 실패&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;이메일을 열어보니, 에드센스 정책을 위반했다고.. 승인이 되지 않았다네요;; &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Google-에드센스-승인전-수정사항"><a href="#Google-에드센스-승인전-수정사항" class="headerlink" title="Google 에드센스 승인전 수정사항"></a>Google 에드센스 승인전 수정사항</h1><br><p>지난 포스팅을 마치면서, 구글 리뷰가 한 2주 정도 걸릴것 같았는데. <br></p><p>아직 사이트 검토중인데, </p><br><p>이메일이 하나 날라왔습니다. <code>계정 승인에 앞서 수정이 필요한 사항이 있음</code> 이라는 타이틀로 말이죠  <br></p><br><p><img src="/home/dhkang/.config/Typora/typora-user-images/image-20200403072425033.png" alt="image-20200403072425033"></p><p><br><br><br></p><h2 id="Google-에드센스-계정-승인-실패"><a href="#Google-에드센스-계정-승인-실패" class="headerlink" title="Google 에드센스 계정 승인 실패"></a>Google 에드센스 계정 승인 실패</h2><br><br><p>이메일을 열어보니, 에드센스 정책을 위반했다고.. 승인이 되지 않았다네요;; </p><a id="more"></a><p><br><br></p><blockquote><p> 가치 있는 인벤토리: 콘텐츠 없음 </p></blockquote><br><p>위 사유로 인해 승인이 되지 않았다고 합니다. </p><p><br><br></p><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/image1.png" class=""><br><br><p>아무래도, 포스팅이 너무 없어서 에드센스 승인이 나지 않은것 같은데.. <br></p><p>여기저기 찾아보니까. 포스팅은 한 20개 이상 정도는 있어줘야 승인이 난다 하네요. </p><p><br><br></p><blockquote><p><strong>포스트를 더 해보고, 에드센스 신청을 해야될것 같습니다.</strong> </p></blockquote><br><h2 id="수정사항-가이드라인"><a href="#수정사항-가이드라인" class="headerlink" title="수정사항 가이드라인"></a>수정사항 가이드라인</h2><br><p>자세한 내용은 메일에 써져 있듯이, 아래 링크들을 따라 확인해보면 된답니다;;; </p><br><ul><li><p>고품질 사이트를 만들기 위한 정책 도움말 1부</p><p><a href="https://adsense.googleblog.com/2012/09/tips-for-creating-high-quality-sites.html" target="_blank" rel="noopener">https://adsense.googleblog.com/2012/09/tips-for-creating-high-quality-sites.html</a></p></li><li><p>고품질 사이트를 만들기 위한 정책 도움말 2부 </p><p><a href="https://adsense.googleblog.com/2012/04/tips-for-creating-high-quality-sites.html" target="_blank" rel="noopener">https://adsense.googleblog.com/2012/04/tips-for-creating-high-quality-sites.html</a></p></li><li><p>웹마스터 품질 가이드라인 </p><p><a href="https://support.google.com/adsense/answer/1348737" target="_blank" rel="noopener">https://support.google.com/adsense/answer/1348737</a></p></li><li><p>애드센스 프로그램 정책 </p><p><a href="https://support.google.com/adsense/answer/48182?utm_source=crs&amp;utm_medium=email&amp;utm_campaign=notification" target="_blank" rel="noopener">https://support.google.com/adsense/answer/48182?utm_source=crs&amp;utm_medium=email&amp;utm_campaign=notification</a></p></li></ul><p><br><br></p><p><strong>추가로, 콘텐츠 정책 이나 고객센터를 방문해서 알아봅니다.</strong></p><br><p>저같은 경우는, 콘텐츠 불충분 일거 같습니다;; </p><br><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/image3.png" class=""><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br> <p>구글에 이것저것 가이드라인이 많이 나와 있는데. <br><br></p><p>차근차근 읽어보면서 진행 해볼까 합니다. </p><p><br><br></p><blockquote><br><p>*<em>일단, 컨텐츠를 많이 늘려야 하는것 같으니까 ㅎㅎ *</em></p><p><br><strong>조금 더 포스팅을 많이 해보고, 다시 승인 요청 해볼까 합니다.</strong> </p></blockquote><p><br><br></p><img src="/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/image2.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/03/20/Google-%EC%97%90%EB%93%9C%EC%84%BC%EC%8A%A4-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo 블로그 포스트에 이미지 사용 - 데모</title>
      <link>http://djangojeng-e.github.io/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9-%EB%8D%B0%EB%AA%A8/</link>
      <guid>http://djangojeng-e.github.io/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9-%EB%8D%B0%EB%AA%A8/</guid>
      <pubDate>Thu, 19 Mar 2020 13:20:32 GMT</pubDate>
      <description>
      
        
        
          &lt;br&gt; 

&lt;p&gt;이미지 사용1 &lt;/p&gt;
&lt;br&gt;

&lt;img src=&quot;/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%
        
      
      </description>
      
      
      <content:encoded><![CDATA[<br> <p>이미지 사용1 </p><br><img src="/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9-%EB%8D%B0%EB%AA%A8/terminal_capture.png" class=""><p><br><br></p><p>이미지 사용2 </p><br><br><img src="/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9-%EB%8D%B0%EB%AA%A8/terminal_capture2.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9-%EB%8D%B0%EB%AA%A8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo 블로그 - 포스트에 이미지 사용</title>
      <link>http://djangojeng-e.github.io/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9/</link>
      <guid>http://djangojeng-e.github.io/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9/</guid>
      <pubDate>Thu, 19 Mar 2020 13:09:56 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;포스트에-이미지-삽입하기&quot;&gt;&lt;a href=&quot;#포스트에-이미지-삽입하기&quot; class=&quot;headerlink&quot; title=&quot;포스트에 이미지 삽입하기&quot;&gt;&lt;/a&gt;포스트에 이미지 삽입하기&lt;/h1&gt;&lt;br&gt; 

&lt;p&gt;그동안 포스팅을 하면서, 큰 실수를 하고 있었는데. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;여태껏 포스트에 올린 스크린 캡쳐라던지, 이미지들은 모두 반영이 되질 않았습니다. &lt;br&gt; &lt;br&gt;&lt;/p&gt;
&lt;p&gt;현재 저는  &lt;code&gt;typora&lt;/code&gt;라는 마크다운 프로그램을 사용하고 있는데. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;이미지를 그냥 &lt;code&gt;drag and drop&lt;/code&gt;하면 포스트에 바로 반영되는것 같아 보여서, 그냥 넘어갔었는데. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;블로그 올라간거 보니까. 이미지가 모두 안올라 갔었습니다.&lt;/strong&gt; &lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이점을 해결 하기 위해서, 오늘 포스팅을 합니다. &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="포스트에-이미지-삽입하기"><a href="#포스트에-이미지-삽입하기" class="headerlink" title="포스트에 이미지 삽입하기"></a>포스트에 이미지 삽입하기</h1><br> <p>그동안 포스팅을 하면서, 큰 실수를 하고 있었는데. <br></p><p>여태껏 포스트에 올린 스크린 캡쳐라던지, 이미지들은 모두 반영이 되질 않았습니다. <br> <br></p><p>현재 저는  <code>typora</code>라는 마크다운 프로그램을 사용하고 있는데. </p><br><br><p>이미지를 그냥 <code>drag and drop</code>하면 포스트에 바로 반영되는것 같아 보여서, 그냥 넘어갔었는데. <br></p><p><strong>블로그 올라간거 보니까. 이미지가 모두 안올라 갔었습니다.</strong> <br></p><br><p>이점을 해결 하기 위해서, 오늘 포스팅을 합니다. </p><a id="more"></a><br><h2 id="config-yml-파일-수정하기"><a href="#config-yml-파일-수정하기" class="headerlink" title="_config.yml 파일 수정하기"></a>_config.yml 파일 수정하기</h2><br><p>블로그 폴더의 <code>_config.yml</code> 파일을 수정합니다. </p><p><br> 아래, post_asset_folder 값을  <code>true</code>로 바꾸어 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">post_asset_folder: <span class="literal">true</span></span><br></pre></td></tr></table></figure><br><p>이 값이 <code>true</code>로 설정되면, 포스트 마다 포스트 제목과 같은 asset 디렉토리가 생깁니다. </p><br><h2 id="포스트에-이미지-삽입하기-1"><a href="#포스트에-이미지-삽입하기-1" class="headerlink" title="포스트에 이미지 삽입하기"></a>포스트에 이미지 삽입하기</h2><br> <p><code>Hexo-블로그-포스트에-이미지-사용-데모</code> 라는 타이틀을 가진 포스트를 생성해봅니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new <span class="string">"Hexo-블로그-포스트에-이미지-사용-데모"</span></span><br></pre></td></tr></table></figure><p><br> <br></p><p><code>blog/source/_post</code>폴더에 들어가면, <br>새로 생성된 포스트의 제목과 같은 이름의 폴더가 생성된걸 확인할수 있습니다. <br></p><br><br><p><code>blog/source/_post/Hexo-블로그-포스트에-이미지-사용-데모</code> 폴더에, <br></p><p><code>terminal_capture.png</code> 와 <code>terminal_capture2.png</code>파일을 넣어주었습니다. </p><br><p><strong>해당 파일들을 해당 포스트에서 사용하려면</strong>,</p><p><br><br></p><blockquote><p> 이미지 참조를 올바르게 해야 합니다. </p><p> hexo 블로그-포스트에-이미지-사용-데모 페이지에서, </p><p>아래 참조문을 사용해줍니다. </p></blockquote><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img terminal_capture.png %&#125;</span><br><span class="line">&#123;% asset_img terminal_capture2.png %&#125;</span><br></pre></td></tr></table></figure><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br> 위와 같은 방법으로, 포스트에 이미지를 넣어보고 확인해봅니다. </p><p>다음 데모 페이지를 확인 해봅니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/03/19/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%8F%AC%EC%8A%A4%ED%8A%B8%EC%97%90-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%82%AC%EC%9A%A9/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Hexo 블로그 Scaffolds 수정</title>
      <link>http://djangojeng-e.github.io/2020/03/18/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-Scaffolds-%EC%88%98%EC%A0%95/</link>
      <guid>http://djangojeng-e.github.io/2020/03/18/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-Scaffolds-%EC%88%98%EC%A0%95/</guid>
      <pubDate>Wed, 18 Mar 2020 12:00:33 GMT</pubDate>
      <description>
      
        &lt;h1 id=&quot;Scaffolds-수정&quot;&gt;&lt;a href=&quot;#Scaffolds-수정&quot; class=&quot;headerlink&quot; title=&quot;Scaffolds 수정&quot;&gt;&lt;/a&gt;Scaffolds 수정&lt;/h1&gt;&lt;br&gt;

&lt;br&gt;

&lt;p&gt;&lt;code&gt;hexo new &amp;quot;&amp;lt;포스트제목&amp;gt;&amp;quot;&lt;/code&gt; 을 입력해서 새로운 포스트를 생성하고. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;새 포스트를 생성할때 마다, 상단에,&lt;/p&gt;
 &lt;br&gt;

&lt;p&gt;아래 세부 정보를 입력하는게 귀찮았었습니다.&lt;br&gt; &lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;title: Hexo 블로그 Scaffolds 수정 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;categories:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - Hexo Blog &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;tags: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  - Scaffolds &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;date: 2020-03-10 21:00:33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;---&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;br&gt; 

&lt;p&gt;포스트를 생성할때마다, 상단 정보 입력 필드를 기본값으로 지정하고 싶다면, &lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;scaffolds&lt;/code&gt;폴더에 있는 &lt;code&gt;post.md&lt;/code&gt;파일을 수정해주면 됩니다. &lt;br&gt; &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;scaffolds&lt;/code&gt;폴더 안에 파일을 수정해 주면, &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;포스트가 생성 될때마다 상단에 자동으로 쓰여집니다&lt;/strong&gt; &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h1 id="Scaffolds-수정"><a href="#Scaffolds-수정" class="headerlink" title="Scaffolds 수정"></a>Scaffolds 수정</h1><br><br><p><code>hexo new &quot;&lt;포스트제목&gt;&quot;</code> 을 입력해서 새로운 포스트를 생성하고. </p><p><br>새 포스트를 생성할때 마다, 상단에,</p> <br><p>아래 세부 정보를 입력하는게 귀찮았었습니다.<br> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 블로그 Scaffolds 수정 </span><br><span class="line">categories:</span><br><span class="line">  - Hexo Blog </span><br><span class="line">tags: </span><br><span class="line">  - Scaffolds </span><br><span class="line">date: 2020-03-10 21:00:33</span><br><span class="line">---</span><br></pre></td></tr></table></figure><br> <p>포스트를 생성할때마다, 상단 정보 입력 필드를 기본값으로 지정하고 싶다면, <br></p><p><code>scaffolds</code>폴더에 있는 <code>post.md</code>파일을 수정해주면 됩니다. <br> </p><br><p><code>scaffolds</code>폴더 안에 파일을 수정해 주면, <br><br></p><p><strong>포스트가 생성 될때마다 상단에 자동으로 쓰여집니다</strong> </p><a id="more"></a><br><h2 id="Scaffolds-post-md-수정-하기"><a href="#Scaffolds-post-md-수정-하기" class="headerlink" title="Scaffolds/post.md 수정 하기"></a>Scaffolds/post.md 수정 하기</h2><br><p>블로그 폴더에서 <code>scaffolds</code>폴더로 이동 합니다. <br> </p><p><code>scaffolds</code>폴더 안에, <code>post.md</code> 라는 파일이 존재하는데. 이것을 아래와 같이 수정해 줍니다. </p><p><br> 수정해 주면, 앞으로 <code>post</code>를 생성할때마다, 아래 내용이 새로운 포스트 상단에 위치 하고. <br></p><p>우리는 디테일만 바꿔주면 됩니다. </p><br><p>일단 저는, 아래와 같이 수정해 줬습니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">categories:</span><br><span class="line">  -</span><br><span class="line">tags:</span><br><span class="line">  - </span><br><span class="line">---</span><br></pre></td></tr></table></figure><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><p><br> 블로그 폴더에 가서 포스트를 하나 생성합니다. <br></p><p><code>hexo new &quot;Hexo-블로그-Scaffolds-수정&quot;</code></p><br><p>포스트를 생성하고, 해당 포스트 파일을 열었을때, 상단에 <code>scaffolds/post.md</code> 에 있는 내용이 나오면. <br></p><p>성공적으로 반영 된것입니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">title: Hexo 블로그 Scaffolds 수정</span><br><span class="line">categories:</span><br><span class="line">  - null</span><br><span class="line">tags:</span><br><span class="line">  - null</span><br><span class="line">date: 2020-03-18 21:00:33</span><br><span class="line"></span><br><span class="line"><span class="comment"># 저의 경우는, 아래와 같이 categories 값과 tags 값을 바꾸어 주었습니다. </span></span><br><span class="line"></span><br><span class="line">title: Hexo 블로그 Scaffolds 수정</span><br><span class="line">categories:</span><br><span class="line">  - Hexo Blog</span><br><span class="line">tags:</span><br><span class="line">  - Scaffolds</span><br><span class="line">date: 2020-03-18 21:00:33</span><br></pre></td></tr></table></figure><br><p>참고로, <code>categories</code> 와 <code>tags</code>는 <code>null</code> 값으로 지정 되어 있는데. <br></p><p>본인이 사용할 값을 입력해 주면 됩니다. </p><hr><br><p>새로운 포스트를 이렇게 써보고, <code>hexo server</code>를 실행하고 포스트가 잘 생성되는지 확인해 보러 갑니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/03/18/Hexo-%EB%B8%94%EB%A1%9C%EA%B7%B8-Scaffolds-%EC%88%98%EC%A0%95/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
