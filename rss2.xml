<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Sat, 03 Oct 2020 08:25:57 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Django Forms 5편 - Django Form Class</title>
      <link>http://djangojeng-e.github.io/2020/10/03/Django-Forms-5%ED%8E%B8-Django-Form-Class/</link>
      <guid>http://djangojeng-e.github.io/2020/10/03/Django-Forms-5%ED%8E%B8-Django-Form-Class/</guid>
      <pubDate>Sat, 03 Oct 2020 08:19:02 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Django-Form-Class&quot;&gt;&lt;a href=&quot;#Django-Form-Class&quot; class=&quot;headerlink&quot; title=&quot;Django Form Class&quot;&gt;&lt;/a&gt;Django Form Class&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Django-Form-Class"><a href="#Django-Form-Class" class="headerlink" title="Django Form Class"></a>Django Form Class</h2><br><h3 id="Forms-in-Django"><a href="#Forms-in-Django" class="headerlink" title="Forms in Django"></a>Forms in Django</h3><br><p>우리는 HTML 폼에 대해서 간단히 설명 했습니다.  하지만, <code>&lt;form&gt;</code> HTML 태그는 단지 필요한 도구일뿐입니다. </p><br><p>웹 어플리케이션의 맥락에서, </p><br><blockquote><p>form 은 HTML <code>&lt;form&gt;</code> 테그를 가르키거나, </p><p>혹은, 그것을 생성하는 Django Form, </p><p>또는, 제출되었을때 반환되는 구조화된 데이터 </p><p>또는, 이 모든 부분들의 end-to-end 동작의 집합들이라고 말할수 있습니다. </p></blockquote><br><h2 id="Django-Form-Class-1"><a href="#Django-Form-Class-1" class="headerlink" title="Django Form Class"></a>Django Form Class</h2><br><p>이 컴포넌트들의 시스템의 심장은 Django 의 Form Class 입니다. </p><p><br>매우 같은 방식으로, Django 모델이 객체의 구조, 동작 그리고 어떻게 표시가 되어야 하는지에 대해서 논리적인 묘사를 하듯이, </p><br><blockquote><p>Form 클래스는 Form 을 묘사하고, </p><p>어떻게 작동하고 나타나야 하는지에 대해 결정합니다. </p></blockquote><br><br><p>모델 클래스의 필드들이 데이터베이스 필드들을 가르키고 매핑되는것과 비슷하게도, </p><br><p>폼 클래스의 필드들은 HTML form <code>&lt;input&gt;</code> 요소와 매핑 됩니다 (ModelForm 은 모델 클래스의 필드들을 HTML form <code>&lt;input&gt;</code> 요소를 Form 을 통해서 매핑 합니다.)</p><br><br><blockquote><p>폼의 필드들은 그들 스스로 클래스들입니다. </p><p>폼이 제출될때, 데이터를 관리하고 유효성 검사를 수행합니다. </p></blockquote><br><p>DateField 와 FileField 는 매우 다른 종류의 데이터와 그 데이터 들과 같이 해야만 하는 다른 일들을 다룹니다. </p><br><p>폼 필드는 브라우저에서 사용자에게 HTML widget 으로 표시됩니다. </p><p>각 필드 타입들은 적절한 기본 widget class 들을 가지고 있지만, 필요할때에는 override 되서 사용될수 있습니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/03/Django-Forms-5%ED%8E%B8-Django-Form-Class/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 4편 - Form 에 대한 Django 의 역할</title>
      <link>http://djangojeng-e.github.io/2020/10/02/Django-Forms-4%ED%8E%B8-Form-%EC%97%90-%EB%8C%80%ED%95%9C-Django-%EC%9D%98-%EC%97%AD%ED%95%A0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/02/Django-Forms-4%ED%8E%B8-Form-%EC%97%90-%EB%8C%80%ED%95%9C-Django-%EC%9D%98-%EC%97%AD%ED%95%A0/</guid>
      <pubDate>Fri, 02 Oct 2020 05:08:20 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Django’s-role-in-forms&quot;&gt;&lt;a href=&quot;#Django’s-role-in-forms&quot; class=&quot;headerlink&quot; title=&quot;Django’s role in forms&quot;&gt;&lt;/a&gt;Django’s role in for
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Django’s-role-in-forms"><a href="#Django’s-role-in-forms" class="headerlink" title="Django’s role in forms"></a>Django’s role in forms</h2><br><p>폼을 다루는것은 복잡한 일입니다. </p><br><p>Django 의 어드민을 생각해보면, </p><br><p>서로 다른 종류의 데이터들의 많은 항목들이 폼안에 출력되도록 준비 되어야 하고, </p><p><br>HTML 로 렌더링 되어야하고, 편리한 인터페이스를 사용해서 편집되어야 하고, 서버로 반환되어야 하고, 유효성 검사와 정리가 되어야 하고, 그리고 나서도 추후 처리를 위해 저장 혹은 전달 되어야 합니다. </p><br><p>Django 의 form 기능은, 이 복잡한 일의 상당한 부분들을 간소화 시키고 자동화 시킵니다. </p><br><p>또한, Django 에서 폼은 대부분의 프로그래머들이 자신들이 코드를 작성한것만큼 안전하게 작동합니다. </p><br><h2 id="Django-Form-이-다루는-영역"><a href="#Django-Form-이-다루는-영역" class="headerlink" title="Django Form 이 다루는 영역"></a>Django Form 이 다루는 영역</h2><br><ol><li>데이터를 준비하고 재구조화 하여, 렌더할 준비 </li><li>데이터를 위한 HTML 폼을 생성 </li><li>클라이언트가 제출한 폼들과 데이터를 받는 부분 </li><li>받은 데이터를 처리 </li></ol><br><p>이 모든것들을 수동으로 수행하는 코드를 작성하는것도 가능하지만, </p><p><br>django 는 여러분들을 위해 모든것들을 처리할 수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/02/Django-Forms-4%ED%8E%B8-Form-%EC%97%90-%EB%8C%80%ED%95%9C-Django-%EC%9D%98-%EC%97%AD%ED%95%A0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 3편 - GET and POST</title>
      <link>http://djangojeng-e.github.io/2020/10/02/Django-Forms-3%ED%8E%B8-GET-and-POST/</link>
      <guid>http://djangojeng-e.github.io/2020/10/02/Django-Forms-3%ED%8E%B8-GET-and-POST/</guid>
      <pubDate>Fri, 02 Oct 2020 04:56:21 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;GET-vs-POST-Method&quot;&gt;&lt;a href=&quot;#GET-vs-POST-Method&quot; class=&quot;headerlink&quot; title=&quot;GET vs POST Method&quot;&gt;&lt;/a&gt;GET vs POST Method&lt;/h2&gt;&lt;br&gt;

&lt;bl
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="GET-vs-POST-Method"><a href="#GET-vs-POST-Method" class="headerlink" title="GET vs POST Method"></a>GET vs POST Method</h2><br><blockquote><p>GET 과 POST 는 </p><p>Form 을 다룰때 쓸수 있는 유일한 HTTP Method 입니다. </p></blockquote><br><p>Django 의 로그인 폼은 POST 메서드를 사용하여 반환 되고, </p><br><p>브라우저는 폼 데이터들을 모아서, 전송을 위한 인코딩을 합니다. 인코딩을 한뒤에 서버로 보낸다음 서버에서 응답을 받습니다. </p><br><h2 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h2><br><p>POST 와 비교했을때, GET 메서드는, </p><br><blockquote><p>제출된 데이터를 문자열로 모으고, </p><p>모아진 문자열들을 URL 을 만들때 사용합니다. </p><br><p>URL 은 데이터가 전송되어야만하는 주소를 가지고 있고, </p><p>데이터 키 와 값을 가지고 있습니다. </p></blockquote><br><h2 id="GET-과-POST-의-다른-사용-목적"><a href="#GET-과-POST-의-다른-사용-목적" class="headerlink" title="GET  과 POST  의 다른 사용 목적"></a>GET  과 POST  의 다른 사용 목적</h2><br><p>시스템의 상태를 바꾸기 위해서 사용되는 요청들 같은 경우, </p><p><br>예를들어, 데이터베이스에 어떠한 변경을 만들어주는 요청들은 POST 를 사용해야 합니다. </p><br><blockquote><p>*<em>POST 를 사용해야 할때 *</em></p><p>시스템의 상태를 바꾸기 위한 요청을 받을때, </p><p>예) 데이터베이스에 변경 사항들을 만들어주는 요청을 다룰때 </p><br><p><strong>GET을 사용해야 할때</strong></p><p>GET 은 시스템의 상태에 영향을 주지 않는 요청을 처리할때만 사용되어야 합니다 </p></blockquote><br><br><h2 id="GET-의-위험성"><a href="#GET-의-위험성" class="headerlink" title="GET 의 위험성"></a>GET 의 위험성</h2><br><p>GET 메서드는, 폼에서 입력된 데이터를 받아서 URL 로 만들어 줍니다. </p><br><p>따라서, GET은 패스워드 폼 사용에는 적합하지 않습니다. 왜냐하면, 입력된 패스워드가 URL 에 보여지게 될것이기 때문입니다. 그리고, 브라우저 히스토리와 서버 로그에 순수 텍스트로 나타나게 될겁니다. </p><p><br>보안상 문제가 생기겠죠? </p><br><br><p>또한, 큰 데이터 양이나, 이미지 같은 이진수 데이터에도 적합하지 않습니다. </p><br><blockquote><p>GET 요청을 어드민 폼에 사용하는 웹 어플리케이션은 보안상 아주 위험합니다. </p><br><p>공격자들은, 폼의 요청을 조작하여 시스템의 아주 민감한 부분에 접근할수 있습니다. </p><p>Django 의 CSRF protection 같은, 다른 보호 방법과 같이 쓰여지는 POST 의 경우, 공격자들의 접근을 좀더 관리 할수 있습니다. </p></blockquote><p><br><br></p><h2 id="GET-을-사용하면-좋을때"><a href="#GET-을-사용하면-좋을때" class="headerlink" title="GET 을 사용하면 좋을때"></a>GET 을 사용하면 좋을때</h2><br><blockquote><p><strong>GET 을 사용하면 좋을때</strong></p><p>GET Method 는, 웹 검색 폼 같은것에 사용하기 적합합니다 </p><p>왜냐하면, GET 요청으로 표현되는 URL 들은 쉽게 북마크 될수도 있고, </p><p>쉽게 공유될수 있으면서, 쉽게 다시 제출될수 있습니다. </p></blockquote><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/02/Django-Forms-3%ED%8E%B8-GET-and-POST/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 2편 - HTML FORMS</title>
      <link>http://djangojeng-e.github.io/2020/10/01/Django-Forms-2%ED%8E%B8-HTML-FORMS/</link>
      <guid>http://djangojeng-e.github.io/2020/10/01/Django-Forms-2%ED%8E%B8-HTML-FORMS/</guid>
      <pubDate>Thu, 01 Oct 2020 09:25:47 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;HTML-FORMS&quot;&gt;&lt;a href=&quot;#HTML-FORMS&quot; class=&quot;headerlink&quot; title=&quot;HTML FORMS&quot;&gt;&lt;/a&gt;HTML FORMS&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;HTML 에서 form 은 &lt;code&gt;&amp;lt;form&amp;gt
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="HTML-FORMS"><a href="#HTML-FORMS" class="headerlink" title="HTML FORMS"></a>HTML FORMS</h2><br><p>HTML 에서 form 은 <code>&lt;form&gt;</code> … <code>&lt;/form&gt;</code> 안에 있는 요소들의 집합입니다. </p><p><br>이는 방문자들이 text 를 입력하고, 옵션을 선택하고, 객체들을 관리하고 혹은 제어하게 만들어 줍니다. </p><p><br>그리고 나서, 해당 정보를 다시 서버로 보내줄수도 있습니다. </p><br><p>이러한 몇가지 폼 인터페이스 요소들은 (예, text input, 혹은 checkboxes) HTML 자체에 내장 되어 있습니다만. 다른것들은 훨씬 더 복잡합니다. 예를들면, 보통 JavaScript 와 CSS 그리고  HTML 을 사용하여 날짜선택 팝업 혹은 슬라이더, 그리고 제어를 조종하는 <code>&lt;input&gt;</code> 요소들이 그렇습니다. </p><br><br><h2 id="Form-이-지정해줘야할-2가지"><a href="#Form-이-지정해줘야할-2가지" class="headerlink" title="Form 이 지정해줘야할 2가지"></a>Form 이 지정해줘야할 2가지</h2><br><p>form 은 대부분 아래 두가지를 지정해주어야 합니다. </p><br><ol><li>where?  사용자가 입력한 데이터가 어디로 반환 되어야 하는지 </li><li>how? 어떠한 <code>HTTP Method</code> 로 데이터가 반환 되어야 하는지 </li></ol><br><p>예시를 들자면, Django Admin 의 로그인 폼은 몇가지 아래의 <code>&lt;input&gt;</code>  요소들을 가지고 있습니다. </p><br> <ol><li><p>username 을 위한  <code>type=&quot;text&quot;</code> 라는 것이고, </p></li><li><p>다른 하나는, password 를 위한 input </p></li><li><p>마지막으로, 로그인을 진행하는 버튼을 위한 type=”submit” 을 가지고 있습니다. </p></li></ol><br><p>그리고, 어드민에는 Django 가 입력값을 받은 다음에 무엇을 해야하는지 결정하기 위해, 사용자가 볼수 없는 숨겨진 텍스트 필드들도 존재합니다. </p><br><p>또한, 브라우저에 폼 데이터가 어떤 URL 로 보내져야 하는지, <code>&lt;form&gt;</code>의 action 속성에다가 URL 을 지정해 줍니다 <code>/admin/</code>. 그리고, 폼 데이터는, method 속성에 지정된 HTTP 동작을 통해서 보내집니다 (예, POST)</p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Log in"</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>위 요소가 실행되면, 데이터는 /admin/ 에 반환됩니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/01/Django-Forms-2%ED%8E%B8-HTML-FORMS/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 1편 - FORM 으로 작업하기</title>
      <link>http://djangojeng-e.github.io/2020/10/01/Django-Forms-1%ED%8E%B8-FORM-%EC%9C%BC%EB%A1%9C-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/01/Django-Forms-1%ED%8E%B8-FORM-%EC%9C%BC%EB%A1%9C-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 01 Oct 2020 09:17:28 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Working-with-Forms&quot;&gt;&lt;a href=&quot;#Working-with-Forms&quot; class=&quot;headerlink&quot; title=&quot;Working with Forms&quot;&gt;&lt;/a&gt;Working with Forms&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Working-with-Forms"><a href="#Working-with-Forms" class="headerlink" title="Working with Forms"></a>Working with Forms</h2><br><p>Django 의 Form에 대해 공식문서를 읽으면서 내용을 정리합니다.  </p><br><blockquote><p>Django 공식문서에서 Form 부분은, </p><p>web forms 에 대한 기본과, Django 에서 어떻게 Form 들이 다루어 지는지 소개합니다. </p><br><p>특정 부분에 대한 좀 더 자세한 디테일을 위해서는, </p><p><code>The Forms API</code>, <code>Form Fields</code> 그리고 <code>Form and field validation</code> 문서들을 보면 자세히 알수 있습니다. </p></blockquote><br><p>여러분들의 웹사이트와 어플리케이션이 단순히 컨텐츠만 발행하고, 방문자들한테서 input 을 받는 사이트가 아니라면, 여러분들은 form 에 대해 이해하고 사용할 필요가 없습니다. </p><br><p>하지만, 그 반대라면, 여러분들의 웹사이트와 어플리케이션은, 단순히 컨텐츠만 발행할 뿐만 아니라, 방문자들한테서 input 을 받고, 받은 input 을 기반으로 어떠한 작업을 실행해야 할지 모릅니다. </p><br><p>이러한 경우에는, form 에 대해서 이해하고 잘 사용할 필요가 있습니다. </p><br><p>Django 는 다양한 도구들과 라이브러리를 제공하여, 당신이 form 을 만들고 사이트 방문자로부터 값을 입력 받을수 있게 도와줍니다. </p><br><p>거기에, 입력값을 처리하고 값에 반응하는 작업을 할수도 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/01/Django-Forms-1%ED%8E%B8-FORM-%EC%9C%BC%EB%A1%9C-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS Elastic Beanstalk 배포 - 6</title>
      <link>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-6/</link>
      <guid>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-6/</guid>
      <pubDate>Thu, 24 Sep 2020 07:32:05 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;EB-CLI-로-사이트-배포하기&quot;&gt;&lt;a href=&quot;#EB-CLI-로-사이트-배포하기&quot; class=&quot;headerlink&quot; title=&quot;EB CLI 로 사이트 배포하기&quot;&gt;&lt;/a&gt;EB CLI 로 사이트 배포하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅까지, Elastic Beanstalk 에 배포를 위한 기본 설정과, Elastic Beanstalk 를 위한 추가 설정까지 마쳤습니다 (&lt;code&gt;ebextensions&lt;/code&gt; 폴더 생성후, &lt;code&gt;django.config&lt;/code&gt; 파일 생성 완료)&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;Elastic Beanstalk 에 사이트를 배포할 준비가 다 되었습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;프로젝트 디렉토리는 아래와 같은 구조로 되어 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  l&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;total 24K&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x 4 dhkang dhkang 4.0K  9월 24 13:09 .&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x 5 dhkang dhkang 4.0K  9월 24 12:52 ..&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-r--r-- 1 dhkang dhkang    0  9월 24 12:55 db.sqlite3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x 3 dhkang dhkang 4.0K  9월 24 12:55 ebdjango&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;drwxr-xr-x 2 dhkang dhkang 4.0K  9월 24 13:12 .ebextensions&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rwxr-xr-x 1 dhkang dhkang  540  9월 24 12:52 manage.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;-rw-r--r-- 1 dhkang dhkang   27  9월 24 13:06 requirements.txt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;br&gt;

&lt;p&gt;자 이제, 어플리케이션 환경을 생성하고, 설정된 어플리케이션을, Elastic Beanstalk 로 배포합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;EB CLI 를 사용하여, 배포하기 위해 아래 순서대로 진행 해 봅니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="EB-CLI-로-사이트-배포하기"><a href="#EB-CLI-로-사이트-배포하기" class="headerlink" title="EB CLI 로 사이트 배포하기"></a>EB CLI 로 사이트 배포하기</h2><br><p>지난 포스팅까지, Elastic Beanstalk 에 배포를 위한 기본 설정과, Elastic Beanstalk 를 위한 추가 설정까지 마쳤습니다 (<code>ebextensions</code> 폴더 생성후, <code>django.config</code> 파일 생성 완료)</p><br><p>Elastic Beanstalk 에 사이트를 배포할 준비가 다 되었습니다. </p><br><p>프로젝트 디렉토리는 아래와 같은 구조로 되어 있습니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  l</span><br><span class="line">total 24K</span><br><span class="line">drwxr-xr-x 4 dhkang dhkang 4.0K  9월 24 13:09 .</span><br><span class="line">drwxr-xr-x 5 dhkang dhkang 4.0K  9월 24 12:52 ..</span><br><span class="line">-rw-r--r-- 1 dhkang dhkang    0  9월 24 12:55 db.sqlite3</span><br><span class="line">drwxr-xr-x 3 dhkang dhkang 4.0K  9월 24 12:55 ebdjango</span><br><span class="line">drwxr-xr-x 2 dhkang dhkang 4.0K  9월 24 13:12 .ebextensions</span><br><span class="line">-rwxr-xr-x 1 dhkang dhkang  540  9월 24 12:52 manage.py</span><br><span class="line">-rw-r--r-- 1 dhkang dhkang   27  9월 24 13:06 requirements.txt</span><br></pre></td></tr></table></figure><br><p>자 이제, 어플리케이션 환경을 생성하고, 설정된 어플리케이션을, Elastic Beanstalk 로 배포합니다. </p><br><blockquote><p>EB CLI 를 사용하여, 배포하기 위해 아래 순서대로 진행 해 봅니다 </p></blockquote><br><a id="more"></a><br><h2 id="eb-init-으로-EB-CLI-레포지토리-시작하기"><a href="#eb-init-으로-EB-CLI-레포지토리-시작하기" class="headerlink" title="eb init 으로 EB CLI 레포지토리 시작하기"></a><code>eb init</code> 으로 EB CLI 레포지토리 시작하기</h2><br><p>로컬 컴퓨터의 프로젝트 폴더에서, 아래 명령어를 실행하여 EB CLI 레포지토리를 시작해 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  eb init -i -p python-3.6 django-tutorial</span><br></pre></td></tr></table></figure><br><p><code>-i</code> 옵션을 사용하여, 지역을 선택할수 있습니다. </p><br><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  eb init -i -p python-3.6 django-tutorial</span><br><span class="line"></span><br><span class="line">Select a default region</span><br><span class="line">1) us-east-1 : US East (N. Virginia)</span><br><span class="line">2) us-west-1 : US West (N. California)</span><br><span class="line">3) us-west-2 : US West (Oregon)</span><br><span class="line">4) eu-west-1 : EU (Ireland)</span><br><span class="line">5) eu-central-1 : EU (Frankfurt)</span><br><span class="line">6) ap-south-1 : Asia Pacific (Mumbai)</span><br><span class="line">7) ap-southeast-1 : Asia Pacific (Singapore)</span><br><span class="line">8) ap-southeast-2 : Asia Pacific (Sydney)</span><br><span class="line">9) ap-northeast-1 : Asia Pacific (Tokyo)</span><br><span class="line"></span><br><span class="line">(default is 3): 8</span><br><span class="line"></span><br><span class="line">Application django-tutorial has been created.</span><br><span class="line">Do you want to <span class="built_in">set</span> up SSH <span class="keyword">for</span> your instances?</span><br><span class="line">(Y/n): Y</span><br><span class="line"></span><br><span class="line">Select a keypair.</span><br><span class="line">1) elastic_beanstalk</span><br><span class="line">2) [ Create new KeyPair ]</span><br></pre></td></tr></table></figure><br><p>2번을 눌러줘 봅니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Select a keypair.</span><br><span class="line">1) aws-eb</span><br><span class="line">2) [ Create new KeyPair ]</span><br><span class="line">(default is 1): 2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Type a keypair name.</span><br><span class="line">(Default is aws-eb2): </span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty <span class="keyword">for</span> no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved <span class="keyword">in</span> /home/werwre/.ssh/aws-eb.</span><br><span class="line">Your public key has been saved <span class="keyword">in</span> /home/dfdfefe/.ssh/aws-eb.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:dfeg+3ih82hi2hkfn292/12323dfsdf aws-eb</span><br><span class="line">The key<span class="string">'s randomart image is:</span></span><br><span class="line"><span class="string">+---[RSA 2048]----+</span></span><br><span class="line"><span class="string">|                 |</span></span><br><span class="line"><span class="string">|       .abc      |</span></span><br><span class="line"><span class="string">|    44455.o+.    |</span></span><br><span class="line"><span class="string">|    ##.o+o .23   |</span></span><br><span class="line"><span class="string">|    #@$.So. .    |</span></span><br><span class="line"><span class="string">|     # + *o..    |</span></span><br><span class="line"><span class="string">|  E!@#@1###.+    |</span></span><br><span class="line"><span class="string">| .o*+@#!$!.=o#   |</span></span><br><span class="line"><span class="string">|  #######+=.o#.  |</span></span><br><span class="line"><span class="string">+----[SHA256]-----+</span></span><br><span class="line"><span class="string">WARNING: Uploaded SSH public key for "aws-eb" into EC2 for region ap-southeast-2.</span></span><br></pre></td></tr></table></figure><br><h2 id="eb-create-를-사용하여-환경을-생성"><a href="#eb-create-를-사용하여-환경을-생성" class="headerlink" title="eb create 를 사용하여 환경을 생성"></a>eb create 를 사용하여 환경을 생성</h2><br><p><code>eb create</code> 명령어를 사용하여, 배포 환경을 생성해 줍니다. </p><p>환경명은 <code>django-env</code> 입니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  eb create django-env</span><br></pre></td></tr></table></figure><br><p>시간이 좀 걸리는데, 작업을 다 마치고 나면, 아래와 같이 환경이 생성된것을 확인할수 있습니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">g-stack-AWSEBCloudwatchAlarmHigh-1GEUR7I1T33QF</span><br><span class="line">2020-09-24 08:00:08    INFO    Created CloudWatch alarm named: awseb<span class="_">-e</span>-cizji5shhg-stack-AWSEBCloudwatchAlarmLow-6M9MHE521DWB</span><br><span class="line">2020-09-24 08:00:36    INFO    Application available at django-env.eba-taamyy5q.ap-southeast-2.elasticbeanstalk.com.</span><br><span class="line">2020-09-24 08:00:36    INFO    Successfully launched environment: django-env</span><br></pre></td></tr></table></figure><br><br><h2 id="eb-status-명령어로-도메인-명을-확인"><a href="#eb-status-명령어로-도메인-명을-확인" class="headerlink" title="eb status 명령어로 도메인 명을 확인"></a>eb status 명령어로 도메인 명을 확인</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  eb status</span><br><span class="line">Environment details <span class="keyword">for</span>: django-env</span><br><span class="line">  Application name: django-tutorial</span><br><span class="line">  Region: ap-southeast-2</span><br><span class="line">  Deployed Version: app-200924_165824</span><br><span class="line">  Environment ID: e-cizji5shhg</span><br><span class="line">  Platform: arn:aws:elasticbeanstalk:ap-southeast-2::platform/Python 3.6 running on 64bit Amazon Linux/2.9.14</span><br><span class="line">  Tier: WebServer-Standard-1.0</span><br><span class="line">  CNAME: django-env.eba-taamyy5q.ap-southeast-2.elasticbeanstalk.com</span><br><span class="line">  Updated: 2020-09-24 08:00:36.586000+00:00</span><br><span class="line">  Status: Ready</span><br><span class="line">  Health: Green</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="Django-settings-py-파일-수정하기"><a href="#Django-settings-py-파일-수정하기" class="headerlink" title="Django settings.py 파일 수정하기"></a>Django settings.py 파일 수정하기</h2><br><p>Django 앱의 settings.py 파일 안에, <code>ALLOWED_HOSTS</code>에, CNAME 으로 표시된 도메인명을 넣어줍니다.  </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># SECURITY WARNING: don't run with debug turned on in production!</span></span><br><span class="line">DEBUG = True</span><br><span class="line"></span><br><span class="line">ALLOWED_HOSTS = [<span class="string">'django-env.eba-taamyy5q.ap-southeast-2.elasticbeanstalk.com</span></span><br><span class="line"><span class="string">'</span>]</span><br></pre></td></tr></table></figure><br><h2 id="eb-deploy-로-배포-진행"><a href="#eb-deploy-로-배포-진행" class="headerlink" title="eb deploy 로 배포 진행"></a><code>eb deploy</code> 로 배포 진행</h2><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  eb deploy</span><br><span class="line">Creating application version archive <span class="string">"app-200924_170655"</span>.</span><br><span class="line">Uploading django-tutorial/app-200924_170655.zip to S3. This may take a <span class="keyword">while</span>.</span><br><span class="line">Upload Complete.</span><br><span class="line">2020-09-24 08:06:56    INFO    Environment update is starting.      </span><br><span class="line">2020-09-24 08:07:36    INFO    Deploying new version to instance(s).</span><br><span class="line"> -- Events -- (safe to Ctrl+C) Use <span class="string">"eb abort"</span> to cancel the <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="eb-open-명령어를-사용하여-웹사이트-실행"><a href="#eb-open-명령어를-사용하여-웹사이트-실행" class="headerlink" title="eb open 명령어를 사용하여, 웹사이트 실행"></a><code>eb open</code> 명령어를 사용하여, 웹사이트 실행</h2><br><p><code>eb open</code> 명령어를 사용하여, 사이트를 열어봅니다. </p><br><p>터미널에서 명령어를 실행하면, 자동으로 브라우저가 열리고. Django 앱이 실행됩니다. <br></p><br><p>아래와 같은 화면을 보면, 성공입니다.</p><img src="/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-6/image.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS Elastic Beanstalk 배포 - 5</title>
      <link>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-5/</link>
      <guid>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-5/</guid>
      <pubDate>Thu, 24 Sep 2020 04:02:30 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Elastic-Beanstalk-를-위한-설정&quot;&gt;&lt;a href=&quot;#Elastic-Beanstalk-를-위한-설정&quot; class=&quot;headerlink&quot; title=&quot;Elastic Beanstalk 를 위한 설정&quot;&gt;&lt;/a&gt;Elastic Beanstalk 를 위한 설정&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;지난 포스팅까지, django2.1.1 기반의 django 프로젝트를 하나 생성해 주었습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;아무것도 수행하지 않는 어플리케이션이지만, 이 간단한 어플리케이션을 Elastic Beanstalk 에 배포하기 위해서는, 아래와 같은 몇가지 설정들을 해주어야 합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;requirements.txt 파일 생성 &lt;/li&gt;
&lt;li&gt;.ebextensions 폴더 생성후, 그 안에 django.config 파일 작성  &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Elastic-Beanstalk-를-위한-설정"><a href="#Elastic-Beanstalk-를-위한-설정" class="headerlink" title="Elastic Beanstalk 를 위한 설정"></a>Elastic Beanstalk 를 위한 설정</h2><br><p>지난 포스팅까지, django2.1.1 기반의 django 프로젝트를 하나 생성해 주었습니다. </p><p><br>아무것도 수행하지 않는 어플리케이션이지만, 이 간단한 어플리케이션을 Elastic Beanstalk 에 배포하기 위해서는, 아래와 같은 몇가지 설정들을 해주어야 합니다. </p><p><br><br></p><ol><li>requirements.txt 파일 생성 </li><li>.ebextensions 폴더 생성후, 그 안에 django.config 파일 작성  </li></ol><br><br><a id="more"></a><h3 id="requirements-txt-파일-생성"><a href="#requirements-txt-파일-생성" class="headerlink" title="requirements.txt 파일 생성"></a>requirements.txt 파일 생성</h3><br><p><code>pip freeze &gt; requirements.txt</code> 명령어를 통해, requirements.txt 파일을 생성해 줍니다. </p><br><p>requirements.txt 는 어플리케이션이 작동하기 위한 패키지들의 목록을 담고 있습니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  pip freeze &gt; requirements.txt</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  ls</span><br><span class="line">db.sqlite3  ebdjango  manage.py  requirements.txt</span><br></pre></td></tr></table></figure><br><blockquote><p>Elastic Beanstalk 는 requirements.txt 파일을 사용하여, </p><p>어떤 패키지들이 EC2 인스턴스에 설치 되어야 하는지 결정합니다. </p></blockquote><br><h3 id="ebextensions-라는-디렉토리-만들어-주기"><a href="#ebextensions-라는-디렉토리-만들어-주기" class="headerlink" title=".ebextensions 라는 디렉토리 만들어 주기"></a><code>.ebextensions</code> 라는 디렉토리 만들어 주기</h3><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  mkdir .ebextensions</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  ls</span><br><span class="line">db.sqlite3  ebdjango  manage.py  requirements.txt</span><br></pre></td></tr></table></figure><br><p>디렉토리를 만들었으면, 해당 디렉토리로 이동후에, <code>django.config</code> 파일을 생성해 줍니다 </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  <span class="built_in">cd</span> .ebextensions </span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango/.ebextensions  ls</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango/.ebextensions  touch django.config</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango/.ebextensions  ls</span><br><span class="line">django.config</span><br></pre></td></tr></table></figure><br><p>파일이 생성되었으면, 아래 내용을 <code>django.config</code>파일에 추가해 줍니다. </p><br><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">option_settings:</span></span><br><span class="line">  <span class="attr">aws:elasticbeanstalk:container:python:</span></span><br><span class="line">    <span class="attr">WSGIPath:</span> <span class="string">ebdjango/wsgi.py</span></span><br></pre></td></tr></table></figure><br><img src="/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-5/image1.png" class=""><br><blockquote><p>이 세팅은, Elastic Beanstalk 가 여러분의 애플리케이션을 시작하기 위한 WSGI 스크립트의 위치를 지정해 줍니다. </p><br><p>이 세팅을 잘못하면, </p><p>배포 후에 Internal Server Error 라던지, 사이트가 표시되지 않는등의 에러를 경험할수 있습니다. </p></blockquote><br><p>이렇게 Elastic Beanstalk 를 위한 추가 설정을 마쳤습니다.</p><br><p><code>.ebextensions</code> 폴더를 만들고, 그안에  django.config 파일을 생성해 주면 됩니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS Elastic Beanstalk 배포 - 4</title>
      <link>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-4/</link>
      <guid>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-4/</guid>
      <pubDate>Thu, 24 Sep 2020 03:50:53 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Django-프로젝트-생성하기&quot;&gt;&lt;a href=&quot;#Django-프로젝트-생성하기&quot; class=&quot;headerlink&quot; title=&quot;Django 프로젝트 생성하기&quot;&gt;&lt;/a&gt;Django 프로젝트 생성하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;django-admin startproject ebdjango&lt;/code&gt; 명령어를 실행하여, ebdjango 라는 프로젝트를 하나 생성해 줍니다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;



&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;(eb_env)  dhkang  ~/elastic_beanstalk  ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;eb_env&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(eb_env)  dhkang  ~/elastic_beanstalk  django-admin startproject ebdjango&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;(eb_env)  dhkang  ~/elastic_beanstalk  ls&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ebdjango  eb_env&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;&lt;code&gt;ebdjango&lt;/code&gt;라는 폴더가 생성되고, 프로젝트가 생성된것을 확인 할수 있습니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Django-프로젝트-생성하기"><a href="#Django-프로젝트-생성하기" class="headerlink" title="Django 프로젝트 생성하기"></a>Django 프로젝트 생성하기</h2><br><p><code>django-admin startproject ebdjango</code> 명령어를 실행하여, ebdjango 라는 프로젝트를 하나 생성해 줍니다. <br></p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  ls</span><br><span class="line">eb_env</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  django-admin startproject ebdjango</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  ls</span><br><span class="line">ebdjango  eb_env</span><br></pre></td></tr></table></figure><br><p><code>ebdjango</code>라는 폴더가 생성되고, 프로젝트가 생성된것을 확인 할수 있습니다. </p><br><a id="more"></a><br><p><code>ebdjango</code> 폴더로 이동하여, <code>python manage.py runserver</code> 명령어를 실행하고, 서버를 시작해 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  <span class="built_in">cd</span> ebdjango </span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  ls</span><br><span class="line">ebdjango  manage.py</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk/ebdjango  python manage.py runserver</span><br><span class="line">Performing system checks...</span><br><span class="line"></span><br><span class="line">System check identified no issues (0 silenced).</span><br><span class="line"></span><br><span class="line">You have 15 unapplied migration(s). Your project may not work properly until you apply the migrations <span class="keyword">for</span> app(s): admin, auth, contenttypes, sessions.</span><br><span class="line">Run <span class="string">'python manage.py migrate'</span> to apply them.</span><br><span class="line"></span><br><span class="line">September 24, 2020 - 03:55:51</span><br><span class="line">Django version 2.1.1, using settings <span class="string">'ebdjango.settings'</span></span><br><span class="line">Starting development server at http://127.0.0.1:8000/</span><br><span class="line">Quit the server with CONTROL-C.</span><br></pre></td></tr></table></figure><br><br><p>서버를 실행한뒤에, </p><p><a href="http://127.0.0.1:8000" target="_blank" rel="noopener">http://127.0.0.1:8000</a> 에 접속하면, 정상적으로 django 애플리케이션이 실행 되는것을 확인할수 있습니다. </p><br><img src="/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-4/image1.png" class=""><p><br><br></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS Elastic Beanstalk 배포 - 3</title>
      <link>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-3/</link>
      <guid>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-3/</guid>
      <pubDate>Thu, 24 Sep 2020 03:27:58 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;배포전-환경설정&quot;&gt;&lt;a href=&quot;#배포전-환경설정&quot; class=&quot;headerlink&quot; title=&quot;배포전 환경설정&quot;&gt;&lt;/a&gt;배포전 환경설정&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;Elastic Beanstalk 에 Django 애플리케이션을 배포하기 위해서 필요한 환경 설정들이 몇가지 있습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;배포 작업을 진행하기 전에, 로컬 컴퓨터에서 배포를 위한 설정들을 하나씩 해주고. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;Django 어플리케이션을 Elastic Beanstalk 에 배포하도록 할겁니다. &lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;AWS-Elastic-Beanstalk-주요-환경&quot;&gt;&lt;a href=&quot;#AWS-Elastic-Beanstalk-주요-환경&quot; class=&quot;headerlink&quot; title=&quot;AWS Elastic Beanstalk 주요 환경&quot;&gt;&lt;/a&gt;AWS Elastic Beanstalk 주요 환경&lt;/h2&gt;&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;AWS 계정 &lt;/li&gt;
&lt;li&gt;Python 3.6&lt;/li&gt;
&lt;li&gt;pip &lt;/li&gt;
&lt;li&gt;virtualenv&lt;/li&gt;
&lt;li&gt;awsebcli &lt;/li&gt;
&lt;li&gt;Django 2.1.1 &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;Django 버전은, &lt;/p&gt;
&lt;p&gt;Elastic Beanstalk Python 구성 버전과 호환 되어야 합니다 &lt;/p&gt;
&lt;p&gt;Django 2.2 는 Elastic Beanstalk Python 3.6 플랫폼과 호환되지 않으므로 &lt;/p&gt;
&lt;p&gt;Django2.1.1 을 기반으로 한 프로젝트 실습을 진행 합니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;br&gt;

&lt;p&gt;&lt;strong&gt;파이썬 3.6 가상환경 생성 부터 진행해 봅니다 (ubuntu18.04)&lt;/strong&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="배포전-환경설정"><a href="#배포전-환경설정" class="headerlink" title="배포전 환경설정"></a>배포전 환경설정</h2><br><p>Elastic Beanstalk 에 Django 애플리케이션을 배포하기 위해서 필요한 환경 설정들이 몇가지 있습니다. </p><p><br>배포 작업을 진행하기 전에, 로컬 컴퓨터에서 배포를 위한 설정들을 하나씩 해주고. </p><p><br>Django 어플리케이션을 Elastic Beanstalk 에 배포하도록 할겁니다. </p><br><h2 id="AWS-Elastic-Beanstalk-주요-환경"><a href="#AWS-Elastic-Beanstalk-주요-환경" class="headerlink" title="AWS Elastic Beanstalk 주요 환경"></a>AWS Elastic Beanstalk 주요 환경</h2><br><ul><li>AWS 계정 </li><li>Python 3.6</li><li>pip </li><li>virtualenv</li><li>awsebcli </li><li>Django 2.1.1 </li></ul><br><blockquote><p>Django 버전은, </p><p>Elastic Beanstalk Python 구성 버전과 호환 되어야 합니다 </p><p>Django 2.2 는 Elastic Beanstalk Python 3.6 플랫폼과 호환되지 않으므로 </p><p>Django2.1.1 을 기반으로 한 프로젝트 실습을 진행 합니다. </p></blockquote><br><br><p><strong>파이썬 3.6 가상환경 생성 부터 진행해 봅니다 (ubuntu18.04)</strong></p><a id="more"></a><br><h3 id="Python-3-6-가상환경-생성"><a href="#Python-3-6-가상환경-생성" class="headerlink" title="Python 3.6 가상환경 생성"></a>Python 3.6 가상환경 생성</h3><br><p>실습을 위해, 로컬 컴퓨터에 Elastic_beanstalk 라는 디렉토릴를 하나 만들어 줍니다. </p><p><br>해당 디렉토리로 이동하여, 파이썬 가상환경 하나를 만들어 줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir elastic_beanstalk </span><br><span class="line"><span class="built_in">cd</span> elastic_beanstalk</span><br></pre></td></tr></table></figure><br><blockquote><p>virtualenv 가 로컬 컴퓨터에 제대로 설치 되어 있다는 전제하에, </p><p>elastic_beanstalk 디렉토리 안에서 아래 명령어를 실행하여, </p><p>Python3.6 으로 된 가상환경을 생성해 줍니다. </p></blockquote><br><br><p>참고로, virtualenv 를 시스템에 설치하려면,</p><p> <code>pip install virtualenv</code> 명령어를 실행하여 설치할수 있습니다. </p><br><br><p>해당 디렉토리에서, <code>virtualenv -p python3.6 eb_env</code> 명령어를 실행하여, 환경명이 <code>eb_env</code>이고 Python 3.6  으로 된 가상환경을 하나 생성해 줍니다.  </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> dhkang  ~/elastic_beanstalk  virtualenv -p python3.6 eb_env                 </span><br><span class="line">  created virtual environment CPython3.6.9.final.0-64 <span class="keyword">in</span> 294ms</span><br><span class="line">  creator CPython3Posix(dest=/home/dhkang/elastic_beanstalk/eb_env, clear=False, global=False)</span><br><span class="line">  seeder FromAppData(download=False, pip=bundle, setuptools=bundle, wheel=bundle, via=copy, app_data_dir=/home/dhkang/.<span class="built_in">local</span>/share/virtualenv)</span><br><span class="line">    added seed packages: pip==20.2.2, setuptools==49.6.0, wheel==0.35.1</span><br><span class="line">  activators BashActivator,CShellActivator,FishActivator,PowerShellActivator,PythonActivator,XonshActivator</span><br><span class="line">  </span><br><span class="line"> dhkang  ~/elastic_beanstalk  ls</span><br><span class="line">eb_env</span><br></pre></td></tr></table></figure><br><p>환경이 생성되면, <code>eb_env</code>라는 가상환경 폴더가 생성됩니다. </p><br><blockquote><p>생성된 가상환경은, 해당 폴더에서, 아래 명령어를 실행하여 시작할수 있습니다. </p></blockquote><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> eb_env/bin/activate</span><br></pre></td></tr></table></figure><br><p>커맨드라인 맨 앞에, 가상환경명이 (eb_env) 로 표시가 된다면, 가상환경 실행이 잘 된것입니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eb_env</span><br><span class="line"> dhkang  ~/elastic_beanstalk  <span class="built_in">source</span> eb_env/bin/activate</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk </span><br></pre></td></tr></table></figure><br><h2 id="EB-CLI-설치-awsebcli"><a href="#EB-CLI-설치-awsebcli" class="headerlink" title="EB CLI 설치 (awsebcli)"></a>EB CLI 설치 (awsebcli)</h2><br><p>아래 링크를 참조하여, <code>awsebcli</code> 를 시스템에 설치해 줍니다. </p><br><p><a href="https://github.com/aws/aws-elastic-beanstalk-cli-setup" target="_blank" rel="noopener">https://github.com/aws/aws-elastic-beanstalk-cli-setup</a></p><br><p>우분투 18.04 기준으로, </p><p>터미널에서, 아래 명령어를 실행하여, awsebcli  를 설치ㅏ기 위한 git을 클론해줍니다.<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhkang  ~  git <span class="built_in">clone</span> https://github.com/aws/aws-elastic-beanstalk-cli-setup.git</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dhkang  ~  ./aws-elastic-beanstalk-cli-setup/scripts/bundled_installer</span><br></pre></td></tr></table></figure><br><p>인스톨 작업을 시작하고, 작업이 끝나면, 아래와 같은 화면이 나타납니다.<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">***********************</span><br><span class="line">4. Creating EB wrappers</span><br><span class="line">***********************</span><br><span class="line"></span><br><span class="line">***************</span><br><span class="line">5. Finishing up</span><br><span class="line">***************</span><br><span class="line">Success!</span><br><span class="line"></span><br><span class="line">    Note: To complete installation, ensure `eb` is <span class="keyword">in</span> PATH. You can ensure this by executing:</span><br><span class="line"></span><br><span class="line">    1. Bash:</span><br><span class="line"></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">'export PATH="/home/dhkang/.ebcli-virtual-env/executables:$PATH"'</span> &gt;&gt; ~/.bash_profile &amp;&amp; <span class="built_in">source</span> ~/.bash_profile</span><br><span class="line"></span><br><span class="line">    2. Zsh:</span><br><span class="line"></span><br><span class="line">       <span class="built_in">echo</span> <span class="string">'export PATH="/home/dhkang/.ebcli-virtual-env/executables:$PATH"'</span> &gt;&gt; ~/.zshenv &amp;&amp; <span class="built_in">source</span> ~/.zshenv</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    - NOTE: To complete installation, ensure `python` is <span class="keyword">in</span> PATH. You can ensure this by executing:</span><br><span class="line">   </span><br><span class="line">      1. Bash:</span><br><span class="line">   </span><br><span class="line">         <span class="built_in">echo</span> <span class="string">'export PATH=/home/dhkang/.pyenv/versions/3.7.2/bin:$PATH'</span> &gt;&gt; /home/dhkang/.bash_profile &amp;&amp; <span class="built_in">source</span> /home/dhkang/.bash_profile</span><br><span class="line">   </span><br><span class="line">      2. Zsh:</span><br><span class="line">   </span><br><span class="line">         <span class="built_in">echo</span> <span class="string">'export PATH=/home/dhkang/.pyenv/versions/3.7.2/bin:$PATH'</span> &gt;&gt; /home/dhkang/.zshrc &amp;&amp; <span class="built_in">source</span> /home/dhkang/.zshrc</span><br><span class="line"> dhkang  ~ </span><br></pre></td></tr></table></figure><br><p>인스톨을 마무리 하기 위해서, 아래 명령어들을 실행 해줍니다. (Zshell)</p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH="/home/dhkang/.ebcli-virtual-env/executables:$PATH"'</span> &gt;&gt; ~/.zshenv &amp;&amp; <span class="built_in">source</span> ~/.zshenv</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH=/home/dhkang/.pyenv/versions/3.7.2/bin:$PATH'</span> &gt;&gt; /home/dhkang/.zshrc &amp;&amp; <span class="built_in">source</span> /home/dhkang/.zshrc</span><br></pre></td></tr></table></figure><br><p>설치 확인을 위해, 터미널에서 eb 라는 명령어를 실행해 봅니다<br><br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> dhkang  ~  eb</span><br><span class="line">usage: eb (sub-commands ...) [options ...] &#123;arguments ...&#125;</span><br><span class="line"></span><br><span class="line">Welcome to the Elastic Beanstalk Command Line Interface (EB CLI). </span><br><span class="line">For more information on a specific <span class="built_in">command</span>, <span class="built_in">type</span> <span class="string">"eb &#123;cmd&#125; --help"</span>.</span><br><span class="line"></span><br><span class="line">commands:</span><br><span class="line">  abort        Cancels an environment update or deployment.</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --<span class="built_in">help</span>            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  --debug               toggle debug output</span><br><span class="line">  --quiet               suppress all output</span><br><span class="line">  -v, --verbose         toggle verbose output</span><br><span class="line">  --profile PROFILE     use a specific profile from your credential file</span><br><span class="line">  -r REGION, --region REGION</span><br><span class="line">                        use a specific region</span><br><span class="line">  --no-verify-ssl       don<span class="string">'t verify AWS SSL certificates</span></span><br><span class="line"><span class="string">  --version             show application/version info</span></span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="Django-2-1-1-설치"><a href="#Django-2-1-1-설치" class="headerlink" title="Django 2.1.1 설치"></a>Django 2.1.1 설치</h2><br><p>아래 명령어를 실행하여, django 2.1.1 버전을 설치해줍니다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install django==2.1.1</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  pip install django==2.1.1</span><br><span class="line">Collecting django==2.1.1</span><br><span class="line">  Using cached Django-2.1.1-py3-none-any.whl (7.3 MB)</span><br><span class="line">Collecting pytz</span><br><span class="line">  Using cached pytz-2020.1-py2.py3-none-any.whl (510 kB)</span><br><span class="line">Installing collected packages: pytz, django</span><br><span class="line">Successfully installed django-2.1.1 pytz-2020.1</span><br><span class="line">WARNING: You are using pip version 20.2.2; however, version 20.2.3 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'/home/dhkang/elastic_beanstalk/eb_env/bin/python -m pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br><span class="line">(eb_env)  dhkang  ~/elastic_beanstalk  pip list</span><br><span class="line">Package    Version</span><br><span class="line">---------- -------</span><br><span class="line">Django     2.1.1</span><br><span class="line">pip        20.2.2</span><br><span class="line">pytz       2020.1</span><br><span class="line">setuptools 49.6.0</span><br><span class="line">wheel      0.35.1</span><br><span class="line">WARNING: You are using pip version 20.2.2; however, version 20.2.3 is available.</span><br><span class="line">You should consider upgrading via the <span class="string">'/home/dhkang/elastic_beanstalk/eb_env/bin/python -m pip install --upgrade pip'</span> <span class="built_in">command</span>.</span><br></pre></td></tr></table></figure><br><p>이정도 까지, 로컬 컴퓨터에서 Elastic Beanstalk 배포 실습을 위한 기본 환경 설정을 마쳤습니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS Elastic Beanstalk 배포 - 2</title>
      <link>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-2/</link>
      <guid>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-2/</guid>
      <pubDate>Thu, 24 Sep 2020 03:23:15 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Django-애플리케이션-배포하기&quot;&gt;&lt;a href=&quot;#Django-애플리케이션-배포하기&quot; class=&quot;headerlink&quot; title=&quot;Django 애플리케이션 배포하기&quot;&gt;&lt;/a&gt;Django 애플리케이션 배포하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;AWS Elastic Beanstalk 에 Django 애플리케이션을 배포하는 연습을 진행 해 보려 합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;우선, 배포 진행을 하기전에 알아야할 주요 환경은 아래와 같습니다. &lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;주요-환경&quot;&gt;&lt;a href=&quot;#주요-환경&quot; class=&quot;headerlink&quot; title=&quot;주요 환경&quot;&gt;&lt;/a&gt;주요 환경&lt;/h2&gt;&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;AWS 계정 &lt;/li&gt;
&lt;li&gt;Python 3.6&lt;/li&gt;
&lt;li&gt;pip&lt;/li&gt;
&lt;li&gt;virtualenv&lt;/li&gt;
&lt;li&gt;awsebcli&lt;/li&gt;
&lt;li&gt;Django2.1.1 &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;Django 버전은, &lt;/p&gt;
&lt;p&gt;Elastic Beanstalk Python 구성 버전과 호환 되어야 합니다 &lt;/p&gt;
&lt;p&gt;Django 2.2 는, Elastic Beanstalk Python 3.6 플랫폼과는 호환되지 않으므로, &lt;/p&gt;
&lt;p&gt;Django 2.1.1 기반으로 한 프로젝트 실습을 진행 합니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Django-애플리케이션-배포하기"><a href="#Django-애플리케이션-배포하기" class="headerlink" title="Django 애플리케이션 배포하기"></a>Django 애플리케이션 배포하기</h2><br><p>AWS Elastic Beanstalk 에 Django 애플리케이션을 배포하는 연습을 진행 해 보려 합니다. </p><p><br>우선, 배포 진행을 하기전에 알아야할 주요 환경은 아래와 같습니다. </p><br><h2 id="주요-환경"><a href="#주요-환경" class="headerlink" title="주요 환경"></a>주요 환경</h2><br><ul><li>AWS 계정 </li><li>Python 3.6</li><li>pip</li><li>virtualenv</li><li>awsebcli</li><li>Django2.1.1 </li></ul><br><blockquote><p>Django 버전은, </p><p>Elastic Beanstalk Python 구성 버전과 호환 되어야 합니다 </p><p>Django 2.2 는, Elastic Beanstalk Python 3.6 플랫폼과는 호환되지 않으므로, </p><p>Django 2.1.1 기반으로 한 프로젝트 실습을 진행 합니다. </p></blockquote><br><a id="more"></a> <br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>AWS Elastic Beanstalk 배포 - 1</title>
      <link>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-1/</link>
      <guid>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-1/</guid>
      <pubDate>Thu, 24 Sep 2020 03:07:22 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;AWS-Elastic-Beanstalk-로-배포하기&quot;&gt;&lt;a href=&quot;#AWS-Elastic-Beanstalk-로-배포하기&quot; class=&quot;headerlink&quot; title=&quot;AWS Elastic Beanstalk 로 배포하기&quot;&gt;&lt;/a&gt;AW
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="AWS-Elastic-Beanstalk-로-배포하기"><a href="#AWS-Elastic-Beanstalk-로-배포하기" class="headerlink" title="AWS Elastic Beanstalk 로 배포하기"></a>AWS Elastic Beanstalk 로 배포하기</h2><br><p>Django 로 프로젝트를 개발한뒤에는, 아무래도 서비스를 실제 배포하여 사용할수 있습니다. </p><p><br>수 많은 배포 방법들이 존재하지만, 배포는 프로그래밍과는 또다른 의미로 어렵습니다. </p><br><p>특히 AWS 서비스를 다루는것만 해도 굉장히 복잡하기 때문에. Django 웹개발 공부를 진행하다가도, 배포에서 막힙니다. </p><br><p>배포에 막혀 너무 힘든 나날들을 보내다가, Elastic Beanstalk 로 배포를 시도해 보려 합니다. </p><br><br><h2 id="Elastic-Beanstalk-란"><a href="#Elastic-Beanstalk-란" class="headerlink" title="Elastic Beanstalk 란?"></a>Elastic Beanstalk 란?</h2><br><blockquote><p>AWS Elastic Beanstalk 는 JAVA, .NET, PHP, node.js, Python, Ruby, GO, Docker 를 사용하여, </p><p>Apache, Nginx, Passenger, IIS 와 같은 친숙한 서버에서 개발된 웹 애플리케이션 및 서비스를 </p><p>간편하게 배포하고 조정할수 있는 서비스 입니다. </p></blockquote><br><br><h2 id="Elastic-Beanstalk-의-이점"><a href="#Elastic-Beanstalk-의-이점" class="headerlink" title="Elastic Beanstalk 의 이점"></a>Elastic Beanstalk 의 이점</h2><br><ol><li><p><strong>빠르고 간편한 시작</strong> </p><p>AWS 에 애플리케이션을 배포하는 가장 빠르면서 간단한 방법입니다. Git 을 통해 어플리케이션을 업로드 하면, Elastic Beanstalk 가 용량 프로비져닝, 로드 밸런싱, Auto Scaling, 모니터링에 대한 배포 정보를 자동으로 처리합니다. 개발자가 배포를 위한, 인프라나 리소스를 따로 구성할 필요가 없습니다. </p></li></ol><br><ol start="2"><li><p><strong>개발자 생산성</strong> </p><p>Elastic Beanstlak 는 사용자 대신 배포를 위한 인프라를 운영 및 관리 해주므로, 개발자가 서버, 데이터베이스, 로드 밸런서, 방화벽, 네트워크 등을 관리하고 구성하는데에 시간을 들이지 않고. 오롯이 코드 작성에 집중할수 있게 해줍니다.</p></li></ol><br><ol start="3"><li><p><strong>Auto Scaling</strong></p><p>자동 스케일링 설정을 사용하여, 어플리케이션의 특정 요건에 따라, 자동으로 어플리케이션을 확장 및 축소 합니다. CPU 사용률 지표를 참조하여 Auto Scaling 작업을 발생 시킵니다. 이는, 어플리케이션 비용을 최소화 하면서, 높은 워크로드나, 트래픽을 처리할수 있게 해줍니다. </p></li></ol><br><ol start="4"><li><p><strong>완벽한 리소스 제어</strong></p><p>EC2 인스턴스 유형과 같은 AWS 리소스를 어플리케이션에 가장 적합한 리소스로 자유롭게 선택할수 있습니다. 손쉽게 리소스, 인프라 요소 등을 제어하려면, Elastic Beanstalk 의 관리 기능을 사용하면 됩니다. </p></li></ol><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/09/24/AWS-Elastic-Beanstalk-%EB%B0%B0%ED%8F%AC-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 22편 - 패키지안 모델 정리하기</title>
      <link>http://djangojeng-e.github.io/2020/08/22/Django-Models-22%ED%8E%B8-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%95%88-%EB%AA%A8%EB%8D%B8-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/08/22/Django-Models-22%ED%8E%B8-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%95%88-%EB%AA%A8%EB%8D%B8-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sat, 22 Aug 2020 06:44:10 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Models-Organising-models-in-a-package&quot;&gt;&lt;a href=&quot;#Models-Organising-models-in-a-package&quot; class=&quot;headerlink&quot; title=&quot;Models - Organising models in a package&quot;&gt;&lt;/a&gt;Models - Organising models in a package&lt;/h2&gt;&lt;h3 id=&quot;Organising-models-in-a-package&quot;&gt;&lt;a href=&quot;#Organising-models-in-a-package&quot; class=&quot;headerlink&quot; title=&quot;Organising models in a package&quot;&gt;&lt;/a&gt;Organising models in a package&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;manage.py startapp&lt;/code&gt; 커맨드는 models.py 를 포함한 어플리케이션 구조를 생성합니다. 많은 모델들을 가지고 있다면, 별도의 파일에 정리를 해두는것도 유용한 방법입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;그렇게 하기 위해서는,  models 패키지를 생성해야 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;models.py 를 없애고 &lt;/li&gt;
&lt;li&gt;app이름/models/디렉토리 를 생성합니다 &lt;/li&gt;
&lt;li&gt;app이름/models/디렉토리 안에, &lt;code&gt;__init__.py&lt;/code&gt; 파일을 생성하고, 당신의 모델을 저장할 파일들을 생성합니다 &lt;/li&gt;
&lt;li&gt;&lt;code&gt;__init__.py&lt;/code&gt; 파일에  import 해주어야 합니다 &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;p&gt;예를들어, organic.py , synthetic.py 가 모델 디렉토리 안에 있었다면, &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;__init__.py&lt;/code&gt; 파일에 import 해주는것을 잊지 않아야 합니다. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;myapp/models/__init__.py&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Models-Organising-models-in-a-package"><a href="#Models-Organising-models-in-a-package" class="headerlink" title="Models - Organising models in a package"></a>Models - Organising models in a package</h2><h3 id="Organising-models-in-a-package"><a href="#Organising-models-in-a-package" class="headerlink" title="Organising models in a package"></a>Organising models in a package</h3><br><p><code>manage.py startapp</code> 커맨드는 models.py 를 포함한 어플리케이션 구조를 생성합니다. 많은 모델들을 가지고 있다면, 별도의 파일에 정리를 해두는것도 유용한 방법입니다. </p><br><p>그렇게 하기 위해서는,  models 패키지를 생성해야 합니다. </p><br><ol><li>models.py 를 없애고 </li><li>app이름/models/디렉토리 를 생성합니다 </li><li>app이름/models/디렉토리 안에, <code>__init__.py</code> 파일을 생성하고, 당신의 모델을 저장할 파일들을 생성합니다 </li><li><code>__init__.py</code> 파일에  import 해주어야 합니다 </li></ol><br><p>예를들어, organic.py , synthetic.py 가 모델 디렉토리 안에 있었다면, </p><br><blockquote><p><code>__init__.py</code> 파일에 import 해주는것을 잊지 않아야 합니다. </p><p><code>myapp/models/__init__.py</code></p></blockquote><br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .organic <span class="keyword">import</span> Person </span><br><span class="line"><span class="keyword">from</span> .synthetic <span class="keyword">import</span> Robot</span><br></pre></td></tr></table></figure><br><p>명시적으로 각 모델을 가져오는것은, <code>from .models import *</code> 을 사용하는것보다 이점이 있습니다. </p><p><br>이름 공간을 어수선하게 하지 않게되고, 코드를 좀더 읽기 좋게 하고, 코드 분석 툴들을 더 유용하게 해줍니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/22/Django-Models-22%ED%8E%B8-%ED%8C%A8%ED%82%A4%EC%A7%80%EC%95%88-%EB%AA%A8%EB%8D%B8-%EC%A0%95%EB%A6%AC%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 21편 - Multiple Inheritance</title>
      <link>http://djangojeng-e.github.io/2020/08/21/Django-Models-21%ED%8E%B8-Multiple-Inheritance/</link>
      <guid>http://djangojeng-e.github.io/2020/08/21/Django-Models-21%ED%8E%B8-Multiple-Inheritance/</guid>
      <pubDate>Fri, 21 Aug 2020 05:32:16 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Multiple-Inheritance&quot;&gt;&lt;a href=&quot;#Multiple-Inheritance&quot; class=&quot;headerlink&quot; title=&quot;Multiple Inheritance&quot;&gt;&lt;/a&gt;Multiple Inheritance&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬에서 서브클래스를 받는것과 같이, DJango 모델은 다수의 부모 모델들을 상속 받는게 가능합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;하지만, 파이썬에서 일반적으로 이름짓는 방식들이 이 Django 모델 클래스에 적용된다는점을 염두해 두고 있어야 합니다 (예, 예약어들은 클래스명으로 사용할수 없음)&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;특정 이름, (예, Meta) 가 나타나는 첫번째 기본 클래스가 사용 될것입니다. 예를들면, 이것의 의미는 만약 다수의 부모 클래스들이 Meta 클래스를 하나씩 가지고 있는다면, 오직 첫번째 것만 사용이 되고, 나머지들은 무시 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;보편적으로 우리는, 다수의 부모 클래스로부터 상속 받을 필요가 없는 경우가 많습니다. 주 사용처는, “mix-in” 클래스들을 사용할때 유용하다는 점입니다. 특정 추가 필드를 추가하거나 “mix-in” 을 상속받는 모든 클래스에 메서드를 추가할때 유용합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;당신의 상속 구조를 가능한한 최대로 간단하고 명료하게 유지하도록 노력해야 합니다. 그래야, 특정 정보가 어디서 왔는지 알아내기 위해 고생할 필요가 없어집니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Multiple-Inheritance"><a href="#Multiple-Inheritance" class="headerlink" title="Multiple Inheritance"></a>Multiple Inheritance</h2><br><p>파이썬에서 서브클래스를 받는것과 같이, DJango 모델은 다수의 부모 모델들을 상속 받는게 가능합니다. </p><p><br>하지만, 파이썬에서 일반적으로 이름짓는 방식들이 이 Django 모델 클래스에 적용된다는점을 염두해 두고 있어야 합니다 (예, 예약어들은 클래스명으로 사용할수 없음)</p><br><p>특정 이름, (예, Meta) 가 나타나는 첫번째 기본 클래스가 사용 될것입니다. 예를들면, 이것의 의미는 만약 다수의 부모 클래스들이 Meta 클래스를 하나씩 가지고 있는다면, 오직 첫번째 것만 사용이 되고, 나머지들은 무시 됩니다. </p><br><p>보편적으로 우리는, 다수의 부모 클래스로부터 상속 받을 필요가 없는 경우가 많습니다. 주 사용처는, “mix-in” 클래스들을 사용할때 유용하다는 점입니다. 특정 추가 필드를 추가하거나 “mix-in” 을 상속받는 모든 클래스에 메서드를 추가할때 유용합니다. </p><br><p>당신의 상속 구조를 가능한한 최대로 간단하고 명료하게 유지하도록 노력해야 합니다. 그래야, 특정 정보가 어디서 왔는지 알아내기 위해 고생할 필요가 없어집니다. </p><br><a id="more"></a><br><blockquote><p>다수의 모델에서 상속받을때, </p><p>공통된 id, primary key 필드를 가지고 있는 모델들로부터 상속받는것은 에러를 발생 시킬겁니다. </p><br><p>제대로 다중 상속을 사용하기 위해서는, </p><p>명시적으로 AutoField 를 base 모델들 안에 사용합니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    article_id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    book_id = models.AutoField(primary_key=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookReview</span><span class="params">(Book, Article)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><br><p>혹은 AutoField 를 가지기 위해서, 공통 조상을 사용합니다. 이것은 각 부모 모델과 공통 조상 사이에 명시적으로 OneToOneField 를 사용하는것을 필요로 합니다. </p><br><p>그래야, 자식 클래스에 자동으로 생성되었거나 상속이 된 필드들 간에 충돌을 피할수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Piece</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Article</span><span class="params">(Piece)</span>:</span></span><br><span class="line">    article_piece = models.OneToOneField(Piece, on_delete=models.CASCADE, parent_link=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(Piece)</span>:</span></span><br><span class="line">    book_piece = models.OneToOneField(Piece, on_delete=models.CASCADE, parent_link=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BookReview</span><span class="params">(Book, Article)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><br><h3 id="Field-name-“hiding”-is-not-permitted"><a href="#Field-name-“hiding”-is-not-permitted" class="headerlink" title="Field name “hiding” is not permitted"></a>Field name “hiding” is not permitted</h3><br><blockquote><p>일반 파이썬 클래스 상속에서, </p><p>자녀 클래스가 부모 클래스의 속성을 override 하는것이 허용됩니다.</p><p>하지만, Django 에서는, 모델 필드들에 허용되지 않습니다. </p></blockquote><br><p>만약에 Abstract 모델 베이스 클래스가 author 라는 필드를 가지고 있으면, 이 베이스 클래스를 상속받는 어떤 클래스도 author 라는 필드 혹은 Author 라는 속성을 정의할수 없습니다. </p><br><p>이런 제약은, Abstract  모델에서 상속받은 모델 필드들에는 적용되지 않습니다. 이런 경우에 필드들은 다른 필드나 값으로 override 될수 있고, field_name = None 으로 제거 될수도 있습니다. </p><br><blockquote><p>주의사항 </p><p>모델 managers 는 Abstract base 클래스들에서 상속됩니다. </p><p>상속된 Manager 로 참조되는 상속된 필드를 Override 하는것은 버그를 일으킬수 있습니다. </p></blockquote><br><blockquote><p>노트 </p><p>어떤 필드들은 모델에 추가 속성들을 정의 합니다 </p><p>예를들어, </p><p>ForeignKey 는 _id 가 필드명에 추가된 추가 속성을 정의하고, related_name 과 related_query_name 을 Foreign 모델에 정의합니다. </p><p>이 추가 속성들은 override 될수 없습니다. 만약에 해당 필드를 저으이하는 필드가 수정 되었거나, </p><p>삭제되어서 해당 추가 속성을 더이상 정의하지 않는한, 이 추가 속성들은 override 될수 없습니다. </p></blockquote><br><p>부모 모델안에 필드들을 overriding 하는것은, 새로운 인스턴스들을 시작하거나 직렬화 같은 영역 안에서 어려움을 초래할수 있습니다. 이런 기능들은, 일반 파이썬 클래스 상속과 같은 방식으로 처리하지 않아도 되는것입니다. 따라서, Django 모델 상속과 Python 클래스 상속의 차이점은 임의적이지 않습니다. </p><br><p>이 제약은 필드 인스턴스들인 속성에만 적용됩니다. </p><br><p>표준 파이썬 속성들은, 원한다면, override 될수 있습니다. </p><br><p>속성 이름에도 적용이 됩니다. 만약 수동으로 데이터베이스 컬럼명을 바꾸고 있다면, multi-table 상속을 위해서 같은 컬럼명을 자식 모델과 조상 모델에 나타나게 할수 있습니다. (두개의 다른 데이터베이스 테이블에 있는 컬럼들 입니다.)</p><br><p>만약, 어떤 조상 모델이던지간에, 어떠한 모델 필드를 override 한다면, django 는 FieldError 를 발생 시킵니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/21/Django-Models-21%ED%8E%B8-Multiple-Inheritance/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 20편 - Model 상속 (Proxy models - 2)</title>
      <link>http://djangojeng-e.github.io/2020/08/20/Django-Models-20%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Proxy-models-2/</link>
      <guid>http://djangojeng-e.github.io/2020/08/20/Django-Models-20%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Proxy-models-2/</guid>
      <pubDate>Thu, 20 Aug 2020 05:33:02 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Model-Inheritance-proxy-models-2&quot;&gt;&lt;a href=&quot;#Model-Inheritance-proxy-models-2&quot; class=&quot;headerlink&quot; title=&quot;Model Inheritance proxy mode
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Model-Inheritance-proxy-models-2"><a href="#Model-Inheritance-proxy-models-2" class="headerlink" title="Model Inheritance proxy models - 2"></a>Model Inheritance proxy models - 2</h2><br><h3 id="Base-class-restrictions"><a href="#Base-class-restrictions" class="headerlink" title="Base class restrictions"></a>Base class restrictions</h3><br><p>프록시 모델은 하나의 모델 클래스 (abstract 가 아닌것)을 상속 받아야 합니다 </p><p><br>하지만, 다중의 모델 (abstract 가 아닌것)들을 상속 받을수 없습니다. </p><blockquote><p>프록시 모델은, 다른 데이터 베이스 테이블들에 존재하는 행(row) 들끼리 연결을 지원하지 않습니다. </p></blockquote><br><p>프록시 모델은 abstract 모델이 어떤 모델 필드도 정의하지 않는다는 전제하에, 여러개의 abstract 모델 클래스들을 상속 받을수 있습니다. </p><br><p>프록시 모델은 또한, 공통된 부모 클래스 (단, abstract 클래스가 아니여야 함)를 공유한다는 전제하에, 몇개라도 프록시 모델들을 상속 받을수 있습니다. </p><br><h3 id="Proxy-model-managers"><a href="#Proxy-model-managers" class="headerlink" title="Proxy model managers"></a>Proxy model managers</h3><br><p>프록시 모델에 어떤 model manager 도 지정하지 않는다면, 부모 모델의 manager 를 상속 받습니다. </p><br><p>만약 프록시 모델에 manager 를 정의 한다면, 정의된 manager 가 기본값이 됩니다. </p><p><br>물론, 어떤 manager 든지 부모 클래스에 정의된 manager 도 여전히 사용 가능합니다. </p><br><p>이전 포스팅에서 진행한 예시에 이어서, Person 모델의 쿼리에서 사용되는 기본 manager 를 바꿀수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewManager</span><span class="params">(models.Manager)</span>:</span></span><br><span class="line">    <span class="comment"># ...</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPerson</span><span class="params">(Person)</span>:</span></span><br><span class="line">    objects = NewManager()</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        proxy = <span class="literal">True</span></span><br></pre></td></tr></table></figure><br><p>만약 새로운 manager 를 기존에 존재하는 기본값을 바꾸지 않고 프록시에 추가하고 싶으면, custom manager 문서에 나와 있는 기술들을 사용해서 바꿀수 있습니다. </p><br><p>새로운 manager 를 가지고 있는 클래스를 생성하고, 기본 베이스 클래스 뒤에, 생성한 클래스를 상속 시켜 주면 됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 새로운 Manager 를 위한 Abstract 클래스를 생성해줍니다.</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExtraManagers</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    secondary = NewManager() </span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPerson</span><span class="params">(Person, ExtraManagers)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        proxy = <span class="literal">True</span></span><br></pre></td></tr></table></figure><br><br><h3 id="프록시-상속과-관리되지않은-모델의-차이점"><a href="#프록시-상속과-관리되지않은-모델의-차이점" class="headerlink" title="프록시 상속과 관리되지않은 모델의 차이점"></a>프록시 상속과 관리되지않은 모델의 차이점</h3><br><p>프록시 모델 상속은 Meta 클래스에 managed 속성을 사용한, 관리되지 않은 모델을 생성하는것과 비슷해 보일지 모릅니다. </p><br><p>조심스럽게 Meta.db_table 을 설정하여, 기존에 존재하는 모델의 그림자 같은 관리되지 않은 모델을 생성할수 있고, 파이썬 메서드도 추가할수 있습니다. </p><br><p>하지만, 그것은 매우 반복적이고 깨지기 쉬운 구조 입니다. 수정할때 마다, 모든 복사본들을 동기화 해야 하기 때문입니다. </p><br><p>한편으로는, 프록시 모델들은 정확하게 프록싱 하는 기존 모델의 동작 처럼 동작하게 만들어 졌습니다. 프록시 모델은 언제나 부모 모델과 동기화 되어 있습니다 (직접 필드와 메니져들을 부모에게서 상속 받기 때문).</p><br><p>보통 법칙들은 </p><ol><li>기존 모델 혹은 데이터베이스를 미러링 하고, 모든 오리지널 데이터베이스 테이블 열들을 원하지 않을때, Meta.mangled=False 를 사용해 줍니다. 이 옵션은 데이터베이스 뷰들을 모델링 할때와 Django 로 제어되지 않는 테이블들을에 유용합니다. </li></ol><ol start="2"><li>만약 모델의 파이썬 동작만 바꾸고 싶은데, 같은 필드들을 오리지널과 같이 유지하고 싶을때, Meta.proxy=True 로 설정해 줍니다. 이 설정은, 데이터가 저장될때, 프록시 모델이 정확한 오리지널 모델 저장구조의 복사본이 됩니다.  <br></li></ol>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/20/Django-Models-20%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Proxy-models-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 20편 - Model 상속 (Proxy models - 1)</title>
      <link>http://djangojeng-e.github.io/2020/08/19/Django-Models-20%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Proxy-models-1/</link>
      <guid>http://djangojeng-e.github.io/2020/08/19/Django-Models-20%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Proxy-models-1/</guid>
      <pubDate>Wed, 19 Aug 2020 11:27:49 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Model-상속-Proxy-models&quot;&gt;&lt;a href=&quot;#Model-상속-Proxy-models&quot; class=&quot;headerlink&quot; title=&quot;Model 상속 (Proxy models)&quot;&gt;&lt;/a&gt;Model 상속 (Proxy models)&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Proxy-models&quot;&gt;&lt;a href=&quot;#Proxy-models&quot; class=&quot;headerlink&quot; title=&quot;Proxy models&quot;&gt;&lt;/a&gt;Proxy models&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;Multi-table 상속을 사용할때에는, 새로운 데이터베이스 테이블이 각 서브 클래스 마다 생성 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이는 보통 우리가 의도하는 동작이고, 서브 클래스들은, 베이스 클래스에 존재하지 않는 추가적인 데이터 필드들을 저장하기 위한 공간이 필요합니다.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;하지만, 때때로 모델의 파이썬 동작을 바꾸고 싶을때가 있습니다 - 기본 메니저를 변경하거나 혹은 새로운 메서드를 추가할때 처럼 말이죠. &lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;이것이 바로 프록시 모델 상속이 존재하는 이유 입니다. 기존 모델을 위해서 새로운 proxy 를 생성하는것 입니다. &lt;/p&gt;
&lt;br&gt;



&lt;blockquote&gt;
&lt;p&gt;모델의 파이썬 동작을 바꾸고 싶을때, 기존 모델을 위한 새로운 proxy 를 생성 합니다. &lt;/p&gt;
&lt;p&gt;예) 기본 메니져 변경, 새로운 메서드 추가 등등 &lt;/p&gt;
&lt;/blockquote&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Model-상속-Proxy-models"><a href="#Model-상속-Proxy-models" class="headerlink" title="Model 상속 (Proxy models)"></a>Model 상속 (Proxy models)</h2><br><h3 id="Proxy-models"><a href="#Proxy-models" class="headerlink" title="Proxy models"></a>Proxy models</h3><br><p>Multi-table 상속을 사용할때에는, 새로운 데이터베이스 테이블이 각 서브 클래스 마다 생성 됩니다. </p><br><p>이는 보통 우리가 의도하는 동작이고, 서브 클래스들은, 베이스 클래스에 존재하지 않는 추가적인 데이터 필드들을 저장하기 위한 공간이 필요합니다.<br><br></p><p>하지만, 때때로 모델의 파이썬 동작을 바꾸고 싶을때가 있습니다 - 기본 메니저를 변경하거나 혹은 새로운 메서드를 추가할때 처럼 말이죠. <br><br></p><p>이것이 바로 프록시 모델 상속이 존재하는 이유 입니다. 기존 모델을 위해서 새로운 proxy 를 생성하는것 입니다. </p><br><blockquote><p>모델의 파이썬 동작을 바꾸고 싶을때, 기존 모델을 위한 새로운 proxy 를 생성 합니다. </p><p>예) 기본 메니져 변경, 새로운 메서드 추가 등등 </p></blockquote><a id="more"></a><br><blockquote><p>프록시 (proxy) 라는 개념은 영문으로 직역하면, 일종의 대리권, 대리인 이라 생각하면 되고.</p><p>일종의 부모 클래스의 복제품이라고 생각하면 됩니다. </p><p>다만, 부모 클래스와 동일한 데이터베이스 테이블을 사용합니다. </p></blockquote><br><p>여러분들은 프록시 모델의 인스턴스들을 생성, 삭제, 그리고 업데이트를 해줄수 있고. </p><p><br>모든 데이터들은 마치 기존 모델을 사용하느것처럼 저장될수 있습니다. <br><br></p><p>차이점은, 여러분들이 proxy 의 기본 모델 정렬 혹은 기본 메니져 같은 것들을 뭔본 모델을 바꿀 필요 없이 수정할수 있다는 점 입니다. <br><br></p><blockquote><p>프록시 모델은 일반 모델처럼 생성 됩니다 </p><p>하지만, proxy 속성 값을 Meta 클래스 안에서, True 로 지정해주어야 합니다 .</p></blockquote><br><p>아래 코드를 예시로 들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    first_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    last_name = models.CharField(max_length=<span class="number">30</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPerson</span><span class="params">(Person)</span>:</span></span><br><span class="line">    <span class="comment"># Meta 클래스 안에, proxy = True 로 설정해줌 </span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        proxy = <span class="literal">True</span> </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="comment"># ... </span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><br><p>MyPerson 클래스는, 부모 클래스인 Person 클래스와 같은 데이터베이스 테이블에서 동작 합니다. </p><br><p>특히, Person 의 어떤 새로운 인스턴스들도 MyPerson 을 통해서 접근이 가능합니다. MyPerson 의 새로운 인스턴스들도 Person 을 통해서 접근이 가능합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">In [1]: p = Person.objects.create(first_name="Colin", last_name="Firth")                                                                                                  </span><br><span class="line">In [2]: MyPerson.objects.get(first_name="Colin")                                                                                                                          </span><br><span class="line">Out[2]: &lt;MyPerson: MyPerson object (1)&gt;</span><br><span class="line"></span><br><span class="line">In [3]: Person.objects.get(first_name="Colin")                                                                                                                            </span><br><span class="line">Out[3]: &lt;Person: Person object (1)&gt;</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OrderPerson</span><span class="params">(Person)</span>:</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MEta</span>:</span></span><br><span class="line">ordering = [<span class="string">"last_name"</span>]</span><br><span class="line">proxy = <span class="literal">True</span></span><br></pre></td></tr></table></figure><br><p>일반적인  Person 쿼리들은 정렬이 되지 않겠지만, </p><p><br>OrderedPerson 쿼리들은 last_name 기준으로 정렬이 될겁니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">In [4]: a = Person.objects.create(first_name="동원", last_name="강")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [5]: b = Person.objects.create(first_name="지석", last_name="강")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [6]: c = Person.objects.create(first_name="문희", last_name="나")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [7]: d = Person.objects.create(first_name="민영", last_name="박")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [8]: e = Person.objects.create(first_name="태현", last_name="차")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [9]: f = Person.objects.create(first_name="성경", last_name="이")                                                                                                      </span><br><span class="line"></span><br><span class="line">In [10]: Person.objects.all()                                                                                                                                             </span><br><span class="line">Out[10]: &lt;QuerySet [&lt;Person: Firth&gt;, &lt;Person: 강&gt;, &lt;Person: 강&gt;, </span><br><span class="line">&lt;Person: 나&gt;, &lt;Person: 박&gt;, &lt;Person: 차&gt;, &lt;Person: 이&gt;]&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> last_name 즉 성씨를 기준으로 정렬 </span></span><br><span class="line">In [11]: OrderedPerson.objects.all()                                                                                                                                      </span><br><span class="line">Out[11]: &lt;QuerySet [&lt;OrderedPerson: Firth&gt;, &lt;OrderedPerson: 강&gt;, &lt;OrderedPerson: 강&gt;, </span><br><span class="line">&lt;OrderedPerson: 나&gt;, &lt;OrderedPerson: 박&gt;, &lt;OrderedPerson: 이&gt;, &lt;OrderedPerson: 차&gt;]&gt;</span><br></pre></td></tr></table></figure><br><p>프록시 모델들은,  Meta 속성을 일반 모델들이 상속 받는 방식과 동일하게 상속 받습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/19/Django-Models-20%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Proxy-models-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 19편 - Model 상속 Multi-table inheritance 2편</title>
      <link>http://djangojeng-e.github.io/2020/08/18/Django-Models-19%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Multi-table-inheritance-2%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/08/18/Django-Models-19%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Multi-table-inheritance-2%ED%8E%B8/</guid>
      <pubDate>Tue, 18 Aug 2020 11:02:05 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Multi-table-inheritance-2편&quot;&gt;&lt;a href=&quot;#Multi-table-inheritance-2편&quot; class=&quot;headerlink&quot; title=&quot;Multi-table inheritance 2편&quot;&gt;&lt;/a&gt;Multi-table inheritance 2편&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Inheritance-and-reverse-relations&quot;&gt;&lt;a href=&quot;#Inheritance-and-reverse-relations&quot; class=&quot;headerlink&quot; title=&quot;Inheritance and reverse relations&quot;&gt;&lt;/a&gt;Inheritance and reverse relations&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;multi-table 상속은 암시적으로, OneToOneField 를 사용하여 자식 클래스와 부모 클래스를 연결해 주기 때문에, 부모 클래스에서 자식 클래스로 이동이 가능해 집니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;하지만, 이는 ForeignKey 와 ManyToManyField 관계들을 위한 기본 related_name 값을 사용합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;만일 우리가, ForeignKey 나 ManyToManyField 관게들을 부모의 서브클래스에 넣어준다면, 각 필드에 related_name 속성들을 지정해 주어야 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;각 필드에 이 relate_name 속성을 지정해 주지 않는다면, Django는 유효성 에러를 발생 시킬겁니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Multi-table-inheritance-2편"><a href="#Multi-table-inheritance-2편" class="headerlink" title="Multi-table inheritance 2편"></a>Multi-table inheritance 2편</h2><br><h3 id="Inheritance-and-reverse-relations"><a href="#Inheritance-and-reverse-relations" class="headerlink" title="Inheritance and reverse relations"></a>Inheritance and reverse relations</h3><br><p>multi-table 상속은 암시적으로, OneToOneField 를 사용하여 자식 클래스와 부모 클래스를 연결해 주기 때문에, 부모 클래스에서 자식 클래스로 이동이 가능해 집니다. </p><br><p>하지만, 이는 ForeignKey 와 ManyToManyField 관계들을 위한 기본 related_name 값을 사용합니다. </p><br><p>만일 우리가, ForeignKey 나 ManyToManyField 관게들을 부모의 서브클래스에 넣어준다면, 각 필드에 related_name 속성들을 지정해 주어야 합니다. </p><br><p>각 필드에 이 relate_name 속성을 지정해 주지 않는다면, Django는 유효성 에러를 발생 시킬겁니다. </p><br><br><a id="more"></a><br><p>예시를 들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">80</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(Place)</span>:</span></span><br><span class="line">    serves_hot_dogs = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    serves_pizza = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 새로운 서브 클래스 추가 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Supplier</span><span class="params">(Place)</span>:</span></span><br><span class="line">    customers = models.ManyToManyField(Place)</span><br></pre></td></tr></table></figure><br><p>이렇게 코드를 짜면, 에러를 발생 시킵니다. </p><p><br>새로운 클래스를 추가하고, python manage.py makemigraitons 를 실행하면, 아래와 같은 에러가 출력 됩니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(django-tutorial)  dhkang  ~/django_tutorial/django_docs master python manage.py makemigrations</span><br><span class="line">SystemCheckError: System check identified some issues:</span><br><span class="line"></span><br><span class="line">ERRORS:</span><br><span class="line">multitableinheritance.Supplier.customers: (fields.E305) Reverse query name </span><br><span class="line">for 'Supplier.customers' clashes with reverse query name for 'Supplier.place_ptr'.</span><br><span class="line">        HINT: Add or change a related_name argument to the definition for </span><br><span class="line">'Supplier.customers' or 'Supplier.place_ptr'.</span><br></pre></td></tr></table></figure><br><br><blockquote><p>related_name 을 아래와 같이 customers 필드에 추가를 하면, 에러가 해결됩니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">80</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(Place)</span>:</span></span><br><span class="line">    serves_hot_dogs = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    serves_pizza = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 새로운 서브 클래스 추가 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Supplier</span><span class="params">(Place)</span>:</span></span><br><span class="line">    customers = models.ManyToManyField(Place, related_name=<span class="string">'provider'</span>)</span><br><span class="line">    <span class="comment"># related_name='provider' 라고 지정을 해줌</span></span><br></pre></td></tr></table></figure><br><p><code>related_name</code> 을 지정해주고, python manage.py makemigrations 를 실행해주면, migrations 가 생성됩니다.<br><br></p><h3 id="Specifying-the-parent-link-field"><a href="#Specifying-the-parent-link-field" class="headerlink" title="Specifying the parent link field"></a>Specifying the parent link field</h3><br><p>이전에도 언급되었듯이, django 는 자동적으로 OneToONeField 를 사용하여, 자식 클래스를 Abstract base 클래스가 아닌 부모 클래스 모델에 연결해 줍니다. 만약 부모와 연결되는 속성들의 이름을 제어하고 싶다면, 스스로 OneToOneField 를 생성하고, parent_link = True 로 설정하여, 당신의 필드가 부모 클래스에 뒤쪽으로 연결 된다는것을 표시할수 있습니다.<br><br></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/18/Django-Models-19%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Multi-table-inheritance-2%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 19편 - Model 상속 Multi-table inheritance 1편</title>
      <link>http://djangojeng-e.github.io/2020/08/17/Django-Models-19%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Multi-table-inheritance-1%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/08/17/Django-Models-19%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Multi-table-inheritance-1%ED%8E%B8/</guid>
      <pubDate>Mon, 17 Aug 2020 07:11:53 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Model-상속-Multi-table-inheritance&quot;&gt;&lt;a href=&quot;#Model-상속-Multi-table-inheritance&quot; class=&quot;headerlink&quot; title=&quot;Model 상속 (Multi-table inheritance )&quot;&gt;&lt;/a&gt;Model 상속 (Multi-table inheritance )&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;Django 모델을 상속 받는데에 있어서 3가지 스타일이 존재합니다. &lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;Abstract base classes &lt;/li&gt;
&lt;li&gt;Multi-table inheritance&lt;/li&gt;
&lt;li&gt;Proxy Models &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;h3 id=&quot;Multi-table-inheritance&quot;&gt;&lt;a href=&quot;#Multi-table-inheritance&quot; class=&quot;headerlink&quot; title=&quot;Multi-table inheritance&quot;&gt;&lt;/a&gt;Multi-table inheritance&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;Django 모델에서 지원하는 두번째 모델 상속 방식은, Multi-table inheritance 입니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;각 모델이 계층구조에서, 자체적으로 모델일 경우 입니다. &lt;/p&gt;
&lt;p&gt;각 모델은 각자의 데이터베이스 테이블에 해당 되고, 각각 쿼리문을 보내거나 생성될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;상속 관계는, 자식 모델과 부모 모델의 연결고리를 만들어 놓습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;예를들면,
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Model-상속-Multi-table-inheritance"><a href="#Model-상속-Multi-table-inheritance" class="headerlink" title="Model 상속 (Multi-table inheritance )"></a>Model 상속 (Multi-table inheritance )</h2><br><p>Django 모델을 상속 받는데에 있어서 3가지 스타일이 존재합니다. </p><br><ol><li>Abstract base classes </li><li>Multi-table inheritance</li><li>Proxy Models </li></ol><br><h3 id="Multi-table-inheritance"><a href="#Multi-table-inheritance" class="headerlink" title="Multi-table inheritance"></a>Multi-table inheritance</h3><br><p>Django 모델에서 지원하는 두번째 모델 상속 방식은, Multi-table inheritance 입니다. </p><p><br>각 모델이 계층구조에서, 자체적으로 모델일 경우 입니다. </p><p>각 모델은 각자의 데이터베이스 테이블에 해당 되고, 각각 쿼리문을 보내거나 생성될수 있습니다. </p><br><p>상속 관계는, 자식 모델과 부모 모델의 연결고리를 만들어 놓습니다. </p><br><p>예를들면, <a id="more"></a></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Place</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">50</span>)</span><br><span class="line">    address = models.CharField(max_length=<span class="number">80</span>)</span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Restaurant</span><span class="params">(Place)</span>:</span></span><br><span class="line">    serves_hot_dogs = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    serves_pizza = models.BooleanField(default=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><br><p>Place 의 모든 필드들은, Restaurant 에서도 사용할수 있습니다. </p><p><br>하지만, 데이터는 다른 데이터베이스 테이블에 존재하게 됩니다. 따라서, 아래 상황들 둘다 가능합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Place.objects.filter(name=<span class="string">"Bob's Cafe"</span>)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; Restaurant.objects.filter(name=<span class="string">"Bob's Cafe"</span>)</span></span><br><span class="line"></span><br><span class="line">In [1]: bobscafe = Place.objects.create(name="Bob's Cafe", address="Bob ba di rara")                                                                                      </span><br><span class="line"></span><br><span class="line">In [2]: Place.objects.filter(name="Bob's Cafe")                                                                                                                           </span><br><span class="line">Out[2]: &lt;QuerySet [&lt;Place: Place object (1)&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [3]: Restaurant.objects.filter(name="Bob's Cafe")                                                                                                                      </span><br><span class="line">Out[3]: &lt;QuerySet []&gt;</span><br></pre></td></tr></table></figure><br><p>만약 Place 이면서, Restaurant 인 경우, </p><p><br>Place 객체에서 Restaurant 객체를 얻을수 있는데, 모델 이름의 소문자 형태를 사용하여 얻을수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [4]: p = Restaurant.objects.create(name="pizza hut", address="789 Hume Highway", serves_hot_dogs=False, serves_pizza=True)                                             </span><br><span class="line"></span><br><span class="line">In [5]: Place.objects.all()                                                                                                                                               </span><br><span class="line">Out[5]: &lt;QuerySet [&lt;Place: Place object (1)&gt;, &lt;Place: Place object (2)&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [7]: Restaurant.objects.all()                                                                                                                                          </span><br><span class="line">Out[7]: &lt;QuerySet [&lt;Restaurant: Restaurant object (2)&gt;]&gt;</span><br><span class="line"></span><br><span class="line">In [8]: p = Place.objects.get(id=2)    # p 가 Restaurant 객체 일때, 자식 클래스를 제공한다                                                                                                                                    </span><br><span class="line"></span><br><span class="line">In [10]: p.restaurant                                                                                                                                                     </span><br><span class="line">Out[10]: &lt;Restaurant: Restaurant object (2)&gt;</span><br></pre></td></tr></table></figure><br><p>하지만, 위 예제에서, p  라는 인스턴스가 Restaurant 이 아니라, Place 객체로 직접 생성 되었다면, </p><p><code>p.restaurant</code> 은 Restaurant DoesNotExist 예외를 발생 시켰을 겁니다. </p><p><br> Restaurant 을 Place 에 연결해 주는, 자동 생성된 OneToOneField 는 아래와 같이 생겼습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Place_ptr = models.OneToOneField(</span><br><span class="line">    Place, on_delete=models.CASCADE, </span><br><span class="line">    parent_link = <span class="literal">True</span>, </span><br><span class="line">    primary_key = <span class="literal">True</span>, </span><br><span class="line">)</span><br></pre></td></tr></table></figure><br><p>Restaurant 에서 OneToOneField 의 paraent_link=True 로 설정해 줌으로써, 필드를 오버라이드 할수 있습니다. </p><br><h3 id="Meta-and-Multi-table-inheritance"><a href="#Meta-and-Multi-table-inheritance" class="headerlink" title="Meta and Multi-table inheritance"></a>Meta and Multi-table inheritance</h3><br><p>multi-table 상속 상황속에서는, 자식 클래스가 부모의 Meta 클래스를 상속 받는게 있을수 없는 일입니다. </p><p><br>모든 Meta 옵션들은 이미 부모 클래스에 적용 되어 있고, 이것을 다시 적용 한다는것은 단지 모순된 동작으로 이어지게 할 뿐입니다. </p><br><p>따라서, 자식 모델은, 부모의 Meta 클래스에 접근할수 없습니다. 그렇지만, 자식 모델이 부모 모델의 동작을 상속받는 몇가지 제한적 경우가 있습니다. </p><br><blockquote><p>만약, </p><p>자식 모델이 ordering 속성 혹은 get_latest_by 속성을 지정하고 있지 않다면, </p><p>이 속성들을 부모 클래스에서 상속 받을수 있습니다. </p></blockquote><br><p>만약 부모 모델이  ordering 을 가지고 있고, 자식 모델이 자연스러운 ordering 을 가지게 하고 싶으면, </p><p><br>명시적으로 비활성화를 시켜주면 됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildModel</span><span class="params">(ParentModel)</span>:</span></span><br><span class="line">    <span class="comment"># ... </span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        <span class="comment"># 부모 모델의 ordering 을 제거 해주기 </span></span><br><span class="line">        ordering = []</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/17/Django-Models-19%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Multi-table-inheritance-1%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 18편 - Model 상속 related_name, related_query_name</title>
      <link>http://djangojeng-e.github.io/2020/08/16/Django-Models-18%ED%8E%B8-Model-%EC%83%81%EC%86%8D-related-name-related-query-name/</link>
      <guid>http://djangojeng-e.github.io/2020/08/16/Django-Models-18%ED%8E%B8-Model-%EC%83%81%EC%86%8D-related-name-related-query-name/</guid>
      <pubDate>Sun, 16 Aug 2020 08:44:39 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Be-careful-with-related-name-and-related-query-name&quot;&gt;&lt;a href=&quot;#Be-careful-with-related-name-and-related-query-name&quot; class=&quot;headerlink&quot; title=&quot;Be careful with related_name and related_query_name&quot;&gt;&lt;/a&gt;Be careful with related_name and related_query_name&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;만약 우리가 ForeginKey 나 ManyToManyField 에 related_name 혹은 related_query_name 을 사용하고 있다면, 우리는 언제나 고유한 reverse name 과 query name 들을 해당 필드에 지정해 주어야 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이 related_name 과 related_query_name 부분에 대해서, 아주 심도있게 clarification 한 곳이 없으므로. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;예시만 보고 지나갑니다. &lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Be-careful-with-related-name-and-related-query-name"><a href="#Be-careful-with-related-name-and-related-query-name" class="headerlink" title="Be careful with related_name and related_query_name"></a>Be careful with related_name and related_query_name</h2><br><p>만약 우리가 ForeginKey 나 ManyToManyField 에 related_name 혹은 related_query_name 을 사용하고 있다면, 우리는 언제나 고유한 reverse name 과 query name 들을 해당 필드에 지정해 주어야 합니다. </p><br><p>이 related_name 과 related_query_name 부분에 대해서, 아주 심도있게 clarification 한 곳이 없으므로. </p><br><p>예시만 보고 지나갑니다. </p><a id="more"></a><br><p>common/models.py </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    m2m = models.ManyToManyField(</span><br><span class="line">    OtherModel, </span><br><span class="line">    related_name = <span class="string">"%(app_label)s_%(class)s_related"</span>,</span><br><span class="line">    related_query_name = <span class="string">"%(app_label)s_%(class)ss"</span>,</span><br><span class="line">    )</span><br><span class="line">    </span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span> </span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChilA</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">class ChildB(Base);</span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><br><p>다른 앱도 같이 주어 집니다 rare/models.py </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> common.models <span class="keyword">import</span> Base</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChildB</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><br><blockquote><p>common.ChilA.m2m 필드의 역방향 이름은, </p><p>common_childa_related 이고, </p><p>역방향 쿼리 이름은, common_childas 가 될것입니다. </p><br><p>common.ChildB.m2m  필드의 역방향 이름은, </p><p>common_childb_related 이고, </p><p>역방향 쿼리 이름은, common_childbs 가 될것입니다. </p><br><p>마지막으로, </p><br><p>rare.childB.m2m 의 역방향 이름은, rare_childb_related 가 되고, </p><p>역방향 쿼리 이름은, rare_childbs 가 될것입니다. </p></blockquote><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/16/Django-Models-18%ED%8E%B8-Model-%EC%83%81%EC%86%8D-related-name-related-query-name/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 17편 - Model 상속 (Abstract Base Class) 2</title>
      <link>http://djangojeng-e.github.io/2020/08/15/Django-Models-17%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Abstract-Base-Class-2/</link>
      <guid>http://djangojeng-e.github.io/2020/08/15/Django-Models-17%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Abstract-Base-Class-2/</guid>
      <pubDate>Sat, 15 Aug 2020 05:40:39 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Meta-Inheritance&quot;&gt;&lt;a href=&quot;#Meta-Inheritance&quot; class=&quot;headerlink&quot; title=&quot;Meta Inheritance&quot;&gt;&lt;/a&gt;Meta Inheritance&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;ab
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Meta-Inheritance"><a href="#Meta-Inheritance" class="headerlink" title="Meta Inheritance"></a>Meta Inheritance</h2><br><p><code>abstract base class</code>가 생성될때에, django 는 base class 안에 선언된 Meta 클래스를 속성으로 만들어 줍니다. 만약 하나의 자식 클래스안에, 해당 자식 클래스를 위한 Meta class 가 정의되어 있지 않다면, 부모의 Meta 를 상속 받을것 입니다. </p><br><blockquote><p>만약 자식 클래스가, 부모의 Meta 클래스를 확장하고 싶다면, </p><p>자식  클래스는, 부모의 Meta 클래스를 자식 클래스 내에 있는 Meta 에서 상속 받으면 됩니다. </p></blockquote><br><p>코드 예시를 들자면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    age = models.PositiveIntegerField()</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span> </span><br><span class="line">        ordering = [<span class="string">'name'</span>]</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(CommonInfo)</span>:</span></span><br><span class="line">    home_group = models.CharField(max_length=<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span><span class="params">(CommonInfo.Meta)</span>:</span></span><br><span class="line">        db_table = <span class="string">'student_info'</span></span><br></pre></td></tr></table></figure><br><p>Django 는 기본적으로, abstract base 클래스의 Meta class 에 대한 조정사항을 가집니다. Meta 속성을 설치하기 이전에, abstract=False 로 지정합니다. </p><br><p>이것이 의미하는바는, <br></p><p>abstract 클래스의 자녀들은 자동으로 그리고 스스로는 abstract 클래스가 되지 않는다는것을 의미합니다.</p><br><p>물론, 다른 abstract 클래스를 상속받는 Abstract 클래스를 만드는것도 가능합니다. </p><p>단지 만들때마다, 명시적으로, abstract=True 를 지정해주는것만이 필요할 뿐입니다. </p><br><p>어떠한 속성들은 Abstract base class 의 Meta 안에 포함되는것이 이상해 보일때가 있습니다. </p><p><br>예를들면, db_table 을 포함한다면, 모든 자식 클래스들이 같은 데이터베이스 테이블을 사용하게 된다는 의미가 됩니다. 이렇게 설정하면, 매우 일이 이상해 집니다. </p><br><h2 id="마치며"><a href="#마치며" class="headerlink" title="마치며.."></a>마치며..</h2><br><p>자식 클래스에 있는 Meta Class 도 부모 클래스에 있는 Meta 클래스를 상속 받을수 있습니다. </p><br><p>연습도 해볼겸, 인스턴스 생성후, 속성값들을 확인해 봅니다. </p><br><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">In</span> [<span class="number">1</span>]: colin = Student.objects.create(name=<span class="string">"Colin Firth"</span>, age=<span class="number">60</span>, home_group=<span class="string">"king"</span>)                                                                                     </span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">2</span>]: colin.Meta                                                                                                                                                        </span><br><span class="line">Out[<span class="number">2</span>]: abstractbaseclasses.models.CommonInfo.Meta</span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">4</span>]: colin.name                                                                                                                                                        </span><br><span class="line">Out[<span class="number">4</span>]: <span class="string">'Colin Firth'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">In</span> [<span class="number">5</span>]: colin.age                                                                                                                                                         </span><br><span class="line">Out[<span class="number">5</span>]: <span class="number">60</span></span><br></pre></td></tr></table></figure><br><p>Student class 안에 Meta 클래스에 db_table 이 데이터베이스 테이블 명이 된것을 확인할수 있습니다. </p><br><p>CommonInfo 클래스 안에 존재하는 Meta 클래스에, 이 db_table 속성을 넣어두면, </p><p>CommonInfo 클래스를 상속하는 모든 자식 클래스들의 데이터베이스 테이블명이 모두 하나로 동일하게 될겁니다. 그렇게 되면, 조금 이상한 일이 될겁니다. </p><br><br><br><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/15/Django-Models-17%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Abstract-Base-Class-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Models 17편 - Model 상속 (Abstract Base Class) 1</title>
      <link>http://djangojeng-e.github.io/2020/08/14/Django-Models-17%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Abstract-Base-Class-1/</link>
      <guid>http://djangojeng-e.github.io/2020/08/14/Django-Models-17%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Abstract-Base-Class-1/</guid>
      <pubDate>Fri, 14 Aug 2020 08:41:36 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Model-Inheritance-Abstract-Base-Classes&quot;&gt;&lt;a href=&quot;#Model-Inheritance-Abstract-Base-Classes&quot; class=&quot;headerlink&quot; title=&quot;Model Inheritance (Abstract Base Classes)&quot;&gt;&lt;/a&gt;Model Inheritance (Abstract Base Classes)&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;Abstract Base classes&lt;/code&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;Abstract base 클래스들은, 여러분들이 어떠한 공통된 정보들을, 다른 모델들에 넣고 싶을때에 유용하게 쓸수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;Base 클래스를 작성한다음, &lt;code&gt;Meta class&lt;/code&gt; 에다가, &lt;code&gt;abstract=True&lt;/code&gt;  로 설정합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;그러면, 해당 모델은, 데이터베이스를 생성하는데에 사용되지 않습니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;다른 모델들의 Base 클래스로 사용될때에는, &lt;/p&gt;
&lt;p&gt;Base 클래스의 필드들이 자식 클래스들에 추가 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;예시를 들자면, &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Model-Inheritance-Abstract-Base-Classes"><a href="#Model-Inheritance-Abstract-Base-Classes" class="headerlink" title="Model Inheritance (Abstract Base Classes)"></a>Model Inheritance (Abstract Base Classes)</h2><br><p><code>Abstract Base classes</code></p><br><p>Abstract base 클래스들은, 여러분들이 어떠한 공통된 정보들을, 다른 모델들에 넣고 싶을때에 유용하게 쓸수 있습니다. </p><br><p>Base 클래스를 작성한다음, <code>Meta class</code> 에다가, <code>abstract=True</code>  로 설정합니다. </p><p><br>그러면, 해당 모델은, 데이터베이스를 생성하는데에 사용되지 않습니다. </p><br><blockquote><p>다른 모델들의 Base 클래스로 사용될때에는, </p><p>Base 클래스의 필드들이 자식 클래스들에 추가 됩니다. </p></blockquote><br><p>예시를 들자면, </p><br><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CommonInfo</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    name = models.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    age = models.PositiveIntegerField()</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        abstract = <span class="literal">True</span> </span><br><span class="line">        <span class="comment"># class Meta 를 선언함으로써, 다른 모델들이 상속 받을수 있는 모델이 됨 </span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(CommonInfo)</span>:</span></span><br><span class="line">    <span class="comment"># 공통된 정보를 가지고 있는 CommonInfo 클래스를 상속받는 Student 클래스 모델 </span></span><br><span class="line">    home_group = models.CharField(max_length=<span class="number">5</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span><span class="params">(CommonInfo)</span>:</span></span><br><span class="line">    <span class="comment"># 공통된 정보를 가지고 있는 CommonInfo 클래스를 상속받는 Teacher 클래스 모델 </span></span><br><span class="line">    teaching_subject = models.CharField(max_length=<span class="number">20</span>)</span><br></pre></td></tr></table></figure><br><p>위의 예시에서, CommonInfo 클래스에 있는 name 과 age 필드는, </p><p>Student 모델과, Teacher 모델이 상속받는 필드입니다. </p><br><p>따라서, Student 모델은 3가지 필드들을 갖게 됩니다. name, age 그리고 home_group. </p><p>비슷한 의미로, Teacher 모델은 name, age 그리고 teaching_subject 필드를 갖게 됩니다. </p><br><blockquote><p>CommonInfo 모델은 abstract base 클래스 이기 때문에, </p><p>CommonInfo 모델은 일반 Django 모델로 사용될수 없습니다. </p><br><p>CommonInfo 모델은 데이터베이스 테이블을 생성하지도 않고, manager 도 갖지 않습니다 (object  메서드를 가지지 않습니다). 그리고, 직접적인 인스턴스 생성과 저장도 되지 않습니다. </p></blockquote><br><p>abstract base class 에서 상속받은 필드들은 다른 필드 혹은 값으로 override 될수 있습니다. </p><p><br>혹은, None 으로 제거 될수 있습니다. </p><br><p><code>abstract base</code> 클래스 상속 방식은, 공통된 정보를 파이썬 레벨에 두고, </p><p>각각의 자식 모델마다 한개의 데이터베이스 테이블을 데이터베이스에 생성합니다. </p><br><p>실제로 위의 예시에서 CommonInfo 클래스로 Shell 에 들어가서, 몇가지 명령어를 실행해보면, 에러가 납니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">In [1]: common = CommonInfo.objects.create(name="django", age=22)                                                                                                         </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-1-8d6637697465&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 common = CommonInfo.objects.create(name=<span class="string">"django"</span>, age=22)</span></span><br><span class="line"></span><br><span class="line">NameError: name 'CommonInfo' is not defined</span><br><span class="line"></span><br><span class="line">In [2]: CommonInfo.objects.all()                                                                                                                                          </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-2-fc35ec638311&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 CommonInfo.objects.all()</span></span><br><span class="line"></span><br><span class="line">NameError: name 'CommonInfo' is not defined</span><br><span class="line"></span><br><span class="line">In [3]: c = CommonInfo()                                                                                                                                                  </span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">NameError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input-3-2542378fc97f&gt; in &lt;module&gt;</span><br><span class="line"><span class="meta">----&gt;</span><span class="bash"> 1 c = CommonInfo()</span></span><br><span class="line"></span><br><span class="line">NameError: name 'CommonInfo' is not defined</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/08/14/Django-Models-17%ED%8E%B8-Model-%EC%83%81%EC%86%8D-Abstract-Base-Class-1/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
