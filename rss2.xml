<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Thu, 12 Nov 2020 12:22:20 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Python 기초 22편 - built in 내장함수 3편</title>
      <link>http://djangojeng-e.github.io/2020/11/12/Python-%EA%B8%B0%EC%B4%88-22%ED%8E%B8-built-in-%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98-3%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/11/12/Python-%EA%B8%B0%EC%B4%88-22%ED%8E%B8-built-in-%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98-3%ED%8E%B8/</guid>
      <pubDate>Thu, 12 Nov 2020 11:40:35 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-Builins-3&quot;&gt;&lt;a href=&quot;#Python-Builins-3&quot; class=&quot;headerlink&quot; title=&quot;Python Builins - 3&quot;&gt;&lt;/a&gt;Python Builins - 3&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬 인터프리터는 언제나 사용가능한 몇가지 함수들과 타입들이 내장되어 있습니다. &lt;/p&gt;
&lt;br&gt;



&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;함수명&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;내용&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;min()&lt;/td&gt;
&lt;td&gt;min() 함수는, 순회가능한 객체의 요소들중에서 가장 작은 값을 찾는데 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;next()&lt;/td&gt;
&lt;td&gt;next() 함수는, iterator 안에서 다음 요소를 얻을때 사용합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;object()&lt;/td&gt;
&lt;td&gt;object() 함수는 비어있는 객체를 생성하기 위해 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oct()&lt;/td&gt;
&lt;td&gt;oct() 함수는 정수를 octal string 으로 전환하기 위해 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ord()&lt;/td&gt;
&lt;td&gt;ord()  함수는 해당 문자에 해당하는 유니코드를 정수로 얻을때 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pow()&lt;/td&gt;
&lt;td&gt;pow() 함수는, x의값에 y 제곱을 해줍니다. pow(x, y), y 는 제곱의 숫자 입니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;print()&lt;/td&gt;
&lt;td&gt;print() 함수는, 객체를 text stream file 로 출력하기 위해 사용합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;property()&lt;/td&gt;
&lt;td&gt;property() 함수는 property 속성을 반환합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;range()&lt;/td&gt;
&lt;td&gt;range() 함수는 숫자들의 시퀀스를 얻기 위해 사용합니다. 기본값으로 0 부터 시작하고 1씩 증가합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;repr()&lt;/td&gt;
&lt;td&gt;repr() 함수는 객체의 출력 가능 형태를 포함하고 있는 문자열을 반환합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reversed()&lt;/td&gt;
&lt;td&gt;reversed() 함수는 reverse 이터레이터를 얻기위해 사용됩니다. 거꾸로된 이터레이터 객체를 반환합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;round()&lt;/td&gt;
&lt;td&gt;round() 함수는 반올림한 부동소수점을 반환합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set()&lt;/td&gt;
&lt;td&gt;set() 함수는 집합 객체를 생성하기 위해 사용합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setattr()&lt;/td&gt;
&lt;td&gt;setattr() 함수는 특정 객체의 특정 속성값을 지정하기 위해 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;slice()&lt;/td&gt;
&lt;td&gt;slice() 함수는 지정된 인덱스값을 표현하는 슬라이스 객체를 반환합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sorted()&lt;/td&gt;
&lt;td&gt;sorted() 함수는 순회가능한 객체의 요소들을 정렬하여 새로운 정렬된 리스트로 반환합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sum()&lt;/td&gt;
&lt;td&gt;sum() 함수는 순회가능 객체의 모든 요소들의 합계를 구하는데 사용합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple()&lt;/td&gt;
&lt;td&gt;tuple() 함수는 tuple 을 생성하기 위해 사용합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;type()&lt;/td&gt;
&lt;td&gt;type() 함수는 객체의 타입을 얻기 위해 사용합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;vars()&lt;/td&gt;
&lt;td&gt;vars() 함수는 주어진 객체의 &lt;strong&gt;dict&lt;/strong&gt; 속성을 얻기 위해 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;zip()&lt;/td&gt;
&lt;td&gt;zip() 함수는 순회가능 객체들을 합쳐줍니다&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Builins-3"><a href="#Python-Builins-3" class="headerlink" title="Python Builins - 3"></a>Python Builins - 3</h2><br><p>파이썬 인터프리터는 언제나 사용가능한 몇가지 함수들과 타입들이 내장되어 있습니다. </p><br><table><thead><tr><th><strong>함수명</strong></th><th><strong>내용</strong></th></tr></thead><tbody><tr><td>min()</td><td>min() 함수는, 순회가능한 객체의 요소들중에서 가장 작은 값을 찾는데 사용됩니다</td></tr><tr><td>next()</td><td>next() 함수는, iterator 안에서 다음 요소를 얻을때 사용합니다</td></tr><tr><td>object()</td><td>object() 함수는 비어있는 객체를 생성하기 위해 사용됩니다</td></tr><tr><td>oct()</td><td>oct() 함수는 정수를 octal string 으로 전환하기 위해 사용됩니다</td></tr><tr><td>ord()</td><td>ord()  함수는 해당 문자에 해당하는 유니코드를 정수로 얻을때 사용됩니다</td></tr><tr><td>pow()</td><td>pow() 함수는, x의값에 y 제곱을 해줍니다. pow(x, y), y 는 제곱의 숫자 입니다</td></tr><tr><td>print()</td><td>print() 함수는, 객체를 text stream file 로 출력하기 위해 사용합니다</td></tr><tr><td>property()</td><td>property() 함수는 property 속성을 반환합니다</td></tr><tr><td>range()</td><td>range() 함수는 숫자들의 시퀀스를 얻기 위해 사용합니다. 기본값으로 0 부터 시작하고 1씩 증가합니다</td></tr><tr><td>repr()</td><td>repr() 함수는 객체의 출력 가능 형태를 포함하고 있는 문자열을 반환합니다</td></tr><tr><td>reversed()</td><td>reversed() 함수는 reverse 이터레이터를 얻기위해 사용됩니다. 거꾸로된 이터레이터 객체를 반환합니다</td></tr><tr><td>round()</td><td>round() 함수는 반올림한 부동소수점을 반환합니다</td></tr><tr><td>set()</td><td>set() 함수는 집합 객체를 생성하기 위해 사용합니다</td></tr><tr><td>setattr()</td><td>setattr() 함수는 특정 객체의 특정 속성값을 지정하기 위해 사용됩니다</td></tr><tr><td>slice()</td><td>slice() 함수는 지정된 인덱스값을 표현하는 슬라이스 객체를 반환합니다</td></tr><tr><td>sorted()</td><td>sorted() 함수는 순회가능한 객체의 요소들을 정렬하여 새로운 정렬된 리스트로 반환합니다</td></tr><tr><td>sum()</td><td>sum() 함수는 순회가능 객체의 모든 요소들의 합계를 구하는데 사용합니다</td></tr><tr><td>tuple()</td><td>tuple() 함수는 tuple 을 생성하기 위해 사용합니다.</td></tr><tr><td>type()</td><td>type() 함수는 객체의 타입을 얻기 위해 사용합니다</td></tr><tr><td>vars()</td><td>vars() 함수는 주어진 객체의 <strong>dict</strong> 속성을 얻기 위해 사용됩니다</td></tr><tr><td>zip()</td><td>zip() 함수는 순회가능 객체들을 합쳐줍니다</td></tr></tbody></table><br><br><a id="more"></a><br><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># min() </span></span><br><span class="line"><span class="comment"># 순회 가능 객체의 값들중, 가장 작은 값을 찾습니다 </span></span><br><span class="line"></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">x = min(mylist)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># next()</span></span><br><span class="line"><span class="comment"># iterator 안에서, 다음 요소를 얻을때 사용 </span></span><br><span class="line"></span><br><span class="line">mylist = iter([<span class="string">'Django'</span>, <span class="string">'python'</span>, <span class="string">'flask'</span>, <span class="string">'javascript'</span>])</span><br><span class="line"></span><br><span class="line">x = next(mylist)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = next(mylist)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = next(mylist)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># object()</span></span><br><span class="line"><span class="comment"># 비어있는 객체를 생성 </span></span><br><span class="line"></span><br><span class="line">x = object()</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># oct()</span></span><br><span class="line"><span class="comment"># 정수를 octal string 으로 전환해 줍니다 </span></span><br><span class="line"></span><br><span class="line">number = <span class="number">5</span> </span><br><span class="line"></span><br><span class="line">x = oct(number)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># open()</span></span><br><span class="line"><span class="comment"># 파일을 열고, 파일 객체로 반환합니다 </span></span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'python_basic_builtin.ipynb'</span>, <span class="string">'r'</span>)</span><br><span class="line">print(f.read())</span><br><span class="line"></span><br><span class="line"><span class="comment"># ord()</span></span><br><span class="line"><span class="comment"># ord() 함수는 해당문자의 유니코드를 표시하는 정수를 얻을때 사용됩니다 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 'd' 라는 문자에 해당하는 유니코드를 정수로 반환 </span></span><br><span class="line"></span><br><span class="line">x = ord(<span class="string">'d'</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 'z' 라는 문자에 해당하는 유니코드를 정수로 반환 </span></span><br><span class="line"></span><br><span class="line">y = ord(<span class="string">'z'</span>)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pow()</span></span><br><span class="line"><span class="comment"># x의 값에 y의 제곱을 해줄때 사용합니다 </span></span><br><span class="line"></span><br><span class="line">x = pow(<span class="number">4</span>, <span class="number">3</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = pow(<span class="number">5</span>, <span class="number">3</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (3번빼 인자) 가 있을대는, modulus 를 구합니다</span></span><br><span class="line"></span><br><span class="line">x = pow(<span class="number">5</span>, <span class="number">3</span>, <span class="number">5</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = pow(<span class="number">5</span>, <span class="number">3</span>, <span class="number">4</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print()</span></span><br><span class="line"><span class="comment"># 객체를 출력 </span></span><br><span class="line"></span><br><span class="line">x = <span class="string">'djangojenge'</span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sep 을 사용하여, 객체간의 구분자를 둘수 있습니다 </span></span><br><span class="line">print(<span class="string">'hello'</span>, x, sep=<span class="string">"---&gt;"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># property()</span></span><br><span class="line"><span class="comment"># property 속성을 리턴 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self._name = name </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'getting name'</span>)</span><br><span class="line">        <span class="keyword">return</span> self._name </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">set_name</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        print(<span class="string">'setting name to '</span>, value)</span><br><span class="line">        self._name = value </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">del_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'Deleting Name'</span>)</span><br><span class="line">        <span class="keyword">del</span> self._name</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># get_name, set_name 을 사용하기 위한 프로퍼티를 지정합니다 </span></span><br><span class="line">    <span class="comment"># del_name method </span></span><br><span class="line">    </span><br><span class="line">    name = property(get_name, set_name, del_name, <span class="string">'Name property'</span>)</span><br><span class="line">    </span><br><span class="line">p = Person(<span class="string">'djangojenge'</span>)</span><br><span class="line">print(p.name)</span><br><span class="line"></span><br><span class="line">p.name = <span class="string">"Flaskjen-e"</span></span><br><span class="line">print(p.name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> p.name </span><br><span class="line"></span><br><span class="line">print(p.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># range()</span></span><br><span class="line"><span class="comment"># 숫자형 시퀀스를 생성할때 사용합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">9</span>):</span><br><span class="line">    print(i)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># repr()</span></span><br><span class="line"><span class="comment"># repr() 함수는, 객체의 출력 가능한 형태를 가진 문자열을 반환합니다 </span></span><br><span class="line"></span><br><span class="line">var = <span class="string">'foo'</span></span><br><span class="line"></span><br><span class="line">print(repr(var))</span><br><span class="line"></span><br><span class="line">b = <span class="number">8</span> </span><br><span class="line">print(repr(b))</span><br><span class="line"></span><br><span class="line"><span class="comment"># reversed()</span></span><br><span class="line"><span class="comment"># 거꾸로된 (reversed) 된 iterator 객체를 반환합니다 </span></span><br><span class="line"></span><br><span class="line">normal_list = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>]</span><br><span class="line">reversed_list = reversed(normal_list)</span><br><span class="line"></span><br><span class="line">print(normal_list)</span><br><span class="line">print(reversed_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> reversed_list:</span><br><span class="line">    print(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># round()</span></span><br><span class="line"><span class="comment"># 부동 소수점의 반올림 값을 반환 </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">1218.55</span> </span><br><span class="line">y = round(x, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># set()</span></span><br><span class="line"><span class="comment"># 집합 객체를 생성하기 위해 사용 </span></span><br><span class="line"></span><br><span class="line">my_list = [<span class="string">'python'</span>, <span class="string">'javascript'</span>, <span class="string">'golang'</span>]</span><br><span class="line">my_set = set(my_list) </span><br><span class="line">print(my_set)</span><br><span class="line"></span><br><span class="line"><span class="comment"># setattr()</span></span><br><span class="line"><span class="comment"># 객체의 특정 속성값을 지정히가 위해 사용됩니다 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">'Djangojeng-e'</span></span><br><span class="line">    age = <span class="number">36</span> </span><br><span class="line">    country = <span class="string">'Australia'</span></span><br><span class="line">    </span><br><span class="line">print(getattr(Person, <span class="string">'country'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># Person 객체의 'country' 속성을 South Korea 로 바꿈 </span></span><br><span class="line">setattr(Person, <span class="string">'country'</span>, <span class="string">'South Korea'</span>)</span><br><span class="line">print(getattr(Person, <span class="string">'country'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># slice() </span></span><br><span class="line"><span class="comment"># 인덱스 값에 따른 객체의 slice 객체를 반환합니다 </span></span><br><span class="line"></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">x = slice(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">print(my_list[x])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 튜플을 생성하고, slice 객체를 생성하는데 </span></span><br><span class="line"><span class="comment"># 시작은 0, 끝은 8, 3단계씩 건너뛰면서 slice 를 합니다 </span></span><br><span class="line"></span><br><span class="line">a = (<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>, <span class="string">'g'</span>, <span class="string">'h'</span>)</span><br><span class="line">x = slice(<span class="number">0</span>, <span class="number">8</span>, <span class="number">3</span>)</span><br><span class="line">print(a[x])</span><br><span class="line"></span><br><span class="line"><span class="comment"># sorted()</span></span><br><span class="line"><span class="comment"># 새로운 정렬된 리스트를 반환 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">x = sorted(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># str()</span></span><br><span class="line"><span class="comment"># 지정된 값을 문자열로 바꾸어주는데 사용됩니다 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">12345678</span></span><br><span class="line">print(type(a))</span><br><span class="line"></span><br><span class="line">a_string = str(a)</span><br><span class="line">print(type(a_string))</span><br><span class="line"></span><br><span class="line"><span class="comment"># sum()</span></span><br><span class="line"><span class="comment"># 순회가능 객체의 모든 요소들의 합계를 구하는데 사용 </span></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span> ,<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]</span><br><span class="line">print(sum(my_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># tuple()</span></span><br><span class="line"></span><br><span class="line">my_list = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>]</span><br><span class="line">my_tuple = tuple(my_list)</span><br><span class="line"></span><br><span class="line">print(my_list)</span><br><span class="line">print(my_tuple)</span><br><span class="line"></span><br><span class="line">print(type(my_list))</span><br><span class="line">print(type(my_tuple))</span><br><span class="line"></span><br><span class="line"><span class="comment"># type()</span></span><br><span class="line"><span class="comment"># 객체의 타입을 얻기위해 사용됩니다 </span></span><br><span class="line"></span><br><span class="line">a = <span class="string">"djangojeng-e"</span></span><br><span class="line">b = <span class="number">123456</span></span><br><span class="line">c = (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line">d = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line">print(type(b))</span><br><span class="line">print(type(c))</span><br><span class="line">print(type(d))</span><br><span class="line"></span><br><span class="line"><span class="comment"># vars()</span></span><br><span class="line"><span class="comment"># 객체의 __dict__ 속성을 반환합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">"Djangojeng-e"</span></span><br><span class="line">    age = <span class="number">36</span> </span><br><span class="line">    country = <span class="string">"Australia"</span></span><br><span class="line">    </span><br><span class="line">x = vars(Person)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># zip()</span></span><br><span class="line"><span class="comment"># 객체들을 합쳐줍니다 </span></span><br><span class="line"></span><br><span class="line">a = (<span class="string">'djangojeng-e'</span>, <span class="string">'Python'</span>, <span class="string">'Flask'</span>)</span><br><span class="line">b = (<span class="string">'JavaScript'</span>, <span class="string">'Golang'</span>)</span><br><span class="line"></span><br><span class="line">x = zip(a, b)</span><br><span class="line">x = list(x)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = tuple(x)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/12/Python-%EA%B8%B0%EC%B4%88-22%ED%8E%B8-built-in-%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98-3%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 21편 - built in 내장함수 2편</title>
      <link>http://djangojeng-e.github.io/2020/11/11/Python-%EA%B8%B0%EC%B4%88-21%ED%8E%B8-built-in-%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98-2%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/11/11/Python-%EA%B8%B0%EC%B4%88-21%ED%8E%B8-built-in-%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98-2%ED%8E%B8/</guid>
      <pubDate>Wed, 11 Nov 2020 11:20:12 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-Builtins-2&quot;&gt;&lt;a href=&quot;#Python-Builtins-2&quot; class=&quot;headerlink&quot; title=&quot;Python Builtins - 2&quot;&gt;&lt;/a&gt;Python Builtins - 2&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬 인터프리터는 언제나 사용가능한 몇가지 함수들과 타입들이 내장되어 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;함수명&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;내용&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;filter()&lt;/td&gt;
&lt;td&gt;filter() 함수는 함수가 True 를 반환하는 순회가능 객체의 요소들로부터, 순회가능 객체를 만듭니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float()&lt;/td&gt;
&lt;td&gt;float() 함수는 지정된 값을 부동 소수점 숫자로 전환해줍니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;format()&lt;/td&gt;
&lt;td&gt;foramt() 함수는 지정된 값을 특정 format 으로 지정할때 사용됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;frozenset()&lt;/td&gt;
&lt;td&gt;frozenset() 함수는 새로운 frozenset 객체를 반환합니다, 옵션으로 순회가능 객체로부터 요소들을 받아옵니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;getattr()&lt;/td&gt;
&lt;td&gt;getattr() 함수는 명명된 객체의 속성의 값을 반환합니다, 이름은 문자열이여만 합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;globals()&lt;/td&gt;
&lt;td&gt;globals() 함수는 현재 global symbol table 을 표현하는 딕셔너리를 반환합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hash()&lt;/td&gt;
&lt;td&gt;hash() 함수는 객체의 hash 값을 반환합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;help()&lt;/td&gt;
&lt;td&gt;help() 함수는 내장된 help(도움말) 시스템을 실행시키기 위해 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;id()&lt;/td&gt;
&lt;td&gt;id() 함수는 객체의 정체성을 얻기위해 사용합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;input()&lt;/td&gt;
&lt;td&gt;input() 함수는 사용자 입력값을 허용합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int()&lt;/td&gt;
&lt;td&gt;int() 함수는 지정된 값을 정수로 바꾸어 줍니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isinstance()&lt;/td&gt;
&lt;td&gt;isinstance() 함수는 객체 인자가 클래스정보 인자의 인스턴스일때 true 를 반환합니다.혹은, 서브클래스일 경우에 true 를 반환합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;issubclass()&lt;/td&gt;
&lt;td&gt;issubclass() 함수는 지정된 객체가, 특정객체의 서브클래스라면 True 를 반환합니다, 그렇지 않으면 False 를 반환합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;iter()&lt;/td&gt;
&lt;td&gt;iter() 함수는 하나의 iterator 객체를 반환합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;len()&lt;/td&gt;
&lt;td&gt;len() 함수는, 객체의 길이를 얻을때 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list()&lt;/td&gt;
&lt;td&gt;list() 함수는, 리스트 객체를 생성하기 위해 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;locals()&lt;/td&gt;
&lt;td&gt;locals() 함수는 local symbol table 을 사전형태로 얻기위해 사용됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;map()&lt;/td&gt;
&lt;td&gt;map() 함수는 지정된 함수를 순회가능한 객체의 각 요소에 실행시킵니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max()&lt;/td&gt;
&lt;td&gt;max() 함수는 순회가능 객체의 요소들중 가장 큰 값을 찾는데 사용됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;memoryview()&lt;/td&gt;
&lt;td&gt;memoryview() 함수는 특정객체로부터 메모리뷰 객체를 얻을때 사용됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Builtins-2"><a href="#Python-Builtins-2" class="headerlink" title="Python Builtins - 2"></a>Python Builtins - 2</h2><br><p>파이썬 인터프리터는 언제나 사용가능한 몇가지 함수들과 타입들이 내장되어 있습니다. </p><br><table><thead><tr><th><strong>함수명</strong></th><th><strong>내용</strong></th></tr></thead><tbody><tr><td>filter()</td><td>filter() 함수는 함수가 True 를 반환하는 순회가능 객체의 요소들로부터, 순회가능 객체를 만듭니다.</td></tr><tr><td>float()</td><td>float() 함수는 지정된 값을 부동 소수점 숫자로 전환해줍니다</td></tr><tr><td>format()</td><td>foramt() 함수는 지정된 값을 특정 format 으로 지정할때 사용됩니다.</td></tr><tr><td>frozenset()</td><td>frozenset() 함수는 새로운 frozenset 객체를 반환합니다, 옵션으로 순회가능 객체로부터 요소들을 받아옵니다</td></tr><tr><td>getattr()</td><td>getattr() 함수는 명명된 객체의 속성의 값을 반환합니다, 이름은 문자열이여만 합니다.</td></tr><tr><td>globals()</td><td>globals() 함수는 현재 global symbol table 을 표현하는 딕셔너리를 반환합니다.</td></tr><tr><td>hash()</td><td>hash() 함수는 객체의 hash 값을 반환합니다</td></tr><tr><td>help()</td><td>help() 함수는 내장된 help(도움말) 시스템을 실행시키기 위해 사용됩니다</td></tr><tr><td>id()</td><td>id() 함수는 객체의 정체성을 얻기위해 사용합니다</td></tr><tr><td>input()</td><td>input() 함수는 사용자 입력값을 허용합니다.</td></tr><tr><td>int()</td><td>int() 함수는 지정된 값을 정수로 바꾸어 줍니다</td></tr><tr><td>isinstance()</td><td>isinstance() 함수는 객체 인자가 클래스정보 인자의 인스턴스일때 true 를 반환합니다.혹은, 서브클래스일 경우에 true 를 반환합니다</td></tr><tr><td>issubclass()</td><td>issubclass() 함수는 지정된 객체가, 특정객체의 서브클래스라면 True 를 반환합니다, 그렇지 않으면 False 를 반환합니다.</td></tr><tr><td>iter()</td><td>iter() 함수는 하나의 iterator 객체를 반환합니다</td></tr><tr><td>len()</td><td>len() 함수는, 객체의 길이를 얻을때 사용됩니다</td></tr><tr><td>list()</td><td>list() 함수는, 리스트 객체를 생성하기 위해 사용됩니다</td></tr><tr><td>locals()</td><td>locals() 함수는 local symbol table 을 사전형태로 얻기위해 사용됩니다.</td></tr><tr><td>map()</td><td>map() 함수는 지정된 함수를 순회가능한 객체의 각 요소에 실행시킵니다.</td></tr><tr><td>max()</td><td>max() 함수는 순회가능 객체의 요소들중 가장 큰 값을 찾는데 사용됩니다.</td></tr><tr><td>memoryview()</td><td>memoryview() 함수는 특정객체로부터 메모리뷰 객체를 얻을때 사용됩니다.</td></tr></tbody></table><br><a id="more"></a><h2 id="연습"><a href="#연습" class="headerlink" title="연습"></a>연습</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filter() </span></span><br><span class="line"><span class="comment"># true  를 반환하는 함수의 순회가능한 객체의 요소들로부터 </span></span><br><span class="line"><span class="comment"># 순회가능 객체를 만들어 냅니다.</span></span><br><span class="line"></span><br><span class="line">ages = [<span class="number">5</span>, <span class="number">12</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">24</span>, <span class="number">32</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">myFunction</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> x &lt; <span class="number">18</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span> </span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span> </span><br><span class="line">    </span><br><span class="line">adults = filter(myFunction, ages)</span><br><span class="line"></span><br><span class="line">print(adults)</span><br><span class="line"></span><br><span class="line">adult_list = list(adults)</span><br><span class="line">print(adult_list)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> adults:</span><br><span class="line">    print(x)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># float()</span></span><br><span class="line"><span class="comment"># 값을, 부동 소수점 숫자로 전환할때 사용합니다 </span></span><br><span class="line"></span><br><span class="line">number = <span class="number">1</span> </span><br><span class="line">print(float(number))</span><br><span class="line"></span><br><span class="line"><span class="comment"># format()</span></span><br><span class="line"><span class="comment"># 특정 포맷으로 정해줄때 사용합니다 </span></span><br><span class="line"></span><br><span class="line">txt = <span class="string">"For only &#123;price:.2f&#125; dollars!"</span></span><br><span class="line">print(txt.format(price=<span class="number">49</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># frozenset() </span></span><br><span class="line"><span class="comment"># frozenset 은 immutable 한 버전의 파이썬 집합 객체 입니다 </span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="string">'apple'</span>, <span class="string">'banana'</span>, <span class="string">'cherry'</span>]</span><br><span class="line">x = frozenset(mylist)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># getattr()</span></span><br><span class="line"><span class="comment"># getattr() 함수는 명명된 객체의 속성의 값을 반환합니다, 이름은 문자열이여만 합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">'Djangojeng-e'</span></span><br><span class="line">    age = <span class="number">36</span> </span><br><span class="line">    country = <span class="string">'Australia'</span></span><br><span class="line">    </span><br><span class="line">x = getattr(Person, <span class="string">'age'</span>)</span><br><span class="line">y = getattr(Person, <span class="string">'country'</span>)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># globals()</span></span><br><span class="line"><span class="comment"># global symbol table 을 사전 형태로 반환합니다 </span></span><br><span class="line"></span><br><span class="line">x = globals()</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hash()</span></span><br><span class="line"><span class="comment"># 객체의 hash 값을 반환합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 정수를 위한 hash 값은, 정수 입니다 </span></span><br><span class="line">print(<span class="string">'255 를 위한 hash 값은 '</span>, hash(<span class="number">255</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 소수점을 위한 hash 값 </span></span><br><span class="line">print(<span class="string">'252.25 를 위한 hash 값은, '</span>, hash(<span class="number">252.25</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열을 위한 hash </span></span><br><span class="line">print(<span class="string">'파이썬을 위한 hash 값은 '</span>, hash(<span class="string">'Python'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># help()</span></span><br><span class="line"><span class="comment"># 시스템에 있는 도움말을 출력합니다 </span></span><br><span class="line"></span><br><span class="line">help(list)</span><br><span class="line">help(tuple)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hex()</span></span><br><span class="line"><span class="comment"># hex() 함수는 정수를 소문자형 16진수 문자열로 바꿔줍니다 </span></span><br><span class="line"></span><br><span class="line">number = <span class="number">255</span></span><br><span class="line">x = hex(number)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># id()</span></span><br><span class="line"><span class="comment"># id() 함수는, 객체의 identity 를 가질때 사용합니다 </span></span><br><span class="line"></span><br><span class="line">x = (<span class="string">'python'</span>, <span class="string">'django'</span>, <span class="string">'pyramid'</span>)</span><br><span class="line">y = id(x)</span><br><span class="line"></span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">z = [<span class="string">'django'</span>, <span class="string">'flask'</span>]</span><br><span class="line">a = id(z)</span><br><span class="line"></span><br><span class="line">print(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># input()</span></span><br><span class="line"><span class="comment"># 사용자에게 입력값을 받습니다 (문자열로 받습니다) </span></span><br><span class="line"></span><br><span class="line">x = input(<span class="string">'Python 을 입력해 주세요'</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># int()</span></span><br><span class="line"><span class="comment"># 지정된 값을 정수로 바꾸어 줍니다 </span></span><br><span class="line"></span><br><span class="line">x = <span class="string">"345"</span></span><br><span class="line">y = int(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># isinstance()</span></span><br><span class="line"><span class="comment"># 지정된 객체가 지정된 타입일때에 true 를 반환합니다 </span></span><br><span class="line"><span class="comment"># 그렇지 않으면, False 를 반환합니다 </span></span><br><span class="line"></span><br><span class="line">x = isinstance(<span class="number">5</span>, int)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">y = isinstance(<span class="number">5.0</span>, float)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># issubclass()</span></span><br><span class="line"><span class="comment"># 지정된 객체가 특정 객체의 subclass 인지 확인합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Age</span>:</span></span><br><span class="line">    age = <span class="number">36</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Profile</span><span class="params">(Age)</span>:</span></span><br><span class="line">    name = <span class="string">'djangojeng-e'</span></span><br><span class="line">    age = Age </span><br><span class="line"></span><br><span class="line">x = issubclass(Profile, Age)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># iter()</span></span><br><span class="line"><span class="comment"># iterator 객체를 반환합니다 </span></span><br><span class="line"></span><br><span class="line">tuple_a = (<span class="string">'Djangojeng-e'</span>, <span class="string">'Python'</span>, <span class="string">'Django'</span>)</span><br><span class="line">it = iter(tuple_a)</span><br><span class="line"></span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line"></span><br><span class="line">string_a = <span class="string">'Python'</span></span><br><span class="line">it = iter(string_a)</span><br><span class="line"></span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line">print(next(it))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># len() </span></span><br><span class="line"><span class="comment"># 객체의 길이를 구할때 사용합니다 </span></span><br><span class="line"></span><br><span class="line">string = <span class="string">'Python'</span></span><br><span class="line">print(len(string))</span><br><span class="line"></span><br><span class="line">list_one = [<span class="string">'Python'</span>, <span class="string">'Django'</span>, <span class="string">'Flask'</span>]</span><br><span class="line">print(len(list_one))</span><br><span class="line"></span><br><span class="line"><span class="comment"># list()</span></span><br><span class="line"><span class="comment"># 리스트 객체를 생성할때 사용합니다 </span></span><br><span class="line"></span><br><span class="line">tup = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line">print(list(tup))</span><br><span class="line"></span><br><span class="line"><span class="comment"># locals() </span></span><br><span class="line"><span class="comment"># local symbol 테이블을 사전형태로 반환합니다 </span></span><br><span class="line"><span class="comment"># symbol 테이블은 현재 프로그램에 대한 필요한 정보를 가지고 있습니다 </span></span><br><span class="line"></span><br><span class="line">x = locals()</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># map() </span></span><br><span class="line"><span class="comment"># 순회가능 객체의 각 요소들에게 특정 함수를 실행 시킵니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">length</span><span class="params">(n)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> len(n)</span><br><span class="line"></span><br><span class="line">x = map(length, [<span class="string">'django'</span>, <span class="string">'python'</span>, <span class="string">'flask'</span>])</span><br><span class="line">print(x)</span><br><span class="line">print(list(x))</span><br><span class="line"></span><br><span class="line"><span class="comment"># max() </span></span><br><span class="line"><span class="comment"># 순회가능 객체의 요소들중 가장 큰 값을 찾아냅니다 </span></span><br><span class="line"></span><br><span class="line">mylist = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">x = max(mylist)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># memoryview()</span></span><br><span class="line"><span class="comment"># 특정 객체의 memory view 객체를 얻을때 사용합니다 </span></span><br><span class="line"></span><br><span class="line">x = memoryview(<span class="string">b'hello'</span>) <span class="comment"># byte 객체여야 합니다 </span></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 첫번재 문자의 유니코드를 반환합니다 </span></span><br><span class="line">print(x[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 두번째 문자의 유니코드를 반환합니다 </span></span><br><span class="line">print(x[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/11/Python-%EA%B8%B0%EC%B4%88-21%ED%8E%B8-built-in-%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98-2%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 20편 - built in 내장함수 1편</title>
      <link>http://djangojeng-e.github.io/2020/11/10/Python-%EA%B8%B0%EC%B4%88-20%ED%8E%B8-built-in-%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98-1%ED%8E%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/11/10/Python-%EA%B8%B0%EC%B4%88-20%ED%8E%B8-built-in-%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98-1%ED%8E%B8/</guid>
      <pubDate>Mon, 09 Nov 2020 23:27:45 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-Builtins-1&quot;&gt;&lt;a href=&quot;#Python-Builtins-1&quot; class=&quot;headerlink&quot; title=&quot;Python Builtins - 1&quot;&gt;&lt;/a&gt;Python Builtins - 1&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬 인터프리터는 언제나 사용 가능한 몇가지 함수들과 타입들이 내장되어 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;함수명&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;내용&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;abs()&lt;/td&gt;
&lt;td&gt;abs() 함수는 주어진 숫자의 절대값을 가지기 위해 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;all()&lt;/td&gt;
&lt;td&gt;all() 함수는 모든 순회가능한 객체의 모든 요소들이 True 인지 False 인지 테스트 합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;any()&lt;/td&gt;
&lt;td&gt;any() 함수는, 순회가능한 객체의 어떤 요소라도 True 인지 확인합니다. 순회가능 객체가 비어 있을 경우, False 를 리턴합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ascii()&lt;/td&gt;
&lt;td&gt;ascii() 함수는 객체의 출력가능한 형식을 포함하고 있는 문자열을 반환 합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bin()&lt;/td&gt;
&lt;td&gt;bin() 함수는 정수를 이진수 문자열로 전환해줍니다. 결과값은 유효한 파이썬 수식입니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bool()&lt;/td&gt;
&lt;td&gt;bool() 함수는 하나의 값을 Boolean 으로 전환해줍니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bytearray()&lt;/td&gt;
&lt;td&gt;bytearray() 함수는, bytearray 객체를 얻을때 사용합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bytes()&lt;/td&gt;
&lt;td&gt;bytes() 함수는, 새로운 ‘bytes’ 객체를 가질때 사용합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;callable()&lt;/td&gt;
&lt;td&gt;callable() 함수는, 객체 인자가 호출 가능한지를 확인합니다. 객체 인자가 호출 가능하면, True, 호출가능하지 않으면, False 를 리턴합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chr()&lt;/td&gt;
&lt;td&gt;chr() 함수는 유니코드 코드포인트가 정수인 문자를 문자열로 표시해서 반환합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;classmethod()&lt;/td&gt;
&lt;td&gt;classmethod() 함수는 하나의 메서드를 클래스 메서드로 전환해 줍니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;compile()&lt;/td&gt;
&lt;td&gt;compile() 함수는 소스를 코드로 컴파일 할때 사용됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;complex()&lt;/td&gt;
&lt;td&gt;complex() 함수는 복소수를 생성하거나, 문자열 혹은 숫자를 복소수로 전환하기 위해 사용됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;delattr()&lt;/td&gt;
&lt;td&gt;delattr() 함수는 지정된 객체로부터 특정 속성을 지우는데 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict()&lt;/td&gt;
&lt;td&gt;dict() 함수는 새로운 사전을 생성할때 사용됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dir()&lt;/td&gt;
&lt;td&gt;dir() 함수는 지정된 객체의 모든 속성들과 메서드들을 반환합니다. 값이 없더라도, 내장된 함수나 클래스들도 dir()을 사용하면 해당 객체들의 모든 속성과 메서드들을 알아볼수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;divmod()&lt;/td&gt;
&lt;td&gt;divmod() 함수는 복소수가 아닌 두개의 숫자를 인자로 받고,  나누기를 실행할때, 몫과 나머지로 구성된 한쌍의 숫자를 반환합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;enumerate()&lt;/td&gt;
&lt;td&gt;enumerate() 함수는 하나의 enumerate 객체를 반환합니다. 순회가능 객체는 반드시 순서가 있는 시퀀스형이여야만 하며, 이터레이터 혹은 이터레이션을 지원하는 어떠한 객체여야만 합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;eval()&lt;/td&gt;
&lt;td&gt;eval() 함수는, 지정된 수식을 평가하기 위해 사용됩니다. 만약 수식이 맞는 형식의 파이썬 문이면, 실행이 됩니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;exec()&lt;/td&gt;
&lt;td&gt;exec() 함수는 지정된 파이썬 코드를 실행 시키기 위해 사용됩니다. 객체는 문자열 혹은 코드 객체로 되어야만 합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Builtins-1"><a href="#Python-Builtins-1" class="headerlink" title="Python Builtins - 1"></a>Python Builtins - 1</h2><br><p>파이썬 인터프리터는 언제나 사용 가능한 몇가지 함수들과 타입들이 내장되어 있습니다. </p><br><table><thead><tr><th><strong>함수명</strong></th><th><strong>내용</strong></th></tr></thead><tbody><tr><td>abs()</td><td>abs() 함수는 주어진 숫자의 절대값을 가지기 위해 사용됩니다</td></tr><tr><td>all()</td><td>all() 함수는 모든 순회가능한 객체의 모든 요소들이 True 인지 False 인지 테스트 합니다</td></tr><tr><td>any()</td><td>any() 함수는, 순회가능한 객체의 어떤 요소라도 True 인지 확인합니다. 순회가능 객체가 비어 있을 경우, False 를 리턴합니다</td></tr><tr><td>ascii()</td><td>ascii() 함수는 객체의 출력가능한 형식을 포함하고 있는 문자열을 반환 합니다</td></tr><tr><td>bin()</td><td>bin() 함수는 정수를 이진수 문자열로 전환해줍니다. 결과값은 유효한 파이썬 수식입니다.</td></tr><tr><td>bool()</td><td>bool() 함수는 하나의 값을 Boolean 으로 전환해줍니다</td></tr><tr><td>bytearray()</td><td>bytearray() 함수는, bytearray 객체를 얻을때 사용합니다</td></tr><tr><td>bytes()</td><td>bytes() 함수는, 새로운 ‘bytes’ 객체를 가질때 사용합니다</td></tr><tr><td>callable()</td><td>callable() 함수는, 객체 인자가 호출 가능한지를 확인합니다. 객체 인자가 호출 가능하면, True, 호출가능하지 않으면, False 를 리턴합니다.</td></tr><tr><td>chr()</td><td>chr() 함수는 유니코드 코드포인트가 정수인 문자를 문자열로 표시해서 반환합니다</td></tr><tr><td>classmethod()</td><td>classmethod() 함수는 하나의 메서드를 클래스 메서드로 전환해 줍니다.</td></tr><tr><td>compile()</td><td>compile() 함수는 소스를 코드로 컴파일 할때 사용됩니다.</td></tr><tr><td>complex()</td><td>complex() 함수는 복소수를 생성하거나, 문자열 혹은 숫자를 복소수로 전환하기 위해 사용됩니다.</td></tr><tr><td>delattr()</td><td>delattr() 함수는 지정된 객체로부터 특정 속성을 지우는데 사용됩니다</td></tr><tr><td>dict()</td><td>dict() 함수는 새로운 사전을 생성할때 사용됩니다</td></tr><tr><td>dir()</td><td>dir() 함수는 지정된 객체의 모든 속성들과 메서드들을 반환합니다. 값이 없더라도, 내장된 함수나 클래스들도 dir()을 사용하면 해당 객체들의 모든 속성과 메서드들을 알아볼수 있습니다.</td></tr><tr><td>divmod()</td><td>divmod() 함수는 복소수가 아닌 두개의 숫자를 인자로 받고,  나누기를 실행할때, 몫과 나머지로 구성된 한쌍의 숫자를 반환합니다</td></tr><tr><td>enumerate()</td><td>enumerate() 함수는 하나의 enumerate 객체를 반환합니다. 순회가능 객체는 반드시 순서가 있는 시퀀스형이여야만 하며, 이터레이터 혹은 이터레이션을 지원하는 어떠한 객체여야만 합니다</td></tr><tr><td>eval()</td><td>eval() 함수는, 지정된 수식을 평가하기 위해 사용됩니다. 만약 수식이 맞는 형식의 파이썬 문이면, 실행이 됩니다</td></tr><tr><td>exec()</td><td>exec() 함수는 지정된 파이썬 코드를 실행 시키기 위해 사용됩니다. 객체는 문자열 혹은 코드 객체로 되어야만 합니다</td></tr></tbody></table><br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># abs() </span></span><br><span class="line"><span class="comment"># 주어진 숫자의 절대값 (양수) 를 구함 </span></span><br><span class="line"></span><br><span class="line">number = <span class="number">-55</span> </span><br><span class="line">print(abs(number))</span><br><span class="line"></span><br><span class="line"><span class="comment"># all() </span></span><br><span class="line"><span class="comment"># 주어진 순회가능 객체의 모든 요소들이 True 인지 테스트 합니다 </span></span><br><span class="line"></span><br><span class="line">test_list = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br><span class="line">print(all(test_list))</span><br><span class="line"></span><br><span class="line">test_list2 = [<span class="number">-1</span>, <span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-4</span>]</span><br><span class="line">print(all(test_list2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># any() </span></span><br><span class="line"><span class="comment"># 주어진 순회가능 객체의 어떤 요소라도 True 인지 확인 합니다 </span></span><br><span class="line"><span class="comment"># 순회가능 객체가 비어있을 경우, False 를 반환합니다 </span></span><br><span class="line"></span><br><span class="line">test_list = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1 이 True 가 되므로, True 를 리턴 </span></span><br><span class="line">print(any(test_list))</span><br><span class="line"></span><br><span class="line">test_list = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># 비어 있는 리스트를 테스트하므로, False 를 리턴 </span></span><br><span class="line">print(any(test_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ascii()</span></span><br><span class="line"><span class="comment"># 객체를 출력 가능한 형태의 문자열로 리턴 </span></span><br><span class="line"></span><br><span class="line">text = <span class="string">"text printable format"</span></span><br><span class="line">print(ascii(text))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ascii 문자가 아닌것을, ascii 형태로 리턴합니다 </span></span><br><span class="line"></span><br><span class="line">print(ascii(<span class="string">"$"</span>))</span><br><span class="line">print(ascii(<span class="string">"[]"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># bin()</span></span><br><span class="line"><span class="comment"># 정수를 이진수 문자열로 전환해 줍니다 </span></span><br><span class="line"></span><br><span class="line">number = <span class="number">5</span> </span><br><span class="line">print(bin(number))</span><br><span class="line"></span><br><span class="line"><span class="comment"># bool() </span></span><br><span class="line"><span class="comment"># 하나의 값을 Boolean 값으로 전환해 줍니다 </span></span><br><span class="line"></span><br><span class="line">a = <span class="number">1218</span> </span><br><span class="line">b = <span class="string">'Django'</span></span><br><span class="line">c = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">d = (<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>)</span><br><span class="line">e = &#123;<span class="string">'django'</span>, <span class="string">'framework'</span>&#125;</span><br><span class="line">f = []</span><br><span class="line"></span><br><span class="line">print(bool(a))</span><br><span class="line">print(bool(b))</span><br><span class="line">print(bool(c))</span><br><span class="line">print(bool(d))</span><br><span class="line">print(bool(e))</span><br><span class="line">print(bool(f))</span><br><span class="line"></span><br><span class="line"><span class="comment"># callable()</span></span><br><span class="line"><span class="comment"># 호출 가능한 객체인지 아닌지 확인 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callable_function</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">3</span> </span><br><span class="line">    y = <span class="number">5</span> </span><br><span class="line">    z = x + y </span><br><span class="line">    <span class="keyword">return</span> z </span><br><span class="line"></span><br><span class="line">x = <span class="number">3</span> </span><br><span class="line">y = <span class="number">5</span> </span><br><span class="line">z = x + y </span><br><span class="line"></span><br><span class="line">call = callable_function </span><br><span class="line"></span><br><span class="line">print(callable(call))</span><br><span class="line">print(callable(z))</span><br><span class="line"></span><br><span class="line"><span class="comment"># chr() </span></span><br><span class="line"><span class="comment"># 정수로 된 유니코드 코드포인트 문자를, 일반 문자열 형태로 반환해 줍니다 </span></span><br><span class="line"></span><br><span class="line">str = <span class="string">""</span></span><br><span class="line">series = [<span class="number">84</span>, <span class="number">85</span>, <span class="number">84</span>, <span class="number">79</span>, <span class="number">82</span>, <span class="number">73</span>, <span class="number">65</span>, <span class="number">76</span>, <span class="number">83</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, len(series)):</span><br><span class="line">    char = chr(serires[i])</span><br><span class="line">    str = str + char </span><br><span class="line">    i = i + <span class="number">1</span></span><br><span class="line">print(str)</span><br><span class="line"></span><br><span class="line"><span class="comment"># classmethod()</span></span><br><span class="line"><span class="comment"># 하나의 메서드를 클래스 메서드로 전환 시켜 줍니다 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    age = <span class="number">25</span> </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printAge</span><span class="params">(cls)</span>:</span></span><br><span class="line">        print(<span class="string">"The age is"</span>, cls.age)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># printAge 클래스 메서드 생성하기 </span></span><br><span class="line">Person.printAge = classmethod(Person.printAge)</span><br><span class="line"></span><br><span class="line">Person.PrintAge()</span><br><span class="line"></span><br><span class="line"><span class="comment"># compile()</span></span><br><span class="line"><span class="comment"># 소스를 코드로 만들어 줍니다 </span></span><br><span class="line"></span><br><span class="line">x = compile(<span class="string">'print(55)'</span>, <span class="string">'print("test")'</span>)</span><br><span class="line">exec(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># complex()</span></span><br><span class="line"><span class="comment"># 복소수를 생성 혹은 숫자를 복소수로 전환해 줄때 사용합니다 </span></span><br><span class="line">a = <span class="number">15</span> </span><br><span class="line"></span><br><span class="line">print(complex(a))</span><br><span class="line"></span><br><span class="line"><span class="comment"># delattr()</span></span><br><span class="line"><span class="comment"># 특정 객체에서, 특정 속성을 삭제하는데 사용합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    name = <span class="string">"Djangojeng-e"</span></span><br><span class="line">    age = <span class="number">36</span> </span><br><span class="line">    country = <span class="string">"Australia"</span></span><br><span class="line">    </span><br><span class="line">print(dir(Person))</span><br><span class="line"></span><br><span class="line">delattr(Person, <span class="string">'age'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># delattr 이후로 age 속성이 Person 객에처서 없어진것을 확인할수 있습니다 .</span></span><br><span class="line">print(dir(Person))</span><br><span class="line"></span><br><span class="line"><span class="comment"># dict() </span></span><br><span class="line"><span class="comment"># 새로운 사진을 생성하기 위해 사용됩니다 </span></span><br><span class="line"></span><br><span class="line">dictionary = &#123;</span><br><span class="line">    <span class="string">'django'</span>: <span class="string">'framework'</span>,</span><br><span class="line">    <span class="string">'language'</span>: <span class="string">'python'</span>,</span><br><span class="line">    <span class="string">'difficulty'</span>: <span class="string">'difficult'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dict_copy = dict(dictionary)</span><br><span class="line">print(dict_copy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dir()</span></span><br><span class="line"><span class="comment"># 객체의 모든 속성과 메서드들을 알수 있습니다 </span></span><br><span class="line"></span><br><span class="line">print(dir(<span class="keyword">print</span>)) <span class="comment"># print 에 있는 모든 메서드와 속성들 </span></span><br><span class="line">print(dir(list))<span class="comment"># list 에 있는 모든 메서드와 속성들 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># divmod() </span></span><br><span class="line"><span class="comment"># 복소수가 아닌 두개의 숫자를 인자로 받고, </span></span><br><span class="line"><span class="comment"># 정수 나누기를 하여, 몫과 나머지로 이루어진 한쌍의 숫자를 반환합니다 </span></span><br><span class="line"></span><br><span class="line">print(divmod(<span class="number">5</span>, <span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># enumerate()</span></span><br><span class="line"><span class="comment"># 객체의 순서를 카운트한것을 반환합니다 </span></span><br><span class="line"></span><br><span class="line">x = (<span class="string">'python'</span>, <span class="string">'django'</span>, <span class="string">'pyramid'</span>)</span><br><span class="line">y = enumerate(x)</span><br><span class="line">print(list(y))</span><br><span class="line"></span><br><span class="line">x = &#123;<span class="string">'djangojeng-e'</span>: <span class="string">'멋쟁이'</span>, <span class="string">'python'</span>: <span class="string">'programming'</span>, <span class="string">'django'</span>: <span class="string">'framework'</span>&#125;</span><br><span class="line">y = enumerate(x)</span><br><span class="line"></span><br><span class="line">print(list(y))</span><br><span class="line"></span><br><span class="line"><span class="comment"># eval()</span></span><br><span class="line"><span class="comment"># 지정된 수식을 평가하기 위해 사용됩니다 </span></span><br><span class="line"></span><br><span class="line">x = <span class="string">'print(55)'</span></span><br><span class="line">eval(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># exec() </span></span><br><span class="line"></span><br><span class="line">x = <span class="string">'name = "djangojeng-e"\nprint(name)'</span></span><br><span class="line">exec(x)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/10/Python-%EA%B8%B0%EC%B4%88-20%ED%8E%B8-built-in-%EB%82%B4%EC%9E%A5%ED%95%A8%EC%88%98-1%ED%8E%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 19편 - 파이썬 클래스 선언</title>
      <link>http://djangojeng-e.github.io/2020/11/09/Python-%EA%B8%B0%EC%B4%88-19%ED%8E%B8-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A0%EC%96%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/11/09/Python-%EA%B8%B0%EC%B4%88-19%ED%8E%B8-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A0%EC%96%B8/</guid>
      <pubDate>Mon, 09 Nov 2020 03:55:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Python-클래스-정의&quot;&gt;&lt;a href=&quot;#Python-클래스-정의&quot; class=&quot;headerlink&quot; title=&quot;Python 클래스 정의&quot;&gt;&lt;/a&gt;Python 클래스 정의&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;strong&gt;객체 지향 프로그래밍에
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-클래스-정의"><a href="#Python-클래스-정의" class="headerlink" title="Python 클래스 정의"></a>Python 클래스 정의</h2><br><p><strong>객체 지향 프로그래밍에서 클래스와 객체들은 주요 특징입니다</strong></p><p>*<em>객체지향 프로그래밍의 꽃 이라고 할수 있습니다 *</em></p><br><blockquote><p>하나의 클래스는 새로운 데이터 타입과 객체들을, </p><p>클래스안에 정의된 것들을 따르는 클래스의 인스턴스들로 생성합니다.<br><br></p><p>새로 생성된 클래스의 인스턴스는, 클래스에 정의되어 있는 속성들을 가지고 있습니다. </p></blockquote><br><p>클래스안에 있는 문장들은 함수 정의, 데이터, 혹은 다른 기능을 하는 문장이 될수 있습니다. </p><br><p>어떠한 클래스가 정의되었을때, 클래스 내부는 하나의 새로운 namespace(이름공간) 이고, 이는 local scope 로 사용됩니다. </p><br><h2 id="클래스-생성하기"><a href="#클래스-생성하기" class="headerlink" title="클래스 생성하기"></a>클래스 생성하기</h2><br><p>클래스를 생성하는 방법은 간단합니다. <code>class</code> 키워드를 사용하여 정의하고, 클래스 내부의 문장들은 들여스기 해서 생성됩니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 클래스 생성하기 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    student_class = <span class="string">'1'</span></span><br><span class="line">    student_number = <span class="number">108801</span></span><br><span class="line">    student_name = <span class="string">'Djangojeng-e'</span></span><br></pre></td></tr></table></figure><br><p>위의 예시에서 생성된 클래스는 Student 라는 이름을 가지고, 클래스 내부에 3개의 변수들을 가지고 있습니다. </p><p>student_class, student_number 그리고 student_name 입니다. </p><br><h3 id="클래스-객체들"><a href="#클래스-객체들" class="headerlink" title="클래스 객체들"></a>클래스 객체들</h3><br><p>클래스 객체들은 두가지 종류의 동작을 지원합니다. </p><br><ol><li>attribute references (속성 참조)</li><li>instantiation (인스턴스화)</li></ol><br><p>속성 참조는, 표준 문법을 사용합니다. 예를들면, objects.name 형태의 문법을 사용하여, object 라는 객체의 name 속성에 접근할수 있습니다. </p><br><p>예시를 들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 클래스에서 attribute reference (속성 참조)</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    name = <span class="string">"Djangojeng-e"</span></span><br><span class="line">    student_class = <span class="string">'1반'</span></span><br><span class="line">    student_number = <span class="number">306108801</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># Student.name 을 사용하여, Student 객체의 name 속성을 접근합니다 </span></span><br><span class="line">print(Student.name)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Student.student_class 를 사용하여, Student 객체의 student_class 속성을 접근합니다 </span></span><br><span class="line">print(Student.student_class)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Student.student_number 를 사용하여, student_number 속성을 접근합니다 </span></span><br><span class="line">print(Student.student_number)</span><br></pre></td></tr></table></figure><br><h3 id="init-메서드"><a href="#init-메서드" class="headerlink" title="__init__ 메서드"></a><code>__init__</code> 메서드</h3><br><p>파이썬에서는, 특별하게 중요한 파이썬 메서드들이 존재합니다. 클래스는, <code>__init__</code> 이라고 불리는 특별한 메서드를 정의할수 있습니다. </p><br><blockquote><p><code>__init__</code> 메서드는, </p><p>초기화 작업을 해주고, 클래스를 위한 생성자로써 동작 합니다. </p><p>다른 함수 혹은 메서드와 비슷하게도, <code>__init__</code> 도 몇가지 갯수의 인자들을 받을수 있습니다 </p><br><p><code>__init__</code> 메서드는, 클래스의 객체가 인스턴스화 되자마자 실행되고, 클래스의 인스턴스화는 자동으로 <code>__init__()</code> 을 새롭게 생성되는 클래스 인스턴스를 위해 실행합니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 클래스 인스턴스화 그리고 __init__ 메서드 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Student 라는 클래스를 정의 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, student_class, student_number)</span>:</span> </span><br><span class="line">        self.name = name </span><br><span class="line">        self.student_class = student_class </span><br><span class="line">        self.student_number = student_number </span><br><span class="line">        </span><br><span class="line">s = Student(<span class="string">'Djangojeng-e'</span>, <span class="string">'1반'</span>, <span class="number">306108801</span>) <span class="comment"># Student 클래스의 인스턴스를 생성 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Student 클래스의 인스턴스인 s 가 실행되자 마자, </span></span><br><span class="line"><span class="comment"># def __init__ 이 실행되어, name, student_class, student_number 값들을 자동으로 할당합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 따라서, 아래와 같이, 인스턴스 생성후에, 해당 인스턴스 속성값으로, 할당된 값들에 접근할수 있습니다 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># s.name 을 사용하여, name 에 접근 </span></span><br><span class="line">print(s.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s.student_class 를 사용하여, student_class 접근 </span></span><br><span class="line">print(s.student_class)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s.student_number 를 사용하여, student_number 를 접근 </span></span><br><span class="line">print(s.student_number)</span><br></pre></td></tr></table></figure><br><h3 id="inheritance-상속"><a href="#inheritance-상속" class="headerlink" title="inheritance (상속)"></a>inheritance (상속)</h3><br><p>상속의 개념은, 객체지향 프로그래밍에서 코드의 재사용성에 중요한 영향을 미칩니다. </p><br><p>상속은, 새로운 클래스를 생성할때, 기존에 존재하고 있는 클래스를 기반으로 생성할수 있게 해줍니다. </p><p>기존에 존재하고 있는 클래스를 상속받는 새로운 클래스는, 기존 클래스의 모든 속성과 메서드들을 상속 받습니다. </p><br><p>다른 객체 지향 프로그래밍 언어들과 비슷하게도, 파이썬은 부모 클래스와 다른 다수의 클래스들을 상속받는것을 허용합니다. 다중 상속의 개념으로, 단일 상속과 다중 상속의 문법 예시는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 단일상속, 다중상속 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseClass</span>:</span></span><br><span class="line">    base_class = <span class="string">"기본 클래스"</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OtherClass</span>:</span></span><br><span class="line">    other_class = <span class="string">'다른 클래스'</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 단일 클래스 상속 </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SingleInheritance</span><span class="params">(BaseClass)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">single = SingleInhertiance  <span class="comment"># 단일 클래스 상속 인스턴스 생성 </span></span><br><span class="line">print(single.base_class) <span class="comment"># BaseClass 에 있는 변수값을 접근할수 있습니다 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 다수의 클래스를 상속받는 클래스를 생성 (다중상속) </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MultipleInheritance</span><span class="params">(BaseClass, OtherClass)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">multiple = MultipleInheritance <span class="comment"># 다중상속 클래스 생성 </span></span><br><span class="line"></span><br><span class="line">print(multiple.base_class) <span class="comment"># BaseClass 의 base_class 값을 출력합니다 </span></span><br><span class="line">print(multiple.other_class)<span class="comment"># OtherClass 의 other_class 값을 출력합니다</span></span><br></pre></td></tr></table></figure><br><h3 id="클래스-예시"><a href="#클래스-예시" class="headerlink" title="클래스 예시"></a>클래스 예시</h3><br><ol><li><p>공장에서, 생산직원과 사무직원들은 모두 공통된 속성들을 가지고 있습니다. </p><ul><li><p>모든 직원들은 - name, designation, age 같은 정보들을 가지고 있습니다 </p></li><li><p>회사직원 (CompanyStaff) 라고 부를수 있는 클래스를 하나 생성할수 있습니다 </p><p>CompanyStaff 클래스를 생성해 줍니다. </p></li></ul></li><li><p>이런 공통된 사항들을 떠나서, 생산직과 사무직은 다른 수당 구조를 가지고 있습니다 </p><ul><li><p>FactoryStaff(생산사원) 은 야근 혹은 추가 근무 수당을 받고 </p></li><li><p>OfficeStaff (사무직)은 출장비 수당을 받을수 있습니다 </p><p>FactoryStaff 클래스와 OfficeStaff 클래스를 생성해 줍니다. </p></li></ul></li><li><p>FactoryStaff 클래스와 OfficeStaff 클래스는, ComapnyStaff 클래스를 상속받을수 있습니다. </p></li></ol><p>​    <br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 클래스 예시 </span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CompanyStaff</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, designation, age)</span>:</span></span><br><span class="line">        self.name = name </span><br><span class="line">        self.designation = designation </span><br><span class="line">        self.age = age </span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">detail</span><span class="params">(self)</span>:</span></span><br><span class="line">print(<span class="string">f'Name : <span class="subst">&#123;self.name&#125;</span> \n Designation : <span class="subst">&#123;self.designation&#125;</span> \n Age : <span class="subst">&#123;self.age&#125;</span>'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryStaff</span><span class="params">(CompanyStaff)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, designation, age, overtime_allowance)</span>:</span></span><br><span class="line">        CompanyStaff.__init__(self, name, designation, age)</span><br><span class="line">        self.overtime_allow = overtime_allowance</span><br><span class="line">        CompanyStaff.detail(self)</span><br><span class="line">        print(<span class="string">'추가 근무 수당 : '</span>, self.overtime_allow)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OfficeStaff</span><span class="params">(CompanyStaff)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, designation, age, travel_allowance)</span>:</span></span><br><span class="line">        CompanyStaff.__init__(self, name, designation, age)</span><br><span class="line">        self.travel_allow = travel_allowance</span><br><span class="line">        CompanyStaff.detail(self)</span><br><span class="line">        print(<span class="string">'출장근무 수당 : '</span>, self.travel_allow)</span><br></pre></td></tr></table></figure><br><p>위와 같이 생성된 클래스를 테스트 해봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 생산직원 인스턴스 생성 </span></span><br><span class="line">FactoryStaff(<span class="string">'주호영'</span>, <span class="string">'전기공'</span>, <span class="number">39</span>, <span class="number">20000</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사무직원 인스턴스 생성 </span></span><br><span class="line">OfficeStaff(<span class="string">'이성경'</span>, <span class="string">'마케팅'</span>, <span class="number">30</span>, <span class="number">50000</span>)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/09/Python-%EA%B8%B0%EC%B4%88-19%ED%8E%B8-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A0%EC%96%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 18편 - 파이썬 클래스</title>
      <link>http://djangojeng-e.github.io/2020/11/09/Python-%EA%B8%B0%EC%B4%88-18%ED%8E%B8-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4/</link>
      <guid>http://djangojeng-e.github.io/2020/11/09/Python-%EA%B8%B0%EC%B4%88-18%ED%8E%B8-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4/</guid>
      <pubDate>Mon, 09 Nov 2020 03:08:36 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-Class&quot;&gt;&lt;a href=&quot;#Python-Class&quot; class=&quot;headerlink&quot; title=&quot;Python Class&quot;&gt;&lt;/a&gt;Python Class&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;strong&gt;소개글&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;객체 지향 프로그래밍의 기본 아이디어는 데이터와 연관된 순서들 (메서드)을 데이터에 작용하는 하나의 단위로 묶는것입니다. 이 하나로 묶인 단위를 객체라고 부릅니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;파이썬은 객체 지향 프로그래밍 언어 입니다. &lt;/p&gt;
&lt;p&gt;파이썬에 모든것은 객체 입니다, &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;우리는 이미 몇가지 파이썬 객체들을 가지고 작업한 적이 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;예를들면, &lt;/p&gt;
&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;문자열 &lt;/li&gt;
&lt;li&gt;리스트 &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;이렇게 파이썬에서 기본으로 제공하는 기능들도 파이썬 객체 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬에서는, 객체를 선언하고, &lt;code&gt;type()&lt;/code&gt;  함수를 사용하여, 객체의 타입을 확인할수 있습니다. &lt;/p&gt;
&lt;br&gt;



&lt;br&gt;

&lt;p&gt;또한, &lt;code&gt;dir()&lt;/code&gt; 함수를 사용하여, 해당 객체에서 사용할수 있는 속성들을 확인해 볼수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 두개의 객체를 생성하고, type 확인 하기 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# type() 함수를 사용하여 확인할수 있습니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string1 = &lt;span class=&quot;string&quot;&gt;&quot;안녕하세요&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(type(string1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(dir(string1))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;number_list = [&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;133&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12.5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(type(number_list))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;파이썬에서는, 파이썬 객체의 속성들을 &lt;code&gt;dir()&lt;/code&gt; 을 사용하여 확인 해보고, 사용도 해볼수 있습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;아래 예시에서는, &lt;code&gt;lower()&lt;/code&gt; 와 &lt;code&gt;upper()&lt;/code&gt; 메서드들을 사용해 보았습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# dir 로 확인해 보았을때, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# upper() 와 lower() 메서드가 있는것을 확인할수 있는데 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# .upper() 와 .lower() 를 사용하여, 객체를 소문자 대문자를 지정하여 출력할수 있습니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;string2 = &lt;span class=&quot;string&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(type(string2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(dir(string2))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(string2.lower())&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(string2.upper())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;클래스에 대해서 더 알아보기 이전에, 아래 사항들을 잘 숙지하고 있어야 이해하기가 쉽습니다. &lt;/p&gt;
&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;로컬 변수 &lt;/li&gt;
&lt;li&gt;글로벌 변수 &lt;/li&gt;
&lt;li&gt;global 문 &lt;/li&gt;
&lt;li&gt;nonlocal 문 &lt;/li&gt;
&lt;li&gt;namespace &lt;/li&gt;
&lt;li&gt;scope 규칙 &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;h2 id=&quot;Class-를-이해하기-위해-알아야할-사항들&quot;&gt;&lt;a href=&quot;#Class-를-이해하기-위해-알아야할-사항들&quot; class=&quot;headerlink&quot; title=&quot;Class 를 이해하기 위해 알아야할 사항들&quot;&gt;&lt;/a&gt;Class 를 이해하기 위해 알아야할 사항들&lt;/h2&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Class"><a href="#Python-Class" class="headerlink" title="Python Class"></a>Python Class</h2><br><p><strong>소개글</strong></p><br><p>객체 지향 프로그래밍의 기본 아이디어는 데이터와 연관된 순서들 (메서드)을 데이터에 작용하는 하나의 단위로 묶는것입니다. 이 하나로 묶인 단위를 객체라고 부릅니다. </p><br><blockquote><p>파이썬은 객체 지향 프로그래밍 언어 입니다. </p><p>파이썬에 모든것은 객체 입니다, </p></blockquote><br><p>우리는 이미 몇가지 파이썬 객체들을 가지고 작업한 적이 있습니다. </p><br><p>예를들면, </p><br><ul><li>문자열 </li><li>리스트 </li></ul><br><p>이렇게 파이썬에서 기본으로 제공하는 기능들도 파이썬 객체 입니다. </p><br><p>파이썬에서는, 객체를 선언하고, <code>type()</code>  함수를 사용하여, 객체의 타입을 확인할수 있습니다. </p><br><br><p>또한, <code>dir()</code> 함수를 사용하여, 해당 객체에서 사용할수 있는 속성들을 확인해 볼수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 두개의 객체를 생성하고, type 확인 하기 </span></span><br><span class="line"><span class="comment"># type() 함수를 사용하여 확인할수 있습니다. </span></span><br><span class="line"></span><br><span class="line">string1 = <span class="string">"안녕하세요"</span></span><br><span class="line">print(type(string1))</span><br><span class="line">print(dir(string1))</span><br><span class="line"></span><br><span class="line">number_list = [<span class="number">1</span>, <span class="number">133</span>, <span class="number">12.5</span>]</span><br><span class="line">print(type(number_list))</span><br></pre></td></tr></table></figure><br><p>파이썬에서는, 파이썬 객체의 속성들을 <code>dir()</code> 을 사용하여 확인 해보고, 사용도 해볼수 있습니다. </p><p><br>아래 예시에서는, <code>lower()</code> 와 <code>upper()</code> 메서드들을 사용해 보았습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># dir 로 확인해 보았을때, </span></span><br><span class="line"><span class="comment"># upper() 와 lower() 메서드가 있는것을 확인할수 있는데 </span></span><br><span class="line"><span class="comment"># .upper() 와 .lower() 를 사용하여, 객체를 소문자 대문자를 지정하여 출력할수 있습니다. </span></span><br><span class="line"></span><br><span class="line">string2 = <span class="string">"hello world"</span></span><br><span class="line">print(type(string2))</span><br><span class="line">print(dir(string2))</span><br><span class="line">print()</span><br><span class="line">print(string2.lower())</span><br><span class="line">print(string2.upper())</span><br></pre></td></tr></table></figure><br><p>클래스에 대해서 더 알아보기 이전에, 아래 사항들을 잘 숙지하고 있어야 이해하기가 쉽습니다. </p><br><ul><li>로컬 변수 </li><li>글로벌 변수 </li><li>global 문 </li><li>nonlocal 문 </li><li>namespace </li><li>scope 규칙 </li></ul><br><h2 id="Class-를-이해하기-위해-알아야할-사항들"><a href="#Class-를-이해하기-위해-알아야할-사항들" class="headerlink" title="Class 를 이해하기 위해 알아야할 사항들"></a>Class 를 이해하기 위해 알아야할 사항들</h2><br><a id="more"></a> <h3 id="local-variables-로컬변수"><a href="#local-variables-로컬변수" class="headerlink" title="local variables (로컬변수)"></a>local variables (로컬변수)</h3><br><p>함수 안에 변수가 선언되면, 해당 변수는 오로지, 해당 변수가 선언된 함수 내에서 혹은 코드 블럭에서만 접근이 가능합니다. 함수 안에 선언된 변수는, 함수 밖에 선언된 그 어떤 변수들과는 관계가 없습니다. </p><br><p>따라서, 해당 변수는, 변수가 선언된 함수 내부의 local 변수 입니다. </p><br><p>예시를 들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># local variable </span></span><br><span class="line"><span class="comment"># 로컬 변수 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_local</span><span class="params">(a)</span>:</span></span><br><span class="line">    print(<span class="string">'a 는 -&gt; '</span>, a)  <span class="comment"># 파라미터로 전달된 값을 a 로 가집니다 </span></span><br><span class="line">    a = <span class="number">50</span> </span><br><span class="line">    print(<span class="string">'새로운 값을 가진 a 는 -&gt; '</span>, a)  <span class="comment"># 윗줄에서 a 는 50으로 할당 되었기 때문에 a는 50</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 함수 밖에 변수 a 는 100 으로 할당 되었습니다. </span></span><br><span class="line">a = <span class="number">100</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 함수를 호출 </span></span><br><span class="line">function_local(<span class="number">40</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="string">'a의 값은 - &gt; '</span>, a)</span><br></pre></td></tr></table></figure><br><h3 id="global-문"><a href="#global-문" class="headerlink" title="global 문"></a>global 문</h3><br><p>global 문의 목적은, 함수밖에 선언된 변수에 값을 할당 하기 위함 입니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># global statement </span></span><br><span class="line"><span class="comment"># global 문 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">function_local</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> a <span class="comment"># 함수밖에 있는 a 의 값을 로컬 변수로 가져와서 사용합니다 </span></span><br><span class="line">    print(<span class="string">'a 는 - &gt; '</span>, a)</span><br><span class="line">    a = <span class="number">50</span> </span><br><span class="line">    print(<span class="string">'함수안에 새로운값 이후에  a 는 - &gt; '</span>, a) <span class="comment"># 50 이 할당된 변수를 출력합니다 </span></span><br><span class="line">    </span><br><span class="line">a = <span class="number">100</span> </span><br><span class="line">function_local() </span><br><span class="line"></span><br><span class="line">print(<span class="string">'a의 값은 -&gt; '</span>, a)    <span class="comment"># a 는 50이기 때문에, 50을 출력합니다</span></span><br></pre></td></tr></table></figure><br><h3 id="nonlocal-문"><a href="#nonlocal-문" class="headerlink" title="nonlocal 문"></a>nonlocal 문</h3><br><p>nonlocal 문은 안쪽에 존재하는 함수안에 변수를, 밖에 있는 변수와 묶어줄때 사용합니다. </p><p>예시를 들자면, </p><br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outside</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">10</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inside</span><span class="params">()</span>:</span></span><br><span class="line">        a = <span class="number">20</span></span><br><span class="line">        print(<span class="string">"안쪽에 있는 a -&gt;"</span>, a)</span><br><span class="line">    inside()</span><br><span class="line">    print(<span class="string">'바깥쪽 a -&gt;'</span>, a)</span><br><span class="line"></span><br><span class="line">outside()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">안쪽에 있는 a - &gt;  <span class="number">20</span></span><br><span class="line">바깥쪽 a -&gt; 10</span><br></pre></td></tr></table></figure><br><p>nonlocal 을 사용하면, 아래와 같이 됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">outside</span><span class="params">()</span>:</span></span><br><span class="line">    a = <span class="number">10</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inside</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> a </span><br><span class="line">        a = <span class="number">20</span> </span><br><span class="line">        print(<span class="string">"inside() 안에 있는 a 는 -"</span>, a)</span><br><span class="line">inside()</span><br><span class="line">    print(<span class="string">"outside()안에 있는 a 의 값 - "</span>, a)</span><br><span class="line"></span><br><span class="line">outside() </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inside() 안에 있는 a 는 -  <span class="number">20</span></span><br><span class="line">outside() 안에 있는 a 의 값 -  <span class="number">20</span></span><br></pre></td></tr></table></figure><br><h3 id="Python-scope-와-Namespaces"><a href="#Python-scope-와-Namespaces" class="headerlink" title="Python scope 와 Namespaces"></a>Python scope 와 Namespaces</h3><br><p>Scope 와 Namespace 개념은, 처음에는 이해하기 어려운 개념입니다. </p><br><p>대부분의 경우, namespace 즉 이름공간은. 고유한 이름을 짓기위한 시스템입니다. </p><br><p>일상생활에서, 각 기차역 이름, 공항이름, 혹은 각 국가의 수도명은 각각 고유한 이름을 가지고 있습니다. </p><p><br>또한, 파일 시스템 디렉토리 구조들도 고유한 이름들을 가지고 있습니다. </p><br><img src="/2020/11/09/Python-%EA%B8%B0%EC%B4%88-18%ED%8E%B8-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4/image1.png" class=""><br><blockquote><p>namespaces, </p><p>이름 공간은, 변수들이 살고 있는 공간들입니다. </p></blockquote><br><p>위의 이미지를 보면, 다른 이름공간 영역들이 보이는데, 각 영역들에 속한 변수들 끼리는 서로 연관이 없습니다. </p><br><p>만약 두개의 변수가 있다고 가정하고, 이 두변수들의 변수명이 서로 같다 하더라도, 다른 이름공간안에 살고 있다면, 해당 변수들은 서로 전혀 연관이 없고, 각각 고유한 변수 입니다. </p><br><p>변수명이 같다 하더라도, 다른 공간안에 있다면, 다른 변수로 생각해도 괜찮습니다. </p><br><img src="/2020/11/09/Python-%EA%B8%B0%EC%B4%88-18%ED%8E%B8-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4/image2.png" class=""><br><p>Namespace, 즉 이름공간들은 아래와 같이 생성이 됩니다. </p><br><ol><li>built-in namespace - 파이썬 인터프리터가 시작될때 생성되고, 절대 삭제되지 않습니다 </li><li>global namespace for module - 모듈이 불려질때 생성되고, 인터프리터가 종료될때까지 살아 있습니다 </li><li>local namespace for function - 함수가 호출될때 생성되고, 함수가 반환될때 없어집니다. </li></ol><br><blockquote><p>Scope 는, </p><p>파이썬 프로그램안의 영역들로, namespace 가 바로 접근이 가능한 영역들입니다. </p></blockquote><br><img src="/2020/11/09/Python-%EA%B8%B0%EC%B4%88-18%ED%8E%B8-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4/image3.png" class=""><br><p>보편적으로, 파이썬에서 영역들은 아래와 같이 정리가 될수 있습니다. </p><br><ol><li>built-in 영역 </li><li>Global 영역</li><li>Enclosed 영역</li><li>local 영역  </li></ol><br><p>변수를 찾을때의 순서는 아래 그림과 같은 순서로 진행 될수 있습니다. </p><br><img src="/2020/11/09/Python-%EA%B8%B0%EC%B4%88-18%ED%8E%B8-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4/image4.png" class=""><ol><li>변수는, 함수안에서 local 변수 영역에서 먼저 찾고, 접근 가능합니다 </li><li>변수는, 함수가 중첩되어 있는 구조, 즉 enclosed 일때에, 안쪽에 있는 함수의 밖의 함수 에서 변수를 찾아보고, 접근이 가능합니다 </li><li>enclosed 여역 밖의 global 영역에서 변수를 찾고 접근이 가능합니다 </li><li>built-in 영역에서 변수를 찾고, 접근 합니다 </li></ol><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/09/Python-%EA%B8%B0%EC%B4%88-18%ED%8E%B8-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%ED%81%B4%EB%9E%98%EC%8A%A4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 17편 - 사용자 정의 함수</title>
      <link>http://djangojeng-e.github.io/2020/11/08/Python-%EA%B8%B0%EC%B4%88-17%ED%8E%B8-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%ED%95%A8%EC%88%98/</link>
      <guid>http://djangojeng-e.github.io/2020/11/08/Python-%EA%B8%B0%EC%B4%88-17%ED%8E%B8-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%ED%95%A8%EC%88%98/</guid>
      <pubDate>Sun, 08 Nov 2020 00:20:34 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;User-defined-functions&quot;&gt;&lt;a href=&quot;#User-defined-functions&quot; class=&quot;headerlink&quot; title=&quot;User defined functions&quot;&gt;&lt;/a&gt;User defined functio
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="User-defined-functions"><a href="#User-defined-functions" class="headerlink" title="User defined functions"></a>User defined functions</h2><br><blockquote><p><strong>소개글</strong></p><br><p>모든 프로그램 언어와 스크립트 언어들에서, 함수는 프로그램 문장 블럭으로</p><p>프로그램 안에서 반복적으로 사용될수 있는것입니다. </p><br><p>함수는 코드 블럭을 다시 재사용할수 있게 만들어서, 프로그래머들의 시간을 낭비하지 않게 해줍니다 </p><br><p>파이썬에서 함수의 개념은 다른 언어들과 동일합니다. </p><p>파이썬에는 미리 정의가 되어 있는, built in 함수, 즉 내장되어 있는 함수가 존재하고. 혹은, 사용자가 필요에 의해 정의를 한 사용자 정의 함수가 존재할수 있습니다. </p></blockquote><br><h2 id="파이썬에서-함수-정의"><a href="#파이썬에서-함수-정의" class="headerlink" title="파이썬에서 함수 정의"></a>파이썬에서 함수 정의</h2><br><ol><li><code>def</code>로 시작하고, def 다음에 함수이름을 적어주면 선언됩니다</li><li>함수는 <code>def &lt;함수명&gt; () :</code> 형태로, 괄호안에 input 으로 쓰여질 인자들을 정의할수 있고, <code>:</code> 으로 끝납니다 </li><li>함수명에 인자를 정의해 주면, 다음줄부터 코드 문장을 쓸수 있고, 이 코드 문장들은 들여쓰기가 되어 있어야 합니다. </li></ol><br><p>간단한 함수를 예로 들어보면, 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사용자 정의 함수 </span></span><br><span class="line"><span class="comment"># average_number 는 함수명 </span></span><br><span class="line"><span class="comment"># x, y 는 함수에 input 으로 쓰여질 인자들 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average_number</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    print(<span class="string">"x 와 y 의 평균은 &#123;&#125; 입니다"</span>.format((x + y) / <span class="number">2</span>))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 정의된 함수를 호출 x 값엔 4를, y 값에는 6을 넣어줍니다 </span></span><br><span class="line">average_number(<span class="number">4</span>, <span class="number">6</span>)</span><br></pre></td></tr></table></figure><br><h2 id="함수를-호출하는-방법"><a href="#함수를-호출하는-방법" class="headerlink" title="함수를 호출하는 방법"></a>함수를 호출하는 방법</h2><br><p>다른 프로그래밍 언어들과 비슷하게, 함수를 호출하는 방법은, 함수명을 쓰고 <code>()</code> 안에 파라미터를 넣어주어 호출합니다. 위의 예시에서 <code>average_number(4 ,6)</code> 은 average_number 라는 함수를 호출하고, 파라미터로, 4, 6 을 넣어줍니다  </p><br><p><strong>함수 호출 예시</strong></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 함수 호출 예시 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_three_times</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"이것은 파이썬 기초 입니다"</span>)</span><br><span class="line">    print(<span class="string">"이것은 파이썬 기초 입니다"</span>)</span><br><span class="line">    print(<span class="string">"이것은 파이썬 기초 입니다"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 위의 정의된 함수를 호출 </span></span><br><span class="line"><span class="comment"># 함수는 인자를 가지지 않고, print 문을 3번 실행 합니다 </span></span><br><span class="line"></span><br><span class="line">print_three_times()</span><br></pre></td></tr></table></figure><br><h2 id="함수에서-return-문"><a href="#함수에서-return-문" class="headerlink" title="함수에서 return 문"></a>함수에서 return 문</h2><br><p>파이썬에서 return 문은 함수로부터 값을 반환하기 위해 사용됩니다. 수식과 인자가 없이 실행된 함수에 return 문은 None 을 반환합니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nsquare</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="keyword">return</span> (x * x + <span class="number">2</span>*x*y + y*y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># return 뒤의 수식 의 값을 함수의 값으로 반환합니다 </span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"2와 3의 합계의 제곱은 : &#123;&#125;"</span>.format(nsquare(<span class="number">2</span>, <span class="number">3</span>)))</span><br></pre></td></tr></table></figure><br><h2 id="기본-인자-값"><a href="#기본-인자-값" class="headerlink" title="기본 인자 값"></a>기본 인자 값</h2><br><p>함수의 파라미터 리스트에서 우리는, 하나 혹은 그 이상의 인자들에 대해 기본값을 지정할수 있습니다. </p><p>기본값은, <code>인자1 = 값</code> 의 형태로 작성될수 있습니다. </p><br><p>우리는 어떤 인자가 기본값을 가지게 될지에 대해서 선택하여 지정할수 있습니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># y 는 2라는 값을 기본값으로 지정됩니다 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">nsquare</span><span class="params">(x, y = <span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x*x + <span class="number">2</span>*x*y + y*y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># y값에 대한 파라미터가 전달되지 않는다 하더라도 </span></span><br><span class="line"><span class="comment"># y 는 기본값인 2를 가지고 함수를 실행하고 </span></span><br><span class="line"><span class="comment"># 그에 맞는 값을 반환합니다 </span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"2와 3의 합계의 제곱은 : &#123;&#125;"</span>.format(nsquare(<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># y 값에 대한 파라미터가 4로 전달이 되면, </span></span><br><span class="line"><span class="comment"># y 는 전달된 4라는 값을 가지고 함수를 실행하고 </span></span><br><span class="line"><span class="comment"># 값을 반환합니다 </span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"2 와 4의 합계의 제곱은 : &#123;&#125;"</span>.format(nsquare(<span class="number">2</span>,<span class="number">4</span>)))</span><br></pre></td></tr></table></figure><br><h2 id="키워드-인자"><a href="#키워드-인자" class="headerlink" title="키워드 인자"></a>키워드 인자</h2><br><p>우리는 어떻게 기본 인자값들을 지정하는지 배웠습니다만. </p><p>함수는 키워드 인자들을 사용하여 호출될수도 있습니다. </p><br><blockquote><p><strong>키워드 인자란?</strong> </p><p><code>변수명 = 값</code> 형태로 되어 있는 인자들을, 키워드 인자라고 부릅니다. </p></blockquote><br><p>함수에 전달된 모든 키워드 인자들은, 함수가 받는 인자들중 하나와 꼭 매치가 되어야 합니다. </p><br><p>아래 예시에서, 함수가 호출될때마다, 함수로 전달되는 인자들중 꼭 한가지는 함수가 받는 인자들중 하나와 매치가 됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 키워드 인자 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">marks</span><span class="params">(english, math=<span class="number">85</span>, science=<span class="number">80</span>)</span>:</span></span><br><span class="line">    print(<span class="string">"Marks in : English is - "</span>, english, <span class="string">"Math -"</span>, math, <span class="string">"Science -"</span>, science)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># english parameter 는 71의 값을 갖고, math 는 77 그리고 science 는 기본값인 80을 갖습니다 </span></span><br><span class="line">marks(<span class="number">71</span>, <span class="number">77</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># english parameter 는 65 의 값을 갖고, math 는 기본값인 85, 그리고 science 는 74로 전달 됩니다 </span></span><br><span class="line">marks(<span class="number">65</span>, science=<span class="number">74</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 순서가 바뀌긴 했지만, 상관없이 정확히 매칭만 된다면, </span></span><br><span class="line"><span class="comment"># english  는 75의 값을, math 는 90의 값을, science 는 70의 값을 갖게 됩니다 </span></span><br><span class="line">marks(science=<span class="number">70</span>, math=<span class="number">90</span>, english=<span class="number">75</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Arbitrary-Argument-Lists"><a href="#Arbitrary-Argument-Lists" class="headerlink" title="Arbitrary Argument Lists"></a>Arbitrary Argument Lists</h2><br><p>arbitrary argument, 즉 임의의 인자 리스트는, 인자들을 함수에 전달하는 다른 방법중 하나 입니다. </p><p><br>함수의 body 안에서, 이 인자들은 튜플로 감싸져 있고. 이는 <code>*args</code> 생성자를 사용하여 정의 됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Arbitrary Argument List </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sum</span><span class="params">(*numbers)</span>:</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        s += n </span><br><span class="line">    <span class="keyword">return</span> s </span><br><span class="line"></span><br><span class="line"><span class="comment"># *numbers 로 임의의 인자가 지정되었기 때문에 </span></span><br><span class="line"><span class="comment"># 인자가 몇개가 들어가든 상관 없습니다 </span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'1부터 4까지의 합은 &#123;&#125;'</span>.format(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)))</span><br><span class="line">print(<span class="string">'1부터 10까지의 합은 &#123;&#125;'</span>.format(sum(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># *args 에는 여러 인자들이 들어갈수 있고, </span></span><br><span class="line"><span class="comment"># 함수 내부에는 tuple 로 감싸져서 사용됩니다 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">arbitrary_arguments</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(type(args))</span><br><span class="line">    </span><br><span class="line">arbitrary_arguments(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Lambda-함수"><a href="#Lambda-함수" class="headerlink" title="Lambda 함수"></a>Lambda 함수</h2><br><p>파이썬에서, 작은 익명의 함수들 (이름이 지어지지 않은) lambda 키워드를 생성하여 사용될수 있습니다. </p><br><p>lambda  형태의 함수들은, 다른 함수의 인자로써 사용될수도 있습니다 </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lambda forms </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">average</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (x + y) / <span class="number">2</span> </span><br><span class="line">print(average(<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 위 함수를 lambda 를 사용하여 정의해 본다면, </span></span><br><span class="line">print((<span class="keyword">lambda</span> x, y: (x+ y)/<span class="number">2</span>)(<span class="number">4</span>, <span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 또다른 lambda  의 예시 </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">multiply_two</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x * y </span><br><span class="line"></span><br><span class="line">print(multiply_two(<span class="number">5</span>, <span class="number">5</span>))</span><br><span class="line"><span class="comment"># 위 함수를 lambda 를 사용하여 정의하면, </span></span><br><span class="line">print((<span class="keyword">lambda</span> x, y: x * y)(<span class="number">5</span>,<span class="number">5</span>))</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/08/Python-%EA%B8%B0%EC%B4%88-17%ED%8E%B8-%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%A0%95%EC%9D%98-%ED%95%A8%EC%88%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 16편 - Date and Time</title>
      <link>http://djangojeng-e.github.io/2020/11/07/Python-%EA%B8%B0%EC%B4%88-16%ED%8E%B8-Date-and-Time/</link>
      <guid>http://djangojeng-e.github.io/2020/11/07/Python-%EA%B8%B0%EC%B4%88-16%ED%8E%B8-Date-and-Time/</guid>
      <pubDate>Sat, 07 Nov 2020 04:05:42 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-기초-Date-and-Time&quot;&gt;&lt;a href=&quot;#Python-기초-Date-and-Time&quot; class=&quot;headerlink&quot; title=&quot;Python 기초 - Date and Time&quot;&gt;&lt;/a&gt;Python 기초 - Date and Time&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;날짜와-시간&quot;&gt;&lt;a href=&quot;#날짜와-시간&quot; class=&quot;headerlink&quot; title=&quot;날짜와 시간&quot;&gt;&lt;/a&gt;날짜와 시간&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;datetime&lt;/code&gt; 모듈은 날짜와 시간들을 간단한 혹은 복잡한 방법으로 다룰수 있게 해주는 클래스들을 제공합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;Datetime 모듈은 세가지 기본 객체 타입들을 가지고 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;1) date&lt;/p&gt;
&lt;p&gt;2) time&lt;/p&gt;
&lt;p&gt;3) datetime&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;h4 id=&quot;date&quot;&gt;&lt;a href=&quot;#date&quot; class=&quot;headerlink&quot; title=&quot;date&quot;&gt;&lt;/a&gt;date&lt;/h4&gt;&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Date (날짜)를 두룰때 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# datetime.date.today() 오늘 날짜를 갖습니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;today = datetime.date.today()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;f&#39;오늘 날짜는 &lt;span class=&quot;subst&quot;&gt;&amp;#123;today&amp;#125;&lt;/span&gt; 입니다&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;new_year = datetime.date(&lt;span class=&quot;number&quot;&gt;2021&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;f&#39;올해 신년 날짜는 &lt;span class=&quot;subst&quot;&gt;&amp;#123;new_year&amp;#125;&lt;/span&gt; 입니다&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h4 id=&quot;Time&quot;&gt;&lt;a href=&quot;#Time&quot; class=&quot;headerlink&quot; title=&quot;Time&quot;&gt;&lt;/a&gt;Time&lt;/h4&gt;&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Time (시간) 을 다룰때&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# datetime.time() 은 시간을 갖습니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# time 객체 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;noon = datetime.time(&lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(noon)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;three_pm = datetime.time(&lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(three_pm)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h4 id=&quot;datetime&quot;&gt;&lt;a href=&quot;#datetime&quot; class=&quot;headerlink&quot; title=&quot;datetime&quot;&gt;&lt;/a&gt;datetime&lt;/h4&gt;&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# time 을 다룰때, date 와 time 둘의 값을 가진 객체를 가질수 있습니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# Datetime 객체 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;now = datetime.datetime.now() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(now)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; datetime &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 특정 datetime &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;my_birthday = datetime.datetime(&lt;span class=&quot;number&quot;&gt;2000&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;12&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(my_birthday)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-기초-Date-and-Time"><a href="#Python-기초-Date-and-Time" class="headerlink" title="Python 기초 - Date and Time"></a>Python 기초 - Date and Time</h2><br><h3 id="날짜와-시간"><a href="#날짜와-시간" class="headerlink" title="날짜와 시간"></a>날짜와 시간</h3><br><p><code>datetime</code> 모듈은 날짜와 시간들을 간단한 혹은 복잡한 방법으로 다룰수 있게 해주는 클래스들을 제공합니다. </p><br><blockquote><p>Datetime 모듈은 세가지 기본 객체 타입들을 가지고 있습니다. </p><br><p>1) date</p><p>2) time</p><p>3) datetime</p></blockquote><br><h4 id="date"><a href="#date" class="headerlink" title="date"></a>date</h4><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Date (날짜)를 두룰때 </span></span><br><span class="line"><span class="comment"># datetime.date.today() 오늘 날짜를 갖습니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime </span><br><span class="line">today = datetime.date.today()</span><br><span class="line">print(<span class="string">f'오늘 날짜는 <span class="subst">&#123;today&#125;</span> 입니다'</span>)</span><br><span class="line"></span><br><span class="line">new_year = datetime.date(<span class="number">2021</span>,<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">print(<span class="string">f'올해 신년 날짜는 <span class="subst">&#123;new_year&#125;</span> 입니다'</span>)</span><br></pre></td></tr></table></figure><br><br><h4 id="Time"><a href="#Time" class="headerlink" title="Time"></a>Time</h4><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Time (시간) 을 다룰때</span></span><br><span class="line"><span class="comment"># datetime.time() 은 시간을 갖습니다 </span></span><br><span class="line"><span class="keyword">import</span> datetime </span><br><span class="line"><span class="comment"># time 객체 </span></span><br><span class="line">noon = datetime.time(<span class="number">12</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">print(noon)</span><br><span class="line"></span><br><span class="line">three_pm = datetime.time(<span class="number">15</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">print(three_pm)</span><br></pre></td></tr></table></figure><br><br><h4 id="datetime"><a href="#datetime" class="headerlink" title="datetime"></a>datetime</h4><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># time 을 다룰때, date 와 time 둘의 값을 가진 객체를 가질수 있습니다 </span></span><br><span class="line"><span class="comment"># Datetime 객체 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime </span><br><span class="line">now = datetime.datetime.now() </span><br><span class="line"></span><br><span class="line">print(now)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime </span><br><span class="line"></span><br><span class="line"><span class="comment"># 특정 datetime </span></span><br><span class="line"></span><br><span class="line">my_birthday = datetime.datetime(<span class="number">2000</span>, <span class="number">12</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">28</span>, <span class="number">0</span>)</span><br><span class="line">print(my_birthday)</span><br></pre></td></tr></table></figure><br><a id="more"></a><br><h2 id="날짜를-순회하기"><a href="#날짜를-순회하기" class="headerlink" title="날짜를 순회하기"></a>날짜를 순회하기</h2><br><p>시작하는 날짜부터 끝나는 날짜 사이에 날짜들을 순회하면서 추력할수 있습니다 </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 시작날짜부터 끝나는 날짜까지 순회하면 각 날짜들을 출력 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> datetime </span><br><span class="line"></span><br><span class="line"><span class="comment"># 날짜간의 간격을 timedelta 로 지정해 줍니다 </span></span><br><span class="line">day_delta = datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 시작 날짜를 start_date  오늘 날짜로 지정해주고 </span></span><br><span class="line">start_date = datetime.date.today() </span><br><span class="line"></span><br><span class="line"><span class="comment"># 끝나는 날짜를, start_date 으로부터 7 time_delta 가 지난 날짜로 지정해 줍니다 </span></span><br><span class="line"><span class="comment"># 즉, 오늘부터 7일 후</span></span><br><span class="line"></span><br><span class="line">end_date = start_date + <span class="number">7</span> * day_delta </span><br><span class="line"></span><br><span class="line"><span class="comment"># 시작날짜부터 끝나는 날짜까지 순회하면서, 각 날짜들을 출력해 봅니다 </span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range((end_date - start_date).days)</span><br><span class="line">print(start_date + i * day_delta)</span><br></pre></td></tr></table></figure><br><h2 id="시간-차이를-계산할수-있습니다"><a href="#시간-차이를-계산할수-있습니다" class="headerlink" title="시간 차이를 계산할수 있습니다"></a>시간 차이를 계산할수 있습니다</h2><br><p>timedelta 모듈은 시간 사이의 차이를 계산할수 있습니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># timedelta 모듈은 시간간의 차이를 계산할수 있습니다 </span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta </span><br><span class="line">now = datetime.now() </span><br><span class="line">print(now)</span><br><span class="line"></span><br><span class="line">later = datetime(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">print(later)</span><br><span class="line"></span><br><span class="line">delta = later - now</span><br></pre></td></tr></table></figure><br><blockquote><p>delta 는 timedelta type 입니다 </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta </span><br><span class="line">now = datetime.now()</span><br><span class="line">later = datetime(<span class="number">2020</span>, <span class="number">12</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line">delta = later - now </span><br><span class="line"></span><br><span class="line">print(type(delta))</span><br><span class="line">print(delta.days)</span><br><span class="line">print(delta.seconds)</span><br></pre></td></tr></table></figure><br><h2 id="특정-날짜-기준으로-특정-일수-이후의-날짜"><a href="#특정-날짜-기준으로-특정-일수-이후의-날짜" class="headerlink" title="특정 날짜 기준으로 특정 일수 이후의 날짜"></a>특정 날짜 기준으로 특정 일수 이후의 날짜</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 특정 날짜 이후에 특정 일 이후 날짜 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, timedelta</span><br><span class="line"></span><br><span class="line">current_date = date.today().isoformat()</span><br><span class="line">days_after = (date.today() + timedelta(days=<span class="number">30</span>).isoformat())</span><br><span class="line"></span><br><span class="line">print(current_date)</span><br><span class="line">print(days_after)</span><br></pre></td></tr></table></figure><br><h2 id="특정-날짜-이후-특정-일수-이전-날짜"><a href="#특정-날짜-이후-특정-일수-이전-날짜" class="headerlink" title="특정 날짜 이후 특정 일수 이전 날짜"></a>특정 날짜 이후 특정 일수 이전 날짜</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, timedelta </span><br><span class="line"></span><br><span class="line">current_date = date.today().isoformat() </span><br><span class="line">days_before = (date.today() - timedelta(days=<span class="number">30</span>).isoformat())</span><br><span class="line"></span><br><span class="line">print(current_date)</span><br><span class="line">print(days_before)</span><br></pre></td></tr></table></figure><br><h2 id="간단한-날짜-계산"><a href="#간단한-날짜-계산" class="headerlink" title="간단한 날짜 계산"></a>간단한 날짜 계산</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 간단한 날짜 계산 </span></span><br><span class="line"><span class="keyword">import</span> datetime </span><br><span class="line"></span><br><span class="line">today = datetime.date.today()</span><br><span class="line">print(<span class="string">"오늘은 &#123;&#125;"</span>.format(today))</span><br><span class="line"></span><br><span class="line">yesterday = today - datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">print(<span class="string">"어제는 &#123;&#125;"</span>.format(yesterday))</span><br><span class="line"></span><br><span class="line">tomorrow = today + datetime.timedelta(days=<span class="number">1</span>)</span><br><span class="line">print(<span class="string">'내일은 &#123;&#125;'</span>.format(tomorrow))</span><br><span class="line"></span><br><span class="line">print(<span class="string">"어제와 오늘 사이의 시간 : &#123;&#125;"</span>.format(tomorrow - yesterday))</span><br></pre></td></tr></table></figure><br><h2 id="Timezone-바꾸기"><a href="#Timezone-바꾸기" class="headerlink" title="Timezone 바꾸기"></a>Timezone 바꾸기</h2><br><p>타임존을 바꾸기 위해서는, datetime 객체가 timezone 을 알아야 합니다.</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># timezone 바꾸기 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime </span><br><span class="line"><span class="keyword">from</span> dateutil <span class="keyword">import</span> tz </span><br><span class="line"></span><br><span class="line">utc = tz.tzutc() </span><br><span class="line">local = tz.tzlocal() </span><br><span class="line"></span><br><span class="line">utc_now = datetime.utcnow()</span><br><span class="line">print(utc_now)</span><br><span class="line"></span><br><span class="line">utc_now = utc_now.replace(tzinfo=utc)</span><br><span class="line">print(utc_now)</span><br><span class="line"></span><br><span class="line">local_now = utc_now.astimezone(local)</span><br><span class="line">print(local_now)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/07/Python-%EA%B8%B0%EC%B4%88-16%ED%8E%B8-Date-and-Time/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 15편 - Regular Expression (정규표현식 4)</title>
      <link>http://djangojeng-e.github.io/2020/11/06/Python-%EA%B8%B0%EC%B4%88-15%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-4/</link>
      <guid>http://djangojeng-e.github.io/2020/11/06/Python-%EA%B8%B0%EC%B4%88-15%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-4/</guid>
      <pubDate>Fri, 06 Nov 2020 11:31:24 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Regular-Expression&quot;&gt;&lt;a href=&quot;#Regular-Expression&quot; class=&quot;headerlink&quot; title=&quot;Regular Expression&quot;&gt;&lt;/a&gt;Regular Expression&lt;/h2&gt;&lt;br&gt;

&lt;h2
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><br><h2 id="findall"><a href="#findall" class="headerlink" title="findall()"></a><code>findall()</code></h2><br><blockquote><p><code>findall()</code> 함수는, 매칭되는 문자열을 포함하고 있는 리스트를 반환합니다. </p><p>리스트는 매치가 발견된 순서로 되어 있고, 매치오디는것이 없으면, 비어 있는 리스트가 반환됩니다. </p></blockquote><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># finall() 함수 </span></span><br><span class="line"><span class="comment"># 문자열안에 "portugal" 이라는 문자가 있는지 확인 합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line">x = re.findall(<span class="string">"Portugal"</span>, txt)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">"Spain"</span>, txt)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br><h2 id="search"><a href="#search" class="headerlink" title="search()"></a><code>search()</code></h2><br><blockquote><p><code>search()</code> 함수는, </p><p>매칭되는 문자열들을 찾고, 매칭이되면 매칭 객체를 반환합니다 </p><p>매칭되는게 여러개 있을경우, 첫번째 매칭되는것만 반환됩니다. </p></blockquote><br><p>예를들어, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search() 함수 </span></span><br><span class="line"><span class="comment"># \s 를 사용하여, 문자열 안에 공백을 찾습니다. </span></span><br><span class="line"><span class="comment"># search() 는 match object 를 반환합니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line">x = re.search(<span class="string">"\s"</span>, txt)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"첫번째 공백이 자리하고 있는 위치는.."</span>,  x.start())</span><br></pre></td></tr></table></figure><br><p>매칭되는게 없으면, None 이 반환됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># search() 매칭되는게 없으면, None 을 반환합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line">x = re.search(<span class="string">"Portugal"</span>, txt)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br><h2 id="split"><a href="#split" class="headerlink" title="split()"></a><code>split()</code></h2><br><blockquote><p><code>split()</code> 함수는, </p><p>매칭이 될때마다 분리된 문자열을 리스트에 담아서 반환합니다. </p></blockquote><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split()</span></span><br><span class="line"><span class="comment"># 문자열은 각 공백마다 분리되어 리스트에 담아줍니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line">x = re.split(<span class="string">"\s"</span>, txt)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br><p><code>maxsplit</code> 파라미터를 사용하여, 몇번이나 일어날지 지정할수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># split() 파라미터 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line">x = re.split(<span class="string">"\s"</span>, txt, <span class="number">1</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = re.split(<span class="string">"\s"</span>, txt, <span class="number">2</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = re.split(<span class="string">"\s"</span>, txt, <span class="number">3</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br><h2 id="split-1"><a href="#split-1" class="headerlink" title="split()"></a><code>split()</code></h2><br><blockquote><p><code>sub()</code> 함수는, 매칭되는것을 선택된 문자로 바꾸어 줍니다 </p></blockquote><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sub() 함수 </span></span><br><span class="line"><span class="comment"># 각 빈공간을, 숫자 "9" 으로 바꾸어 줍니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line">x = re.sub(<span class="string">"\s"</span>, <span class="string">"9"</span>, txt)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br><p>count 파라미터를 사용하여, 몇개를 교체할지에 대해 제어할수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line">x = re.sub(<span class="string">"\s"</span>, <span class="string">"9"</span>, txt, <span class="number">1</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = re.sub(<span class="string">"\s"</span>, <span class="string">"9"</span>, txt, <span class="number">2</span>)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x = re.sub(<span class="string">"\s"</span>, <span class="string">"9"</span>, txt, <span class="number">3</span>)</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/06/Python-%EA%B8%B0%EC%B4%88-15%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 14편 - Regular Expression (정규표현식 3)</title>
      <link>http://djangojeng-e.github.io/2020/11/05/Python-%EA%B8%B0%EC%B4%88-14%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-3/</link>
      <guid>http://djangojeng-e.github.io/2020/11/05/Python-%EA%B8%B0%EC%B4%88-14%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-3/</guid>
      <pubDate>Thu, 05 Nov 2020 07:42:37 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Regular-Expression&quot;&gt;&lt;a href=&quot;#Regular-Expression&quot; class=&quot;headerlink&quot; title=&quot;Regular Expression&quot;&gt;&lt;/a&gt;Regular Expression&lt;/h2&gt;&lt;br&gt;



&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><br><h3 id="Sets"><a href="#Sets" class="headerlink" title="Sets"></a>Sets</h3><br><blockquote><p>set 은 <code>[]</code> 안의 문자의 집합으로, 특별한 의미를 가지고 있습니다. </p></blockquote><br><table><thead><tr><th><strong>Set</strong></th><th><strong>비고</strong></th></tr></thead><tbody><tr><td>[arn]</td><td>a,r,n 중 하나가 문자열안에 있으면, 매치를 리턴 합니다</td></tr><tr><td>[a-n]</td><td>소문자 a 부터 n 까지 있는 글자들이 매치되면, 매치를 리턴합니다</td></tr><tr><td>[^arn]</td><td>a, r, n 을 제외한 문자들의 매치를 리턴합니다</td></tr><tr><td>[0123]</td><td>지정된 숫자 0, 1, 2, 3 이 있으면, 매치를 리턴합니다</td></tr><tr><td>[0-9]</td><td>0 부터 9 사이의 아무 숫자와 매치가 되면, 매치를 리턴합니다</td></tr><tr><td>[0-5][0-9]</td><td>두자리 숫자 00 부터 59 까지의 숫자와 매치되면, 매치를 리턴합니다</td></tr><tr><td>[a-zA-z]</td><td>소문자 a 부터 z 까지 혹은 대문자 A 부터 Z 까지의 알파벳과 매치를 리턴합니다</td></tr><tr><td>[+]</td><td>[] 안에서, +, *, ., |, (), $, {} 는 특별한 의미가 없습니다.</td></tr></tbody></table><br><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># [arn] 은 a, r 혹은 n 문자가 문자열에 있는지 확인합니다 </span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line">x = re.findall(<span class="string">"[arn]"</span>, txt)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [a-z] a 부터 z 까지에 있는 문자가 문자열에 있는지 확인 합니다 </span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line">x = re.findall(<span class="string">"[a-z]"</span>, txt)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [^arn] a, r 혹은 n 을 제외한 문자들이 문자열 안에 있는지 확인 합니다 </span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line">x = re.findall(<span class="string">"[^arn]"</span>, txt)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0123] 지정된 숫자 0, 1, 2, 3 이 문자열에 있는지 확인 합니다 </span></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line">x = re.findall(<span class="string">"[0123]"</span>, txt)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [0-9] 문자열이 아무 숫자라도 가지고 있는지 확인 합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"8 times before 11:45 AM"</span></span><br><span class="line">x = re.findall(<span class="string">"[0-9]"</span>, txt)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [a-zA-Z] 문자열이 소문자 a 부터 z 까지의 소문자와 A 부터 Z 까지의 대문자를 가지고 있는지 확인 합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"8 times before 11.45AM"</span></span><br><span class="line">x = re.findall(<span class="string">"[a-zA-Z]"</span>, txt)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열이 [+], + 문자를 가지고 있는지 확인 합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line"></span><br><span class="line">txt = <span class="string">"8 times before 11.45AM +"</span></span><br><span class="line">x = re.findall(<span class="string">"[+]"</span>, txt)</span><br><span class="line"></span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/05/Python-%EA%B8%B0%EC%B4%88-14%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 13편 - Regular Expression (정규표현식 2)</title>
      <link>http://djangojeng-e.github.io/2020/11/04/Python-%EA%B8%B0%EC%B4%88-13%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-2/</link>
      <guid>http://djangojeng-e.github.io/2020/11/04/Python-%EA%B8%B0%EC%B4%88-13%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-2/</guid>
      <pubDate>Wed, 04 Nov 2020 11:20:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Regular-Expression&quot;&gt;&lt;a href=&quot;#Regular-Expression&quot; class=&quot;headerlink&quot; title=&quot;Regular Expression&quot;&gt;&lt;/a&gt;Regular Expression&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;정규표현식은, 긴 텍스트에서 검색할 문자열 혹은 패턴을 나타내는 기호 및 문자입니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;정규표현식에 지정된 문자열들이 검색할 문자열에서 매치가 되는지 확인이 가능합니다.&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;이전 포스팅에서, re 모듈은 &lt;code&gt;findall&lt;/code&gt;, &lt;code&gt;search&lt;/code&gt;, &lt;code&gt;split&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt; 같은 함수들을 가지고 있다는것을 알았고, 몇가지 특정 의미를 가진 문자들 metacharacter  에 대해서 알아보았습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;*&lt;em&gt;지난 포스팅에 이어서,  special sequences 특정 순서에 대해서 알아봅니다. *&lt;/em&gt;&lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;Special sequence 는 \ 뒤에 문자 하나를 붙여서 지정합니다. &lt;/p&gt;
&lt;p&gt;아래 테이블로 정리 해봅니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;



&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;문자&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;비고&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;예시&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;\A&lt;/td&gt;
&lt;td&gt;지정된 문자가, 문자열의 앞에 오면 매치를 반환 합니다.&lt;/td&gt;
&lt;td&gt;“\AThe”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;지정된 문자가, 문자열의 단어의 앞부분 혹은 뒷부분에 있으면, 매치를 반환합니다&lt;/td&gt;
&lt;td&gt;r”\bain”r”ain\b”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\B&lt;/td&gt;
&lt;td&gt;지정된 문자가 문자열안에 있지만, 단어의 앞부분 혹은 뒷부분에 없을 경우에 매치를 반환합니다.&lt;/td&gt;
&lt;td&gt;r”\Bain”r”\ain\B”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;문자열이 숫자를 포함하면 (0-9) 를 가지고 있으면, 매치를 반환합니다&lt;/td&gt;
&lt;td&gt;“\d”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;문자열이 숫자를 포함하지 않으면, 매치를 반환&lt;/td&gt;
&lt;td&gt;“\D”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;문자열이 빈공간을 가지고 있으면, 매치를 반환&lt;/td&gt;
&lt;td&gt;“\s”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;td&gt;문자열이 빈공간을 가지고 있지 않으면, 매치를 반환&lt;/td&gt;
&lt;td&gt;“\S”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;문자열이 아무 문자 (a - Z, 0-9, _)나 가지고 있을경우, 매치를 반환&lt;/td&gt;
&lt;td&gt;“\w”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;문자열이, 아무 문자(a-Z, 0-9, _)를 가지고 있지 않을 경우, 매치를 반환&lt;/td&gt;
&lt;td&gt;“\W”&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\Z&lt;/td&gt;
&lt;td&gt;문자열의 끝에 지정된 문자가 있으면 매치를 리턴&lt;/td&gt;
&lt;td&gt;“Spain\Z”&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;hr&gt;
&lt;br&gt;



&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><br><p>정규표현식은, 긴 텍스트에서 검색할 문자열 혹은 패턴을 나타내는 기호 및 문자입니다. </p><p><br>정규표현식에 지정된 문자열들이 검색할 문자열에서 매치가 되는지 확인이 가능합니다.<br><br></p><p>이전 포스팅에서, re 모듈은 <code>findall</code>, <code>search</code>, <code>split</code>, <code>sub</code> 같은 함수들을 가지고 있다는것을 알았고, 몇가지 특정 의미를 가진 문자들 metacharacter  에 대해서 알아보았습니다. </p><br><p>*<em>지난 포스팅에 이어서,  special sequences 특정 순서에 대해서 알아봅니다. *</em></p><br><blockquote><p>Special sequence 는 \ 뒤에 문자 하나를 붙여서 지정합니다. </p><p>아래 테이블로 정리 해봅니다. </p></blockquote><br><table><thead><tr><th><strong>문자</strong></th><th><strong>비고</strong></th><th><strong>예시</strong></th></tr></thead><tbody><tr><td>\A</td><td>지정된 문자가, 문자열의 앞에 오면 매치를 반환 합니다.</td><td>“\AThe”</td></tr><tr><td>\b</td><td>지정된 문자가, 문자열의 단어의 앞부분 혹은 뒷부분에 있으면, 매치를 반환합니다</td><td>r”\bain”r”ain\b”</td></tr><tr><td>\B</td><td>지정된 문자가 문자열안에 있지만, 단어의 앞부분 혹은 뒷부분에 없을 경우에 매치를 반환합니다.</td><td>r”\Bain”r”\ain\B”</td></tr><tr><td>\d</td><td>문자열이 숫자를 포함하면 (0-9) 를 가지고 있으면, 매치를 반환합니다</td><td>“\d”</td></tr><tr><td>\D</td><td>문자열이 숫자를 포함하지 않으면, 매치를 반환</td><td>“\D”</td></tr><tr><td>\s</td><td>문자열이 빈공간을 가지고 있으면, 매치를 반환</td><td>“\s”</td></tr><tr><td>\S</td><td>문자열이 빈공간을 가지고 있지 않으면, 매치를 반환</td><td>“\S”</td></tr><tr><td>\w</td><td>문자열이 아무 문자 (a - Z, 0-9, _)나 가지고 있을경우, 매치를 반환</td><td>“\w”</td></tr><tr><td>\W</td><td>문자열이, 아무 문자(a-Z, 0-9, _)를 가지고 있지 않을 경우, 매치를 반환</td><td>“\W”</td></tr><tr><td>\Z</td><td>문자열의 끝에 지정된 문자가 있으면 매치를 리턴</td><td>“Spain\Z”</td></tr></tbody></table><hr><br><br><a id="more"></a><br><h2 id="예시"><a href="#예시" class="headerlink" title="예시"></a>예시</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># \A 지정된 문자가 문자열의 앞에 오면, 매치를 반환합니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열이 "The" 라는 문자열로 시작하는지 확인 </span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">"\AThe"</span>, txt)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \b 지정된 문자가, 단어의 시작에 있는지 확인 합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">r"\bain"</span>, txt)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \b 지정된 문자가, 단어의 끝에 있는지 확인 합니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt =<span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">r"ain\b"</span>, txt)</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \B 지정된 문자 "ain" 이 존재하지만, 단어의 앞에 오지 않는경우를 체크 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">r"\Bain"</span>, txt)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \B 지정된 문자 "ain"이 존재하지만, 단어의 끝에 오지 않는것을 확인합니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">r"ain\B"</span>, txt)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \d 문자열이 숫자를 가지고 있는지 확인 합니다 (0-9) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">"\d"</span>, txt)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \D 숫자가 아닌 모든 문자의 매치들을 리턴합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">"\D"</span>, txt)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \s 각 빈공간들의 매치들을 리턴합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">"\s"</span>, txt)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \S 빈공간이 아닌 모든 문자들에 대한 모든 매치를 리턴합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">"\S"</span>, txt)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \w 모든 문자 (a - Z, 0-9, _) 가 존재하는 지 확인하고, 모든 매치들을 반환합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">"\w"</span>, txt)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \W 모든 문자 (a - Z, 0-9, _) 가 아닌것이 존재하는 지 확인하고, 모든 매치들을 반환합니다</span></span><br><span class="line"><span class="comment"># 아래 예시는 빈공간이 (a-Z, 0-9 혹은 _) 가 아닌것입니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">"\W"</span>, txt)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \Z 문자열이 "Spain" 으로 끝나는지 확인 합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re </span><br><span class="line">txt = <span class="string">"The rain in Spain"</span></span><br><span class="line"></span><br><span class="line">x = re.findall(<span class="string">"Spain\Z"</span>, txt)</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> x:</span><br><span class="line">    print(<span class="string">"매치가 있습니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"매치가 없습니다"</span>)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/04/Python-%EA%B8%B0%EC%B4%88-13%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 12편 - Regular Expression (정규표현식 1)</title>
      <link>http://djangojeng-e.github.io/2020/11/03/Python-%EA%B8%B0%EC%B4%88-12%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-1/</link>
      <guid>http://djangojeng-e.github.io/2020/11/03/Python-%EA%B8%B0%EC%B4%88-12%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-1/</guid>
      <pubDate>Tue, 03 Nov 2020 08:30:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Regular-Expression&quot;&gt;&lt;a href=&quot;#Regular-Expression&quot; class=&quot;headerlink&quot; title=&quot;Regular Expression&quot;&gt;&lt;/a&gt;Regular Expression&lt;/h2&gt;&lt;br&gt;



&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Regular-Expression"><a href="#Regular-Expression" class="headerlink" title="Regular Expression"></a>Regular Expression</h2><br><blockquote><p><strong>정규표현식이란?</strong> </p><p>특정 문자열이 주어진 표현식과 매치가 되는지 확인해 줍니다. </p><p>특정 텍스트에서 검색할 문자열 혹은 패턴을 나타내는 기호 및 문자 입니다. </p></blockquote><br><p>정규 표현식을 사용하면, 정규 표현식에 쓰여진 문자나 패턴이 검색할 문자열 안에 있는지 없는지 확인 할수 있습니다.  </p><br><h2 id="re-내장-모듈"><a href="#re-내장-모듈" class="headerlink" title="re 내장 모듈"></a>re 내장 모듈</h2><br><p>정규 표현식을 사용하기 위해서는,  re 라는 내장 모듈을 불러와주고, 사용해주면 됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><br><p><strong>re 모듈의 함수들을 정리하면 아래와 같습니다.</strong></p><br><table><thead><tr><th><strong>함수</strong></th><th><strong>동작 함수동작</strong></th></tr></thead><tbody><tr><td>re.findall</td><td>지정된 문자열과 매칭되는 부분을 리스트로 반환합니다</td></tr><tr><td>re.search</td><td>문자열 안에 매치가 있으면, 메치 객체를 반환합니다</td></tr><tr><td>re.split</td><td>각 매치에서 일치할때마다 분열된 문자열 리스트를 반환합니다</td></tr><tr><td>re.sub</td><td>문자열과 매치되는 하나 혹은 여러개의 것들을 교체 합니다</td></tr></tbody></table><br><p>정규 표현식은 아무리 여러번 봐도, 쉽게 머리에 들어오지 않고. 매번 까먹기만 하기 때문에. </p><p><br>특별히 더더더욱이 많은 공부를 해야하는것 같습니다. W3School 예시를 따라하면서 정리합니다. </p><br><h3 id="Metacharacters-특수문자"><a href="#Metacharacters-특수문자" class="headerlink" title="Metacharacters (특수문자)"></a>Metacharacters (특수문자)</h3><br><table><thead><tr><th><strong>문자</strong></th><th><strong>비고</strong></th><th><strong>예시</strong></th></tr></thead><tbody><tr><td>[]</td><td>문자의 집합</td><td>“[a-m]”</td></tr><tr><td>\</td><td>특정 순서를 표시</td><td>“\d”</td></tr><tr><td>.</td><td>새줄의 문자를 제외한, 아무 문자</td><td>‘he..o”</td></tr><tr><td>^</td><td>으로 시작</td><td>“^hello”</td></tr><tr><td>$</td><td>으로 끝</td><td>“world$”</td></tr><tr><td>*</td><td>0번 혹은 그 이상 발생</td><td>“aix*”</td></tr><tr><td>+</td><td>1번 혹은 그 이상 발생</td><td>“aix+”</td></tr><tr><td>{}</td><td>지정된 숫자만큼 발생</td><td>“al{2}”</td></tr><tr><td>|</td><td>양쪽 혹은</td><td>“falls|stays”</td></tr></tbody></table><hr><br><p>정규표현식은 매우 중요한 토픽으로, 다음 포스팅부터 예시를 좀 찾아보면서 정리해 보려 합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/03/Python-%EA%B8%B0%EC%B4%88-12%ED%8E%B8-Regular-Expression-%EC%A0%95%EA%B7%9C%ED%91%9C%ED%98%84%EC%8B%9D-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 11편 - break, continue문</title>
      <link>http://djangojeng-e.github.io/2020/11/02/Python-%EA%B8%B0%EC%B4%88-11%ED%8E%B8-break-continue%EB%AC%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/11/02/Python-%EA%B8%B0%EC%B4%88-11%ED%8E%B8-break-continue%EB%AC%B8/</guid>
      <pubDate>Sun, 01 Nov 2020 23:29:45 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Python-기초-break-continue&quot;&gt;&lt;a href=&quot;#Python-기초-break-continue&quot; class=&quot;headerlink&quot; title=&quot;Python 기초 - break, continue&quot;&gt;&lt;/a&gt;Python 기초 -
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-기초-break-continue"><a href="#Python-기초-break-continue" class="headerlink" title="Python 기초 - break, continue"></a>Python 기초 - break, continue</h2><br><p><strong>break 문</strong></p><br><p>break 문은 for 혹은 while 반복문을 빠져나가기 위해 사용됩니다. </p><p><br>break 문의 목적은, 반복문의 실행을 바로 멈추고, 프로그램의 흐름이 반복문 이후로 넘어가게 하는것입니다. </p><br><blockquote><p>for 반복문 혹은 while 반복문 안에서, </p><p>break 코드를 만나면, 해당 반복문은 바로 종료가 됩니다. </p></blockquote><br><h3 id="for-반복문에서-break-의-예시"><a href="#for-반복문에서-break-의-예시" class="headerlink" title="for 반복문에서 break 의 예시"></a>for 반복문에서 break 의 예시</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for loop 안의 break 문 </span></span><br><span class="line">numbers = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</span><br><span class="line">num_sum = <span class="number">0</span> </span><br><span class="line">count = <span class="number">0</span> </span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> numbers:</span><br><span class="line">    num_sum = num_sum + x </span><br><span class="line">    count = count + <span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line">        </span><br><span class="line">print(<span class="string">'처음 &#123;&#125;번째 숫자의 합계는, &#123;&#125; 입니다.'</span>.format(count, num_sum))</span><br></pre></td></tr></table></figure><br><h3 id="while-반복문에서-break-의-예시"><a href="#while-반복문에서-break-의-예시" class="headerlink" title="while 반복문에서 break 의 예시"></a>while 반복문에서 break 의 예시</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># while loop 안의 break 문 </span></span><br><span class="line">num_sum = <span class="number">0</span> </span><br><span class="line">count = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span>(count &lt; <span class="number">10</span>):</span><br><span class="line">num_sum = num_sum + count </span><br><span class="line">    count = count + <span class="number">1</span> </span><br><span class="line">    <span class="keyword">if</span> count == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">break</span> </span><br><span class="line">print(<span class="string">'처음 &#123;&#125; 번째 숫자의 합계는 &#123;&#125; 입니다'</span>.format(count, num_sum))</span><br></pre></td></tr></table></figure><br><h3 id="continue-문"><a href="#continue-문" class="headerlink" title="continue 문"></a>continue 문</h3><br><p>continue 문은 while 혹은 for 반복문 안에서, 남아있는 구문들을 실행시키지 않고. 반복문의 위로 올라가게 해줍니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># continue 문 </span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">7</span>):</span><br><span class="line">    <span class="keyword">if</span> (x==<span class="number">3</span> <span class="keyword">or</span> x==<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">continue</span> </span><br><span class="line">        <span class="comment"># x 가 3 혹은 6이면, continue 문 밑에 있는 print(x) 를 실행시키지 않고, </span></span><br><span class="line">        <span class="comment"># 넘어가게 된다. </span></span><br><span class="line">    print(x)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/02/Python-%EA%B8%B0%EC%B4%88-11%ED%8E%B8-break-continue%EB%AC%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 10편 - While 반복문</title>
      <link>http://djangojeng-e.github.io/2020/11/01/Python-%EA%B8%B0%EC%B4%88-10%ED%8E%B8-While-%EB%B0%98%EB%B3%B5%EB%AC%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/11/01/Python-%EA%B8%B0%EC%B4%88-10%ED%8E%B8-While-%EB%B0%98%EB%B3%B5%EB%AC%B8/</guid>
      <pubDate>Sun, 01 Nov 2020 02:07:26 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Python-기초-while문&quot;&gt;&lt;a href=&quot;#Python-기초-while문&quot; class=&quot;headerlink&quot; title=&quot;Python 기초 - while문&quot;&gt;&lt;/a&gt;Python 기초 - while문&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-기초-while문"><a href="#Python-기초-while문" class="headerlink" title="Python 기초 - while문"></a>Python 기초 - while문</h2><br><h3 id="While-반복문"><a href="#While-반복문" class="headerlink" title="While 반복문"></a>While 반복문</h3><br><p>반복문들은 반복적으로 프로그램 구문의 코드 블럭들을 실행 시키기 위해 사용됩니다. </p><p><br>파이썬에서 기본 반복문 구조는 while 반복문 입니다. </p><br><p>아래는 while 문의 문법 구조 입니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (expression):</span><br><span class="line">    statement_1 </span><br><span class="line">    statement_2</span><br></pre></td></tr></table></figure><br><blockquote><p>위 while 문의 기본 문법에서 보다시피, </p><p>while 문은, while(expression): 부분에 expression 이 True 가 되는동안, </p><p>statement_1 과 statement_2 를 실행 합니다. </p><br><p>expression 부분이 false 가 되지 않는한, 반복문은 코드 실행을 멈추지 않습니다!</p><p>이렇게 실행을 멈추지 않는 반복을 무한 루프라고 부릅니다. </p></blockquote><br><p>expression 안에 있는 조건은, 각 반복이 시작될때마다 확인이 되고, 이 조건이 False 가 되면, while 반복이 끝나고, 더이상 코드가 실행되지 않습니다. </p><br><p>아래 예시는, x 가 &lt; 5 인 동안에, x 를 출력합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># x 가 5 보다 작을동안 </span></span><br><span class="line"><span class="comment"># x 를 출력 </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (x &lt; <span class="number">5</span>):</span><br><span class="line">    print(x)</span><br><span class="line">    x = x + <span class="number">1</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래는 아무것도 실행 되지 않습니다. </span></span><br><span class="line"><span class="comment"># 반복문이 시작될때부터, 조건이 False 가 됩니다 </span></span><br><span class="line"><span class="comment"># 10 은 5보다 크지 않습니다. </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span> </span><br><span class="line"><span class="keyword">while</span>(x &lt; <span class="number">5</span>):</span><br><span class="line">    print(x)</span><br><span class="line">    x = x + <span class="number">1</span></span><br></pre></td></tr></table></figure><br><h3 id="while-과-else-문"><a href="#while-과-else-문" class="headerlink" title="while 과 else 문"></a>while 과 else 문</h3><br><p>while 과 if 문 사이에는 구조적으로 비슷한점이 존재합니다. </p><p><br>둘다 조건이 true 일때 실행되는 코드 블럭들을 가지고 있고, 차이점이라고 하면, if 문에서는 코드 블럭이 한번만  실행되지만, while 문에 있는 코드 블럭은 반복적으로 실행된다는 차이점이 존재합니다. </p><br><p>문법은 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (expression):</span><br><span class="line">    statement_1</span><br><span class="line">    statement_2</span><br><span class="line">    ....</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_3</span><br><span class="line">    statement_4</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><br><p>while 반복문은 반복적으로 조건을 테스트 하고, 조건이 True 이면, 첫번째 코드 블럭을 조건이 true 인 동안에 반복적으로 실행 시킵니다. </p><br><blockquote><p>else 밑에 있는 코드블럭들은, </p><p>조건이 False 가 될때에만 실행됩니다. </p></blockquote><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># while... else </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">0</span> </span><br><span class="line">s = <span class="number">0</span> </span><br><span class="line"><span class="keyword">while</span> (x &lt; <span class="number">10</span>):</span><br><span class="line">    s = s + x </span><br><span class="line">    x = x + <span class="number">1</span> </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"첫번째 9숫자의 합은 : "</span>, s)</span><br></pre></td></tr></table></figure><br><h4 id="if-else-break-와-사용되는-while-반복문의-예시"><a href="#if-else-break-와-사용되는-while-반복문의-예시" class="headerlink" title="if-else, break 와 사용되는 while 반복문의 예시"></a>if-else, break 와 사용되는 while 반복문의 예시</h4><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if-else 그리고 break 문을 사용한 while 반복문 </span></span><br><span class="line">x = <span class="number">1</span></span><br><span class="line">s = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> (x &lt; <span class="number">10</span>):</span><br><span class="line">    s = s + x</span><br><span class="line">    x = x + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">5</span>):</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'첫번째 9숫자의 합은 : '</span>, s)</span><br><span class="line">print(<span class="string">' 첫번째 '</span>, x, <span class="string">'의 합은 : '</span>, s)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 여기서는 else 가 실행되지 않습니다 </span></span><br><span class="line"><span class="comment"># while 반복문이, x 값이 5가 될때 종료되었기 때문에, </span></span><br><span class="line"><span class="comment"># while 문에 붙어 있는 else 밑의 코드는 실행되지 않고, while 문을 빠져나갑니다. </span></span><br><span class="line"><span class="comment"># 따라서, while 문 밖에 있는 print 함수가 실행됩니다.</span></span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/01/Python-%EA%B8%B0%EC%B4%88-10%ED%8E%B8-While-%EB%B0%98%EB%B3%B5%EB%AC%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 9편 - for 반복문</title>
      <link>http://djangojeng-e.github.io/2020/10/31/Python-%EA%B8%B0%EC%B4%88-9%ED%8E%B8-for-%EB%B0%98%EB%B3%B5%EB%AC%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/10/31/Python-%EA%B8%B0%EC%B4%88-9%ED%8E%B8-for-%EB%B0%98%EB%B3%B5%EB%AC%B8/</guid>
      <pubDate>Sat, 31 Oct 2020 07:16:51 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;For-반복문&quot;&gt;&lt;a href=&quot;#For-반복문&quot; class=&quot;headerlink&quot; title=&quot;For 반복문&quot;&gt;&lt;/a&gt;For 반복문&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;대부분의 다른 프로그래밍 언어들과 비슷하게, 파이썬도 for 반복문을 가지고 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;하지만, C 혹은, Pascal 같은 언어들과는 조금 차이점이 존재합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬에서 for 반복문은, 리스트, 문자열, 튜플 등과 같이 순서가 있는 자료들의 요소들을 순회할때 사용됩니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;또한, for 반복문은 range() 내장 함수를 사용하여, 다른 컨테이너로부터 요소들을 접근하기 위해 사용되기도 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;기본 구조는 아래와 같습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; 변수명 &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; sequence형자료: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statement1 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    statement2 &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;Parameter &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Name&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;Description&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;변수명&lt;/td&gt;
&lt;td&gt;for 반복문을 순회할때마다, 새로운값을 가지는 변수명을 가르킵니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sequence&lt;/td&gt;
&lt;td&gt;리스트, 문자열, 튜플 등과 같이 순서가 있는 자료형&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;statement1 statement2&lt;/td&gt;
&lt;td&gt;순회중 각 요소마다, 실행할 코드 블럭들&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;

&lt;h2 id=&quot;Example&quot;&gt;&lt;a href=&quot;#Example&quot; class=&quot;headerlink&quot; title=&quot;Example&quot;&gt;&lt;/a&gt;Example&lt;/h2&gt;&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# for 반복문 예시 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;color_list = [&lt;span class=&quot;string&quot;&gt;&#39;Red&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Blue&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Green&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;Black&#39;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; c &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; color_list:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(c)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;위의 예시에서 color_list 는 sequence 형 (즉, 순서가 존재하는, 순회 가능한) 자료로, 몇가지 색깔 이름을 가지고 있는 리스트 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;for 반복문이 실행되면, 아래와 같은 작업을 실행합니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;첫번째 요소인 ‘Red’ 가 변수명 c 에 할당이 됩니다. 그리고, print(c) 를 실행 하여, ‘Red’를 출력합니다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;두번째 요소인 ‘Blue’가 변수명 c 에 할당이 됩니다. 그리고 print(c) 를 실행 하여, ‘Blue’ 를 출력합니다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;세번째 요소인 ‘Green’이 변수명 c 에 할당이 됩니다. 그리고 print(c) 를 실행하여, ‘Green’을 출력합니다. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;네번째 요소인 ‘Black’’이 변수명 c에 할당이 됩니다. 그리고 print(c)를 실행하여, ‘Black’을 출력합니다.  &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;h2 id=&quot;for-반복문과-range-함수&quot;&gt;&lt;a href=&quot;#for-반복문과-range-함수&quot; class=&quot;headerlink&quot; title=&quot;for 반복문과 range() 함수&quot;&gt;&lt;/a&gt;for 반복문과 range() 함수&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;range()&lt;/code&gt; 함수는 연속적인 정수들의 리스트를 반환합니다. &lt;code&gt;range()&lt;/code&gt; 함수는, 한개, 두개 혹은 3개의 파라미터를 가지고 있고. 이중 마지막 파라미터 2개는 옵션입니다. for loop 에 꽤나 보편적으로 사용되는 함수 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;예를들면, &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# range(4) 는 0 부터 4 이전의 숫자로 된 리스트를 반환합니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 따라서, 아래 코드는 for a in [0, 1, 2, 3]: 과 같은 효과를 가집니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; [&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;]:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# range 의 시작지점과 끝 지점을 정할수 있습니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;range의 시작지점과 끝 지점을 정할수 있습니다&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 아래 range 는, 2 부터 시작하고, 7의 바로 이전 숫자인 6에서 끝납니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;7&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;파라미터의 마지막값을 지정합니다&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 기본값으로, 시작지점부터 끝지점까지 1씩 증가하는 요소들을 리스트에 넣어 리스트를 반환하지만, &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 파라미터의 마지막값을 지정하여, 지정한 숫자만큼 증가하는 요소들을 리스트에 넣어 생성할수 있습니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; a &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; range(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;19&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;):&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    print(a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;tuple-list-dictionary-순회&quot;&gt;&lt;a href=&quot;#tuple-list-dictionary-순회&quot; class=&quot;headerlink&quot; title=&quot;tuple, list, dictionary 순회&quot;&gt;&lt;/a&gt;tuple, list, dictionary 순회&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;for 반복문은 sequence 가 존재하는 자료인, tuple, list, dictionary 들을 순회하여 반복작업을 수행 할수 있습니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="For-반복문"><a href="#For-반복문" class="headerlink" title="For 반복문"></a>For 반복문</h2><br><p>대부분의 다른 프로그래밍 언어들과 비슷하게, 파이썬도 for 반복문을 가지고 있습니다. </p><br><p>하지만, C 혹은, Pascal 같은 언어들과는 조금 차이점이 존재합니다. </p><br><p>파이썬에서 for 반복문은, 리스트, 문자열, 튜플 등과 같이 순서가 있는 자료들의 요소들을 순회할때 사용됩니다. </p><p><br>또한, for 반복문은 range() 내장 함수를 사용하여, 다른 컨테이너로부터 요소들을 접근하기 위해 사용되기도 합니다. </p><br><p>기본 구조는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> 변수명 <span class="keyword">in</span> sequence형자료: </span><br><span class="line">    statement1 </span><br><span class="line">    statement2 </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><br><p>Parameter </p><br><table><thead><tr><th><strong>Name</strong></th><th><strong>Description</strong></th></tr></thead><tbody><tr><td>변수명</td><td>for 반복문을 순회할때마다, 새로운값을 가지는 변수명을 가르킵니다</td></tr><tr><td>sequence</td><td>리스트, 문자열, 튜플 등과 같이 순서가 있는 자료형</td></tr><tr><td>statement1 statement2</td><td>순회중 각 요소마다, 실행할 코드 블럭들</td></tr></tbody></table><br><h2 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h2><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 반복문 예시 </span></span><br><span class="line">color_list = [<span class="string">'Red'</span>, <span class="string">'Blue'</span>, <span class="string">'Green'</span>, <span class="string">'Black'</span>]</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> color_list:</span><br><span class="line">    print(c)</span><br></pre></td></tr></table></figure><br><p>위의 예시에서 color_list 는 sequence 형 (즉, 순서가 존재하는, 순회 가능한) 자료로, 몇가지 색깔 이름을 가지고 있는 리스트 입니다. </p><br><blockquote><p>for 반복문이 실행되면, 아래와 같은 작업을 실행합니다 </p></blockquote><br><ol><li><p>첫번째 요소인 ‘Red’ 가 변수명 c 에 할당이 됩니다. 그리고, print(c) 를 실행 하여, ‘Red’를 출력합니다. </p></li><li><p>두번째 요소인 ‘Blue’가 변수명 c 에 할당이 됩니다. 그리고 print(c) 를 실행 하여, ‘Blue’ 를 출력합니다. </p></li><li><p>세번째 요소인 ‘Green’이 변수명 c 에 할당이 됩니다. 그리고 print(c) 를 실행하여, ‘Green’을 출력합니다. </p></li><li><p>네번째 요소인 ‘Black’’이 변수명 c에 할당이 됩니다. 그리고 print(c)를 실행하여, ‘Black’을 출력합니다.  </p></li></ol><br><h2 id="for-반복문과-range-함수"><a href="#for-반복문과-range-함수" class="headerlink" title="for 반복문과 range() 함수"></a>for 반복문과 range() 함수</h2><br><p><code>range()</code> 함수는 연속적인 정수들의 리스트를 반환합니다. <code>range()</code> 함수는, 한개, 두개 혹은 3개의 파라미터를 가지고 있고. 이중 마지막 파라미터 2개는 옵션입니다. for loop 에 꽤나 보편적으로 사용되는 함수 입니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># range(4) 는 0 부터 4 이전의 숫자로 된 리스트를 반환합니다. </span></span><br><span class="line"><span class="comment"># 따라서, 아래 코드는 for a in [0, 1, 2, 3]: 과 같은 효과를 가집니다. </span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">    print(a)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]:</span><br><span class="line">    print(a)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="comment"># range 의 시작지점과 끝 지점을 정할수 있습니다 </span></span><br><span class="line">print(<span class="string">"range의 시작지점과 끝 지점을 정할수 있습니다"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래 range 는, 2 부터 시작하고, 7의 바로 이전 숫자인 6에서 끝납니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">7</span>):</span><br><span class="line">    print(a)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"파라미터의 마지막값을 지정합니다"</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 기본값으로, 시작지점부터 끝지점까지 1씩 증가하는 요소들을 리스트에 넣어 리스트를 반환하지만, </span></span><br><span class="line"><span class="comment"># 파라미터의 마지막값을 지정하여, 지정한 숫자만큼 증가하는 요소들을 리스트에 넣어 생성할수 있습니다. </span></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> range(<span class="number">2</span>, <span class="number">19</span>, <span class="number">5</span>):</span><br><span class="line">    print(a)</span><br></pre></td></tr></table></figure><br><br><h2 id="tuple-list-dictionary-순회"><a href="#tuple-list-dictionary-순회" class="headerlink" title="tuple, list, dictionary 순회"></a>tuple, list, dictionary 순회</h2><br><p>for 반복문은 sequence 가 존재하는 자료인, tuple, list, dictionary 들을 순회하여 반복작업을 수행 할수 있습니다. </p><br><a id="more"></a><h3 id="튜플-순회하기"><a href="#튜플-순회하기" class="headerlink" title="튜플 순회하기"></a>튜플 순회하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 반복문을 사용하여 tuple 순회하기 </span></span><br><span class="line"><span class="comment"># numbers 튜플을 생성 </span></span><br><span class="line">numbers = (<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>) </span><br><span class="line">count_odd = <span class="number">0</span> </span><br><span class="line">count_even = <span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> numbers:</span><br><span class="line">    <span class="keyword">if</span> x % <span class="number">2</span>:</span><br><span class="line">        count_odd += <span class="number">1</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        count_even += <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">print(<span class="string">"짝수의 갯수 :"</span>, count_even)</span><br><span class="line">print(<span class="string">"홀수의 갯수 :"</span>, count_odd)</span><br></pre></td></tr></table></figure><br><p>위의 예시에서, numbers 튜플을 순회하며, 각 요소들을 x 라는 변수에 할당을 하고. </p><p><br>각 순회마다, x 가 짝수인지 홀수인지 구분하여, 짝수의 갯수와 홀수의 갯수를 세어 냅니다. </p><br><h3 id="리스트를-순회하기"><a href="#리스트를-순회하기" class="headerlink" title="리스트를 순회하기"></a>리스트를 순회하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 반복문을 사용하여 list 순회하기 </span></span><br><span class="line"><span class="comment"># datalist 리스트를 생성 </span></span><br><span class="line"><span class="comment"># 다른 타입들을 가지고 있는 요소를 가진 리스트를 순회하며, print 를 할수 있습니다. </span></span><br><span class="line"></span><br><span class="line">datalist = [<span class="number">1452</span>, <span class="number">11.23</span>, <span class="number">1</span>+<span class="number">2j</span>, <span class="literal">True</span>, <span class="string">'django'</span>, (<span class="number">0</span>, <span class="number">-1</span>), [<span class="number">5</span>, <span class="number">12</span>],</span><br><span class="line">&#123;<span class="string">"class"</span>: <span class="string">'V'</span>, <span class="string">"section"</span>: <span class="string">'A'</span>&#125;] </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> datalist:</span><br><span class="line">    print(item, <span class="string">"의 타입은"</span>, type(item), <span class="string">"입니다"</span>)</span><br><span class="line"></span><br><span class="line">-----------------------------------------------------------------------------</span><br><span class="line"><span class="number">1452</span> 의 타입은 &lt;<span class="class"><span class="keyword">class</span> '<span class="title">int</span>'&gt; 입니다</span></span><br><span class="line"><span class="class">11.23 의 타입은 &lt;<span class="title">class</span> '<span class="title">float</span>'&gt; 입니다</span></span><br><span class="line"><span class="class"><span class="params">(<span class="number">1</span>+<span class="number">2j</span>)</span> 의 타입은 &lt;<span class="title">class</span> '<span class="title">complex</span>'&gt; 입니다</span></span><br><span class="line"><span class="class"><span class="title">True</span> 의 타입은 &lt;<span class="title">class</span> '<span class="title">bool</span>'&gt; 입니다</span></span><br><span class="line"><span class="class"><span class="title">django</span> 의 타입은 &lt;<span class="title">class</span> '<span class="title">str</span>'&gt; 입니다</span></span><br><span class="line"><span class="class"><span class="params">(<span class="number">0</span>, <span class="number">-1</span>)</span> 의 타입은 &lt;<span class="title">class</span> '<span class="title">tuple</span>'&gt; 입니다</span></span><br><span class="line">[5, 12] 의 타입은 &lt;class 'list'&gt; 입니다</span><br><span class="line">&#123;<span class="string">'class'</span>: <span class="string">'V'</span>, <span class="string">'section'</span>: <span class="string">'A'</span>&#125; 의 타입은 &lt;<span class="class"><span class="keyword">class</span> '<span class="title">dict</span>'&gt; 입니다</span></span><br></pre></td></tr></table></figure><br><h3 id="사전-순회하기"><a href="#사전-순회하기" class="headerlink" title="사전 순회하기"></a>사전 순회하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># for 반복문을 사용하여, dictionary 순회하기 </span></span><br><span class="line"><span class="comment"># key 와 value 로 이루어진 사전을 생성 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">color = &#123;<span class="string">"c1"</span>: <span class="string">"Red"</span>, <span class="string">"c2"</span>: <span class="string">"Green"</span>, <span class="string">"c3"</span>: <span class="string">"Orange"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> color:</span><br><span class="line">    print(key)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"color.keys() 를 사용하여 key 값만 순회 "</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># key 값만 순회 </span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> color.keys():</span><br><span class="line">    print(key)</span><br><span class="line">    </span><br><span class="line">print(<span class="string">"color.values() 를 사용하여 value 값만 순회"</span>)</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> color.values():</span><br><span class="line">    print(value)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/31/Python-%EA%B8%B0%EC%B4%88-9%ED%8E%B8-for-%EB%B0%98%EB%B3%B5%EB%AC%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 8편 - if elif else</title>
      <link>http://djangojeng-e.github.io/2020/10/30/Python-%EA%B8%B0%EC%B4%88-8%ED%8E%B8-if-elif-else/</link>
      <guid>http://djangojeng-e.github.io/2020/10/30/Python-%EA%B8%B0%EC%B4%88-8%ED%8E%B8-if-elif-else/</guid>
      <pubDate>Thu, 29 Oct 2020 23:46:58 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-기초-if-elif-else&quot;&gt;&lt;a href=&quot;#Python-기초-if-elif-else&quot; class=&quot;headerlink&quot; title=&quot;Python 기초 - if, elif, else&quot;&gt;&lt;/a&gt;Python 기초 - if, elif, else&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;if&lt;/code&gt;, &lt;code&gt;elif&lt;/code&gt;, &lt;code&gt;else&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;if, elif, else 문은 조건적으로 구문 혹은 코드블럭을 실행 시킬때 사용됩니다. &lt;/p&gt;
&lt;p&gt;조건들은, True 혹은 False 가 될수 있고, 해당 조건이 True 일때 하나의 코드 블럭을 실행 시킵니다. &lt;/p&gt;
&lt;p&gt;조건이 False 라면, 코드 블럭을 실행 시키지 않거나, 다른 코드들을 실행 시킬수 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-기초-if-elif-else"><a href="#Python-기초-if-elif-else" class="headerlink" title="Python 기초 - if, elif, else"></a>Python 기초 - if, elif, else</h2><br><blockquote><p><code>if</code>, <code>elif</code>, <code>else</code></p><p>if, elif, else 문은 조건적으로 구문 혹은 코드블럭을 실행 시킬때 사용됩니다. </p><p>조건들은, True 혹은 False 가 될수 있고, 해당 조건이 True 일때 하나의 코드 블럭을 실행 시킵니다. </p><p>조건이 False 라면, 코드 블럭을 실행 시키지 않거나, 다른 코드들을 실행 시킬수 있습니다. </p></blockquote><br><a id="more"></a><h2 id="if-문"><a href="#if-문" class="headerlink" title="if 문"></a>if 문</h2><br><p>파이썬에서 if 문은 다른 프로그래밍 언어에서 존재하는 if 와 같습니다. </p><p><br>if 는 논리적 수식의 값을 바탕으로 하는 조건에 따라서, 구문의 조각들을 실행 시킵니다. 논리적 연산을 통해 나오는 조건의 값은 보통 True 혹은 False 이고, 이 값에 따라서, 코드 블럭을 실행 시킵니다. </p><br><p>if 문의 일반 형태는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    statement_1 </span><br><span class="line">    statement_2 </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><br><p>위의 예시에서, expression 은 조건을 지정하는 수식으로, 불리언식을 기반으로 합니다. </p><p><br>불리언식이 평가되고, true 혹은 fasle 값을 만들어 낼때, 수식이 true 인경우 들여쓰기된 모든 구문들이 실행 됩니다. 이 구문을 블럭이라고 부릅니다. </p><br><h2 id="if-else-문"><a href="#if-else-문" class="headerlink" title="if ..else 문"></a>if ..else 문</h2><br><p>파이썬에서 if.. else 문은, 두개의 블럭들을 가지고 있습니다. </p><p><br>하나는 if 문 을 따르고, 하나는 else 문 을 따릅니다. 아래 문법 구조를 참조합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> expression:</span><br><span class="line">    statement_1</span><br><span class="line">    statement_2 </span><br><span class="line">    ... </span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    statement_3</span><br><span class="line">    statement_4</span><br></pre></td></tr></table></figure><br><p>위의 상황에서, 만약 expression 이 True 로 평가되면, if 문 안에 있는 코드 블럭들이 실행되고. </p><p><br>expression 이 false 로 평가되면, else 문 안에 있는 코드 블럭들이 실행됩니다. </p><br><p>아래 예시를 참조해 봅시다. 프로그램은 ‘값은 10 입니다’ 라는 두번째 문장을 실행 시킵니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">10</span> </span><br><span class="line"><span class="keyword">if</span>(a &gt; <span class="number">10</span>):</span><br><span class="line">    print(<span class="string">'값은 10보다 큽니다'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'값은 10입니다'</span>)</span><br></pre></td></tr></table></figure><br><h2 id="if-elif-else-문"><a href="#if-elif-else-문" class="headerlink" title="if elif ..else 문"></a>if elif ..else 문</h2><br><p>때때로, 조건이 몇가지 있는 상황들이 발생합니다. 이런 상황을 다루기 위해서, 파이썬에서는 elif 문을 if 문과 else 문 사이에 추가하여, 조건을 추가하는것을 허용합니다. </p><br><p>아래 예시를 들어봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="number">1</span> + <span class="number">2j</span> </span><br><span class="line"><span class="keyword">if</span> (type(b) == int):</span><br><span class="line">    print(<span class="string">"b 는 정수 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == float):</span><br><span class="line">    print(<span class="string">"b 는 실수 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == complex):</span><br><span class="line">    print(<span class="string">"b 는 복소수 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == bool):</span><br><span class="line">    print(<span class="string">"b 는 불리언 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == str):</span><br><span class="line">    print(<span class="string">"b 는 문자열 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == tuple):</span><br><span class="line">    print(<span class="string">"b 는 튜플 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == dict):</span><br><span class="line">    print(<span class="string">"b 는 사전 입니다"</span>)</span><br><span class="line"><span class="keyword">elif</span> (type(b) == list):</span><br><span class="line">    print(<span class="string">"b 는 리스트 입니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"b 의 타입은 모르는 타입입니다"</span>)</span><br></pre></td></tr></table></figure><br><p>복소수인 b 라는, 복소수가 다른 데이터 형태 인지 아닌지에 대한 조건에 따라서, 문자열을 출력합니다. elif 를 통해서 많은 조건들을 추가하였습니다. </p><br><h2 id="if-else-문의-중첩"><a href="#if-else-문의-중첩" class="headerlink" title="if ..else 문의 중첩"></a>if ..else 문의 중첩</h2><br><p>보통의 경우, if-else 문의 중첩은 우리가 하나 이상의 조건을 확인하고 싶을때 사용됩니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">35</span></span><br><span class="line"><span class="keyword">if</span> (age &gt;= <span class="number">11</span>):</span><br><span class="line">    print(<span class="string">"놀이기구에 탈수 있는 나이 입니다"</span>)</span><br><span class="line">    <span class="keyword">if</span> (age &lt;= <span class="number">20</span> <span class="keyword">or</span> age &gt;= <span class="number">60</span>):</span><br><span class="line">        print(<span class="string">"청소년과 노약자의 사용료는 12,000원 입니다"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"일반 사용료는 18,000원 입니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"11세 미만인 나이이므로, 놀이기구 사용을 할수 없습니다"</span>)</span><br></pre></td></tr></table></figure><br><p>테스트해볼 조건 안에, 또다시 테스트해볼 조건이 있는것으로. 위 예시에서는, 나이가 11세 이상인 조건을 전제로, 조건을 하나 더 추가하였습니다. </p><br><p>20세 이하 혹은 60세 이상 청소년 혹은 노약자에는 사용료를 받습니다. </p><br><p>그 외의 나이대에 속하는 사용자는, 18000 원으로 일반 가격을 지불해야 합니다. </p><br><p>11세가 되지 않는다면, 11세 미만이므로, 놀이기구를 사용할수 없다는 메시지가 출력됩니다. </p><br><h2 id="if-else-문의-사용"><a href="#if-else-문의-사용" class="headerlink" title="if ..else 문의 사용"></a>if ..else 문의 사용</h2><br><h3 id="if-문-안에-연산자-사용하기"><a href="#if-문-안에-연산자-사용하기" class="headerlink" title="if 문 안에 연산자 사용하기"></a>if 문 안에 연산자 사용하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if 문 안에 and 연산자 사용하기 </span></span><br><span class="line">x = <span class="literal">False</span> </span><br><span class="line">y = <span class="literal">True</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># x 와 y 둘다 True 일때, x and y 는 True 로 평가됩니다. </span></span><br><span class="line"><span class="keyword">if</span> (x <span class="keyword">and</span> y):</span><br><span class="line">    print(<span class="string">'x 와 y 둘다 True 입니다'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'x 는 False 혹은 y 가 False 입니다. 그렇지 않다면 x 와 y 둘다 False 입니다'</span>)</span><br></pre></td></tr></table></figure><br><h3 id="in-연산자를-if-문에-사용하기"><a href="#in-연산자를-if-문에-사용하기" class="headerlink" title="in 연산자를 if 문에 사용하기"></a>in 연산자를 if 문에 사용하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># in 연산자를 if 문에 사용하기 </span></span><br><span class="line"><span class="comment"># 문자열 생성 </span></span><br><span class="line">s = <span class="string">'Django'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 리스트 생성 </span></span><br><span class="line">frameworks = [<span class="string">'Django'</span>, <span class="string">'Flask'</span>, <span class="string">'Tornado'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># s 가 frameworks 안에 있는지 in 연산자를 사용하여 확인할수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s <span class="keyword">in</span> frameworks:</span><br><span class="line">    print(s + <span class="string">' Framework'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 혹은, if 문을 or 연산자를 사용하여 사용할수도 있습니다. </span></span><br><span class="line"><span class="keyword">if</span> s == <span class="string">'Django'</span> <span class="keyword">or</span> s == <span class="string">'Flask'</span> <span class="keyword">or</span> s == <span class="string">'Tornado'</span>:</span><br><span class="line">    print(s + <span class="string">' Framework'</span>)</span><br></pre></td></tr></table></figure><br><h3 id="if-else-를-한줄로-작성하기"><a href="#if-else-를-한줄로-작성하기" class="headerlink" title="if-else 를 한줄로 작성하기"></a>if-else 를 한줄로 작성하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># if-else 를 한줄로 작성하기 </span></span><br><span class="line"><span class="comment"># 정수를 하나 생성하기 </span></span><br><span class="line">n = <span class="number">150</span> </span><br><span class="line">print(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># n 이 500 보다 크면, n 은 7로 곱해집니다 </span></span><br><span class="line"><span class="comment"># 그렇지 않다면, 7 로 나누어집니다. </span></span><br><span class="line">result = n * <span class="number">7</span> <span class="keyword">if</span> n &gt; <span class="number">500</span> <span class="keyword">else</span> n / <span class="number">7</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><br><h3 id="not-연산자를-사용한-if-문"><a href="#not-연산자를-사용한-if-문" class="headerlink" title="not 연산자를 사용한 if 문"></a>not 연산자를 사용한 if 문</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># not 을 사용하여 논리 값을 반대로 바꿀수 있습니다. </span></span><br><span class="line"><span class="comment"># 정수를 하나 생성하기 </span></span><br><span class="line">x = <span class="number">20</span> </span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># not 연산자는, 조건값을 반대로 만듭니다 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> x == <span class="number">50</span>:   <span class="comment"># x == 50 은 False 를 만들지만, 앞에 not 이 붙어 있기 때문에, if 는 True 가 됩니다 </span></span><br><span class="line">    print(<span class="string">"값은 50과 다릅니다"</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">"x의 값은 50과 같습니다"</span>)</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/30/Python-%EA%B8%B0%EC%B4%88-8%ED%8E%B8-if-elif-else/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 7편 - Operators (연산자)</title>
      <link>http://djangojeng-e.github.io/2020/10/29/Python-%EA%B8%B0%EC%B4%88-7%ED%8E%B8-Operators-%EC%97%B0%EC%82%B0%EC%9E%90/</link>
      <guid>http://djangojeng-e.github.io/2020/10/29/Python-%EA%B8%B0%EC%B4%88-7%ED%8E%B8-Operators-%EC%97%B0%EC%82%B0%EC%9E%90/</guid>
      <pubDate>Thu, 29 Oct 2020 02:57:26 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-기초-연산자-Operators&quot;&gt;&lt;a href=&quot;#Python-기초-연산자-Operators&quot; class=&quot;headerlink&quot; title=&quot;Python 기초 - 연산자 (Operators)&quot;&gt;&lt;/a&gt;Python 기초 - 연산자 (Operators)&lt;/h2&gt;&lt;br&gt;



&lt;br&gt;

&lt;h3 id=&quot;Operators-and-Opernands-연산자와-피연산자&quot;&gt;&lt;a href=&quot;#Operators-and-Opernands-연산자와-피연산자&quot; class=&quot;headerlink&quot; title=&quot;Operators and Opernands (연산자와 피연산자)&quot;&gt;&lt;/a&gt;Operators and Opernands (연산자와 피연산자)&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;컴퓨터 프로그래밍 언어에서 연산자 (operators) 들은 특별한 기호들로, 계산 조건 매칭 등을 표현합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;연산자 (operators) 들이 사용하는 값들은 피연산자 (opernands)  라고 불리웁니다. &lt;/p&gt;
&lt;br&gt;



&lt;blockquote&gt;
&lt;p&gt;c = a + b 에서, &lt;/p&gt;
&lt;p&gt;연산자는 +, 피 연산자들은 a 와 b 입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;파이썬은 아래 연산자들을 지원합니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;연산자명&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;연산&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Operators commands&lt;/td&gt;
&lt;td&gt;연산자 명령&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Arithmetic Operators&lt;/td&gt;
&lt;td&gt;산수 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Comparison Operators&lt;/td&gt;
&lt;td&gt;비교 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Logical Operators&lt;/td&gt;
&lt;td&gt;논리 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Assignment Operators&lt;/td&gt;
&lt;td&gt;할당 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Bitwise Operators&lt;/td&gt;
&lt;td&gt;비트 단위 연산자&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-기초-연산자-Operators"><a href="#Python-기초-연산자-Operators" class="headerlink" title="Python 기초 - 연산자 (Operators)"></a>Python 기초 - 연산자 (Operators)</h2><br><br><h3 id="Operators-and-Opernands-연산자와-피연산자"><a href="#Operators-and-Opernands-연산자와-피연산자" class="headerlink" title="Operators and Opernands (연산자와 피연산자)"></a>Operators and Opernands (연산자와 피연산자)</h3><br><p>컴퓨터 프로그래밍 언어에서 연산자 (operators) 들은 특별한 기호들로, 계산 조건 매칭 등을 표현합니다. </p><p><br>연산자 (operators) 들이 사용하는 값들은 피연산자 (opernands)  라고 불리웁니다. </p><br><blockquote><p>c = a + b 에서, </p><p>연산자는 +, 피 연산자들은 a 와 b 입니다. </p></blockquote><br><p>파이썬은 아래 연산자들을 지원합니다. </p><br><table><thead><tr><th><strong>연산자명</strong></th><th><strong>연산</strong></th></tr></thead><tbody><tr><td>Operators commands</td><td>연산자 명령</td></tr><tr><td>Arithmetic Operators</td><td>산수 연산자</td></tr><tr><td>Comparison Operators</td><td>비교 연산자</td></tr><tr><td>Logical Operators</td><td>논리 연산자</td></tr><tr><td>Assignment Operators</td><td>할당 연산자</td></tr><tr><td>Bitwise Operators</td><td>비트 단위 연산자</td></tr></tbody></table><br><a id="more"></a><h2 id="Operator-Commands"><a href="#Operator-Commands" class="headerlink" title="Operator : Commands"></a>Operator : Commands</h2><br><p>연산자의 기능들을 제공하는 함수들의 모듈입니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Operator: commands </span></span><br><span class="line"><span class="comment"># Operator 명령어들 예시는 아래와 같습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> add, sub, mul, truediv, floordiv, mod</span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> eq, ne, lt, gt, ge </span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> and_, or_, not_ </span><br><span class="line"><span class="keyword">from</span> operator <span class="keyword">import</span> itemgetter, attrgetter, methodcaller</span><br><span class="line"><span class="keyword">import</span> operator <span class="keyword">as</span> op</span><br></pre></td></tr></table></figure><br><h2 id="Arithmetic-Operators-산수-연산자"><a href="#Arithmetic-Operators-산수-연산자" class="headerlink" title="Arithmetic Operators (산수 연산자)"></a>Arithmetic Operators (산수 연산자)</h2><br><table><thead><tr><th><strong>연산자</strong></th><th><strong>이름</strong></th><th><strong>예시</strong></th><th><strong>결과</strong></th></tr></thead><tbody><tr><td>+</td><td>더하기</td><td>x + y</td><td>x 와 y 의 합계</td></tr><tr><td>-</td><td>빼기</td><td>x - y</td><td>x 와 y 의 차이</td></tr><tr><td>*</td><td>곱하기</td><td>x * y</td><td>x 와 y 의 곱셈</td></tr><tr><td>/</td><td>나누기</td><td>x / y</td><td>x 와 y 의 나눗셈의 몫</td></tr><tr><td>%</td><td>나머지 구하기</td><td>x % y</td><td>x 를 y 로 나누고 남은 나머지의 값</td></tr><tr><td>**</td><td>지수연산</td><td>x ** y</td><td>x 의 y 승</td></tr><tr><td>//</td><td>몫 구하기</td><td>x // y</td><td>x 를 y 로 나누어 나온 몫의 소숫점을 제외한 값</td></tr></tbody></table><br><p>산술 연산자의 예시를 들어보면, 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Arithmetic Operators </span></span><br><span class="line"><span class="comment"># 산술 연산자 </span></span><br><span class="line">x = <span class="number">14</span> </span><br><span class="line">y = <span class="number">5</span> </span><br><span class="line"></span><br><span class="line">print(x + y)   <span class="comment"># 합계 </span></span><br><span class="line">print(x - y)   <span class="comment"># 뺄셈 </span></span><br><span class="line">print(x * y)   <span class="comment"># 곱셈 </span></span><br><span class="line">print(x / y)   <span class="comment"># 나누기 </span></span><br><span class="line">print(x % y)   <span class="comment"># 나누기 이후에 나머지 값 </span></span><br><span class="line">print(x ** y)  <span class="comment"># x의 y 승 </span></span><br><span class="line">print(x // y)  <span class="comment"># 나누어서 나온 몫의 소숫점을 제외한 부분</span></span><br></pre></td></tr></table></figure><br><h2 id="Comparison-Operators-비교-연산자"><a href="#Comparison-Operators-비교-연산자" class="headerlink" title="Comparison Operators (비교 연산자)"></a>Comparison Operators (비교 연산자)</h2><br><table><thead><tr><th><strong>연산자</strong></th><th><strong>이름</strong></th><th><strong>예시</strong></th><th><strong>결과</strong></th></tr></thead><tbody><tr><td>==</td><td>Equal</td><td>x == y</td><td>x 가 정확히 y 와 같을때 True</td></tr><tr><td>!=</td><td>Not Equal</td><td>x != y</td><td>x 가 y 와 같지 않을때 True</td></tr><tr><td>&gt;</td><td>Greater than</td><td>x &gt; y</td><td>x 가 y 보다 큰 값일때 True</td></tr><tr><td>&lt;</td><td>Less than</td><td>x &lt; y</td><td>x 가 y 보다 작은값일때 True</td></tr><tr><td>&gt;=</td><td>Greater than or equal to</td><td>x &gt;= y</td><td>x 가 y 보다 크거나 같을때 True</td></tr><tr><td>&lt;=</td><td>Less than or equal to</td><td>x &lt;= y</td><td>x 가 y 보다 작거나 같을때 True</td></tr></tbody></table><br><p>예시를 들면, 아래와 같습니다. 연산의 결과값이 나오게 될겁니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comparison Operators </span></span><br><span class="line"><span class="comment"># 비교 연산자 </span></span><br><span class="line">x = <span class="number">12</span> </span><br><span class="line">y = <span class="number">18</span> </span><br><span class="line"></span><br><span class="line">print(x == y)</span><br><span class="line">print(x != y)</span><br><span class="line">print(x &gt; y)</span><br><span class="line">print(x &lt; y)</span><br><span class="line">print(x &gt;= y)</span><br><span class="line">print(x &lt;= y)</span><br></pre></td></tr></table></figure><br><h2 id="Logical-Operators-논리-연산자"><a href="#Logical-Operators-논리-연산자" class="headerlink" title="Logical Operators (논리 연산자)"></a>Logical Operators (논리 연산자)</h2><br><table><thead><tr><th><strong>연산자</strong></th><th><strong>예시</strong></th><th><strong>결과</strong></th></tr></thead><tbody><tr><td>and</td><td>(x and y)</td><td>x 와 y 둘다 True 이면, True</td></tr><tr><td>or</td><td>(x or y)</td><td>x 와 y 둘중에 하나가 True 이면, True</td></tr><tr><td>not</td><td>(x not y)</td><td>만약 조건이 True 라면, not 연산자는 False 로 만듭니다.</td></tr></tbody></table><br><p>예를들면, 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Logical Operators </span></span><br><span class="line">x = <span class="number">12</span> </span><br><span class="line">y = <span class="number">18</span> </span><br><span class="line"></span><br><span class="line">print(x &gt; <span class="number">10</span> <span class="keyword">and</span> y &gt; <span class="number">10</span>)</span><br><span class="line">print(x &gt; <span class="number">14</span> <span class="keyword">or</span> y &gt; <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y 둘다 10보다 커서, 조건은 충족되어 True 여야 하나, not 이 붙어서 False 를 반환합니다. </span></span><br><span class="line"></span><br><span class="line">print(<span class="keyword">not</span>(x &gt; <span class="number">10</span> <span class="keyword">and</span> y &gt; <span class="number">10</span>))</span><br></pre></td></tr></table></figure><br><h2 id="Assignment-Operators-할당-연산자"><a href="#Assignment-Operators-할당-연산자" class="headerlink" title="Assignment Operators (할당 연산자)"></a>Assignment Operators (할당 연산자)</h2><br><table><thead><tr><th><strong>연산자</strong></th><th><strong>줄임</strong></th><th><strong>표현식</strong></th><th><strong>비고</strong></th></tr></thead><tbody><tr><td>+=</td><td>x += y</td><td>x = x + y</td><td>x 와 y 두값을 더하고, 더한값을 왼쪽의 x 에 할당</td></tr><tr><td>-=</td><td>x -= y</td><td>x = x - y</td><td>x 와 y 두값을 빼고, 뺀값을 왼쪽의 x 에 할당</td></tr><tr><td>*=</td><td>x *= y</td><td>x = x * y</td><td>x 와 y 두값을 곱하고, 곱한값을 왼쪽의 x 에 할당</td></tr><tr><td>/=</td><td>x /= y</td><td>x = x / y</td><td>x 를 y 로 나누고, 나눈값을, 왼쪽의 x 에 할당</td></tr><tr><td>%=</td><td>x %= y</td><td>x = x % y</td><td>x 를 y 로 나눈 나머지값을, 왼쪽의 x 에 할당</td></tr><tr><td>**=</td><td>x **= y</td><td>x = x ** y</td><td>x 를 y 승만큼 곱한다음, 왼쪽의 x 에 할당</td></tr><tr><td>//=</td><td>x //= y</td><td>x = x // y</td><td>x 를 y 로 나눈 몫(소수점 제외)을, 왼졲에 x 에 할당</td></tr></tbody></table><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Assignment Operators </span></span><br><span class="line"><span class="comment"># 할당 연산자</span></span><br><span class="line"><span class="comment"># 할당 연산을 할때마다, x 에 새로운 값이 할당되어 집니다. </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">12</span> </span><br><span class="line">y = <span class="number">18</span> </span><br><span class="line"></span><br><span class="line">x += y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x -= y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x *= y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x /= y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x %= y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x **= y</span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">x //= y</span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br><h2 id="Bitwise-Operators-비트-연산자"><a href="#Bitwise-Operators-비트-연산자" class="headerlink" title="Bitwise Operators (비트 연산자)"></a>Bitwise Operators (비트 연산자)</h2><br><p>비트 연산은 별로 다룰일이 없기때문에, operators 만 보고 넘어갑니다. </p><br><table><thead><tr><th>연산자</th><th>줄임</th><th>표현식</th><th>비고</th></tr></thead><tbody><tr><td>&amp;</td><td>And</td><td>x &amp; y</td><td></td></tr><tr><td>|</td><td>Or</td><td>x | y</td><td></td></tr><tr><td>^</td><td>Xor</td><td>x ^ y</td><td></td></tr><tr><td>~</td><td>Not</td><td>~x</td><td></td></tr><tr><td>&lt;&lt;</td><td>Shift Left</td><td>x &lt;&lt; y</td><td></td></tr><tr><td>&gt;&gt;</td><td>Shift right</td><td>x &gt;&gt; y</td><td></td></tr></tbody></table>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/29/Python-%EA%B8%B0%EC%B4%88-7%ED%8E%B8-Operators-%EC%97%B0%EC%82%B0%EC%9E%90/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python-기초-6편-Data-Type-튜플-리스트-사전</title>
      <link>http://djangojeng-e.github.io/2020/10/28/Python-%EA%B8%B0%EC%B4%88-6%ED%8E%B8-Data-Type-%ED%8A%9C%ED%94%8C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%82%AC%EC%A0%84/</link>
      <guid>http://djangojeng-e.github.io/2020/10/28/Python-%EA%B8%B0%EC%B4%88-6%ED%8E%B8-Data-Type-%ED%8A%9C%ED%94%8C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%82%AC%EC%A0%84/</guid>
      <pubDate>Wed, 28 Oct 2020 07:29:37 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-Data-Type&quot;&gt;&lt;a href=&quot;#Python-Data-Type&quot; class=&quot;headerlink&quot; title=&quot;Python Data Type&quot;&gt;&lt;/a&gt;Python Data Type&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;데이터 타입 &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;데이터 타입은, 값의 종류를 결정하고, 어떤식으로 값이 사용될지에 대해 결정합니다. 파이썬에 모든 데이터 값들은, 연관되어 있는 객체 클래스로 캡슐화 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬 데이터 타입들은, 아래와 같은 종류들이 존재합니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;데이터 타입&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;비고&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;숫자형 (Numbers)&lt;/td&gt;
&lt;td&gt;숫자로 생성된 객체로, immutable 합니다. 3가지 수의 타입이 존재합니다. 1. 정수 (integer)2. 실수 (float)3. 복소수 (complex)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;불리언 (Boolean)&lt;/td&gt;
&lt;td&gt;파이썬에서 가장 간단한 내장 타입으로, True 와 False 를 표현합니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;문자열 (string)&lt;/td&gt;
&lt;td&gt;파이썬에서, 문자열 객체는 왼쪽에서부터 오른쪽으로 방향으로 순서가 있는 객체 입니다. 이를, sequence 라고 표현합니다. 문자열은, ‘ 혹은 “ 으로 감싸지는 데이터 입니다. 문자열은 immutable 합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;튜플 (Tuples)&lt;/td&gt;
&lt;td&gt;튜플은 () 안에 , 로 분리된 값들 입니다튜플은 immutable 하고, 여러 데이터 타입을 가지고 있을수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;리스트 (Lists)&lt;/td&gt;
&lt;td&gt;리스트는 [] 안에 , 로 분리된 값들 입니다. 아무런 원소도 가지고 있지 않은 리스트를 빈 리스트라고 부릅니다. 리스트는 mutable 합니다&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;집합 (Sets)&lt;/td&gt;
&lt;td&gt;집합은 순서가 없는 고유한 원소들의 집합입니다. 기본 사용은, 교집합, 합집합, 차집합, 합집합 같은 집합 이론을 다루거나, 혹은, 중복된 것들을 없애기 위해 사용할수 있습니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;사전 (Dictionaries)&lt;/td&gt;
&lt;td&gt;파이썬 사전은, 리스트같이 순서가 없는 객체들의 집합의 컨테이너 입니다. 객체는 {} 로 감싸져 있고. key : value 형태로, 한 쌍으로 존재합니다. 각 객체 혹은 값은, key 값으로 접근이 가능하고, key 값들은 사전안에서 고유합니다. key 가 인덱싱을 할때 사용되므로, 이 key 는 immutable 타입이여야 합니다 (문자열, 숫자 혹은 튜플).&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;하나의 값을 가지고 있는 타입으로, 내장 예약어 None 으로 접근이 가능합니다. 값이 없는것을 여러 상황에서 강조하기 위해서 사용됩니다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;

&lt;p&gt;지난 포스팅에서는, 문자열까지 알아보았고. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;이번 포스팅에서는, 튜플, 리스트, 집합, 사전, None 까지 알아봅니다 &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Data-Type"><a href="#Python-Data-Type" class="headerlink" title="Python Data Type"></a>Python Data Type</h2><br><p>데이터 타입 </p><br><p>데이터 타입은, 값의 종류를 결정하고, 어떤식으로 값이 사용될지에 대해 결정합니다. 파이썬에 모든 데이터 값들은, 연관되어 있는 객체 클래스로 캡슐화 됩니다. </p><br><p>파이썬 데이터 타입들은, 아래와 같은 종류들이 존재합니다. </p><br><table><thead><tr><th><strong>데이터 타입</strong></th><th><strong>비고</strong></th></tr></thead><tbody><tr><td>숫자형 (Numbers)</td><td>숫자로 생성된 객체로, immutable 합니다. 3가지 수의 타입이 존재합니다. 1. 정수 (integer)2. 실수 (float)3. 복소수 (complex)</td></tr><tr><td>불리언 (Boolean)</td><td>파이썬에서 가장 간단한 내장 타입으로, True 와 False 를 표현합니다.</td></tr><tr><td>문자열 (string)</td><td>파이썬에서, 문자열 객체는 왼쪽에서부터 오른쪽으로 방향으로 순서가 있는 객체 입니다. 이를, sequence 라고 표현합니다. 문자열은, ‘ 혹은 “ 으로 감싸지는 데이터 입니다. 문자열은 immutable 합니다</td></tr><tr><td>튜플 (Tuples)</td><td>튜플은 () 안에 , 로 분리된 값들 입니다튜플은 immutable 하고, 여러 데이터 타입을 가지고 있을수 있습니다.</td></tr><tr><td>리스트 (Lists)</td><td>리스트는 [] 안에 , 로 분리된 값들 입니다. 아무런 원소도 가지고 있지 않은 리스트를 빈 리스트라고 부릅니다. 리스트는 mutable 합니다</td></tr><tr><td>집합 (Sets)</td><td>집합은 순서가 없는 고유한 원소들의 집합입니다. 기본 사용은, 교집합, 합집합, 차집합, 합집합 같은 집합 이론을 다루거나, 혹은, 중복된 것들을 없애기 위해 사용할수 있습니다.</td></tr><tr><td>사전 (Dictionaries)</td><td>파이썬 사전은, 리스트같이 순서가 없는 객체들의 집합의 컨테이너 입니다. 객체는 {} 로 감싸져 있고. key : value 형태로, 한 쌍으로 존재합니다. 각 객체 혹은 값은, key 값으로 접근이 가능하고, key 값들은 사전안에서 고유합니다. key 가 인덱싱을 할때 사용되므로, 이 key 는 immutable 타입이여야 합니다 (문자열, 숫자 혹은 튜플).</td></tr><tr><td>None</td><td>하나의 값을 가지고 있는 타입으로, 내장 예약어 None 으로 접근이 가능합니다. 값이 없는것을 여러 상황에서 강조하기 위해서 사용됩니다.</td></tr></tbody></table><br><p>지난 포스팅에서는, 문자열까지 알아보았고. </p><p><br>이번 포스팅에서는, 튜플, 리스트, 집합, 사전, None 까지 알아봅니다 </p><br><a id="more"></a><br><h2 id="Tuples-튜플"><a href="#Tuples-튜플" class="headerlink" title="Tuples (튜플)"></a>Tuples (튜플)</h2><br><p>튜플은,  <code>,</code> 로 분리된 값 (항목 혹은 요소)를 <code>()</code> 안에 가지고 있는 자료형 입니다.</p><p>튜플은 immutable 합니다. (한번 생성되면, 그 안의 값을 바꿀수가 없습니다.)<br> 그리고, 튜플은, 여러 데이터 타입을 가질수 있습니다. </p><br><h3 id="튜플-생성하기"><a href="#튜플-생성하기" class="headerlink" title="튜플 생성하기"></a>튜플 생성하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 튜플 생성하기 </span></span><br><span class="line"><span class="comment"># 정수, 실수, 문자열을 가진 튜플을 생성 </span></span><br><span class="line"><span class="comment"># () 안에 데이터를 , 로 분리하고 변수에 할당하면 생성됩니다. </span></span><br><span class="line"></span><br><span class="line">tup = (<span class="number">0</span>, <span class="number">-1</span>, <span class="number">12</span>, <span class="number">2123.44</span>, <span class="number">100</span>, <span class="string">'Django'</span>)</span><br><span class="line">print(tup)</span><br><span class="line">print(type(tup))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열 3개, 숫자 1개로 이루어진 튜플 생성 </span></span><br><span class="line"></span><br><span class="line">tup2 = (<span class="string">'python'</span>, <span class="string">'Django'</span>, <span class="number">200</span>, <span class="string">'GoLang'</span>)</span><br><span class="line">print(tup2)</span><br><span class="line">print(type(tup2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># () 를 사용하지 않고 생성하는 방법 </span></span><br><span class="line">tup3 = <span class="string">"Django"</span>, <span class="string">"Python"</span>, <span class="string">"JavaScript"</span></span><br><span class="line">print(tup3)</span><br><span class="line">print(type(tup3))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 비어있는 튜플을 생성하기 </span></span><br><span class="line">empty_tup = () </span><br><span class="line">print(empty_tup)</span><br><span class="line">print(type(empty_tup))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1개의 데이터만 가진 튜플 생성하기 </span></span><br><span class="line">single_tup = (<span class="number">100</span>)</span><br><span class="line">print(single_tup)</span><br><span class="line">print(type(single_tup))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 값이 한개일때, 요소의 끝에 , 를 붙여줘야 1개의 값을 가진 튜플이 생성됩니다. </span></span><br><span class="line">single_tup = (<span class="number">100</span>,)</span><br><span class="line">print(single_tup)</span><br><span class="line">print(type(single_tup))</span><br></pre></td></tr></table></figure><br><h3 id="튜플-인덱싱-하기"><a href="#튜플-인덱싱-하기" class="headerlink" title="튜플 인덱싱 하기"></a>튜플 인덱싱 하기</h3><br><p>문자열이랑 비슷하게도, 튜플 요소들도 인덱스를 통해 접근할수 있습니다. 예를들면, <code>tup=(&#39;d&#39;, &#39;j&#39;, &#39;a&#39;, &#39;n&#39;, &#39;g&#39;, &#39;o&#39;)</code> 라는 튜플을 생성하였을때 생성되는 인덱스는 아래와 같습니다. </p><br><table><thead><tr><th><strong>데이터</strong></th><th>D</th><th>j</th><th>a</th><th>n</th><th>g</th><th>o</th></tr></thead><tbody><tr><td>인덱스(왼쪽)</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>인덱스(오른쪽)</td><td>-6</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><br><p>이러한 인덱스를 통해서, 각 요소에 접근을 해보기 위해, 아래 예시를 참조합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">tup = (<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>)</span><br><span class="line"></span><br><span class="line">print(tup[<span class="number">0</span>])</span><br><span class="line">print(tup[<span class="number">1</span>])</span><br><span class="line">print(tup[<span class="number">2</span>])</span><br><span class="line">print(tup[<span class="number">3</span>])</span><br><span class="line">print(tup[<span class="number">4</span>])</span><br><span class="line">print(tup[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line">print(tup[<span class="number">-1</span>])</span><br><span class="line">print(tup[<span class="number">-2</span>])</span><br><span class="line">print(tup[<span class="number">-3</span>])</span><br><span class="line">print(tup[<span class="number">-4</span>])</span><br><span class="line">print(tup[<span class="number">-5</span>])</span><br><span class="line">print(tup[<span class="number">-6</span>])</span><br></pre></td></tr></table></figure><br><blockquote><p>Tuple 은 immutable 합니다. </p><p>튜플 안에 항목이나 요소들의 값은 바뀌거나 수정될수 없습니다. </p></blockquote><br><p>튜플 안에 있는 값을 바꾸려고 하면, 아래와 같이 에러가 납니다.</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># tuple 은 immutable 합니다. </span></span><br><span class="line"><span class="comment"># 값을 바꿀수 없습니다. 값을 바꾸려 하면, 에러가 납니다. </span></span><br><span class="line"></span><br><span class="line">tup = (<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>)</span><br><span class="line">tup[<span class="number">1</span>] = <span class="string">'b'</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-13</span><span class="number">-253</span>c803b15bb&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">3</span> </span><br><span class="line">      <span class="number">4</span> tup = (<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>)</span><br><span class="line">----&gt; 5 tup[1] = 'b'</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'tuple'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><br><p>또한, 인덱스 범위를 넘어가는 요소를 접근하려 하면, index error 가 발생 합니다. </p><br><h3 id="튜플-슬라이싱-하기"><a href="#튜플-슬라이싱-하기" class="headerlink" title="튜플 슬라이싱 하기"></a>튜플 슬라이싱 하기</h3><br><p>문자열과 같은 시퀀스와 비슷하게, 튜플도 슬라이스가 가능합니다. </p><br><p>튜플을 슬라이싱 하면, 새로운 튜플을 생성하지만, 기존 값을 변경하지는 않습니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 튜플 슬라이싱 하기 </span></span><br><span class="line"></span><br><span class="line">tup = (<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>)</span><br><span class="line"></span><br><span class="line">print(tup[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">print(tup[<span class="number">2</span>:<span class="number">5</span>])</span><br></pre></td></tr></table></figure><br><h3 id="튜플에서-같은-연산자-사용하기"><a href="#튜플에서-같은-연산자-사용하기" class="headerlink" title="튜플에서 +, * 같은 연산자 사용하기"></a>튜플에서 <code>+</code>, <code>*</code> 같은 연산자 사용하기</h3><br><p><code>+</code> 연산자를 사용하여, 튜플들을 합친, 새로운 튜플을 생성하고, <code>*</code> 연산자를 사용하여, 하나의 튜플을 반복할수 있습니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># +, * 연산자 사용하기 </span></span><br><span class="line"></span><br><span class="line">tup = (<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>)</span><br><span class="line"></span><br><span class="line">tup1 = (<span class="string">'p'</span>, <span class="string">'y'</span>, <span class="string">'t'</span>, <span class="string">'h'</span>, <span class="string">'o'</span>, <span class="string">'n'</span>)</span><br><span class="line"></span><br><span class="line">add_tuples = tup + tup1  <span class="comment"># tup 과 tup1 을 합친 새로운 튜플을 생성합니다. </span></span><br><span class="line">print(add_tuples)</span><br><span class="line"></span><br><span class="line"><span class="comment"># tup 을 *을 사용하여 반복합니다 </span></span><br><span class="line">print(tup * <span class="number">4</span>)</span><br></pre></td></tr></table></figure><br><br><h2 id="Lists-리스트"><a href="#Lists-리스트" class="headerlink" title="Lists (리스트)"></a>Lists (리스트)</h2><br><p>리스트는, <code>,</code> 로 분리된 값을 <code>[]</code> 안에 가지고 있는 자료형 입니다. 튜플과 비슷하게, 리스트 안의 요소들은 같은 데이터 타입을 가질 필요는 없습니다. </p><br><h3 id="리스트-생성하기"><a href="#리스트-생성하기" class="headerlink" title="리스트 생성하기"></a>리스트 생성하기</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트 생성하기 </span></span><br><span class="line"><span class="comment"># , 로 분리된 값들을 [] 안에 넣어주면 생성됩니다. </span></span><br><span class="line">list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line">list2 = [<span class="string">'django'</span>, <span class="string">'python'</span>, <span class="string">'javascript'</span>, <span class="string">'GoLang'</span>]</span><br><span class="line">list3 = [<span class="number">12</span>, <span class="string">'developer'</span>, <span class="number">32.33</span>]</span><br><span class="line"></span><br><span class="line">print(list1)</span><br><span class="line">print(list2)</span><br><span class="line">print(list3)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 비어 있는 리스트를 생성</span></span><br><span class="line"><span class="comment"># [] 안에 아무 값도 넣어주지 않으면 비어있는 리스트가 생성됩니다 </span></span><br><span class="line">empty_list = []</span><br><span class="line">print(empty_list)</span><br></pre></td></tr></table></figure><br><br><h3 id="리스트-인덱싱-하기"><a href="#리스트-인덱싱-하기" class="headerlink" title="리스트 인덱싱 하기"></a>리스트 인덱싱 하기</h3><br><p>문자열과 비슷하게, 리스트도 순회 가능한, 그리고 인덱싱이 가능한 자료형입니다. 리스트 인덱스도 왼쪽에서 오른쪽으로 갈때 0으로부터 시작하고, 오른쪽에서 왼쪽으로 갈때는, -1 로 시작합니다. </p><br><p>예를들면, </p><br><p><code>list1 = [&#39;d&#39;, &#39;j&#39;, &#39;a&#39;, &#39;n&#39;, &#39;g&#39;, &#39;o&#39;]</code> 라는 리스트를 생성하였을때에 인덱스는 아래와 같습니다. </p><br><table><thead><tr><th><strong>데이터</strong></th><th>D</th><th>j</th><th>a</th><th>n</th><th>g</th><th>o</th></tr></thead><tbody><tr><td>인덱스(왼쪽)</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>인덱스(오른쪽)</td><td>-6</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트 슬라이싱 하기 </span></span><br><span class="line"></span><br><span class="line">list1 = [<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>]</span><br><span class="line">print(list1[<span class="number">0</span>])</span><br><span class="line">print(list1[<span class="number">1</span>])</span><br><span class="line">print(list1[<span class="number">2</span>])</span><br><span class="line">print(list1[<span class="number">3</span>])</span><br><span class="line">print(list1[<span class="number">4</span>])</span><br><span class="line">print(list1[<span class="number">5</span>])</span><br><span class="line">print()</span><br><span class="line">print(list1[<span class="number">-1</span>])</span><br><span class="line">print(list1[<span class="number">-2</span>])</span><br><span class="line">print(list1[<span class="number">-3</span>])</span><br><span class="line">print(list1[<span class="number">-4</span>])</span><br><span class="line">print(list1[<span class="number">-5</span>])</span><br><span class="line">print(list1[<span class="number">-6</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열이나 튜플과 비슷하게, 인덱스값을 벗어난 요소를 접근하려 하면 </span></span><br><span class="line"><span class="comment"># 에러가 발생합니다. </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(list1[<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">IndexError                                Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-22</span><span class="number">-3034</span>fc2e792a&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">----&gt; 1 print(list1[6])</span><br><span class="line"></span><br><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><br><h3 id="리스트-슬라이싱-하기"><a href="#리스트-슬라이싱-하기" class="headerlink" title="리스트 슬라이싱 하기"></a>리스트 슬라이싱 하기</h3><br><p>다른 시퀀스형 자료와 비슷하게, 리스트도 슬라이싱이 가능합니다. 튜플이나 문자열을 슬라이싱 하는 방법과 같다고 볼수 있습니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트 슬라이싱 </span></span><br><span class="line"></span><br><span class="line">list1 = [<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>]</span><br><span class="line">print(list1[<span class="number">0</span>:<span class="number">3</span>])</span><br><span class="line">print(list1[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line">print(list1[<span class="number">1</span>:<span class="number">-2</span>])</span><br></pre></td></tr></table></figure><br><blockquote><p>리스트는 튜플과 다르게,  mutable 객체 입니다! </p><p>리스트는 생성후에, 값을 변경할수 있습니다. </p></blockquote><br><h3 id="리스트의-값-바꿔보기"><a href="#리스트의-값-바꿔보기" class="headerlink" title="리스트의 값 바꿔보기"></a>리스트의 값 바꿔보기</h3><br><p>리스트의 값을 바꿔보는 예시는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 리스트는 mutable 합니다 </span></span><br><span class="line"></span><br><span class="line">list1 = [<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>]</span><br><span class="line"></span><br><span class="line">list1[<span class="number">1</span>] = <span class="string">'b'</span> <span class="comment"># 인덱스 1에 해당하는 값을 'b'로 바꿈 </span></span><br><span class="line">print(list1)</span><br><span class="line"></span><br><span class="line">list1[<span class="number">5</span>] = <span class="string">'u'</span> <span class="comment"># 인덱스 5에 해당하는 값을 'u' 로 바꿈 </span></span><br><span class="line"></span><br><span class="line">print(list1)</span><br></pre></td></tr></table></figure><br><h3 id="리스트에-와-연산자-사용하기"><a href="#리스트에-와-연산자-사용하기" class="headerlink" title="리스트에 + 와 * 연산자 사용하기"></a>리스트에 <code>+</code> 와 <code>*</code> 연산자 사용하기</h3><br><p>두개의 리스트를 합친 새로운 리스트를 생성하는 <code>+</code> 연산자와, 하나의 리스트를 여러번 반복하는 <code>*</code>를 사용할수 있습니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'d'</span>, <span class="string">'j'</span>, <span class="string">'a'</span>, <span class="string">'n'</span>, <span class="string">'g'</span>, <span class="string">'o'</span>]</span><br><span class="line">list2 = [<span class="number">12</span>, <span class="string">'developer'</span>, <span class="number">32.33</span>]</span><br><span class="line">list3 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"></span><br><span class="line">list_sum = list1 + list2 <span class="comment"># + 연산자를 사용하여, list1 과 list2 를 합친 새로운 리스트를 생성 </span></span><br><span class="line">print(list_sum)</span><br><span class="line"></span><br><span class="line"><span class="comment"># * 연산자를 사용하여, list3 을 4번 반복 </span></span><br><span class="line">print(list3 * <span class="number">4</span>)</span><br></pre></td></tr></table></figure><br><h2 id="Sets-집합"><a href="#Sets-집합" class="headerlink" title="Sets (집합)"></a>Sets (집합)</h2><br><p>집합은, 순서가 없는 고유한 요소들의 집합입니다. 기본 사용은 보통, 수학에서 이야기하는 집합 이론 (합집합, 교집합, 차집합, 합집합 같은 수학적 연산) 들을 다룰때 사용합니다.<br></p><p>혹은, 중복된 요소들을 제거할때에도 사용됩니다. </p><br><p>예시를 들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 중복된 값을 가진 리스트를 생성 </span></span><br><span class="line">a = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">5</span>]</span><br><span class="line">b = [<span class="number">5</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">s1 = set(a)  <span class="comment"># a를 집합으로 선언 </span></span><br><span class="line">s2 = set(b)  <span class="comment"># b를 집합으로 선언 </span></span><br><span class="line"></span><br><span class="line">print(s1)</span><br><span class="line">print(s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 차집합 </span></span><br><span class="line">print(s1 - s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s1 혹은 s2 에 있는 숫자들 </span></span><br><span class="line">print(s1 | s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s1 그리고 s2 에 있는 숫자들 </span></span><br><span class="line">print(s1 &amp; s2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># s1 과 s2 에 있지만, 양쪽에 없는 숫자들 </span></span><br><span class="line">print(s1 ^ s2)</span><br></pre></td></tr></table></figure><br><h2 id="Dictionaries-사전"><a href="#Dictionaries-사전" class="headerlink" title="Dictionaries (사전)"></a>Dictionaries (사전)</h2><br><p>파이썬 사전은 순서가 없는 객체들의 집합을 <code>{}</code> 안에 가지고 있는 자료형입니다. </p><p><br>특이한 점은, 사전 안에는, key:value 형태로, 값들이 한쌍으로 이루어져 있다는 점입니다. </p><br><p>이 key 값들은 고유해야 하고,사전을 인덱싱 할때에는, 이 key 값들이 사용됩니다. 간단한 사전을 만들어서 예시를 들어보면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 사전 생성하기 </span></span><br><span class="line"><span class="comment"># &#123;&#125; 안에, key:value 형태로 이루어진 자료를 , 로 구분하여 넣어주면 생성됩니다. </span></span><br><span class="line">web_framework = &#123;<span class="string">'python'</span>: <span class="string">'django'</span>, <span class="string">'Java'</span>: <span class="string">'spring'</span>, <span class="string">'JavaScript'</span>: <span class="string">'nodejs'</span>&#125;</span><br><span class="line">print(web_framework)</span><br><span class="line">print(type(web_framework))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사전의 데이터를 key 값을 사용해서 접근하기 </span></span><br><span class="line"></span><br><span class="line">print(web_framework[<span class="string">'python'</span>])</span><br><span class="line">print(web_framework[<span class="string">'Java'</span>])</span><br><span class="line">print(web_framework[<span class="string">'JavaScript'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사전에 데이터를 추가하기 </span></span><br><span class="line">web_framework[<span class="string">'php'</span>] = <span class="string">'Laravel'</span></span><br><span class="line"></span><br><span class="line">print(web_framework)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 사전에 데이터를 삭제하기 </span></span><br><span class="line"><span class="keyword">del</span> web_framework[<span class="string">'php'</span>]</span><br><span class="line"></span><br><span class="line">print(web_framework)</span><br></pre></td></tr></table></figure><br><h2 id="None"><a href="#None" class="headerlink" title="None"></a>None</h2><br><p>이 데이터 형태는 오직 하나의 값만 가지고 있습니다. </p><p><br>내장되어 있는 이름 None 을 통해서 값에 접근할수 있습니다. None 은 여러 상황에서, 값이 없다는것을 강조하기 위해 사용 됩니다. 예를들면, 아무것도 반환하지 않는 함수에서 반환 됩니다. </p><br><p>None 의 불리언 값은 False 를 가집니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># None </span></span><br><span class="line"></span><br><span class="line">print(<span class="literal">None</span>)</span><br><span class="line">print(type(<span class="literal">None</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 아무값도 반환하지 않는 함수는 None 을 반환합니다. </span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">print(fun())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># None 의 불리언값은 False 입니다. </span></span><br><span class="line">print(bool(<span class="literal">None</span>))</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/28/Python-%EA%B8%B0%EC%B4%88-6%ED%8E%B8-Data-Type-%ED%8A%9C%ED%94%8C-%EB%A6%AC%EC%8A%A4%ED%8A%B8-%EC%82%AC%EC%A0%84/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 5편 - Data Type (숫자, 문자열, 불리언)</title>
      <link>http://djangojeng-e.github.io/2020/10/27/Python-%EA%B8%B0%EC%B4%88-5%ED%8E%B8-Data-Type-%EC%88%AB%EC%9E%90-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B6%88%EB%A6%AC%EC%96%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/10/27/Python-%EA%B8%B0%EC%B4%88-5%ED%8E%B8-Data-Type-%EC%88%AB%EC%9E%90-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B6%88%EB%A6%AC%EC%96%B8/</guid>
      <pubDate>Tue, 27 Oct 2020 00:50:59 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Data-Type&quot;&gt;&lt;a href=&quot;#Data-Type&quot; class=&quot;headerlink&quot; title=&quot;Data Type&quot;&gt;&lt;/a&gt;Data Type&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;데이터 타입&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;데이터 타입은, 값의 종류와 어떤식으로 값이 사용될지에 대해 결정합니다. &lt;/p&gt;
&lt;p&gt;파이썬에 모든 데이터 값들은, 연관되어 있는 객체 클래스로 캡슐화 됩니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;파이썬에서 모든것은 객체 입니다. &lt;/p&gt;
&lt;p&gt;각 객체는 하나의 정체성을 가지고, 하나의 타입을 가지고, 하나의 값을 가집니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;c++ 나 Java 같은 다른 객체 지향 언어처럼, 파이썬에도 몇가지 데이터 타입이 내장되어 있습니다. &lt;/p&gt;
&lt;p&gt;C언어나, Java 로 작성된 확장 모듈을 사용하면, 추가 데이터 타입을 정의할수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;파이썬에서 변수의 타입을 정하기 위해서는, &lt;code&gt;type()&lt;/code&gt; 함수를 사용할수 있습니다. 객체의 값은 바뀔수도 이습니다. &lt;/p&gt;
&lt;br&gt;

&lt;h3 id=&quot;mutable-vs-immutable&quot;&gt;&lt;a href=&quot;#mutable-vs-immutable&quot; class=&quot;headerlink&quot; title=&quot;mutable vs immutable&quot;&gt;&lt;/a&gt;mutable vs immutable&lt;/h3&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;mutable (가변) 객체&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;값이 바뀔수 있는 객체들을, mutable (가변) 객체라고 부르고, &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;strong&gt;immutable (불변) 객체&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;값이 바뀔수 없는 객체들을 immutable (불가변) 객체라고 부릅니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;



&lt;br&gt;

&lt;h2 id=&quot;파이썬-데이터-종류&quot;&gt;&lt;a href=&quot;#파이썬-데이터-종류&quot; class=&quot;headerlink&quot; title=&quot;파이썬 데이터 종류&quot;&gt;&lt;/a&gt;파이썬 데이터 종류&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;파이썬에는, 아래와 같은 데이터 종류들이 존재합니다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;ol&gt;
&lt;li&gt;숫자형 (Numbers)&lt;/li&gt;
&lt;li&gt;불리언 (Boolean)&lt;/li&gt;
&lt;li&gt;문자열 (string)&lt;/li&gt;
&lt;li&gt;튜플 (Tuple)&lt;/li&gt;
&lt;li&gt;리스트 (List)&lt;/li&gt;
&lt;li&gt;집합 (Sets)&lt;/li&gt;
&lt;li&gt;사전 (Dictionary)&lt;/li&gt;
&lt;li&gt;None &lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Data-Type"><a href="#Data-Type" class="headerlink" title="Data Type"></a>Data Type</h2><br><blockquote><p><strong>데이터 타입</strong></p><p>데이터 타입은, 값의 종류와 어떤식으로 값이 사용될지에 대해 결정합니다. </p><p>파이썬에 모든 데이터 값들은, 연관되어 있는 객체 클래스로 캡슐화 됩니다. </p></blockquote><br><blockquote><p>파이썬에서 모든것은 객체 입니다. </p><p>각 객체는 하나의 정체성을 가지고, 하나의 타입을 가지고, 하나의 값을 가집니다. </p></blockquote><br><p>c++ 나 Java 같은 다른 객체 지향 언어처럼, 파이썬에도 몇가지 데이터 타입이 내장되어 있습니다. </p><p>C언어나, Java 로 작성된 확장 모듈을 사용하면, 추가 데이터 타입을 정의할수 있습니다. </p><br><p>파이썬에서 변수의 타입을 정하기 위해서는, <code>type()</code> 함수를 사용할수 있습니다. 객체의 값은 바뀔수도 이습니다. </p><br><h3 id="mutable-vs-immutable"><a href="#mutable-vs-immutable" class="headerlink" title="mutable vs immutable"></a>mutable vs immutable</h3><br><blockquote><p><strong>mutable (가변) 객체</strong></p><p>값이 바뀔수 있는 객체들을, mutable (가변) 객체라고 부르고, </p><br><p><strong>immutable (불변) 객체</strong></p><p>값이 바뀔수 없는 객체들을 immutable (불가변) 객체라고 부릅니다. </p></blockquote><br><br><h2 id="파이썬-데이터-종류"><a href="#파이썬-데이터-종류" class="headerlink" title="파이썬 데이터 종류"></a>파이썬 데이터 종류</h2><br><p>파이썬에는, 아래와 같은 데이터 종류들이 존재합니다. <br></p><br><ol><li>숫자형 (Numbers)</li><li>불리언 (Boolean)</li><li>문자열 (string)</li><li>튜플 (Tuple)</li><li>리스트 (List)</li><li>집합 (Sets)</li><li>사전 (Dictionary)</li><li>None </li></ol><br><a id="more"></a><p>﻿</p><table><thead><tr><th><strong>데이터 타입</strong></th><th><strong>비고</strong></th></tr></thead><tbody><tr><td>숫자형 (Numbers)</td><td>숫자로 생성된 객체로, immutable 합니다.3가지 수의 타입이 존재합니다.1. 정수 (integer)2. 실수 (float)3. 복소수 (complex)</td></tr><tr><td>불리언 (Boolean)</td><td>파이썬에서 가장 간단한 내장 타입으로, True 와 False 를 표현합니다.</td></tr><tr><td>문자열 (string)</td><td>파이썬에서, 문자열 객체는 왼쪽에서부터 오른쪽으로 방향으로 순서가 있는 객체 입니다. 이를, sequence 라고 표현합니다.문자열은, ‘ 혹은 “ 으로 감싸지는 데이터 입니다.문자열은 immutable 합니다</td></tr><tr><td>튜플 (Tuples)</td><td>튜플은 () 안에 , 로 분리된 값들 입니다튜플은 immutable 하고, 여러 데이터 타입을 가지고 있을수 있습니다.</td></tr><tr><td>리스트 (Lists)</td><td>리스트는 [] 안에 , 로 분리된 값들 입니다.아무런 원소도 가지고 있지 않은 리스트를 빈 리스트라고 부릅니다.리스트는 mutable 합니다</td></tr><tr><td>집합 (Sets)</td><td>집합은 순서가 없는 고유한 원소들의 집합입니다.기본 사용은, 교집합, 합집합, 차집합, 합집합 같은 집합 이론을 다루거나,혹은, 중복된 것들을 없애기 위해 사용할수 있습니다.</td></tr><tr><td>사전 (Dictionaries)</td><td>파이썬 사전은, 리스트같이 순서가 없는 객체들의 집합의 컨테이너 입니다.객체는 {} 로 감싸져 있고. key : value 형태로, 한 쌍으로 존재합니다.각 객체 혹은 값은, key 값으로 접근이 가능하고, key 값들은 사전안에서 고유합니다. key 가 인덱싱을 할때 사용되므로, 이 key 는 immutable 타입이여야 합니다 (문자열, 숫자 혹은 튜플).</td></tr><tr><td>None</td><td>하나의 값을 가지고 있는 타입으로, 내장 예약어 None 으로 접근이 가능합니다. 값이 없는것을 여러 상황에서 강조하기 위해서 사용됩니다.</td></tr></tbody></table><br><br><h2 id="Numbers-숫자"><a href="#Numbers-숫자" class="headerlink" title="Numbers (숫자)"></a>Numbers (숫자)</h2><br><p>숫자 데이터 타입은, 숫자로 생성됩니다. 숫자형 객체들은 immutable 합니다. </p><p><br>immutable 객체는 값과 함께 생성되었을때에, 값은 바뀔수 없다는것을 의미합니다. </p><br><p>파이썬에는, 3가지 다른 형태의 숫자형이 존재합니다. </p><br><ol><li>integers (정수) - 분수 부분이 존재하지 않는, 음수와 양수 입니다 </li><li>floating point (실수) - 분수 부분이 존재하는 음수와 양수로, 분수 부분은 소숫점으로 나타납니다 </li><li>complex (복소수)</li></ol><br><h3 id="정수에-대한-예시"><a href="#정수에-대한-예시" class="headerlink" title="정수에 대한 예시"></a>정수에 대한 예시</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자형, 정수, integers </span></span><br><span class="line">a = <span class="number">1218</span></span><br><span class="line"></span><br><span class="line">print(type(a))</span><br><span class="line"></span><br><span class="line">b = <span class="number">-4212</span></span><br><span class="line">print(type(b))</span><br><span class="line"></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line">print(type(c))</span><br></pre></td></tr></table></figure><br><h3 id="실수에-대한-예시"><a href="#실수에-대한-예시" class="headerlink" title="실수에 대한 예시"></a>실수에 대한 예시</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자형, 실수, float </span></span><br><span class="line"></span><br><span class="line">g = <span class="number">1.05</span> </span><br><span class="line">print(type(g))</span><br><span class="line"></span><br><span class="line">h = <span class="number">-11.23</span> </span><br><span class="line">print(type(h))</span><br><span class="line"></span><br><span class="line">i = <span class="number">-0.34</span> </span><br><span class="line"></span><br><span class="line">print(i)</span><br><span class="line">print(type(i))</span><br><span class="line"></span><br><span class="line">j = <span class="number">2.12e-10</span></span><br><span class="line"></span><br><span class="line">print(j)</span><br><span class="line">print(type(j))</span><br><span class="line"></span><br><span class="line">k = <span class="number">5E220</span></span><br><span class="line">print(k)</span><br><span class="line">print(type(k))</span><br></pre></td></tr></table></figure><br><h3 id="정수와-실수-숫자-데이터의-연산"><a href="#정수와-실수-숫자-데이터의-연산" class="headerlink" title="정수와 실수 숫자 데이터의 연산"></a>정수와 실수 숫자 데이터의 연산</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 숫자형 데이터의 연산 예시 </span></span><br><span class="line"><span class="comment"># 실수와 정수 </span></span><br><span class="line"></span><br><span class="line">x = <span class="number">8</span> </span><br><span class="line">y = <span class="number">7</span> </span><br><span class="line"></span><br><span class="line">print(x + y)</span><br><span class="line">print(x - y)</span><br><span class="line">print(x / y)</span><br><span class="line">print(x * y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 지수 exponentials </span></span><br><span class="line">x = <span class="number">4</span> ** <span class="number">3</span> </span><br><span class="line">y = <span class="number">3</span> ** <span class="number">4</span> </span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나누기 division </span></span><br><span class="line"><span class="comment"># // </span></span><br><span class="line">print(<span class="number">12</span> / <span class="number">3</span>)</span><br><span class="line">print(<span class="number">64</span> // <span class="number">4</span>)</span><br><span class="line">print(<span class="number">15</span> // <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 나머지값 remainder </span></span><br><span class="line"><span class="comment"># % </span></span><br><span class="line">print(<span class="number">15</span>%<span class="number">4</span>)</span><br></pre></td></tr></table></figure><br><br><h3 id="복소수-Complex-Number"><a href="#복소수-Complex-Number" class="headerlink" title="복소수 (Complex Number)"></a>복소수 (Complex Number)</h3><br><p>수학적으로, 하나의 복소수 (주로 공학에서 사용되는 수)는 하나의 숫자가 A + Bi 의 형태로 되어 있고, A 는 real 파트, Bi 는 imaginery 파트를 의미 합니다.<br><br></p><blockquote><p>파이썬은 이런 복소수들에 대한 것도 지원합니다 </p><p>아래 두가지 형태를 사용하거나, </p><ul><li>(real + imagJ)</li><li>(real + imagj)</li></ul><p>혹은, 내장 함수인, complex(x, y) 를 사용하여 지정할수 있습니다 </p></blockquote><br><p>복소수의 예시 </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 복소수 complex </span></span><br><span class="line"></span><br><span class="line">x = complex(<span class="number">1</span>,<span class="number">3</span>)</span><br><span class="line">print(type(x))</span><br><span class="line"></span><br><span class="line">print(x)</span><br><span class="line"></span><br><span class="line">z = <span class="number">1</span> + <span class="number">2j</span> </span><br><span class="line">print(z)</span><br><span class="line">print(type(z))</span><br><span class="line"></span><br><span class="line">z = <span class="number">1</span> + <span class="number">3J</span> </span><br><span class="line">print(z)</span><br><span class="line">print(type(z))</span><br></pre></td></tr></table></figure><br><h2 id="Boolean-bool"><a href="#Boolean-bool" class="headerlink" title="Boolean (bool)"></a>Boolean (bool)</h2><br><p>파이썬에서 가장 간단한 내장 타입으로, True 와 False (참과 거짓) 을 표현하는 데이터 형식입니다. 불리언의 예시는 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="literal">True</span> </span><br><span class="line">print(type(x))</span><br><span class="line"></span><br><span class="line">y = <span class="literal">False</span></span><br><span class="line">print(type(y))</span><br></pre></td></tr></table></figure><br><h2 id="Strings-문자열"><a href="#Strings-문자열" class="headerlink" title="Strings (문자열)"></a>Strings (문자열)</h2><br><p>파이썬에서 문자열 객체는 하나의 sequence, 왼쪽에서부터 오른쪽 방향으로 순서가 있는 문자들입니다. </p><p>‘’ 혹은, “” 으로 감싸지는 문자 데이터이고, immutable 합니다. </p><br><p>문자열을 선언하는것은 굉장히 간단합니다. 아래 예시를 들어봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># "" 쌍따옴표로 감싸진 문자열 txt </span></span><br><span class="line">txt1 = <span class="string">"Django"</span></span><br><span class="line">print(txt1)</span><br><span class="line">print(type(txt1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># '' 외따옴표로 감싸진 문자열 txt </span></span><br><span class="line">txt1 = <span class="string">'Django'</span></span><br><span class="line">print(txt1)</span><br><span class="line">print(type(txt1))</span><br><span class="line"></span><br><span class="line"><span class="comment"># '''''' 혹은 """""" 로 감싸진 문자열 </span></span><br><span class="line"><span class="comment"># ' 3개 혹은 " 3개를 사용해서 감싸면, 다수의 줄을 가지는 문자열을 선언할수 있다. </span></span><br><span class="line">txt1 = <span class="string">'''Django'''</span></span><br><span class="line">print(txt1)</span><br><span class="line">print(type(txt1))</span><br><span class="line"></span><br><span class="line">txt1 = <span class="string">"""Django"""</span></span><br><span class="line">print(txt1)</span><br><span class="line">print(type(txt1))</span><br></pre></td></tr></table></figure><br><p>예시에서 볼수 있듯이, ‘’, “”, “”””””, ‘’’’’’ 는 모두 같은 효과를 냅니다. </p><br><p>또한, ‘,”‘ 혼용은 에러를 일으킵니다. 아래에는, 따옴표를 잘못 사용하여 나타나는 에러의 예시들입니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># " 로 시작하여, ' 로 끝납니다. </span></span><br><span class="line"><span class="comment"># 이는 에러를 발생 시킵니다. </span></span><br><span class="line"></span><br><span class="line">txt = <span class="string">"Django' </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># "</span><span class="string">" 안에 또다른 "</span> 를 가질수 없습니다 </span><br><span class="line"><span class="comment"># 이는 에러를 일으킵니다. </span></span><br><span class="line">txt = <span class="string">"Django day"</span>s great<span class="string">"</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># '' 안에 또다른 '' 를 가질수 없습니다 </span></span><br><span class="line"><span class="string"># 이는 에러를 일으킵니다. </span></span><br><span class="line"><span class="string">txt = 'Django day's great'</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"># "</span><span class="string">" 안에 따옴표를 사용하려면 ' 를 사용하여 중복사용을 피해야 합니다. </span></span><br><span class="line"><span class="string">txt = "</span>Django<span class="string">'s day is great!"</span></span><br><span class="line"><span class="string">print(txt)</span></span><br><span class="line"><span class="string">print(type(txt))</span></span><br></pre></td></tr></table></figure><br><h4 id="문자열에서-특수-문자들"><a href="#문자열에서-특수-문자들" class="headerlink" title="문자열에서 특수 문자들"></a>문자열에서 특수 문자들</h4><br><blockquote><p>백슬레쉬 문자를 사용하여, 특수 문자를 사용할수도 있습니다. </p></blockquote><br><p>﻿</p><ol><li><p><code>\n</code> - 새로운줄</p></li><li><p><code>\t</code> - 탭</p></li><li><p><code>\\</code> - 백슬레쉬</p></li><li><p><code>\&#39;</code> - 외따옴표</p></li><li><p><code>\&quot;</code> - 쌍따옴표</p></li></ol><p>﻿</p><br><h4 id="문자열-인덱싱과-문자열-요소들"><a href="#문자열-인덱싱과-문자열-요소들" class="headerlink" title="문자열 인덱싱과 문자열 요소들"></a>문자열 인덱싱과 문자열 요소들</h4><br><p>문자열은, 문자들의 배열이고, 하나의 배열 요소는 인덱싱을 사용하여 접근 가능합니다. </p><br><blockquote><p>인덱스는 왼쪽에서 0 으로부터 시작하고 </p><p>오른쪽에서 -1 으로부터 시작합니다 </p></blockquote><br><p><code>text = &quot;Django&quot;</code> 라는 문자열이 있다고 가정하고, 이 문자열의 인덱스 번호들은 아래와 같이 표현될수 있습니다. </p><br><p>﻿</p><table><thead><tr><th><strong>문자</strong></th><th>D</th><th>j</th><th>a</th><th>n</th><th>g</th><th>o</th></tr></thead><tbody><tr><td>인덱스(왼쪽)</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>인덱스(오른쪽)</td><td>-6</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><p>﻿</p><br><p>위 테이블을 가지고 예시를 들어보면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 인덱싱 값을 사용하여, 문자열의 요소들을 접근할수 있습니다. </span></span><br><span class="line"></span><br><span class="line">text = <span class="string">'Django'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 왼쪽에서부터 시작했을경우 </span></span><br><span class="line">print(text[<span class="number">0</span>])</span><br><span class="line">print(text[<span class="number">1</span>])</span><br><span class="line">print(text[<span class="number">2</span>])</span><br><span class="line">print(text[<span class="number">3</span>])</span><br><span class="line">print(text[<span class="number">4</span>])</span><br><span class="line">print(text[<span class="number">5</span>])</span><br><span class="line">print()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 오른쪽에서부터 시작할경우 </span></span><br><span class="line">print(text[<span class="number">-1</span>])</span><br><span class="line">print(text[<span class="number">-2</span>])</span><br><span class="line">print(text[<span class="number">-3</span>])</span><br><span class="line">print(text[<span class="number">-4</span>])</span><br><span class="line">print(text[<span class="number">-5</span>])</span><br><span class="line">print(text[<span class="number">-6</span>])</span><br></pre></td></tr></table></figure><br><blockquote><p>하지만, 인덱스 값을 벗어나서 접근하려 하면, 에러가 발생 합니다! </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 에러가 발생하는 케이스 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -7 번째 인덱스는 존재하지 않으므로, 에러를 발생 시킵니다 </span></span><br><span class="line">text = <span class="string">"Django"</span></span><br><span class="line">print(text[<span class="number">-7</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6 번째 이후의 인덱스는 존재하지 않으므로, 에러를 발생 시킵니다 </span></span><br><span class="line">text = <span class="string">"Django"</span></span><br><span class="line">print(text[<span class="number">6</span>])</span><br></pre></td></tr></table></figure><br><br><h4 id="문자열은-immutable-불변"><a href="#문자열은-immutable-불변" class="headerlink" title="문자열은 immutable (불변)"></a>문자열은 immutable (불변)</h4><br><blockquote><p>문자열들은 immutable 합니다 </p><p>문자열의 요소들의 값은 변경될수 없습니다. 문자열 값들은 변경이 불가능 합니다 </p></blockquote><br><p>예시를 들자면, 아래와 같습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 문자열이 한번 생성되면, 문자열의 문자의 값은 바꿀수가 없습니다.</span></span><br><span class="line"><span class="comment"># immutable </span></span><br><span class="line"></span><br><span class="line">text = <span class="string">"Django"</span></span><br><span class="line">text[<span class="number">0</span>]</span><br><span class="line">text[<span class="number">0</span>] = <span class="string">"Z"</span></span><br><span class="line"></span><br><span class="line">---------------------------------------------------------------------------</span><br><span class="line">TypeError                                 Traceback (most recent call last)</span><br><span class="line">&lt;ipython-input<span class="number">-35</span><span class="number">-4320</span>dce556f8&gt; <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">      <span class="number">1</span> text = <span class="string">"Django"</span></span><br><span class="line">      <span class="number">2</span> text[<span class="number">0</span>]</span><br><span class="line">----&gt; 3 text[0] = "Z"</span><br><span class="line"></span><br><span class="line">TypeError: <span class="string">'str'</span> object does <span class="keyword">not</span> support item assignment</span><br></pre></td></tr></table></figure><br><h4 id="문자열에서-in-연산자"><a href="#문자열에서-in-연산자" class="headerlink" title="문자열에서 in 연산자"></a>문자열에서 <code>in</code> 연산자</h4><br><p>in 연산자는, 해당 문자가, 문자열 안에 존재하는지 확인할수 있게 해줍니다. 이 연산자는, 결과값으로 불리언 값을 반환합니다 (True 혹은 False)</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'Django'</span></span><br><span class="line">is_z_in = <span class="string">'z'</span> <span class="keyword">in</span> text </span><br><span class="line">print(is_z_in)        <span class="comment"># 'z' 는 Django 안에 존재하지 않으므로, False 를 반환</span></span><br><span class="line"></span><br><span class="line">is_D_in = <span class="string">'D'</span> <span class="keyword">in</span> text</span><br><span class="line">print(is_D_in)        <span class="comment"># 'D' 는 Django 안에 존재하므로, True 를 반환  </span></span><br><span class="line"></span><br><span class="line">is_word_in = <span class="string">'jango'</span> <span class="keyword">in</span> text </span><br><span class="line">print(is_word_in)    <span class="comment"># 'jango'는 Django 안에 존재하므로, True 를 반환</span></span><br></pre></td></tr></table></figure><br><h4 id="문자열-슬라이싱"><a href="#문자열-슬라이싱" class="headerlink" title="문자열 슬라이싱"></a>문자열 슬라이싱</h4><br><p>문자열로부터 문자들을, 빼고 잘라내는것을 슬라이싱 이라고 부릅니다. 두개의 인덱스 번호가 <code>:</code> 으로 분리가 되어져 사용됩니다. </p><br><blockquote><p>슬라이스 2:5 가 의미 하는 바는, </p><p>문자열의 2번째, 3번째, 4번째 요소를 잘라내는 것입니다 (5번째는 포함되지 않습니다)</p></blockquote><br><p>﻿</p><table><thead><tr><th><strong>문자</strong></th><th>D</th><th>j</th><th>a</th><th>n</th><th>g</th><th>o</th></tr></thead><tbody><tr><td>인덱스(왼쪽)</td><td>0</td><td>1</td><td>2</td><td>3</td><td>4</td><td>5</td></tr><tr><td>인덱스(오른쪽)</td><td>-6</td><td>-5</td><td>-4</td><td>-3</td><td>-2</td><td>-1</td></tr></tbody></table><br><p>문자열 슬라이싱 예시는 아래와 같습니다. <br></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">"Django"</span></span><br><span class="line"></span><br><span class="line">print(text[<span class="number">0</span>:<span class="number">3</span>]) <span class="comment"># 0, 1, 2 인덱스에 해당하는 문자들을 출력</span></span><br><span class="line">print(text[<span class="number">2</span>:<span class="number">5</span>]) <span class="comment"># 2, 3, 4 인덱스에 해당하는 문자들을 출력 </span></span><br><span class="line"></span><br><span class="line">print(text[<span class="number">-4</span>:<span class="number">-1</span>])  <span class="comment"># -4, -3, -2 인덱스에 해당하는 문자들을 출력 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># text[-4:-1] 는 -1에서 1을 뺀 -2 인덱스까지 잘라냅니다</span></span><br></pre></td></tr></table></figure><br><h4 id="형태-변환"><a href="#형태-변환" class="headerlink" title="형태 변환"></a>형태 변환</h4><br><p>데이터 타입의 형태 변환은 가능합니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 문자열을 실수로 전환 </span></span><br><span class="line">print(float(<span class="string">"4.3"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 문자열을 정수로 변환 </span></span><br><span class="line">print(int(<span class="string">"1218"</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 실수를 정수로 변환 </span></span><br><span class="line">print(int(<span class="number">12.184</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># boolean 을 숫자로 표현, true 는 1, false 는 0 을 갖습니다. </span></span><br><span class="line">print(int(<span class="literal">True</span>))</span><br><span class="line">print(int(<span class="literal">False</span>))</span><br><span class="line">print(float(<span class="literal">True</span>))</span><br><span class="line">print(float(<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># boolean 을 문자로 표현 </span></span><br><span class="line">print(str(<span class="literal">True</span>))</span><br><span class="line">print(str(<span class="literal">False</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 숫자, 문자, 실수를 불리언으로 표현 </span></span><br><span class="line"><span class="comment"># 값이 있으면 True, 0 이거나 없으면 False 를 반환 </span></span><br><span class="line">print(bool())</span><br><span class="line">print(bool(<span class="number">0</span>))</span><br><span class="line">print(bool(<span class="string">'Hello world'</span>))</span><br><span class="line">print(bool(<span class="number">12.18</span>))</span><br></pre></td></tr></table></figure><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/27/Python-%EA%B8%B0%EC%B4%88-5%ED%8E%B8-Data-Type-%EC%88%AB%EC%9E%90-%EB%AC%B8%EC%9E%90%EC%97%B4-%EB%B6%88%EB%A6%AC%EC%96%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 4편 - variables (변수)</title>
      <link>http://djangojeng-e.github.io/2020/10/26/Python-%EA%B8%B0%EC%B4%88-4%ED%8E%B8-variables-%EB%B3%80%EC%88%98/</link>
      <guid>http://djangojeng-e.github.io/2020/10/26/Python-%EA%B8%B0%EC%B4%88-4%ED%8E%B8-variables-%EB%B3%80%EC%88%98/</guid>
      <pubDate>Mon, 26 Oct 2020 08:33:06 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-Variables&quot;&gt;&lt;a href=&quot;#Python-Variables&quot; class=&quot;headerlink&quot; title=&quot;Python - Variables&quot;&gt;&lt;/a&gt;Python - Variables&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;변수와-값-Variables-and-Value&quot;&gt;&lt;a href=&quot;#변수와-값-Variables-and-Value&quot; class=&quot;headerlink&quot; title=&quot;변수와 값 (Variables and Value)&quot;&gt;&lt;/a&gt;변수와 값 (Variables and Value)&lt;/h3&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;변수 (Variables) 는, &lt;/p&gt;
&lt;p&gt;프로그래머가 값 (Value) 을 저장할수 있는 메모리 공간 입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;값은, 문자열 혹은 숫자열 혹은 기타 다른것들이 될수 있습니다 예) “django”, 118, 25.45 etc &lt;/li&gt;
&lt;li&gt;변수는 처음 할당 될때 생성됩니다 &lt;/li&gt;
&lt;li&gt;변수들은 참조되기 전에 할당이 되어 있어야 합니다. 할당 되지 않아 있는 변수를 참조하려 하면, 에러가 납니다&lt;/li&gt;
&lt;li&gt;변수안에 저장된 값은, 접근이 가능 하고, 혹은 나중에 업데이트 될수 있습니다 &lt;/li&gt;
&lt;li&gt;변수의 타입 (즉, 문자열, 정수, 실수 등)들은 파이썬에 의해 지정됩니다 &lt;/li&gt;
&lt;li&gt;파이썬 인터프리터는 변수의 데이터 타입을 기준으로 메모리를 할당 합니다. &lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;h2 id=&quot;파이썬-변수-이름-규칙&quot;&gt;&lt;a href=&quot;#파이썬-변수-이름-규칙&quot; class=&quot;headerlink&quot; title=&quot;파이썬 변수 이름 규칙&quot;&gt;&lt;/a&gt;파이썬 변수 이름 규칙&lt;/h2&gt;&lt;br&gt;

&lt;ul&gt;
&lt;li&gt;글자 (a-z, A-Z) 혹은 &lt;code&gt;_&lt;/code&gt; 언더스코어 로 시작 할수 있습니다 &lt;/li&gt;
&lt;li&gt;다른 문자들, 글자, 숫자 혹은 언더스코어가 될수 있습니다 &lt;/li&gt;
&lt;li&gt;파이썬 변수 이름은, 숫자로 시작하지 않습니다. &lt;/li&gt;
&lt;li&gt;대문자 소문자를 구분 합니다 &lt;/li&gt;
&lt;li&gt;적절한 길이로 이루어질수 있습니다 &lt;/li&gt;
&lt;li&gt;&lt;em&gt;변수명으로 사용될수 없는, 예약어들이 존재 합니다. 파이썬이 다른것들을 위해서 사용하는 내장 함수나 예약어들은 변수명으로 사용할수 없습니다&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;br&gt;

&lt;p&gt;예약어의 예시는 아래와 같습니다. 모든 예약어들은 변수명으로 사용될수 없습니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;False&lt;/th&gt;
&lt;th&gt;class&lt;/th&gt;
&lt;th&gt;finally&lt;/th&gt;
&lt;th&gt;is&lt;/th&gt;
&lt;th&gt;return&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;None&lt;/td&gt;
&lt;td&gt;continue&lt;/td&gt;
&lt;td&gt;for&lt;/td&gt;
&lt;td&gt;lambda&lt;/td&gt;
&lt;td&gt;try&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;True&lt;/td&gt;
&lt;td&gt;def&lt;/td&gt;
&lt;td&gt;from&lt;/td&gt;
&lt;td&gt;nonlocal&lt;/td&gt;
&lt;td&gt;while&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td&gt;del&lt;/td&gt;
&lt;td&gt;global&lt;/td&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;td&gt;with&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;as&lt;/td&gt;
&lt;td&gt;el&lt;/td&gt;
&lt;td&gt;if&lt;/td&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td&gt;yield&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;assert&lt;/td&gt;
&lt;td&gt;else&lt;/td&gt;
&lt;td&gt;import&lt;/td&gt;
&lt;td&gt;pass&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;break&lt;/td&gt;
&lt;td&gt;except&lt;/td&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;raise&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;좋은-변수명&quot;&gt;&lt;a href=&quot;#좋은-변수명&quot; class=&quot;headerlink&quot; title=&quot;좋은 변수명&quot;&gt;&lt;/a&gt;좋은 변수명&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;프로그래머가 변수명을 잘 짓는 능력은 정말정말 중요합니다. 좋은 변수명을 짓기 위해서 참고할 룰은 몇가지 있지만, 가장 근본적으로 공통된 룰은 아래와 같습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-Variables"><a href="#Python-Variables" class="headerlink" title="Python - Variables"></a>Python - Variables</h2><br><h3 id="변수와-값-Variables-and-Value"><a href="#변수와-값-Variables-and-Value" class="headerlink" title="변수와 값 (Variables and Value)"></a>변수와 값 (Variables and Value)</h3><br><blockquote><p>변수 (Variables) 는, </p><p>프로그래머가 값 (Value) 을 저장할수 있는 메모리 공간 입니다. </p></blockquote><br><ul><li>값은, 문자열 혹은 숫자열 혹은 기타 다른것들이 될수 있습니다 예) “django”, 118, 25.45 etc </li><li>변수는 처음 할당 될때 생성됩니다 </li><li>변수들은 참조되기 전에 할당이 되어 있어야 합니다. 할당 되지 않아 있는 변수를 참조하려 하면, 에러가 납니다</li><li>변수안에 저장된 값은, 접근이 가능 하고, 혹은 나중에 업데이트 될수 있습니다 </li><li>변수의 타입 (즉, 문자열, 정수, 실수 등)들은 파이썬에 의해 지정됩니다 </li><li>파이썬 인터프리터는 변수의 데이터 타입을 기준으로 메모리를 할당 합니다. </li></ul><br><h2 id="파이썬-변수-이름-규칙"><a href="#파이썬-변수-이름-규칙" class="headerlink" title="파이썬 변수 이름 규칙"></a>파이썬 변수 이름 규칙</h2><br><ul><li>글자 (a-z, A-Z) 혹은 <code>_</code> 언더스코어 로 시작 할수 있습니다 </li><li>다른 문자들, 글자, 숫자 혹은 언더스코어가 될수 있습니다 </li><li>파이썬 변수 이름은, 숫자로 시작하지 않습니다. </li><li>대문자 소문자를 구분 합니다 </li><li>적절한 길이로 이루어질수 있습니다 </li><li><em>변수명으로 사용될수 없는, 예약어들이 존재 합니다. 파이썬이 다른것들을 위해서 사용하는 내장 함수나 예약어들은 변수명으로 사용할수 없습니다</em></li></ul><br><p>예약어의 예시는 아래와 같습니다. 모든 예약어들은 변수명으로 사용될수 없습니다. </p><br><table><thead><tr><th>False</th><th>class</th><th>finally</th><th>is</th><th>return</th></tr></thead><tbody><tr><td>None</td><td>continue</td><td>for</td><td>lambda</td><td>try</td></tr><tr><td>True</td><td>def</td><td>from</td><td>nonlocal</td><td>while</td></tr><tr><td>and</td><td>del</td><td>global</td><td>not</td><td>with</td></tr><tr><td>as</td><td>el</td><td>if</td><td>or</td><td>yield</td></tr><tr><td>assert</td><td>else</td><td>import</td><td>pass</td><td></td></tr><tr><td>break</td><td>except</td><td>in</td><td>raise</td><td></td></tr></tbody></table><br><br><h2 id="좋은-변수명"><a href="#좋은-변수명" class="headerlink" title="좋은 변수명"></a>좋은 변수명</h2><br><p>프로그래머가 변수명을 잘 짓는 능력은 정말정말 중요합니다. 좋은 변수명을 짓기 위해서 참고할 룰은 몇가지 있지만, 가장 근본적으로 공통된 룰은 아래와 같습니다. </p><p><br><a id="more"></a></p><ul><li>아주 짧은 변수명보다는, 짧고 간결하지만 의미를 포함하고 있는 이름이 좋습니다 </li><li>의미 있는 이름을 만들기 위해서, 너무 긴 이름을 짓는것은 좋지 않습니다 </li><li>변수명을 지을때에는, 일관성 있게 지어야 합니다 </li><li>특수한 경우를 위해서, 변수명 앞에, <code>_</code> 를 붙여 줍니다 </li></ul><br><blockquote><p>변수를 생성할때에는, 할당을 통해서 변수에 값을 할당하고, 생성할수 있습니다. </p><p>예를들면, 아래와 같은 형식으로 생성합니다. </p><p><code>변수명 = 수식 혹은 값</code></p></blockquote><br><blockquote><p><code>=</code> 연산자는, 오른쪽에 있는 값을, 왼쪽에 있는 변수명에 할당 합니다. </p><p>예를들면, </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">item = <span class="string">"computer"</span>    <span class="comment"># "computer" 라는 문자열을, item 이라는 변수에 할당 했습니다. </span></span><br><span class="line">item_qty = <span class="number">10</span>        <span class="comment"># 10 이라는 정수를, item_qty 라는 변수에 할당 했습니다. </span></span><br><span class="line">item_value = <span class="number">949.99</span>  <span class="comment"># 949.99 라는 실수를, item_value 라는 변수에 할당 했습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 위의 할당된 변수들은 할당과 동시에 생성되었습니다. </span></span><br><span class="line"><span class="comment"># 이렇게 값이 할당되고 생성된 변수들은, 아래와 같이 다른 함수를 사용하여 참조되고, 호출되어 </span></span><br><span class="line"><span class="comment"># 값이 불려와 질수 있습니다 </span></span><br><span class="line"></span><br><span class="line">print(item_qty) </span><br><span class="line">print(item_value)</span><br></pre></td></tr></table></figure><br><br><blockquote><p>변수를 생성할때, </p><p>값은 오른쪽에, 변수명은 왼쪽에 두어야 합니다. </p><p>변수명은 숫자가 될수 없습니다. 그렇지 않으면, 문법 에러를 발생 시킵니다. </p><p>아래 예시는, 에러가 발생 합니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">12</span> </span><br><span class="line"><span class="number">12</span> = a</span><br></pre></td></tr></table></figure><br><br><h2 id="나쁜-변수명"><a href="#나쁜-변수명" class="headerlink" title="나쁜 변수명"></a>나쁜 변수명</h2><br><ul><li>변수가 어디에 쓰일지 추정도 할수 없게, 너무 짧은 변수명 </li><li>변수가 어디에 쓰일지 추정할수 없을만큼, 너무 의미가 없는 변수명 </li><li>너무 많은 의미를 부여하여, 너무 길게 지어진 변수명 </li><li>기타 등등 (개인적으로, 가독성을 떨어트리는 변수명 싫습니다!)</li></ul><br><br><blockquote><p>프로그래머들은, </p><p>많은 시간을 좋은 변수명을 짓기 위해서 소비합니다. </p><p>변수명은, 다른 프로그래머들이 보았을때에도 의미가 명확하고, 효과적인 변수명이어야 합니다. </p><br><p>이는, 다른 프로그래머들이 작성한 코드를 많이 보고 참조하거나. </p><p>많은 연습이 필요한 영역으로, 본인만 이해할수 있는 변수명 보다는, 코딩을 모르는 초보들도 알기 쉬운 </p><p>변수명으로 선택하는것이 좋습니다. </p><br><p>변수명을 짓는것을 잘 하면, 함수명과 클래스명을 지을때도 응용해서 잘 지을수 있습니다. </p></blockquote><br><h2 id="다수-할당"><a href="#다수-할당" class="headerlink" title="다수 할당"></a>다수 할당</h2><br><p>기본 할당문은, 하나의 변수와 하나의 값을 가지고 작동했습니다. 하지만, 다수의 변수에 하나의 값을 동시에 할당 할수도 있습니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">x = y = z = <span class="number">1</span> </span><br><span class="line">print(x) </span><br><span class="line">print(y)</span><br><span class="line">print(z)</span><br><span class="line"></span><br><span class="line"><span class="comment"># x, y, z 변수는 모두 1로 할당이 됩니다 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 아래에는, 다른 값들을, 다른 변수들에 동시에 할당해보는 예시 입니다. </span></span><br><span class="line">x, y, z = <span class="number">1</span>, <span class="number">2</span>, <span class="string">"abcd"</span> </span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line">print(z)</span><br></pre></td></tr></table></figure><br><p>새로운 값을 변수에 할당하는것으로, 같은 변수명을 재사용 할수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">100</span> </span><br><span class="line">print(x) </span><br><span class="line"></span><br><span class="line"><span class="comment"># x 에 'Django' 라는 문자열을 새로운 값으로 할당 합니다 </span></span><br><span class="line">x = <span class="string">'Django'</span> </span><br><span class="line">print(x)</span><br></pre></td></tr></table></figure><br><h2 id="변수-바꾸기"><a href="#변수-바꾸기" class="headerlink" title="변수 바꾸기"></a>변수 바꾸기</h2><br><p>파이썬 변수값 바꾸기는 한줄로 가능하고, 이는 파이썬에서 모든 객체들에 적용됩니다. </p><p><br>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">10</span> </span><br><span class="line">y = <span class="number">20</span> </span><br><span class="line">print(x)</span><br><span class="line">print(y)</span><br><span class="line"></span><br><span class="line">x, y = y, x  <span class="comment"># 변수의 값을 바꿉니다 </span></span><br><span class="line">print(x) </span><br><span class="line">print(y)</span><br></pre></td></tr></table></figure><br><h2 id="Local-변수와-Global-변수"><a href="#Local-변수와-Global-변수" class="headerlink" title="Local 변수와 Global 변수"></a>Local 변수와 Global 변수</h2><br><blockquote><p>Local 변수는 지역 변수라고도 하는데, </p><p>특정 코드 영역안에서 사용되는 변수들입니다. </p><br><p>Global 변수는 전역 변수라고도 하는데, </p><p>프로그램 전체 영역에서 사용되는 변수들입니다. </p></blockquote><br><p>파이썬에서, 함수안에서만 참조되는 변수들은 암시적으로 global 변수 입니다. </p><p><br>만약, 하나의 변수가 명확하게 함수안에서 값이 할당 되어 있다면, 이는 local 변수로, 함수내의 변수로 사용됩니다. 아래 예시를 통해 차이점을 알아봅니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">language1 = <span class="string">"Python"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">()</span>:</span></span><br><span class="line">    language1 = <span class="string">"PHP"</span></span><br><span class="line">    print(<span class="string">"func1 안에서 language1 = "</span>, language1)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"func2 안에서 language1 = "</span>, language1)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">func1()   <span class="comment"># 함수안에 정의된 로컬 변수,language1 의 값을 사용 </span></span><br><span class="line">func2()   <span class="comment"># 함수안에 저의된 로컬 변수가 없기 때문에, language1 이라는 global 변수를 사용</span></span><br></pre></td></tr></table></figure><br><p>함수안에서, 특별한 값을 local 변수로 지정하고, 이를 global  변수로 만들수도 있습니다. global 을 변수명 앞에 붙여서 사용할수 있습니다. </p><br><p>로컬 변수 (local variables) 와 전역 변수 (global variables) 의 개념은 매우 중요합니다. 꼭 구글을 통해서 더 찾아보도록 합니다. 하지만, 현대 프로그래밍에서는, global 변수의 사용을 권장하고 있지 않습니다. </p><br><p>global 변수를 너무 많이 사용하면, global 변수의 변경사항이 프로그램 전반에 걸쳐 영향을 주기 때문입니다. <br></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/26/Python-%EA%B8%B0%EC%B4%88-4%ED%8E%B8-variables-%EB%B3%80%EC%88%98/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 3편 - print 함수</title>
      <link>http://djangojeng-e.github.io/2020/10/25/Python-%EA%B8%B0%EC%B4%88-3%ED%8E%B8-print-%ED%95%A8%EC%88%98/</link>
      <guid>http://djangojeng-e.github.io/2020/10/25/Python-%EA%B8%B0%EC%B4%88-3%ED%8E%B8-print-%ED%95%A8%EC%88%98/</guid>
      <pubDate>Sun, 25 Oct 2020 01:21:55 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Python-print&quot;&gt;&lt;a href=&quot;#Python-print&quot; class=&quot;headerlink&quot; title=&quot;Python - print()&quot;&gt;&lt;/a&gt;Python - &lt;code&gt;print()&lt;/code&gt;&lt;/h2&gt;&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;print-함수&quot;&gt;&lt;a href=&quot;#print-함수&quot; class=&quot;headerlink&quot; title=&quot;print 함수&quot;&gt;&lt;/a&gt;print 함수&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;print 문은 &lt;code&gt;print()&lt;/code&gt; 함수로 대체 되었습니다. 키워드 인자들은, 이전 프린트문의 특수 문법들을 대체 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;print문은 아래와 같은 방식으로 사용될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good Morning&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good&quot;&lt;/span&gt;, &amp;lt;문자열을 가지고 있는 변수&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good&quot;&lt;/span&gt;, &amp;lt;문자열을 가지고 있는 변수&amp;gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Good %s&quot;&lt;/span&gt; % &amp;lt;문자열을 가지고 있는 변수&amp;gt; )&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 예) &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;a = &lt;span class=&quot;string&quot;&gt;&#39;abc&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# a 는 abc 라는 문자열을 가지고 있는 변수 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;good&#39;&lt;/span&gt;, a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;good&#39;&lt;/span&gt; + a)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;good %S&#39;&lt;/span&gt; % a)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;h3 id=&quot;문자열-포매팅&quot;&gt;&lt;a href=&quot;#문자열-포매팅&quot; class=&quot;headerlink&quot; title=&quot;문자열 포매팅&quot;&gt;&lt;/a&gt;문자열 포매팅&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;추가적으로 문자열 포매팅이 중요한데. 문자열에 출력될 변수를, &lt;code&gt;%&lt;/code&gt;, &lt;code&gt;{}&lt;/code&gt; 에 넣어서 출력할수도 있습니다&lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;text = &lt;span class=&quot;string&quot;&gt;&#39;django_bro&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;Hey! %s&quot;&lt;/span&gt;, text)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;f&#39;Hey! &lt;span class=&quot;subst&quot;&gt;&amp;#123;text&amp;#125;&lt;/span&gt;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;Hey! &amp;#123;&amp;#125;&#39;&lt;/span&gt;.format(text))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;파이썬에서 문자열은, &lt;/p&gt;
&lt;p&gt;외따옴표, 쌍따옴표, 혹은 따옴표 3개로 감싸서 문자열로 사용할수 있습니다.&lt;/p&gt;
&lt;p&gt;문자열을 표현하기 위해서 사용되는 따옴표의 종류는 어떤것을 사용해도 상관이 없습니다.  &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Python-print"><a href="#Python-print" class="headerlink" title="Python - print()"></a>Python - <code>print()</code></h2><br><br><h2 id="print-함수"><a href="#print-함수" class="headerlink" title="print 함수"></a>print 함수</h2><br><p>print 문은 <code>print()</code> 함수로 대체 되었습니다. 키워드 인자들은, 이전 프린트문의 특수 문법들을 대체 합니다. </p><br><p>print문은 아래와 같은 방식으로 사용될수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"Good Morning"</span>)</span><br><span class="line">print(<span class="string">"Good"</span>, &lt;문자열을 가지고 있는 변수&gt;)</span><br><span class="line">print(<span class="string">"Good"</span>, &lt;문자열을 가지고 있는 변수&gt;)</span><br><span class="line">print(<span class="string">"Good %s"</span> % &lt;문자열을 가지고 있는 변수&gt; )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 예) </span></span><br><span class="line">a = <span class="string">'abc'</span></span><br><span class="line"><span class="comment"># a 는 abc 라는 문자열을 가지고 있는 변수 </span></span><br><span class="line">print(<span class="string">'good'</span>, a)</span><br><span class="line">print(<span class="string">'good'</span> + a)</span><br><span class="line">print(<span class="string">'good %S'</span> % a)</span><br></pre></td></tr></table></figure><br><h3 id="문자열-포매팅"><a href="#문자열-포매팅" class="headerlink" title="문자열 포매팅"></a>문자열 포매팅</h3><br><p>추가적으로 문자열 포매팅이 중요한데. 문자열에 출력될 변수를, <code>%</code>, <code>{}</code> 에 넣어서 출력할수도 있습니다</p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">text = <span class="string">'django_bro'</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">"Hey! %s"</span>, text)</span><br><span class="line">print(<span class="string">f'Hey! <span class="subst">&#123;text&#125;</span>'</span>)</span><br><span class="line">print(<span class="string">'Hey! &#123;&#125;'</span>.format(text))</span><br></pre></td></tr></table></figure><br><br><blockquote><p>파이썬에서 문자열은, </p><p>외따옴표, 쌍따옴표, 혹은 따옴표 3개로 감싸서 문자열로 사용할수 있습니다.</p><p>문자열을 표현하기 위해서 사용되는 따옴표의 종류는 어떤것을 사용해도 상관이 없습니다.  </p></blockquote><br><a id="more"></a><p>하지만, 보통 아래와 같은 방식으로 사용합니다. </p><br><table><thead><tr><th>따옴표</th><th>표현 문자열</th></tr></thead><tbody><tr><td>‘</td><td>하나의 단어 혹은 하나의 문자를 선언하기 위해 사용</td></tr><tr><td>“</td><td>하나의 줄을 선언하기 위해 사용</td></tr><tr><td>‘’’ 혹은 “””</td><td>파라그래프 / 문단 / 다수의 줄을 선언하기 위해 사용</td></tr></tbody></table><br><p>아래 코드들이 출력하는것은 모두 같습니다. 따옴표 사용의 차이는 없지만, 따옴표 안에 같은 따옴표가 있으면 에러가 발생 합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 외 따옴표 사용 </span></span><br><span class="line">print(<span class="string">'파이썬은 매우 간단합니다!'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 쌍 따옴표 사용 </span></span><br><span class="line">print(<span class="string">"파이썬은 매우 간단합니다!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 외따옴표 3개 사용 </span></span><br><span class="line">print(<span class="string">'''파이썬은 매우 간단합니다!'''</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 쌍따옴표 3개 사용 </span></span><br><span class="line">print(<span class="string">"""파이썬은 매우 간단합니다!"""</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 에러가 나는 경우, invalid syntax  </span></span><br><span class="line"><span class="comment"># 외 따옴표 안에 외 따옴표가 다시 사용되었음 </span></span><br><span class="line">print(<span class="string">'파이썬은 '</span>매우<span class="string">' 간단합니다!'</span>)   </span><br><span class="line">      </span><br><span class="line"><span class="comment"># 에러가 나는 경우2, invalid syntax</span></span><br><span class="line"><span class="comment"># 쌍따옴표 안에 쌍 따옴표가 다시 사용됨, 에러를 발생 </span></span><br><span class="line">print(<span class="string">"파이썬은 "</span>매우<span class="string">" 간단합니다!"</span>)</span><br></pre></td></tr></table></figure><br><br><h2 id="변수-사용"><a href="#변수-사용" class="headerlink" title="변수 사용"></a>변수 사용</h2><br><p>문자열들은 변수에 할당되고, print 문은 사용될때에 호출되어 사용될수 있습니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Wel'</span></span><br><span class="line">print(str1, <span class="string">'come'</span>)</span><br></pre></td></tr></table></figure><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Welcome'</span></span><br><span class="line">str2 = <span class="string">'Python'</span></span><br><span class="line">print(str1, str2)</span><br></pre></td></tr></table></figure><br><h2 id="String-Concatenation-문자열-합치기"><a href="#String-Concatenation-문자열-합치기" class="headerlink" title="String Concatenation (문자열 합치기)"></a>String Concatenation (문자열 합치기)</h2><br><p>string concatenation 은 두개의 문자열을 더하는것입니다. 문자열을 <code>+</code> 를 사용해서 다해주면, 문자열 사이에 공백이 없습니다. 예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'Python'</span></span><br><span class="line">str2 = <span class="string">':'</span></span><br><span class="line">print(<span class="string">'Welcome'</span> + str1 + str2)</span><br><span class="line"><span class="comment"># () 안에 있는 모든 문자열들이 합쳐져서 출력될겁니다.</span></span><br></pre></td></tr></table></figure><br><h2 id="문자열로-사용하기"><a href="#문자열로-사용하기" class="headerlink" title="문자열로 사용하기"></a>문자열로 사용하기</h2><br><p><code>%</code> 는 문자열을 포함하고 있는 변수를 참조할때 사용됩니다. </p><br><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">' Python'</span></span><br><span class="line">print(<span class="string">"Welcome %s"</span> % str1)</span><br></pre></td></tr></table></figure><br><blockquote><p>다른 데이터 타입들도 사용할수 있습니다 </p></blockquote><br><table><thead><tr><th>문자</th><th>데이터타입</th></tr></thead><tbody><tr><td>%d</td><td>정수</td></tr><tr><td>%e</td><td>지수</td></tr><tr><td>%f</td><td>실수</td></tr><tr><td>%o</td><td>Octal 8진수</td></tr><tr><td>%x</td><td>Hexadecimal 16진수</td></tr></tbody></table><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 정수를 사용하는 경우 </span></span><br><span class="line">print(<span class="string">"Actual Number = %d"</span> % <span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 지수를 사용 </span></span><br><span class="line">print(<span class="string">"Exponential equivalent of the number = %e"</span> %<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 실수를 사용 </span></span><br><span class="line">print(<span class="string">'Float of the number = %f'</span> %<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 8진수 사용 </span></span><br><span class="line">print(<span class="string">"Octal Equivalent of the number = %o"</span> %<span class="number">15</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 16진수 사용 </span></span><br><span class="line">print(<span class="string">"Octal equivalent of the number = %x"</span> %<span class="number">15</span>)</span><br></pre></td></tr></table></figure><br><h3 id="다수의-변수들을-사용"><a href="#다수의-변수들을-사용" class="headerlink" title="다수의 변수들을 사용"></a>다수의 변수들을 사용</h3><br><p>다수의 변수들을 참조할때에는 괄호가 사용됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str1 = <span class="string">'World'</span></span><br><span class="line">str2 = <span class="string">':'</span></span><br><span class="line">print(<span class="string">"Python %s %s"</span> % (str1, str2))</span><br></pre></td></tr></table></figure><br><h3 id="프린트-문의-다른-예시들"><a href="#프린트-문의-다른-예시들" class="headerlink" title="프린트 문의 다른 예시들"></a>프린트 문의 다른 예시들</h3><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># %는 %d 타입 단어를 위해 사용된다 </span></span><br><span class="line">print(<span class="string">"Welcome to %%Python %s"</span> %<span class="string">'language'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \n 은 줄바꿈을 위해서 사용됩니다 </span></span><br><span class="line">print(<span class="string">"Sunday\nMonday\nTuesday\nWednesday\nThursday\nFriday\nSaturday"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 어떤 단어를 여러번 출력하고 싶을때 </span></span><br><span class="line">print(<span class="string">'django'</span> * <span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># \t 는 tab키를 위해 사용됩니다 </span></span><br><span class="line">print(<span class="string">"""</span></span><br><span class="line"><span class="string">Language:</span></span><br><span class="line"><span class="string">\t1 Python</span></span><br><span class="line"><span class="string">\t2 Java\n\t3 JavaScript"""</span>)</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="Precision-width-and-Field-width"><a href="#Precision-width-and-Field-width" class="headerlink" title="Precision width and Field width"></a>Precision width and Field width</h3><br><p>Field Width 는 숫자 전체의 넓이 이고, precision 은 우측을 향한 넓이 입니다. </p><p><br>요구 사항에 따라 이는 조정 될수 있습니다. </p><br><p>기본 precision width 는 6 으로 설정 되어 있습니다. <br></p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># precision width and field width </span></span><br><span class="line"><span class="comment"># 6 번째 소숫점 까지 반환 됩니다 </span></span><br><span class="line"><span class="comment"># 이 소숫점 자리수를 지정하기 위해서는, </span></span><br><span class="line"><span class="comment"># %(fieldwidth).(precisionwidth)f 가 사용됩니다. </span></span><br><span class="line">print(<span class="string">"%f"</span> % <span class="number">5.1234567890</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 소수점 5자리까지만 반환 하고 싶을 경우</span></span><br><span class="line">print(<span class="string">"%.5f"</span> %<span class="number">5.1234567890</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 만약 field width 가 필요 이상으로 지정되어 있을경우, </span></span><br><span class="line"><span class="comment"># 데이터 오른쪽은 특정 값쪽으로 스스로 조정 됩니다 </span></span><br><span class="line">print(<span class="string">"%9.5f"</span> %<span class="number">5.1234567890</span>)</span><br><span class="line">      </span><br><span class="line"><span class="comment"># 0 을 추가하여, padding 값을 0으로 만들수 있습니다. </span></span><br><span class="line">print(<span class="string">"%015.5f"</span> % <span class="number">5.1234567890</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 올바른 정렬을 위해, 필드 너비에 공백을 비워 두어 음수를 사용할때에 </span></span><br><span class="line"><span class="comment"># 적절한 정렬이 유지 됩니다 </span></span><br><span class="line">print(<span class="string">"% 9f"</span> % <span class="number">5.1234567890</span>)</span><br><span class="line">print(<span class="string">"% 9f"</span> % <span class="number">5.1234567890</span>)</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/25/Python-%EA%B8%B0%EC%B4%88-3%ED%8E%B8-print-%ED%95%A8%EC%88%98/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
