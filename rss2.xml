<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Mon, 30 Nov 2020 08:56:03 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>DRF Tutorial 19편 - 모델에 정보 추가하기</title>
      <link>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-19%ED%8E%B8-%EB%AA%A8%EB%8D%B8%EC%97%90-%EC%A0%95%EB%B3%B4-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-19%ED%8E%B8-%EB%AA%A8%EB%8D%B8%EC%97%90-%EC%A0%95%EB%B3%B4-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Mon, 30 Nov 2020 08:44:54 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Adding-information-to-our-model&quot;&gt;&lt;a href=&quot;#Adding-information-to-our-model&quot; class=&quot;headerlink&quot; title=&quot;Adding information to our mode
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Adding-information-to-our-model"><a href="#Adding-information-to-our-model" class="headerlink" title="Adding information to our model"></a>Adding information to our model</h2><br><p>우리는, 우리의 Snippet 모델 클래스에, 몇가지 수정사항을 만들겁니다. </p><br><p>우선, 몇가지 필드들을 추가 합시다. 추가할 필드중 하나는, 누가 코드 스니펫을 생성했는가를 표시하기 위해서 사용될것입니다. 또다른 필드는, 하이라이트 된 코드의 HTML 을 저장하는데에 쓰입니다. </p><br><ol><li>스니펫 생성자 owner 필드 </li><li>하이라이트 된 코드의 HTML 텍스트 </li></ol><br><p>아래 두가지 필드들을 <code>snippets/models.py</code> 에 있는 Snippet 모델에 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">owner = models.ForeignKey(<span class="string">'auth.User'</span>, related_name=<span class="string">'snippets'</span>,  on_delete=models.CASCADE)</span><br><span class="line">highlighted = models.TextField()</span><br></pre></td></tr></table></figure><br><p>모델이 저장될때, 또한가지 확실시 해야 하는것은, 코드를 하이라이트 해주는 라이브러리인 <code>pygments</code> 를 사용하여 highlighted 필드를 채워주는것입니다. </p><br><p>몇가지 불러오기를 해줄 필요가 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_lexer_by_name </span><br><span class="line"><span class="keyword">from</span> pygments.formatters.html <span class="keyword">import</span> HtmlFormatter </span><br><span class="line"><span class="keyword">from</span> pygments <span class="keyword">import</span> highlight</span><br></pre></td></tr></table></figure><br><p>그리고 이제, 우리는 <code>.save()</code> 메서드를 우리의 모델 클래스에 추가해줄수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Use the 'pygments' library to create a highlighted HTML representation of the   code snippet.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    lexer = get_lexer_by_name(self.language)</span><br><span class="line">    linenos = <span class="string">'table'</span> <span class="keyword">if</span> self.linenos <span class="keyword">else</span> <span class="literal">False</span> </span><br><span class="line">    options = &#123;<span class="string">'title'</span>: self.title&#125; <span class="keyword">if</span> self.title <span class="keyword">else</span> &#123;&#125;</span><br><span class="line">    formatter = HtmlFormatter(style=self.style, linenos=linenos, full=<span class="literal">True</span>,  **options)</span><br><span class="line">    self.highlighted = highlight(self.code, lexer, formatter)</span><br><span class="line">    super(Snippet, self).save(*args, **kwargs)</span><br></pre></td></tr></table></figure><br><p>이것이 모두 완료가 되면, 우리는 우리의 데이터베이스 테이블들을 업데이트 해줄 필요가 있을것입니다. </p><br><p>이를 해주기 위해서, 일번적으로 우리는 database migration 을 생성해 줍니다. 하지만, 이번 튜토리얼의 목적을 위해, database 를 삭제하고 다시 시작합시다. </p><br><p>터미널에서 아래 명령어를 실행 합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm -f db.sqlite3 </span><br><span class="line">rm -f snipepts/migrations </span><br><span class="line">python manage.py makemigraitons snippets </span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><br><p>또한 여러분들은 API 테스팅 사용을 위한, 여러명의 다른 사용자들을 생성하고 싶을지 모릅니다. </p><br><p>이를 위해 가장 빠른 방법은 <code>createsuperuser</code> 커맨드를 사용하는것입니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py createsuperuser</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-19%ED%8E%B8-%EB%AA%A8%EB%8D%B8%EC%97%90-%EC%A0%95%EB%B3%B4-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 18편 - 인증과 권한</title>
      <link>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-18%ED%8E%B8-%EC%9D%B8%EC%A6%9D%EA%B3%BC-%EA%B6%8C%ED%95%9C/</link>
      <guid>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-18%ED%8E%B8-%EC%9D%B8%EC%A6%9D%EA%B3%BC-%EA%B6%8C%ED%95%9C/</guid>
      <pubDate>Mon, 30 Nov 2020 08:41:15 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Authentication-amp-Permissions&quot;&gt;&lt;a href=&quot;#Authentication-amp-Permissions&quot; class=&quot;headerlink&quot; title=&quot;Authentication &amp;amp; Permissions
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Authentication-amp-Permissions"><a href="#Authentication-amp-Permissions" class="headerlink" title="Authentication &amp; Permissions"></a>Authentication &amp; Permissions</h2><br><p>현재 우리의 API 는 누가 code snippets  을 수정을 하든 삭제를 하든지 어떠한 제약도 가지고 있지 않습니다. 우리는 아래의 사항들에 대해 확실시 하기 위해, 조금더 고도의 동작을 만들어 놓고싶습니다. </p><br><ul><li>코드 스니펫들은 언제나 생성자와 연관되어야함 </li><li>오직 인증된 사용자들만 스니펫을 생성할수 있음 </li><li>오직 스니펫을 생성한 생성자만, 스니펫을 업데이트 혹은 삭제할수 있음 </li><li>인증 되지 않은 사용자들은 읽기전용 엑세스만 가져야만 함 </li></ul><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/30/DRF-Tutorial-18%ED%8E%B8-%EC%9D%B8%EC%A6%9D%EA%B3%BC-%EA%B6%8C%ED%95%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 17편 - generic 클래스뷰 사용하기</title>
      <link>http://djangojeng-e.github.io/2020/11/29/DRF-Tutorial-17%ED%8E%B8-generic-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B7%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/11/29/DRF-Tutorial-17%ED%8E%B8-generic-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B7%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 29 Nov 2020 03:13:17 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Generic-클래스뷰-사용하기&quot;&gt;&lt;a href=&quot;#Generic-클래스뷰-사용하기&quot; class=&quot;headerlink&quot; title=&quot;Generic 클래스뷰 사용하기&quot;&gt;&lt;/a&gt;Generic 클래스뷰 사용하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;mixi
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Generic-클래스뷰-사용하기"><a href="#Generic-클래스뷰-사용하기" class="headerlink" title="Generic 클래스뷰 사용하기"></a>Generic 클래스뷰 사용하기</h2><br><p>mixin 클래스들을 사용하여서 우리의 뷰들은 그전보다 조금은 적은 양의 코드를 사용하도록 작성했었습니다. 하지만, 한단계 더 줄일수 있습니다. </p><br><p><code>REST FRAMEWORK</code> 은 이미 mixin 되어 있는 <code>generic</code> 뷰들을 제공하여, 우리가 우리의 <code>views.py</code> 를 조금 더 줄이는데 사용할수 있게 해줍니다. </p><br><p><code>snippets/views.py</code> 파일을 아래와 같이 수정해 줄수 있습니다. 조금 더 적은 양의 코드가 사용됩니다! </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet </span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer </span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(generics.ListCreateAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetDetail</span><span class="params">(generics.RetrieveUpdateDestroyAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    seriazlizer_class = SnippetSerializer</span><br></pre></td></tr></table></figure><br><p>와~ 엄청나게 간결해 집니다. 다음 튜토리얼에서는, API 에 대한 인증과 권한에 대해서 둘러볼것입니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/29/DRF-Tutorial-17%ED%8E%B8-generic-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%B7%B0-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 16편 - mixins 사용하기</title>
      <link>http://djangojeng-e.github.io/2020/11/28/DRF-Tutorial-16%ED%8E%B8-mixins-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/11/28/DRF-Tutorial-16%ED%8E%B8-mixins-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sat, 28 Nov 2020 06:44:50 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Mixins-사용하기&quot;&gt;&lt;a href=&quot;#Mixins-사용하기&quot; class=&quot;headerlink&quot; title=&quot;Mixins 사용하기&quot;&gt;&lt;/a&gt;Mixins 사용하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;클래스 기반 뷰를 사용하는것의 이점중 하나는, 어떠한 동작에 대해서 재사용할수 있는 코드를 작성할수 있다는 점입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;우리가 API 를 위해 이제까지 사용하고 있었던 &lt;code&gt;create/retrieve/update/delete&lt;/code&gt; 동작들은, 일반 Django 에서 우리가 생성하는 모델이 뒷받침 해주는 API View 들 안에서도 굉장히 비슷하게 사용될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;이런 비슷한 동작들은, REST FRAMEWORK 의 mixin 클래스에 구현 되어 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Mixins&lt;/strong&gt;&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;객체 지향 프로그램 언어들 안에서, &lt;/p&gt;
&lt;p&gt;mixin  은 메서드들을 포함하고 있는 하나의 클래스로, 메서드들은 다른 클래스들에 의해서 사용되는데, &lt;/p&gt;
&lt;p&gt;다른 클래스가 mixin 에 있는 메서드를 사용하기 위해서, mixin class 가 해당 클래스의 부모 클래스가 될 필요는 없습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;때때로, Mixins 들은 상속 개념보다는, 포함된다는 개념으로 묘사되곤 합니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;예를들면, mixin 클래스안에 있는 메서드를 다른 클래스가 사용을 하는데, 보통은 상속을 받아서 사용하지만, mixin 클래스는 굳이, mixins 클래스 안에 있는 매서드를 다른 클래스가 사용한다해도, mixin 클래스가 다른 클래스의 부모 클래스가 될 필요는 없습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;어떻게 mixin 클래스를 사용해서 뷰를 작성할수 있는지 둘러봅시다. &lt;code&gt;snippets/views.py&lt;/code&gt; 파일을 다시 봅니다.&lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Mixins-사용하기"><a href="#Mixins-사용하기" class="headerlink" title="Mixins 사용하기"></a>Mixins 사용하기</h2><br><p>클래스 기반 뷰를 사용하는것의 이점중 하나는, 어떠한 동작에 대해서 재사용할수 있는 코드를 작성할수 있다는 점입니다. </p><br><p>우리가 API 를 위해 이제까지 사용하고 있었던 <code>create/retrieve/update/delete</code> 동작들은, 일반 Django 에서 우리가 생성하는 모델이 뒷받침 해주는 API View 들 안에서도 굉장히 비슷하게 사용될수 있습니다. </p><br><p>이런 비슷한 동작들은, REST FRAMEWORK 의 mixin 클래스에 구현 되어 있습니다. </p><br><blockquote><p><strong>Mixins</strong></p><br><p>객체 지향 프로그램 언어들 안에서, </p><p>mixin  은 메서드들을 포함하고 있는 하나의 클래스로, 메서드들은 다른 클래스들에 의해서 사용되는데, </p><p>다른 클래스가 mixin 에 있는 메서드를 사용하기 위해서, mixin class 가 해당 클래스의 부모 클래스가 될 필요는 없습니다. </p><br><p>때때로, Mixins 들은 상속 개념보다는, 포함된다는 개념으로 묘사되곤 합니다. </p></blockquote><br><p>예를들면, mixin 클래스안에 있는 메서드를 다른 클래스가 사용을 하는데, 보통은 상속을 받아서 사용하지만, mixin 클래스는 굳이, mixins 클래스 안에 있는 매서드를 다른 클래스가 사용한다해도, mixin 클래스가 다른 클래스의 부모 클래스가 될 필요는 없습니다. </p><br><p>어떻게 mixin 클래스를 사용해서 뷰를 작성할수 있는지 둘러봅시다. <code>snippets/views.py</code> 파일을 다시 봅니다.</p><br><a id="more"></a><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet</span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> mixins </span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> generics </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(mixins.ListModelMixin, mixins.CreateModeMixin,generics.GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.lisst(request,*args, **kwargs)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.create(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><br><p>잠시 어떤일이 일어났는지 확인해 보고 갑니다. </p><br><p>우리는 <code>GenericAPIView</code> 그리고, <code>ListModelMixin</code> 과 <code>CreateModelMixin</code> 을 추가하여 우리의 뷰를 재구성 해보았습니다 (이 세가지는 모두, SnippetList 클래스가 상속 받습니다) </p><br><p>기본 클래스는 코어 기능을 제공하고, mixin 클래스들은, <code>list()</code> 와 <code>create()</code> 액션들을 제공합니다. </p><p><br>따라서 우리는, 명시적으로 <code>get</code> 과 <code>post</code> 메서드들을 적절한 액션들에 묶어둘수 있습니다. </p><br><p><code>get</code> 은 <code>list()</code>에, <code>post</code> 는 <code>create()</code> 에 묶어 두는것을 확인 할수 있습니다. 현재까지는 충분히 간단합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetDetail</span><span class="params">(mixins.RetrieveModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                   mixins.UpdateModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                   mixins.DestroyModelMixin,</span></span></span><br><span class="line"><span class="class"><span class="params">                   generics.GenericAPIView)</span>:</span></span><br><span class="line">    queryset = Snippet.objects.all()</span><br><span class="line">    serializer_class = SnippetSerializer</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.retrieve(request, *args, **kwargs)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.update(request, *args, **kwargs)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.destroy(request, *args, **kwargs)</span><br></pre></td></tr></table></figure><br><p>꽤나 비슷합니다. 다시한번, 우리는 GenericAPIView 클래스를 사용하여, 코어 기능을 제공하고, 거기에 mixin 들을 추가하여, <code>.retrieve()</code>, <code>.update()</code> 그리고 <code>.destroy()</code> 기능 액션들을 제공합니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/28/DRF-Tutorial-16%ED%8E%B8-mixins-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 15편 - 클래스 기반 뷰</title>
      <link>http://djangojeng-e.github.io/2020/11/26/DRF-Tutorial-15%ED%8E%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/11/26/DRF-Tutorial-15%ED%8E%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0/</guid>
      <pubDate>Thu, 26 Nov 2020 09:29:28 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Class-based-view&quot;&gt;&lt;a href=&quot;#Class-based-view&quot; class=&quot;headerlink&quot; title=&quot;Class based view&quot;&gt;&lt;/a&gt;Class based view&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;우리는 우리의 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Class-based-view"><a href="#Class-based-view" class="headerlink" title="Class based view"></a>Class based view</h2><br><p>우리는 우리의 API 뷰들을 함수 기반 대신에 클래스 기반 뷰들을 이용하여 작성할수도 있습니다. </p><br><p>우리는 이것은 공통된 기능들을 재사용하고, 반복적이지 않게 하는 강력한 패턴으로 볼수 있습니다. 코드를 DRY 하게 해줄수 있습니다 (DRY 는 Don’t Repeat Yourself 의 약자).</p><br><h2 id="Rewriting-our-API-using-class-based-views"><a href="#Rewriting-our-API-using-class-based-views" class="headerlink" title="Rewriting our API using class-based views"></a>Rewriting our API using class-based views</h2><br><p>우리의 기존 뷰를 클래스 기반 뷰로 다시 작성하는것부터 시작을 할것 입니다. </p><br><p>이 모든것은 <code>snippets/views.py</code> 를 조금씩 리팩토링 해주면서 진행 합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet </span><br><span class="line"><span class="keyword">from</span> snippet.serializers <span class="keyword">import</span> SnippetSerializer </span><br><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> Http404</span><br><span class="line"><span class="keyword">from</span> rest_framework.views <span class="keyword">import</span> APIView </span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response </span><br><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetList</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List all snippets, or create a new snippet.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        snippets = Snippet.objects.all()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self, request, format=None)</span>:</span></span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br></pre></td></tr></table></figure><br><p>여기까지 아주 좋습니다. 이전과 꽤 비슷해 보입니다만, 우리는 다른 HTTP 메서드들을 사이에 두고 구분을 짓고 있습니다. 우리는, 우리의 인스턴스 뷰도 업데이트 해줄 것입니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetDetail</span><span class="params">(APIView)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a snippet instance.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_object</span><span class="params">(self, pk)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> Snippet.objects.get(pk=pk)</span><br><span class="line">        <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">            <span class="keyword">raise</span> Http404</span><br><span class="line">            </span><br><span class="line">     <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self, request, pk, format=None)</span>:</span></span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">put</span><span class="params">(self, request, pk, format=None)</span>:</span></span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(self, request, pk, format=None)</span>:</span></span><br><span class="line">        snippet = self.get_object(pk)</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><br><p>여기까지도 좋아 보입니다. 다시 한번, 코드는 여전히 함수 기반 뷰와 꽤나 비슷합니다. <code>snippets/urls.py</code> 또한 클래스 기반 뷰를 사용하기 위해서, 살짝 리펙터를 해줘야 합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path </span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns </span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'snippets/'</span>, views.SnippetList.as_view()),</span><br><span class="line">    path(<span class="string">'snippets/&lt;int:pk&gt;/'</span>, views.SnippetDetail.as_views()),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/26/DRF-Tutorial-15%ED%8E%B8-%ED%81%B4%EB%9E%98%EC%8A%A4-%EA%B8%B0%EB%B0%98-%EB%B7%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 14편 - Browsability</title>
      <link>http://djangojeng-e.github.io/2020/11/25/DRF-Tutorial-14%ED%8E%B8-Browsability/</link>
      <guid>http://djangojeng-e.github.io/2020/11/25/DRF-Tutorial-14%ED%8E%B8-Browsability/</guid>
      <pubDate>Wed, 25 Nov 2020 09:54:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Browsability&quot;&gt;&lt;a href=&quot;#Browsability&quot; class=&quot;headerlink&quot; title=&quot;Browsability&quot;&gt;&lt;/a&gt;Browsability&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;API 는 클라이언트 요청에 따라서 응답 컨
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Browsability"><a href="#Browsability" class="headerlink" title="Browsability"></a>Browsability</h2><br><p>API 는 클라이언트 요청에 따라서 응답 컨텐츠 유형을 선택하기 때문에, 웹브라우저에서 해당 리소스가 요청 되었을때. 기본값으로 HTML 형식으로 표현된 리소스를 반환합니다. </p><br><p>웹 브라우저로 볼수 있는 API 를 갖는다는것은, 사용하는데에 많은 이점이 됩니다. 그리고, API 를 개발하고 사용하는것을 쉽게 만들어 줍니다. </p><br><p>또한, 당신의 API 를 작업하고 싶은 다른 개발자들의 진입 장벽을 낮춰 줍니다. </p><br><p>browable 토픽 문서를 보면, browsable API 기능에 대한 더 많은 정보와 어떻게 커스터마이즈를 할수 있는지 볼수 있습니다. </p><br><h2 id="What’s-Next"><a href="#What’s-Next" class="headerlink" title="What’s Next?"></a>What’s Next?</h2><br><p>다음 토픽부터는, 클래스 기반 뷰를 사용하기 시작할겁니다. 어떻게 generic view 들이 우리가 써야하는 코드의 양을 줄여주는지 확인 할수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/25/DRF-Tutorial-14%ED%8E%B8-Browsability/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 13편 - 어떻게 보일까요?</title>
      <link>http://djangojeng-e.github.io/2020/11/24/DRF-Tutorial-13%ED%8E%B8-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%9D%BC%EA%B9%8C%EC%9A%94/</link>
      <guid>http://djangojeng-e.github.io/2020/11/24/DRF-Tutorial-13%ED%8E%B8-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%9D%BC%EA%B9%8C%EC%9A%94/</guid>
      <pubDate>Tue, 24 Nov 2020 07:07:56 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;How’s-it-looking&quot;&gt;&lt;a href=&quot;#How’s-it-looking&quot; class=&quot;headerlink&quot; title=&quot;How’s it looking?&quot;&gt;&lt;/a&gt;How’s it looking?&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;더 나아가서
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="How’s-it-looking"><a href="#How’s-it-looking" class="headerlink" title="How’s it looking?"></a>How’s it looking?</h2><br><p>더 나아가서, API 를 커맨드라인에서 테스트 해볼수 있습니다. </p><p><br>우리는, 유효하지 않은 요청을 보냈을때 발생하는 몇가지 더 좋은 에러들을 다루기도 하였지만, 모든것은 비슷하게 작동합니다. </p><br><p>이전처럼, 모든 snippets 의 리스트를 얻을수 있습니다. </p><br><p>서버를 실행하고, 새로운 터미널 창을 열어서, 아래 커맨드를 실행해 줍니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets</span><br></pre></td></tr></table></figure><br><p>아래와 같은 리스트가 나옵니다. </p><br><img src="/2020/11/24/DRF-Tutorial-13%ED%8E%B8-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%9D%BC%EA%B9%8C%EC%9A%94/image1.png" class=""><br><h2 id="응답의-포맷"><a href="#응답의-포맷" class="headerlink" title="응답의 포맷"></a>응답의 포맷</h2><br><blockquote><p>우리가 다시 받는 응답의 포멧을 제어할수도 있습니다. </p><p>Accept 헤더를 사용합니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets/ Accept:application/json    # JSON 요청 </span><br><span class="line">http http://127.0.0.1:8000/snippets/ Accept:text/html           # HTML 요청</span><br></pre></td></tr></table></figure><br><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><br><p>json 요청 </p><br><img src="/2020/11/24/DRF-Tutorial-13%ED%8E%B8-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%9D%BC%EA%B9%8C%EC%9A%94/image2.png" class=""><br><h3 id="HTML-요청"><a href="#HTML-요청" class="headerlink" title="HTML 요청"></a>HTML 요청</h3><br><img src="/2020/11/24/DRF-Tutorial-13%ED%8E%B8-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%9D%BC%EA%B9%8C%EC%9A%94/image3.png" class=""><br><p>혹은, 포맷 접미사를 붙여서 사용합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets.json  # JSON suffix </span><br><span class="line">http http://127.0.0.1:8000/snippets.api   # browsable API siffuix</span><br></pre></td></tr></table></figure><br><br><h3 id="요청의-포맷-제어"><a href="#요청의-포맷-제어" class="headerlink" title="요청의 포맷 제어"></a>요청의 포맷 제어</h3><br><blockquote><p>비슷한 방식으로, 우리는 우리가 보내는 요청의 포맷을 제어할수 있습니다 </p><p>content-type-header 를 사용해서, 요청의 포맷을 제어합니다. </p></blockquote><br><img src="/2020/11/24/DRF-Tutorial-13%ED%8E%B8-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%9D%BC%EA%B9%8C%EC%9A%94/image4.png" class=""><br><p>만약 <code>--debug</code> 스위치를 위의 http 요청에 추가한다면, 요청 타입을 요청의 헤더 안에서 볼수 있습니다. </p><p><br>이제, API 를 웹 브라우저에서 열어봅니다 <code>http://127.0.0.1:8000/snippets/</code></p><br><img src="/2020/11/24/DRF-Tutorial-13%ED%8E%B8-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%9D%BC%EA%B9%8C%EC%9A%94/image5.png" class=""><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/24/DRF-Tutorial-13%ED%8E%B8-%EC%96%B4%EB%96%BB%EA%B2%8C-%EB%B3%B4%EC%9D%BC%EA%B9%8C%EC%9A%94/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 12편 - URL에 Suffix 추가하기</title>
      <link>http://djangojeng-e.github.io/2020/11/23/DRF-Tutorial-12%ED%8E%B8-URL%EC%97%90-Suffix-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/11/23/DRF-Tutorial-12%ED%8E%B8-URL%EC%97%90-Suffix-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Mon, 23 Nov 2020 10:32:11 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Adding-optional-format-suffixes-to-our-URLs&quot;&gt;&lt;a href=&quot;#Adding-optional-format-suffixes-to-our-URLs&quot; class=&quot;headerlink&quot; title=&quot;Adding
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Adding-optional-format-suffixes-to-our-URLs"><a href="#Adding-optional-format-suffixes-to-our-URLs" class="headerlink" title="Adding optional format suffixes to our URLs"></a>Adding optional format suffixes to our URLs</h2><br><p>우리의 응답들이 더이상 하나의 컨텐트 유형에 묶여 있지 않는다는 사실의 장점을 이용하기 위해서, 우리의 API endpoints 에 추가 접미사 포맷을 추가해 줍니다. </p><br><p>format suffixes 를 사용하면, 명시적으로 주어진 포맷을 참조하게 하는 URL 을 가질수 있고, 우리의 API 가 <code>http://example.com/api/items/4</code>.json  같은 URL 들을 다룰수 있다는것을 의미 해줍니다. </p><br><blockquote><p>format 키워드 인자들을, 두 views 에 추가해주면서 시작해줍니다. </p><p><code>snippets/views.py</code> 파일을 열고, </p><br><p><code>snippet_list</code> 와 <code>snippet_detail</code> 에 format 키워드 인자들을 추가해줍니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_list</span><span class="params">(request, format=None)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">snippet_detail</span><span class="params">(request, format=None)</span></span></span><br></pre></td></tr></table></figure><br><h2 id="urls-py-파일을-업데이트-해주기"><a href="#urls-py-파일을-업데이트-해주기" class="headerlink" title="urls.py 파일을 업데이트 해주기"></a>urls.py 파일을 업데이트 해주기</h2><br><p>이제, <code>snippets/urls.py</code> 파일을 조금 업데이트 해줍니다. <code>format_suffix_patterns</code> 를 기존에 존재하고 있던 URLs 에 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path </span><br><span class="line"><span class="keyword">from</span> rest_framework.urlpatterns <span class="keyword">import</span> format_suffix_patterns </span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'snippets/'</span>, views.snippet_list),</span><br><span class="line">    path(<span class="string">'snippets/&lt;int:pk&gt;'</span>, views.snippet_detail),</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">urlpatterns = format_suffix_patterns(urlpatterns)</span><br></pre></td></tr></table></figure><br><p>우리는, 이 추가적인 url patterns 들을 꼭 추가해줄 필요는 없지만, 추가해줌으로써 특정 포맷을 참조하는 간단하고 깔끔한 방법을 가질수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/23/DRF-Tutorial-12%ED%8E%B8-URL%EC%97%90-Suffix-%EC%B6%94%EA%B0%80%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 11편 - Pulling it all together</title>
      <link>http://djangojeng-e.github.io/2020/11/22/DRF-Tutorial-11%ED%8E%B8-Pulling-it-all-together/</link>
      <guid>http://djangojeng-e.github.io/2020/11/22/DRF-Tutorial-11%ED%8E%B8-Pulling-it-all-together/</guid>
      <pubDate>Sun, 22 Nov 2020 00:15:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Pulling-it-all-together&quot;&gt;&lt;a href=&quot;#Pulling-it-all-together&quot; class=&quot;headerlink&quot; title=&quot;Pulling it all together&quot;&gt;&lt;/a&gt;Pulling it all to
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Pulling-it-all-together"><a href="#Pulling-it-all-together" class="headerlink" title="Pulling it all together"></a>Pulling it all together</h2><br><p>이제 더 앞으로 나아가서, 새로운 컴포넌트를 사용하여 우리의 views 를 조금 더 리펙터 해봅시다. </p><p><br><code>snippets/views.py</code>  파일을 아래와 같이 고쳐줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> status</span><br><span class="line"><span class="keyword">from</span> rest_framework.decorators <span class="keyword">import</span> api_view </span><br><span class="line"><span class="keyword">from</span> rest_framework.response <span class="keyword">import</span> Response </span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet </span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@api_view(['GET', 'POST'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List all code snippets, or create a new snippet </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        snippets = Snippet.objects.all()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"POST"</span>:</span><br><span class="line">        serializer = SnippetSerializer(data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data, status=status.HTTP_201_CREATED)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQEUST)</span><br></pre></td></tr></table></figure><br><p>우리의 인스턴스 뷰는 지난 예시보다 조금 향상되었습니다. 조금 더 간결하고, 코드는 이제 Forms API 와 작업하는것과 더 많이 비슷한 느낌입니다. 우리는 또한, 이름을 가진 상태값들을 사용하여, 응답들이 의미하는바를 좀 더 명확하게 해줍니다. </p><br><p>개별 snippet 에 대한 뷰는 아래의 예시처럼 고쳐줍니다. <code>snippet/views.py</code> 를 아래와 같이 수정해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@api_view(['GET', 'PUT', 'DELETE'])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_detail</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a code snippet.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        snippet = Snippet.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_404_NOT_FOUND)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> Response(seriazlier.data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">"PUT"</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=request.data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> Response(serializer.data)</span><br><span class="line">        <span class="keyword">return</span> Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'DELETE'</span>:</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> Response(status=status.HTTP_204_NO_CONTENT)</span><br></pre></td></tr></table></figure><br><p>이는 충분히 친근하게 느껴야 합니다 - 일반 Django views 들을 작업하는것과 많이 다르지 않습니다. </p><br><p>우리는 이제 더이상 주어진 컨텐트 종류에 request 혹은 response 들을 묶어주지 않는다는것을 알아 차려야 합니다. request.data 는 들어오는 json 요청들을 다룹니다. 하지만, request.data 는 다른 포멧들을 다룰수 있습니다. </p><br><p>비슷한 방식으로 우리는 데이터를 가진 응답 객체들을 반환하고 있습니다만, REST framework 가 응답을 맞는 형태의 컨텐트 타입을 렌더하게 해줍니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/22/DRF-Tutorial-11%ED%8E%B8-Pulling-it-all-together/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 10편 - API View 감싸주기</title>
      <link>http://djangojeng-e.github.io/2020/11/22/DRF-Tutorial-10%ED%8E%B8-API-View-%EA%B0%90%EC%8B%B8%EC%A3%BC%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/11/22/DRF-Tutorial-10%ED%8E%B8-API-View-%EA%B0%90%EC%8B%B8%EC%A3%BC%EA%B8%B0/</guid>
      <pubDate>Sun, 22 Nov 2020 00:11:48 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Wrapping-API-Views&quot;&gt;&lt;a href=&quot;#Wrapping-API-Views&quot; class=&quot;headerlink&quot; title=&quot;Wrapping API Views&quot;&gt;&lt;/a&gt;Wrapping API Views&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Wrapping-API-Views"><a href="#Wrapping-API-Views" class="headerlink" title="Wrapping API Views"></a>Wrapping API Views</h2><br><p>REST framework 은 API VIews 를 작성할때 감싸줄수 있는 두가지 레퍼를 제공합니다. </p><br><blockquote><ol><li>함수 기반 뷰들을 작성할때 사용할 <code>@api_view</code> 데코레이터 </li><li>클래스 기반 뷰들을 작성할때 사용할 APIView 클래스 </li></ol></blockquote><br><p>이 레퍼들은 약간의 기능들을 제공합니다, view 가 Request 인스턴스를 받는것을 확실하게 하거나, Response 객체에 컨텍스트를 추가하여, content negotiation  이 동작하게 만듭니다 </p><br><p>이 레퍼들은 또한, 적절한 때에, 405 Method Not Allowed 같은 응답을 반환하는 동작을 제공하기도 합니다. 그리고, 잘못된 데이터로 request.data 에 접근하려 할때 일어나는 그 어떠한 ParseError 도 다루고 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/22/DRF-Tutorial-10%ED%8E%B8-API-View-%EA%B0%90%EC%8B%B8%EC%A3%BC%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 9편 - 상태코드</title>
      <link>http://djangojeng-e.github.io/2020/11/22/DRF-Tutorial-9%ED%8E%B8-%EC%83%81%ED%83%9C%EC%BD%94%EB%93%9C/</link>
      <guid>http://djangojeng-e.github.io/2020/11/22/DRF-Tutorial-9%ED%8E%B8-%EC%83%81%ED%83%9C%EC%BD%94%EB%93%9C/</guid>
      <pubDate>Sun, 22 Nov 2020 00:08:12 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Status-Codes&quot;&gt;&lt;a href=&quot;#Status-Codes&quot; class=&quot;headerlink&quot; title=&quot;Status Codes&quot;&gt;&lt;/a&gt;Status Codes&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;&lt;code&gt;HTTP&lt;/code&gt; 요청에대한 
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Status-Codes"><a href="#Status-Codes" class="headerlink" title="Status Codes"></a>Status Codes</h2><br><p><code>HTTP</code> 요청에대한 상태를 표시하는 상태 코드들이 존재합니다. 숫자로된 HTTP 상태 코드들을 당신의 view 에서 사용하는것은, 언제나 명확하게 읽혀지지 않습니다. 그리고, 만약 당신이 틀린 에러 코드를 갖게되더라도, 알아채기 쉽지 않습니다. </p><br><p>따라서, REST framework 은 조금 더 명확한 식별자들을 각 상태 코드에 부여합니다. status 모듈안에 있는, <code>HTTP_400_BAD_REQUEST</code> 같이 말이죠. </p><br><p>숫자로 된 식별자들을 사용하는것보다, 이러한 RESTFramework 에서 제공하는 좀 더 명시적인 식별자들을 사용하는것이 더 좋은 생각이 될것 입니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/22/DRF-Tutorial-9%ED%8E%B8-%EC%83%81%ED%83%9C%EC%BD%94%EB%93%9C/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 8편 - DRF Tutorial 8편 - 요청과 응답</title>
      <link>http://djangojeng-e.github.io/2020/11/21/DRF-Tutorial-8%ED%8E%B8-DRF-Tutorial-8%ED%8E%B8-%EC%9A%94%EC%B2%AD%EA%B3%BC-%EC%9D%91%EB%8B%B5/</link>
      <guid>http://djangojeng-e.github.io/2020/11/21/DRF-Tutorial-8%ED%8E%B8-DRF-Tutorial-8%ED%8E%B8-%EC%9A%94%EC%B2%AD%EA%B3%BC-%EC%9D%91%EB%8B%B5/</guid>
      <pubDate>Sat, 21 Nov 2020 05:44:19 GMT</pubDate>
      <description>
      
        
        
          &lt;br&gt;

&lt;h2 id=&quot;Requests-and-Responses&quot;&gt;&lt;a href=&quot;#Requests-and-Responses&quot; class=&quot;headerlink&quot; title=&quot;Requests and Responses&quot;&gt;&lt;/a&gt;Requests and R
        
      
      </description>
      
      
      <content:encoded><![CDATA[<br><h2 id="Requests-and-Responses"><a href="#Requests-and-Responses" class="headerlink" title="Requests and Responses"></a>Requests and Responses</h2><br><blockquote><p>이제부터 우리는,</p><p>진짜로 REST framework 의 주요 사항들을 볼것입니다. </p><p>몇가지 필수 사항들을 소개해 봅시다. </p></blockquote><br><h2 id="Request-objects"><a href="#Request-objects" class="headerlink" title="Request objects"></a>Request objects</h2><br><p>REST Framework 은 일반 HttpResponse 를 확장하는 Request 객체를 소개하고, </p><p>조금 더 유연한 파싱을 제공합니다. Request 객체의 주요 기능은,  <code>request.data</code> 속성이고, </p><br><p>이것은, request.POST 와 비슷하지만, Web API 를 작업할때 좀 더 유용합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request.POST </span><br><span class="line"><span class="comment"># only handles form data. Only works for 'POST' method</span></span><br><span class="line"><span class="comment"># 폼 데이터만 다루고, 오로지 POST 메서드에만 동작합니다. </span></span><br><span class="line"></span><br><span class="line">request.data</span><br><span class="line"><span class="comment"># 임의의 데이터를 다룰수 있고, </span></span><br><span class="line"><span class="comment"># 'POST', 'PUT' 그리고 'PATCH' 메서드들을 위해 동작합니다</span></span><br></pre></td></tr></table></figure><br><h2 id="Response-objects"><a href="#Response-objects" class="headerlink" title="Response objects"></a>Response objects</h2><br><p>REST Framework 은 Response 객체도 가지고 있습니다.</p><p><br>이것은, TemplateResponse 의 종류로, 렌더되지 않은 컨텐트와 content negotiation 을 사용하여, </p><br><p>클라이언트에게 반환할 적절한 컨텐트 종류를 결정합니다. </p><br><blockquote><p><strong>Content Negotiation</strong></p><p>동일한 URI 에서 리소스의 서로 다른 버전을 수행하기 위해 사용되는 메커니즘으로,</p><p>사용자 에이전트가 사용자에게 제일 잘 맞는것이 무엇인지를 명시할수 있습니다. </p><p>예) 문서의 언어, 이미지, 포맷 혹은 콘텐츠 인코딩에 있어서 어떤것이 적절할지를 정함.</p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> Response(data)</span><br><span class="line"><span class="comment"># Renders to content type as requested by the client </span></span><br><span class="line"><span class="comment"># 클라이언트가 요청한 content 종류를 렌더해줌</span></span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/21/DRF-Tutorial-8%ED%8E%B8-DRF-Tutorial-8%ED%8E%B8-%EC%9A%94%EC%B2%AD%EA%B3%BC-%EC%9D%91%EB%8B%B5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 7편 - Web API 에 첫번째 시도 테스트</title>
      <link>http://djangojeng-e.github.io/2020/11/20/DRF-Tutorial-7%ED%8E%B8-Web-API-%EC%97%90-%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84-%ED%85%8C%EC%8A%A4%ED%8A%B8/</link>
      <guid>http://djangojeng-e.github.io/2020/11/20/DRF-Tutorial-7%ED%8E%B8-Web-API-%EC%97%90-%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84-%ED%85%8C%EC%8A%A4%ED%8A%B8/</guid>
      <pubDate>Thu, 19 Nov 2020 23:30:53 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;WEB-API-에-첫번째-테스트&quot;&gt;&lt;a href=&quot;#WEB-API-에-첫번째-테스트&quot; class=&quot;headerlink&quot; title=&quot;WEB API 에 첫번째 테스트&quot;&gt;&lt;/a&gt;WEB API 에 첫번째 테스트&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;샘플 서
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="WEB-API-에-첫번째-테스트"><a href="#WEB-API-에-첫번째-테스트" class="headerlink" title="WEB API 에 첫번째 테스트"></a>WEB API 에 첫번째 테스트</h2><br><p>샘플 서버를 시작하고, snippets 을 확인해 볼수 있습니다. </p><br><h3 id="Django-개발-서버-구동"><a href="#Django-개발-서버-구동" class="headerlink" title="Django 개발 서버 구동"></a>Django 개발 서버 구동</h3><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py runserver</span><br></pre></td></tr></table></figure><br><p>서버를 실행하고, 다른 터미널에서 서버를 테스트 해볼수 있습니다. </p><br><h3 id="Httpie-설치-및-사용"><a href="#Httpie-설치-및-사용" class="headerlink" title="Httpie 설치 및 사용"></a>Httpie 설치 및 사용</h3><br><p>우리는, 우리가 작성한 API  를 curl  혹은 httpie 를 사용하여 테스트 할수 있습니다. </p><br><blockquote><p>Httpie 는 </p><p>파이썬으로 작성된, user-friendly 한 http client 입니다 </p></blockquote><br><p>아래 명령어를 터미널에서 실행하여, httpie 를 설치해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install httpie</span><br></pre></td></tr></table></figure><br><p>터미널을 열어서, 서버를 실행 시키고, 다른 터미널을 열어서 아래 명령어를 실행합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets/</span><br></pre></td></tr></table></figure><br><p>아래와 같이, 이제까지 생성한 snippets 이 조회가 됩니다. </p><br><img src="/2020/11/20/DRF-Tutorial-7%ED%8E%B8-Web-API-%EC%97%90-%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84-%ED%85%8C%EC%8A%A4%ED%8A%B8/image1.png" class=""><br><p>혹은, 특정 snippet 을 id 를 참조하여 얻을수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http http://127.0.0.1:8000/snippets/2</span><br></pre></td></tr></table></figure><br><img src="/2020/11/20/DRF-Tutorial-7%ED%8E%B8-Web-API-%EC%97%90-%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84-%ED%85%8C%EC%8A%A4%ED%8A%B8/image2.png" class=""><br><h3 id="브라우저로-확인하기"><a href="#브라우저로-확인하기" class="headerlink" title="브라우저로 확인하기"></a>브라우저로 확인하기</h3><br><p>위의 방식은 터미널에서 http 방식으로 해당 API 에 접근하여 Json 을 얻었지만. </p><p><br>위의 URL 을 브라우저에서 접속해도, 같은 json 이 표시되는것을 확인할수 있습니다. </p><br><img src="/2020/11/20/DRF-Tutorial-7%ED%8E%B8-Web-API-%EC%97%90-%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84-%ED%85%8C%EC%8A%A4%ED%8A%B8/image3.png" class=""><img src="/2020/11/20/DRF-Tutorial-7%ED%8E%B8-Web-API-%EC%97%90-%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84-%ED%85%8C%EC%8A%A4%ED%8A%B8/image4.png" class="">]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/20/DRF-Tutorial-7%ED%8E%B8-Web-API-%EC%97%90-%EC%B2%AB%EB%B2%88%EC%A7%B8-%EC%8B%9C%EB%8F%84-%ED%85%8C%EC%8A%A4%ED%8A%B8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 6편 - Serializer 를 사용하는 Django 뷰</title>
      <link>http://djangojeng-e.github.io/2020/11/19/DRF-Tutorial-6%ED%8E%B8-Serializer-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-Django-%EB%B7%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/11/19/DRF-Tutorial-6%ED%8E%B8-Serializer-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-Django-%EB%B7%B0/</guid>
      <pubDate>Thu, 19 Nov 2020 09:39:31 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Serializer-를-사용하는-Django-Views-사용하기&quot;&gt;&lt;a href=&quot;#Serializer-를-사용하는-Django-Views-사용하기&quot; class=&quot;headerlink&quot; title=&quot;Serializer 를 사용하는 Django Views 사용하기&quot;&gt;&lt;/a&gt;Serializer 를 사용하는 Django Views 사용하기&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;우리의 Serializer 클래스를 사용하는 몇가지 API 뷰들을 어떻게 작성하는지 봅시다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;현재까지 우리는, REST framework 의 그 어떤 다른 기능도 사용하지 않을것입니다. 우리는 그저 일반 Django views 와 같은 views 만 작성해 볼겁니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;snippets/views.py&lt;/code&gt; 파일을 열고, 아래 내용을 추가해 줍니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.http &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; HttpResponse, JsonResponse &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.views.decorators.csrf &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; csrf_exempt &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; rest_framework.parsers &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; JSONParser &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; snippets.models &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Snippet &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; snippets.serializers &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; SnippetSerializer&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;우리 API 의 기본은, &lt;/p&gt;
&lt;p&gt;존재하는 모든 snippets 들을 리스팅 하거나, 혹은 새로운 snippet  을 생성하는것입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;@csrf_exempt &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;snippet_list&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    List all code snippets, or create a new snippet. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    존재하는 모든 스니펫들을 나열하거나, 혹은 새러운 스니펫을 생성합니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;    &quot;&quot;&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; request.method == &lt;span class=&quot;string&quot;&gt;&quot;GET&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        snippets = Snippet.objects.all()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        serializer = SnippetSerializer(snippets, many=&lt;span class=&quot;literal&quot;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JsonResponse(serializer.data, safe=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;elif&lt;/span&gt; request.method == &lt;span class=&quot;string&quot;&gt;&#39;POST&#39;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        data = JSONParser().parse(request)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        serializer = SnippetSerializer(data=data)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; serializer.is_valid():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            serializer.save()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JsonResponse(serializer.data, status=&lt;span class=&quot;number&quot;&gt;201&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; JsonResponse(serializer.errors, status=&lt;span class=&quot;number&quot;&gt;400&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;우리는 이 views 에 클라이언트로부터 CRSF token 이 없는 POST 방식이 가능해야 하기 때문에,&lt;/p&gt;
&lt;p&gt;해당 view 에 csrf_exempt 를 표시해 줍니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;이것은 보통 원하지 않는 방식이고, REST framework view 는 사실 좀 더 이것보다 민감한것도 사용하기도 합니다. 어쨋거나, 지금은 우리의 목적을 수행 할것입니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Serializer-를-사용하는-Django-Views-사용하기"><a href="#Serializer-를-사용하는-Django-Views-사용하기" class="headerlink" title="Serializer 를 사용하는 Django Views 사용하기"></a>Serializer 를 사용하는 Django Views 사용하기</h2><br><p>우리의 Serializer 클래스를 사용하는 몇가지 API 뷰들을 어떻게 작성하는지 봅시다. </p><p><br>현재까지 우리는, REST framework 의 그 어떤 다른 기능도 사용하지 않을것입니다. 우리는 그저 일반 Django views 와 같은 views 만 작성해 볼겁니다. </p><br><p><code>snippets/views.py</code> 파일을 열고, 아래 내용을 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponse, JsonResponse </span><br><span class="line"><span class="keyword">from</span> django.views.decorators.csrf <span class="keyword">import</span> csrf_exempt </span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser </span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet </span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer</span><br></pre></td></tr></table></figure><br><blockquote><p>우리 API 의 기본은, </p><p>존재하는 모든 snippets 들을 리스팅 하거나, 혹은 새로운 snippet  을 생성하는것입니다. </p></blockquote><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_list</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    List all code snippets, or create a new snippet. </span></span><br><span class="line"><span class="string">    존재하는 모든 스니펫들을 나열하거나, 혹은 새러운 스니펫을 생성합니다. </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"GET"</span>:</span><br><span class="line">        snippets = Snippet.objects.all()</span><br><span class="line">        serializer = SnippetSerializer(snippets, many=<span class="literal">True</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data, safe=<span class="literal">False</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'POST'</span>:</span><br><span class="line">        data = JSONParser().parse(request)</span><br><span class="line">        serializer = SnippetSerializer(data=data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serializer.data, status=<span class="number">201</span>)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>우리는 이 views 에 클라이언트로부터 CRSF token 이 없는 POST 방식이 가능해야 하기 때문에,</p><p>해당 view 에 csrf_exempt 를 표시해 줍니다. </p></blockquote><br><p>이것은 보통 원하지 않는 방식이고, REST framework view 는 사실 좀 더 이것보다 민감한것도 사용하기도 합니다. 어쨋거나, 지금은 우리의 목적을 수행 할것입니다. </p><br><a id="more"></a><br><h2 id="Snippet-에-해당하는-view"><a href="#Snippet-에-해당하는-view" class="headerlink" title="Snippet 에 해당하는 view"></a>Snippet 에 해당하는 view</h2><br><p>또한, 우리는 각 snippet 에 해당하는 view 도 필요할것입니다. </p><br><p>이 view 는 snipept 을 조회, 업데이트 혹은 삭제 할때 쓸수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@csrf_exempt </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">snippet_detail</span><span class="params">(request, pk)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    Retrieve, update or delete a code snippet </span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        snippet = Snippet.objects.get(pk=pk)</span><br><span class="line">    <span class="keyword">except</span> Snippet.DoesNotExist:</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">404</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">'GET'</span>:</span><br><span class="line">        serializer = SnippetSerializer(snippet)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.data)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'PUT'</span>:</span><br><span class="line">        data = JSONParser().parse(request)</span><br><span class="line">        serializer = SnippetSerializer(snippet, data=data)</span><br><span class="line">        <span class="keyword">if</span> serializer.is_valid():</span><br><span class="line">            serializer.save()</span><br><span class="line">            <span class="keyword">return</span> JsonResponse(serailzier.data)</span><br><span class="line">        <span class="keyword">return</span> JsonResponse(serializer.errors, status=<span class="number">400</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">'DELETE'</span>:</span><br><span class="line">        snippet.delete()</span><br><span class="line">        <span class="keyword">return</span> HttpResponse(status=<span class="number">204</span>)</span><br></pre></td></tr></table></figure><br><h2 id="urls-py"><a href="#urls-py" class="headerlink" title="urls.py"></a>urls.py</h2><br><p>마지막으로, 이 view 들을 urls 에 묶어줘야 합니다. <code>snippets/urls.py</code> 파일을 생성합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path </span><br><span class="line"><span class="keyword">from</span> snippets <span class="keyword">import</span> views </span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">'snippets/'</span>, views.snippet_list),</span><br><span class="line">    path(<span class="string">'snippets/&lt;int:pk&gt;/'</span>, views.snippet_detail),</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p>우리는 root urlconf 에도 설정을 해주어야 합니다. </p><p><br><code>tutorial/urls.py</code> 파일안에, 우리의 snippet app의 URL 을 포함시켜 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.urls <span class="keyword">import</span> path, include</span><br><span class="line"></span><br><span class="line">urlpatterns = [</span><br><span class="line">    path(<span class="string">''</span>, incldue(<span class="string">'snippets.urls'</span>))</span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p>현재, 몇가지 사항들에 대해서는, 완벽하게 처리하고 있지는 않기는 합니다.  </p><br><p>만약 우리가 망가진 json을 보내거나, 요청이 view 가 다룰수 없는 메서드로 만들어져 있으면, 우리는 500 “server error” 응답을 받을것입니다. </p><br><p>그렇지만, 일단 이것은 우리가 원하는 목적 안에서는 잘 작동할것 입니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/19/DRF-Tutorial-6%ED%8E%B8-Serializer-%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-Django-%EB%B7%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 5편 - ModelSerializers 사용하기</title>
      <link>http://djangojeng-e.github.io/2020/11/18/DRF-Tutorial-5%ED%8E%B8-ModelSerializers-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/11/18/DRF-Tutorial-5%ED%8E%B8-ModelSerializers-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 17 Nov 2020 23:55:10 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;ModelSerializer-사용하기&quot;&gt;&lt;a href=&quot;#ModelSerializer-사용하기&quot; class=&quot;headerlink&quot; title=&quot;ModelSerializer 사용하기&quot;&gt;&lt;/a&gt;ModelSerializer 사용하기&lt;/h2&gt;&lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="ModelSerializer-사용하기"><a href="#ModelSerializer-사용하기" class="headerlink" title="ModelSerializer 사용하기"></a>ModelSerializer 사용하기</h2><br><p>우리의 SnippetSerializer 클래스는 Snippet 모델에 있는 많은 정보를 복제하며 사용하고 있습니다. </p><br><p>Django 가 Form 클래스와 ModelForm 클래스를 제공하는 같은 방식으로, </p><br><blockquote><p>REST FRAMEWORK 은 </p><p>Serializer 클래스들과 ModelSerializer 클래스들을 가지고 있습니다. </p></blockquote><br><p>우리의 Serializer 를 <code>ModelSerializer</code> 를 사용하여, 리펙토링 해봅시다. </p><p><br><code>snippets/serializers.py</code> 파일을 열고, <code>SnippetSerializer</code> 클래스를 아래와 같이 고쳐줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.ModelSerializer)</span>:</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        model = Snippet</span><br><span class="line">        field = [<span class="string">'id'</span>, <span class="string">'title'</span>, <span class="string">'code'</span>, <span class="string">'linnos'</span>, <span class="string">'language'</span>, <span class="string">'style'</span>]</span><br></pre></td></tr></table></figure><br><p>serializers 가 좋은 점중 하나는, serializer 인스턴스 안에 모든 필드들을 검사할수 있다는 점입니다. 이는, representation 을 프린트 해보면 됩니다. Django shell 을 <code>python manage.py shell</code> 을 실행하여 열고, 아래 코드들을 실행 시켜 보세요. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">1</span>]: <span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer                                                                                                                </span><br><span class="line"></span><br><span class="line">In [<span class="number">2</span>]: serializer = SnippetSerializer()                                                                                                                                  </span><br><span class="line"></span><br><span class="line">In [<span class="number">3</span>]: print(repr(serializer))                                                                                                                                           </span><br><span class="line">SnippetSerializer():</span><br><span class="line">    id = IntegerField(label=<span class="string">'ID'</span>, read_only=<span class="literal">True</span>)</span><br><span class="line">    title = CharField(allow_blank=<span class="literal">True</span>, max_length=<span class="number">100</span>, required=<span class="literal">False</span>)</span><br><span class="line">    code = CharField(style=&#123;<span class="string">'base_template'</span>: <span class="string">'textarea.html'</span>&#125;)</span><br><span class="line">    linenos = BooleanField(required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>ModelSerializer 클래스는 특별하고 마법같은 일은 하지 않습니다. </p><p>그저 Serializer 클래스들을 줄여주는 숏컷일 뿐이라는것을 기억하는것이 좋습니다. </p><p>아래 일들만 살짝 줄여줄뿐, 또다른 특별한 메서드는 아닙니다. </p><ul><li>자동으로 지정된 필드</li><li><code>create()</code> 그리고 <code>update()</code> 메서드의 간단한 기본 구현 가능 </li></ul></blockquote><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/18/DRF-Tutorial-5%ED%8E%B8-ModelSerializers-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 4편 - Serializer로 작업하기</title>
      <link>http://djangojeng-e.github.io/2020/11/17/DRF-Tutorial-4%ED%8E%B8-Serializer%EB%A1%9C-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/11/17/DRF-Tutorial-4%ED%8E%B8-Serializer%EB%A1%9C-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Tue, 17 Nov 2020 00:06:30 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Serializer-로-작업하기&quot;&gt;&lt;a href=&quot;#Serializer-로-작업하기&quot; class=&quot;headerlink&quot; title=&quot;Serializer 로 작업하기&quot;&gt;&lt;/a&gt;Serializer 로 작업하기&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Serializer-로-작업하기"><a href="#Serializer-로-작업하기" class="headerlink" title="Serializer 로 작업하기"></a>Serializer 로 작업하기</h2><br><h3 id="Working-with-Serializers-serializer-로-작업하기"><a href="#Working-with-Serializers-serializer-로-작업하기" class="headerlink" title="Working with Serializers (serializer 로 작업하기)"></a>Working with Serializers (serializer 로 작업하기)</h3><br><p>더 진행 하기 전에, Serializer 클래스를 사용하는데에 친숙해져야 합니다. 연습을 하기 위해서, 아래 명령어를 실행하여 Django shell 에 접속해 봅니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py shell</span><br></pre></td></tr></table></figure><br><h4 id="인스턴스-생성"><a href="#인스턴스-생성" class="headerlink" title="인스턴스 생성"></a>인스턴스 생성</h4><br><p>몇가지 모듈을 불러와 놓고, 우리가 사용해볼 몇가지 코드 snippet 을 생성해 봅시다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet </span><br><span class="line"><span class="keyword">from</span> snippets.serializers <span class="keyword">import</span> SnippetSerializer </span><br><span class="line"><span class="keyword">from</span> rest_framework.renderers <span class="keyword">import</span> JSONRenderer </span><br><span class="line"><span class="keyword">from</span> rest_framework.parsers <span class="keyword">import</span> JSONParser </span><br><span class="line"></span><br><span class="line">snippet = Snippet(code=<span class="string">'foo = "bar"\n'</span>)</span><br><span class="line">snippet.save() </span><br><span class="line"></span><br><span class="line">snippet = Snippet(code=<span class="string">'print("hello, world")\n'</span>)</span><br><span class="line">snippet.save()</span><br></pre></td></tr></table></figure><br><p>이제 우리는 가지고 놀수 있는 몇가지 snippet 인스턴스들을 가지고 있습니다. 이 인스턴스중 하나를 serializing 하는것을 둘러봅니다 </p><br><h4 id="인스턴스-serializing"><a href="#인스턴스-serializing" class="headerlink" title="인스턴스 serializing"></a>인스턴스 serializing</h4><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> serializers.py 에 작성된 SnippetSerializer 클래스를 불러오고 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> snippet 인스턴스를 인자로 넣어준다. </span></span><br><span class="line"></span><br><span class="line">In [11]: serializer = SnippetSerializer(snippet)                                                                                                                          </span><br><span class="line"></span><br><span class="line">In [12]: serializer.data                                                                                                                                                  </span><br><span class="line">Out[12]: &#123;'id': 2, 'title': '', 'code': 'print("hello, world")\n', 'linenos': False, 'language': 'python', 'style': 'friendly'&#125;</span><br></pre></td></tr></table></figure><br><p>여기서 우리는, 모델 인스턴스를 Python 의 기본 데이터 유형으로 전환하였습니다. </p><br><blockquote><p><code>serialization (직렬화)</code> 프로세스를 끝내기 위해서, 데이터를 json 으로 렌더해줍니다 </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [13]: content = JSONRenderer().render(serializer.data)                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [14]: content                                                                                                                                                          </span><br><span class="line">Out[14]: b'&#123;"id":2,"title":"","code":"print(\\"hello, world\\")\\n","linenos":false,"language":"python","style":"friendly"&#125;'</span><br></pre></td></tr></table></figure><br><h4 id="Deserializing-하기"><a href="#Deserializing-하기" class="headerlink" title="Deserializing 하기"></a>Deserializing 하기</h4><br><p><code>deserialization</code> 도 비슷합니다. json 으로 렌더되었던 content 를, <code>BytesIO</code> 로 전환한후에 stream 에 담아줍니다. 이 stream 을 <code>parse</code>   하여, Python 기본 데이터 유형으로 바꿔줍니다.  </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In [15]: import io                                                                                                                                                        </span><br><span class="line"></span><br><span class="line">In [16]: stream = io.BytesIO(content)                                                                                                                                     </span><br><span class="line"></span><br><span class="line">In [17]: data = JSONParser().parse(stream)                                                                                                                                </span><br><span class="line"></span><br><span class="line">In [18]: data                                                                                                                                                             </span><br><span class="line">Out[18]: </span><br><span class="line">&#123;'id': 2,</span><br><span class="line"> 'title': '',</span><br><span class="line"> 'code': 'print("hello, world")\n',</span><br><span class="line"> 'linenos': False,</span><br><span class="line"> 'language': 'python',</span><br><span class="line"> 'style': 'friendly'&#125;</span><br></pre></td></tr></table></figure><br><p>그리고 난 후에, 파이썬 기본 데이터 유형을 완벽하게 채워진 객체 인스턴스로 복원 합니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">In [<span class="number">19</span>]: serializer = SnippetSerializer(data=data)                                                                                                                        </span><br><span class="line"></span><br><span class="line">In [<span class="number">20</span>]: serializer.is_valid()                                                                                                                                            </span><br><span class="line">Out[<span class="number">20</span>]: <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">In [<span class="number">21</span>]: serializer.validated_data                                                                                                                                        </span><br><span class="line">Out[<span class="number">21</span>]: </span><br><span class="line">OrderedDict([(<span class="string">'title'</span>, <span class="string">''</span>),</span><br><span class="line">             (<span class="string">'code'</span>, <span class="string">'print("hello, world")'</span>),</span><br><span class="line">             (<span class="string">'linenos'</span>, <span class="literal">False</span>),</span><br><span class="line">             (<span class="string">'language'</span>, <span class="string">'python'</span>),</span><br><span class="line">             (<span class="string">'style'</span>, <span class="string">'friendly'</span>)])</span><br><span class="line"></span><br><span class="line">In [<span class="number">22</span>]: serializer.save()                                                                                                                                                </span><br><span class="line">Out[<span class="number">22</span>]: &lt;Snippet: Snippet object (<span class="number">3</span>)&gt;</span><br></pre></td></tr></table></figure><br><blockquote><p>Django 에서 form class 와 form 인스턴스를 가지고 작업하는것과, </p><p>비슷한 점이 많다는것을 눈치 채야 합니다. </p><br><p>공통된 부분은, serializer 를 사용하는 views 를 작성할때 더욱 명확해 질것 입니다. </p></blockquote><br><p>또한, 모델 인스턴스들 대신에, 쿼리셋들도 직렬화 할수 있습니다. 그렇게 하기 위해서는, 간단하게 <code>many=true</code> 플래그를, serializer 인자에 넣어줍니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">In [23]: serializer = SnippetSerializer(Snippet.objects.all(), many=True)                                                                                                 </span><br><span class="line"></span><br><span class="line">In [24]: serializer.data                                                                                                                                                  </span><br><span class="line">Out[24]: [OrderedDict([('id', 1), ('title', ''), ('code', 'foo = "bar"\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 2), ('title', ''), ('code', 'print("hello, world")\n'), ('linenos', False), ('language', 'python'), ('style', 'friendly')]), OrderedDict([('id', 3), ('title', ''), ('code', 'print("hello, world")'), ('linenos', False), ('language', 'python'), ('style', 'friendly')])]</span><br><span class="line">​</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/17/DRF-Tutorial-4%ED%8E%B8-Serializer%EB%A1%9C-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 3편 - Serializer class 생성</title>
      <link>http://djangojeng-e.github.io/2020/11/16/DRF-Tutorial-3%ED%8E%B8-Serializer-class-%EC%83%9D%EC%84%B1/</link>
      <guid>http://djangojeng-e.github.io/2020/11/16/DRF-Tutorial-3%ED%8E%B8-Serializer-class-%EC%83%9D%EC%84%B1/</guid>
      <pubDate>Mon, 16 Nov 2020 06:04:29 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Serializer-Class-생성&quot;&gt;&lt;a href=&quot;#Serializer-Class-생성&quot; class=&quot;headerlink&quot; title=&quot;Serializer Class 생성&quot;&gt;&lt;/a&gt;Serializer Class 생성&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Creating-a-Serializer-Class&quot;&gt;&lt;a href=&quot;#Creating-a-Serializer-Class&quot; class=&quot;headerlink&quot; title=&quot;Creating a Serializer Class&quot;&gt;&lt;/a&gt;Creating a Serializer Class&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;우리의 web API 를 시작하기 위해서 첫번째로 필요한것은, &lt;code&gt;serializing&lt;/code&gt; 그리고 &lt;code&gt;deserializing&lt;/code&gt; 하여 snippet 인스턴스들을 json 같은 형태로 재구성 하는 방법을 제공해야 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Serialization 이란?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;직렬화, 또는 시리얼라이제이션 (serialization) 은, &lt;/p&gt;
&lt;p&gt;컴퓨터 과학의 데이터 스토리지 문맥에서, 데이터 구조나 객체 상태를 다른 컴퓨터 환경에 저장하고, &lt;/p&gt;
&lt;p&gt;나중에 재구성할수 있는 포맷으로 변환하는 과정입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;반대로, 일련의 바이트로부터, 데이터 구조를 추출하는 일은 역직렬화 또는 디시리얼라이제이션 (deserialization) 이라고 합니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;우리는 이것을 Django 의 forms 와 비슷하게 작동하는 serializer 클래스를 선언하여 작업할수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;&lt;code&gt;snippet/serializers.py&lt;/code&gt; 파일을 생성하고, 아래 내용을 추가해 줍니다.  &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Serializer-Class-생성"><a href="#Serializer-Class-생성" class="headerlink" title="Serializer Class 생성"></a>Serializer Class 생성</h2><br><h3 id="Creating-a-Serializer-Class"><a href="#Creating-a-Serializer-Class" class="headerlink" title="Creating a Serializer Class"></a>Creating a Serializer Class</h3><br><p>우리의 web API 를 시작하기 위해서 첫번째로 필요한것은, <code>serializing</code> 그리고 <code>deserializing</code> 하여 snippet 인스턴스들을 json 같은 형태로 재구성 하는 방법을 제공해야 합니다. </p><br><blockquote><p><strong>Serialization 이란?</strong></p><p>직렬화, 또는 시리얼라이제이션 (serialization) 은, </p><p>컴퓨터 과학의 데이터 스토리지 문맥에서, 데이터 구조나 객체 상태를 다른 컴퓨터 환경에 저장하고, </p><p>나중에 재구성할수 있는 포맷으로 변환하는 과정입니다. </p><br><p>반대로, 일련의 바이트로부터, 데이터 구조를 추출하는 일은 역직렬화 또는 디시리얼라이제이션 (deserialization) 이라고 합니다. </p></blockquote><br><p>우리는 이것을 Django 의 forms 와 비슷하게 작동하는 serializer 클래스를 선언하여 작업할수 있습니다. </p><br><p><code>snippet/serializers.py</code> 파일을 생성하고, 아래 내용을 추가해 줍니다.  </p><br><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> rest_framework <span class="keyword">import</span> serializers </span><br><span class="line"><span class="keyword">from</span> snippets.models <span class="keyword">import</span> Snippet, LANGUAGE_CHOICES, STYLE_CHOICES</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SnippetSerializer</span><span class="params">(serializers.Serializer)</span>:</span></span><br><span class="line">    id = serializers.IntegerField(read_only=<span class="literal">True</span>)</span><br><span class="line">    title = serializers.CharField(required=<span class="literal">False</span>, allow_blank=<span class="literal">True</span>,       max_length=<span class="number">100</span>)</span><br><span class="line">    code = serializers.CharField(style=&#123;<span class="string">'base_template'</span>: <span class="string">'textarea.html'</span>&#125;)</span><br><span class="line">    linenos = serializers.BooleanField(required=<span class="literal">False</span>)</span><br><span class="line">    language = serializers.ChoiceField(choices=LANGUAGE_CHOICES, default=<span class="string">'python'</span>)</span><br><span class="line">    style = serializers.ChoiceField(choices=STYLE_CHOICES, default=<span class="string">'friendly'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Create and return a new 'Snippet' instance, given the validated data</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> Snippet.objects.create(**validated_data)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self, instance, validated_data)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        Update and return an existing 'snippet' instance, given the validated data</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        instance.title = validated_data.get(<span class="string">'title'</span>, instance.title)</span><br><span class="line">        instance.code = validated_data.get(<span class="string">'code'</span>, instance.code)</span><br><span class="line">        instance.linenos = validated_data.get(<span class="string">'linenos'</span>, instance.linenos)</span><br><span class="line">        instance.language = validated_data.get(<span class="string">'language'</span>, instance.language)</span><br><span class="line">        instance.style = validated_data.get(<span class="string">'style'</span>, instance.style)</span><br><span class="line">        instance.save()</span><br><span class="line">        <span class="keyword">return</span> instance</span><br></pre></td></tr></table></figure><br><p>serializer 클래스의 첫번째 부분은 serialized / deserialized 될 필드들을 정의합니다. </p><br><blockquote><p>create() 와 update() 메서드들은, </p><p>serializer.save() 가 호출 되었을때에, </p><p>어떻게 완성된 인스턴스들이 생성되고 수정될수 있는지 정의 합니다.</p></blockquote><br><h2 id="Form-클래스와-유사성"><a href="#Form-클래스와-유사성" class="headerlink" title="Form 클래스와 유사성"></a>Form 클래스와 유사성</h2><br><p>Serializer 클래스는 Django Form 클래스와 매우 흡사합니다. 그리고, required, max_length, default 같은 여러 필드들에 유효성 플래그들을 포함하고 있습니다. </p><br><p>필드 플래그들은, 어떻게 serializers 가 특정 상황속에서 출력되어야 하는지 제어합니다. 플래그는 Django Form 클래스에서 사용하는 <code>widget=widgets.Textarea</code>  와 같습니다. 이는, 특별히 어떻게 브라우저로 볼수 있는 API 가 표시되어야 하는지 제어해야 할때 유용합니다. 이 부분에 대해서는 나중에 볼수 있습니다. </p><br><p>우리는 ModelSerializer 클래스를 사용하여, 우리 스스로 저장 동작을 할수도 있습니다만. 이는 나중에 보게 될것입니다. 단지, 지금은, serializer 정의를 어떻게 하는지에 대해서만 명시합니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/16/DRF-Tutorial-3%ED%8E%B8-Serializer-class-%EC%83%9D%EC%84%B1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 2편 - Serialization 모델 생성</title>
      <link>http://djangojeng-e.github.io/2020/11/15/DRF-Tutorial-2%ED%8E%B8-Serialization-%EB%AA%A8%EB%8D%B8-%EC%83%9D%EC%84%B1/</link>
      <guid>http://djangojeng-e.github.io/2020/11/15/DRF-Tutorial-2%ED%8E%B8-Serialization-%EB%AA%A8%EB%8D%B8-%EC%83%9D%EC%84%B1/</guid>
      <pubDate>Sun, 15 Nov 2020 00:22:32 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Serialization-모델-생성&quot;&gt;&lt;a href=&quot;#Serialization-모델-생성&quot; class=&quot;headerlink&quot; title=&quot;Serialization 모델 생성&quot;&gt;&lt;/a&gt;Serialization 모델 생성&lt;/h2&gt;&lt;br&gt;

        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Serialization-모델-생성"><a href="#Serialization-모델-생성" class="headerlink" title="Serialization 모델 생성"></a>Serialization 모델 생성</h2><br><h3 id="Creating-a-model-to-work-with-작업할-모델-생성하기"><a href="#Creating-a-model-to-work-with-작업할-모델-생성하기" class="headerlink" title="Creating a model to work with (작업할 모델 생성하기)"></a>Creating a model to work with (작업할 모델 생성하기)</h3><br><p>이번 튜토리얼의 목적을 위해서, 코드 스니펫을 저장하는 간단한 snippet 모델을 생성하는걸로 시작하겠습니다.</p><br><p><code>snippet/models.py</code> 파일에서, 아래와 같이 모델을 작성해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db <span class="keyword">import</span> models </span><br><span class="line"><span class="keyword">from</span> pygments.lexers <span class="keyword">import</span> get_all_lexers </span><br><span class="line"><span class="keyword">from</span> pygments.styles <span class="keyword">import</span> get_all_styles </span><br><span class="line"></span><br><span class="line">LEXERS = [item <span class="keyword">for</span> item <span class="keyword">in</span> get_all_lexers() <span class="keyword">if</span> item[<span class="number">1</span>]]</span><br><span class="line">LANGUAGE_CHOICES = sorted([item[<span class="number">1</span>][<span class="number">0</span>], item[<span class="number">0</span>] <span class="keyword">for</span> item <span class="keyword">in</span> LEXERS])</span><br><span class="line">STYLE_CHOICES = sorted([(item, item) <span class="keyword">for</span> item <span class="keyword">in</span> get_all_styles()])</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Snippet</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    created = models.DateTimeField(auto_now_add=<span class="literal">True</span>)</span><br><span class="line">    title = models.CharField(max_length=<span class="number">100</span>, blank=<span class="literal">True</span>, default=<span class="string">''</span>)</span><br><span class="line">    code = models.TextField()</span><br><span class="line">    linenos = models.BooleanField(default=<span class="literal">False</span>)</span><br><span class="line">    language = models.CharField(choices=LANGUAGE_CHOICES, default=<span class="string">'python'</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    style = models.CharField(choices=STYLE_CHOICES, default=<span class="string">'friendly'</span>, max_length=<span class="number">100</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Meta</span>:</span></span><br><span class="line">        ordering = [<span class="string">'created'</span>]</span><br></pre></td></tr></table></figure><br><blockquote><p>get_all_lexers 는 순회 가능한 LEXER 들의 정보를 가지고 있고 </p><p>get_all_styles 는 순회 가능한 style 들의 정보를 가지고 있습니다. </p><br><p>이 두개를 List Comprehension 을 통해, For 문으로 리스트를 만들어 줍니다 </p></blockquote><br><p>모델을 생성해 주었으니, snippet 모델에 대한 첫번재 migrations 을 생성해 줍니다 </p><p><br>그리고 나서, 처음으로 데이터베이스와 동기화를 시켜줍니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python manage.py makemigrations </span><br><span class="line">python manage.py migrate</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/15/DRF-Tutorial-2%ED%8E%B8-Serialization-%EB%AA%A8%EB%8D%B8-%EC%83%9D%EC%84%B1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>DRF Tutorial 1편 - Serialization 소개 및 초기설정</title>
      <link>http://djangojeng-e.github.io/2020/11/14/DRF-Tutorial-1%ED%8E%B8-Serialization-%EC%86%8C%EA%B0%9C-%EB%B0%8F-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/</link>
      <guid>http://djangojeng-e.github.io/2020/11/14/DRF-Tutorial-1%ED%8E%B8-Serialization-%EC%86%8C%EA%B0%9C-%EB%B0%8F-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/</guid>
      <pubDate>Sat, 14 Nov 2020 00:15:26 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Django-REST-Framework&quot;&gt;&lt;a href=&quot;#Django-REST-Framework&quot; class=&quot;headerlink&quot; title=&quot;Django REST Framework&quot;&gt;&lt;/a&gt;Django REST Framework&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;Django REST framework 튜토리얼 문서를 참조하면서. 튜토리얼을 진행해 봅니다. &lt;br&gt;&lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;Introduction-소개&quot;&gt;&lt;a href=&quot;#Introduction-소개&quot; class=&quot;headerlink&quot; title=&quot;Introduction (소개)&quot;&gt;&lt;/a&gt;Introduction (소개)&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;Django REST FRAMEWORK 를 사용하여, 간단한 pastebin 코드 하이라이팅 웹 API 를 만들어 보는 과정을 담고 있습니다. 진행하는동안, REST Framework 을 만드는 다양한 부분들을 소개합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;그리고 어떻게 모든것이 다같이 어울려져서 동작하는지에 대한 전반적인 이해도를 제공할것 입니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;pastebin 혹은 텍스트 저장 사이트는, 온라인 컨텐트 호스팅 서비스의 종류로. &lt;/p&gt;
&lt;p&gt;사용자들은 순수 텍스트를 저장할수 있습니다. &lt;/p&gt;
&lt;p&gt;예를들면, 코드 리뷰를 위한 소스코드 스니펫 같은것 입니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;Django REST FRAMEWORK Tutorial 은 생각보다 깊은 내용을 다룹니다. 빠른 오버뷰만 하시고 싶다면, quickstart 문서를 참조하면 됩니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Django-REST-Framework"><a href="#Django-REST-Framework" class="headerlink" title="Django REST Framework"></a>Django REST Framework</h2><br><p>Django REST framework 튜토리얼 문서를 참조하면서. 튜토리얼을 진행해 봅니다. <br></p><br><h2 id="Introduction-소개"><a href="#Introduction-소개" class="headerlink" title="Introduction (소개)"></a>Introduction (소개)</h2><br><p>Django REST FRAMEWORK 를 사용하여, 간단한 pastebin 코드 하이라이팅 웹 API 를 만들어 보는 과정을 담고 있습니다. 진행하는동안, REST Framework 을 만드는 다양한 부분들을 소개합니다. </p><br><p>그리고 어떻게 모든것이 다같이 어울려져서 동작하는지에 대한 전반적인 이해도를 제공할것 입니다. </p><br><blockquote><p>pastebin 혹은 텍스트 저장 사이트는, 온라인 컨텐트 호스팅 서비스의 종류로. </p><p>사용자들은 순수 텍스트를 저장할수 있습니다. </p><p>예를들면, 코드 리뷰를 위한 소스코드 스니펫 같은것 입니다. </p></blockquote><br><p>Django REST FRAMEWORK Tutorial 은 생각보다 깊은 내용을 다룹니다. 빠른 오버뷰만 하시고 싶다면, quickstart 문서를 참조하면 됩니다. </p><br><a id="more"></a><h2 id="Setting-up-new-environment"><a href="#Setting-up-new-environment" class="headerlink" title="Setting up new environment"></a>Setting up new environment</h2><br><p>새로운 환경 설정을 진행해줍니다. <code>venv</code> 를 사용하여 가상환경을 만들어 줍니다. </p><p><br>폴더를 하나 생성하고, 해당 폴더에서 아래 명령어를 실행해 줍니다. 이로써, 패키지 설정이 작업하고 있는 다른 프로젝트들과 분리가 되어 보관될수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python -m venv env # 새로운 가상환경 생성 </span><br><span class="line">source env/bin/activate # 생성된 가상환경 실행</span><br></pre></td></tr></table></figure><br><p>가상 환경이 생성되고, 실행 되면. 터미널 입력창 맨앞에 <code>(가상환경명)</code>이 붙습니다. </p><br><img src="/2020/11/14/DRF-Tutorial-1%ED%8E%B8-Serialization-%EC%86%8C%EA%B0%9C-%EB%B0%8F-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/image1.png" class=""><br><p>이제 해당 가상환경 안에, 필요한 패키지들을 설치해줍니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install django # Django 설치 </span><br><span class="line">pip install djangorestframework # djangorestframework 설치 </span><br><span class="line">pip install pygments # 코드 하이라이팅을 위해 필요한 패키지</span><br></pre></td></tr></table></figure><br><img src="/2020/11/14/DRF-Tutorial-1%ED%8E%B8-Serialization-%EC%86%8C%EA%B0%9C-%EB%B0%8F-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/image2.png" class=""><br><blockquote><p>Django, djangorestframework 그리고 pygments 가 잘 설치 되었습니다 </p></blockquote><br><blockquote><p>가상 환경을 빠져 나가고 싶을땐, 그냥  터미널에서, deactivate 를 타이핑 해주면 됩니다. </p></blockquote><br><h2 id="Getting-Started"><a href="#Getting-Started" class="headerlink" title="Getting Started"></a>Getting Started</h2><br><p>이제 코딩할 준비가 다 되었습니다. 시작하기 위해서, 작업을 위한 새로운 프로젝트를 생성해 줍니다 </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">django-admin startproject tutorial </span><br><span class="line">cd tutorial</span><br></pre></td></tr></table></figure><br><p>프로젝트 생성이 되었으면, 간단한 WEB API 를 생성하기 위해 사용할 새로운 앱을 생성해 줍니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python manage.py startapp snippets</span><br></pre></td></tr></table></figure><br><p>프로젝트 앱 생성후 디렉토리 구조. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">├── manage.py</span><br><span class="line">├── snippets</span><br><span class="line">│   ├── admin.py</span><br><span class="line">│   ├── apps.py</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">│   ├── migrations</span><br><span class="line">│   │   └── __init__.py</span><br><span class="line">│   ├── models.py</span><br><span class="line">│   ├── tests.py</span><br><span class="line">│   └── views.py</span><br><span class="line">└── tutorial</span><br><span class="line">    ├── asgi.py</span><br><span class="line">    ├── __init__.py</span><br><span class="line">    ├── __pycache__</span><br><span class="line">    │   ├── __init__.cpython-37.pyc</span><br><span class="line">    │   └── settings.cpython-37.pyc</span><br><span class="line">    ├── settings.py</span><br><span class="line">    ├── urls.py</span><br><span class="line">    └── wsgi.py</span><br></pre></td></tr></table></figure><br><p>새롭게 생성한 <code>snippets</code> 앱과 <code>rest_framework</code> 앱을 INSTALLED_APPS 에 추가해 줍니다. </p><br><p><code>tutorial/settings.py</code> 파일에 아래와 같이 두 앱을 INSTALLED_APPS 에 추가해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [</span><br><span class="line">    <span class="string">'django.contrib.admin'</span>,</span><br><span class="line">    <span class="string">'django.contrib.auth'</span>,</span><br><span class="line">    <span class="string">'django.contrib.contenttypes'</span>,</span><br><span class="line">    <span class="string">'django.contrib.sessions'</span>,</span><br><span class="line">    <span class="string">'django.contrib.messages'</span>,</span><br><span class="line">    <span class="string">'django.contrib.staticfiles'</span>,</span><br><span class="line"></span><br><span class="line">    <span class="string">'rest_framework'</span>,</span><br><span class="line">    <span class="string">'snippets'</span>,</span><br><span class="line"></span><br><span class="line">]</span><br></pre></td></tr></table></figure><br><p>자 이제 기본적으로 시작할 준비가 완료 되었습니다! </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/14/DRF-Tutorial-1%ED%8E%B8-Serialization-%EC%86%8C%EA%B0%9C-%EB%B0%8F-%EC%B4%88%EA%B8%B0%EC%84%A4%EC%A0%95/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Python 기초 23편 - 객체지향 프로그래밍</title>
      <link>http://djangojeng-e.github.io/2020/11/13/Python-%EA%B8%B0%EC%B4%88-23%ED%8E%B8-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</link>
      <guid>http://djangojeng-e.github.io/2020/11/13/Python-%EA%B8%B0%EC%B4%88-23%ED%8E%B8-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/</guid>
      <pubDate>Fri, 13 Nov 2020 02:53:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;객체지향-프로그래밍-Object-Oriented-Programming&quot;&gt;&lt;a href=&quot;#객체지향-프로그래밍-Object-Oriented-Programming&quot; class=&quot;headerlink&quot; title=&quot;객체지향 프로그래밍 (Obje
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="객체지향-프로그래밍-Object-Oriented-Programming"><a href="#객체지향-프로그래밍-Object-Oriented-Programming" class="headerlink" title="객체지향 프로그래밍 (Object-Oriented Programming)"></a>객체지향 프로그래밍 (Object-Oriented Programming)</h2><br><p>객체 지향 프로그래밍 (OOP) 는 프로그램 설계 방법론이자 개념의 일종으로. 특징은 다음과 같습니다. </p><br><blockquote><p>프로그램을 수많은 ‘객체’ 라는 기본 단위로 나누고, 이 객체들의 상호작용으로 서술하는 방식으로. </p><br><p>객체 - 하나의 역할을 수행하는 메소드와 변수(데이터)의 묶음으로 봅니다. </p><p>즉, 개념적으로, <code>객체 = 메소드 + 변수 (데이터)</code> 형태를 가집니다. </p></blockquote><br><p>파이썬에서는 모든것이 객체로, 파이썬은 객체지향 언어의 대표적인 언어중 하나입니다. </p><br><h2 id="절차적-프로그래밍"><a href="#절차적-프로그래밍" class="headerlink" title="절차적 프로그래밍"></a>절차적 프로그래밍</h2><br><p>초기에 나온 프로그래밍 방식은, 절차 지향 혹은 절차적 프로그래밍으로. 명시된 순서대로 입력을 처리한다음, 결과를 내어주는 식으로 프로그램이 짜여 졌었습니다. </p><br><p>프로그램을 명령어들의 모음으로 인식하는것이 지배적이었으며. 프로그램의 기능에 더 치중하였고. </p><p><br>어떤 데이터를 취급할지에 대한 고민은 상대적으로 적게 하였습니다. </p><br><p>이 절차적 프로그래밍의 단점은 시간이 지나면서 부각되어 오기 시작하였는데.. 특히, 프로그램이 복잡해지면 질수록 드러나는 대표적인 단점은 아래와 같습니다. </p><br><ol><li>프로그램이 복잡해 지면, 너무 많은 절차와 명령어들로 인해서 코드가 엉망이 될수가 있다 </li><li>코드가 엉망이 되면, 유지보수가 힘들어 진다 </li><li>프로그램 흐름을 파악하기가 힘들어 진다 </li><li>네임스페이스 (이름공간) 구분이 어려워 진다 </li><li>중복된 코드를 사용하게 될수 있다 </li><li>함수를 통해 구조화는 가능하지만, 이는 데이터를 구조화 시킬수는 없다 </li></ol><br><p>이러한 단점들을 보안하기 위해서 나타난것이 바로 객체 지향 프로그래밍으로. 객체라는 작은 단위들로 쪼갠다음, 이 객체들을 조합하여 큰 문제도 해결할수 있는 방식으로 생각하여 만들어 졌습니다. </p><br><p>만들어진 객체는, 작은 문제들을 효과적으로 그리고 확실하게 해결할수 있는 단위들로. 한번 잘 만들어지면. 재사용할수 있다는점이 가장 큰 장점 입니다. </p><br><h2 id="주요-특징"><a href="#주요-특징" class="headerlink" title="주요 특징"></a>주요 특징</h2><br><h3 id="1-Encapulation-캡슐화"><a href="#1-Encapulation-캡슐화" class="headerlink" title="1. Encapulation (캡슐화)"></a>1. Encapulation (캡슐화)</h3><br><p>변수와 함수를 하나의 단위로 묶는것을 의미. 데이터의 번들링으로. 보통 객체 지향 프로그래밍을 지원하는 언어들에서 class 라는 형태로 제공됩니다. </p><br><p>해당 클래스에 대한 인스턴스를 생성하고, 클래스에 포함된 변수와 메서드에 쉽게 접근할수 있습니다. </p><br><p>파이썬에서도, class 를 통해 인스턴스를 생성하고, 해당 클래스에 포함된 변수와 메서드에 접근할수 있습니다. </p><br><h3 id="2-inheritance-상속"><a href="#2-inheritance-상속" class="headerlink" title="2. inheritance (상속)"></a>2. inheritance (상속)</h3><br><p>상속은 자식 클래스가 부모 클래스의 특성과 기능을 물려받는 것을 의미합니다. </p><br><p>자식 클래스에서, 부모에게서 물려받은 기능을 약간 수정하여 다시 정의할수 있는데. 이를 <code>override</code>, <code>overriding</code> 이라고 부릅니다. </p><br><h2 id="장점과-단점"><a href="#장점과-단점" class="headerlink" title="장점과 단점"></a>장점과 단점</h2><br><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><br><ul><li>아주 복잡한 프로그램일 경우, 절차 지향 프로그래밍 보다는 상대적으로 코드가 간결할수 있습니다 </li><li>상속 개념을 너무 남발하는 경우가 아니고, 간결하고 명확하게 코드를 작성할 경우, 유지 보수가 용이해 질수 있습니다 </li><li>네임스페이스 (이름공간) 구분이 용이해 질수 있습니다 </li><li>코드의 재사용성을 높이고, 중복된 코드를 피할수 있습니다 </li></ul><br><h3 id="단점"><a href="#단점" class="headerlink" title="단점"></a>단점</h3><br><ul><li>데이터 클래스의 상속이라는 개념은 뛰어나지만, 복잡한 특성을 지니게 해줍니다. 코드의 난이도가 어려워지는 함정이 존재합니다. 다중 상속을 할 경우, 코드 흐름을 파악하기 어려워지고, 복잡한 상속은 코드 분석을 매우 어렵게 합니다 </li><li>캡슐화와 객체 구조 설계로 인해서 프로그램 성능이 하락할수 있습니다. 객체들간 상호 작용을 하기 위한 호출, 계산식 중간에 포인터 연산들이 더 들어가야 하고, 상호 작용을 위해서 어느 객체의 함수인지 지정해야 하기 때문에, 절차적 프로그래밍 보다는 프로그램이 무거워 질수 있습니다 </li><li>이해하기가 어렵습니다. 특히 프로그래밍을 처음 접하는 상황에서는, 클래스와 객체 등, OOP 개념 이해조차 하기 힘듭니다. 클래스를 보통 붕어빵 틀로 설명을 하는데.. 학습을 어느정도 해도 이해하기 힘든 개념으로, 많은 프로그래머를 지향하는 사람들이 부딪히는 난관이 될수 있습니다. </li></ul><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/11/13/Python-%EA%B8%B0%EC%B4%88-23%ED%8E%B8-%EA%B0%9D%EC%B2%B4%EC%A7%80%ED%96%A5-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%B0%8D/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
