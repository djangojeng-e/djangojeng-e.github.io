<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>장고쟁이</title>
    <link>http://djangojeng-e.github.io/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>장고쟁이의 Python, Django 공부 노트</description>
    <pubDate>Mon, 19 Oct 2020 23:49:15 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>Form API 8편 - Form.as_ul()</title>
      <link>http://djangojeng-e.github.io/2020/10/20/Form-API-8%ED%8E%B8-Form-as-ul/</link>
      <guid>http://djangojeng-e.github.io/2020/10/20/Form-API-8%ED%8E%B8-Form-as-ul/</guid>
      <pubDate>Mon, 19 Oct 2020 23:46:19 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Form-as-ul&quot;&gt;&lt;a href=&quot;#Form-as-ul&quot; class=&quot;headerlink&quot; title=&quot;Form.as_ul()&quot;&gt;&lt;/a&gt;Form.as_ul()&lt;/h2&gt;&lt;br&gt;



&lt;p&gt;&lt;code&gt;as_ul()&lt;/code&gt;은 폼을 &lt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Form-as-ul"><a href="#Form-as-ul" class="headerlink" title="Form.as_ul()"></a>Form.as_ul()</h2><br><p><code>as_ul()</code>은 폼을 <code>&lt;li&gt;</code> 태그로 렌더링 해줍니다. 각 <code>&lt;li&gt;</code> 태그는 하나의 필드를 포함하고 있습니다. </p><p><br>이는, <code>&lt;ul&gt;</code> 혹은 <code>&lt;/ul&gt;</code> 을 포함하고 있지 않습니다. </p><p><br>따라서, 여러분들은 유연하게 <code>&lt;ul&gt;</code>에 어떤 HTML 속성이든지 지정해줄수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">In [4]: f.as_ul()                                                                                                                                                         </span><br><span class="line">Out[4]: '&lt;li&gt;&lt;label for="id_subject"&gt;Subject:&lt;/label&gt; </span><br><span class="line">&lt;input type="text" name="subject" maxlength="100" required id="id_subject"&gt;&lt;/li&gt;</span><br><span class="line">\n&lt;li&gt;&lt;label for="id_message"&gt;Message:&lt;/label&gt; </span><br><span class="line">&lt;textarea name="message" cols="40" rows="10" required id="id_message"&gt;\n</span><br><span class="line">&lt;/textarea&gt;&lt;/li&gt;\n</span><br><span class="line">&lt;li&gt;&lt;label for="id_sender"&gt;Sender:&lt;/label&gt; </span><br><span class="line">&lt;input type="email" name="sender" required id="id_sender"&gt;&lt;/li&gt;</span><br><span class="line">\n&lt;li&gt;&lt;label for="id_cc_myself"&gt;Cc myself:&lt;/label&gt;</span><br><span class="line">&lt;input type="checkbox" name="cc_myself" id="id_cc_myself"&gt;&lt;/li&gt;'</span><br></pre></td></tr></table></figure><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/20/Form-API-8%ED%8E%B8-Form-as-ul/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 7편 - HTML 로 폼 출력하기 - as_p()</title>
      <link>http://djangojeng-e.github.io/2020/10/20/Form-API-7%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0-as-p/</link>
      <guid>http://djangojeng-e.github.io/2020/10/20/Form-API-7%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0-as-p/</guid>
      <pubDate>Mon, 19 Oct 2020 23:40:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Form-as-p&quot;&gt;&lt;a href=&quot;#Form-as-p&quot; class=&quot;headerlink&quot; title=&quot;Form.as_p()&quot;&gt;&lt;/a&gt;Form.as_p()&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;as_p() 는 form 을 &lt;co
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Form-as-p"><a href="#Form-as-p" class="headerlink" title="Form.as_p()"></a>Form.as_p()</h2><br><blockquote><p>as_p() 는 form 을 <code>&lt;p&gt;</code> 태그들로 렌더링 해줍니다. </p><p>각 <code>&lt;p&gt;</code> 태그는 하나의 필드를 가지고 있습니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm() </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 폼 인스턴스를 생성 한뒤에 </span></span><br><span class="line"><span class="meta">#</span><span class="bash"> f.as_p() 를 호출하면, </span></span><br><span class="line"></span><br><span class="line">f.as_p()</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 폼의 각 필드들이 &lt;p&gt;태그로 감싸져서 렌더링 되는것을 확인할수 있습니다 </span></span><br><span class="line"></span><br><span class="line">In [2]: f = ContactForm()                                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [3]: f.as_p()                                                                                                                                                          </span><br><span class="line">Out[3]: '&lt;p&gt;&lt;label for="id_subject"&gt;Subject:&lt;/label&gt; </span><br><span class="line">&lt;input type="text" name="subject" maxlength="100" required id="id_subject"&gt;&lt;/p&gt;</span><br><span class="line">\n&lt;p&gt;&lt;label for="id_message"&gt;Message:&lt;/label&gt; </span><br><span class="line">&lt;textarea name="message" cols="40" rows="10" required id="id_message"&gt;\n&lt;/textarea&gt;&lt;/p&gt;</span><br><span class="line">\n&lt;p&gt;&lt;label for="id_sender"&gt;Sender:&lt;/label&gt; </span><br><span class="line">&lt;input type="email" name="sender" required id="id_sender"&gt;&lt;/p&gt;</span><br><span class="line">\n&lt;p&gt;&lt;label for="id_cc_myself"&gt;Cc myself:&lt;/label&gt; </span><br><span class="line">&lt;input type="checkbox" name="cc_myself" id="id_cc_myself"&gt;&lt;/p&gt;'</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/20/Form-API-7%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0-as-p/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 6편 - HTML 로 폼 출력하기</title>
      <link>http://djangojeng-e.github.io/2020/10/19/Form-API-6%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/19/Form-API-6%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Mon, 19 Oct 2020 11:52:31 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Outputting-forms-as-HTML&quot;&gt;&lt;a href=&quot;#Outputting-forms-as-HTML&quot; class=&quot;headerlink&quot; title=&quot;Outputting forms as HTML&quot;&gt;&lt;/a&gt;Outputting forms as HTML&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;폼 객체의 두번째 작업은, 스스로 HTML 태그로 렌더를 해주는것입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;forms.py 가 아래와 같이 작성 되어 있고. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; forms &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContactForm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forms.Form)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subject = forms.CharField(max_length=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message = forms.CharField(widget=forms.Textarea)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sender = forms.EmailField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc_myself = forms.BooleanField(required=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;shell 에서 아래와 같이 폼을 프린트 해보면, &lt;/p&gt;
&lt;p&gt;폼이 저절로 HTML 로 렌더되는것을 확인할수 있습니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;



&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;from classviewsforms.forms import ContactForm &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;f = ContactForm() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(f)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Outputting-forms-as-HTML"><a href="#Outputting-forms-as-HTML" class="headerlink" title="Outputting forms as HTML"></a>Outputting forms as HTML</h2><br><p>폼 객체의 두번째 작업은, 스스로 HTML 태그로 렌더를 해주는것입니다. </p><br><p>forms.py 가 아래와 같이 작성 되어 있고. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    subject = forms.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    message = forms.CharField(widget=forms.Textarea)</span><br><span class="line">    sender = forms.EmailField()</span><br><span class="line">    cc_myself = forms.BooleanField(required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><br><blockquote><p>shell 에서 아래와 같이 폼을 프린트 해보면, </p><p>폼이 저절로 HTML 로 렌더되는것을 확인할수 있습니다</p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">from classviewsforms.forms import ContactForm </span><br><span class="line"></span><br><span class="line">f = ContactForm() </span><br><span class="line"></span><br><span class="line">print(f)</span><br></pre></td></tr></table></figure><br><a id="more"></a><p>만약 폼이 데이터를 가지고 있으면, HTML 로 출력 될때, HTML 태그는 데이터를 적절하게 포함하고 있습니다. </p><br><p>예를들어, 필드가 <code>&lt;input type=&quot;text&quot;&gt;</code> 라고 표시가 되어 있으면, 데이터는 value 속성에 있을것입니다. </p><p><br>만약 필드가 <code>&lt;input type=&quot;checkbox&quot;&gt;</code>로 표시되어 있으면, 적절한 경우, checked 를 포함하고 있을겁니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">In [4]: data = &#123;'subject': 'hello', </span></span><br><span class="line"><span class="xml">   ...:         'message': 'Hi there', </span></span><br><span class="line"><span class="xml">   ...:         'sender': 'foo@example.com', </span></span><br><span class="line"><span class="xml">   ...:         'cc_myself': True&#125;                                                                </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [5]: f = ContactForm(data)                                                                     </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [6]: print(f)                                                                                  </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_subject"</span>&gt;</span>Subject:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">value</span>=<span class="string">"hello"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">required</span> <span class="attr">id</span>=<span class="string">"id_subject"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_message"</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">cols</span>=<span class="string">"40"</span> <span class="attr">rows</span>=<span class="string">"10"</span> <span class="attr">required</span> <span class="attr">id</span>=<span class="string">"id_message"</span>&gt;</span></span></span><br><span class="line"><span class="xml">Hi there<span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_sender"</span>&gt;</span>Sender:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"sender"</span> <span class="attr">value</span>=<span class="string">"foo@example.com"</span> <span class="attr">required</span> <span class="attr">id</span>=<span class="string">"id_sender"</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_cc_myself"</span>&gt;</span>Cc myself:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"cc_myself"</span> <span class="attr">id</span>=<span class="string">"id_cc_myself"</span> <span class="attr">checked</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><p>이런 기본 출력 방식은, 각 필드들에 <code>&lt;tr&gt;</code> 을 가지고 있는, 그리고 두개의 컬럼으로 되어 있는 HTML 테이블이 됩니다. 아래 사항들을 짚고 넘어갑니다.  </p><br><ul><li>유연성을 위해서, 폼의 기본 출력값은 <code>&lt;table&gt;&lt;/table&gt;</code> 태그를 가지고 있지 않습니다 </li><li><code>&lt;form&gt;&lt;/form&gt;</code> 태그도 가지고 있지 않습니다 </li><li><code>&lt;input type=&quot;submit&quot;&gt;</code> 태그도 가지고 있지 않습니다. </li></ul><br><blockquote><p>위에 있는 태그들이 기본 출력에 포함되지 않습니다. </p><p>따라서, HTML 템플릿에 위 3개의 테그는 여러분들이 필요에 의해서 추가해 주어야 할 테그들 입니다 <br></p><p>추가적으로, POST 폼을 사용하기전에 csrf_token 을 사용하는것도 잊지 않아야 합니다! </p></blockquote><br><ul><li>각 필드 타입은, 기본 HTML 태그를 가지고 있습니다. 예를들어 , </li></ul><ul><li><p>CharField 는 <code>&lt;input type=&quot;text&quot;&gt;</code></p></li><li><p>EmailField 는 <code>&lt;input type=&quot;email&quot;&gt;</code></p></li><li><p>BooleanField(null=False) 는 <code>&lt;input type=&quot;checkbox&quot;&gt;</code> </p></li></ul><pre><code>이 태그들은 기본값일 뿐입니다. 우리는 widget 을 사용하여, 어떤 HTML 을 사용할것인지 지정할수 있습니다. </code></pre><br><ul><li>각 테그를 위한 HTML 이름은, ContactForm 클래스 안 속성이름을 직접 가져옵니다 </li><li>각 필드를 위한 label. 예) Subject, Message, Cc myself 들은 필드명의 언더스코어를 공백으로 전환하고, 첫번째 글자를 대문자해서 생겨납니다. 이것도 그저 기본값일 뿐입니다. 우리는 이 label 도 수동으로 지정할수 있습니다 </li><li>각 텍스트 레이블은 <code>&lt;label&gt;</code> HTML 태그안에 감싸져 있습니다. 이는 필드의 id 를 가르키고 있습니다. id 는 필드명앞에 id 를 붙여서 생성됩니다. id 속성과 <code>&lt;label&gt;</code> 태그들은 기본값으로 출력값에 포함되어 있습니다만. 이 동작도 변경할수 있습니다. </li><li>출력되는 HTML 은 HTML5 문법을 사용합니다. </li></ul><br><p>print 를 사용하여 form 을 출력했을때, <code>&lt;table&gt;</code> 이 기본 출력 스타일 일지라도, 다른 출력 스타일들이 존재할수 있습니다. 각 스타일은 폼 객체의 메서드로 존재하고. 각 렌더링 메서드는 문자열을 반환합니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/19/Form-API-6%ED%8E%B8-HTML-%EB%A1%9C-%ED%8F%BC-%EC%B6%9C%EB%A0%A5%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 5편 -Clean 데이터에 접근하기</title>
      <link>http://djangojeng-e.github.io/2020/10/18/Form-API-5%ED%8E%B8-Clean-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/18/Form-API-5%ED%8E%B8-Clean-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Sun, 18 Oct 2020 07:42:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Accessing-“clean”-data&quot;&gt;&lt;a href=&quot;#Accessing-“clean”-data&quot; class=&quot;headerlink&quot; title=&quot;Accessing “clean” data&quot;&gt;&lt;/a&gt;Accessing “clean” data&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Form-cleaned-data&quot;&gt;&lt;a href=&quot;#Form-cleaned-data&quot; class=&quot;headerlink&quot; title=&quot;Form.cleaned_data&quot;&gt;&lt;/a&gt;Form.cleaned_data&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;폼안에 각 필드들은, 데이터 검증뿐만 아니라, “cleaning” (정화) 하는 역할도 합니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;cleaning &lt;/p&gt;
&lt;p&gt;유효하고 일관적인 포맷으로 정형화 시킵니다 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;이는 아주 좋은 기능입니다. 왜냐하면, 특정 필드가 여러 방법으로 입력되고, 일관적인 아웃풋을 만들어 내기 때문입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;예를들어, DateField 는 입력값을 python 의 datetime.date 객체로 정형화 시킵니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;‘1994-07-15’ 같이, 문자열 형태, datetime.date 객체 혹은 다른 포맷들이든 상관없이. 유효하기만 하면, DateField 는 언제나 datetime.date 객체로 정형화 시킵니다. &lt;/p&gt;
&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;폼 인스턴스를 데이터와 함께 생성하고, 검증하였으면, &lt;/p&gt;
&lt;p&gt;폼의 cleaned_data 속성에 접근하여, 깔끔한 데이터에 엑세스 할수 있습니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [1]: data = &amp;#123;&#39;subject&#39;: &#39;hello&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;message&#39;: &#39;Hi there&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;sender&#39;: &#39;foo@example.com&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;cc_myself&#39;: True&amp;#125;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [4]: f = ContactForm(data)                                                                                                                                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [5]: f.is_valid()                                                                                                                                                      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[5]: True&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [6]: f.cleaned_data                                                                                                                                                    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[6]: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&#39;subject&#39;: &#39;hello&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &#39;message&#39;: &#39;Hi there&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &#39;sender&#39;: &#39;foo@example.com&#39;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &#39;cc_myself&#39;: True&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;여기서 꼭 알아야 할 부분은, cleaned_data 는 사전형태로. 깨끗한 데이터를 가지고 있습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Accessing-“clean”-data"><a href="#Accessing-“clean”-data" class="headerlink" title="Accessing “clean” data"></a>Accessing “clean” data</h2><br><h3 id="Form-cleaned-data"><a href="#Form-cleaned-data" class="headerlink" title="Form.cleaned_data"></a>Form.cleaned_data</h3><br><p>폼안에 각 필드들은, 데이터 검증뿐만 아니라, “cleaning” (정화) 하는 역할도 합니다. </p><br><blockquote><p>cleaning </p><p>유효하고 일관적인 포맷으로 정형화 시킵니다 </p></blockquote><br><p>이는 아주 좋은 기능입니다. 왜냐하면, 특정 필드가 여러 방법으로 입력되고, 일관적인 아웃풋을 만들어 내기 때문입니다. </p><br><p>예를들어, DateField 는 입력값을 python 의 datetime.date 객체로 정형화 시킵니다. </p><br><p>‘1994-07-15’ 같이, 문자열 형태, datetime.date 객체 혹은 다른 포맷들이든 상관없이. 유효하기만 하면, DateField 는 언제나 datetime.date 객체로 정형화 시킵니다. </p><br><blockquote><p>폼 인스턴스를 데이터와 함께 생성하고, 검증하였으면, </p><p>폼의 cleaned_data 속성에 접근하여, 깔끔한 데이터에 엑세스 할수 있습니다. </p></blockquote><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">In [1]: data = &#123;'subject': 'hello', </span><br><span class="line">   ...:         'message': 'Hi there', </span><br><span class="line">   ...:         'sender': 'foo@example.com', </span><br><span class="line">   ...:         'cc_myself': True&#125;     </span><br><span class="line"></span><br><span class="line">In [4]: f = ContactForm(data)                                                                                                                                             </span><br><span class="line"></span><br><span class="line">In [5]: f.is_valid()                                                                                                                                                      </span><br><span class="line">Out[5]: True</span><br><span class="line"></span><br><span class="line">In [6]: f.cleaned_data                                                                                                                                                    </span><br><span class="line">Out[6]: </span><br><span class="line">&#123;'subject': 'hello',</span><br><span class="line"> 'message': 'Hi there',</span><br><span class="line"> 'sender': 'foo@example.com',</span><br><span class="line"> 'cc_myself': True&#125;</span><br></pre></td></tr></table></figure><br><p>여기서 꼭 알아야 할 부분은, cleaned_data 는 사전형태로. 깨끗한 데이터를 가지고 있습니다. </p><p><br><a id="more"></a></p><p>CharField 혹은 EmailField 같은 텍스트 기반 필드들은, 언제나 입력값을 문자열로 정화 시킨다는것을 숙지해야 합니다. 우리는 인코딩 시에 이것에 대한것을 나중에 다룰겁니다. </p><br><p>만약, 여러분들의 데이터가 검증되지 않는다면, cleaned_data 사전은 오직 유효한 필드들만 가지게 됩니다. </p><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">In [7]: data &#x3D; &#123;&#39;subject&#39;: &#39;&#39;, </span><br><span class="line">   ...:         &#39;message&#39;: &#39;Hi there&#39;, </span><br><span class="line">   ...:         &#39;sender&#39;: &#39;invalid email address&#39;, </span><br><span class="line">   ...:         &#39;cc_myself&#39;: True&#125;                                                                                                                                   </span><br><span class="line"></span><br><span class="line">In [8]: f &#x3D; ContactForm(data)                                                                                                                                        </span><br><span class="line"></span><br><span class="line">In [9]: f.is_valid()                                                                                                                                                 </span><br><span class="line">Out[9]: False</span><br><span class="line"></span><br><span class="line">In [10]: f.cleaned_data                                                                                                                                              </span><br><span class="line">Out[10]: &#123;&#39;message&#39;: &#39;Hi there&#39;, &#39;cc_myself&#39;: True&#125;</span><br></pre></td></tr></table></figure><br><blockquote><p>폼을 정의할때, 추가적인 데이터를 전달한다 하더라도, </p><p>cleaned_data 는 언제나 폼에 정의된 필드들에 대해서만 key 값들을 가질겁니다. </p></blockquote><br><p>아래 예시에서는, ContactForm 생성자에, 여러가지 추가적인 필드를 전달하지만, cleaned_data 는 오직 폼의 필드들만 포함하는것을 확인 할수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">In [11]: data = &#123;'subject': 'hello', </span><br><span class="line">    ...:         'message': 'Hi there', </span><br><span class="line">    ...:         'sender': 'foo@example.com', </span><br><span class="line">    ...:         'extra_field_1': 'foo', </span><br><span class="line">    ...:         'extra_field_2': 'bar', </span><br><span class="line">    ...:         'extra_field_3': 'baz'&#125;                                                                                                                             </span><br><span class="line"></span><br><span class="line">In [12]: f = ContactForm(data)                                                                                                                                       </span><br><span class="line"></span><br><span class="line">In [13]: f.is_valid()                                                                                                                                                </span><br><span class="line">Out[13]: True</span><br><span class="line"></span><br><span class="line">In [14]: f.cleaned_data                                                                                                                                              </span><br><span class="line">Out[14]: </span><br><span class="line">&#123;'subject': 'hello',</span><br><span class="line"> 'message': 'Hi there',</span><br><span class="line"> 'sender': 'foo@example.com',</span><br><span class="line"> 'cc_myself': False&#125;</span><br></pre></td></tr></table></figure><br><br><blockquote><p>폼이 유효할때, </p><p>데이터가 어떤 옵션 필드들에 대한 값을 포함하고 있지 않더라도, </p><p>cleaned_data  는 폼의 모든 필드들에 대한 key 와 value 들을 포함합니다. </p></blockquote><br><p>아래 예시에서, 데이터 사전은, nick_name 필드에 대한 값을 포함하고 있지 않습니다. </p><p><br>하지만, cleaned_data 는 이 필드에 대한 값을 비어 있는 값으로 포함하고 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n [1]: from forms_more_on_fields.forms import OptionalPersonForm                                                                                                    </span><br><span class="line"></span><br><span class="line">In [2]: data = &#123;'first_name': 'John', 'last_name': 'Lennon'&#125;    </span><br><span class="line"></span><br><span class="line">In [4]: f = OptionalPersonForm(data)                                                                                                                                 </span><br><span class="line"></span><br><span class="line">In [5]: f.is_valid()                                                                                                                                                 </span><br><span class="line">Out[5]: True</span><br><span class="line"></span><br><span class="line">In [6]: f.cleaned_data                                                                                                                                               </span><br><span class="line">Out[6]: &#123;'first_name': 'John', 'last_name': 'Lennon', 'nick_name': ''&#125;</span><br></pre></td></tr></table></figure><br><p>위의 예시에서 보다싶이, nick_name 을 위한 cleaned_data 값은 빈 문자열로 지정 됩니다. 왜냐하면, nick_name 은 CharField 이고, CharField 는 빈값을 비어있는 문자열로 다루기 때문입니다. </p><br><p>각 필드 타입은, 필드의 빈 값이 무엇인지 알고 있습니다. 예를들면, DateField 는 비어있는 문자열 대신에 None 을 값으로 가집니다. </p><br><p>이 상황에 대한 각 필드의 동작에 대한 자세한 정보는, Built-in Field classes 안에 있는 ‘Empty Value’ 노트를 확인하면 됩니다. </p><br><p>여러분들은 특정 폼 필드들에 (필드명을 기반으로 한) 대한 검증작업을 실행 하기 위해서 코드를 작성합니다. 혹은, 폼 전체의 검증을 수행하기 위해서 작성합니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/18/Form-API-5%ED%8E%B8-Clean-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 4편 - 폼 데이터 변경사항 체크하기</title>
      <link>http://djangojeng-e.github.io/2020/10/17/Form-API-4%ED%8E%B8-%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/17/Form-API-4%ED%8E%B8-%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Fri, 16 Oct 2020 22:47:04 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Checking-which-form-data-has-been-changed&quot;&gt;&lt;a href=&quot;#Checking-which-form-data-has-been-changed&quot; class=&quot;headerlink&quot; title=&quot;Checking w
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Checking-which-form-data-has-been-changed"><a href="#Checking-which-form-data-has-been-changed" class="headerlink" title="Checking which form data has been changed"></a>Checking which form data has been changed</h2><br><h3 id="폼-데이터-변경사항을-체크하기-위해서는-has-changed-메서드를-사용하면-됩니다"><a href="#폼-데이터-변경사항을-체크하기-위해서는-has-changed-메서드를-사용하면-됩니다" class="headerlink" title="폼 데이터 변경사항을 체크하기 위해서는 has_changed() 메서드를 사용하면 됩니다."></a>폼 데이터 변경사항을 체크하기 위해서는 <code>has_changed()</code> 메서드를 사용하면 됩니다.</h3><br><p>초기값에서부터 폼 데이터가 변경 되었는지 아니었는지 확인할 필요가 있을떄 체크 합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [2]: from forms_more_on_fields.forms import ContactForm  </span><br><span class="line"></span><br><span class="line">In [7]: data = &#123;'subject': 'hello', </span><br><span class="line">   ...:         'message': 'Hi there', </span><br><span class="line">   ...:         'sender': 'foo@example.com', </span><br><span class="line">   ...:         'cc_myself': True&#125;                                                                                 </span><br><span class="line"></span><br><span class="line">In [8]: f = ContactForm(data, initial=data)                                                                        </span><br><span class="line"></span><br><span class="line">In [9]: f.has_changed()                                                                                            </span><br><span class="line">Out[9]: False</span><br></pre></td></tr></table></figure><br><p>폼이 제출 되었을때, 우리는 다시 폼을 만들고 오리지널 데이터를 제공하여 비교가 이루어 질수 있습니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f = ContactForm(request.POST, initial=data)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f.has_changed()</span></span><br></pre></td></tr></table></figure><br><p>만약, request_POST 에서 온 data 가 initial 에 있는 데이터와 다르다면, has_changed() 는 True 를 반환할겁니다. 그렇지 않다면, False 를 반환합니다. </p><br><p>이 결과는, 폼안에 있는 각 필드에, has_changed() 를 호출함으로 계산됩니다. </p><br><h3 id="Form-changed-data"><a href="#Form-changed-data" class="headerlink" title="Form.changed_data"></a>Form.changed_data</h3><br><p>changed_data 속성은 initial 에 제공되었던 데이터와 다른 데이터들이, 폼을 통해 (보통 request.POST를 통해서) 온 데이터들과 다를때, 폼의 bound data 안에 있는 필드들의 이름을 가진 리스트를 반환합니다.  </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f = ContactForm(request.POST, initial=data)</span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; <span class="keyword">if</span> f.has_changed():</span></span><br><span class="line">...     print("The following fields changed: %s" % ", ".join(f.changed_data))</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">&gt;&gt; f.changed_data</span></span><br><span class="line">['subject', 'message']</span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/17/Form-API-4%ED%8E%B8-%ED%8F%BC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD-%EC%B2%B4%ED%81%AC%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 3편 - Dynamic Initial Values</title>
      <link>http://djangojeng-e.github.io/2020/10/16/Form-API-3%ED%8E%B8-Dynamic-Initial-Values/</link>
      <guid>http://djangojeng-e.github.io/2020/10/16/Form-API-3%ED%8E%B8-Dynamic-Initial-Values/</guid>
      <pubDate>Fri, 16 Oct 2020 00:13:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Dynamic-initial-values&quot;&gt;&lt;a href=&quot;#Dynamic-initial-values&quot; class=&quot;headerlink&quot; title=&quot;Dynamic initial values&quot;&gt;&lt;/a&gt;Dynamic initial valu
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Dynamic-initial-values"><a href="#Dynamic-initial-values" class="headerlink" title="Dynamic initial values"></a>Dynamic initial values</h2><br><h3 id="Form-initial"><a href="#Form-initial" class="headerlink" title="Form.initial"></a>Form.initial</h3><br><p>initial 을 사용하여, 실행시에 폼필드의 초기값을 지정할수 있습니다. </p><p><br>예를들면, 여러분들은 현재 세션의 username 을 username 필드에 채워놓고 싶을지도 모릅니다<br></p><p>이런 동작을 구현하기 위해서, initial 인자를 Form 에 써줍니다. </p><br><p>이 인자가 주어질때는, 필드명이 초기값에 매핑되는 사전 형태여야 합니다. </p><br><p>오직 여러분들이 초기값을 지정하고 싶은 필드에만 포함합니다.<br> 폼안에 모든 필드에 쓰는것은 불필요한 일입니다.<br><br></p><p>예를들면, </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm(initial=&#123;<span class="string">'subject'</span>: <span class="string">'Hi there!'</span>&#125;)</span><br></pre></td></tr></table></figure><br><p>이 값들은 오직 unbound 폼에만 표시되고, 만약 특정 값이 주어지지 않을때에 fallback 값으로 사용되지 않습니다. </p><br><p>만약 필드가 initial 을 정의하고, initial 폼을 인스턴스화 할때 포함하면, 두번째가 먼저 택해집니다. 아래 예시에는, initial 이 필드에서 주어졌고, 폼 인스턴스에도 주어졌습니다. 두번째가 우선시 됩니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">from django import forms </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">class CommentForm(forms.Form):</span></span><br><span class="line"><span class="xml">name = forms.CharField(initial='class')</span></span><br><span class="line"><span class="xml">url = forms.URLField()</span></span><br><span class="line"><span class="xml">    comment = forms.CharField()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml">In [1]: from forms_more_on_fields.forms import CommentForm                                                                                                                </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [2]: f = CommentForm(initial=&#123;'name': 'instance'&#125;, auto_id=False)                                                                                                      </span></span><br><span class="line"></span><br><span class="line"><span class="xml">In [3]: print(f)                                                                                                                                                          </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Name:<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"instance"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Url:<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"url"</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">tr</span>&gt;</span><span class="tag">&lt;<span class="name">th</span>&gt;</span>Comment:<span class="tag">&lt;/<span class="name">th</span>&gt;</span><span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"comment"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><blockquote><p>Initial 값이 정해져 있어도, </p><p>폼의 인스턴스를 생성할때 initial 을 지정해주면, 인스턴스 생성할때 지정한 initial 값이 해당 필드에 지정이 됩니다. </p></blockquote><br><h3 id="Form-get-initial-for-field-field-field-name"><a href="#Form-get-initial-for-field-field-field-name" class="headerlink" title="Form.get_initial_for_field(field, field_name)"></a><code>Form.get_initial_for_field(field, field_name)</code></h3><br><p>get_initial_for_field() 를 사용하여, 폼 필드의 초기 데이터를 조회할수 있습니다. 이는 Form.initial 과 Field.initial 로 부터, 데이터를 조회하고, 그 순서대로 호출 가능한 초기값들을 평가합니다 .</p><p><br><br></p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/16/Form-API-3%ED%8E%B8-Dynamic-Initial-Values/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 2편 - 폼을 사용하여 데이터 검증하기</title>
      <link>http://djangojeng-e.github.io/2020/10/15/Form-API-2%ED%8E%B8-%ED%8F%BC%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0/</link>
      <guid>http://djangojeng-e.github.io/2020/10/15/Form-API-2%ED%8E%B8-%ED%8F%BC%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0/</guid>
      <pubDate>Thu, 15 Oct 2020 05:29:29 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;폼을-사용하여-데이터-검증하기&quot;&gt;&lt;a href=&quot;#폼을-사용하여-데이터-검증하기&quot; class=&quot;headerlink&quot; title=&quot;폼을 사용하여 데이터 검증하기&quot;&gt;&lt;/a&gt;폼을 사용하여 데이터 검증하기&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Form-clean&quot;&gt;&lt;a href=&quot;#Form-clean&quot; class=&quot;headerlink&quot; title=&quot;Form.clean()&quot;&gt;&lt;/a&gt;&lt;code&gt;Form.clean()&lt;/code&gt;&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;서로 의존되어 있는 필드들을 위한 커스텀 검증을 추가해야 할때는, 폼에 clean() 메서드를 써주면 됩니다. &lt;/p&gt;
&lt;br&gt;

&lt;h3 id=&quot;Form-is-valid&quot;&gt;&lt;a href=&quot;#Form-is-valid&quot; class=&quot;headerlink&quot; title=&quot;Form.is_valid()&quot;&gt;&lt;/a&gt;&lt;code&gt;Form.is_valid()&lt;/code&gt;&lt;/h3&gt;&lt;br&gt;

&lt;p&gt;폼 객체의 기본 과제는, 데이터를 검증하는것입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;Bound 폼 인스턴스를 가지고, &lt;code&gt;is_valid()&lt;/code&gt; 메서드를 호출하여 유효성 검증을 실행하고, 데이터가 유효했었는지 아닌지에 대한 불리언값을 반환합니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [1]: data = &amp;#123;&#39;subject&#39;: &#39;hello&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;message&#39;: &#39;Hi there&#39;,  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;sender&#39;: &#39;foo@example.com&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;cc_myself&#39;: True&amp;#125;                                                                                                                                        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [2]: from forms_more_on_fields.forms import ContactForm                                                                                                                &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [3]: f = ContactForm(data)                                                                                                                                             &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [4]: f.is_valid()                                                                                                                                                      &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[4]: True&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;유효하지 않은 데이터로도 시도해보기 위해서, 아래 예시에는 subject  필드가 비어있습니다 (모든 필드들이 채워져야 하는 폼이므로, 이것은 에러 입니다). 게다가, 아래 예시에서, sender 는 유효한 이메일 주소가 아니게 입력 된 폼입니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;figure class=&quot;highlight shell&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;In [5]: data = &amp;#123;&#39;subject&#39;: &#39;&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;message&#39;: &#39;Hi there&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;sender&#39;: &#39;invalid email address&#39;, &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   ...:         &#39;cc_myself&#39;: True&amp;#125;                                                                                                                                     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [6]: f = ContactForm(data)                                                                                                                                          &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;In [7]: f.is_valid()                                                                                                                                                   &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Out[7]: False&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="폼을-사용하여-데이터-검증하기"><a href="#폼을-사용하여-데이터-검증하기" class="headerlink" title="폼을 사용하여 데이터 검증하기"></a>폼을 사용하여 데이터 검증하기</h2><br><h3 id="Form-clean"><a href="#Form-clean" class="headerlink" title="Form.clean()"></a><code>Form.clean()</code></h3><br><p>서로 의존되어 있는 필드들을 위한 커스텀 검증을 추가해야 할때는, 폼에 clean() 메서드를 써주면 됩니다. </p><br><h3 id="Form-is-valid"><a href="#Form-is-valid" class="headerlink" title="Form.is_valid()"></a><code>Form.is_valid()</code></h3><br><p>폼 객체의 기본 과제는, 데이터를 검증하는것입니다. </p><br><p>Bound 폼 인스턴스를 가지고, <code>is_valid()</code> 메서드를 호출하여 유효성 검증을 실행하고, 데이터가 유효했었는지 아닌지에 대한 불리언값을 반환합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">In [1]: data = &#123;'subject': 'hello', </span><br><span class="line">   ...:         'message': 'Hi there',  </span><br><span class="line">   ...:         'sender': 'foo@example.com', </span><br><span class="line">   ...:         'cc_myself': True&#125;                                                                                                                                        </span><br><span class="line"></span><br><span class="line">In [2]: from forms_more_on_fields.forms import ContactForm                                                                                                                </span><br><span class="line"></span><br><span class="line">In [3]: f = ContactForm(data)                                                                                                                                             </span><br><span class="line"></span><br><span class="line">In [4]: f.is_valid()                                                                                                                                                      </span><br><span class="line">Out[4]: True</span><br></pre></td></tr></table></figure><br><p>유효하지 않은 데이터로도 시도해보기 위해서, 아래 예시에는 subject  필드가 비어있습니다 (모든 필드들이 채워져야 하는 폼이므로, 이것은 에러 입니다). 게다가, 아래 예시에서, sender 는 유효한 이메일 주소가 아니게 입력 된 폼입니다. </p><br><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In [5]: data = &#123;'subject': '', </span><br><span class="line">   ...:         'message': 'Hi there', </span><br><span class="line">   ...:         'sender': 'invalid email address', </span><br><span class="line">   ...:         'cc_myself': True&#125;                                                                                                                                     </span><br><span class="line"></span><br><span class="line">In [6]: f = ContactForm(data)                                                                                                                                          </span><br><span class="line"></span><br><span class="line">In [7]: f.is_valid()                                                                                                                                                   </span><br><span class="line">Out[7]: False</span><br></pre></td></tr></table></figure><p><br><br></p><a id="more"></a><br><h3 id="Form-errors"><a href="#Form-errors" class="headerlink" title="Form.errors"></a><code>Form.errors</code></h3><br><p>에러 속성을 error messages 의 사전에서 가져옵니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [8]: f.errors                                                                                                                                                       </span><br><span class="line">Out[8]: </span><br><span class="line">&#123;'subject': ['This field is required.'],</span><br><span class="line"> 'sender': ['Enter a valid email address.']&#125;</span><br></pre></td></tr></table></figure><br><p>해당 사전에서, keys 는 필드 이름들이고, Values 는 에러 메시지들을 문자열로 표시한 리스트 입니다. </p><p>에러 메시지들은 리스트에 저장 되어 있습니다. 왜냐하면, 하나의 필드는 여러개의 에러 메시지들을 가질수도 있기 때문입니다. </p><br><p><code>is_valid()</code> 를 호출하지 않아도, errors 에 엑세스 할수 있습니다. <br></p><br><p>폼의 데이터는 처음 is_valid() 혹은 errors 에 호출하거나 access 할때 유효성 검사가 이루어 집니다. </p><br><p>유효성 루틴은 오직 한번만 호출됩니다. 몇번에 걸쳐서 errors 를 접근을 하던, is_valid() 를 호출하던. 딱 한번만 유효성 검사가 이루어집니다. 이것이 의미하는 바는, 유효성이 다른 부작용이 있을때, 부작용들은 오직 한번만 일어난다는것을 의미합니다. </p><br><h3 id="Form-errors-as-data"><a href="#Form-errors-as-data" class="headerlink" title="Form.errors.as_data()"></a><code>Form.errors.as_data()</code></h3><br><p>오리지널 ValidationError 인스턴스들을 매핑하는 사전을 반환합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [9]: f.errors.as_data()                                                                                                                                             </span><br><span class="line">Out[9]: </span><br><span class="line">&#123;'subject': [ValidationError(['This field is required.'])],</span><br><span class="line"> 'sender': [ValidationError(['Enter a valid email address.'])]&#125;</span><br></pre></td></tr></table></figure><br><p>코드로 에러를 식별하고 싶을때, 이 메서드를 사용합니다. 이 메서드는 에러의 메시지를 재작성 하거나 에러가 있을때, 뷰 안에 커스텀 로직을 작성할수 있게 해줍니다. </p><br><p>또한, 에러들을 커스텀 형태, (예, XML) 로 직력화 하는데에도 사용될수 있습니다.  </p><br><p>예를들면, as_json() 은 as_data() 에 의존하는 메서드 입니다. </p><br><br><h3 id="Form-errors-as-json-escape-html-False"><a href="#Form-errors-as-json-escape-html-False" class="headerlink" title="Form.errors.as_json(escape_html=False)"></a><code>Form.errors.as_json(escape_html=False)</code></h3><br><p>에러를 직렬화된 JSON 으로 반환합니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">In [10]: f.errors.as_json()                                                                                                                                            </span><br><span class="line">Out[10]: '&#123;"subject": [&#123;"message": "This field is required.", "code": "required"&#125;], </span><br><span class="line">"sender": [&#123;"message": "Enter a valid email address.", "code": "invalid"&#125;]&#125;'</span><br></pre></td></tr></table></figure><br><p>기본값으로, as_json() 은 그 결과를 escape  하지 않습니다. </p><p>만약 AJAX 요청 같은 것을 Form View 에 사용하고 있다면, (Form view 에서 클라이언트는 응답을 해석하여, 에러들을 페이지에 삽입하고, 당신은 사이트간 스크립팅 공격의 가능성을 피하기 위해서, 클라이언트 사이드에 결과들을 escape 하고 싶을것입니다). 이는, JavaScript 로 element.textContext = errorText 혹은 jQuery의 $(el).text(errorText) 를 사용해서 해결할수 있습니다. </p><br><p>만약 어떠한 이유로인해, client-side escaping 을 원치 않는다면, escape_html=True 를 설정해 주면 됩니다. 그리고 에러 메시지들은 escaped 되어서, 직접 HTML  안에 사용할수 있습니다. </p><br><h3 id="Form-errors-get-json-data-escape-html-False"><a href="#Form-errors-get-json-data-escape-html-False" class="headerlink" title="Form.errors.get_json_data(escape_html=False)"></a><code>Form.errors.get_json_data(escape_html=False)</code></h3><br><p>JSON 으로 직렬화하기 좋은 사전으로 에러들을 반환합니다. </p><p><br>form.errors.as_json() 은 직렬화된 JSON 을 반환 합니다. 하지만, Form.errors.get_json_data() 는 직렬화 되기 전 에러 데이터를 반환 합니다. <br></p><p>escape_html 파라미터는, Form.errors.as_json() 에서 나온것처럼 작동합니다. </p><br><h3 id="Form-add-errors-field-error"><a href="#Form-add-errors-field-error" class="headerlink" title="Form.add_errors(field,error)"></a><code>Form.add_errors(field,error)</code></h3><br><p>이 메서드는 에러들을 Form.clean() 메서드 안에서 혹은 폼의 바깥에서 특정 필드들에 추가할수 있게 해줍니다. </p><p>field 인자는 필드의 이름이고, 에러가 추가되어야 하는 필드입니다. 이 값이 None 이면, 에러는 non-field 에러로 간주됩니다.</p><br><p>error 인자는 문자열로 될수 있습니다 혹은 ValidationError 의 인스턴스가 선호될수 있습니다. </p><br><p>Form.add_error() 는 자동으로 cleaned_data 부터 연결된 필드들을 지워줍니다. </p><br><h3 id="Form-has-error-field-code-None"><a href="#Form-has-error-field-code-None" class="headerlink" title="Form.has_error(field, code=None)"></a><code>Form.has_error(field, code=None)</code></h3><br><p>필드가 특정 에러코드를 가진 에러를 가지고 있는지 없는지 Boolean 값을 리턴합니다. </p><p>만약 code 가 None 이면, 필드가 어떤 에러들을 가지고 있을경우, True 를 반환합니다. </p><br><p>non-field errors 를 확인하기 위해서는, NON_FIELD_ERRORS 를 field 파라미터로 사용할수 있습니다. </p><br><br><h3 id="Form-non-field-errors"><a href="#Form-non-field-errors" class="headerlink" title="Form.non_field_errors()"></a><code>Form.non_field_errors()</code></h3><br><p>이 메서드는 특정 필드와 연관이 없는 Form.errors 로 부터 에러들의 리스트를 반환합니다.</p><p>이는 Form.clean() 과 Form.add_errors를 사용하여 추가된 에러들에 발생된 ValidationErrors 들을 포함합니다. </p><br><br><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><br><table><thead><tr><th><strong>Method</strong></th><th><strong>role</strong></th></tr></thead><tbody><tr><td>clean()</td><td>서로 의존하는 필드들을 위한 사용자 검증이 필요할때</td></tr><tr><td>is_valid()</td><td>Bound 된 폼 인스턴스의 유효성 검사. Boolean 값을 반환</td></tr><tr><td>.errors</td><td>error messages 사전을 가져오기 위한 errors 속성에 엑세스 합니다.</td></tr><tr><td>.errors.as_data()</td><td>오리지널 ValidationError 인스턴스들을 매핑하는 사전을 반환 합니다.</td></tr><tr><td>.errors.as_json()</td><td>에러를 직렬화된 JSON 으로 반환합니다.</td></tr><tr><td>.errors.get_json_data(escape_html=False)</td><td>에러들을 JSON 으로 직렬화하기 좋은 형태의 사전으로 반환합니다.</td></tr><tr><td>.add_error(field, error)</td><td>특정 필드에 에러를 추가할수 있게 해줍니다.</td></tr><tr><td>.has_error(field, code=None)</td><td>필드가 특정 코드를 가진 에러를 가지고 있는지 없는지 Boolean을 리턴합니다.</td></tr><tr><td>.non_field_errors()</td><td>특정 필드와 연결되지 않은 Form.errors 로부터 에러의 리스트를 반환합니다.</td></tr></tbody></table><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/15/Form-API-2%ED%8E%B8-%ED%8F%BC%EC%9D%84-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-%EB%8D%B0%EC%9D%B4%ED%84%B0-%EA%B2%80%EC%A6%9D%ED%95%98%EA%B8%B0/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Form API 1편 - Bound and Unbound Forms</title>
      <link>http://djangojeng-e.github.io/2020/10/14/Form-API-1%ED%8E%B8-Bound-and-Unbound-Forms/</link>
      <guid>http://djangojeng-e.github.io/2020/10/14/Form-API-1%ED%8E%B8-Bound-and-Unbound-Forms/</guid>
      <pubDate>Wed, 14 Oct 2020 10:34:09 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Form-API&quot;&gt;&lt;a href=&quot;#Form-API&quot; class=&quot;headerlink&quot; title=&quot;Form API&quot;&gt;&lt;/a&gt;Form API&lt;/h2&gt;&lt;br&gt;

&lt;h3 id=&quot;Bound-and-Unbound-Forms&quot;&gt;&lt;a href=&quot;#
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Form-API"><a href="#Form-API" class="headerlink" title="Form API"></a>Form API</h2><br><h3 id="Bound-and-Unbound-Forms"><a href="#Bound-and-Unbound-Forms" class="headerlink" title="Bound and Unbound Forms"></a>Bound and Unbound Forms</h3><br><p>하나의 폼 인스턴스는 <code>bound</code> 혹은 <code>unbound</code> 로 종류가 나뉩니다. </p><br><h4 id="Bound-Form"><a href="#Bound-Form" class="headerlink" title="Bound Form"></a>Bound Form</h4><br><p>폼이 Bound 되어있다라는 표현은, 데이터가 폼에 묶여있는 형태로. </p><p>폼에 데이터가 있는 상태를 의미합니다.<br> 해당 폼 인스턴스가, 데이터를 가지고 있다면, Django 는 해당 데이터를 검증하고, 데이터와 함께 HTML 로 렌더링 할수 있게 됩니다. </p><br><h4 id="Unbound-Form"><a href="#Unbound-Form" class="headerlink" title="Unbound Form"></a>Unbound Form</h4><br><p>만약에 폼이 unbound 되었다면, 해당 폼 인스턴스에는 데이터 검증 작업을 수행할수 없습니다 (검증할 데이터가 없기 때문입니다). 그렇지만, 비어있는 폼을 HTML 로 렌더 할수 있습니다. </p><br><br><h2 id="폼-클래스로-폼-인스턴스-생성"><a href="#폼-클래스로-폼-인스턴스-생성" class="headerlink" title="폼 클래스로 폼 인스턴스 생성"></a>폼 클래스로 폼 인스턴스 생성</h2><br><p>하나의 unbound  폼 (데이터가 비어있는 폼 인스턴스) 을 생성하기 위해서는, 폼 클래스를 인스턴스화 시켜주면 됩니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">f = ContactForm()</span><br></pre></td></tr></table></figure><br><p>반대로, 폼에 데이터를 묶어주는, bound 폼 인스턴스를 생성하기 위해서는, </p><p><br>묶어줄 데이터를 사전 형태로 전달해주면 됩니다. </p><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;</span><br><span class="line">    <span class="string">'subject'</span>: <span class="string">'hello'</span>,</span><br><span class="line">    <span class="string">'message'</span>: <span class="string">'Hi there'</span>,</span><br><span class="line">    <span class="string">'sender'</span>: <span class="string">'foo@example.com'</span>,</span><br><span class="line">    <span class="string">'cc_myself'</span>: <span class="literal">True</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f = ContactForm(data)</span><br></pre></td></tr></table></figure><br><p>이 사전안에 keys 는 필드 이름이고, 이는 Form 클래스안의 속성들과 대응합니다. </p><p><br>사전안에 있는 values 는 여러분들이 검증하려고 하는 데이터 입니다. 이들은 보통 문자열로 되어 있지만, 문자열이여만 하는 요구 조건은 없습니다. 전달될 데이터 타입은 필드 마다 다를수 있습니다. </p><br><h2 id="is-bound"><a href="#is-bound" class="headerlink" title="is_bound"></a><code>is_bound</code></h2><br><p>만약 여러분들이 form 인스턴스가 bound 인지 unbound 인지 실행시에 구분하고 싶다면, form 의 is_bound 속성의 값을 확인 하면 됩니다. True 혹은 False 를 반환합니다. </p><br><p>shell 에서 확인해보면, </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">In [3]: from forms_more_on_fields.forms import ContactForm                                                                                                             </span><br><span class="line">In [4]: f = ContactForm()                                                                                                                                              </span><br><span class="line">In [5]: f.is_bound                                                                                                                                                     </span><br><span class="line">Out[5]: False</span><br><span class="line">In [6]: f = ContactForm(&#123;'subject': 'hello'&#125;)                                                                                                                          </span><br><span class="line">In [7]: f.is_bound                                                                                                                                                     </span><br><span class="line">Out[7]: True</span><br></pre></td></tr></table></figure><br><ul><li>폼 인스턴스에 데이터가 들어가면, is_bound 를 호출했을때, True 를 반환하고 </li><li>폼 인스턴스에 데이터가 들어가지 않은 unbound 폼에 is_bound 를 호출하면, False 를 반환합니다 </li></ul><br><p>비어 있는 사전을 전달할 경우, 비어 있는 데이터를 가진 bound form 이 됩니다. </p><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">In [8]: f = ContactForm(&#123;&#125;)       # 비어있는 사전 전달                                                                                                                            </span><br><span class="line"></span><br><span class="line">In [9]: f.is_bound                                                                                                                                                     </span><br><span class="line">Out[9]: True</span><br></pre></td></tr></table></figure><br><p>Bound Form 인스턴스를 가지고 있고, 어떻게든 데이터를 바꾸고 싶거나 혹은 unbound form 을 어떠한 데이터를 가지게 하고 싶다면, 또다른 Form 인스턴스를 생성하면 됩니다. </p><br><p>Form instance 안에 데이터를 변경하는 길은 없습니다. 한번 Form 인스턴스가 생성이 되면, 데이터를 가지고 있던 없던, 데이터는 변경이 불가능 합니다! </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/14/Form-API-1%ED%8E%B8-Bound-and-Unbound-Forms/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 18편 - 폼 템플릿 작업하기-6</title>
      <link>http://djangojeng-e.github.io/2020/10/13/Django-Forms-18%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-6/</link>
      <guid>http://djangojeng-e.github.io/2020/10/13/Django-Forms-18%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-6/</guid>
      <pubDate>Tue, 13 Oct 2020 04:47:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Reusable-form-templates&quot;&gt;&lt;a href=&quot;#Reusable-form-templates&quot; class=&quot;headerlink&quot; title=&quot;Reusable form templates&quot;&gt;&lt;/a&gt;Reusable form tem
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Reusable-form-templates"><a href="#Reusable-form-templates" class="headerlink" title="Reusable form templates"></a>Reusable form templates</h2><br><p>만약 여러분의 사이트가 공통된 렌더링 로직을 가진 폼들을 다수의 공간에서 사용한다면, </p><p><br>반복되는것을 폼의 템플릿 안에 저장하고 include 테그를 사용하여, 다른 템플릿 안에서 사용할수 있습니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> 'form_snippet.html' %&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># In form_snippet_html </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> field <span class="keyword">in</span> form %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; field.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">        </span><span class="template-variable">&#123;&#123; field.label_tag &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><br><br><p>만약 폼 객체가 컨텍스트 안에 포함되어, 다른 이름을 가진 템플릿으로 전달 된다면, with  인자를 통해서, alias 설정을 할수 있습니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">include</span></span> "form_snippet.html" with form=common_form %&#125;</span></span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/13/Django-Forms-18%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 17편 - 폼 템플릿 작업하기-5</title>
      <link>http://djangojeng-e.github.io/2020/10/13/Django-Forms-17%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-5/</link>
      <guid>http://djangojeng-e.github.io/2020/10/13/Django-Forms-17%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-5/</guid>
      <pubDate>Tue, 13 Oct 2020 04:42:49 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Looping-over-hidden-and-visible-fields&quot;&gt;&lt;a href=&quot;#Looping-over-hidden-and-visible-fields&quot; class=&quot;headerlink&quot; title=&quot;Looping over hid
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Looping-over-hidden-and-visible-fields"><a href="#Looping-over-hidden-and-visible-fields" class="headerlink" title="Looping over hidden and visible fields"></a>Looping over hidden and visible fields</h2><br><p>만약 여러분들이 수동으로 폼을 템플릿안에서 레이아웃을 잡는 작업을 하고 있다면, Django 의 기본 폼 레이아웃과는 반대되게, <code>&lt;input type=&quot;hidden&quot;&gt;</code> 을 사용하여, 숨김처리가 되지 않은 필드들과 다르게 사용할수 있습니다. </p><br><p>예를들면, 숨겨진 필드들은 아무것도 출력하지 않기 때문에, 에러 메시지들을 해당 필드 옆에 출력 한다는것은 사용자들에게 혼란을 일으킬수 있을것입니다. 따라서, 이런 필드들의 에러들은 다른 방식으로 다루어 져야 합니다. </p><br><p>Django 는 숨겨진 필드와 노출된 필드들을 따로 반복할수 있게 해줍니다. </p><br><p>바로, hidden_fields() 와 visible_fields()</p> <br><p>아래 예시를 참고합니다. </p><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&#123;# Include the hidden fields #&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> hidden <span class="keyword">in</span> form.hidden_fields %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="template-variable">&#123;&#123; hidden &#125;&#125;</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="comment">&#123;# Include the visible fields #&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> field <span class="keyword">in</span> form.visible_fields %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">         </span><span class="template-variable">&#123;&#123; field.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">         </span><span class="template-variable">&#123;&#123; field.label_tag &#125;&#125;</span><span class="xml">  </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span></span><br><span class="line"><span class="xml">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><br><p>위의 예시는, 숨겨진 필드들 안에 있는 어떤 에러도 다루지 않습니다. 보통은, 숨겨진 필드안에 있는 에러는 폼 변조를 의미할수 있습니다. 보통 폼 동작은 폼을 바꾸지 않습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/13/Django-Forms-17%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 16편 - 폼 템플릿 작업하기-4</title>
      <link>http://djangojeng-e.github.io/2020/10/12/Django-Forms-16%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-4/</link>
      <guid>http://djangojeng-e.github.io/2020/10/12/Django-Forms-16%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-4/</guid>
      <pubDate>Mon, 12 Oct 2020 01:14:01 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Looping-over-the-form’s-fields&quot;&gt;&lt;a href=&quot;#Looping-over-the-form’s-fields&quot; class=&quot;headerlink&quot; title=&quot;Looping over the form’s fields&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Looping-over-the-form’s-fields"><a href="#Looping-over-the-form’s-fields" class="headerlink" title="Looping over the form’s fields"></a>Looping over the form’s fields</h2><br><p>만약 여러분들이 각 폼 필드들을 위해 같은 HTML 테그들을 사용하고 있다면, 반복되는 코드들을 줄일수 있습니다 </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># 반복문을 사용하여 반복되는 코드를 줄일수 있습니다 </span></span><br><span class="line"><span class="xml"># </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> %&#125;</span><span class="xml"> </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># 예시 </span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> field <span class="keyword">in</span> form %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldwrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; field.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; field.lable_tag &#125;&#125;</span><span class="xml"> </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> field.help_text %&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"help"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; field.help_text|<span class="name">safe</span> &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><br><p>반복문이 실행될때마다, 각 필드에서 사용할수 유용한 속성들이 존재 합니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field &#125;&#125;</span><span class="xml"> 가 포함하고 있는 유용한 속성들은 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.lable &#125;&#125;</span><span class="xml"> 필드의 레이블을 표시합니다. 예) Email Address </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml"># 필드의 label 이 적절한 HTML <span class="tag">&lt;<span class="name">label</span>&gt;</span> 태그로 감싸집니다. 이는 form 의 label_suffix 를 포함합니다. 예를들면, labe_suffix 의 기본값은 콜론입니다. </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"id_email"</span>&gt;</span>Email address:<span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.id_for_label &#125;&#125;</span></span><br><span class="line"><span class="xml"># 이 필드를 위해 사용될 ID (위 예시에서는 id_email). </span></span><br><span class="line"><span class="xml"># 만약 여러분들이 label 을 수동으로 만들고 있다면, 이것을 label_tag 대신에 사용할수 있습니다 </span></span><br><span class="line"><span class="xml"># 이것또한 유용하게 사용될수 있습니다. </span></span><br><span class="line"><span class="xml"># 예를들면, 여러분들이 인라인 JavaScript 를 가지고 있고, 필드의 ID 를 하드코딩 하는것을 피하고 </span></span><br><span class="line"><span class="xml"># 싶을때처럼 말이죠 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.value &#125;&#125;</span></span><br><span class="line"><span class="xml"># 필드의 값 예) someone@example.com </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.html_name &#125;&#125;</span></span><br><span class="line"><span class="xml"># 인풋 요소의 이름 필드에 사용될 필드의 이름, 설정 되어 있다면, 폼의 접두사를 고려합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.help_text &#125;&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"># 필드와 관련된 hep text </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.errors  &#125;&#125;</span></span><br><span class="line"><span class="xml"># 필드에 해당하는 유효성 혹은 검증 에러를 가지고 있는 <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class-</span>"<span class="attr">errorlist</span>"&gt;</span>를 출력합니다 </span></span><br><span class="line"><span class="xml"># 에러의 모습을 </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> error <span class="keyword">in</span> field.errors %&#125;</span><span class="xml"> 반복문을 사용하여, 커스터마이즈 할수 있습니다. </span></span><br><span class="line"><span class="xml"># 이 경우에는, 반복문안에 각 객체들은 에러 메시지를 포함하고 있는 문자열이 됩니다. </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.is_hidden &#125;&#125;</span></span><br><span class="line"><span class="xml"># 만약 필드가 숨겨진 필드라면 True 를 반환하고, 숨겨져 잇지 않다면 False 를 반환합니다 </span></span><br><span class="line"><span class="xml"># 이것은 특출나게 템플릿 변수로써 유용하지 않습니다. 하지만 아래 예시같이 조건적인 테스트에서는</span></span><br><span class="line"><span class="xml"># 유용할수 있습니다 </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> field.is_hidden %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml"> </span><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span><span class="xml"> </span></span><br><span class="line"><span class="xml">    </span></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; field.field &#125;&#125;</span></span><br><span class="line"><span class="xml"># 폼 클래스로부터 필드 인스턴스로 BoundField 로 감싸집니다. </span></span><br><span class="line"><span class="xml"># Field 속성들을 엑세스하기 위해 사용합니다. 예) </span><span class="template-variable">&#123;&#123;char_field.field.max_length&#125;&#125;</span></span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/12/Django-Forms-16%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 15편 - 폼 템플릿 작업하기-3</title>
      <link>http://djangojeng-e.github.io/2020/10/11/Django-Forms-15%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-3/</link>
      <guid>http://djangojeng-e.github.io/2020/10/11/Django-Forms-15%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-3/</guid>
      <pubDate>Sun, 11 Oct 2020 09:13:40 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Rendering-form-error-messages&quot;&gt;&lt;a href=&quot;#Rendering-form-error-messages&quot; class=&quot;headerlink&quot; title=&quot;Rendering form error messages&quot;&gt;&lt;/a
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Rendering-form-error-messages"><a href="#Rendering-form-error-messages" class="headerlink" title="Rendering form error messages"></a>Rendering form error messages</h2><br><p>폼에 에러 메시지들을 출력해줄수 있습니다. 하지만, 물론 이 부분은 유연한 추가 작업일 뿐입니다. </p><br><p>현재까지 우리는, 폼 에러들을 어떻게 출력해주어야 하는지에 대해 걱정하지 않아도 되었었습니다. </p><p><br>이번 예시에서 우리는, 각 필드에서 발생하는 에러와 폼 전체에서 발생하는 에러에 대해서 어떻게 관리 해야 하는지에 대해서 다룹니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.non_field_errors &#125;&#125;</span><span class="xml"> 가 폼의 가장 상단에 위치하고, 템플릿은 각 필드에 error 들을 조회 한다는것을 숙지 합니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.필드명.errors &#125;&#125;</span><span class="xml"> 를 사용하면, 폼 에러의 리스트를 출력해 줍니다. 이는 순서가 정해지지 않은 unordered list 로 렌더 됩니다 </span></span><br><span class="line"><span class="xml">아래와 같이 보여질수 있습니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"errorlist"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Sender is required.<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><p>해당 리스트는 errorlist  의 CSS 클래스를 가지고, 모양을 스타일링 할수 있게 해줍니다. 만약, 여러분들이 조금 더 출력 된 에러들을 커스터마이즈 하고 싶다면, 반복문을 사용하여 이를 꾸며줄수 있습니다. </p><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">if</span></span> form.subject.errors %&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">for</span></span> error <span class="keyword">in</span> form.subject.errors %&#125;</span></span><br><span class="line"><span class="xml">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">strong</span>&gt;</span></span><span class="template-variable">&#123;&#123; error|<span class="name">escape</span> &#125;&#125;</span><span class="xml"><span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml">        </span><span class="template-tag">&#123;% <span class="name"><span class="name">endfor</span></span> %&#125;</span></span><br><span class="line"><span class="xml">        </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">endif</span></span> %&#125;</span></span><br></pre></td></tr></table></figure><br><br><p>필드 에러가 아닌것 (그리고 혹은, form.as_p) 를 사용하여, 폼의 상단에 렌더된 숨겨진 필드 에러들은 추가적인 nonfield 클래스와 함께 렌더가 됩니다. </p><p><br>이는, 특히 필드 특화된 에러들과의 구분을 도와줍니다.  예를들면, </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"errorlist nonfield"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>Generic Validation error<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><p>The Forms API 를 확인하면, 에러들과, 스타일링 그리고 템플릿 안에서의 폼 속성들에 대한 것들을 확인 할수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/11/Django-Forms-15%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 14편 - 폼 템플릿 작업하기-2</title>
      <link>http://djangojeng-e.github.io/2020/10/10/Django-Forms-14%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-2/</link>
      <guid>http://djangojeng-e.github.io/2020/10/10/Django-Forms-14%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-2/</guid>
      <pubDate>Sat, 10 Oct 2020 08:35:42 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Rendering-Fields-Manually&quot;&gt;&lt;a href=&quot;#Rendering-Fields-Manually&quot; class=&quot;headerlink&quot; title=&quot;Rendering Fields Manually&quot;&gt;&lt;/a&gt;Rendering Fields Manually&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;Django 가 forms.py 에 작성된 폼들을 템플릿에 자동으로 풀어놓게 하고 싶지 않으면, 수동으로 작업하는 방법도 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;각 필드들은, form.(폼필드명) 의 형태로, 해당폼의 속성으로 존재합니다. 그리고, Django 템플릿안에서 적절하게 사용하여 렌더 될수 있습니다. &lt;/p&gt;
&lt;p&gt;예시를 들자면, 이전 포스팅에서 작성한 forms.py 와 views.py 를 기반으로 해서 예를 듭니다. &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# forms.py &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; forms &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContactForm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forms.Form)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	subject = forms.CharField(max_length=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	message = forms.CharField(widget=forms.Textarea)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	sender = forms.EmailField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	cc_mysself = forms.BooleanField(required=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# views.py &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;form_render&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	form = ContactForm() &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;string&quot;&gt;&#39;form.html&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;form&#39;&lt;/span&gt;: form&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;form.html 파일에 렌더를 수동으로 해주려면, 아래와 같이 작성해주면 됩니다. &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Rendering-Fields-Manually"><a href="#Rendering-Fields-Manually" class="headerlink" title="Rendering Fields Manually"></a>Rendering Fields Manually</h2><br><p>Django 가 forms.py 에 작성된 폼들을 템플릿에 자동으로 풀어놓게 하고 싶지 않으면, 수동으로 작업하는 방법도 있습니다. </p><br><p>각 필드들은, form.(폼필드명) 의 형태로, 해당폼의 속성으로 존재합니다. 그리고, Django 템플릿안에서 적절하게 사용하여 렌더 될수 있습니다. </p><p>예시를 들자면, 이전 포스팅에서 작성한 forms.py 와 views.py 를 기반으로 해서 예를 듭니다. </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># forms.py </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">subject = forms.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">message = forms.CharField(widget=forms.Textarea)</span><br><span class="line">sender = forms.EmailField()</span><br><span class="line">cc_mysself = forms.BooleanField(required=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># views.py </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">form_render</span><span class="params">(request)</span>:</span></span><br><span class="line">form = ContactForm() </span><br><span class="line"><span class="keyword">return</span> render(request, <span class="string">'form.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure><br><p>form.html 파일에 렌더를 수동으로 해주려면, 아래와 같이 작성해주면 됩니다. </p><br><a id="more"></a><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; form.non_field_errors &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.subject.id_for_lable &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span> Email Subject <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.message.id_for_label &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Your messages : <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.sender.id_for_label &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>Your Email Address : <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">lable</span> <span class="attr">for</span>=<span class="string">"</span></span></span><span class="template-variable">&#123;&#123; form.cc_myself.id_for_label &#125;&#125;</span><span class="xml"><span class="tag"><span class="string">"</span>&gt;</span>CC Yourself <span class="tag">&lt;/<span class="name">lable</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself &#125;&#125;</span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><h2 id="label-tag"><a href="#label-tag" class="headerlink" title="label_tag()"></a><code>label_tag()</code></h2><br><p><code>&lt;label&gt;</code> 요소들을 <code>label_tag()</code> 를 사용하여 완성 시킬수 있습니다. 예를들면, 아래와 같이 HTML 에 작성해 주면 됩니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.subject &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.message &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.sender &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"fieldWrapper"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself.errors &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself.label_tag &#125;&#125;</span></span><br><span class="line"><span class="xml">    </span><span class="template-variable">&#123;&#123; form.cc_myself &#125;&#125;</span><span class="xml">    </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br><p>서버를 실행 시키고, 템플릿을 확인해 보면, 아래와 같이 폼이 출력 됩니다. </p><br><img src="/2020/10/10/Django-Forms-14%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-2/image1.png" class=""><br><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># 이미지에서 들여다 보면, </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.subject.errors &#125;&#125;</span><span class="xml"> 는 아무것도 출력하지 않습니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.subject.label_tag &#125;&#125;</span><span class="xml"> 는, </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_subject"</span>&gt;</span>Subject<span class="tag">&lt;/<span class="name">label</span>&gt;</span> 로 출력되는걸 볼수 있습니다 </span></span><br><span class="line"></span><br><span class="line"><span class="xml"># </span><span class="template-variable">&#123;&#123; form.subject &#125;&#125;</span><span class="xml"> 는, </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">request</span> <span class="attr">id</span>=<span class="string">"id_subject"</span>&gt;</span> 형태로 출력되는것을 확인 할수 있습니다.</span></span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/10/Django-Forms-14%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 13편 - 폼 템플릿 작업하기-1</title>
      <link>http://djangojeng-e.github.io/2020/10/09/Django-Forms-13%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-1/</link>
      <guid>http://djangojeng-e.github.io/2020/10/09/Django-Forms-13%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-1/</guid>
      <pubDate>Thu, 08 Oct 2020 23:06:52 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Working-with-form-templates&quot;&gt;&lt;a href=&quot;#Working-with-form-templates&quot; class=&quot;headerlink&quot; title=&quot;Working with form templates&quot;&gt;&lt;/a&gt;Working with form templates&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;폼을 템플릿으로 가져오기 위해서 해야할 모든것은, 폼 인스턴스를 템플릿 컨텍스트에 넣어주는것입니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;



&lt;ol&gt;
&lt;li&gt;&lt;p&gt;폼인스턴스 생성&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# views.py 에서 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;form = NameForm()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;템플릿 컨텍스트에 넣기 &lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, form.html, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;form&#39;&lt;/span&gt;: form&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;



&lt;/li&gt;
&lt;/ol&gt;
&lt;br&gt;

&lt;p&gt;템플릿 컨텍스트에 넣어진 컨텍스트 즉, &lt;code&gt;{&amp;#39;form&amp;#39;: form}&lt;/code&gt; 은, 해당 템플릿 페이지에서, 아래와 같이 사용될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight django&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; form &amp;#125;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;이렇게 하면, 템플릿에서 적절하게 label 과 input 요소들을 렌더해줄수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;Form-rendering-options&quot;&gt;&lt;a href=&quot;#Form-rendering-options&quot; class=&quot;headerlink&quot; title=&quot;Form rendering options&quot;&gt;&lt;/a&gt;Form rendering options&lt;/h2&gt;&lt;br&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;추가해야할 폼 템플릿 요소들&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;폼의 출력은 &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 테그 혹은 폼의 제출 약식들을 포함하지 않는다는것을 잊지 마세요. &lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt; 태그와 &lt;code&gt;&amp;lt;submit&amp;gt;&lt;/code&gt; 태그 같은것들은 여러분들이 스스로 넣어줘야 합니다. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;br&gt;

&lt;p&gt;Django 에서 Form 을 템플릿에 렌더할때에, 옵션을 붙여서 폼의 출력 형태를 바꾸어 줄수 있습니다.  &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight django&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; form.as_table &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;tr&lt;/span&gt;&amp;gt;&lt;/span&gt; 테그로 감싸진 테이블로 폼을 렌더해줍니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; form.as_p &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt; 테그로 감싸진 폼을 렌더해 줍니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;template-variable&quot;&gt;&amp;#123;&amp;#123; form.as_ul &amp;#125;&amp;#125;&lt;/span&gt;&lt;span class=&quot;xml&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt; 태그로 감싸진 폼을 렌더해 줍니다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;form.as_table 과 form.as_ul 같은 경우, 상위 태그인 &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; 과, &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt; 요소들을 여러분들 스스로 작성하고 감싸주어야 합니다. &lt;/p&gt;
&lt;br&gt;



&lt;br&gt;

&lt;h2 id=&quot;예제&quot;&gt;&lt;a href=&quot;#예제&quot; class=&quot;headerlink&quot; title=&quot;예제&quot;&gt;&lt;/a&gt;예제&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;아주 간단한 폼을 템플릿에 렌더해 보면, &lt;/p&gt;
&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Working-with-form-templates"><a href="#Working-with-form-templates" class="headerlink" title="Working with form templates"></a>Working with form templates</h2><br><p>폼을 템플릿으로 가져오기 위해서 해야할 모든것은, 폼 인스턴스를 템플릿 컨텍스트에 넣어주는것입니다. </p><br><br><ol><li><p>폼인스턴스 생성</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># views.py 에서 </span></span><br><span class="line">form = NameForm()</span><br></pre></td></tr></table></figure></li><li><p>템플릿 컨텍스트에 넣기 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> render(request, form.html, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure></li></ol><br><p>템플릿 컨텍스트에 넣어진 컨텍스트 즉, <code>{&#39;form&#39;: form}</code> 은, 해당 템플릿 페이지에서, 아래와 같이 사용될수 있습니다. </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; form &#125;&#125;</span></span><br></pre></td></tr></table></figure><br><p>이렇게 하면, 템플릿에서 적절하게 label 과 input 요소들을 렌더해줄수 있습니다. </p><br><br><h2 id="Form-rendering-options"><a href="#Form-rendering-options" class="headerlink" title="Form rendering options"></a>Form rendering options</h2><br><blockquote><p><strong>추가해야할 폼 템플릿 요소들</strong> </p><p>폼의 출력은 <code>&lt;form&gt;</code> 테그 혹은 폼의 제출 약식들을 포함하지 않는다는것을 잊지 마세요. </p><p><code>&lt;form&gt;</code> 태그와 <code>&lt;submit&gt;</code> 태그 같은것들은 여러분들이 스스로 넣어줘야 합니다. </p></blockquote><br><p>Django 에서 Form 을 템플릿에 렌더할때에, 옵션을 붙여서 폼의 출력 형태를 바꾸어 줄수 있습니다.  </p><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-variable">&#123;&#123; form.as_table &#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">tr</span>&gt;</span> 테그로 감싸진 테이블로 폼을 렌더해줍니다 </span></span><br><span class="line"><span class="template-variable">&#123;&#123; form.as_p &#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">p</span>&gt;</span> 테그로 감싸진 폼을 렌더해 줍니다 </span></span><br><span class="line"><span class="template-variable">&#123;&#123; form.as_ul &#125;&#125;</span><span class="xml"> <span class="tag">&lt;<span class="name">ul</span>&gt;</span> 태그로 감싸진 폼을 렌더해 줍니다</span></span><br></pre></td></tr></table></figure><br><p>form.as_table 과 form.as_ul 같은 경우, 상위 태그인 <code>&lt;table&gt;</code> 과, <code>&lt;ul&gt;</code> 요소들을 여러분들 스스로 작성하고 감싸주어야 합니다. </p><br><br><h2 id="예제"><a href="#예제" class="headerlink" title="예제"></a>예제</h2><br><p>아주 간단한 폼을 템플릿에 렌더해 보면, </p><br><a id="more"></a><br><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"># forms.py </span></span><br><span class="line"></span><br><span class="line"><span class="xml">from django import forms </span></span><br><span class="line"></span><br><span class="line"><span class="xml">class ContactForm(forms.Form):</span></span><br><span class="line"><span class="xml">subject = forms.CharField(max_length=100)</span></span><br><span class="line"><span class="xml">message = forms.CharField(widget=forms.Textarea)</span></span><br><span class="line"><span class="xml">sender = forms.EmailField()</span></span><br><span class="line"><span class="xml">cc_mysself = forms.BooleanField(required=False)</span></span><br><span class="line"></span><br><span class="line"><span class="xml"># views.py </span></span><br><span class="line"><span class="xml">def form_render(request):</span></span><br><span class="line"><span class="xml">form = ContactForm() </span></span><br><span class="line"><span class="xml">return render(request, 'form.html', &#123;'form': form&#125;)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="xml"># form.html 에서 </span><span class="template-variable">&#123;&#123; form.as_p &#125;&#125;</span><span class="xml"> 로 렌더를 해보면,</span></span><br><span class="line"><span class="xml"># 아래처럼 html 태그가 생성됩니다. </span></span><br><span class="line"></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_subject"</span>&gt;</span>Subject:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"id_subject"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"subject"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_message"</span>&gt;</span>Message:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"message"</span> <span class="attr">id</span>=<span class="string">"id_message"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_sender"</span>&gt;</span>Sender:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"sender"</span> <span class="attr">id</span>=<span class="string">"id_sender"</span> <span class="attr">required</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"id_cc_myself"</span>&gt;</span>Cc myself:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"cc_myself"</span> <span class="attr">id</span>=<span class="string">"id_cc_myself"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br></pre></td></tr></table></figure><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/09/Django-Forms-13%ED%8E%B8-%ED%8F%BC-%ED%85%9C%ED%94%8C%EB%A6%BF-%EC%9E%91%EC%97%85%ED%95%98%EA%B8%B0-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 12편 - Django Form 클래스에 대해 2</title>
      <link>http://djangojeng-e.github.io/2020/10/08/Django-Forms-12%ED%8E%B8-Django-Form-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-2/</link>
      <guid>http://djangojeng-e.github.io/2020/10/08/Django-Forms-12%ED%8E%B8-Django-Form-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-2/</guid>
      <pubDate>Thu, 08 Oct 2020 00:43:30 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;Fields-에-대해서&quot;&gt;&lt;a href=&quot;#Fields-에-대해서&quot; class=&quot;headerlink&quot; title=&quot;Fields 에 대해서&quot;&gt;&lt;/a&gt;Fields 에 대해서&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;이전 포스팅들에서 다루었었던 예시보다 좀더 유용한 폼을 한번 생각해 봅시다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;개인적인 웹사이트에 contact me 기능을 구현하는 폼을 생각해 봅시다. Contact Me 폼을 작성하기 위한 &lt;code&gt;forms.py&lt;/code&gt; 파일은 아래와 같이 작성될수 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; forms &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ContactForm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forms.Form)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    subject = forms.CharField(max_length=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    message = forms.CharField(widget=forms.Textarea)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    sender = forms.EmailField()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    cc_myself = forms.BooleanField(required=&lt;span class=&quot;literal&quot;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;이전 포스팅에서 들었었던 폼의 예시는, 하나의 필드만 사용했었습니다. your_ name 과 CharField 만 사용햇었습니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;하지만, 이번 경우에는, 4가지의 필드들을 가지고 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;Fields&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;FieldTypes&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;subject&lt;/td&gt;
&lt;td&gt;CharField&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;message&lt;/td&gt;
&lt;td&gt;CharField(widget=forms.Textarea)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sender&lt;/td&gt;
&lt;td&gt;EmailField&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;cc_myself&lt;/td&gt;
&lt;td&gt;BooleanField&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;br&gt;

&lt;br&gt;

&lt;h2 id=&quot;Widgets&quot;&gt;&lt;a href=&quot;#Widgets&quot; class=&quot;headerlink&quot; title=&quot;Widgets&quot;&gt;&lt;/a&gt;Widgets&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;각 폼의 필드는 그에 상응하는 Widget 클래스를 가지고 있습니다, 위의 예시에서는 widget=forms.Textarea 로 지정되어 &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; 같은 HTML 폼 widget 이 될것입니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;대부분의 경우, 필드는 적당한 기본 widget 을 가지고 있을것입니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;예를들면, 기본값으로 CharField 는 TextInput widget 을 가질것이고, 이는 &lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt; 를 HTML 안에서 만들어 내줍니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;만약 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 가 필요했다면, 적절한 widget 을 Form 필드를 정의할때 지정해 주면 됩니다. 우리는 이것을 message 필드를 정의할때 지정해 주었습니다. &lt;/p&gt;
&lt;br&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Fields-에-대해서"><a href="#Fields-에-대해서" class="headerlink" title="Fields 에 대해서"></a>Fields 에 대해서</h2><br><p>이전 포스팅들에서 다루었었던 예시보다 좀더 유용한 폼을 한번 생각해 봅시다. </p><p><br>개인적인 웹사이트에 contact me 기능을 구현하는 폼을 생각해 봅시다. Contact Me 폼을 작성하기 위한 <code>forms.py</code> 파일은 아래와 같이 작성될수 있습니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">    subject = forms.CharField(max_length=<span class="number">100</span>)</span><br><span class="line">    message = forms.CharField(widget=forms.Textarea)</span><br><span class="line">    sender = forms.EmailField()</span><br><span class="line">    cc_myself = forms.BooleanField(required=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><br><p>이전 포스팅에서 들었었던 폼의 예시는, 하나의 필드만 사용했었습니다. your_ name 과 CharField 만 사용햇었습니다. </p><p><br>하지만, 이번 경우에는, 4가지의 필드들을 가지고 있습니다. </p><br><table><thead><tr><th><strong>Fields</strong></th><th><strong>FieldTypes</strong></th></tr></thead><tbody><tr><td>subject</td><td>CharField</td></tr><tr><td>message</td><td>CharField(widget=forms.Textarea)</td></tr><tr><td>sender</td><td>EmailField</td></tr><tr><td>cc_myself</td><td>BooleanField</td></tr></tbody></table><br><br><h2 id="Widgets"><a href="#Widgets" class="headerlink" title="Widgets"></a>Widgets</h2><br><p>각 폼의 필드는 그에 상응하는 Widget 클래스를 가지고 있습니다, 위의 예시에서는 widget=forms.Textarea 로 지정되어 <code>&lt;input type=&quot;text&quot;&gt;</code> 같은 HTML 폼 widget 이 될것입니다. </p><br><p>대부분의 경우, 필드는 적당한 기본 widget 을 가지고 있을것입니다. </p><p><br>예를들면, 기본값으로 CharField 는 TextInput widget 을 가질것이고, 이는 <code>&lt;input type=&quot;text&quot;&gt;</code> 를 HTML 안에서 만들어 내줍니다. </p><br><p>만약 <code>&lt;textarea&gt;</code> 가 필요했다면, 적절한 widget 을 Form 필드를 정의할때 지정해 주면 됩니다. 우리는 이것을 message 필드를 정의할때 지정해 주었습니다. </p><br><br><a id="more"></a><br><h2 id="Field-Data"><a href="#Field-Data" class="headerlink" title="Field Data"></a>Field Data</h2><br><p>어떤 데이터이든 폼과 함께 제출되었고, <code>is_valid()</code> 함수를 호출하여 성공적으로 검증되었으면 (is_valid() 가 True 를 반환했을때),  </p><p><br>검증된 폼 데이터는 <code>form.cleaned_data</code> 에 사전 형태로 있을것입니다. 이 데이터는 여러분들을 위해 python 데이터 타입으로 좋게 전환되어 있습니다.  </p><br><blockquote><p><strong>NOTE</strong></p><p>우리는 여전히 검증되지 않은 데이터들을, request.POST 를 사용하여 </p><p>직접 엑세스 할수 있습니다. 하지만, 검증된 데이터를 다루는것이 더 좋습니다. </p></blockquote><br><p>위에 있는 contact form 예시에서, cc_myself 는 불리언 값이 될것 입니다. 비슷하게도, IntegerField 와 FloatField  같은 필드들은, Python 이 값을 int 와 Float 으로 전환 합니다. </p><br><h2 id="Form-데이터-처리하기"><a href="#Form-데이터-처리하기" class="headerlink" title="Form 데이터 처리하기"></a>Form 데이터 처리하기</h2><br><p>폼에서 제출된 데이터가, is_valid() 함수를 사용하여 검증이 된 데이터라고 할때, 아래 예시에서는 어떻게 폼에서 받은 데이터를 뷰에서 다룰수 있는지 간단하게 보여줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.mail <span class="keyword">import</span> send_mail </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> form.is_valid():</span><br><span class="line">    subject = form.cleaned_data[<span class="string">'subject'</span>]</span><br><span class="line">    message = form.cleaned_data[<span class="string">'message'</span>]</span><br><span class="line">    sender = form.cleaned_data[<span class="string">'sender'</span>]</span><br><span class="line">    cc_myself = form.cleaned_data[<span class="string">'cc_myself'</span>]</span><br><span class="line">    </span><br><span class="line">    recipients = [<span class="string">'info@example.com'</span>]</span><br><span class="line">    <span class="keyword">if</span> cc_myself:</span><br><span class="line">        recipients.append(sender)</span><br><span class="line">        </span><br><span class="line">    send_mail(subject, message, sender, recipients)</span><br><span class="line">    <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/thanks/'</span>)</span><br></pre></td></tr></table></figure><br><p>기본적으로, form.is_valid() 가 True 이면, 각 필드들에 입력된 데이터들은, <code>form.cleaned_data[&#39;subject&#39;]</code> 같은 형식에 담아져 있습니다. 이는, 검증된 폼 데이터가 form.cleaned_data  에 사전 형태로 저장되어 있기 때문입니다. </p><br><p>이 예시에서, send_mail 에 대한 구현은 다루지 않습니다. 이 send_mail 을 더 알고 싶으면, Django 에서 이메일 보내기를 더 알아야 합니다. </p><p>Sending Email 문서를 참조하면 되는데, 처음엔 무슨 소리인지 이해가지 않을겁니다. </p><br><p>몇가지 필드 타입들은 추가적인 처리가 필요할수 있습니다. 예를들면, 폼을 사용하여 업로드된 파일들은 좀 다르게 다루어질 필요가 있습니다. <br></p><p>이런 파일들은 (request.POST 보다는 request.FILES 로 조회될수 있습니다)</p><br><p>어떻게 업로드된 파일들을 다루는지에 대해서는, binding uploaded files to a form 문서를 확인하시면 됩니다. </p>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/08/Django-Forms-12%ED%8E%B8-Django-Form-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 11편 - Django Form 클래스에 대해 1</title>
      <link>http://djangojeng-e.github.io/2020/10/08/Django-Forms-11%ED%8E%B8-Django-Form-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-1/</link>
      <guid>http://djangojeng-e.github.io/2020/10/08/Django-Forms-11%ED%8E%B8-Django-Form-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-1/</guid>
      <pubDate>Wed, 07 Oct 2020 22:14:51 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;Django-Form-Classes&quot;&gt;&lt;a href=&quot;#Django-Form-Classes&quot; class=&quot;headerlink&quot; title=&quot;Django Form Classes&quot;&gt;&lt;/a&gt;Django Form Classes&lt;/h2&gt;&lt;br&gt;

        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="Django-Form-Classes"><a href="#Django-Form-Classes" class="headerlink" title="Django Form Classes"></a>Django Form Classes</h2><br><h3 id="More-about-Django-Form-Classes"><a href="#More-about-Django-Form-Classes" class="headerlink" title="More about Django Form Classes"></a>More about Django Form Classes</h3><br><blockquote><p><strong>모든 폼 클래스들은</strong></p><p>django.forms.Form 혹은 django.forms.ModelForm 클래스 둘중 하나의 </p><p>서브 클래스들로 생성 됩니다. </p></blockquote><br><p>ModelForm 은 Form.Form 그리고 ModelForm 의 서브클래스로. 사실상 공통 기능들을 BaseForm 클래스로부터 상속 받는다고 생각하면 됩니다. </p><br><br><blockquote><p><strong>Models and Forms</strong></p><p>여러분드르이 폼이 직접적으로 Django 모델을 추가하거나 수정하는데에 쓰인다면, </p><p>ModelForm 이 시간과 노력 그리고 코드의 양을 줄이는데에 크게 기여할수 있습니다. </p><p>왜냐하면, ModelForm 은 Model 클래스로부터 적절한 필드들과 속성들을 가지고 폼을 생성해 주기 때문입니다. </p></blockquote><br><br><h3 id="Bound-and-Unbound-Form-instances"><a href="#Bound-and-Unbound-Form-instances" class="headerlink" title="Bound and Unbound Form instances"></a>Bound and Unbound Form instances</h3><br><p><strong>Bound 된 폼과, unbound 된 폼 사이의 차이점을 알아둡시다</strong></p><br><blockquote><p><strong>Unbound Form</strong></p><p>폼과 관련된 데이터를 가지고 있지 않은 폼을 의미 합니다. </p><p>사용자에게 폼이 렌더 되었을때, 해당 폼은 비어 있거나, 기본값들을 가지고 있을것입니다. </p></blockquote><br><blockquote><p><strong>Bound Form</strong></p><p>제출된 데이터를 가지고 있습니다. </p><p>따라서, 데이터가 유효한지 얘기하기 위해서 사용될수 있습니다. </p><p>만약, 유효하지 않은 bound form 이 렌더 된다면, 해당 폼은 인라인으로 에러 메시지들을 포함하여 사용자에게 어떤 데이터를 고쳐야 하는지 얘기해줄수 있습니다. </p></blockquote><br><br><h3 id="is-bound-속성"><a href="#is-bound-속성" class="headerlink" title="is_bound 속성"></a><code>is_bound</code> 속성</h3><br><p>form 의 <code>is_bound</code> 속성은 해당 폼이 데이터를 가지고 있는지 없는지 확인해 줄수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/08/Django-Forms-11%ED%8E%B8-Django-Form-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%97%90-%EB%8C%80%ED%95%B4-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 10편 - Django 에서 폼만들기 3</title>
      <link>http://djangojeng-e.github.io/2020/10/07/Django-Forms-10%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-3/</link>
      <guid>http://djangojeng-e.github.io/2020/10/07/Django-Forms-10%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-3/</guid>
      <pubDate>Wed, 07 Oct 2020 03:54:37 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;The-Template&quot;&gt;&lt;a href=&quot;#The-Template&quot; class=&quot;headerlink&quot; title=&quot;The Template&quot;&gt;&lt;/a&gt;The Template&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;이제 직접적으로 template 에 html 폼을 그려주기 위해서, &lt;code&gt;name.html&lt;/code&gt; 파일을 생성해 줍니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;지난 포스팅에서 views.py 에서 &lt;code&gt;{&amp;#39;form&amp;#39;: form}&lt;/code&gt; 이라는 컨텍스트를 &lt;code&gt;name.html&lt;/code&gt; 파일로 전달하였으므로, &lt;/p&gt;
&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.http &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; HttpResponseRedirect&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django.shortcuts &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; render &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; .forms &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; NameForm &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;get_name&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(request)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 만약 이것이 POST 요청이라면, 폼 데이터를 처리할 필요가 있습니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; request.method == &lt;span class=&quot;string&quot;&gt;&quot;POST&quot;&lt;/span&gt;: &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 폼 인스턴스를 생성하고, 요청으로부터 받아온 데이터로 채웁니다&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        form = Nameform(request.POST)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;# 유효한 데이터인지 검사합니다 &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; form.is_valid():&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# form.cleaned_data 안에 있는 데이터를 요구사항에 맞게 처리합니다. &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# ... &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;comment&quot;&gt;# 새로운 URL 로 리다이렉트 시켜줍니다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; HttpResponseRedirect(&lt;span class=&quot;string&quot;&gt;&#39;/thanks/&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# 만약 GET 이나 다른 method 의 요청을 받으면, 비어있는 폼을 생성합니다.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        form = NameForm()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; render(request, &lt;span class=&quot;string&quot;&gt;&#39;name.html&#39;&lt;/span&gt;, &amp;#123;&lt;span class=&quot;string&quot;&gt;&#39;form&#39;&lt;/span&gt;: form&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;&lt;br&gt;&lt;br&gt;템플릿에 있는 name.html 에서 아래와 같이 &lt;code&gt;&lt;/code&gt;  이라고 출력하면, 폼이 출력 됩니다. &lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/your-name/&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;% csrf_token %&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#123;&amp;#123; form &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;Submit&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="The-Template"><a href="#The-Template" class="headerlink" title="The Template"></a>The Template</h2><br><p>이제 직접적으로 template 에 html 폼을 그려주기 위해서, <code>name.html</code> 파일을 생성해 줍니다. </p><br><p>지난 포스팅에서 views.py 에서 <code>{&#39;form&#39;: form}</code> 이라는 컨텍스트를 <code>name.html</code> 파일로 전달하였으므로, </p><p><br><br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect</span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> NameForm </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 만약 이것이 POST 요청이라면, 폼 데이터를 처리할 필요가 있습니다 </span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>: </span><br><span class="line">        <span class="comment"># 폼 인스턴스를 생성하고, 요청으로부터 받아온 데이터로 채웁니다</span></span><br><span class="line">        form = Nameform(request.POST)</span><br><span class="line">        <span class="comment"># 유효한 데이터인지 검사합니다 </span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># form.cleaned_data 안에 있는 데이터를 요구사항에 맞게 처리합니다. </span></span><br><span class="line">            <span class="comment"># ... </span></span><br><span class="line">            <span class="comment"># 새로운 URL 로 리다이렉트 시켜줍니다.</span></span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/thanks/'</span>)</span><br><span class="line">    <span class="comment"># 만약 GET 이나 다른 method 의 요청을 받으면, 비어있는 폼을 생성합니다.</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        form = NameForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'name.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure><p><br><br>템플릿에 있는 name.html 에서 아래와 같이 <code></code>  이라고 출력하면, 폼이 출력 됩니다. </p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/your-name/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    &#123;% csrf_token %&#125;</span><br><span class="line">    &#123;&#123; form &#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"Submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br><a id="more"></a><br><p><code>&lt;form&gt;&lt;/form&gt;</code> 과 <code>&lt;input&gt;</code> 태그들을 제외한, 폼에 필요한 모든 필드들과 그 속성들은 <code></code> 이 HTML 마크업 언어로 자동으로 풀려져서 표시됩니다. </p><br><br><h2 id="FORM-and-CSRF-CROSS-SITE-REQEUST-FORGERY"><a href="#FORM-and-CSRF-CROSS-SITE-REQEUST-FORGERY" class="headerlink" title="FORM and CSRF (CROSS SITE REQEUST FORGERY)"></a>FORM and CSRF (CROSS SITE REQEUST FORGERY)</h2><br><blockquote><p><strong>Form 과 Cross Site Request Forgery Protection</strong></p><p>Django 는 사이트간 요청 위조에 방어할수 있는 기능을 쉽게 사용할수 있는 형태로 제공합니다.</p><p>폼이 POST 로 CSRF 보호가 활성화 되어 있을때, <code>csrf_token</code> 탬플릿 테그를 위의 예시처럼 꼭 써주어야만 합니다. </p><br><p>이 CSRF 보호 태그는, 자동으로 붙여지지 않기 때문에, 태그를 HTML 마크업에 붙여주어야 합니다. </p><figure class="highlight django"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name"><span class="name">csrf_token</span></span> %&#125;</span></span><br></pre></td></tr></table></figure></blockquote><br><br><h2 id="HTML5-와-브라우저-유효성"><a href="#HTML5-와-브라우저-유효성" class="headerlink" title="HTML5 와 브라우저 유효성"></a>HTML5 와 브라우저 유효성</h2><br><blockquote><p>*<em>인풋 타입과 브라우저 유효성 *</em></p><p>만약 여러분들의 폼이, URLField, EmailField 혹은 integer Field 같은 필드들을 포함하고 있으면, </p><p>Django 는 URL, email 그리고 숫자 HTML5 입력 타입들을 사용할것 입니다. </p><p>기본값으로, 브라우저들은 이런 필드들을 위해 그들만의 검증 방식을 적용할수 있고, 그것은 Django 의 유효성 검증 방식보다 더 깐간할수 있습니다. </p><br><p>이 동작을 비활성화 시키고 싶다면, form 태그 안에 novalidate 속성을 설정 하거나, </p><p>혹은, TextInput 과 같은 다른 widget 을 필드에 사용해 주면 됩니다. </p></blockquote><br><br><h2 id="폼의-개념"><a href="#폼의-개념" class="headerlink" title="폼의 개념"></a>폼의 개념</h2><br><p>Django 는 Django 폼으로 표현된 웹폼을 가지고 있을수 있습니다. </p><p>이 폼은 뷰로 프로세스가 되고, HTML 으로 렌더가 됩니다. </p><br><p>이것이 Django 폼을 시작하기 위해서 필요한 컨셉입니다만, form Framework 은 사용할것이 굉장히 많습니다. 위에 설명된 기본적인 동작만 잘 이해하면, 폼 시스템의 다른 기능들도 이해할 준비가 될것입니다. 그리고, 추가 기본 동작 방식에 대해서도 배울수 있습니다. </p><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/07/Django-Forms-10%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 9편 - Django 에서 폼만들기 2</title>
      <link>http://djangojeng-e.github.io/2020/10/06/Django-Forms-9%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-2/</link>
      <guid>http://djangojeng-e.github.io/2020/10/06/Django-Forms-9%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-2/</guid>
      <pubDate>Tue, 06 Oct 2020 01:24:02 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;The-View&quot;&gt;&lt;a href=&quot;#The-View&quot; class=&quot;headerlink&quot; title=&quot;The View&quot;&gt;&lt;/a&gt;The View&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;Django 웹사이트로 다시 전송된 폼 데이터는 뷰가 처리 합니다. &lt;/
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="The-View"><a href="#The-View" class="headerlink" title="The View"></a>The View</h2><br><p>Django 웹사이트로 다시 전송된 폼 데이터는 뷰가 처리 합니다. </p><p><br>보편적으로, 폼을 발행했던 뷰가 처리합니다. 이는, 같은 로직들을 재사용하게 해줍니다. </p><br><blockquote><p>폼을 다루기 위해서는, </p><p>뷰에서 폼을 발행하려고 하는 URL 을 위해 폼을 인스턴스화 시켜주어야 합니다. </p></blockquote><br><p>Django 에서 폼을 다루려면, 폼을 출력할 URL 을 생각해놓고, 폼을 발행하기 전에, 폼을 인스턴스화 시켜주어야 한다는 이야기 입니다. </p><br><br><h2 id="폼-인스턴스화-시켜주기"><a href="#폼-인스턴스화-시켜주기" class="headerlink" title="폼 인스턴스화 시켜주기"></a>폼 인스턴스화 시켜주기</h2><br><br><p>Django 프로젝트에서, buildingaform 이라는 앱을 따로 생성해주고 <br></p><p>buildingaform 앱 안의 구조가 아래와 같다고 가정해 봅시다. </p><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── admin.py</span><br><span class="line">├── apps.py</span><br><span class="line">├── forms.py      <span class="comment"># 이전 포스팅에서 작성한 forms.py 파일 </span></span><br><span class="line">├── __init__.py</span><br><span class="line">├── migrations</span><br><span class="line">│   ├── __init__.py</span><br><span class="line">├── models.py</span><br><span class="line">├── tests.py</span><br><span class="line">└── views.py     <span class="comment"># 전달된 폼데이터를 처리 혹은 폼을 인스턴스화</span></span><br></pre></td></tr></table></figure><br><p><code>forms.py</code>  파일이 생성되있는것을 확인할수 있고. <code>views.py</code> 가 전달된 폼 데이터를 처리 하거나, 폼을 인스턴스화 합니다. </p><br><blockquote><p><code>views.py</code> 파일을 간단하게 살펴보자면, </p></blockquote><br><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.http <span class="keyword">import</span> HttpResponseRedirect </span><br><span class="line"><span class="keyword">from</span> django.shortcuts <span class="keyword">import</span> render </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .forms <span class="keyword">import</span> NameForm </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_name</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">"POST"</span>: </span><br><span class="line">        <span class="comment"># 요청이, POST 라면, form 인스턴스를 아래와 같이 생성해줍니다.</span></span><br><span class="line">        form = NameForm(request.POST)</span><br><span class="line">        <span class="comment"># 유효한 데이터인지 검사하기 위해, is_valid 메서드를 사용해 줍니다. </span></span><br><span class="line">        <span class="keyword">if</span> form.is_valid():</span><br><span class="line">            <span class="comment"># form.cleaned_data 안에 있는 데이터를 요구사항에 맞게 처리할 로직을 작성합니다 </span></span><br><span class="line">            <span class="comment"># ..</span></span><br><span class="line">            <span class="comment"># 새로운 URL 로 리다이렉트 시켜줍니다 </span></span><br><span class="line">            <span class="keyword">return</span> HttpResponseRedirect(<span class="string">'/thanks/'</span>)</span><br><span class="line">    <span class="comment"># 만약, GET 이나 다른 method 의 요청을 받으면, 비어있는 폼을 생성합니다 </span></span><br><span class="line">    <span class="keyword">else</span>: </span><br><span class="line">        form = NameForm()</span><br><span class="line">    <span class="keyword">return</span> render(request, <span class="string">'name.html'</span>, &#123;<span class="string">'form'</span>: form&#125;)</span><br></pre></td></tr></table></figure><br><br><h2 id="Views-py-에서-폼을-처리하는-포인트"><a href="#Views-py-에서-폼을-처리하는-포인트" class="headerlink" title="Views.py 에서 폼을 처리하는 포인트"></a>Views.py 에서 폼을 처리하는 포인트</h2><br><ul><li><p><strong>GET 요청으로 이 뷰에 요청이 들어오면</strong> </p><p>해당 뷰는 비어있는 폼 인스턴스를 생성하고, 폼이 렌더될 템플릿 컨텍스트에 넣어놓습니다. 이것은, 우리가 처음 폼이 존재하는 URL 에 방문하였을때 예상할수 있는 일입니다. 비어있는 폼 인스턴스를 생성하였기 때문에, 비어있는 폼이 화면에 출력 됩니다. <br></p></li><li><p><strong>POST 요청으로 사용자가 폼을 제출 하면</strong>  </p><p>해당 뷰는, 또다시 폼 인스턴스를 생성하는데, 요청으로부터 들어온 데이터를 채워줍니다 <code>form=NameForm(request.POST)</code>. 이를 두고, 데이터를 폼에 묶어준다고 표현합니다. <br></p></li><li><p><strong><code>is_valid()</code> 메서드를 호출 합니다</strong> </p><p> <code>is_valid()</code> 를 호출하였을때, True 가 반환되지 않는다면 (즉 False 가 반환될때), 폼과 함께 템플릿으로 다시 돌아갑니다. 이렇게 다시 폼이 출력되는 화면으로 돌아갈때에는, 비어 있는 폼이 아닐수 있습니다. 이전에 제출된 데이터로 채워져 있을것입니다. 따라서, 이전에 제출된 데이터들을 요구사항에 따라 수정 혹은 고쳐줄수 있습니다.  <br></p></li><li><p><strong>만약 <code>is_valid()</code> 가 True 라면</strong> </p><p>유효한 Form data  들을 <code>cleaned_data</code> 속성에서 찾을수 있을것입니다. 이 <code>cleaned_data</code> 속성 안에 드렁있는 데이터를 사용하여, 데이터베이스를 업데이트 하거나, 혹은 다른 처리과정을 HTTP redirect 를 하기전에 수행할수 있습니다.<br></p></li></ul><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/06/Django-Forms-9%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 8편 - Django 에서 폼만들기 1</title>
      <link>http://djangojeng-e.github.io/2020/10/05/Django-Forms-8%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-1/</link>
      <guid>http://djangojeng-e.github.io/2020/10/05/Django-Forms-8%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-1/</guid>
      <pubDate>Mon, 05 Oct 2020 02:18:48 GMT</pubDate>
      <description>
      
        &lt;h2 id=&quot;The-Form-Class&quot;&gt;&lt;a href=&quot;#The-Form-Class&quot; class=&quot;headerlink&quot; title=&quot;The Form Class&quot;&gt;&lt;/a&gt;The Form Class&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;우리는 이미 우리가 필요한 HTML 폼이 어떻게 보여질지 알고 있습니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;action&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;/your-name/&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;method&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;post&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;for&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;your_name&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;Your name: &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;label&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;your_name&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;your_name&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;value&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;&amp;#123; current_name &amp;#125;&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;submit&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;values&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;OK&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;form&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;해당 폼을 Django 에서 사용하기 위한 시작점은 아래와 같습니다. &lt;br&gt;&lt;/p&gt;
&lt;p&gt;앱 안에서 사용될 Django 폼을 만드려면, &lt;/p&gt;
&lt;br&gt;

&lt;h2 id=&quot;forms-py&quot;&gt;&lt;a href=&quot;#forms-py&quot; class=&quot;headerlink&quot; title=&quot;forms.py&quot;&gt;&lt;/a&gt;forms.py&lt;/h2&gt;&lt;br&gt;

&lt;p&gt;해당 앱안에  forms.py 파일을 만들어 줍니다. 그리고 아래와 같이 작성해 줍니다. &lt;/p&gt;
&lt;br&gt;

&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; django &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; forms &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NameForm&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(forms.Form)&lt;/span&gt;:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	your_name = forms.CharField(label=&lt;span class=&quot;string&quot;&gt;&quot;Your name&quot;&lt;/span&gt;, max_length=&lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;br&gt;

&lt;p&gt;이 폼 클래스는, 하나의 필드 &lt;code&gt;your_name&lt;/code&gt; 을 가진 하나의 폼 클래스를 정의합니다. &lt;/p&gt;
&lt;br&gt;

&lt;p&gt;폼 클래스의 필드에서 우리는, 사람에게 친숙한 레이블을 필드에 적용해 주었씁니다 (이 경우에는, 우리가 지정한 label 의 경우 우리가 빠트렸어도 자동으로 생성되었을 것이긴 합니다)&lt;/p&gt;
&lt;br&gt;

&lt;p&gt;필드의 최대 허용 길이는 max_length 로 정의 됩니다. 이것은 두가지 일을 합니다. &lt;/p&gt;
&lt;p&gt;&lt;br&gt;
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="The-Form-Class"><a href="#The-Form-Class" class="headerlink" title="The Form Class"></a>The Form Class</h2><br><p>우리는 이미 우리가 필요한 HTML 폼이 어떻게 보여질지 알고 있습니다. </p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/your-name/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"your_name"</span>&gt;</span>Your name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"your_name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"your_name"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; current_name &#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">values</span>=<span class="string">"OK"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>해당 폼을 Django 에서 사용하기 위한 시작점은 아래와 같습니다. <br></p><p>앱 안에서 사용될 Django 폼을 만드려면, </p><br><h2 id="forms-py"><a href="#forms-py" class="headerlink" title="forms.py"></a>forms.py</h2><br><p>해당 앱안에  forms.py 파일을 만들어 줍니다. 그리고 아래와 같이 작성해 줍니다. </p><br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django <span class="keyword">import</span> forms </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NameForm</span><span class="params">(forms.Form)</span>:</span></span><br><span class="line">your_name = forms.CharField(label=<span class="string">"Your name"</span>, max_length=<span class="number">100</span>)</span><br></pre></td></tr></table></figure><br><p>이 폼 클래스는, 하나의 필드 <code>your_name</code> 을 가진 하나의 폼 클래스를 정의합니다. </p><br><p>폼 클래스의 필드에서 우리는, 사람에게 친숙한 레이블을 필드에 적용해 주었씁니다 (이 경우에는, 우리가 지정한 label 의 경우 우리가 빠트렸어도 자동으로 생성되었을 것이긴 합니다)</p><br><p>필드의 최대 허용 길이는 max_length 로 정의 됩니다. 이것은 두가지 일을 합니다. </p><p><br><a id="more"></a></p><br><ul><li>max_length=100 으로 HTML <code>&lt;input&gt;</code> 태그에 지정하여, 브라우저가 사용자가 해당길이 이상으로 입력하는것을 방지 합니다. </li><li>또한, Django 가 폼을 브라우저에서 다시 받을때에, 데이터의 길이에 대한 유효성을 체크 할겁니다 </li></ul><br><br><h2 id="is-valid-메서드"><a href="#is-valid-메서드" class="headerlink" title="is_valid() 메서드"></a><code>is_valid()</code> 메서드</h2><br><blockquote><p><strong>하나의 Form 인스턴스는 is_valid() 메서드를 가지고 있습니다</strong> </p><p>이 메서드는, 폼안에 있는 모든 필드의 검증 루틴을 실행합니다 </p><p>이 메서드가 호출 되었을때, 모든 필드가 유효한 데이터를 가지고 있는 경우,</p><ul><li>True   를 리턴합니다 </li><li>그리고, 폼의 데이터를 cleaned_data 속성에 넣어놓습니다 </li></ul></blockquote><br><p>Django 폼 클래스 전체가 처음으로 브라우저에 렌더링 될때에는, 아래와 같이 보일겁니다.  </p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"your_name"</span>&gt;</span>Your name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"your_name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"your_name"</span> <span class="attr">maxlength</span>=<span class="string">"100"</span> <span class="attr">required</span>&gt;</span></span><br></pre></td></tr></table></figure><br><br><p>주의할점은, <code>&lt;form&gt;</code> 태그 혹은 <code>submit</code> 버튼은 포함되지 않는다는것을 숙지해야 합니다. 이런것들은 우리가 스스로 템플릿에 넣어줘야 합니다. </p><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/05/Django-Forms-8%ED%8E%B8-Django-%EC%97%90%EC%84%9C-%ED%8F%BC%EB%A7%8C%EB%93%A4%EA%B8%B0-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>Django Forms 7편 - 필요한 작업들</title>
      <link>http://djangojeng-e.github.io/2020/10/05/Django-Forms-7%ED%8E%B8-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9E%91%EC%97%85%EB%93%A4/</link>
      <guid>http://djangojeng-e.github.io/2020/10/05/Django-Forms-7%ED%8E%B8-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9E%91%EC%97%85%EB%93%A4/</guid>
      <pubDate>Mon, 05 Oct 2020 02:07:39 GMT</pubDate>
      <description>
      
        
        
          &lt;h2 id=&quot;The-work-that-needs-to-be-done&quot;&gt;&lt;a href=&quot;#The-work-that-needs-to-be-done&quot; class=&quot;headerlink&quot; title=&quot;The work that needs to be done&quot;&gt;
        
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="The-work-that-needs-to-be-done"><a href="#The-work-that-needs-to-be-done" class="headerlink" title="The work that needs to be done"></a>The work that needs to be done</h2><br><p>여러분들이 사용자의 이름을 얻기위해 필요한 간단한 폼을, 웹사이트에 생성하고 싶다고 가정해 봅시다. </p><p>여러분들은 아마 아래와 같은 코드를, 여러분들의 템플릿 안에 필요로 할것 입니다. </p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/your-name/"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"your_name"</span>&gt;</span>Your name: <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"your_name"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"your_name"</span> <span class="attr">value</span>=<span class="string">"&#123;&#123; current_name &#125;&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">values</span>=<span class="string">"OK"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><br><p>위의 간단한 폼을 잠시 둘러보자면, </p><br><ol><li>브라우저에게 POST 메서드를 사용하여, 폼 데이터를 <code>/your-name/URL</code>  에 반환하라고 얘기합니다 </li><li><code>Your name</code> 으로 레이블 되고, <code>OK</code> 가 쓰여진 버튼을 출력합니다 </li><li>만약에 template 에 전달된 context 에 <code>current_name</code>  이라는 변수를 가지고 있다면, <code>your_name</code> 필드를 미리 채우는데에 사용될것입니다. </li></ol><br><p>위의 HTML 폼을 가지고 있는 템플릿을 렌더해줄 뷰가 필요할것 입니다. 그리고, 그 뷰는 current_name 필드를 적절하게 제공해줄수 있습니다.  </p><br><h2 id="폼이-제출될때"><a href="#폼이-제출될때" class="headerlink" title="폼이 제출될때"></a>폼이 제출될때</h2><br><p>폼이 제출 될때에는, 폼 데이터를 가지고 있는 POST 요청이 서버에 보내집니다. </p><br><p>요청이 보내졌을때에, <code>/your-name/</code> URL 과 상응하는 뷰도 필요할것입니다. 이 뷰는 적절한 키/값 페어들을 요청안에서 찾을것이고, 그것들을 처리해줄것 입니다. </p><br><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><br><p>위의 예시는, 매우매우 간단한 폼입니다. 실전에서는, 하나의 폼이 10개 혹은 100개의 필드들을 가질수도 있고, 많은것들이 미리 채워져야 할 필요가 있을수 있습니다. </p><br><p>그렇지 않으면, 사용자가 몇번의 수정-제출 을 통해 폼의 동작이 결정될수 있습니다. </p><br><p>우리는 브라우저에서 어떠한 유효성 검사가 필요할지도 모릅니다. 심지어 폼이 제출되기 전에도 말이죠. </p><br><p>사용자들이 날짜를 달력에서 선택하는것 같이 아주 복잡한 필드들을 사용하길 원할지도 모릅니다. </p><br><p>일단, Django 가 이런것들을 위해 기본 작업을 하게 하는것이 훨씬 쉬운 길이 될수 있습니다. (직접 모든것을 구현하려면, 힘듭니다;)</p><br><br>]]></content:encoded>
      
      <comments>http://djangojeng-e.github.io/2020/10/05/Django-Forms-7%ED%8E%B8-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9E%91%EC%97%85%EB%93%A4/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
